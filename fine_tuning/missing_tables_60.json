[
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO characters (MovieID, ActorID, Character_Name, creditOrder, pay, screentime)  VALUES (469, 870, 'Lord Dingwall', 5, NULL, NULL);\n\nDatabase State:\nNo table exists yet",
        "Response": "Table: characters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO taxon (label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, catalogue_of_life_id, gram_staining, lpsn_url, microsoft_academic_id)  VALUES ('Gardnerella vaginalis', 'species of facultative anaerobic bacteria', 'Gardnerella', 'Gardnerella vaginalis', 'taxon', 'species', '961851.0', '/m/01tm4f', '2702.0', '5427785.0', '10032492.0', '6JWJB', 'gram-positive bacteria', 'http://www.bacterio.net/gardnerella.html#vaginalis', '2780018483.0');\n\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, instance_of, strand_orientation, genomic_start, genomic_end, ncbi_locus_tag]",
        "Response": "Table: taxon"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO twitter (TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID)  VALUES ('tw-702772587919757313', 'Thursday', 1, 25, 'en', 'FALSE', 130, 0, 0, 36, 0.0, '#MWC16: Ericsson &amp; Amazon Web Services create #cloud infrastructure alliance http://www.currentanalysis.com/Compete/Login.aspx?ReturnUrl=/COMPETE/FrontEnd/Service.aspx?alert%3D1%26tag%3D805%26rid%3D98019&alert=1&tag=805&rid=98019&__c85f6fcc=_c85f6fcc #teamericsson http://twitter.com/contact_mohit3/status/702772587919757313/photo/1', 1331, 'tw-44060694');\n\nDatabase State:\n- Table: twitter, Columns: [TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID]",
        "Response": "Table: twitter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('F1', '2008-05-17', 'Lens', 'Bordeaux', 2, 2, 'D', 2008);\n\nDatabase State:\n- Table: matchs, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start)  VALUES ('aromatic acid decarboxylase tll1031', 'microbial gene found in Thermosynechococcus elongatus BP-1', 'Thermosynechococcus elongatus BP-1', '1012367', 'gene', 'Aromatic acid decarboxylase tll1031', 'tll1031', 'gene', '1061760', 'reverse strand', '1061128');\n\nDatabase State:\nNo table exists yet",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1031, 'Smith', 'Sarah', 20, 'F', 550, 8772, 'PHL');\n\nDatabase State:\n- Table: Participates_in, Columns: [stuid, actid]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO ship (Ship_ID, Name, Type, Nationality, Tonnage)  VALUES (1, 'Corbridge', 'Cargo ship', 'United Kingdom', 3687);\n\nDatabase State:\nNo table exists yet",
        "Response": "Table: ship"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Characteristics (characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details)  VALUES (7, 'Grade', 'et', 'cool', NULL);\n\nDatabase State:\n- Table: Characteristics, Columns: [characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details]\n- Table: Ref_Product_Categories, Columns: [product_category_code, product_category_description, unit_of_measure]\n- Table: Ref_Characteristic_Types, Columns: [characteristic_type_code, characteristic_type_description]",
        "Response": "Table: Characteristics"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO sales_in_weather (date, store_nbr, item_nbr, units)  VALUES ('2012-10-14', 27, 18, 0);\n\nDatabase State:\nNo table exists yet",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO works_on (Essn, Pno, Hours)  VALUES (999887777, 10, 10.0);\n\nDatabase State:\n- Table: department, Columns: [Dname, Dnumber, Mgr_ssn, Mgr_start_date]",
        "Response": "Table: works_on"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, game_publisher_id, platform_id, release_year)  VALUES (7275, 3594, 10, 2012);\n\nDatabase State:\n- Table: game, Columns: [id, genre_id, game_name]\n- Table: game_platform, Columns: [id, game_publisher_id, platform_id, release_year]\n- Table: publisher, Columns: [id, publisher_name]\n- Table: game_publisher, Columns: [id, game_id, publisher_id]\n- Table: platform, Columns: [id, platform_name]",
        "Response": "Table: game_platform"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Document_Structures (document_structure_code, parent_document_structure_code, document_structure_description)  VALUES ('1', '1', 'Header');\n\nDatabase State:\n- Table: Documents, Columns: [document_code, document_structure_code, document_type_code, access_count, document_name]\n- Table: Document_Sections, Columns: [section_id, document_code, section_sequence, section_code, section_title]\n- Table: Document_Sections_Images, Columns: [section_id, image_id]\n- Table: Document_Functional_Areas, Columns: [document_code, functional_area_code]\n- Table: Document_Structures, Columns: [document_structure_code, parent_document_structure_code, document_structure_description]",
        "Response": "Table: Document_Structures"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, encoded_by, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of)  VALUES ('B12-dependent methionine synthase CT1857', 'microbial protein found in Chlorobaculum tepidum TLS', 'Q8KBD1', 'B12-dependent methionine synthase CT1857', 'cell metabolism', 'methionine synthase activity', 'Methionine synthase, B12-binding domain', 'Chlorobium tepidum TLS', 'NP_662735', 'protein', 'Cobalamin-binding domain superfamily', 'protein');\n\nDatabase State:\n- Table: molecular_function, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]\n- Table: biological_process, Columns: [label, description, instance_of, gene_ontology_id, subclass_of, exact_match]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, gram_staining, lpsn_url]\n- Table: cobalamin_vitamin_b12_binding_module_cap_domain_protein_family, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO natural_product (label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number)  VALUES ('Yersinia pestis CO92', 'bacterial strain', 'Yersinia pestis CO92', 'Yersinia pestis', '214092', 'strain', 'Gram-negative bacteria', 'GCA_001293415.1');\n\nDatabase State:\n- Table: natural_product, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: natural_product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO advisedBy (p_id, p_id_dummy)  VALUES (362, 335);\n\nDatabase State:\n- Table: course, Columns: [course_id, courseLevel]\n- Table: advisedBy, Columns: [p_id, p_id_dummy]",
        "Response": "Table: advisedBy"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO AREA_CODE_STATE (area_code)  VALUES (318, 'LA');\n\nDatabase State:\n- Table: AREA_CODE_STATE, Columns: [area_code]\n- Table: CONTESTANTS, Columns: [contestant_number]\n- Table: VOTES, Columns: [vote_id]",
        "Response": "Table: AREA_CODE_STATE"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, taxon_name, taxon_rank, parent_taxon, instance_of, ncbi_taxonomy_id, gbif_taxon_id, itis_tsn, gram_staining, irmng_id, lpsn_url, microsoft_academic_id)  VALUES ('Mesorhizobium', 'genus of bacteria', 'Mesorhizobium', 'genus', 'Phyllobacteriaceae', 'taxon', '68287', '3220966', '957570.0', 'Gram-negative bacteria', '1059226.0', 'http://www.bacterio.net/mesorhizobium.html', '2777301280.0');\n\nDatabase State:\n- Table: natural_product, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]\n- Table: haem_oxygenase_hugz_like_superfamily, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, has_parts, instance_of, refseq_protein_id, part_of]\n- Table: taxon, Columns: [label, description, taxon_name, taxon_rank, parent_taxon, instance_of, ncbi_taxonomy_id, gbif_taxon_id, itis_tsn, gram_staining, irmng_id, lpsn_url, microsoft_academic_id]\n- Table: encodes, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, has_parts, instance_of, refseq_protein_id, part_of]\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: taxon"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (playerID, year, stint, tmID, lgID, GP, Min, W, L, T/OL, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA)  VALUES ('sawchte01', 1966, 1, 'TOR', 'NHL', '28', '1409', '15', '5', '4', '0', '2', '66', NULL, '10', '565', '6', '4', NULL, '0', '0', '25', NULL);\n\nDatabase State:\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]\n- Table: SeriesPost, Columns: [year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L, T, GoalsWinner, GoalsLoser, note]\n- Table: AwardsPlayers, Columns: [playerID, award, year, lgID, note, pos]\n- Table: abbrev, Columns: [Type, Code, Fullname]\n- Table: Teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: Master, Columns: [playerID, coachID, hofID, firstName, lastName, nameNote, nameGiven, nameNick, height, weight, shootCatch, legendsID, ihdbID, hrefID, firstNHL, lastNHL, firstWHA, lastWHA, pos, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity, deathYear, deathMon, deathDay, deathCountry, deathState, deathCity]\n- Table: TeamVsTeam, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]",
        "Response": "Table: Goalies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  VALUES ('2018/8/22', 20409, 'N709JB', 80, 14570, 1457002, 34570, 'RNO', 12478, 1247805, 31703, 'JFK', 2244, 2250, 6, 6, 634, -21, 0, 0, NULL, 311, 284, NULL, NULL, NULL, NULL, NULL);\n\nDatabase State:\n- Table: Airlines, Columns: [FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY]\n- Table: Air_Carriers, Columns: [Code, Description]\n- Table: Airports, Columns: [Code, Description]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, sport, competition_class, on_focus_list_of_wikimedia_project, participating_team, follows, followed_by, time_period)  VALUES ('1966 Indian Women''s Team Badminton Championships', 'badminton championships', 'Indian Women''s Team Badminton Championships', 'India', 'badminton', 'women''s team', 'WikiProject Badminton/tournament focus list', 'Maharashtra', '1965 Indian Women''s Team Badminton Championships', '1967 Indian Women''s Team Badminton Championships', '1965-1966 one-year-period');\n\nDatabase State:\n- Table: follows, Columns: [label, description, instance_of, country, sport, competition_class, on_focus_list_of_wikimedia_project, participating_team, followed_by, time_period, follows]\n- Table: indian_womens_team_badminton_championships, Columns: [label, description, instance_of, country, sport, competition_class, on_focus_list_of_wikimedia_project, participating_team, followed_by, time_period, follows]\n- Table: era, Columns: [label, description, instance_of, duration, start_time, end_time, short_name, follows, followed_by, series_ordinal]\n- Table: followed_by, Columns: [label, description, instance_of, country, sport, competition_class, on_focus_list_of_wikimedia_project, participating_team, follows, followed_by, time_period]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, position_held, commons_category, instance_of, sex_or_gender, viaf_id, isni, occupation, given_name, date_of_birth, place_of_birth, country_of_citizenship, educated_at, signature, spouse, languages_spoken_written_or_signed, gnd_id, library_of_congress_authority_id, award_received, freebase_id, religion_or_worldview, name_in_native_language, treccani_id, munzinger_person_id, plwabn_id, worldcat_identities_id, fast_id, image, store_norske_leksikon_id, opensanctions_id, eu_knowledge_graph_item_id)  VALUES ('Frank-Walter Steinmeier', 'president of Germany', 'president of Germany', 'Frank-Walter Steinmeier', 'human', 'male', '84241123', '0000 0000 7856 9134', 'politician', 'Frank-Walter', '+1956-01-05T00:00:00Z', 'Detmold', 'Germany', 'University of Giessen', 'Signature Frank-Walter Steinmeier.svg', 'Elke B\u00fcdenbender', 'German', '113572026', 'n96082936', 'Knight Grand Cross of the Order of Merit of the Italian Republic', '/m/089zlv', 'Evangelical Church in Berlin, Brandenburg and Silesian Upper Lusatia', 'Frank-Walter Steinmeier', 'frank-walter-steinmeier', '22788', '9810551896105606.0', 'lccn-n96082936', '1917160.0', 'Frank-Walter Steinmeier - 2018 (cropped) 2.jpg', 'Frank-Walter_Steinmeier', 'Q76658', 'Q120');\n\nDatabase State:\n- Table: part, Columns: [label, description, commons_category, topics_main_category, gnd_id, freebase_id, instance_of, quora_topic_id, coordinate_location, has_parts, viaf_id, locator_map_image, worldcat_identities_id, den_store_danske_id]\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, new_york_times_topic_id, babelnet_id, geonames_id, gnd_id, unicode_character, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, coordinates_of_westernmost_point, geography_of_topic, stw_thesaurus_for_economics_id, iso_3166_1_alpha_3_code, office_held_by_head_of_government, quora_topic_id, curlie_id, country, native_label, basic_form_of_government, musicbrainz_area_id, has_quality, coat_of_arms_image, uic_alphabetical_country_code, mesh_descriptor_id, located_in_or_next_to_body_of_water, insee_countries_and_foreign_territories_code, diplomatic_relation, highest_judicial_authority, ituisoiec_object_identifier, commons_gallery, inception, viaf_id, civicus_monitor_country_entry, nuts_code, history_of_topic, gran_enciclop\u00e8dia_catalana_id, freebase_id, replaces, subreddit, continent, capital, coat_of_arms, demonym, geoshape, openstreetmap_relation_id, wipo_st3, coordinates_of_northernmost_point, coordinates_of_easternmost_point, nkcr_aut_id, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, flag_image, marriageable_age, topics_main_category, le_monde_diplomatique_subject_id, head_of_state, biblioth\u00e8que_nationale_de_france_id, category_of_people_buried_here, locator_map_image, bbc_things_id, age_of_majority, dewey_decimal_classification, area, head_of_government, fast_id, ioc_country_code, member_of, official_name, unemployment_rate, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, gs1_country_code, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, located_in_time_zone, category_for_people_who_died_here, yso_id, anthem, office_held_by_head_of_state, life_expectancy, part_of, commons_category, top_level_internet_domain, shares_border_with, instance_of, highest_point, category_for_people_born_here, short_name, number_of_out_of_school_children, driving_side, uic_numerical_country_code, on_focus_list_of_wikimedia_project, lowest_point, treccani_id, iso_3166_1_numeric_code, official_language, pronunciation_audio, idref_id, giant_bomb_id, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, statoids_id, library_of_congress_authority_id, iso_3166_1_alpha_2_code, flag, coordinate_location, fips_10_4_countries_and_regions, described_by_source, isni, brockhaus_enzyklop\u00e4die_online_id, klexikon_article_id, loc_and_marc_vocabularies_id, language_used, iab_code, legislative_body, comic_vine_id, category_of_associated_people, whos_on_first_id, world_encyclopedia_of_puppetry_arts_id, dr_topic_id, inaturalist_place_id, omegawiki_defined_meaning, hds_id, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, online_pwn_encyclopedia_id, eurovoc_id, worldcat_identities_id, motto_text, open_data_portal, kbpedia_id, grove_art_online_id, store_norske_leksikon_id, rkd_thesaurus_id, pm20_geo_code, interlingual_index_id, jewish_encyclopedia_id_russian, central_bank, bbc_news_topic_id, economy_of_topic, tasteatlas_id, sapa_id, bhcl_uuid, uk_parliament_thesaurus_id, github_topic, wordnet_31_synset_id, namuwiki_id, demographics_of_topic, joconde_location_id, national_library_of_israel_j9u_id, zhihu_topic_id, idaigazetteer_id, krugosvet_article, schoenberg_database_of_manuscripts_place_id, the_world_factbook_country_id, colon_classification, democracy_index, nese_id, der_spiegel_topic_id, museum_digital_place_id, ysa_id, postimees_topic_id, yle_topic_id, wikisimpsons_id, den_store_danske_id, urban_electric_transit_country_id, hashtag, m49_code, s\u00fcddeutsche_zeitung_topic_id, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, gini_coefficient, official_website, nalt_id, national_library_of_israel_id_old, vat_rate]\n- Table: administrative_territorial_entity, Columns: [label, description, country, located_in_the_administrative_territorial_entity, coat_of_arms_image, capital, commons_category, coordinate_location, topics_main_category, instance_of, freebase_id, geonames_id, category_of_associated_people, openstreetmap_relation_id, official_website, shares_border_with, area, locator_map_image, population, inaturalist_place_id]",
        "Response": "Table: head_of_state"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO route (train_id, station_id)  VALUES (7, 5);\n\nDatabase State:\nNo table exists yet",
        "Response": "Table: route"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO citation (label, description, pubmed_id, instance_of, published_in, volume, issue, pages, author_name_string, cites_work, doi, publication_date, title)  VALUES ('Identification of an acid-activated Cl(-) channel from human skeletal muscles', 'scientific article', '10564087', 'scholarly article', 'American Journal of Physiology', '277', '5 Pt 1', 'C948-54', 'M Kawasaki', 'Characterization of a human and murine gene (CLCN3) sharing similarities to voltage-gated chloride channels and to a yeast integral membrane protein', '10.1152/AJPCELL.1999.277.5.C948', '+1999-11-00T00:00:00Z', 'Identification of an acid-activated Cl(-) channel from human skeletal muscles');\n\nDatabase State:\n- Table: topic, Columns: [label, description, instance_of, commons_category, bncf_thesaurus_id, topics_main_category, freebase_id, library_of_congress_authority_id, mesh_descriptor_id, biblioth\u00e8que_nationale_de_france_id, quora_topic_id, jstor_topic_id, encyclop\u00e6dia_britannica_online_id, subclass_of, omegawiki_defined_meaning, microsoft_academic_id, yso_id, mesh_tree_code, national_library_of_israel_j9u_id, openalex_id, nkcr_aut_id]\n- Table: publisher, Columns: [label, description, official_website, country, instance_of, isni, ringgold_id, headquarters_location, inception, microsoft_academic_id, library_of_congress_authority_id, romeo_publisher_id, viaf_id, worldcat_identities_id, freebase_id, publons_publisher_id]\n- Table: citation, Columns: [label, description, pubmed_id, instance_of, published_in, volume, issue, pages, author_name_string, cites_work, doi, publication_date, title]\n- Table: publishing, Columns: [label, description, instance_of, official_website, issn, era_journal_id, scopus_source_id, danish_bibliometric_research_indicator_bfi_snocno, danish_bibliometric_research_indicator_level, publisher, title, nlm_unique_id, opencitations_bibliographic_resource_id, language_of_work_or_name, country_of_origin, inception, uniprot_journal_id, jufo_id, main_subject, acnp_journal_id, crossref_journal_id, scilit_journal_id, indexed_in_bibliographic_review, issn_l, freebase_id, openalex_id]\n- Table: stimuli_sensing_channels, Columns: [label, description, found_in_taxon, reactome_id, instance_of, cites_work, part_of, has_parts, exact_match]",
        "Response": "Table: citation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, Name, CountryCode, District, Population)  VALUES (1778, 'Kashiwazaki', 'JPN', 'Niigata', 91229);\n\nDatabase State:\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, instance_of, heritage_designation, located_in_the_administrative_territorial_entity, street_address, bavarian_monument_map_object_id_architectural_monument, coordinate_location)  VALUES ('Saalkirche', 'cultural heritage monument D-1-78-123-22 (0) in Fahrenzhausen, Bavaria', 'Germany', 'aisleless church', 'architectural heritage monument in Bavaria', 'Fahrenzhausen', 'Stephansweg 8', '55455.0', '48.37993514236');\n\nDatabase State:\n- Table: historic_preservation, Columns: [label, description, subclass_of, commons_category, country]\n- Table: aisleless_church, Columns: [label, description, country, instance_of, heritage_designation, located_in_the_administrative_territorial_entity, street_address, bavarian_monument_map_object_id_architectural_monument, coordinate_location]\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, country, coat_of_arms_image, german_municipality_key, commons_category, coordinate_location, freebase_id, gnd_id, geonames_id, population, located_in_the_administrative_territorial_entity, topics_main_category, official_website, viaf_id, postal_code, locator_map_image, elevation_above_sea_level, area, local_dialing_code, openstreetmap_relation_id, image, located_in_time_zone, licence_plate_code, whos_on_first_id, factgrid_item_id, german_regional_key]",
        "Response": "Table: aisleless_church"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Payments (Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment)  VALUES (754, 516, 'Visa', '2018-02-24', 7343);\n\nDatabase State:\n- Table: Payments, Columns: [Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]\n- Table: Customer_Policies, Columns: [Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date]\n- Table: Claims, Columns: [Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]",
        "Response": "Table: Payments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, ine_municipality_code, located_in_the_administrative_territorial_entity, commons_category, country, coat_of_arms_image, locator_map_image, postal_code, located_in_time_zone, coordinate_location, openstreetmap_relation_id, topics_main_category, instance_of, freebase_id, gran_enciclop\u00e8dia_catalana_id, geonames_id, shares_border_with, viaf_id, library_of_congress_authority_id, area, population, demonym, image, office_held_by_head_of_government, head_of_government, whos_on_first_id, national_library_of_israel_j9u_id, factgrid_item_id, official_website, elevation_above_sea_level, idescat_territorial_code_in_catalonia, licence_plate_code, number_of_households, category_for_maps, official_name, male_population, female_population, inspire_id, official_language)  VALUES ('Montsi\u00e0', 'comarca (county) of Catalonia in Spain', 'nan', 'Terres de l''Ebre', 'Montsi\u00e0', 'Spain', 'Escudo del Montsi\u00e0.svg', 'Localitzaci\u00f3 del Montsi\u00e0.svg', 'nan', 'nan', '40.7', 'nan', 'Category:Montsi\u00e0', 'comarca of Catalonia', '/m/02yz9_', '44146', 'nan', 'Baix Ebre', 'nan', 'nan', 735.3999999999999773, 67436.0, 'montsianenc', 'Amposta - Ermita de la Mare de D\u00e9u del Montsi\u00e0.jpg', 'president of Comarcal Council of Montsi\u00e0', 'nan', 'nan', 'nan', 'nan', 'nan', NULL, '22.0', 'nan', NULL, 'Category:Maps of Montsi\u00e0', 'nan', NULL, NULL, 'nan', 'nan');\n\nDatabase State:\nNo table exists yet",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO people (People_ID, Nationality, Name, Birth_Date, Height)  VALUES (4, 'Russia', 'Sergey Grankin', 'January 22, 1987', 193.0);\n\nDatabase State:\n- Table: poker_player, Columns: [Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings]",
        "Response": "Table: people"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Degree_Programs (degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details)  VALUES (3, 13, 'Master', 'placeat', NULL);\n\nDatabase State:\n- Table: Sections, Columns: [section_id, course_id, section_name, section_description, other_details]\n- Table: Transcript_Contents, Columns: [student_course_id, transcript_id]",
        "Response": "Table: Degree_Programs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO alias (zip_code, alias)  VALUES (87111, 'Albuquerque');\n\nDatabase State:\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]\n- Table: alias, Columns: [zip_code, alias]\n- Table: avoid, Columns: [zip_code, bad_alias]\n- Table: area_code, Columns: [zip_code, area_code]\n- Table: zip_congress, Columns: [zip_code, district]",
        "Response": "Table: alias"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, ensembl_protein_id, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of)  VALUES ('Transcription factor IIA L Dmel_CG5930', 'Protein found in Drosophila melanogaster', 'FBpp0084525', 'TfIIA-L', 'P52654', 'transcription, DNA-templated', 'TFIID-class transcription factor complex binding', 'nucleus', 'Drosophila melanogaster', 'NP_476995', 'protein', 'Transcription factor IIA, alpha/beta subunit');\n\nDatabase State:\n- Table: encodes, Columns: [label, description, ensembl_protein_id, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: chromosome, Columns: [label, description, refseq_genome_id, found_in_taxon, instance_of]\n- Table: expressed_in, Columns: [label, description, foundational_model_of_anatomy_id, subclass_of, instance_of, microsoft_academic_id]\n- Table: transcription_factor_iia_beta_barrel, Columns: [label, description, ensembl_protein_id, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Quantity (quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional)  VALUES (3099, 680, 3480, 2.0, 2.0, 'pound(s)', 'cubed', 'FALSE');\n\nDatabase State:\n- Table: Nutrition, Columns: [recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories]\n- Table: Ingredient, Columns: [ingredient_id, category, name, plural]",
        "Response": "Table: Quantity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO 2016_united_states_presidential_election (label, description, part_of, followed_by, office_contested, follows, commons_category, point_in_time, instance_of, country, applies_to_jurisdiction, google_knowledge_graph_id, ballotpedia_id)  VALUES ('2016 United States presidential election in Vermont', 'election in Vermont', '2016 United States presidential election', '2020 United States presidential election in Vermont', 'President of the United States', '2012 United States presidential election in Vermont', 'United States presidential election in Vermont, 2016', '+2016-11-08T00:00:00Z', 'United States presidential election in Vermont', 'United States of America', 'Vermont', '/g/11cjj94dlp', 'Presidential_election_in_Vermont,_2016');\n\nDatabase State:\nNo table exists yet",
        "Response": "Table: 2016_united_states_presidential_election"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encodes (label, description, found_in_taxon, subclass_of, uniprot_protein_id, encoded_by, instance_of, biological_process, refseq_protein_id, part_of)  VALUES ('Sporulation and cell division protein SsgA AMED_0264', 'microbial protein found in Amycolatopsis mediterranei U32', 'Amycolatopsis mediterranei U32', 'protein', 'A0A0H3CTX0', 'sporulation and cell division protein SsgA AMED_0264', 'protein', 'cell division', 'YP_003762489', 'Sporulation-specific cell division protein SsgB');\n\nDatabase State:\n- Table: encodes, Columns: [label, description, found_in_taxon, subclass_of, uniprot_protein_id, encoded_by, instance_of, biological_process, refseq_protein_id, part_of]\n- Table: sporulation_specific_cell_division_protein_ssgb, Columns: [label, description, found_in_taxon, subclass_of, uniprot_protein_id, encoded_by, instance_of, biological_process, refseq_protein_id, part_of]",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (document_id, draft_number, draft_details)  VALUES (23, 9, 'r');\n\nDatabase State:\n- Table: Circulation_History, Columns: [document_id, draft_number, copy_number, employee_id]\n- Table: Roles, Columns: [role_code, role_description]\n- Table: Documents, Columns: [document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details]\n- Table: Ref_Document_Status, Columns: [document_status_code, document_status_description]\n- Table: Employees, Columns: [employee_id, role_code, employee_name, other_details]\n- Table: Draft_Copies, Columns: [document_id, draft_number, copy_number]\n- Table: Addresses, Columns: [address_id, address_details]",
        "Response": "Table: Document_Drafts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (People_ID, Name, Height, Weight, Home_Town)  VALUES (11, 'Mike Murphy', 6.799999999999999823, 215.0, 'Austin, TX');\n\nDatabase State:\n- Table: perpetrator, Columns: [Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured]\n- Table: people, Columns: [People_ID, Name, Height, Weight, Home_Town]",
        "Response": "Table: people"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO course (course_id, name, credit, diff)  VALUES (2, 'Intro to Database 1', 2, 4);\n\nDatabase State:\n- Table: RA, Columns: [student_id, capability, prof_id, salary]",
        "Response": "Table: course"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (character, voice_actor, movie)  VALUES ('Shenzi', 'Whoopi Goldberg', 'The Lion King');\n\nDatabase State:\n- Table: movies_total_gross, Columns: [movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross]\n- Table: director, Columns: [name, director]\n- Table: voice_actors, Columns: [character, voice_actor, movie]",
        "Response": "Table: voice_actors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO BusinessEntity (BusinessEntityID, rowguid, ModifiedDate)  VALUES (17649, '7CDB1B05-01A3-49BB-A0DC-18D5AC3FA451', '2017-12-13 13:42:48.0');\n\nDatabase State:\n- Table: SalesPerson, Columns: [BusinessEntityID, TerritoryID, SalesQuota, Bonus, CommissionPct, SalesYTD, SalesLastYear, rowguid, ModifiedDate]\n- Table: CreditCard, Columns: [CreditCardID, CardType, CardNumber, ExpMonth, ExpYear, ModifiedDate]\n- Table: ProductInventory, Columns: [ProductID, LocationID, Shelf, Bin, Quantity, rowguid, ModifiedDate]\n- Table: PurchaseOrderDetail, Columns: [PurchaseOrderID, PurchaseOrderDetailID, DueDate, OrderQty, ProductID, UnitPrice, LineTotal, ReceivedQty, RejectedQty, StockedQty, ModifiedDate]\n- Table: BusinessEntity, Columns: [BusinessEntityID, rowguid, ModifiedDate]\n- Table: ProductDocument, Columns: [ProductID, DocumentNode, ModifiedDate]\n- Table: Address, Columns: [AddressID, AddressLine1, AddressLine2, City, StateProvinceID, PostalCode, SpatialLocation, rowguid, ModifiedDate]\n- Table: UnitMeasure, Columns: [UnitMeasureCode, Name, ModifiedDate]\n- Table: Store, Columns: [BusinessEntityID, Name, SalesPersonID, Demographics, rowguid, ModifiedDate]\n- Table: Shift, Columns: [ShiftID, Name, StartTime, EndTime, ModifiedDate]\n- Table: ProductReview, Columns: [ProductReviewID, ProductID, ReviewerName, ReviewDate, EmailAddress, Rating, Comments, ModifiedDate]\n- Table: SalesOrderHeaderSalesReason, Columns: [SalesOrderID, SalesReasonID, ModifiedDate]\n- Table: WorkOrderRouting, Columns: [WorkOrderID, ProductID, OperationSequence, LocationID, ScheduledStartDate, ScheduledEndDate, ActualStartDate, ActualEndDate, ActualResourceHrs, PlannedCost, ActualCost, ModifiedDate]\n- Table: SpecialOffer, Columns: [SpecialOfferID, Description, DiscountPct, Type, Category, StartDate, EndDate, MinQty, MaxQty, rowguid, ModifiedDate]\n- Table: Password, Columns: [BusinessEntityID, PasswordHash, PasswordSalt, rowguid, ModifiedDate]\n- Table: EmailAddress, Columns: [BusinessEntityID, EmailAddressID, EmailAddress, rowguid, ModifiedDate]\n- Table: JobCandidate, Columns: [JobCandidateID, BusinessEntityID, Resume, ModifiedDate]\n- Table: BillOfMaterials, Columns: [BillOfMaterialsID, ProductAssemblyID, ComponentID, StartDate, EndDate, UnitMeasureCode, BOMLevel, PerAssemblyQty, ModifiedDate]\n- Table: ProductSubcategory, Columns: [ProductSubcategoryID, ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: Currency, Columns: [CurrencyCode, Name, ModifiedDate]\n- Table: Vendor, Columns: [BusinessEntityID, AccountNumber, Name, CreditRating, PreferredVendorStatus, ActiveFlag, PurchasingWebServiceURL, ModifiedDate]\n- Table: Person, Columns: [BusinessEntityID, PersonType, NameStyle, Title, FirstName, MiddleName, LastName, Suffix, EmailPromotion, AdditionalContactInfo, Demographics, rowguid, ModifiedDate]\n- Table: AddressType, Columns: [AddressTypeID, Name, rowguid, ModifiedDate]\n- Table: CurrencyRate, Columns: [CurrencyRateID, CurrencyRateDate, FromCurrencyCode, ToCurrencyCode, AverageRate, EndOfDayRate, ModifiedDate]\n- Table: ScrapReason, Columns: [ScrapReasonID, Name, ModifiedDate]\n- Table: ProductPhoto, Columns: [ProductPhotoID, ThumbNailPhoto, ThumbnailPhotoFileName, LargePhoto, LargePhotoFileName, ModifiedDate]\n- Table: Department, Columns: [DepartmentID, Name, GroupName, ModifiedDate]\n- Table: Location, Columns: [LocationID, Name, CostRate, Availability, ModifiedDate]\n- Table: SalesTerritory, Columns: [TerritoryID, Name, CountryRegionCode, Group, SalesYTD, SalesLastYear, CostYTD, CostLastYear, rowguid, ModifiedDate]\n- Table: WorkOrder, Columns: [WorkOrderID, ProductID, OrderQty, StockedQty, ScrappedQty, StartDate, EndDate, DueDate, ScrapReasonID, ModifiedDate]\n- Table: ProductCategory, Columns: [ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: CountryRegionCurrency, Columns: [CountryRegionCode, CurrencyCode, ModifiedDate]\n- Table: ProductVendor, Columns: [ProductID, BusinessEntityID, AverageLeadTime, StandardPrice, LastReceiptCost, LastReceiptDate, MinOrderQty, MaxOrderQty, OnOrderQty, UnitMeasureCode, ModifiedDate]\n- Table: StateProvince, Columns: [StateProvinceID, StateProvinceCode, CountryRegionCode, IsOnlyStateProvinceFlag, Name, TerritoryID, rowguid, ModifiedDate]\n- Table: EmployeeDepartmentHistory, Columns: [BusinessEntityID, DepartmentID, ShiftID, StartDate, EndDate, ModifiedDate]\n- Table: EmployeePayHistory, Columns: [BusinessEntityID, RateChangeDate, Rate, PayFrequency, ModifiedDate]\n- Table: ShipMethod, Columns: [ShipMethodID, Name, ShipBase, ShipRate, rowguid, ModifiedDate]\n- Table: SalesTerritoryHistory, Columns: [BusinessEntityID, TerritoryID, StartDate, EndDate, rowguid, ModifiedDate]\n- Table: ProductModelProductDescriptionCulture, Columns: [ProductModelID, ProductDescriptionID, CultureID, ModifiedDate]\n- Table: SalesTaxRate, Columns: [SalesTaxRateID, StateProvinceID, TaxType, TaxRate, Name, rowguid, ModifiedDate]\n- Table: SalesOrderDetail, Columns: [SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate]\n- Table: Customer, Columns: [CustomerID, PersonID, StoreID, TerritoryID, AccountNumber, rowguid, ModifiedDate]\n- Table: SalesPersonQuotaHistory, Columns: [BusinessEntityID, QuotaDate, SalesQuota, rowguid, ModifiedDate]\n- Table: TransactionHistoryArchive, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: BusinessEntityContact, Columns: [BusinessEntityID, PersonID, ContactTypeID, rowguid, ModifiedDate]\n- Table: Employee, Columns: [BusinessEntityID, NationalIDNumber, LoginID, OrganizationNode, OrganizationLevel, JobTitle, BirthDate, MaritalStatus, Gender, HireDate, SalariedFlag, VacationHours, SickLeaveHours, CurrentFlag, rowguid, ModifiedDate]\n- Table: PurchaseOrderHeader, Columns: [PurchaseOrderID, RevisionNumber, Status, EmployeeID, VendorID, ShipMethodID, OrderDate, ShipDate, SubTotal, TaxAmt, Freight, TotalDue, ModifiedDate]\n- Table: CountryRegion, Columns: [CountryRegionCode, Name, ModifiedDate]\n- Table: PersonCreditCard, Columns: [BusinessEntityID, CreditCardID, ModifiedDate]\n- Table: TransactionHistory, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: ProductDescription, Columns: [ProductDescriptionID, Description, rowguid, ModifiedDate]\n- Table: PhoneNumberType, Columns: [PhoneNumberTypeID, Name, ModifiedDate]\n- Table: Culture, Columns: [CultureID, Name, ModifiedDate]\n- Table: Document, Columns: [DocumentNode, DocumentLevel, Title, Owner, FolderFlag, FileName, FileExtension, Revision, ChangeNumber, Status, DocumentSummary, Document, rowguid, ModifiedDate]\n- Table: ProductModel, Columns: [ProductModelID, Name, CatalogDescription, Instructions, rowguid, ModifiedDate]\n- Table: ProductProductPhoto, Columns: [ProductID, ProductPhotoID, Primary, ModifiedDate]\n- Table: ShoppingCartItem, Columns: [ShoppingCartItemID, ShoppingCartID, Quantity, ProductID, DateCreated, ModifiedDate]\n- Table: ContactType, Columns: [ContactTypeID, Name, ModifiedDate]",
        "Response": "Table: BusinessEntity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO monument (label, description, part_of, commons_category, country, is_a_list_of, located_in_the_administrative_territorial_entity, instance_of)  VALUES ('list of cultural heritage monuments in Leninsky District of Moscow Oblast', 'Wikimedia list article', 'list of cultural heritage monuments in Moscow Oblast', 'Cultural heritage monuments in Leninsky District, Moscow Oblast', 'Russia', 'cultural heritage site in Russia', 'Leninsky Urban District, Moscow Oblast', 'Wikimedia list article');\n\nDatabase State:\n- Table: capital_city, Columns: [label, description, commons_category, country, coat_of_arms_image, coordinate_location, okato_id, instance_of, freebase_id, oktmo_id, flag, local_dialing_code, inception, geonames_id, postal_code, topics_main_category, image, elevation_above_sea_level, area, great_russian_encyclopedia_online_id, population, located_in_time_zone, flag_image, whos_on_first_id, official_website, native_label]\n- Table: list_of_cultural_heritage_monuments_in_moscow_oblast, Columns: [label, description, part_of, commons_category, country, is_a_list_of, located_in_the_administrative_territorial_entity, instance_of]",
        "Response": "Table: monument"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11369033, 'JB334872', '6/16/2018 22:30', '048XX W VAN BUREN ST', '420', 'STREET', 'FALSE', 'FALSE', 1533, 15, 24, 25, '04B', '41.87497332', '-87.74521835');\n\nDatabase State:\n- Table: Crime, Columns: [report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude]\n- Table: Neighborhood, Columns: [neighborhood_name, community_area_no]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Trained_In (Physician, Treatment, CertificationDate, CertificationExpires)  VALUES (6, 6, '2008-01-01', '2008-12-31');\n\nDatabase State:\n- Table: Prescribes, Columns: [Physician, Patient, Appointment]\n- Table: On_Call, Columns: [Nurse, BlockFloor, OnCallStart, OnCallEnd]\n- Table: Stay, Columns: [StayID, Patient, Room, StayStart, StayEnd]\n- Table: Room, Columns: [RoomNumber, RoomType, BlockFloor]\n- Table: Physician, Columns: [EmployeeID, Name, Position, SSN]\n- Table: Nurse, Columns: [EmployeeID, Name, Position, Registered, SSN]\n- Table: Affiliated_With, Columns: [Physician, Department, PrimaryAffiliation]\n- Table: Procedures, Columns: [Code, Name, Cost]",
        "Response": "Table: Trained_In"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, located_in_the_administrative_territorial_entity, coordinate_location, significant_event, described_by_source, canmore_id, historic_county)  VALUES ('Mariner - Canmore 310143', 'Shipwreck off the Scottish Coast, imported from Canmore Nov 2020', 'drifter', 'United Kingdom', 'Moray', '57.72407939977074', 'shipwrecking', 'Canmore', '310143.0', 'Morayshire');\n\nDatabase State:\n- Table: drifter, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, coordinate_location, significant_event, described_by_source, canmore_id, historic_county]\n- Table: historic_county, Columns: [label, description, coordinate_location, country, freebase_id, located_in_the_administrative_territorial_entity, locator_map_image, instance_of, commons_category, catalog_code, shares_border_with, gazetteer_for_scotland_place_id, described_by_source, genuki_id, population, factgrid_item_id]\n- Table: administrative_centre, Columns: [label, description, commons_category, country, located_in_the_administrative_territorial_entity, iso_3166_2_code, coordinate_location, topics_main_category, instance_of, freebase_id, fips_10_4_countries_and_regions, musicbrainz_area_id, geonames_id, openstreetmap_relation_id, gss_code_2011, official_website, curlie_id, capital, toid, area, geoshape, population, viaf_id, encyclop\u00e6dia_britannica_online_id, whos_on_first_id, gazetteer_for_scotland_place_id, image, catalog_code, worldcat_identities_id, authority, hasc, vision_of_britain_place_id, carbon_footprint, inaturalist_place_id, uk_parliament_thesaurus_id, locator_map_image, library_of_congress_authority_id, national_library_of_israel_j9u_id]\n- Table: administrative_territorial_entity, Columns: [label, description, commons_category, country, located_in_the_administrative_territorial_entity, iso_3166_2_code, coordinate_location, topics_main_category, instance_of, freebase_id, fips_10_4_countries_and_regions, musicbrainz_area_id, geonames_id, openstreetmap_relation_id, gss_code_2011, official_website, curlie_id, capital, toid, area, category_of_associated_people, archinform_location_id, geoshape, population, viaf_id, encyclop\u00e6dia_britannica_online_id, whos_on_first_id, gazetteer_for_scotland_place_id, image, catalog_code, worldcat_identities_id, authority, hasc, vision_of_britain_place_id, carbon_footprint, inaturalist_place_id, uk_parliament_thesaurus_id, locator_map_image]\n- Table: political_border, Columns: [label, description, commons_category, coordinate_location, country, freebase_id, located_in_the_administrative_territorial_entity, instance_of, population, shares_border_with, vision_of_britain_place_id, locator_map_image, described_by_source, catalog_code, factgrid_item_id]\n- Table: capital_city, Columns: [label, description, commons_category, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, topics_main_category, curlie_id, page_banner, musicbrainz_area_id, freebase_id, image, geonames_id, gnd_id, woeid, local_dialing_code, located_in_time_zone, vision_of_britain_place_id, toid, encyclop\u00e6dia_britannica_online_id, capital_of, population, postal_code, library_of_congress_authority_id, viaf_id, whos_on_first_id, vision_of_britain_unit_id, gazetteer_for_scotland_place_id, gss_code_2011, historic_county, worldcat_identities_id, described_by_source, factgrid_item_id, national_library_of_israel_j9u_id, store_norske_leksikon_id, os_grid_reference]",
        "Response": "Table: drifter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO teachers (LastName)  VALUES ('MACROSTIE', ' MIN', 101);\n\nDatabase State:\n- Table: teachers, Columns: [LastName]\n- Table: list, Columns: [LastName]",
        "Response": "Table: teachers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO taxon (label, description, taxon_name, taxon_rank, freebase_id, ncbi_taxonomy_id, parent_taxon, instance_of, gbif_taxon_id, itis_tsn, gram_staining, irmng_id, lpsn_url, mesh_descriptor_id, microsoft_academic_id, catalogue_of_life_id)  VALUES ('Klebsiella aerogenes', 'species of bacterium', 'Klebsiella aerogenes', 'species', '/m/02rbqkm', '548.0', 'Klebsiella', 'taxon', '9281703.0', '9750.0', 'Gram-negative bacteria', 'nan', 'http://www.bacterio.net/klebsiella.html#aerogenes', 'D021902', '2776265613.0', 'nan');\n\nDatabase State:\nNo table exists yet",
        "Response": "Table: taxon"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO inspections (business_id, score, date, type)  VALUES (62730, NULL, '2015-03-09', 'Reinspection/Followup');\n\nDatabase State:\n- Table: inspections, Columns: [business_id, score, date, type]",
        "Response": "Table: inspections"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, instance_of, point_in_time, follows, followed_by, part_of)  VALUES ('2170 BC', 'year', 'year BC', '-2170-01-01T00:00:00Z', '2171 BC', '2169 BC', '2170s BC');\n\nDatabase State:\n- Table: followed_by, Columns: [label, description, instance_of, point_in_time, follows, followed_by, part_of]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Stores (Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details)  VALUES ('291', 266, 'RU', 'Ewi Filming', '+46(1)1411714927', 'ewisoky@example.org', NULL);\n\nDatabase State:\n- Table: Customers, Columns: [Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details]\n- Table: Drama_Workshop_Groups, Columns: [Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details]\n- Table: Ref_Service_Types, Columns: [Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description]\n- Table: Ref_Payment_Methods, Columns: [payment_method_code, payment_method_description]\n- Table: Services, Columns: [Service_ID, Service_Type_Code, Workshop_Group_ID, Product_Description, Product_Name, Product_Price, Other_Product_Service_Details]\n- Table: Bookings_Services, Columns: [Order_ID, Product_ID]\n- Table: Performers_in_Bookings, Columns: [Order_ID, Performer_ID]\n- Table: Bookings, Columns: [Booking_ID, Customer_ID, Workshop_Group_ID, Status_Code, Store_ID, Order_Date, Planned_Delivery_Date, Actual_Delivery_Date, Other_Order_Details]\n- Table: Clients, Columns: [Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details]\n- Table: Marketing_Regions, Columns: [Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details]",
        "Response": "Table: Stores"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Business_Attributes (attribute_id, business_id, attribute_value)  VALUES (13, 1684, 'true');\n\nDatabase State:\n- Table: Business, Columns: [business_id, active, city, state, stars, review_count]\n- Table: Compliments, Columns: [compliment_id, compliment_type]",
        "Response": "Table: Business_Attributes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO paragraphs (id, ParagraphNum, PlainText, character_id, chapter_id)  VALUES (657545, 52, 'Upon what cause?', 531, 19328);\n\nDatabase State:\n- Table: paragraphs, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]\n- Table: characters, Columns: [id, CharName, Abbrev, Description]\n- Table: chapters, Columns: [id, Act, Scene, Description, work_id]\n- Table: works, Columns: [id, Title, LongTitle, Date, GenreType]",
        "Response": "Table: paragraphs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Order_Items (order_item_id, order_id, product_id, order_quantity)  VALUES (5, 13, 3, '3');\n\nDatabase State:\n- Table: Products, Columns: [product_id, product_type_code, product_name, product_price]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_date, order_status_code]\n- Table: Addresses, Columns: [address_id, line_1_number_building, city, zip_postcode, state_province_county, country]\n- Table: Customer_Address_History, Columns: [customer_id, address_id, date_from, date_to]\n- Table: Customers, Columns: [customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email]\n- Table: Order_Items, Columns: [order_item_id, order_id, product_id, order_quantity]\n- Table: Contacts, Columns: [contact_id, customer_id, gender, first_name, last_name, contact_phone]",
        "Response": "Table: Order_Items"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes)  VALUES (25747, 146970, 33863, '2015-10-16 00:00:00', 72, 72, 'right', 'low', 'medium', 32, 24, 72, 57, 30, 40, 46, 27, 40, 55, 43, 48, 49, 61, 46, 61, 53, 50, 90, 20, 84, 68, 36, 47, 43, 77, 76, 72, 14, 14, 13, 10, 8);\n\nDatabase State:\n- Table: League, Columns: [id, country_id, name]\n- Table: Player, Columns: [id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight]\n- Table: Team, Columns: [id, team_api_id, team_fifa_api_id, team_long_name, team_short_name]\n- Table: Country, Columns: [id, name]",
        "Response": "Table: Player_Attributes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (1837, 296, 0.04900000000000000188, 30.0, 'Hefe Black', 'Hefeweizen', 12.0);\n\nDatabase State:\nNo table exists yet",
        "Response": "Table: beers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, coordinate_location, country, located_in_the_administrative_territorial_entity, heritage_designation)  VALUES ('Haddon Corner', 'north-eastern corner of South Australia, where it meets with the border of Queensland', 'survey marker', '-25.9964', 'Australia', 'Queensland', 'listed on the Queensland Heritage Register');\n\nDatabase State:\n- Table: survey_marker, Columns: [label, description, instance_of, coordinate_location, country, located_in_the_administrative_territorial_entity, heritage_designation]\n- Table: administrative_territorial_entity, Columns: [label, description, commons_category, country, coordinate_location, shares_border_with, instance_of, located_in_the_administrative_territorial_entity, topics_main_category, freebase_id, population, geonames_id, official_website, image, locator_map_image, whos_on_first_id, viaf_id, area]\n- Table: political_border, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, country, locator_map_image, coordinate_location, shares_border_with, topics_main_category, instance_of, freebase_id, geonames_id, official_website, area, population, inception, image, whos_on_first_id]",
        "Response": "Table: survey_marker"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location)  VALUES (5, 'Central Saanich', 16821, 21, 801, 39, 49.0, 'Central Saanich Police', 'East');\n\nDatabase State:\nNo table exists yet",
        "Response": "Table: county_public_safety"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (au_id, title_id, au_ord, royaltyper)  VALUES ('213-46-8915', 'BU1032', 2, 40);\n\nDatabase State:\n- Table: roysched, Columns: [title_id, lorange, hirange, royalty]\n- Table: authors, Columns: [au_id, au_lname, au_fname, phone, address, city, state, zip, contract]\n- Table: employee, Columns: [emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date]\n- Table: publishers, Columns: [pub_id, pub_name, city, state, country]\n- Table: stores, Columns: [stor_id, stor_name, stor_address, city, state, zip]\n- Table: titles, Columns: [title_id, title, type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate]",
        "Response": "Table: titleauthor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (thing_id, organization_id, Type_of_Thing_Code, service_type_code, service_details)  VALUES (2, 8, 'Electronics', 'Cleanning', 'Satisfied');\n\nDatabase State:\n- Table: Properties, Columns: [property_id, property_type_code, property_address, other_details]\n- Table: Organizations, Columns: [organization_id, parent_organization_id, organization_details]\n- Table: Services, Columns: [service_id, organization_id, service_type_code, service_details]\n- Table: Residents, Columns: [resident_id, property_id, date_moved_in, date_moved_out, other_details]\n- Table: Customers, Columns: [customer_id, customer_details]\n- Table: Things, Columns: [thing_id, organization_id, Type_of_Thing_Code, service_type_code, service_details]\n- Table: Timed_Status_of_Things, Columns: [thing_id, Date_and_Date, Status_of_Thing_Code]",
        "Response": "Table: Things"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, part_of, country, followed_by, sport, series_ordinal, point_in_time, start_point, destination_point, event_distance, instance_of, procyclingstats_race_id, winner, stage_classification, general_classification_of_race_participants, follows)  VALUES ('2018 Tour of Qinghai Lake, stage 9', 'stage of the Tour of Qinghai Lake', '2018 Tour of Qinghai Lake', 'People''s Republic of China', '2018 Tour of Qinghai Lake, stage 10', 'road bicycle racing', '9', '+2018-07-30T00:00:00Z', 'Jinchang', 'Wuwei', 175.0, 'plain stage', '181601', 'Onur Balkan', 'Onur Balkan', 'Hern\u00e1n Aguirre', '2018 Tour of Qinghai Lake, stage 8');\n\nDatabase State:\n- Table: location_or_destination_point, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, china_administrative_division_code, instance_of, freebase_id, geonames_id, official_name, image, located_in_time_zone, locator_map_image, population, local_dialing_code, area]\n- Table: 2018_tour_of_qinghai_lake, Columns: [label, description, part_of, country, followed_by, sport, series_ordinal, point_in_time, start_point, destination_point, event_distance, instance_of, procyclingstats_race_id, winner, stage_classification, general_classification_of_race_participants, follows]\n- Table: given_name, Columns: [label, description, instance_of, said_to_be_the_same_as, different_from, native_label, writing_system, caverphone, commons_category, language_of_work_or_name]\n- Table: beginning, Columns: [label, description, coordinate_location, china_administrative_division_code, country, located_in_the_administrative_territorial_entity, freebase_id, instance_of, geonames_id, official_name, located_in_time_zone, postal_code, population, local_dialing_code, licence_plate_code, locator_map_image, official_website, image, area]\n- Table: followed_by, Columns: [label, description, part_of, country, follows, followed_by, sport, series_ordinal, point_in_time, start_point, destination_point, event_distance, instance_of, procyclingstats_race_id, winner, stage_classification, general_classification_of_race_participants]\n- Table: sports_team, Columns: [label, description, instance_of, sport, country, inception, uci_code_of_cycling_team, official_name, has_parts, official_website]\n- Table: winner, Columns: [label, description, sex_or_gender, country_of_citizenship, occupation, instance_of, date_of_birth, given_name, sport, cq_ranking_male_cyclist_id, cycling_archives_cyclist_id, place_of_birth, member_of_sports_team, procyclingstats_cyclist_id, participant_in, firstcycling_rider_id, uci_rider_id]\n- Table: stage_classification, Columns: [label, description, sex_or_gender, country_of_citizenship, occupation, instance_of, date_of_birth, given_name, sport, cq_ranking_male_cyclist_id, cycling_archives_cyclist_id, place_of_birth, member_of_sports_team, procyclingstats_cyclist_id, participant_in, firstcycling_rider_id, uci_rider_id]\n- Table: follows, Columns: [label, description, part_of, country, followed_by, sport, series_ordinal, point_in_time, start_point, destination_point, event_distance, instance_of, procyclingstats_race_id, winner, stage_classification, general_classification_of_race_participants, follows]",
        "Response": "Table: 2018_tour_of_qinghai_lake"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO coach (Coach_ID, Coach_name, Gender, Club_ID, Rank)  VALUES (2, 'Joe Fabbri', 'F', 1, 2);\n\nDatabase State:\nNo table exists yet",
        "Response": "Table: coach"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, subclass_of, found_in_taxon, entrez_gene_id, encodes, ncbi_locus_tag, genomic_end, strand_orientation, instance_of, genomic_start)  VALUES ('glutamate racemase HP0549', 'microbial gene found in Helicobacter pylori 26695', 'gene', 'Helicobacter pylori 26695', '900031', 'Glutamate racemase HP0549', 'HP0549', '585349', 'reverse strand', 'gene', '584582');\n\nDatabase State:\nNo table exists yet",
        "Response": "Table: encoded_by"
    }
]