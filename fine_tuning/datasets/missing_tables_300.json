[
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, encoded_by, ensembl_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, transporter_classification_database_id)  VALUES ('F2R like trypsin receptor 1', 'mammalian protein found in Homo sapiens', 'P55085', 'F2RL1', 'ENSP00000296677', 'positive regulation of Rho protein signal transduction', 'G protein-coupled receptor activity', 'integral component of membrane', 'GPCR, rhodopsin-like, 7TM', 'Homo sapiens', 'NP_005233', 'protein', 'protease-activated receptor 2', '9.A.14.13.12');\nDatabase State:\n- Table: g_protein_coupled_receptor, Columns: [label, description, uniprot_protein_id, encoded_by, ensembl_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, transporter_classification_database_id]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, hgnc_gene_symbol, hgnc_id, omim_id, subclass_of, ensembl_gene_id, homologene_id, refseq_rna_id, ensembl_transcript_id, encodes, found_in_taxon, exact_match, strand_orientation, genomic_end, genomic_start, chromosome, ortholog, instance_of, cytogenetic_location, expressed_in]\n- Table: orthology, Columns: [label, description, entrez_gene_id, subclass_of, ensembl_gene_id, homologene_id, found_in_taxon, refseq_rna_id, ensembl_transcript_id, chromosome, encodes, mouse_genome_informatics_id, exact_match, mgi_gene_symbol, strand_orientation, ortholog, instance_of, cytogenetic_location, genomic_start, genomic_end, expressed_in]\n- Table: biological_process, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]",
        "Response": "Table: g_protein_coupled_receptor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (233921, 2005, 'M', 'Ai', '4y bach', '3', '1', '2', '33.3', '66.7');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average)  VALUES (2, 'Ayr United', 'Somerset Park', 11998, 2363, 1057, 1477);\nDatabase State:\n- Table: concert, Columns: [concert_ID, concert_Name, Theme, Stadium_ID, Year]\n- Table: stadium, Columns: [Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]\n- Table: singer, Columns: [Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]\n- Table: singer_in_concert, Columns: [concert_ID, Singer_ID]",
        "Response": "Table: stadium"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors)  VALUES ('1', 'Tampa City Hall', '315 John F. Kennedy Boulevard', '1915\u20131926', 160, 10);\nDatabase State:\n- Table: Institution, Columns: [Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id]",
        "Response": "Table: building"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, instance_of, freebase_id, geonames_id, capital, locator_map_image, area, official_website, population, viaf_id, inaturalist_place_id, commons_category, openstreetmap_relation_id, image, native_label)  VALUES ('Kingman', 'city and the\u00a0county seat\u00a0of,\u00a0Mohave County,\u00a0Arizona, United States', 'United States of America', '35.208333333333', 'Mohave County', 'Category:Kingman, Arizona', 'city in the United States', '/m/0qpxc', '5301067', 'nan', 'Mohave County Incorporated and Unincorporated areas Kingman highlighted.svg', 90.18332200000000398, 'http://www.cityofkingman.gov', 28068.0, '150139189', 'nan', 'Kingman, Arizona', 'nan', 'Kingman courthouse.jpg', 'nan');\nDatabase State:\n- Table: monument, Columns: [label, description, is_a_list_of, country, commons_category, instance_of]\n- Table: administrative_territorial_entity, Columns: [label, description, country, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, instance_of, freebase_id, geonames_id, capital, locator_map_image, area, official_website, population, viaf_id, inaturalist_place_id, commons_category, openstreetmap_relation_id, image, native_label]\n- Table: eponym, Columns: [label, description, viaf_id, library_of_congress_authority_id, instance_of, image, freebase_id, national_library_of_israel_j9u_id, commons_category, topics_main_category]\n- Table: political_border, Columns: [label, description, commons_category, country, coordinate_location, contains_the_administrative_territorial_entity, topics_main_category, instance_of, freebase_id, inception, geonames_id, shares_border_with, population, area, official_website, capital, locator_map_image, image, located_in_the_administrative_territorial_entity, archinform_location_id, openstreetmap_relation_id, whos_on_first_id, hasc, inaturalist_place_id, category_of_associated_people, fips_6_4, gnis_id, viaf_id, named_after, list_of_monuments, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, getty_thesaurus_of_geographic_names_id, per_capita_income, number_of_households]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, official_website, instance_of, country, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, page_banner, topics_main_category, curlie_id, musicbrainz_area_id, freebase_id, geonames_id, gnd_id, viaf_id, capital_of, library_of_congress_authority_id, elevation_above_sea_level, image, population, postal_code, locator_map_image, gnis_id, inception, fips_55_3_locations_in_the_us, encyclop\u00e6dia_britannica_online_id, local_dialing_code, located_in_time_zone, quora_topic_id, category_of_associated_people, area, gran_enciclop\u00e8dia_catalana_id, archinform_location_id, whos_on_first_id, worldcat_identities_id, factgrid_item_id, national_library_of_israel_j9u_id, water_as_percent_of_area, number_of_households)  VALUES ('Cheyenne', 'capital of Wyoming, United States and seat of Laramie County', 'http://www.cheyennecity.org', 'city', 'United States of America', 'Cheyenne, Wyoming', 'Laramie County', '41.145555555556', 'WV banner Cheyenne city view.jpg', 'Category:Cheyenne, Wyoming', 'Regional/North_America/United_States/Wyoming/Localities/C/Cheyenne/', '52c18f9d-e1b2-47a0-91ee-a0fa39ecd71f', '/m/0fw3f', '5821086', '4090368-0', '153038146', 'Wyoming', 'n80008571', 1848.0, 'CheyenneWY downtown.jpg', 65132.0, '82001\u201382010', 'Laramie County Wyoming incorporated and unincorporated areas Cheyenne highlighted.svg', '1609077.0', '+1867-00-00T00:00:00Z', '56-13900', 'place/Cheyenne-Wyoming', '307.0', 'Mountain Time Zone', 'Cheyenne-WY', 'Category:People from Cheyenne, Wyoming', 70.24708400000000096, '425864.0', '9600.0', '101734121.0', 'viaf-136826462', 'nan', '987007559645305171', 0.4425999999999999935, 27599.0);\nDatabase State:\n- Table: park_district, Columns: [label, description, instance_of, country, official_website, located_in_the_administrative_territorial_entity, osm_name_suggestion_index_identifier]\n- Table: political_border, Columns: [label, description, country, shares_border_with, capital, commons_category, locator_map_image, coordinate_location, openstreetmap_relation_id, located_in_the_administrative_territorial_entity, official_website, page_banner, topics_main_category, curlie_id, musicbrainz_area_id, instance_of, freebase_id, inception, category_for_people_born_here, geonames_id, category_of_associated_people, population, contains_the_administrative_territorial_entity, viaf_id, library_of_congress_authority_id, area, named_after, getty_thesaurus_of_geographic_names_id, native_label, archinform_location_id, wolfram_language_entity_code, whos_on_first_id, category_for_maps, worldcat_identities_id, hasc, inaturalist_place_id, national_library_of_israel_j9u_id, image]\n- Table: administrative_territorial_entity, Columns: [label, description, country, shares_border_with, capital, commons_category, locator_map_image, coordinate_location, openstreetmap_relation_id, located_in_the_administrative_territorial_entity, official_website, topics_main_category, page_banner, curlie_id, instance_of, freebase_id, gnis_id, inception, category_for_people_born_here, category_for_people_who_died_here, geonames_id, category_of_associated_people, seal_image, area, library_of_congress_authority_id, viaf_id, population, contains_the_administrative_territorial_entity, water_as_percent_of_area, named_after, getty_thesaurus_of_geographic_names_id, native_label, archinform_location_id, wolfram_language_entity_code, whos_on_first_id, category_for_maps, worldcat_identities_id, hasc, ballotpedia_id, inaturalist_place_id, national_library_of_israel_j9u_id, per_capita_income, number_of_households]",
        "Response": "Table: capital_city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (character, voice-actor, movie)  VALUES ('Atropos', 'Paddi Edwards', 'Hercules');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: voice-actors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of, cell_component)  VALUES ('S-adenosyl-methyltransferase MraW BPSL3033', 'microbial protein found in Burkholderia pseudomallei K96243', 'S-adenosyl-methyltransferase MraW BPSL3033', 'Q63QI9', 'rRNA processing', 'methyltransferase activity', 'Burkholderia pseudomallei K96243', 'YP_109629', 'protein', 'Ribosomal RNA small subunit methyltransferase H', 'protein', 'cytoplasm');\nDatabase State:\n- Table: s_adenosyl_l_methionine_dependent_methyltransferase_mraw_recognition_domain_superfamily, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of, cell_component]",
        "Response": "Table: s_adenosyl_l_methionine_dependent_methyltransferase_mraw_recognition_domain_superfamily"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO death (caused_by_ship_id, id, note, killed, injured)  VALUES (3, 13, 'Erraboru, Chhattisgarh', 25, 0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: death"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (architect_id, id, name, location, length_meters, length_feet)  VALUES (1, 11, 'Jiangzhou Arch', 'Guangxi , China', 65.0, 212.0);\nDatabase State:\n- Table: mill, Columns: [architect_id, id, location, name, type, built_year, notes]",
        "Response": "Table: bridge"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, Name, CountryCode, District, Population)  VALUES (2479, 'Selayang Baru', 'MYS', 'Selangor', 124228);\nDatabase State:\n- Table: City, Columns: [ID, Name, CountryCode, District, Population]\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, found_in_taxon, ncbi_locus_tag, flybase_gene_id, entrez_gene_id, genomic_end, genomic_start, chromosome, ensembl_gene_id, strand_orientation, ensembl_transcript_id, refseq_rna_id, instance_of, encodes, cytogenetic_location, expressed_in, homologene_id)  VALUES ('CG17974', 'protein-coding gene in the species Drosophila melanogaster', 'Drosophila melanogaster', 'Dmel_CG17974', 'FBgn0034624', '37441', '21350578', '21348945', 'Drosophila melanogaster chromosome 2R', 'FBgn0034624', 'reverse strand', 'FBtr0071611', 'NM_137738', 'gene', 'Uncharacterized protein Dmel_CG17974', '57D12-57D12|2-94 cM', 'antenna', '77274.0');\nDatabase State:\n- Table: encodes, Columns: [label, description, uniprot_protein_id, encoded_by, found_in_taxon, refseq_protein_id, instance_of, has_parts, part_of, cell_component, biological_process, molecular_function, ensembl_protein_id]\n- Table: encoded_by, Columns: [label, description, found_in_taxon, ncbi_locus_tag, flybase_gene_id, entrez_gene_id, genomic_end, genomic_start, chromosome, ensembl_gene_id, strand_orientation, ensembl_transcript_id, refseq_rna_id, instance_of, encodes, cytogenetic_location, expressed_in, homologene_id]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (dormid, amenid)  VALUES (110, 930);\nDatabase State:\n- Table: Dorm_amenity, Columns: [amenid, amenity_name]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Has_amenity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (job_id, job_desc, min_lvl, max_lvl)  VALUES (2, 'Chief Executive Officer', 200, 250);\nDatabase State:\n- Table: discounts, Columns: [discounttype, stor_id, lowqty, highqty, discount]\n- Table: titles, Columns: [title_id, title, type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate]\n- Table: jobs, Columns: [job_id, job_desc, min_lvl, max_lvl]\n- Table: roysched, Columns: [title_id, lorange, hirange, royalty]\n- Table: employee, Columns: [emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date]\n- Table: pub_info, Columns: [pub_id, logo, pr_info]\n- Table: publishers, Columns: [pub_id, pub_name, city, state, country]\n- Table: stores, Columns: [stor_id, stor_name, stor_address, city, state, zip]\n- Table: titleauthor, Columns: [au_id, title_id, au_ord, royaltyper]\n- Table: authors, Columns: [au_id, au_lname, au_fname, phone, address, city, state, zip, contract]",
        "Response": "Table: jobs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cars (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num)  VALUES (16, 5, 2, 'rectangle', 'long', 'not_double', 'flat', 3, 'rectangle', 1);\nDatabase State:\n- Table: cars, Columns: [id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num]",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, person_id, category, role, credited)  VALUES ('tt0629448', 'nm1250384', 'Produced by', 'co-executive producer', 'true');\nDatabase State:\n- Table: Person, Columns: [person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Credit, Columns: [episode_id, person_id, category, role, credited]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, series, episode_id, person_id, role, result]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Episode, Columns: [episode_id, series, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag)  VALUES ('beta-N-acetylhexosaminidase EAE_09710', 'microbial gene found in Klebsiella aerogenes KCTC 2190', '10792140', 'gene', 'Beta-N-acetylhexosaminidase EAE_09710', 'Enterobacter aerogenes KCTC 2190', 'forward strand', '2056082', '2053689', 'gene', 'EAE_09710');\nDatabase State:\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, gram_staining, lpsn_url]\n- Table: beta_hexosaminidase, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: encodes, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO political_border (label, description, located_in_the_administrative_territorial_entity, commons_category, country, lau, instance_of, freebase_id, coat_of_arms_image, flag_image, shares_border_with, population, topics_main_category, official_website, elevation_above_sea_level, postal_code, geonames_id, time_of_earliest_written_record, email_address, openstreetmap_relation_id, image, czech_registration_id, area, licence_plate_code, coordinate_location, nkcr_aut_id, historical_region, whos_on_first_id, geoshape, mapycz_id, isds_id, czech_municipality_id, number_of_houses, mean_age)  VALUES ('Josef\u016fv D\u016fl', 'village in Jablonec nad Nisou District of Liberec region', 'Jablonec nad Nisou District', 'Josef\u016fv D\u016fl (Jablonec nad Nisou District)', 'Czech Republic', 'CZ563633', 'municipality of the Czech Republic', '/m/06zrzzg', 'Josefuv Dul (Jablonec nad Nisou) CoA CZ.jpg', 'Flag of Josefuv Dul (Jablonec nad Nisou).svg', 'Lu\u010dany nad Nisou', 877.0, 'Category:Josef\u016fv D\u016fl (Jablonec nad Nisou District)', 'http://www.josefuvdul.cz/', 625.0, '468\u00a044', '3074049', '+1701-01-01T00:00:00Z', 'mailto:podatelna@josefuvdul.eu', '436603', 'Kirche Josefuv Dul.jpg', '262391.0', 22.0104539999999993, 'JN', '50.78196936235', 'ge129498', 'Bohemia', '1126008365', 'Data:Map of Josef\u016fv D\u016fl, Jablonec nad Nisou District.map', 'muni&id=1793', 'yh6a5y2', '563633.0', 354.0, 45.20000000000000285);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: political_border"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Teacher_ID, Name, Age, Hometown)  VALUES (5, 'Kearsley Brown', '45', 'Kearsley Urban District');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: teacher"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, main_subject, subclass_of)  VALUES ('World War II in popular culture', 'World War II depicted in popular culture', 'cultural depiction', 'World War II', 'war in popular culture');\nDatabase State:\n- Table: war_in_popular_culture, Columns: [label, description, instance_of, main_subject, subclass_of]\n- Table: topic, Columns: [label, description, instance_of, start_time, end_time, gnd_id, commons_category, topics_main_category, freebase_id, image, location, library_of_congress_authority_id, participant, encyclop\u00e6dia_britannica_online_id, part_of, nkcr_aut_id, national_library_of_israel_j9u_id]",
        "Response": "Table: war_in_popular_culture"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  VALUES ('2018/8/8', 21167, 'N216NN', 6008, 12892, 1289208, 32575, 'LAX', 13871, 1387102, 33316, 'OMA', 1018, 1015, -3, 0, 1533, 3, 3, 0, NULL, 192, 198, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Air_Carriers, Columns: [Code, Description]\n- Table: Airports, Columns: [Code, Description]\n- Table: Airlines, Columns: [FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO registration (course_id, student_id, grade, sat)  VALUES (9, 10, 'A', 5);\nDatabase State:\n- Table: RA, Columns: [student_id, capability, prof_id, salary]\n- Table: course, Columns: [course_id, name, credit, diff]",
        "Response": "Table: registration"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, refseq_protein_id, found_in_taxon, subclass_of, encoded_by, has_parts, molecular_function, part_of, instance_of)  VALUES ('PhoH family protein CT1259', 'microbial protein found in Chlorobaculum tepidum TLS', 'Q8KCZ8', 'NP_662147', 'Chlorobium tepidum TLS', 'protein', 'PhoH family protein CT1259', 'PhoH-like protein', 'ATP binding', 'P-loop containing nucleoside triphosphate hydrolase', 'protein');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: phoh_like_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO movie (movie_id, Title, Year, Director, Budget_million, Gross_worldwide)  VALUES (4, 'Jill Rips', 2000, 'Anthony Hickox', 4.0, 456774);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: movie"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts)  VALUES (5, 'Qlubtempo', 'Hemkade 48 Zaandam, Heineken Music Hall Amsterdam', '2001', '2007', 31);\nDatabase State:\n- Table: party, Columns: [Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]\n- Table: party_host, Columns: [Party_ID, Host_ID, Is_Main_in_Charge]\n- Table: host, Columns: [Host_ID, Name, Nationality, Age]",
        "Response": "Table: party"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO no_payment_due (name, bool)  VALUES ('student137', 'neg');\nDatabase State:\n- Table: male, Columns: [name]\n- Table: no_payment_due, Columns: [name, bool]\n- Table: bool, Columns: [name]",
        "Response": "Table: no_payment_due"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, subclass_of, found_in_taxon, entrez_gene_id, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start)  VALUES ('bacterioferritin BP0546', 'microbial gene found in Bordetella pertussis Tohama I', 'gene', 'Bordetella pertussis Tohama I', '2664460', 'BP0546', 'Bacterioferritin BP0546', 'gene', '555336', 'reverse strand', '554767');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, subclass_of, found_in_taxon, entrez_gene_id, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Artwork_ID, Type, Name)  VALUES (4, 'Program Music/Variety Show', 'Why');\nDatabase State:\n- Table: festival_detail, Columns: [Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience]\n- Table: nomination, Columns: [Artwork_ID, Festival_ID, Result]",
        "Response": "Table: artwork"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (attribute_id, business_id, attribute_value)  VALUES (10, 724, 'quiet');\nDatabase State:\n- Table: Business, Columns: [business_id, active, city, state, stars, review_count]\n- Table: Compliments, Columns: [compliment_id, compliment_type]\n- Table: Days, Columns: [day_id, day_of_week]\n- Table: Business_Hours, Columns: [business_id, day_id, opening_time, closing_time]\n- Table: Elite, Columns: [user_id, year_id]\n- Table: Reviews, Columns: [business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length]\n- Table: Years, Columns: [year_id, actual_year]\n- Table: Checkins, Columns: [business_id, day_id, label_time_0, label_time_1, label_time_2, label_time_3, label_time_4, label_time_5, label_time_6, label_time_7, label_time_8, label_time_9, label_time_10, label_time_11, label_time_12, label_time_13, label_time_14, label_time_15, label_time_16, label_time_17, label_time_18, label_time_19, label_time_20, label_time_21, label_time_22, label_time_23]\n- Table: Attributes, Columns: [attribute_id, attribute_name]\n- Table: Tips, Columns: [business_id, user_id, likes, tip_length]\n- Table: Categories, Columns: [category_id, category_name]",
        "Response": "Table: Business_Attributes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (rid, dst_apid)  VALUES (57020, 3602, 'IH', 3484, 'AX', 5209, 'A', NULL);\nDatabase State:\n- Table: airlines, Columns: [alid]\n- Table: airports, Columns: [apid]",
        "Response": "Table: routes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO gtp_cyclohydrolase_1_type_2_nif3 (label, description, encoded_by, uniprot_protein_id, found_in_taxon, part_of, instance_of, subclass_of, refseq_protein_id)  VALUES ('Metal-binding protein VF_0817', 'microbial protein found in Aliivibrio fischeri ES114', 'metal-binding protein VF_0817', 'Q5E6N4', 'Vibrio fischeri ES114', 'GTP cyclohydrolase 1 type 2/Nif3', 'protein', 'protein', 'YP_204200');\nDatabase State:\n- Table: gtp_cyclohydrolase_1_type_2_nif3, Columns: [label, description, encoded_by, uniprot_protein_id, found_in_taxon, part_of, instance_of, subclass_of, refseq_protein_id]",
        "Response": "Table: gtp_cyclohydrolase_1_type_2_nif3"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update)  VALUES (4526, 167, 1, 5191, 0.989999999999999992, '2005-07-09 10:26:48.0', '2006-02-15 22:13:40.0');\nDatabase State:\n- Table: inventory, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: country, Columns: [country_id, country, last_update]\n- Table: category, Columns: [category_id, name, last_update]\n- Table: language, Columns: [language_id, name, last_update]\n- Table: customer, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: address, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: store, Columns: [store_id, manager_staff_id, address_id, last_update]\n- Table: film_text, Columns: [film_id, title, description]\n- Table: actor, Columns: [actor_id, first_name, last_name, last_update]\n- Table: payment, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: staff, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]\n- Table: city, Columns: [city_id, city, country_id, last_update]\n- Table: film, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]\n- Table: rental, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]",
        "Response": "Table: payment"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO flag (label, description, instance_of, image, applies_to_jurisdiction, country, google_knowledge_graph_id)  VALUES ('flag of Nijmegen', 'flag of municipality in Gelderland, the Netherlands', 'municipal flag design', 'Flag of Nijmegen.svg', 'Nijmegen', 'Netherlands', 'nan');\nDatabase State:\n- Table: flag, Columns: [label, description, instance_of, image, applies_to_jurisdiction, country, google_knowledge_graph_id]\n- Table: jurisdiction, Columns: [label, description, geonames_id, viaf_id, country, instance_of, shares_border_with, flag_image, coat_of_arms_image, located_in_the_administrative_territorial_entity, commons_category, cbs_municipality_code, coat_of_arms, postal_code, image, locator_map_image, coordinate_location, topics_main_category, musicbrainz_area_id, freebase_id, population, contains_settlement, official_website, number_of_households, elevation_above_sea_level, area, located_in_time_zone, amsterdam_code, flag, category_for_maps, rkd_thesaurus_id, inaturalist_place_id, kvk_company_id]",
        "Response": "Table: flag"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Furniture_ID, Name, Num_of_Component, Market_Rate)  VALUES (7, 'Dining set', 12, 0.5);\nDatabase State:\n- Table: furniture_manufacte, Columns: [Manufacturer_ID, Furniture_ID, Price_in_Dollar]\n- Table: furniture, Columns: [Furniture_ID, Name, Num_of_Component, Market_Rate]",
        "Response": "Table: furniture"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Staff_ID, Staff_Details)  VALUES (803, 'Zachery');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Staff"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, taxon_name, taxon_rank, freebase_id, ncbi_taxonomy_id, parent_taxon, instance_of, gbif_taxon_id, itis_tsn, gram_staining, irmng_id, lpsn_url, microsoft_academic_id, catalogue_of_life_id)  VALUES ('Bradyrhizobium', 'genus of bacteria', 'Bradyrhizobium', 'genus', '/m/02rgzl5', '374.0', 'Bradyrhizobiaceae', 'taxon', '3221031.0', '956850.0', 'Gram-negative bacteria', '1063563.0', 'http://www.bacterio.net/bradyrhizobium.html', '2779736371.0', '3CR4');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: taxon"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Staff (staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff)  VALUES (8, 1, 'gabe21', 'Titus', 'Duane', 'Durgan', '2005-05-02 06:23:36', '2016-05-26 00:55:07', '2018-03-05 18:30:12');\nDatabase State:\n- Table: Staff, Columns: [staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff]",
        "Response": "Table: Staff"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No)  VALUES (336007, 5, 2, 1, 2);\nDatabase State:\n- Table: Extra_Runs, Columns: [Match_Id, Over_Id, Ball_Id, Extra_Type_Id, Extra_Runs, Innings_No]\n- Table: Outcome, Columns: [Outcome_Id, Outcome_Type]\n- Table: Bowling_Style, Columns: [Bowling_Id, Bowling_skill]\n- Table: Season, Columns: [Season_Id, Man_of_the_Series, Orange_Cap, Purple_Cap, Season_Year]\n- Table: Extra_Type, Columns: [Extra_Id, Extra_Name]\n- Table: Umpire, Columns: [Umpire_Id, Umpire_Name, Umpire_Country]\n- Table: Ball_by_Ball, Columns: [Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler]\n- Table: Match, Columns: [Match_Id, Team_1, Team_2, Match_Date, Season_Id, Venue_Id, Toss_Winner, Toss_Decide, Win_Type, Win_Margin, Outcome_type, Match_Winner, Man_of_the_Match]\n- Table: Win_By, Columns: [Win_Id, Win_Type]",
        "Response": "Table: Batsman_Scored"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO BusinessEntity (BusinessEntityID, rowguid, ModifiedDate)  VALUES (19949, '9C060ACE-441F-4B7D-A567-514E5F7FE6AC', '2017-12-13 13:46:11.0');\nDatabase State:\n- Table: Department, Columns: [DepartmentID, Name, GroupName, ModifiedDate]\n- Table: Document, Columns: [DocumentNode, DocumentLevel, Title, Owner, FolderFlag, FileName, FileExtension, Revision, ChangeNumber, Status, DocumentSummary, Document, rowguid, ModifiedDate]\n- Table: CountryRegionCurrency, Columns: [CountryRegionCode, CurrencyCode, ModifiedDate]\n- Table: SalesOrderHeaderSalesReason, Columns: [SalesOrderID, SalesReasonID, ModifiedDate]\n- Table: Address, Columns: [AddressID, AddressLine1, AddressLine2, City, StateProvinceID, PostalCode, SpatialLocation, rowguid, ModifiedDate]\n- Table: SalesReason, Columns: [SalesReasonID, Name, ReasonType, ModifiedDate]\n- Table: TransactionHistory, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: JobCandidate, Columns: [JobCandidateID, BusinessEntityID, Resume, ModifiedDate]\n- Table: PersonCreditCard, Columns: [BusinessEntityID, CreditCardID, ModifiedDate]\n- Table: UnitMeasure, Columns: [UnitMeasureCode, Name, ModifiedDate]\n- Table: WorkOrder, Columns: [WorkOrderID, ProductID, OrderQty, StockedQty, ScrappedQty, StartDate, EndDate, DueDate, ScrapReasonID, ModifiedDate]\n- Table: ProductCostHistory, Columns: [ProductID, StartDate, EndDate, StandardCost, ModifiedDate]\n- Table: Vendor, Columns: [BusinessEntityID, AccountNumber, Name, CreditRating, PreferredVendorStatus, ActiveFlag, PurchasingWebServiceURL, ModifiedDate]\n- Table: ProductModelProductDescriptionCulture, Columns: [ProductModelID, ProductDescriptionID, CultureID, ModifiedDate]\n- Table: AddressType, Columns: [AddressTypeID, Name, rowguid, ModifiedDate]\n- Table: SalesOrderDetail, Columns: [SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate]\n- Table: ProductListPriceHistory, Columns: [ProductID, StartDate, EndDate, ListPrice, ModifiedDate]\n- Table: CountryRegion, Columns: [CountryRegionCode, Name, ModifiedDate]\n- Table: Customer, Columns: [CustomerID, PersonID, StoreID, TerritoryID, AccountNumber, rowguid, ModifiedDate]\n- Table: PurchaseOrderDetail, Columns: [PurchaseOrderID, PurchaseOrderDetailID, DueDate, OrderQty, ProductID, UnitPrice, LineTotal, ReceivedQty, RejectedQty, StockedQty, ModifiedDate]\n- Table: CurrencyRate, Columns: [CurrencyRateID, CurrencyRateDate, FromCurrencyCode, ToCurrencyCode, AverageRate, EndOfDayRate, ModifiedDate]\n- Table: BusinessEntityAddress, Columns: [BusinessEntityID, AddressID, AddressTypeID, rowguid, ModifiedDate]\n- Table: ProductPhoto, Columns: [ProductPhotoID, ThumbNailPhoto, ThumbnailPhotoFileName, LargePhoto, LargePhotoFileName, ModifiedDate]\n- Table: BusinessEntityContact, Columns: [BusinessEntityID, PersonID, ContactTypeID, rowguid, ModifiedDate]\n- Table: Shift, Columns: [ShiftID, Name, StartTime, EndTime, ModifiedDate]\n- Table: ProductSubcategory, Columns: [ProductSubcategoryID, ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: Password, Columns: [BusinessEntityID, PasswordHash, PasswordSalt, rowguid, ModifiedDate]\n- Table: SalesTerritoryHistory, Columns: [BusinessEntityID, TerritoryID, StartDate, EndDate, rowguid, ModifiedDate]\n- Table: BusinessEntity, Columns: [BusinessEntityID, rowguid, ModifiedDate]\n- Table: TransactionHistoryArchive, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: Person, Columns: [BusinessEntityID, PersonType, NameStyle, Title, FirstName, MiddleName, LastName, Suffix, EmailPromotion, AdditionalContactInfo, Demographics, rowguid, ModifiedDate]\n- Table: ProductVendor, Columns: [ProductID, BusinessEntityID, AverageLeadTime, StandardPrice, LastReceiptCost, LastReceiptDate, MinOrderQty, MaxOrderQty, OnOrderQty, UnitMeasureCode, ModifiedDate]\n- Table: ProductDescription, Columns: [ProductDescriptionID, Description, rowguid, ModifiedDate]\n- Table: Store, Columns: [BusinessEntityID, Name, SalesPersonID, Demographics, rowguid, ModifiedDate]\n- Table: ShipMethod, Columns: [ShipMethodID, Name, ShipBase, ShipRate, rowguid, ModifiedDate]\n- Table: SalesTaxRate, Columns: [SalesTaxRateID, StateProvinceID, TaxType, TaxRate, Name, rowguid, ModifiedDate]\n- Table: PhoneNumberType, Columns: [PhoneNumberTypeID, Name, ModifiedDate]\n- Table: SpecialOfferProduct, Columns: [SpecialOfferID, ProductID, rowguid, ModifiedDate]\n- Table: CreditCard, Columns: [CreditCardID, CardType, CardNumber, ExpMonth, ExpYear, ModifiedDate]\n- Table: ProductDocument, Columns: [ProductID, DocumentNode, ModifiedDate]\n- Table: WorkOrderRouting, Columns: [WorkOrderID, ProductID, OperationSequence, LocationID, ScheduledStartDate, ScheduledEndDate, ActualStartDate, ActualEndDate, ActualResourceHrs, PlannedCost, ActualCost, ModifiedDate]\n- Table: EmployeeDepartmentHistory, Columns: [BusinessEntityID, DepartmentID, ShiftID, StartDate, EndDate, ModifiedDate]\n- Table: Product, Columns: [ProductID, Name, ProductNumber, MakeFlag, FinishedGoodsFlag, Color, SafetyStockLevel, ReorderPoint, StandardCost, ListPrice, Size, SizeUnitMeasureCode, WeightUnitMeasureCode, Weight, DaysToManufacture, ProductLine, Class, Style, ProductSubcategoryID, ProductModelID, SellStartDate, SellEndDate, DiscontinuedDate, rowguid, ModifiedDate]\n- Table: SalesPersonQuotaHistory, Columns: [BusinessEntityID, QuotaDate, SalesQuota, rowguid, ModifiedDate]\n- Table: SalesOrderHeader, Columns: [SalesOrderID, RevisionNumber, OrderDate, DueDate, ShipDate, Status, OnlineOrderFlag, SalesOrderNumber, PurchaseOrderNumber, AccountNumber, CustomerID, SalesPersonID, TerritoryID, BillToAddressID, ShipToAddressID, ShipMethodID, CreditCardID, CreditCardApprovalCode, CurrencyRateID, SubTotal, TaxAmt, Freight, TotalDue, Comment, rowguid, ModifiedDate]\n- Table: ProductProductPhoto, Columns: [ProductID, ProductPhotoID, Primary, ModifiedDate]\n- Table: SalesPerson, Columns: [BusinessEntityID, TerritoryID, SalesQuota, Bonus, CommissionPct, SalesYTD, SalesLastYear, rowguid, ModifiedDate]\n- Table: SalesTerritory, Columns: [TerritoryID, Name, CountryRegionCode, Group, SalesYTD, SalesLastYear, CostYTD, CostLastYear, rowguid, ModifiedDate]\n- Table: ProductReview, Columns: [ProductReviewID, ProductID, ReviewerName, ReviewDate, EmailAddress, Rating, Comments, ModifiedDate]\n- Table: BillOfMaterials, Columns: [BillOfMaterialsID, ProductAssemblyID, ComponentID, StartDate, EndDate, UnitMeasureCode, BOMLevel, PerAssemblyQty, ModifiedDate]\n- Table: EmailAddress, Columns: [BusinessEntityID, EmailAddressID, EmailAddress, rowguid, ModifiedDate]\n- Table: Location, Columns: [LocationID, Name, CostRate, Availability, ModifiedDate]\n- Table: ContactType, Columns: [ContactTypeID, Name, ModifiedDate]\n- Table: ProductModel, Columns: [ProductModelID, Name, CatalogDescription, Instructions, rowguid, ModifiedDate]\n- Table: ShoppingCartItem, Columns: [ShoppingCartItemID, ShoppingCartID, Quantity, ProductID, DateCreated, ModifiedDate]\n- Table: EmployeePayHistory, Columns: [BusinessEntityID, RateChangeDate, Rate, PayFrequency, ModifiedDate]",
        "Response": "Table: BusinessEntity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO rental (rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update)  VALUES (2483, '2005-06-18 21:22:23.0', 4225, 88, '2005-06-25 01:14:23.0', 1, '2006-02-15 21:30:53.0');\nDatabase State:\n- Table: category, Columns: [category_id, name, last_update]\n- Table: store, Columns: [store_id, manager_staff_id, address_id, last_update]",
        "Response": "Table: rental"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO track (Track_ID, Name, Location, Seating, Year_Opened)  VALUES (2, 'Chicagoland Speedway', 'Joliet, IL', 75000.0, 2001.0);\nDatabase State:\n- Table: track, Columns: [Track_ID, Name, Location, Seating, Year_Opened]\n- Table: race, Columns: [Race_ID, Name, Class, Date, Track_ID]",
        "Response": "Table: track"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, genomic_end, strand_orientation, instance_of, genomic_start)  VALUES ('(p)ppGpp synthetase I SpoT/RelA Taci_1213', 'microbial gene found in Thermanaerovibrio acidaminovorans DSM 6589', 'Thermanaerovibrio acidaminovorans DSM 6589', '8631062.0', 'protein-coding gene', '(p)ppGpp synthetase I SpoT/RelA Taci_1213', 'Taci_1213', '1263115', 'reverse strand', 'gene', '1260845');\nDatabase State:\n- Table: rela_tgs_domain_protein_family, Columns: [label, description, uniprot_protein_id, found_in_taxon, refseq_protein_id, encoded_by, subclass_of, biological_process, molecular_function, has_parts, part_of, instance_of]\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, genomic_end, strand_orientation, instance_of, genomic_start]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, category_for_people_who_died_here, topics_main_category, twinned_administrative_body, coat_of_arms_image, country, located_in_the_administrative_territorial_entity, coordinate_location, page_banner, instance_of, commons_gallery, musicbrainz_area_id, freebase_id, commons_category, geonames_id, gnd_id, inception, postal_code, local_dialing_code, located_in_time_zone, official_website, category_of_associated_people, capital_of, described_by_source, viaf_id, elevation_above_sea_level, facebook_places_id, population, area, gran_enciclop\u00e8dia_catalana_id, encyclop\u00e6dia_britannica_online_id, quora_topic_id, us_national_archives_identifier, encyclop\u00e6dia_universalis_id, demonym, different_from, great_russian_encyclopedia_online_id, archinform_location_id, library_of_congress_authority_id, flag_image, whos_on_first_id, nkcr_aut_id, worldcat_identities_id, gynopedia_id, interlingual_index_id, wordnet_31_synset_id, factgrid_item_id, official_name, store_norske_leksikon_id, image, online_pwn_encyclopedia_id, national_library_of_israel_j9u_id, native_label, den_store_danske_id, on_focus_list_of_wikimedia_project, biblioth\u00e8que_nationale_de_france_id)  VALUES ('C\u00f3rdoba', 'city in Argentina, capital of its province', 'Category:Deaths in C\u00f3rdoba', 'Category:C\u00f3rdoba, Argentina', 'Turin', 'Escudo ciudad de cordoba argentina.svg', 'Argentina', 'Capital Department', '-31.416666666667', 'Cordoba argentina banner.jpg', 'city', 'C\u00f3rdoba (Argentina)', '1420ce10-868e-4347-ac9c-b439b86bc0cd', '/m/01k03r', 'C\u00f3rdoba, Argentina', '3860259', '4213162-5', '+1573-00-00T00:00:00Z', 'X5000', '351', 'UTC\u221203:00', 'http://www.cordoba.gov.ar/', 'Category:People from C\u00f3rdoba, Argentina', 'C\u00f3rdoba Province', 'Armenian Soviet Encyclopedia', '136037587', 390.0, '109390122412267.0', 1329604.0, 576.0, '19820.0', 'place/Cordoba-Argentina', 'C\u00f3rdoba-Argentina', '10045340.0', 'cordoba-argentine', 'nan', 'C\u00f3rdoba', '2096223.0', '5438.0', 'n80040286', 'Bandera de la Ciudad de C\u00f3rdoba.svg', '421172813.0', 'ge609739', 'lccn-n80040286', 'C\u00f3rdoba (Argentina)', 'i82689', '08730969-n', 'Q83881', 'nan', 'C\u00f3rdoba_-_by_i_Argentina', 'Montaje CBA 9.jpg', '3888060', '987007564220605171', 'nan', 'C\u00f3rdoba_-_by_i_Argentina', 'nan', '119412443');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: capital_city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO driverStandings (driverStandingsId, raceId, driverId, points, position, positionText, wins)  VALUES (56515, 560, 270, 0.0, 22, '22', 0);\nDatabase State:\n- Table: pitStops, Columns: [raceId, driverId, stop, lap, time, duration, milliseconds]\n- Table: status, Columns: [statusId, status]\n- Table: lapTimes, Columns: [raceId, driverId, lap, position, time, milliseconds]\n- Table: constructorResults, Columns: [constructorResultsId, raceId, constructorId, points, status]\n- Table: races, Columns: [raceId, year, round, circuitId, name, date, time, url]\n- Table: circuits, Columns: [circuitId, circuitRef, name, location, country, lat, lng, alt, url]\n- Table: drivers, Columns: [driverId, driverRef, number, code, forename, surname, dob, nationality, url]\n- Table: constructorStandings, Columns: [constructorStandingsId, raceId, constructorId, points, position, positionText, wins]\n- Table: results, Columns: [resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId]\n- Table: seasons, Columns: [year, url]\n- Table: driverStandings, Columns: [driverStandingsId, raceId, driverId, points, position, positionText, wins]\n- Table: qualifying, Columns: [qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3]",
        "Response": "Table: driverStandings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, category, person, role, credited)  VALUES ('S20-E20', 'Cast', 'Hank Azaria', 'Chief Wiggum', 'true');\nDatabase State:\n- Table: Credit, Columns: [episode_id, category, person, role, credited]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, coat_of_arms, commons_category, flag_image, coat_of_arms_image, cbs_municipality_code, locator_map_image, country, coordinate_location, instance_of, shares_border_with, freebase_id, image, geonames_id, contains_settlement, topics_main_category, official_website, population, number_of_households, located_in_time_zone, postal_code, area, elevation_above_sea_level, flag, amsterdam_code, located_in_the_administrative_territorial_entity, musicbrainz_area_id, inaturalist_place_id, email_address, rkd_thesaurus_id, kvk_company_id, telephone_number, pronunciation_audio, category_for_maps)  VALUES ('Sittard-Geleen', 'municipality in the Netherlands', 'nan', 'Sittard-Geleen', 'Sittard-Geleen Vlag.svg', 'Inofficial coat of arms of Sittard-Geleen.svg', '1883', 'Map - NL - Municipality code 1883 (2009).svg', 'Netherlands', '51.0', 'municipality of the Netherlands', 'Echt-Susteren', '/m/0vjhh', 'Sittard, monumentale panden op centraal plein foto1 2007-07-15 10.45.JPG', '6544255.0', 'Leyenbroek', 'Category:Sittard-Geleen', 'https://www.sittard-geleen.nl/', 91743.0, 44704.0, 'Central European Time', '6120\u20136167', 80.53000000000000113, 47.0, 'nan', '11230.0', 'Limburg', '0ef1c310-30bb-4400-8585-80a80b2b104c', '17227.0', 'nan', '95698.0', '14130475.0', '31046.0', '160 Sittard-Geleen.ogg', 'Category:Maps of Sittard-Geleen');\nDatabase State:\n- Table: statue_of_sacred_heart_of_jesus_christ, Columns: [label, description, country, coordinate_location, image, depicts, genre, instance_of, located_in_the_administrative_territorial_entity, location, google_knowledge_graph_id]\n- Table: flag, Columns: [label, description, image, applies_to_jurisdiction, country, instance_of, google_knowledge_graph_id]\n- Table: physical_location, Columns: [label, description, commons_category, country, postal_code, located_in_the_administrative_territorial_entity, coordinate_location, instance_of, freebase_id, bag_residence_id, geonames_id, located_in_time_zone, whos_on_first_id, rkd_thesaurus_id]\n- Table: jurisdiction, Columns: [label, description, coat_of_arms, commons_category, flag_image, coat_of_arms_image, cbs_municipality_code, locator_map_image, country, coordinate_location, instance_of, shares_border_with, freebase_id, image, geonames_id, contains_settlement, topics_main_category, official_website, population, number_of_households, located_in_time_zone, postal_code, area, elevation_above_sea_level, flag, amsterdam_code, located_in_the_administrative_territorial_entity, musicbrainz_area_id, inaturalist_place_id, email_address, rkd_thesaurus_id, kvk_company_id, telephone_number, pronunciation_audio, category_for_maps]",
        "Response": "Table: political_border"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO paragraphs (id, ParagraphNum, PlainText, character_id, chapter_id)  VALUES (662399, 2559, '[Enter the Senators from TIMON]', 1261, 19570);\nDatabase State:\n- Table: paragraphs, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]\n- Table: chapters, Columns: [id, Act, Scene, Description, work_id]\n- Table: characters, Columns: [id, CharName, Abbrev, Description]\n- Table: works, Columns: [id, Title, LongTitle, Date, GenreType]",
        "Response": "Table: paragraphs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, located_in_the_administrative_territorial_entity, instance_of, coordinate_location, country, cgndb_unique_id)  VALUES ('Saint Croix Provincial Park', 'provincial park in New Brunswick', 'Charlotte County', 'provincial park of New Brunswick', '45.133727', 'Canada', 'DBELV');\nDatabase State:\n- Table: provincial_park_of_new_brunswick, Columns: [label, description, located_in_the_administrative_territorial_entity, instance_of, coordinate_location, country, cgndb_unique_id]\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, instance_of, freebase_id, shares_border_with, geonames_id, locator_map_image, inaturalist_place_id, cgndb_unique_id, statistics_canada_geographic_code]",
        "Response": "Table: provincial_park_of_new_brunswick"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, person_id, category, role, credited)  VALUES ('tt0629204', 'nm0004135', 'Sound Department', 'supervising sound editor', 'true');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, located_in_the_administrative_territorial_entity, country, instance_of)  VALUES ('Bungalow', 'building in Quickborn, Germany, monument no. 13761', 'Quickborn', 'Germany', 'bungalow');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, country, commons_category, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, freebase_id, geonames_id, openstreetmap_relation_id, image, area, population, whos_on_first_id]",
        "Response": "Table: bungalow"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (eid, aid)  VALUES (269734834, 15);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: certificate"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO storstr\u00f8m_county (label, description, coordinate_location, country, instance_of, digdag_id, part_of, capital, municipality_code_denmark, hasc, dissolved_abolished_or_demolished_date, cvr_number, replaced_by, opencorporates_id, inception, head_of_government)  VALUES ('Pr\u00e6st\u00f8 Municipality', 'former municipality in Denmark', '55.11857', 'Denmark', 'former municipality of Denmark', '120813', 'Storstr\u00f8m County', 'Pr\u00e6st\u00f8', '377', 'DK.ST.PR', '+2006-12-31T00:00:00Z', '67228812', 'Vordingborg Municipality', 'dk/67228812', '+1970-04-01T00:00:00Z', 'Vagn Ringius');\nDatabase State:\n- Table: capital_city, Columns: [label, description, country, coordinate_location, commons_category, located_in_the_administrative_territorial_entity, image, geonames_id, instance_of, danish_urban_area_code, located_in_time_zone, capital_of, whos_on_first_id, den_store_danske_id, trap_danmark_id]\n- Table: storstr\u00f8m_county, Columns: [label, description, coordinate_location, country, instance_of, digdag_id, part_of, capital, municipality_code_denmark, hasc, dissolved_abolished_or_demolished_date, cvr_number, replaced_by, opencorporates_id, inception, head_of_government]\n- Table: head_of_government, Columns: [label, description, instance_of, position_held, member_of_political_party, country_of_citizenship, sex_or_gender]\n- Table: administrative_centre, Columns: [label, description, coordinate_location, country, instance_of, digdag_id, part_of, capital, municipality_code_denmark, hasc, dissolved_abolished_or_demolished_date, cvr_number, replaced_by, opencorporates_id, inception, head_of_government]",
        "Response": "Table: storstr\u00f8m_county"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, homologene_id, refseq_rna_id, encodes, found_in_taxon, exact_match, instance_of, expressed_in)  VALUES ('Angpt2', 'protein-coding gene in the species Mus musculus', '11601', 'protein-coding gene', '22401.0', 'NM_007426', 'Angiopoietin 2', 'house mouse', 'http://identifiers.org/ncbigene/11601', 'gene', 'external carotid artery');\nDatabase State:\n- Table: fibrinogen_alpha_beta_gamma_chain_c_terminal_globular_subdomain_1, Columns: [label, description, uniprot_protein_id, ensembl_protein_id, encoded_by, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (student_id)  VALUES (1247, 1468);\nDatabase State:\n- Table: Likes, Columns: [student_id]",
        "Response": "Table: Likes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION)  VALUES ('e55295b6-4d4e-4fc6-b249-93d6a28de5b3', '1978-03-10', NULL, '3ef7e881-6e78-429e-825e-76065cdb0f41', 'd5c05289-0801-4b60-bb35-701fb1367664', 171054004.0, 'Pregnancy diet education', 72892002, 'Normal pregnancy');\nDatabase State:\n- Table: procedures, Columns: [DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: careplans, Columns: [ID, START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: encounters, Columns: [ID, DATE, PATIENT, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]",
        "Response": "Table: careplans"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, topics_main_category, instance_of, country, applies_to_jurisdiction, has_parts, freebase_id)  VALUES ('Government of Jharkhand', 'Indian State Government', 'Category:Government of Jharkhand', 'state government', 'India', 'Jharkhand', 'Jharkhand Legislative Assembly', '/m/04g1_tx');\nDatabase State:\n- Table: governing_body, Columns: [label, description, instance_of, country, has_parts, different_from, applies_to_jurisdiction]\n- Table: office_held_by_head_of_government, Columns: [label, description, instance_of, subclass_of, country, applies_to_jurisdiction, has_list, inception, part_of]\n- Table: jurisdiction, Columns: [label, description, page_banner, country, commons_category, iso_3166_2_code, located_in_the_administrative_territorial_entity, coordinate_location, locator_map_image, shares_border_with, official_website, topics_main_category, gnd_id, freebase_id, fips_10_4_countries_and_regions, instance_of, geonames_id, musicbrainz_area_id, openstreetmap_relation_id, inception, getty_thesaurus_of_geographic_names_id, curlie_id, capital, encyclop\u00e6dia_britannica_online_id, head_of_government, population, area, native_label, location_map, subreddit, quora_topic_id, indian_census_area_code_2001, image, wikimedia_outline, category_of_associated_people, office_held_by_head_of_government, legislative_body, executive_body, coextensive_with, different_from, viaf_id, male_population, female_population, urban_population, rural_population, mdws_place_id, library_of_congress_authority_id, literate_population, illiterate_population, language_used, whos_on_first_id, nkcr_aut_id, category_for_maps, geoshape, wolfram_language_entity_code, kbpedia_id, hasc, economy_of_topic, inaturalist_place_id, store_norske_leksikon_id, national_library_of_israel_j9u_id, den_store_danske_id, online_pwn_encyclopedia_id, gran_enciclop\u00e8dia_catalana_id, head_of_state]\n- Table: political_border, Columns: [label, description, country, commons_category, iso_3166_2_code, located_in_the_administrative_territorial_entity, coordinate_location, locator_map_image, shares_border_with, official_website, topics_main_category, gnd_id, freebase_id, fips_10_4_countries_and_regions, musicbrainz_area_id, instance_of, geonames_id, page_banner, category_of_associated_people, getty_thesaurus_of_geographic_names_id, openstreetmap_relation_id, head_of_state, capital, encyclop\u00e6dia_britannica_online_id, curlie_id, inception, area, population, head_of_government, quora_topic_id, contains_the_administrative_territorial_entity, subreddit, indian_census_area_code_2001, gran_enciclop\u00e8dia_catalana_id, wikimedia_outline, legislative_body, office_held_by_head_of_government, executive_body, location_map, coextensive_with, different_from, viaf_id, male_population, female_population, urban_population, rural_population, mdws_place_id, library_of_congress_authority_id, native_label, literate_population, illiterate_population, language_used, image, whos_on_first_id, category_for_maps, geoshape, wolfram_language_entity_code, kbpedia_id, hasc, inaturalist_place_id, economy_of_topic, twitter_topic_id, store_norske_leksikon_id, den_store_danske_id, national_library_of_israel_j9u_id, online_pwn_encyclopedia_id, official_name, biblioth\u00e8que_nationale_de_france_id, nkcr_aut_id]\n- Table: administrative_territorial_entity, Columns: [label, description, coordinate_location, freebase_id, instance_of, country, contains_the_administrative_territorial_entity, located_in_the_administrative_territorial_entity]\n- Table: delimitation_orders_of_india_under_delimitation_act_2002, Columns: [label, description, instance_of, country, applies_to_jurisdiction, legal_citation_of_this_text, part_of, effective_date]\n- Table: part, Columns: [label, description, topics_main_category, instance_of, country, applies_to_jurisdiction, has_parts, freebase_id]\n- Table: capital_city, Columns: [label, description, instance_of, located_in_the_administrative_territorial_entity, country, coordinate_location, topics_main_category, freebase_id, image, geonames_id, gnd_id, elevation_above_sea_level, category_of_associated_people, capital_of, viaf_id, postal_code, local_dialing_code, population, official_website, quora_topic_id, area, page_banner, native_label, commons_category, authority, library_of_congress_authority_id, gran_enciclop\u00e8dia_catalana_id, whos_on_first_id, category_for_maps, worldcat_identities_id, store_norske_leksikon_id, national_library_of_israel_j9u_id, located_in_time_zone, encyclop\u00e6dia_britannica_online_id]\n- Table: executive_branch, Columns: [label, description, instance_of, country, part_of, applies_to_jurisdiction, has_parts, freebase_id]",
        "Response": "Table: part"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity)  VALUES (32, 10258, 32, 6);\nDatabase State:\n- Table: Employees, Columns: [EmployeeID, LastName, FirstName, BirthDate, Photo, Notes]\n- Table: Customers, Columns: [CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country]",
        "Response": "Table: OrderDetails"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date)  VALUES (16, 'clothes', 'US', '2017-11-02 17:26:30', '2018-03-02 17:07:50');\nDatabase State:\n- Table: Customer_Addresses, Columns: [customer_id, premise_id, date_address_from, address_type_code, date_address_to]\n- Table: Premises, Columns: [premise_id, premises_type, premise_details]\n- Table: Mailshot_Campaigns, Columns: [mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date]\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password]\n- Table: Order_Items, Columns: [item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity]\n- Table: Products, Columns: [product_id, product_category, product_name]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges]",
        "Response": "Table: Mailshot_Campaigns"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score)  VALUES (519, 14, 2014, 338);\nDatabase State:\n- Table: ranking_criteria, Columns: [id, ranking_system_id, criteria_name]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Member_ID, Branch_ID, Register_Year)  VALUES (8, '8', '2016');\nDatabase State:\n- Table: branch, Columns: [Branch_ID, Name, Open_year, Address_road, City, membership_amount]",
        "Response": "Table: membership_register_branch"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, taxon_name, taxon_rank, parent_taxon, gbif_taxon_id, instance_of, catalogue_of_life_id, ncbi_taxonomy_id)  VALUES ('Aspergillus fumigatus', 'species of fungus', 'Aspergillus fumigatus', 'species', 'Aspergillus', '5260010.0', 'taxon', 'HC3H', '746128.0');\nDatabase State:\n- Table: natural_product, Columns: [label, description, taxon_name, taxon_rank, parent_taxon, gbif_taxon_id, instance_of, catalogue_of_life_id, ncbi_taxonomy_id]",
        "Response": "Table: natural_product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Event_ID, Event_Name, Party_ID, Member_in_charge_ID)  VALUES (8, 'Election Meeting', 1, 4);\nDatabase State:\n- Table: party, Columns: [Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
        "Response": "Table: party_events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO voice-actors (character, voice-actor, movie)  VALUES ('Maid Marian', 'Monica Evans', 'Robin Hood');\nDatabase State:\n- Table: director, Columns: [name, director]\n- Table: movies_total_gross, Columns: [movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross]\n- Table: voice-actors, Columns: [character, voice-actor, movie]",
        "Response": "Table: voice-actors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO expressed_in (label, description, freebase_id, subclass_of, uberon_id, instance_of)  VALUES ('medial ganglionic eminence', 'part of the ganglionic eminence', 'nan', 'nan', '4024.0', 'anatomical entity type');\nDatabase State:\n- Table: expressed_in, Columns: [label, description, freebase_id, subclass_of, uberon_id, instance_of]",
        "Response": "Table: expressed_in"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, sport, followed_by, follows, instance_of, country, point_in_time, competition_class, has_parts, on_focus_list_of_wikimedia_project)  VALUES ('1987 Israeli Badminton Championships', 'badminton championships', 'badminton', '1988 Israeli Badminton Championships', '1986 Israeli Badminton Championships', 'Israeli Badminton Championships', 'Israel', '+1987-00-00T00:00:00Z', 'national championship', '1987 Israel Badminton Championships \u2013 men''s singles', 'WikiProject Badminton/tournament focus list');\nDatabase State:\n- Table: israeli_badminton_championships, Columns: [label, description, sport, followed_by, follows, instance_of, country, point_in_time, competition_class, has_parts, on_focus_list_of_wikimedia_project]\n- Table: followed_by, Columns: [label, description, sport, followed_by, follows, instance_of, country, point_in_time, competition_class, has_parts, on_focus_list_of_wikimedia_project]\n- Table: follows, Columns: [label, description, followed_by, follows, instance_of, sport, country, point_in_time, competition_class, has_parts, on_focus_list_of_wikimedia_project]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of)  VALUES ('GT Interactive Software', 'company', 'video game publisher');\nDatabase State:\n- Table: video_game_retail_package, Columns: [label, description, platform, publication_date, publisher, part_of, instance_of, place_of_publication]\n- Table: computing_platform, Columns: [label, description, commons_category, freebase_id, follows, followed_by, instance_of]\n- Table: publisher, Columns: [label, description, instance_of]\n- Table: followed_by, Columns: [label, description, freebase_id, followed_by, follows, instance_of, image, subclass_of, commons_category]",
        "Response": "Table: publisher"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO ribose_5_phosphate_isomerase_type_a_subgroup (label, description, subclass_of, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of)  VALUES ('Putative ribose 5-phosphate isomerase SPy_0889', 'microbial protein found in Streptococcus pyogenes M1 GAS', 'protein', 'putative ribose 5-phosphate isomerase SPy_0889', 'P66697', 'nan', 'nan', 'Streptococcus pyogenes M1 GAS', 'NP_269088', 'protein', 'Ribose-5-phosphate isomerase, type A, subgroup');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: ribose_5_phosphate_isomerase_type_a_subgroup"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO former_educational_institution (label, description, instance_of, country)  VALUES ('Tatung Commercial High School', 'private senior vocational school in East District, Chiayi City', 'high school', 'nan');\nDatabase State:\n- Table: place_of_birth, Columns: [label, description, commons_category, country, image, postal_code, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, instance_of, freebase_id, gnd_id, viaf_id, geonames_id, official_website, area, commons_gallery, locator_map_image, population]\n- Table: part, Columns: [label, description, commons_category, topics_main_category, freebase_id, gnd_id, viaf_id, instance_of, page_banner, quora_topic_id, has_parts, stw_thesaurus_for_economics_id, nkcr_aut_id, topics_main_wikimedia_portal, category_for_maps, french_vikidia_id, worldcat_identities_id, coordinate_location, locator_map_image, part_of, museum_digital_place_id, mapycz_id]",
        "Response": "Table: former_educational_institution"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO twitter (TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID)  VALUES ('tw-699926742132199425', 'Wednesday', 5, 17, 'en', 'FALSE', 876, 0, 0, 45, 0.0, 'How to Automate HIPAA Compliance (Part 2): Use AWS Service Catalog for Code Deployments http://blogs.aws.amazon.com/security/post/TxAHB2MFO7QCIX/How-to-Automate-HIPAA-Compliance-Part-2-Use-AWS-Service-Catalog-for-Code-Deploym?utm_content=buffer0aea2&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer', 3040, 'tw-15375974');\nDatabase State:\n- Table: twitter, Columns: [TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID]",
        "Response": "Table: twitter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (REFID, REF_DATE, RESPONSE)  VALUES (154354, '2007-07-01 12:00:00.0', 'false');\nDatabase State:\n- Table: Demog, Columns: [GEOID, INHABITANTS_K, INCOME_K, A_VAR1, A_VAR2, A_VAR3, A_VAR4, A_VAR5, A_VAR6, A_VAR7, A_VAR8, A_VAR9, A_VAR10, A_VAR11, A_VAR12, A_VAR13, A_VAR14, A_VAR15, A_VAR16, A_VAR17, A_VAR18]",
        "Response": "Table: mailings3"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO muallaqat (label, description, instance_of, author, google_knowledge_graph_id, form_of_creative_work, part_of)  VALUES ('Mu\u02bballaqah of Al-Nabigha', 'poem written by Al-Nabigha', 'poem', 'Al-Nabigha', '/g/11b8zm3dl9', 'poem', 'Mu''allaqat');\nDatabase State:\n- Table: author, Columns: [label, description, library_of_congress_authority_id, viaf_id, isni, freebase_id, instance_of, sex_or_gender, occupation, date_of_death, fast_id, date_of_birth, encyclop\u00e6dia_britannica_online_id, languages_spoken_written_or_signed, cerl_thesaurus_id, worldcat_identities_id, biblioth\u00e8que_nationale_de_france_id, copyright_status_as_a_creator, given_name, hill_museum_manuscript_library_id, poetsgate_poet_id, aldiwan_poet_id, national_library_of_israel_j9u_id, gnd_id]",
        "Response": "Table: muallaqat"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, found_in_taxon, encoded_by, subclass_of, has_parts, cell_component, molecular_function, biological_process, instance_of, refseq_protein_id, part_of)  VALUES ('50S ribosomal protein L9 SSUBM407_2004', 'microbial protein found in Streptococcus suis BM407', 'A0A0H3N2E7', 'Streptococcus suis BM407', '50S ribosomal protein L9 SSUBM407_2004', 'protein', 'Ribosomal protein L9, C-terminal', 'ribosome', 'RNA binding', 'protein biosynthesis', 'protein', 'YP_003029690', 'Ribosomal protein L9, bacteria/chloroplast');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: ribosomal_protein_l9_c_terminal_domain_superfamily, Columns: [label, description, uniprot_protein_id, found_in_taxon, encoded_by, subclass_of, has_parts, cell_component, molecular_function, biological_process, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: ribosomal_protein_l9_c_terminal_domain_superfamily"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, located_in_the_administrative_territorial_entity, country, shares_border_with, capital, coordinate_location, locator_map_image, inception, topics_main_category, instance_of, freebase_id, official_website, geonames_id, area, population, image, commons_category, inaturalist_place_id)  VALUES ('Wisconsin', 'state of the United States of America', 'United States of America', 'United States of America', 'Michigan', 'Madison', '44.5', 'Wisconsin in United States.svg', '+1848-05-29T00:00:00Z', 'Category:Wisconsin', 'U.S. state', '/m/0824r', 'https://www.wisconsin.gov/', '5279468.0', 169640.0, 5893718.0, 'nan', 'Wisconsin', '32.0');\nDatabase State:\n- Table: administrative_centre, Columns: [label, description, located_in_the_administrative_territorial_entity, country, shares_border_with, capital, coordinate_location, locator_map_image, inception, topics_main_category, instance_of, freebase_id, official_website, geonames_id, musicbrainz_area_id, area, population, image, commons_category, inaturalist_place_id]\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, country, shares_border_with, capital, coordinate_location, locator_map_image, inception, topics_main_category, instance_of, freebase_id, official_website, geonames_id, area, population, image, commons_category, inaturalist_place_id]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO region (Region_id, Region_code, Region_name)  VALUES (11, 'CZ', 'Czech Republic');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: region"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Participant_ID, Participant_Type_Code, Participant_Details)  VALUES (26, 'Organizer', 'Vilma Schinner');\nDatabase State:\n- Table: Events, Columns: [Event_ID, Service_ID, Event_Details]\n- Table: Participants, Columns: [Participant_ID, Participant_Type_Code, Participant_Details]\n- Table: Participants_in_Events, Columns: [Event_ID, Participant_ID]\n- Table: Services, Columns: [Service_ID, Service_Type_Code]",
        "Response": "Table: Participants"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO natural_product (label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number)  VALUES ('Shewanella oneidensis MR-1', 'nan', 'strain', 'Shewanella oneidensis MR-1', 'Shewanella oneidensis', '211586', 'Gram-negative bacteria', 'GCA_000146165.2');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: natural_product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO characters (MovieID, ActorID, Character_Name, creditOrder, pay, screentime)  VALUES (200, 1248, 'Jim''s Dad', 7, NULL, NULL);\nDatabase State:\n- Table: actor, Columns: [ActorID, Name, Date_of_Birth, Birth_City, Birth_Country, Height_(Inches), Biography, Gender, Ethnicity, NetWorth]\n- Table: characters, Columns: [MovieID, ActorID, Character_Name, creditOrder, pay, screentime]",
        "Response": "Table: characters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, located_on_astronomical_body, named_after, official_name, described_at_url, short_name, google_knowledge_graph_id)  VALUES ('Snegurochka Planitia quadrangle', 'quadrangle on Venus', 'quadrangle on Venus', 'Venus', 'Snegurochka Planitia', 'Snegurochka Planitia', 'https://planetarynames.wr.usgs.gov/images/v1_comp.pdf', 'V-1', '/g/11dxs42dd1');\nDatabase State:\n- Table: eponym, Columns: [label, description, instance_of, located_on_astronomical_body, gazetteer_of_planetary_nomenclature_id, coordinate_location, google_knowledge_graph_id]\n- Table: quadrangle_on_venus, Columns: [label, description, instance_of, located_on_astronomical_body, named_after, official_name, described_at_url, short_name, google_knowledge_graph_id]",
        "Response": "Table: quadrangle_on_venus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, country, coordinate_location, freebase_id, instance_of, located_in_the_administrative_territorial_entity, population)  VALUES ('Fariman County', 'county in Razavi Khorasan Province, Iran', 'Iran', '35.7', '/m/025z_hf', 'county of Razavi Khorasan Province', 'Razavi Khorasan Province', 99001.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO u2base (userid, movieid, rating)  VALUES (5408, 2462515, '2');\nDatabase State:\n- Table: actors, Columns: [actorid, a_gender, a_quality]\n- Table: u2base, Columns: [userid, movieid, rating]\n- Table: directors, Columns: [directorid, d_quality, avg_revenue]\n- Table: movies2directors, Columns: [movieid, directorid, genre]\n- Table: users, Columns: [userid, age, u_gender, occupation]",
        "Response": "Table: u2base"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO games_competitor (id, games_id, person_id, age)  VALUES (75496, 36, 57209, 22);\nDatabase State:\n- Table: city, Columns: [id, city_name]\n- Table: person_region, Columns: [person_id, region_id]\n- Table: person, Columns: [id, full_name, gender, height, weight]\n- Table: medal, Columns: [id, medal_name]\n- Table: sport, Columns: [id, sport_name]\n- Table: games_city, Columns: [games_id, city_id]\n- Table: competitor_event, Columns: [event_id, competitor_id, medal_id]\n- Table: event, Columns: [id, sport_id, event_name]\n- Table: games_competitor, Columns: [id, games_id, person_id, age]\n- Table: games, Columns: [id, games_year, games_name, season]",
        "Response": "Table: games_competitor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Code, Name, Price, Manufacturer)  VALUES (8, 'Printer', 270, 3);\nDatabase State:\n- Table: Manufacturers, Columns: [Code, Name, Headquarter, Founder, Revenue]\n- Table: Products, Columns: [Code, Name, Price, Manufacturer]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, encoded_by, found_in_taxon, cell_component, instance_of, refseq_protein_id, part_of)  VALUES ('Transglycosylase-associated protein Mesci_3602', 'microbial protein found in Mesorhizobium ciceri biovar biserrulae WSM1271', 'E8TLH1', 'transglycosylase-associated protein Mesci_3602', 'Mesorhizobium ciceri biovar biserrulae WSM1271', 'membrane', 'protein', 'YP_004142772', 'Transglycosylase-associated protein');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: transglycosylase_associated_protein"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (City_ID, City, Hanzi, Hanyu_Pinyin, Regional_Population, GDP)  VALUES (10, 'Jinhua ( Zhejiang )', '\u91d1\u534e/ \u91d1\u83ef', 'J\u012bnhu\u00e1', 4614100, 244.7700000000000102);\nDatabase State:\n- Table: hosting_city, Columns: [Year, Match_ID, Host_City]\n- Table: temperature, Columns: [City_ID, Jan, Feb, Mar, Apr, Jun, Jul, Aug, Sep, Oct, Nov, Dec]",
        "Response": "Table: city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, country, coat_of_arms_image, postal_code, locator_map_image, shares_border_with, located_in_time_zone, coordinate_location, head_of_government, instance_of, freebase_id, ine_municipality_code, population, geonames_id, openstreetmap_relation_id, topics_main_category, viaf_id, official_website, image, office_held_by_head_of_government, located_in_the_administrative_territorial_entity, elevation_above_sea_level, area, licence_plate_code, gran_enciclop\u00e8dia_catalana_id, whos_on_first_id, official_name, male_population, female_population, inspire_id, factgrid_item_id)  VALUES ('Armilla', 'municipality of Spain', 'Armilla', 'Spain', 'Escudo de Armilla (Granada).svg', '18100 (Armilla y [[Santa Juliana (Granada)', 'LocationArmilla.png', 'Alhend\u00edn', 'UTC+01:00', '37.142777777778', 'Gerardo S\u00e1nchez Escudero', 'municipality of Spain', '/m/02rp56n', '18021.0', 24629.0, '6357656.0', '342623.0', 'Category:Armilla', '144568843.0', 'http://www.ayuntamientodearmilla.es/', 'Ayuntamiento de Armilla (Granada).jpg', 'mayor of Armilla', 'Granada Province', 671.0, 4.419999999999999929, 'GR', '263737.0', '101757435.0', 'Armilla', 11987.0, 12187.0, 'ES.IGN.BDDAE.34011818021', 'Q344116');\nDatabase State:\n- Table: jurisdiction, Columns: [label, description, commons_category, country, coat_of_arms_image, postal_code, locator_map_image, shares_border_with, located_in_time_zone, coordinate_location, head_of_government, instance_of, freebase_id, ine_municipality_code, population, geonames_id, openstreetmap_relation_id, topics_main_category, viaf_id, official_website, image, office_held_by_head_of_government, located_in_the_administrative_territorial_entity, elevation_above_sea_level, area, licence_plate_code, gran_enciclop\u00e8dia_catalana_id, whos_on_first_id, official_name, male_population, female_population, inspire_id, factgrid_item_id]\n- Table: administrative_territorial_entity, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, country, topics_main_category, freebase_id, instance_of, openstreetmap_relation_id, image, whos_on_first_id, viaf_id, area, population, shares_border_with]\n- Table: given_name, Columns: [label, description, instance_of, language_of_work_or_name, said_to_be_the_same_as, different_from, native_label, writing_system, soundex, cologne_phonetics, caverphone, commons_category]\n- Table: political_border, Columns: [label, description, commons_category, country, coat_of_arms_image, postal_code, locator_map_image, shares_border_with, located_in_time_zone, coordinate_location, head_of_government, instance_of, freebase_id, ine_municipality_code, population, geonames_id, openstreetmap_relation_id, topics_main_category, viaf_id, official_website, image, office_held_by_head_of_government, located_in_the_administrative_territorial_entity, elevation_above_sea_level, area, licence_plate_code, gran_enciclop\u00e8dia_catalana_id, whos_on_first_id, official_name, male_population, female_population, factgrid_item_id]\n- Table: head_of_government, Columns: [label, description, instance_of, sex_or_gender, given_name, occupation, country_of_citizenship, languages_spoken_written_or_signed]\n- Table: office_held_by_head_of_government, Columns: [label, description, subclass_of, applies_to_jurisdiction, country, instance_of, female_form_of_label]",
        "Response": "Table: jurisdiction"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (School_ID, Nickname, Colors, League, Class, Division)  VALUES (3, 'Buccaneers', 'Garnet and White', 'DSHA', 'Fight A', 'Division 1');\nDatabase State:\n- Table: school_details, Columns: [School_ID, Nickname, Colors, League, Class, Division]\n- Table: school_performance, Columns: [School_Id, School_Year, Class_A, Class_AA]",
        "Response": "Table: school_details"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO decays_to (label, description, subclass_of, instance_of, atomic_number, neutron_number, mass, mass_excess, binding_energy, wolfram_language_entity_code, decays_to, half_life)  VALUES ('promethium-141', 'isotope of promethium', 'promethium', 'isotope of promethium', 61.0, 80.0, 140.9135550839999951, -80522.92100000000209, 1170855.540000000037, 'Entity[\"Isotope\", \"Promethium141\"]', 'neodymium-141', 20.89999999999999857);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: decays_to"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (actor_id, film_id, last_update)  VALUES (147, 987, '2006-02-15 05:05:03.0');\nDatabase State:\n- Table: actor, Columns: [actor_id, first_name, last_name, last_update]\n- Table: inventory, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: country, Columns: [country_id, country, last_update]\n- Table: film_actor, Columns: [actor_id, film_id, last_update]\n- Table: staff, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]\n- Table: address, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: payment, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: language, Columns: [language_id, name, last_update]\n- Table: customer, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]",
        "Response": "Table: film_actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SeasonStatus (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS)  VALUES (8900, '2004-2005', 'Canada U20', 'WJC-20', 'Regular Season', 6, 1, 2, 3, 2, 9);\nDatabase State:\n- Table: PlayerInfo, Columns: [ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0]",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Customer_ID, Policy_ID, Date_Opened, Date_Closed)  VALUES (582, 586, '2016-04-11', '2018-03-17');\nDatabase State:\n- Table: First_Notification_of_Loss, Columns: [FNOL_ID, Customer_ID, Policy_ID, Service_ID]\n- Table: Services, Columns: [Service_ID, Service_name]\n- Table: Claims, Columns: [Claim_ID, FNOL_ID, Effective_Date]\n- Table: Customers, Columns: [Customer_ID, Customer_name]\n- Table: Settlements, Columns: [Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount]\n- Table: Customers_Policies, Columns: [Customer_ID, Policy_ID, Date_Opened, Date_Closed]\n- Table: Available_Policies, Columns: [Policy_ID, policy_type_code, Customer_Phone]",
        "Response": "Table: Customers_Policies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Crime (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11450087, 'JB440688', '9/14/2018 4:00', '056XX N SACRAMENTO AVE', '820', 'STREET', 'FALSE', 'FALSE', 2011, 20, 40, 2, '6', '41.9837364', '-87.70403215');\nDatabase State:\n- Table: IUCR, Columns: [iucr_no, primary_description, secondary_description, index_code]\n- Table: Neighborhood, Columns: [neighborhood_name, community_area_no]\n- Table: Crime, Columns: [report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude]\n- Table: Community_Area, Columns: [community_area_no, community_area_name, side, population]\n- Table: Ward, Columns: [ward_no, alderman_first_name, alderman_last_name, alderman_name_suffix, ward_office_address, ward_office_zip, ward_email, ward_office_phone, ward_office_fax, city_hall_office_room, city_hall_office_phone, city_hall_office_fax, Population]\n- Table: FBI_Code, Columns: [fbi_code_no, title, description, crime_against]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (date, store_nbr, item_nbr, units)  VALUES ('2013-04-13', 40, 85, 0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, located_in_the_administrative_territorial_entity, country, coordinate_location, instance_of, geonames_id, elevation_above_sea_level, gnis_id, postal_code, fips_55_3_locations_in_the_us, population, area, local_dialing_code, whos_on_first_id, freebase_id, per_capita_income, number_of_households, viaf_id, worldcat_identities_id, commons_category, located_in_time_zone)  VALUES ('Franklin County', 'county in Maine, United States', 'Maine', 'United States of America', '44.879196', 'county of Maine', '4964821.0', NULL, '581289', 'nan', 'nan', 29456.0, 4518.0, 'nan', '102087433.0', '/m/0nm92', 29905.0, 12426.0, '139568183.0', 'lccn-n81124828', 'Franklin County, Maine', 'nan');\nDatabase State:\n- Table: eponym, Columns: [label, description, commons_category, instance_of, topics_main_category, freebase_id, image, described_by_source, library_of_congress_authority_id, national_library_of_israel_j9u_id, encyclop\u00e6dia_britannica_online_id]\n- Table: administrative_centre, Columns: [label, description, contains_the_administrative_territorial_entity, country, located_in_the_administrative_territorial_entity, commons_category, coordinate_location, topics_main_category, locator_map_image, freebase_id, fips_6_4, gnis_id, instance_of, population, geonames_id, official_website, musicbrainz_area_id, image, named_after, shares_border_with, inception, curlie_id, capital, us_national_archives_identifier, viaf_id, archinform_location_id, category_of_associated_people, area, encyclop\u00e6dia_britannica_online_id, whos_on_first_id, water_as_percent_of_area, native_label, maine_an_encyclopedia_id, wolfram_language_entity_code, worldcat_identities_id, hasc, openstreetmap_relation_id, ballotpedia_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households]\n- Table: wikimedia_category, Columns: [label, description, instance_of, commons_category, category_contains, category_combines_topics]\n- Table: county_of_maine, Columns: [label, description, contains_the_administrative_territorial_entity, country, located_in_the_administrative_territorial_entity, commons_category, coordinate_location, topics_main_category, locator_map_image, freebase_id, fips_6_4, gnis_id, instance_of, population, geonames_id, official_website, musicbrainz_area_id, image, named_after, shares_border_with, inception, curlie_id, capital, us_national_archives_identifier, viaf_id, archinform_location_id, category_of_associated_people, area, encyclop\u00e6dia_britannica_online_id, whos_on_first_id, water_as_percent_of_area, native_label, maine_an_encyclopedia_id, wolfram_language_entity_code, worldcat_identities_id, hasc, openstreetmap_relation_id, ballotpedia_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households]\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, country, coordinate_location, instance_of, geonames_id, elevation_above_sea_level, gnis_id, postal_code, fips_55_3_locations_in_the_us, population, area, local_dialing_code, whos_on_first_id, freebase_id, per_capita_income, number_of_households, viaf_id, worldcat_identities_id, commons_category, located_in_time_zone]\n- Table: political_border, Columns: [label, description, located_in_the_administrative_territorial_entity, country, commons_category, coordinate_location, topics_main_category, locator_map_image, freebase_id, fips_6_4, gnis_id, instance_of, population, geonames_id, official_website, contains_the_administrative_territorial_entity, area, shares_border_with, capital, inception, curlie_id, image, musicbrainz_area_id, us_national_archives_identifier, viaf_id, archinform_location_id, category_of_associated_people, encyclop\u00e6dia_britannica_online_id, whos_on_first_id, water_as_percent_of_area, native_label, maine_an_encyclopedia_id, wolfram_language_entity_code, worldcat_identities_id, hasc, openstreetmap_relation_id, ballotpedia_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households]\n- Table: capital_city, Columns: [label, description, country, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, curlie_id, freebase_id, instance_of, geonames_id, elevation_above_sea_level, image, commons_category, gnis_id, postal_code, official_website, fips_55_3_locations_in_the_us, population, local_dialing_code, area, capital_of, archinform_location_id, inception, library_of_congress_authority_id, gran_enciclop\u00e8dia_catalana_id, whos_on_first_id, viaf_id, worldcat_identities_id, per_capita_income, number_of_households, national_library_of_israel_j9u_id, quora_topic_id]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (zip_code, area_code)  VALUES (50314, 515);\nDatabase State:\n- Table: country, Columns: [zip_code, county, state]\n- Table: area_code, Columns: [zip_code, area_code]\n- Table: alias, Columns: [zip_code, alias]\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]\n- Table: zip_data, Columns: [zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, 1st_quarter_payroll, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA]\n- Table: avoid, Columns: [zip_code, bad_alias]",
        "Response": "Table: area_code"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id)  VALUES (1, 'M2-F1 #0', 'March 1, 1963', 'Thompson', 135.0, 0.0, 1, 2);\nDatabase State:\n- Table: flight, Columns: [id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id]",
        "Response": "Table: flight"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Transcripts (transcript_id, transcript_date, other_details)  VALUES (4, '1999-01-06 20:06:46', NULL);\nDatabase State:\n- Table: Courses, Columns: [course_id, course_name, course_description, other_details]\n- Table: Departments, Columns: [department_id, department_name, department_description, other_details]\n- Table: Semesters, Columns: [semester_id, semester_name, semester_description, other_details]\n- Table: Students, Columns: [student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details]\n- Table: Addresses, Columns: [address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details]\n- Table: Student_Enrolment_Courses, Columns: [student_course_id, course_id, student_enrolment_id]\n- Table: Sections, Columns: [section_id, course_id, section_name, section_description, other_details]\n- Table: Transcripts, Columns: [transcript_id, transcript_date, other_details]\n- Table: Transcript_Contents, Columns: [student_course_id, transcript_id]",
        "Response": "Table: Transcripts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0)  VALUES (15610, 'Jeremy Swanson', '1984-06-21', 1984, 6, 21, 'Red Rock, ON, CAN', 'Canada', 72, 207, 'D', 'L', 2002, 6, 169, 'Florida Panthers', 42, 0, 0, 'no');\nDatabase State:\n- Table: height_info, Columns: [height_id, height_in_cm, height_in_inch]",
        "Response": "Table: PlayerInfo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO taxon (label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, catalogue_of_life_id, gram_staining, lpsn_url, microsoft_academic_id)  VALUES ('Myxococcus xanthus', 'slime bacterium', 'Myxococcus', 'Myxococcus xanthus', 'taxon', 'species', '963969.0', '/m/0btyb3', '34.0', '3220583.0', '10032532.0', '7456V', 'Gram-negative bacteria', 'http://www.bacterio.net/myxococcus.html#xanthus', '2777120639.0');\nDatabase State:\n- Table: encodes, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: biological_process, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, catalogue_of_life_id, gram_staining, lpsn_url, microsoft_academic_id]\n- Table: rna_polymerase_rpb2_domain_2_protein_family, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: taxon"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO u2base (userid, movieid, rating)  VALUES (3203, 1721568, '5');\nDatabase State:\n- Table: u2base, Columns: [userid, movieid, rating]",
        "Response": "Table: u2base"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (product_id, product_name, product_price, product_description)  VALUES (4, 'books', 7111.680000000000291, 'good condition');\nDatabase State:\n- Table: Delivery_Route_Locations, Columns: [location_code, route_id, location_address_id, location_name]\n- Table: Actual_Order_Products, Columns: [actual_order_id, product_id]\n- Table: Order_Deliveries, Columns: [location_code, actual_order_id, delivery_status_code, driver_employee_id, truck_id, delivery_date]\n- Table: Products, Columns: [product_id, product_name, product_price, product_description]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, duration, start_time, end_time, short_name, follows, followed_by, series_ordinal, topics_main_template)  VALUES ('2019-2020 one-year-period', 'period of about one year starting in 2019 and ending in 2020', 'one-year-period overlapping two calendar years', 1.0, '+2019-00-00T00:00:00Z', '+2020-00-00T00:00:00Z', '2019-2020', '2018-2019 one-year-period', '2020\u20132021 one-year-period', '2019', 'Template:2019\u201320 in Cypriot volleyball');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: era"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (People_ID, Age, Name, Nationality, Graduation_College)  VALUES (7, 30, 'Jerry Corcoran', 'United States', 'Northeastern');\nDatabase State:\n- Table: people, Columns: [People_ID, Age, Name, Nationality, Graduation_College]",
        "Response": "Table: people"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)  VALUES (141, 'Verna', 'Arielle', 'Grant', '1-372-548-7538x314', 'adele.gibson@example.net', 'uuol', '7be9c03d5467d563555c51ebb3eb78e7f90832ec');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: People"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO taxon (label, description, taxon_name, taxon_rank, parent_taxon, instance_of, freebase_id, itis_tsn, ncbi_taxonomy_id, gbif_taxon_id, bacdive_id, gram_staining, irmng_id, lpsn_url, microsoft_academic_id, catalogue_of_life_id)  VALUES ('Bacillus subtilis', 'catalase-positive bacterium', 'Bacillus subtilis', 'species', 'Bacillus', 'taxon', '/m/03jv3q', '958555.0', '1423.0', '5428098.0', '1172.0', 'gram-positive bacteria', '10830088.0', 'http://www.bacterio.net/bacillus.html#subtilis', '2777272437.0', 'K8WV');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: taxon"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11531604, 'JB548270', '12/10/2018 22:40', '015XX N DAMEN AVE', '810', 'STREET', 'FALSE', 'FALSE', 1424, 14, 1, 24, '6', '41.9090189', '-87.67742282');\nDatabase State:\n- Table: IUCR, Columns: [iucr_no, primary_description, secondary_description, index_code]\n- Table: District, Columns: [district_no, district_name, address, zip_code, commander, email, phone, fax, tty, twitter]\n- Table: Crime, Columns: [report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude]\n- Table: Community_Area, Columns: [community_area_no, community_area_name, side, population]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Physician, Department, PrimaryAffiliation)  VALUES (9, 3, 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Affiliated_With"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID)  VALUES ('tw-701324993771261953', 'Sunday', 1, 21, 'tr', 'FALSE', 3785, 0, 0, 38, 0.0, 'Zombiler uyandnda Amazon Web Services hazr olacak http://woisio.com/en/ife-and-love/56c11506e4b0bbe73ced0931/zombiler-uyandiginda-amazon-web-services-hazir-olacak?partnerId=322', 2966, 'tw-3810564676');\nDatabase State:\n- Table: twitter, Columns: [TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID]",
        "Response": "Table: twitter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (staff_id, staff_name, gender, other_staff_details)  VALUES (6, 'Rodger', '1', NULL);\nDatabase State:\n- Table: Asset_Parts, Columns: [asset_id, part_id]\n- Table: Fault_Log_Parts, Columns: [fault_log_entry_id, part_fault_id, fault_status]\n- Table: Parts, Columns: [part_id, part_name, chargeable_yn, chargeable_amount, other_part_details]\n- Table: Skills_Required_To_Fix, Columns: [part_fault_id, skill_id]\n- Table: Engineer_Skills, Columns: [engineer_id, skill_id]",
        "Response": "Table: Staff"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO matchs (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('G1', '2005-12-18', 'Larisa', 'Ionikos', 0, 0, 'D', 2006);\nDatabase State:\n- Table: matchs, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph)  VALUES (4, 'Monday', 58, 54, 70.0, 7);\nDatabase State:\n- Table: route, Columns: [train_id, station_id]\n- Table: station, Columns: [id, network_name, services, local_authority]",
        "Response": "Table: weekly_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO followed_by (label, description, instance_of, follows, followed_by, part_of, point_in_time)  VALUES ('2018 BC', 'year', 'year BC', '2019 BC', '2017 BC', '2010s BC', '-2018-01-01T00:00:00Z');\nDatabase State:\n- Table: followed_by, Columns: [label, description, instance_of, follows, followed_by, part_of, point_in_time]\n- Table: follows, Columns: [label, description, instance_of, follows, followed_by, part_of, point_in_time]\n- Table: 2010s_bc, Columns: [label, description, instance_of, follows, followed_by, part_of, point_in_time]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (userid, movieid, rating)  VALUES (5643, 2289300, '4');\nDatabase State:\n- Table: movies2actors, Columns: [movieid, actorid, cast_num]\n- Table: actors, Columns: [actorid, a_gender, a_quality]\n- Table: movies2directors, Columns: [movieid, directorid, genre]",
        "Response": "Table: u2base"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (2153631, 10, 6080, 369, 874);\nDatabase State:\n- Table: Employees, Columns: [EmployeeID, FirstName, MiddleInitial, LastName]\n- Table: Sales, Columns: [SalesID, SalesPersonID, CustomerID, ProductID, Quantity]\n- Table: Customers, Columns: [CustomerID, FirstName, MiddleInitial, LastName]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (CID, CName, Credits, Instructor, Days, Hours, DNO)  VALUES ('600.601', 'COMPUTER SCIENCE SEMINAR', 1, 6191, 'ThF', '10:30-12', 600);\nDatabase State:\n- Table: Course, Columns: [CID, CName, Credits, Instructor, Days, Hours, DNO]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Gradeconversion, Columns: [lettergrade, gradepoint]\n- Table: Faculty, Columns: [FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]\n- Table: Enrolled_in, Columns: [StuID, CID, Grade]\n- Table: Department, Columns: [DNO, Division, DName, Room, Building, DPhone]\n- Table: Member_of, Columns: [FacID, DNO, Appt_Type]\n- Table: Minor_in, Columns: [StuID, DNO]",
        "Response": "Table: Course"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO country (Country_id, Country_name, Capital, Official_native_language)  VALUES (3, 'Iraq', 'Baghdad', 'Arabic ( Arabic script ) Kurdish');\nDatabase State:\n- Table: match_season, Columns: [Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College]\n- Table: team, Columns: [Team_id, Name]",
        "Response": "Table: country"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (name, friend, year)  VALUES ('Bob', 'Zach', 5);\nDatabase State:\n- Table: PersonFriend, Columns: [name, friend, year]",
        "Response": "Table: PersonFriend"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO hospital (label, description, coordinate_location, country, located_in_the_administrative_territorial_entity, heritage_designation, instance_of)  VALUES ('Dr. Susan LaFlesche Picotte Memorial Hospital', 'nan', '42.151667', 'United States of America', 'Nebraska', 'National Historic Landmark', 'hospital');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, country, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, openstreetmap_relation_id, instance_of, image, population, area]\n- Table: hospital, Columns: [label, description, coordinate_location, country, located_in_the_administrative_territorial_entity, heritage_designation, instance_of]",
        "Response": "Table: hospital"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Electoral_Register (electoral_register_id, cmi_cross_ref_id)  VALUES (2, 83);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Electoral_Register"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, reactome_id, found_in_taxon, instance_of, cites_work, part_of, exact_match, has_parts)  VALUES ('CREBRF binds CREB3', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-8874849)', 'R-HSA-8874849', 'Homo sapiens', 'biological process', 'A novel protein, Luman/CREB3 recruitment factor, inhibits Luman activation of the unfolded protein response', 'CREB3 factors activate genes', 'https://identifiers.org/reactome:R-HSA-8874849', 'CAMP responsive element binding protein 3');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: creb3_factors_activate_genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO member_attendance (Member_ID, Performance_ID, Num_of_Pieces)  VALUES (1, 4, 4);\nDatabase State:\n- Table: member_attendance, Columns: [Member_ID, Performance_ID, Num_of_Pieces]\n- Table: member, Columns: [Member_ID, Name, Nationality, Role]",
        "Response": "Table: member_attendance"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Date_received, Product, Sub-product, Issue, Sub-issue, Consumer_complaint_narrative, Tags, Consumer_consent_provided?, Submitted_via, Date_sent_to_company, Company_response_to_consumer, Timely_response?, Consumer_disputed?, Complaint_ID, Client_ID)  VALUES ('2015-05-26', 'Credit card', NULL, 'Other', NULL, NULL, NULL, 'Consent not provided', 'Web', '2015-05-29', 'Closed with explanation', 'Yes', 'Yes', 'CR1391779', 'C00005774');\nDatabase State:\n- Table: state, Columns: [StateCode, State, Region]\n- Table: district, Columns: [district_id, city, state_abbrev, division]",
        "Response": "Table: events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderDetailID, OrderID, ProductID, Quantity)  VALUES (98, 10284, 60, 20);\nDatabase State:\n- Table: Orders, Columns: [OrderID, CustomerID, EmployeeID, OrderDate, ShipperID]\n- Table: Products, Columns: [ProductID, ProductName, SupplierID, CategoryID, Unit, Price]\n- Table: Suppliers, Columns: [SupplierID, SupplierName, ContactName, Address, City, PostalCode, Country, Phone]\n- Table: Employees, Columns: [EmployeeID, LastName, FirstName, BirthDate, Photo, Notes]\n- Table: Customers, Columns: [CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country]",
        "Response": "Table: OrderDetails"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start)  VALUES ('50S ribosomal protein L5 Mb0737', 'microbial gene found in Mycobacterium bovis AF2122/97', 'Mycobacterium bovis AF2122/97', '1091873', 'gene', 'Mb0737', '50S ribosomal protein L5 Mb0737', 'nan', '814443', 'forward strand', '813880');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO region_sales (region_id, game_platform_id, num_sales)  VALUES (1, 11212, 0.1199999999999999956);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customers (ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age)  VALUES (118450, 'Female', 'Married-civ-spouse', 40, 2, 'Machine-op-inspct', 85);\nDatabase State:\n- Table: Mailings1_2, Columns: [REFID, REF_DATE, RESPONSE]\n- Table: Customers, Columns: [ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, image, taxon_name, taxon_rank, freebase_id, commons_category, ncbi_taxonomy_id, parent_taxon, instance_of, gbif_taxon_id, encyclopedia_of_life_id, itis_tsn, gram_staining, irmng_id, lpsn_url, mesh_descriptor_id, bacdive_id, microsoft_academic_id, openalex_id, catalogue_of_life_id, new_zealand_organisms_register_id)  VALUES ('Pseudomonas putida', 'species of bacterium', 'nan', 'Pseudomonas putida', 'species', '/m/045ny3', 'nan', '303', 'Pseudomonas', 'taxon', '3223145.0', '973141.0', '965297.0', 'Gram-negative bacteria', '11263822.0', 'http://www.bacterio.net/pseudomonas.html#putida', 'D016958', '12871.0', '2780543182.0', 'C2780543182', '4P3S2', '7ff315b8-05a0-4cf4-a12d-e0f475f0c992');\nDatabase State:\n- Table: encodes, Columns: [label, description, uniprot_protein_id, found_in_taxon, refseq_protein_id, encoded_by, subclass_of, has_parts, cell_component, molecular_function, part_of, instance_of]\n- Table: taxon, Columns: [label, description, image, taxon_name, taxon_rank, freebase_id, commons_category, ncbi_taxonomy_id, parent_taxon, instance_of, gbif_taxon_id, encyclopedia_of_life_id, itis_tsn, gram_staining, irmng_id, lpsn_url, mesh_descriptor_id, bacdive_id, microsoft_academic_id, openalex_id, catalogue_of_life_id, new_zealand_organisms_register_id]\n- Table: orn_lys_arg_decarboxylase_n_terminal_domain_protein_family, Columns: [label, description, uniprot_protein_id, found_in_taxon, refseq_protein_id, encoded_by, subclass_of, has_parts, cell_component, molecular_function, part_of, instance_of]\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, genomic_end, strand_orientation, instance_of, genomic_start]",
        "Response": "Table: taxon"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, score, date, type)  VALUES (60085, NULL, '2014-06-13', 'Reinspection/Followup');\nDatabase State:\n- Table: violations, Columns: [business_id, date, violation_type_id, risk_category, description]",
        "Response": "Table: inspections"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, country, instance_of, commons_category, image, coordinate_location, located_in_the_administrative_territorial_entity, freebase_id, geonames_id, elevation_above_sea_level)  VALUES ('Urdinarrain', 'human settlement in Argentina', 'Argentina', 'municipality', 'Urdinarrain', 'Argentina, Entre Rios, Urdinarrain (3).jpg', '-32.68555555555555', 'Gualeguaych\u00fa Department', '/m/025w2ft', '3427582.0', 68.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customers (customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire)  VALUES (14, 6, 'good', 'Tyler', 'Breitenberg', '1', '2016-04-20 21:04:35', '2018-03-03 13:46:38');\nDatabase State:\n- Table: Discount_Coupons, Columns: [coupon_id, date_issued, coupon_amount]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (zip_code, county, state)  VALUES (73756, 'KINGFISHER', 'OK');\nDatabase State:\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]\n- Table: zip_data, Columns: [zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, 1st_quarter_payroll, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA]\n- Table: area_code, Columns: [zip_code, area_code]\n- Table: zip_congress, Columns: [zip_code, district]\n- Table: country, Columns: [zip_code, county, state]\n- Table: alias, Columns: [zip_code, alias]\n- Table: state, Columns: [abbreviation, name]",
        "Response": "Table: country"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)  VALUES (4, 'Breakfast Tea', 'Grady & Kautzer', '2011-07-22 04:57:19', '2017-03-30 09:15:37');\nDatabase State:\n- Table: Catalog_Structure, Columns: [catalog_level_number, catalog_id, catalog_level_name]\n- Table: Catalogs, Columns: [catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
        "Response": "Table: Catalogs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score)  VALUES (177, 10, 2007, 18);\nDatabase State:\n- Table: university_year, Columns: [university_id, year, num_students, student_staff_ratio, pct_international_students, pct_female_students]\n- Table: country, Columns: [id, country_name]\n- Table: university, Columns: [id, country_id, university_name]\n- Table: university_ranking_year, Columns: [university_id, ranking_criteria_id, year, score]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update)  VALUES (145, 5, 2, 13209, 0.989999999999999992, '2006-02-14 15:16:03', '2006-02-15 22:12:30');\nDatabase State:\n- Table: inventory, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: country, Columns: [country_id, country, last_update]\n- Table: film_category, Columns: [film_id, category_id, last_update]\n- Table: film, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]",
        "Response": "Table: payment"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, follows, freebase_id, followed_by, has_parts, instance_of, topics_main_category, sport, point_in_time, edition_number, country, located_in_the_administrative_territorial_entity, location)  VALUES ('2007 Estoril Open', 'combined WTA/ATP tournament', '2006 Estoril Open', '/m/03grssg', '2008 Estoril Open', '2007 Estoril Open (women)', 'Portugal Open', 'Category:2007 Estoril Open', 'tennis', '+2007-00-00T00:00:00Z', '18.0', 'Portugal', 'Oeiras', 'National stadium');\nDatabase State:\n- Table: part, Columns: [label, description, follows, freebase_id, followed_by, has_parts, instance_of, topics_main_category, sport, point_in_time, edition_number, country, located_in_the_administrative_territorial_entity, location]\n- Table: portugal_open_women, Columns: [label, description, part_of, has_parts, sport, instance_of, organizer, point_in_time, edition_number, start_time, end_time, google_knowledge_graph_id]",
        "Response": "Table: part"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, encoded_by, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of)  VALUES ('2-oxoglutarate dehydrogenase subunit E1 ECIAI39_0683', 'microbial protein found in Escherichia coli IAI39', 'A0A0H3MF84', '2-oxoglutarate dehydrogenase subunit E1 ECIAI39_0683', 'tricarboxylic acid cycle', 'oxidoreductase activity, acting on the aldehyde or oxo group of donors, disulfide as acceptor', 'Multifunctional 2-oxoglutarate metabolism enzyme, C-terminal', 'Escherichia coli IAI39', 'YP_002406709', 'protein', 'Thiamin diphosphate-binding fold', 'protein');\nDatabase State:\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, instance_of, genomic_end, genomic_start, strand_orientation, ncbi_locus_tag]",
        "Response": "Table: 2_oxoglutarate_dehydrogenase_e1_component_n_terminal_domain_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, found_in_taxon, encoded_by, subclass_of, cell_component, molecular_function, biological_process, instance_of, refseq_protein_id, part_of)  VALUES ('Dithiobiotin synthetase BC4118', 'microbial protein found in Bacillus cereus ATCC 14579', 'Q818W9', 'Bacillus cereus ATCC 14579', 'dithiobiotin synthetase BC4118', 'protein', 'cytoplasm', 'metal ion binding', 'biotin biosynthetic process', 'protein', 'NP_833836', 'Dethiobiotin synthase BioD');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: dethiobiotin_synthase_biod, Columns: [label, description, uniprot_protein_id, found_in_taxon, encoded_by, subclass_of, cell_component, molecular_function, biological_process, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: dethiobiotin_synthase_biod"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO people (People_ID, Name, Height, Weight, Birth_Date, Birth_Place)  VALUES (6, 'Jake Gardiner', 205.0, 92.0, 'July 4, 1990', 'Minnetonka, Minnesota');\nDatabase State:\n- Table: body_builder, Columns: [Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total]",
        "Response": "Table: people"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, subclass_of, freebase_id, sport, commons_category, used_by, image, kbpedia_id, wordnet_31_synset_id)  VALUES ('watercraft', 'vehicles that are intended for locomotion on or in the water', 'vehicle', '/m/01rzcn', 'nan', 'Watercraft', 'nan', 'Dinghy.jpg', 'Watercraft', '05652179-n');\nDatabase State:\n- Table: intentional_human_activity, Columns: [label, description, instance_of, subclass_of, field_of_this_occupation, topics_main_category, commons_category, female_form_of_label, topics_main_template, properties_for_this_type, male_form_of_label, nkcr_aut_id]\n- Table: use, Columns: [label, description, subclass_of, freebase_id, sport, commons_category, used_by, image, kbpedia_id, wordnet_31_synset_id]\n- Table: field_of_work, Columns: [label, description, openstreetmap_tag_or_key, topics_main_wikimedia_portal, commons_category, bncf_thesaurus_id, topics_main_category, ndl_authority_id, subclass_of, freebase_id, gnd_id, library_of_congress_authority_id, gran_enciclop\u00e8dia_catalana_id, psh_id, quora_topic_id, jstor_topic_id, us_national_archives_identifier, encyclop\u00e6dia_universalis_id, uses, practiced_by, different_from, encyclop\u00e6dia_britannica_online_id, icon, french_vikidia_id, enciclop\u00e8dia_de_lesport_catal\u00e0_id, yso_id, instance_of, kbpedia_id, image, wordnet_31_synset_id, zhihu_topic_id, national_library_of_israel_j9u_id, abc_news_topic_id, den_store_danske_id, nkcr_aut_id, on_focus_list_of_wikimedia_project]",
        "Response": "Table: use"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, category, person, role, credited)  VALUES ('S20-E21', 'Sound Department', 'Mark Linden', 're-recording mixer', 'true');\nDatabase State:\n- Table: Award, Columns: [award_id, organization, year, award_category, award, person, role, episode_id, season, song, result]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO matchs (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('T1', '2009-11-01', 'Kasimpasa', 'Eskisehirspor', 1, 1, 'D', 2010);\nDatabase State:\n- Table: divisions, Columns: [division, name, country]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Problem_Log (problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details)  VALUES (13, 6, 10, 'Middleware', 'Reported', '2009-04-10 19:09:30', 'q', 't', 'o');\nDatabase State:\n- Table: Problem_Category_Codes, Columns: [problem_category_code, problem_category_description]\n- Table: Staff, Columns: [staff_id, staff_first_name, staff_last_name, other_staff_details]\n- Table: Product, Columns: [product_id, product_name, product_details]\n- Table: Problem_Log, Columns: [problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details]\n- Table: Problems, Columns: [problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details]",
        "Response": "Table: Problem_Log"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number)  VALUES ('Caulobacter crescentus CB15', 'nan', 'Caulobacter crescentus CB15', 'Caulobacter crescentus', '190650', 'strain', 'Gram-negative bacteria', 'GCA_000006905.1');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: natural_product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, encoded_by, ensembl_protein_id, biological_process, cell_component, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of)  VALUES ('C3a anaphylatoxin', 'peptide of human innate immune system', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'protein fragment', 'Anaphylatoxin, complement system');\nDatabase State:\n- Table: encodes, Columns: [label, description, uniprot_protein_id, encoded_by, ensembl_protein_id, biological_process, cell_component, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: anaphylatoxin_complement_system"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO school_bus (School_ID, Driver_ID, Years_Working, If_full_time)  VALUES (7, 9, 2, 'T');\nDatabase State:\n- Table: driver, Columns: [Driver_ID, Name, Party, Home_city, Age]\n- Table: school, Columns: [School_ID, Grade, School, Location, Type]\n- Table: school_bus, Columns: [School_ID, Driver_ID, Years_Working, If_full_time]",
        "Response": "Table: school_bus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO natural_product (label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number)  VALUES ('Helicobacter pylori 26695', 'bacterial strain', 'strain', 'Helicobacter pylori 26695', 'Helicobacter pylori', '85962', 'Gram-negative bacteria', 'GCA_000307795.1');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: natural_product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Documents_Mailed (document_id, mailed_to_address_id, mailing_date)  VALUES (2, 8, '1977-04-01 17:03:50');\nDatabase State:\n- Table: Circulation_History, Columns: [document_id, draft_number, copy_number, employee_id]\n- Table: Ref_Shipping_Agents, Columns: [shipping_agent_code, shipping_agent_name, shipping_agent_description]\n- Table: Ref_Document_Types, Columns: [document_type_code, document_type_description]\n- Table: Addresses, Columns: [address_id, address_details]\n- Table: Ref_Document_Status, Columns: [document_status_code, document_status_description]\n- Table: Employees, Columns: [employee_id, role_code, employee_name, other_details]\n- Table: Draft_Copies, Columns: [document_id, draft_number, copy_number]\n- Table: Documents_Mailed, Columns: [document_id, mailed_to_address_id, mailing_date]",
        "Response": "Table: Documents_Mailed"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share)  VALUES (1, 1, 'Auditions 1', '9 June', 5.200000000000000177, '12', '22.7%');\nDatabase State:\n- Table: performance, Columns: [Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share]",
        "Response": "Table: performance"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO observations (DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, VALUE, UNITS)  VALUES ('2013-03-04', 'a0312cb4-bebe-4dfe-8b9d-2e7aa1c9d76c', 'be391893-e4c1-4e5b-97d4-f38e3ce77a2f', '39156-5', 'Body Mass Index', 27.10000000000000142, 'kg/m2');\nDatabase State:\n- Table: patients, Columns: [patient, birthdate, deathdate, ssn, drivers, passport, prefix, first, last, suffix, maiden, marital, race, ethnicity, gender, birthplace, address]\n- Table: allergies, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: careplans, Columns: [ID, START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: conditions, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION]",
        "Response": "Table: observations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1020, 'Thornton', 'Ian', 22, 'M', 520, 7271, 'NYC');\nDatabase State:\n- Table: Member_of_club, Columns: [StuID, ClubID, Position]\n- Table: Club, Columns: [ClubID, ClubName, ClubDesc, ClubLocation]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, subclass_of, found_in_taxon, entrez_gene_id, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start)  VALUES ('phosphate ABC transporter permease PP_5327', 'microbial gene found in Pseudomonas putida KT2440', 'gene', 'Pseudomonas putida KT2440', '1042175', 'PP_5327', 'Phosphate ABC transporter permease PP_5327', 'gene', '6074254', 'reverse strand', '6072584');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, date, violation_type_id, risk_category, description)  VALUES (75406, '2014-05-12', '103139', 'Low Risk', 'Improper food storage');\nDatabase State:\n- Table: inspections, Columns: [business_id, score, date, type]\n- Table: businesses, Columns: [business_id, name, address, city, postal_code, latitude, longitude, phone_number, tax_code, business_certificate, application_date, owner_name, owner_address, owner_city, owner_state, owner_zip]\n- Table: violations, Columns: [business_id, date, violation_type_id, risk_category, description]",
        "Response": "Table: violations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, country, instance_of, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, freebase_id, official_website, image, geonames_id, locator_map_image, inception, capital, population, legislative_body, area, openstreetmap_relation_id, archinform_location_id)  VALUES ('Denbighshire', 'principal area in north-east Wales', 'Denbighshire', 'United Kingdom', 'principal area of Wales', 'Wales', '53.086666666667', 'Category:Denbighshire', '/m/01_784', 'http://www.denbighshire.gov.uk/', 'Berwyn Viaducts - geograph.org.uk - 862052.jpg', '2651385', 'Denbighshire in Wales.svg', '+1996-00-00T00:00:00Z', 'Ruthin', 95330.0, 'nan', 836.7451999999999544, '192442.0', '44734.0');\nDatabase State:\n- Table: snooker_season_1979_1980, Columns: [label, description, instance_of, part_of, location, start_time, end_time, winner, country, google_knowledge_graph_id]\n- Table: physical_location, Columns: [label, description, coordinate_location, instance_of, image, country, located_in_the_administrative_territorial_entity, commons_category, freebase_id]\n- Table: administrative_territorial_entity, Columns: [label, description, commons_category, country, instance_of, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, freebase_id, official_website, image, geonames_id, locator_map_image, inception, capital, population, legislative_body, area, openstreetmap_relation_id, archinform_location_id]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross)  VALUES ('Ernest Scared Stupid', 'Oct 11, 1991', 'Comedy', 'PG', '$14,143,280', '$28,320,147');\nDatabase State:\n- Table: characters, Columns: [movie_title, release_date, hero, villian, song]\n- Table: movies_total_gross, Columns: [movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross]\n- Table: voice-actors, Columns: [character, voice-actor, movie]\n- Table: director, Columns: [name, director]",
        "Response": "Table: movies_total_gross"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID)  VALUES ('245-67-8910', 'Johanson', 'Sandy', '6/2/05', 'US$69,000.00', 'F', NULL, 1, 6);\nDatabase State:\n- Table: position, Columns: [positionID, positiontitle, educationrequired, minsalary, maxsalary]\n- Table: location, Columns: [locationID, locationcity, address, state, zipcode, officephone]\n- Table: employee, Columns: [ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO advisedBy (p_id, p_id_dummy)  VALUES (362, 335);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: advisedBy"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO artist (Artist_ID, Artist, Age, Famous_Title, Famous_Release_date)  VALUES (3, 'Ophiolatry', 22, 'Antievangelistical Process (re-release)', '2009');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: artist"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO roller_coaster (Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status)  VALUES (2, 'Dauling Dragon', 'Happy Valley', 1, 3914.0, 105.0, '55', '2012', 'Operating');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: roller_coaster"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (People_ID, Name, Age, Height, Hometown)  VALUES (5, 'Eve Tatiana Cruz Oviedo', 19.0, 1.719999999999999974, 'Santo Domingo');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: people"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO visitor (ID, Name, Level_of_membership, Age)  VALUES (4, 'Ra\u00fal Brown', 2, 56);\nDatabase State:\n- Table: museum, Columns: [Museum_ID, Name, Num_of_Staff, Open_Year]\n- Table: visitor, Columns: [ID, Name, Level_of_membership, Age]\n- Table: visit, Columns: [Museum_ID, visitor_ID, Num_of_Ticket, Total_spent]",
        "Response": "Table: visitor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (BusinessEntityID, CreditCardID, ModifiedDate)  VALUES (14071, 18994, '2012-02-09 00:00:00.0');\nDatabase State:\n- Table: ScrapReason, Columns: [ScrapReasonID, Name, ModifiedDate]\n- Table: SalesTaxRate, Columns: [SalesTaxRateID, StateProvinceID, TaxType, TaxRate, Name, rowguid, ModifiedDate]\n- Table: Password, Columns: [BusinessEntityID, PasswordHash, PasswordSalt, rowguid, ModifiedDate]\n- Table: Currency, Columns: [CurrencyCode, Name, ModifiedDate]\n- Table: SalesTerritoryHistory, Columns: [BusinessEntityID, TerritoryID, StartDate, EndDate, rowguid, ModifiedDate]\n- Table: JobCandidate, Columns: [JobCandidateID, BusinessEntityID, Resume, ModifiedDate]\n- Table: Customer, Columns: [CustomerID, PersonID, StoreID, TerritoryID, AccountNumber, rowguid, ModifiedDate]\n- Table: SpecialOfferProduct, Columns: [SpecialOfferID, ProductID, rowguid, ModifiedDate]\n- Table: Document, Columns: [DocumentNode, DocumentLevel, Title, Owner, FolderFlag, FileName, FileExtension, Revision, ChangeNumber, Status, DocumentSummary, Document, rowguid, ModifiedDate]\n- Table: ProductModel, Columns: [ProductModelID, Name, CatalogDescription, Instructions, rowguid, ModifiedDate]\n- Table: TransactionHistory, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: ProductDocument, Columns: [ProductID, DocumentNode, ModifiedDate]\n- Table: SalesPerson, Columns: [BusinessEntityID, TerritoryID, SalesQuota, Bonus, CommissionPct, SalesYTD, SalesLastYear, rowguid, ModifiedDate]\n- Table: ProductReview, Columns: [ProductReviewID, ProductID, ReviewerName, ReviewDate, EmailAddress, Rating, Comments, ModifiedDate]\n- Table: PersonCreditCard, Columns: [BusinessEntityID, CreditCardID, ModifiedDate]\n- Table: ProductCostHistory, Columns: [ProductID, StartDate, EndDate, StandardCost, ModifiedDate]\n- Table: ProductInventory, Columns: [ProductID, LocationID, Shelf, Bin, Quantity, rowguid, ModifiedDate]\n- Table: Person, Columns: [BusinessEntityID, PersonType, NameStyle, Title, FirstName, MiddleName, LastName, Suffix, EmailPromotion, AdditionalContactInfo, Demographics, rowguid, ModifiedDate]\n- Table: Store, Columns: [BusinessEntityID, Name, SalesPersonID, Demographics, rowguid, ModifiedDate]\n- Table: Shift, Columns: [ShiftID, Name, StartTime, EndTime, ModifiedDate]\n- Table: SpecialOffer, Columns: [SpecialOfferID, Description, DiscountPct, Type, Category, StartDate, EndDate, MinQty, MaxQty, rowguid, ModifiedDate]\n- Table: CreditCard, Columns: [CreditCardID, CardType, CardNumber, ExpMonth, ExpYear, ModifiedDate]\n- Table: SalesPersonQuotaHistory, Columns: [BusinessEntityID, QuotaDate, SalesQuota, rowguid, ModifiedDate]\n- Table: Vendor, Columns: [BusinessEntityID, AccountNumber, Name, CreditRating, PreferredVendorStatus, ActiveFlag, PurchasingWebServiceURL, ModifiedDate]\n- Table: SalesOrderHeader, Columns: [SalesOrderID, RevisionNumber, OrderDate, DueDate, ShipDate, Status, OnlineOrderFlag, SalesOrderNumber, PurchaseOrderNumber, AccountNumber, CustomerID, SalesPersonID, TerritoryID, BillToAddressID, ShipToAddressID, ShipMethodID, CreditCardID, CreditCardApprovalCode, CurrencyRateID, SubTotal, TaxAmt, Freight, TotalDue, Comment, rowguid, ModifiedDate]\n- Table: BillOfMaterials, Columns: [BillOfMaterialsID, ProductAssemblyID, ComponentID, StartDate, EndDate, UnitMeasureCode, BOMLevel, PerAssemblyQty, ModifiedDate]\n- Table: SalesTerritory, Columns: [TerritoryID, Name, CountryRegionCode, Group, SalesYTD, SalesLastYear, CostYTD, CostLastYear, rowguid, ModifiedDate]\n- Table: WorkOrderRouting, Columns: [WorkOrderID, ProductID, OperationSequence, LocationID, ScheduledStartDate, ScheduledEndDate, ActualStartDate, ActualEndDate, ActualResourceHrs, PlannedCost, ActualCost, ModifiedDate]\n- Table: CountryRegionCurrency, Columns: [CountryRegionCode, CurrencyCode, ModifiedDate]\n- Table: ProductModelProductDescriptionCulture, Columns: [ProductModelID, ProductDescriptionID, CultureID, ModifiedDate]\n- Table: ProductCategory, Columns: [ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: ProductProductPhoto, Columns: [ProductID, ProductPhotoID, Primary, ModifiedDate]\n- Table: SalesOrderHeaderSalesReason, Columns: [SalesOrderID, SalesReasonID, ModifiedDate]\n- Table: ContactType, Columns: [ContactTypeID, Name, ModifiedDate]\n- Table: EmailAddress, Columns: [BusinessEntityID, EmailAddressID, EmailAddress, rowguid, ModifiedDate]\n- Table: ProductVendor, Columns: [ProductID, BusinessEntityID, AverageLeadTime, StandardPrice, LastReceiptCost, LastReceiptDate, MinOrderQty, MaxOrderQty, OnOrderQty, UnitMeasureCode, ModifiedDate]\n- Table: ProductDescription, Columns: [ProductDescriptionID, Description, rowguid, ModifiedDate]\n- Table: ShoppingCartItem, Columns: [ShoppingCartItemID, ShoppingCartID, Quantity, ProductID, DateCreated, ModifiedDate]\n- Table: ShipMethod, Columns: [ShipMethodID, Name, ShipBase, ShipRate, rowguid, ModifiedDate]\n- Table: UnitMeasure, Columns: [UnitMeasureCode, Name, ModifiedDate]\n- Table: Address, Columns: [AddressID, AddressLine1, AddressLine2, City, StateProvinceID, PostalCode, SpatialLocation, rowguid, ModifiedDate]\n- Table: BusinessEntityAddress, Columns: [BusinessEntityID, AddressID, AddressTypeID, rowguid, ModifiedDate]\n- Table: WorkOrder, Columns: [WorkOrderID, ProductID, OrderQty, StockedQty, ScrappedQty, StartDate, EndDate, DueDate, ScrapReasonID, ModifiedDate]\n- Table: SalesReason, Columns: [SalesReasonID, Name, ReasonType, ModifiedDate]\n- Table: BusinessEntityContact, Columns: [BusinessEntityID, PersonID, ContactTypeID, rowguid, ModifiedDate]\n- Table: BusinessEntity, Columns: [BusinessEntityID, rowguid, ModifiedDate]\n- Table: Employee, Columns: [BusinessEntityID, NationalIDNumber, LoginID, OrganizationNode, OrganizationLevel, JobTitle, BirthDate, MaritalStatus, Gender, HireDate, SalariedFlag, VacationHours, SickLeaveHours, CurrentFlag, rowguid, ModifiedDate]\n- Table: ProductListPriceHistory, Columns: [ProductID, StartDate, EndDate, ListPrice, ModifiedDate]\n- Table: PurchaseOrderDetail, Columns: [PurchaseOrderID, PurchaseOrderDetailID, DueDate, OrderQty, ProductID, UnitPrice, LineTotal, ReceivedQty, RejectedQty, StockedQty, ModifiedDate]\n- Table: CurrencyRate, Columns: [CurrencyRateID, CurrencyRateDate, FromCurrencyCode, ToCurrencyCode, AverageRate, EndOfDayRate, ModifiedDate]\n- Table: StateProvince, Columns: [StateProvinceID, StateProvinceCode, CountryRegionCode, IsOnlyStateProvinceFlag, Name, TerritoryID, rowguid, ModifiedDate]\n- Table: PurchaseOrderHeader, Columns: [PurchaseOrderID, RevisionNumber, Status, EmployeeID, VendorID, ShipMethodID, OrderDate, ShipDate, SubTotal, TaxAmt, Freight, TotalDue, ModifiedDate]\n- Table: Product, Columns: [ProductID, Name, ProductNumber, MakeFlag, FinishedGoodsFlag, Color, SafetyStockLevel, ReorderPoint, StandardCost, ListPrice, Size, SizeUnitMeasureCode, WeightUnitMeasureCode, Weight, DaysToManufacture, ProductLine, Class, Style, ProductSubcategoryID, ProductModelID, SellStartDate, SellEndDate, DiscontinuedDate, rowguid, ModifiedDate]\n- Table: AddressType, Columns: [AddressTypeID, Name, rowguid, ModifiedDate]\n- Table: SalesOrderDetail, Columns: [SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate]\n- Table: TransactionHistoryArchive, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: Culture, Columns: [CultureID, Name, ModifiedDate]\n- Table: Location, Columns: [LocationID, Name, CostRate, Availability, ModifiedDate]\n- Table: CountryRegion, Columns: [CountryRegionCode, Name, ModifiedDate]",
        "Response": "Table: PersonCreditCard"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (2338, 145, 0.04800000000000000099, NULL, 'Shark Tracker Light lager', 'Light Lager', 12.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: beers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO production (ID, model_year, country)  VALUES (307, 1980, 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: production"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO employee (Fname, Minit, Lname, Ssn, Bdate, Address, Sex, Salary, Super_ssn)  VALUES ('James', 'E', 'Borg', 888665555, '1937-11-10', '450 Stone, Houston, TX', 'M', 55000, NULL, 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (area_code)  VALUES (402, 'NE');\nDatabase State:\n- Table: VOTES, Columns: [vote_id]\n- Table: CONTESTANTS, Columns: [contestant_number]",
        "Response": "Table: AREA_CODE_STATE"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, country, part_of, freebase_id)  VALUES ('Tazeh Kand-e Davudlu', 'village in Iran', '39.0097', 'Chahardangeh Rural District (East Azerbaijan Province)', 'village', 'Iran', 'Ahar County', '/m/0x19gmp');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, instance_of, country, freebase_id, coordinate_location]",
        "Response": "Table: ahar_county"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (inspection_id, point_id, fine, inspector_comment)  VALUES (606325, 34, 100, 'The floors shall be constructed per code, be smooth and easily cleaned, and be kept clean and in good repair.DETAIL CLEAN FLOORS ALONG ALL WALL BASES, IN CORNERS, UNDERNEATH AND BEHIND ALL HEAVY EQUIPMENT. ALL FLOORS MUST BE SMOOTH AND EASILY CLEANABLE.');\nDatabase State:\n- Table: inspection_point, Columns: [point_id, Description, category, code, fine, point_level]\n- Table: employee, Columns: [employee_id, first_name, last_name, address, city, state, zip, phone, title, salary, supervisor]",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, topics_main_category, gnd_id, freebase_id, instance_of, quora_topic_id, coordinate_location, has_parts, viaf_id, locator_map_image, worldcat_identities_id, den_store_danske_id)  VALUES ('European Union', 'political and economic union of 27 European states', 'European Union', 'Category:European Union', '5098525-5', '/m/0_6t_z8', 'regional organization', 'European-Union', '50.116944444444', 'Germany', '207634635.0', 'European Union without internal borders.svg', 'lccn-n2004153355', 'Den_Europ\u00e6iske_Union');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, country, located_in_the_administrative_territorial_entity, coat_of_arms_image, capital, commons_category, coordinate_location, topics_main_category, instance_of, freebase_id, geonames_id, category_of_associated_people, openstreetmap_relation_id, official_website, shares_border_with, area, locator_map_image, population, inaturalist_place_id]\n- Table: political_border, Columns: [label, description, country, located_in_the_administrative_territorial_entity, commons_category, coat_of_arms_image, coordinate_location, topics_main_category, instance_of, freebase_id, geonames_id, shares_border_with, official_website, area, capital, locator_map_image, population, archinform_location_id, openstreetmap_relation_id, inaturalist_place_id, image]\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, new_york_times_topic_id, babelnet_id, geonames_id, gnd_id, unicode_character, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, coordinates_of_westernmost_point, geography_of_topic, stw_thesaurus_for_economics_id, iso_3166_1_alpha_3_code, office_held_by_head_of_government, quora_topic_id, curlie_id, country, native_label, basic_form_of_government, musicbrainz_area_id, has_quality, coat_of_arms_image, uic_alphabetical_country_code, mesh_descriptor_id, located_in_or_next_to_body_of_water, insee_countries_and_foreign_territories_code, diplomatic_relation, highest_judicial_authority, ituisoiec_object_identifier, commons_gallery, inception, viaf_id, civicus_monitor_country_entry, nuts_code, history_of_topic, gran_enciclop\u00e8dia_catalana_id, freebase_id, replaces, subreddit, continent, capital, coat_of_arms, demonym, geoshape, openstreetmap_relation_id, wipo_st3, coordinates_of_northernmost_point, coordinates_of_easternmost_point, nkcr_aut_id, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, flag_image, marriageable_age, topics_main_category, le_monde_diplomatique_subject_id, head_of_state, biblioth\u00e8que_nationale_de_france_id, category_of_people_buried_here, locator_map_image, bbc_things_id, age_of_majority, dewey_decimal_classification, area, head_of_government, fast_id, ioc_country_code, member_of, official_name, unemployment_rate, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, gs1_country_code, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, located_in_time_zone, category_for_people_who_died_here, yso_id, anthem, office_held_by_head_of_state, life_expectancy, part_of, commons_category, top_level_internet_domain, shares_border_with, instance_of, highest_point, category_for_people_born_here, short_name, number_of_out_of_school_children, driving_side, uic_numerical_country_code, on_focus_list_of_wikimedia_project, lowest_point, treccani_id, iso_3166_1_numeric_code, official_language, pronunciation_audio, idref_id, giant_bomb_id, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, statoids_id, library_of_congress_authority_id, iso_3166_1_alpha_2_code, flag, coordinate_location, fips_10_4_countries_and_regions, described_by_source, isni, brockhaus_enzyklop\u00e4die_online_id, klexikon_article_id, loc_and_marc_vocabularies_id, language_used, iab_code, legislative_body, comic_vine_id, category_of_associated_people, whos_on_first_id, world_encyclopedia_of_puppetry_arts_id, dr_topic_id, inaturalist_place_id, omegawiki_defined_meaning, hds_id, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, online_pwn_encyclopedia_id, eurovoc_id, worldcat_identities_id, motto_text, open_data_portal, kbpedia_id, grove_art_online_id, store_norske_leksikon_id, rkd_thesaurus_id, pm20_geo_code, interlingual_index_id, jewish_encyclopedia_id_russian, central_bank, bbc_news_topic_id, economy_of_topic, tasteatlas_id, sapa_id, bhcl_uuid, uk_parliament_thesaurus_id, github_topic, wordnet_31_synset_id, namuwiki_id, demographics_of_topic, joconde_location_id, national_library_of_israel_j9u_id, zhihu_topic_id, idaigazetteer_id, krugosvet_article, schoenberg_database_of_manuscripts_place_id, the_world_factbook_country_id, colon_classification, democracy_index, nese_id, der_spiegel_topic_id, museum_digital_place_id, ysa_id, postimees_topic_id, yle_topic_id, wikisimpsons_id, den_store_danske_id, urban_electric_transit_country_id, hashtag, m49_code, s\u00fcddeutsche_zeitung_topic_id, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, gini_coefficient, official_website, nalt_id, national_library_of_israel_id_old, vat_rate]",
        "Response": "Table: part"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO angiotensin_maturation (label, description, found_in_taxon, reactome_id, instance_of, cites_work, part_of, has_parts, exact_match)  VALUES ('Renin hydrolyzes Angiotensinogen to Angiotensin-(1-10)', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-2022412)', 'Homo sapiens', 'R-HSA-2022412', 'biological process', 'Structure-based design of aliskiren, a novel orally effective renin inhibitor', 'Metabolism of Angiotensinogen to Angiotensins', 'angiotensinogen', 'https://identifiers.org/reactome:R-HSA-2022412');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: angiotensin_maturation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, language_of_work_or_name, instance_of, publication_date, publisher, genre, image, country_of_origin)  VALUES ('Small Brockhaus and Efron Encyclopedic Dictionary', 'Russian encyclopedic dictionary', 'Russian', 'encyclopedic dictionary', '+1899-00-00T00:00:00Z', 'Brockhaus\u2013Efron', 'encyclopedic dictionary', 'nan', 'Russian Empire');\nDatabase State:\n- Table: political_border, Columns: [label, description, instance_of, commons_category, country, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, page_banner, freebase_id, openstreetmap_relation_id, nuts_code, category_for_people_who_died_here, curlie_id, contains_the_administrative_territorial_entity, area, locator_map_image, geonames_id, category_of_people_buried_here, image, category_of_associated_people, shares_border_with, population, uk_parliament_thesaurus_id, eu_knowledge_graph_item_id]\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, commons_category, country, located_in_time_zone, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, page_banner, freebase_id, openstreetmap_relation_id, category_for_films_shot_at_this_location, nuts_code, category_for_people_who_died_here, official_website, curlie_id, contains_the_administrative_territorial_entity, locator_map_image, gss_code_2011, area, geonames_id, category_of_people_buried_here, image, category_of_associated_people, category_for_maps, shares_border_with, toid, population, uk_parliament_thesaurus_id, eu_knowledge_graph_item_id]\n- Table: topic, Columns: [label, description, coordinate_location, topics_main_category, commons_category, instance_of, freebase_id, image, geonames_id, country, encyclop\u00e6dia_britannica_online_id, locator_map_image, store_norske_leksikon_id, population, described_by_source, shares_border_with, vision_of_britain_place_id, located_in_the_administrative_territorial_entity]\n- Table: category_for_films_shot_at_this_location, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: blaeus_atlas_maior_vol_5_england_bl_114h5, Columns: [label, description, instance_of, part_of, collection, inception, title, creator, inventory_number, publisher, place_of_publication, published_in, publication_date, location, image, copyright_status, main_subject]",
        "Response": "Table: source_of_information"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO place_of_birth (label, description, located_in_the_administrative_territorial_entity, commons_category, country, coat_of_arms_image, coordinate_location, instance_of, topics_main_category, freebase_id, musicbrainz_area_id, geonames_id, category_of_associated_people, viaf_id, image, official_website, population, capital_of, area, official_name, quora_topic_id, native_label, postal_code, located_in_time_zone, whos_on_first_id)  VALUES ('Kapellen', 'municipality in Antwerp, Belgium', 'Arrondissement of Antwerp', 'Kapellen, Belgium', 'Belgium', 'Kapellen wapen.svg', '51.315', 'municipality of Belgium', 'Category:Kapellen, Belgium', '/m/014gqk', '1c51a38f-26be-483f-b315-af2d31d63689', '2794733.0', 'Category:People from Kapellen, Antwerp', '153799818', 'Kapellen Belgium.JPG', 'https://www.kapellen.be/', 26981.0, 'nan', 37.21999999999999887, 'Kapellen', 'Kapellen-Belgium', 'Kapellen', '2950', 'UTC+01:00', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: place_of_birth"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO broadcast (Channel_ID, Program_ID, Time_of_day)  VALUES (8, 2, 'Night');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: broadcast"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, edition_number, country, follows, followed_by, instance_of, winner, subclass_of, sport)  VALUES ('Tour du Faso 2001', 'nan', '15', 'Burkina Faso', 'Tour du Faso 2000', 'Tour du Faso 2002', 'Tour du Faso', 'Joost Legtenberg', '2.5', 'road bicycle racing');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, has_parts, instance_of, follows, followed_by, topics_main_category, freebase_id, country, sport, edition_number, point_in_time, atp_tennis_tournament_edition_id)  VALUES ('1923 Australasian Championships', '1923 Australasian Tennis Championships', '1923 Australasian Championships \u2013 men''s singles', 'Australian Open', '1922 Australasian Championships', '1924 Australasian Championships', 'Category:1923 Australasian Championships', '/m/02qw_pr', 'Australia', 'tennis', '16.0', '+1923-00-00T00:00:00Z', 'australasian-championships/580/1923/results');\nDatabase State:\n- Table: followed_by, Columns: [label, description, instance_of, follows, followed_by, topics_main_category, freebase_id, has_parts, country, sport, edition_number, point_in_time, atp_tennis_tournament_edition_id]",
        "Response": "Table: australian_open"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO head_of_state (label, description, country_of_citizenship, educated_at, instance_of, place_of_birth, date_of_birth, sex_or_gender, position_held, occupation, given_name, commons_category, viaf_id, image, spouse, gnd_id, languages_spoken_written_or_signed, family_name, name_in_native_language, freebase_id, award_received, gran_enciclop\u00e8dia_catalana_id, library_of_congress_authority_id, isni, religion_or_worldview, munzinger_person_id, worldcat_identities_id, opensanctions_id)  VALUES ('Marcelo Rebelo de Sousa', 'Portuguese politician and academic', 'Portugal', 'University of Lisbon School of Law', 'human', 'Lisbon', '+1948-12-12T00:00:00Z', 'male', 'deputy of the Constituent Assembly', 'politician', 'Marcelo', 'Marcelo Rebelo de Sousa', '275324785', 'Marcelo Rebelo de Sousa em fevereiro de 2018.jpg', 'nan', '173455689', 'Portuguese', 'Rebelo', 'Marcelo Rebelo de Sousa', '/m/05kt95', 'Commander of the Military Order of Saint James of the Sword', '21905132.0', 'n80133946', '0000 0000 7996 1365', 'Catholic Church', '21757.0', 'lccn-n80133946', 'Q6756617');\nDatabase State:\n- Table: twin_town, Columns: [label, description, country, coordinate_location, freebase_id, dewey_decimal_classification, twinned_administrative_body, geonames_id, instance_of, topics_main_category, capital_of, viaf_id, elevation_above_sea_level, commons_category, located_in_the_administrative_territorial_entity, quora_topic_id, encyclop\u00e6dia_britannica_online_id, image, category_of_associated_people, area, library_of_congress_authority_id, coat_of_arms_image, whos_on_first_id, population, postal_code, official_website, worldcat_identities_id, musicbrainz_area_id, national_library_of_israel_j9u_id, locator_map_image, gnd_id, archinform_location_id, category_for_people_who_died_here, described_by_source, nkcr_aut_id, factgrid_item_id, store_norske_leksikon_id]\n- Table: political_border, Columns: [label, description, country, located_in_the_administrative_territorial_entity, capital, instance_of, commons_category, located_in_time_zone, shares_border_with, topics_main_category, freebase_id, coordinate_location, geonames_id, gnd_id, locator_map_image, population, viaf_id, area, official_website, openstreetmap_relation_id, archinform_location_id, musicbrainz_area_id, whos_on_first_id, image, category_for_maps, coat_of_arms_image, inaturalist_place_id]\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, coordinates_of_southernmost_point, new_york_times_topic_id, gnd_id, category_of_associated_people, emergency_phone_number, electrical_plug_type, licence_plate_code, babelnet_id, office_held_by_head_of_government, gini_coefficient, native_label, musicbrainz_area_id, public_holiday, uic_alphabetical_country_code, comic_vine_id, diplomatic_relation, commons_gallery, viaf_id, history_of_topic, capital, subreddit, openstreetmap_relation_id, iab_code, curlie_id, maritime_identification_digits, us_national_archives_identifier, marriageable_age, category_of_people_buried_here, motto_text, geoshape, dewey_decimal_classification, coordinates_of_easternmost_point, demonym, le_monde_diplomatique_subject_id, member_of, unemployment_rate, railway_traffic_side, located_in_time_zone, category_for_people_who_died_here, yso_id, office_held_by_head_of_state, commons_category, shares_border_with, nalt_id, iso_3166_1_numeric_code, coordinates_of_westernmost_point, giant_bomb_id, country_calling_code, stw_thesaurus_for_economics_id, statoids_id, mobile_country_code, flag, fips_10_4_countries_and_regions, dagens_nyheter_topic_id, flag_image, nese_id, maintained_by_wikiproject, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, wikimedia_outline, ndl_authority_id, currency, geonames_id, unicode_character, unesco_thesaurus_id, geography_of_topic, iso_3166_1_alpha_3_code, quora_topic_id, mesh_descriptor_id, basic_form_of_government, coat_of_arms_image, highest_judicial_authority, ituisoiec_object_identifier, legislative_body, nuts_code, freebase_id, official_language, continent, coat_of_arms, age_of_majority, national_library_of_israel_id_old, asc_leiden_thesaurus_id, wipo_st3, coordinates_of_northernmost_point, has_quality, nkcr_aut_id, total_fertility_rate, area, store_norske_leksikon_id, executive_body, compulsory_education_minimum_age, topics_main_category, biblioth\u00e8que_nationale_de_france_id, locator_map_image, bbc_things_id, head_of_government, ioc_country_code, official_name, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, described_by_source, gs1_country_code, page_banner, category_for_films_shot_at_this_location, mains_voltage, fast_id, number_of_out_of_school_children, anthem, life_expectancy, top_level_internet_domain, instance_of, highest_point, category_for_people_born_here, short_name, driving_side, head_of_state, uic_numerical_country_code, on_focus_list_of_wikimedia_project, lowest_point, brockhaus_enzyklop\u00e4die_online_id, civicus_monitor_country_entry, pronunciation_audio, idref_id, contains_the_administrative_territorial_entity, itu_letter_code, library_of_congress_authority_id, iso_3166_1_alpha_2_code, coordinate_location, language_used, uk_parliament_thesaurus_id, klexikon_article_id, loc_and_marc_vocabularies_id, located_in_or_next_to_body_of_water, dr_topic_id, world_encyclopedia_of_puppetry_arts_id, whos_on_first_id, zhihu_topic_id, omegawiki_defined_meaning, hds_id, culture, geonlp_id, category_for_maps, analysis_policy_observatory_term_id, treccanis_dizionario_di_storia_id, vat_rate, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, eurovoc_id, worldcat_identities_id, part_of, country, open_data_portal, kbpedia_id, inception, grove_art_online_id, rkd_thesaurus_id, interlingual_index_id, jewish_encyclopedia_id_russian, bbc_news_topic_id, inaturalist_place_id, economy_of_topic, yle_topic_id, ysa_id, sapa_id, bhcl_uuid, tasteatlas_id, github_topic, namuwiki_id, wordnet_31_synset_id, demographics_of_topic, joconde_location_id, joconde_discovery_id, national_library_of_israel_j9u_id, fandom_article_id, idaigazetteer_id, krugosvet_article, gran_enciclop\u00e8dia_catalana_id, armeniapedia_id, schoenberg_database_of_manuscripts_place_id, obo_gazetteer_id, the_world_factbook_country_id, colon_classification, democracy_index, der_spiegel_topic_id, museum_digital_place_id, wikisimpsons_id, den_store_danske_id, urban_electric_transit_country_id, hashtag, official_website, postimees_topic_id, m49_code, online_pwn_encyclopedia_id, s\u00fcddeutsche_zeitung_topic_id, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, central_bank, tv_tropes_identifier, pm20_geo_code, openstreetmap_element, happy_planet_index_score, treccani_id, isni, insee_countries_and_foreign_territories_code, replaces]\n- Table: place_of_death, Columns: [label, description, instance_of, category_combines_topics, category_contains, commons_category]\n- Table: place_of_birth, Columns: [label, description, commons_category, country, image, postal_code, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, instance_of, freebase_id, gnd_id, viaf_id, geonames_id, official_website, commons_gallery, library_of_congress_authority_id, described_by_source, quora_topic_id, nkcr_aut_id, worldcat_identities_id, online_pwn_encyclopedia_id]\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coat_of_arms_image, coordinate_location, shares_border_with, capital, topics_main_category, instance_of, freebase_id, openstreetmap_relation_id, category_of_associated_people, locator_map_image, population, official_website, geonames_id, area, inaturalist_place_id]\n- Table: head_of_state, Columns: [label, description, country_of_citizenship, educated_at, instance_of, place_of_birth, date_of_birth, sex_or_gender, position_held, occupation, given_name, commons_category, viaf_id, image, spouse, gnd_id, languages_spoken_written_or_signed, family_name, name_in_native_language, freebase_id, award_received, gran_enciclop\u00e8dia_catalana_id, library_of_congress_authority_id, isni, religion_or_worldview, munzinger_person_id, worldcat_identities_id, opensanctions_id]\n- Table: way_of_saint_james, Columns: [label, description, commons_category, instance_of, country, part_of]",
        "Response": "Table: head_of_state"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO employee (Employee_ID, Name, Age, City)  VALUES (2, 'Lee Mears', 29, 'Bath');\nDatabase State:\n- Table: employee, Columns: [Employee_ID, Name, Age, City]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO 860s_bc (label, description, topics_main_category, instance_of, point_in_time, follows, followed_by, part_of)  VALUES ('868 BC', 'year', 'Category:868 BC', 'year BC', '-0868-00-00T00:00:00Z', '869 BC', '867 BC', '860s BC');\nDatabase State:\n- Table: 860s_bc, Columns: [label, description, topics_main_category, instance_of, point_in_time, follows, followed_by, part_of]\n- Table: followed_by, Columns: [label, description, instance_of, point_in_time, topics_main_category, follows, followed_by, part_of]",
        "Response": "Table: 860s_bc"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO twin_town (label, description, locator_map_image, instance_of, located_in_the_administrative_territorial_entity, shares_border_with, country, commons_category, coat_of_arms_image, twinned_administrative_body, located_in_time_zone, topics_main_category, page_banner, official_website, musicbrainz_area_id, freebase_id, category_of_associated_people, image, viaf_id, coordinate_location, population, area, quora_topic_id, geonames_id, inaturalist_place_id)  VALUES ('Link\u00f6ping Municipality', 'municipality in \u00d6sterg\u00f6tland County, Sweden', 'Link\u00f6ping Municipality in \u00d6sterg\u00f6tland County.png', 'municipality of Sweden', '\u00d6sterg\u00f6tland County', 'Norrk\u00f6ping Municipality', 'Sweden', 'Link\u00f6ping Municipality', 'Link\u00f6ping vapen.svg', 'Joensuu', 'nan', 'Category:Link\u00f6ping Municipality', 'nan', 'http://www.linkoping.se', 'b78c0030-fc15-420a-842e-ba1f7b7f7f3f', '/m/07d2tf', 'Category:People from Link\u00f6ping Municipality', 'Link\u00f6pings Stadshus (cropped).jpg', '158422957', '58.4', 166212.0, 1568.579999999999928, 'Link\u00f6pings-Kommun', '2694759.0', '44926.0');\nDatabase State:\n- Table: parish_union, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, official_website, diocese]\n- Table: administrative_territorial_entity, Columns: [label, description, dewey_decimal_classification, twinned_administrative_body, country, commons_category, instance_of, coat_of_arms_image, image, located_in_time_zone, located_in_the_administrative_territorial_entity, coordinate_location, page_banner, musicbrainz_area_id, topics_main_category, freebase_id, population, geonames_id, shares_border_with, category_of_associated_people, official_website, finnish_municipality_number, legislative_body, official_language, area, yso_id, store_norske_leksikon_id, archinform_location_id, viaf_id, whos_on_first_id, ysa_id]\n- Table: part, Columns: [label, description, quora_topic_id, viaf_id, nkcr_aut_id, topics_main_category, locator_map_image, store_norske_leksikon_id, commons_category, instance_of, has_parts, freebase_id, coordinate_location, worldcat_identities_id]\n- Table: twin_town, Columns: [label, description, locator_map_image, instance_of, located_in_the_administrative_territorial_entity, shares_border_with, country, commons_category, coat_of_arms_image, twinned_administrative_body, located_in_time_zone, topics_main_category, page_banner, official_website, musicbrainz_area_id, freebase_id, category_of_associated_people, image, viaf_id, coordinate_location, population, area, quora_topic_id, geonames_id, inaturalist_place_id]",
        "Response": "Table: twin_town"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No)  VALUES (980992, 4, 6, 0, 1);\nDatabase State:\n- Table: Extra_Runs, Columns: [Match_Id, Over_Id, Ball_Id, Extra_Type_Id, Extra_Runs, Innings_No]\n- Table: Toss_Decision, Columns: [Toss_Id, Toss_Name]\n- Table: Batting_Style, Columns: [Batting_Id, Batting_hand]",
        "Response": "Table: Batsman_Scored"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (index, id, tag)  VALUES (156482, 73399, 'new.zealand');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: tags"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO user_reviews (App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity)  VALUES ('Garena Free Fire', 'Kindly update functioning properly. Do guys ever test deploying??', 'Positive', '0.3', '0.5');\nDatabase State:\n- Table: user_reviews, Columns: [App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity]",
        "Response": "Table: user_reviews"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, found_in_taxon, refseq_protein_id, encoded_by, cell_component, has_parts, part_of, instance_of)  VALUES ('Cardiolipin synthetase BT9727_1094', 'microbial protein found in [Bacillus thuringiensis] serovar konkukian str. 97-27', 'Q6HLZ0', 'Bacillus thuringiensis serovar konkukian str. 97-27', 'YP_035431', 'cardiolipin synthetase BT9727_1094', 'plasma membrane', 'Phospholipase D/Transphosphatidylase', 'Cardiolipin synthase, Firmicutes-type', 'protein');\nDatabase State:\n- Table: taxon, Columns: [label, description, taxon_name, taxon_rank, freebase_id, ncbi_taxonomy_id, parent_taxon, instance_of, gbif_taxon_id, itis_tsn, gram_staining, irmng_id, lpsn_url, mesh_descriptor_id, microsoft_academic_id, catalogue_of_life_id]\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, genomic_end, strand_orientation, instance_of, genomic_start]",
        "Response": "Table: cardiolipin_synthase_n_terminal_domain_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (People_ID, Nationality, Name, Birth_Date, Height)  VALUES (2, 'Bulgaria', 'Teodor Salparov', 'August 16, 1982', 182.0);\nDatabase State:\n- Table: poker_player, Columns: [Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings]",
        "Response": "Table: people"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO officers (case_number, race, gender, last_name, first_name, full_name)  VALUES ('130254Z', 'W', 'M', 'McGuire', 'John', 'McGuire, John');\nDatabase State:\n- Table: officers, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: incidents, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]",
        "Response": "Table: officers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO disabled (name)  VALUES ('student184');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: disabled"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, Name, CountryCode, District, Population)  VALUES (1023, 'Tanjung Pinang', 'IDN', 'Riau', 89900);\nDatabase State:\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]\n- Table: CountryLanguage, Columns: [CountryCode, Language, IsOfficial, Percentage]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Payments (Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment)  VALUES (739, 597, 'Discover Card', '2017-10-07', 71246);\nDatabase State:\n- Table: Settlements, Columns: [Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]\n- Table: Customers, Columns: [Customer_ID, Customer_Details]\n- Table: Payments, Columns: [Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]",
        "Response": "Table: Payments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO natural_product (label, description, taxon_name, taxon_rank, instance_of, parent_taxon, gbif_taxon_id, ncbi_taxonomy_id, inaturalist_taxon_id, irmng_id, open_tree_of_life_id, catalogue_of_life_id)  VALUES ('Aspergillus aculeatus', 'species of fungus', 'Aspergillus aculeatus', 'species', 'taxon', 'Aspergillus', '5259902', '5053.0', '895627.0', '11251440.0', '277140.0', '67TLT');\nDatabase State:\n- Table: natural_product, Columns: [label, description, taxon_name, taxon_rank, instance_of, parent_taxon, gbif_taxon_id, ncbi_taxonomy_id, inaturalist_taxon_id, irmng_id, open_tree_of_life_id, catalogue_of_life_id]\n- Table: taxon, Columns: [label, description, taxon_name, taxon_rank, instance_of, topics_main_category, parent_taxon, gbif_taxon_id, new_zealand_organisms_register_id, inaturalist_taxon_id, nbn_system_key, irmng_id, ncbi_taxonomy_id, catalogue_of_life_id, commons_category, image, encyclopedia_of_life_id, worms_id_for_taxa, dyntaxa_id]",
        "Response": "Table: natural_product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Business_Attributes (attribute_id, business_id, attribute_value)  VALUES (3, 5584, 'false');\nDatabase State:\n- Table: Reviews, Columns: [business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length]\n- Table: Days, Columns: [day_id, day_of_week]\n- Table: Business_Categories, Columns: [business_id, category_id]\n- Table: Checkins, Columns: [business_id, day_id, label_time_0, label_time_1, label_time_2, label_time_3, label_time_4, label_time_5, label_time_6, label_time_7, label_time_8, label_time_9, label_time_10, label_time_11, label_time_12, label_time_13, label_time_14, label_time_15, label_time_16, label_time_17, label_time_18, label_time_19, label_time_20, label_time_21, label_time_22, label_time_23]",
        "Response": "Table: Business_Attributes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (District_ID, District_name, Headquartered_City, City_Population, City_Area)  VALUES (3, 'Bahawalpur District', 'Bahawalpur City', 530438.0, 38.0);\nDatabase State:\n- Table: store, Columns: [Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking]\n- Table: product, Columns: [product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface]\n- Table: store_product, Columns: [Store_ID, Product_ID]",
        "Response": "Table: district"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO incidents (case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers)  VALUES ('290212V', '2008/9/16', '4800 S. Lancaster Road', 'Deceased', 'Hands', 'Jones, Derrick B/M', 1, 'Villanueva, Rene L/M');\nDatabase State:\n- Table: subjects, Columns: [case_number, race, gender, last_name, first_name, full_name]",
        "Response": "Table: incidents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)  VALUES (8, 'Employee', 'Karley', replace('36895 Eli Ferry\\nPort Marcelle, FL 45712','\\n',char(10)), 'Kirastad', 'Indiana', '33020', 'Hyatt', 'goyette.roosevelt@example.net', '891.475.2256', '328.842.3792');\nDatabase State:\n- Table: Charges, Columns: [charge_id, charge_type, charge_amount]\n- Table: Professionals, Columns: [professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number]\n- Table: Dogs, Columns: [dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed]\n- Table: Breeds, Columns: [breed_code, breed_name]\n- Table: Sizes, Columns: [size_code, size_description]\n- Table: Treatments, Columns: [treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment]\n- Table: Treatment_Types, Columns: [treatment_type_code, treatment_type_description]",
        "Response": "Table: Professionals"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)  VALUES (19, 7, 'AD', '1999-06-21 11:10:30', '1974-09-14 06:34:39', '');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Templates"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO city (City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic)  VALUES (13, 4, 'Caguas', 76.09999999999999431, 11.0, 0.5999999999999999778, 0.2000000000000000111, 12.09999999999999965, 99.0999999999999944);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (City)  VALUES (' Neptune  ', 'ARX', 'Asbury Park ', 'United States ', 'US');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: airports"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, subclass_of, encoded_by, uniprot_protein_id, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of)  VALUES ('Delta-aminolevulinic acid dehydratase NCgl0416', 'microbial protein found in Corynebacterium glutamicum ATCC 13032', 'nan', 'delta-aminolevulinic acid dehydratase NCgl0416', 'Q8NT79', 'porphyrin-containing compound biosynthetic process', 'catalytic activity', 'Delta-aminolevulinic acid dehydratase, active site', 'Corynebacterium glutamicum ATCC 13032', 'NP_599678', 'protein', 'Delta-aminolevulinic acid dehydratase');\nDatabase State:\n- Table: delta_aminolevulinic_acid_dehydratase, Columns: [label, description, subclass_of, encoded_by, uniprot_protein_id, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, gram_staining, lpsn_url, microsoft_academic_id]\n- Table: encodes, Columns: [label, description, subclass_of, encoded_by, uniprot_protein_id, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: delta_aminolevulinic_acid_dehydratase"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO subjects (case_number, race, gender, last_name, first_name, full_name)  VALUES ('192694Y', 'B', 'M', 'McDonald', 'Earl', 'McDonald, Earl');\nDatabase State:\n- Table: officers, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: incidents, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]\n- Table: subjects, Columns: [case_number, race, gender, last_name, first_name, full_name]",
        "Response": "Table: subjects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO orthology (label, description, entrez_gene_id, subclass_of, ensembl_gene_id, homologene_id, chromosome, found_in_taxon, refseq_rna_id, ensembl_transcript_id, ortholog, exact_match, genomic_end, strand_orientation, genomic_start, instance_of, cytogenetic_location, expressed_in)  VALUES ('Dync2h1', 'protein-coding gene in the species Mus musculus', '110350.0', 'protein-coding gene', 'ENSMUSG00000047193', '14468.0', 'mouse chromosome 9', 'house mouse', 'NM_029851', 'ENSMUST00000048417', 'DYNC2H1', 'http://identifiers.org/ncbigene/110350', '7184446.0', 'reverse strand', '6928503.0', 'gene', '9 A1|9', 'spermatocyte');\nDatabase State:\n- Table: biological_process, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]\n- Table: expressed_in, Columns: [label, description, subclass_of, foundational_model_of_anatomy_id, instance_of]\n- Table: chromosome, Columns: [label, description, refseq_genome_id, found_in_taxon, instance_of]\n- Table: orthology, Columns: [label, description, entrez_gene_id, subclass_of, ensembl_gene_id, homologene_id, chromosome, found_in_taxon, refseq_rna_id, ensembl_transcript_id, ortholog, exact_match, genomic_end, strand_orientation, genomic_start, instance_of, cytogenetic_location, expressed_in]\n- Table: encodes, Columns: [label, description, ensembl_protein_id, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, ensembl_gene_id, ensembl_transcript_id, homologene_id, refseq_rna_id, ortholog, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, chromosome, instance_of, expressed_in]",
        "Response": "Table: orthology"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Airlines (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  VALUES ('2018/8/5', 20500, 'N152GJ', 4474, 13930, 1393006, 30977, 'ORD', 13230, 1323002, 32070, 'MDT', 1405, 1423, 18, 18, 1718, 18, 18, 0, NULL, 115, 115, 18, 0, 0, 0, 0);\nDatabase State:\n- Table: Airports, Columns: [Code, Description]\n- Table: Airlines, Columns: [FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY]\n- Table: Air_Carriers, Columns: [Code, Description]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, sport, country, point_in_time, follows, followed_by, competition_class, has_parts, on_focus_list_of_wikimedia_project)  VALUES ('1984 South Africa Badminton Championships', 'badminton championships', 'South African Badminton Championships', 'badminton', 'South Africa', '+1984-00-00T00:00:00Z', '1983 South Africa Badminton Championships', '1985 South Africa Badminton Championships', 'national championship', '1984 South Africa Badminton Championships \u2013 men''s singles', 'WikiProject Badminton/tournament focus list');\nDatabase State:\n- Table: followed_by, Columns: [label, description, instance_of, sport, country, point_in_time, follows, followed_by, competition_class, has_parts, on_focus_list_of_wikimedia_project]\n- Table: south_african_badminton_championships, Columns: [label, description, sport, country, point_in_time, instance_of, competition_class, follows, followed_by, has_parts, on_focus_list_of_wikimedia_project]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO machine (Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank)  VALUES (7, 1997, '125cc', 'Honda', 'RS125', 238.0, 8);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: machine"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, coordinate_location, located_in_the_administrative_territorial_entity)  VALUES ('Maihama', 'nan', '\u014daza', 'Japan', '35.63633333', 'Urayasu');\nDatabase State:\n- Table: rail_company_japan, Columns: [label, description, commons_category, official_website, instance_of, inception, headquarters_location, country]\n- Table: headquarters, Columns: [label, description, instance_of, country, coordinate_location, located_in_the_administrative_territorial_entity]\n- Table: administrative_territorial_entity, Columns: [label, description, area, commons_category, dantai_code, country, located_in_the_administrative_territorial_entity, coordinate_location, locator_map_image, official_website, ndl_authority_id, instance_of, freebase_id, population, musicbrainz_area_id, geonames_id, viaf_id, topics_main_category, image, located_in_time_zone, name_in_kana, geonlp_id, whos_on_first_id, worldcat_identities_id]",
        "Response": "Table: headquarters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO south_superstore (Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit)  VALUES (12663, 'CA-2016-112375', '2016-12-21', '2016-12-27', 'Standard Class', 'RD-19720', 'South', 'OFF-EN-10003798', 27.31200000000000116, 2, 0.2000000000000000111, 9.217800000000000437);\nDatabase State:\n- Table: central_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]",
        "Response": "Table: south_superstore"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO institution_grads (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (153427, 2007, 'M', 'B', '4y bach', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL');\nDatabase State:\n- Table: institution_details, Columns: [unitid, chronname, city, state, level, control, basic, hbcu, flagship, long_x, lat_y, site, student_count, awards_per_value, awards_per_state_value, awards_per_natl_value, exp_award_value, exp_award_state_value, exp_award_natl_value, exp_award_percentile, ft_pct, fte_value, fte_percentile, med_sat_value, med_sat_percentile, aid_value, aid_percentile, endow_value, endow_percentile, grad_100_value, grad_100_percentile, grad_150_value, grad_150_percentile, pell_value, pell_percentile, retain_value, retain_percentile, ft_fac_value, ft_fac_percentile, vsa_year, vsa_grad_after4_first, vsa_grad_elsewhere_after4_first, vsa_enroll_after4_first, vsa_enroll_elsewhere_after4_first, vsa_grad_after6_first, vsa_grad_elsewhere_after6_first, vsa_enroll_after6_first, vsa_enroll_elsewhere_after6_first, vsa_grad_after4_transfer, vsa_grad_elsewhere_after4_transfer, vsa_enroll_after4_transfer, vsa_enroll_elsewhere_after4_transfer, vsa_grad_after6_transfer, vsa_grad_elsewhere_after6_transfer, vsa_enroll_after6_transfer, vsa_enroll_elsewhere_after6_transfer, similar, state_sector_ct, carnegie_ct, counted_pct, nicknames, cohort_size]",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, part_of)  VALUES ('family', 'taxonomic rank (or a taxon at that rank) between order and genus', 'taxonomic rank', 'epifamily');\nDatabase State:\n- Table: rank_in_zoology, Columns: [label, description, instance_of, part_of]\n- Table: part, Columns: [label, description, instance_of, part_of]",
        "Response": "Table: rank_in_zoology"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (journalist_ID, Name, Nationality, Age, Years_working)  VALUES (5, 'Fred Chandler', 'England', '34', 6);\nDatabase State:\n- Table: event, Columns: [Event_ID, Date, Venue, Name, Event_Attendance]\n- Table: news_report, Columns: [journalist_ID, Event_ID, Work_Type]\n- Table: journalist, Columns: [journalist_ID, Name, Nationality, Age, Years_working]",
        "Response": "Table: journalist"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('Some did', 2016, 1617, 26);\nDatabase State:\n- Table: Question, Columns: [questiontext, questionid]\n- Table: Survey, Columns: [SurveyID, Description]",
        "Response": "Table: Answer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (staff_id, staff_gender, staff_name)  VALUES (12, '1', 'Melody');\nDatabase State:\n- Table: Departments, Columns: [department_id, dept_store_id, department_name]\n- Table: Product_Suppliers, Columns: [product_id, supplier_id, date_supplied_from, date_supplied_to, total_amount_purchased, total_value_purchased]\n- Table: Customers, Columns: [customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email]\n- Table: Order_Items, Columns: [order_item_id, order_id, product_id]\n- Table: Products, Columns: [product_id, product_type_code, product_name, product_price]\n- Table: Supplier_Addresses, Columns: [supplier_id, address_id, date_from, date_to]\n- Table: Addresses, Columns: [address_id, address_details]\n- Table: Staff, Columns: [staff_id, staff_gender, staff_name]\n- Table: Department_Store_Chain, Columns: [dept_store_chain_id, dept_store_chain_name]\n- Table: Suppliers, Columns: [supplier_id, supplier_name, supplier_phone]\n- Table: Department_Stores, Columns: [dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status_code, order_date]\n- Table: Customer_Addresses, Columns: [customer_id, address_id, date_from, date_to]",
        "Response": "Table: Staff"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (stor_id, ord_num, ord_date, qty, payterms, title_id)  VALUES ('6380', '6871', '1994-09-14 00:00:00.0', 5, 'Net 60', 'BU1032');\nDatabase State:\n- Table: titleauthor, Columns: [au_id, title_id, au_ord, royaltyper]\n- Table: stores, Columns: [stor_id, stor_name, stor_address, city, state, zip]\n- Table: pub_info, Columns: [pub_id, logo, pr_info]\n- Table: authors, Columns: [au_id, au_lname, au_fname, phone, address, city, state, zip, contract]\n- Table: jobs, Columns: [job_id, job_desc, min_lvl, max_lvl]\n- Table: titles, Columns: [title_id, title, type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate]\n- Table: discounts, Columns: [discounttype, stor_id, lowqty, highqty, discount]\n- Table: sales, Columns: [stor_id, ord_num, ord_date, qty, payterms, title_id]\n- Table: roysched, Columns: [title_id, lorange, hirange, royalty]\n- Table: publishers, Columns: [pub_id, pub_name, city, state, country]\n- Table: employee, Columns: [emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date]",
        "Response": "Table: sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cars (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num)  VALUES (45, 14, 2, 'rectangle', 'short', 'not_double', 'none', 2, 'rectangle', 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO followed_by (label, description, follows, followed_by, refseq_genome_id, found_in_taxon, instance_of, short_name, length, subclass_of)  VALUES ('human chromosome 16', 'human chromosome, group E classification', 'human chromosome 15', 'human chromosome 17', 'NC_000016.10', 'Homo sapiens', 'chromosome', '16', 90338345.0, 'autosome');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, subclass_of, field_of_this_occupation, topics_main_category, instance_of, topics_main_template, female_form_of_label, male_form_of_label)  VALUES ('equestrian', 'sportsperson who rides horses', 'Equestrians', 'athlete', 'equestrian sport', 'Category:Equestrians', 'profession', 'Template:FEI', 'jezdkyn\u011b', 'cavalier');\nDatabase State:\n- Table: intentional_human_activity, Columns: [label, description, commons_category, subclass_of, field_of_this_occupation, topics_main_category, instance_of, topics_main_template, female_form_of_label, male_form_of_label]\n- Table: 2005_islamic_solidarity_games, Columns: [label, description, sport, instance_of, point_in_time, freebase_id, part_of]\n- Table: type_of_sport, Columns: [label, description, subclass_of, commons_category, ndl_authority_id, library_of_congress_authority_id, gnd_id, bncf_thesaurus_id, topics_main_category, freebase_id, image, openstreetmap_tag_or_key, quora_topic_id, jstor_topic_id, uses, instance_of, practiced_by, on_focus_list_of_wikimedia_project, store_norske_leksikon_id, icon, encyclop\u00e6dia_britannica_online_id, french_vikidia_id, yso_id, enciclop\u00e8dia_de_lesport_catal\u00e0_id, kbpedia_id, fandom_article_id, great_russian_encyclopedia_online_id, national_library_of_israel_j9u_id, abc_news_topic_id, den_store_danske_id, nkcr_aut_id, krugosvet_article, iptc_newscode, wordnet_31_synset_id]\n- Table: use, Columns: [label, description, commons_category, freebase_id, sport, used_by, image, subclass_of, wordnet_31_synset_id, kbpedia_id]\n- Table: user, Columns: [label, description, subclass_of, commons_category, topics_main_category, freebase_id, instance_of]\n- Table: field_of_work, Columns: [label, description, subclass_of, commons_category, ndl_authority_id, library_of_congress_authority_id, gnd_id, bncf_thesaurus_id, topics_main_category, freebase_id, image, psh_id, openstreetmap_tag_or_key, quora_topic_id, jstor_topic_id, instance_of, practiced_by, encyclop\u00e6dia_universalis_id, on_focus_list_of_wikimedia_project, store_norske_leksikon_id, icon, encyclop\u00e6dia_britannica_online_id, french_vikidia_id, yso_id, enciclop\u00e8dia_de_lesport_catal\u00e0_id, kbpedia_id, fandom_article_id, great_russian_encyclopedia_online_id, zhihu_topic_id, national_library_of_israel_j9u_id, abc_news_topic_id, den_store_danske_id, nkcr_aut_id, wordnet_31_synset_id]",
        "Response": "Table: intentional_human_activity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, Name, CountryCode, District, Population)  VALUES (2220, 'Shishou', 'CHN', 'Hubei', 104571);\nDatabase State:\n- Table: City, Columns: [ID, Name, CountryCode, District, Population]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, point_in_time, freebase_id, part_of)  VALUES ('2010 Waltham Forest London Borough Council election', 'nan', 'Waltham Forest London Borough Council election', 'United Kingdom', '+2010-00-00T00:00:00Z', '/m/0by0595', '2010 United Kingdom local elections');\nDatabase State:\n- Table: part, Columns: [label, description, topics_main_category, country, instance_of, point_in_time, freebase_id]",
        "Response": "Table: waltham_forest_london_borough_council_election"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Market_ID, District, Num_of_employees, Num_of_shops, Ranking)  VALUES (1, 'Alberta', 1966, 40.0, 1);\nDatabase State:\n- Table: phone, Columns: [Name, Phone_ID, Memory_in_G, Carrier, Price]\n- Table: market, Columns: [Market_ID, District, Num_of_employees, Num_of_shops, Ranking]\n- Table: phone_market, Columns: [Market_ID, Phone_ID, Num_of_stock]",
        "Response": "Table: market"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform)  VALUES (4, 'Xiaomi', 'Bell Mobility', '5.0.0.419', '5.0.0.419', 'Android');\nDatabase State:\n- Table: stock, Columns: [Shop_ID, Device_ID, Quantity]\n- Table: device, Columns: [Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform]",
        "Response": "Table: device"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, instance_of, freebase_id, topics_main_category)  VALUES ('July 18', 'date', '18 July', 'point in time with respect to recurrent timeframe', '/m/043bt', 'Category:July 18');\nDatabase State:\n- Table: use, Columns: [label, description, subclass_of, commons_category, freebase_id, image, wordnet_31_synset_id]",
        "Response": "Table: properties_for_this_type"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Hotels (hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details)  VALUES (172, '5', '', 17012.68258600899935, NULL);\nDatabase State:\n- Table: Tourist_Attraction_Features, Columns: [Tourist_Attraction_ID, Feature_ID]\n- Table: Visits, Columns: [Visit_ID, Tourist_Attraction_ID, Tourist_ID, Visit_Date, Visit_Details]\n- Table: Ref_Attraction_Types, Columns: [Attraction_Type_Code, Attraction_Type_Description]\n- Table: Hotels, Columns: [hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details]\n- Table: Visitors, Columns: [Tourist_ID, Tourist_Details]",
        "Response": "Table: Hotels"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO taughtBy (course_id, p_id)  VALUES (160, 331);\nDatabase State:\n- Table: course, Columns: [course_id, courseLevel]",
        "Response": "Table: taughtBy"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num)  VALUES (41, 12, 3, 'rectangle', 'short', 'double', 'none', 2, 'circle', 1);\nDatabase State:\n- Table: cars, Columns: [id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num]\n- Table: trains, Columns: [id, direction]",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, model_year, country)  VALUES (25, 1973, 1);\nDatabase State:\n- Table: production, Columns: [ID, model_year, country]",
        "Response": "Table: production"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (customer_id, address_id, date_from, date_to)  VALUES (2, 13, '2011-01-02 21:42:29', '2018-02-25 19:55:00');\nDatabase State:\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_date, order_status_code]\n- Table: Contacts, Columns: [contact_id, customer_id, gender, first_name, last_name, contact_phone]\n- Table: Customers, Columns: [customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email]\n- Table: Customer_Address_History, Columns: [customer_id, address_id, date_from, date_to]\n- Table: Products, Columns: [product_id, product_type_code, product_name, product_price]",
        "Response": "Table: Customer_Address_History"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO polyphosphate_kinase_c_terminal_domain_2_protein_family (label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, biological_process, molecular_function, cell_component, has_parts, instance_of, refseq_protein_id, part_of)  VALUES ('Polyphosphate kinase tlr0213', 'microbial protein found in Thermosynechococcus elongatus BP-1', 'Q8DMA8', 'Thermosynechococcus elongatus BP-1', 'protein', 'polyphosphate kinase tlr0213', 'polyphosphate biosynthetic process', 'nucleotide binding', 'polyphosphate kinase complex', 'Polyphosphate kinase N-terminal domain', 'protein', 'NP_681004', 'Polyphosphate kinase');\nDatabase State:\n- Table: encodes, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, biological_process, molecular_function, cell_component, has_parts, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: polyphosphate_kinase_c_terminal_domain_2_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO product (Product_ID, Product_Name, Category, Sub-Category, Region)  VALUES ('OFF-AR-10003759', 'Crayola Anti Dust Chalk, 12/Pack', 'Office Supplies', 'Art', 'East');\nDatabase State:\n- Table: people, Columns: [Customer_ID, Customer_Name, Segment, Country, City, State, Postal_Code, Region]\n- Table: west_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: product, Columns: [Product_ID, Product_Name, Category, Sub-Category, Region]",
        "Response": "Table: product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Publication_ID, Book_ID, Publisher, Publication_Date, Price)  VALUES (5, 7, 'Springer Nature', 'August 2008', 3000000.0);\nDatabase State:\n- Table: publication, Columns: [Publication_ID, Book_ID, Publisher, Publication_Date, Price]\n- Table: book, Columns: [Book_ID, Title, Issues, Writer]",
        "Response": "Table: publication"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (4356262, 2, 6000, 50, 50);\nDatabase State:\n- Table: Products, Columns: [ProductID, Name, Price]\n- Table: Customers, Columns: [CustomerID, FirstName, MiddleInitial, LastName]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of, commons_category, located_inon_physical_feature)  VALUES ('Castle Lichtenberg', 'castle in Maastricht, Netherlands', 'Netherlands', 'Maastricht', '50.8225', 'castle', 'Lichtenberg Castle', 'Mount Saint Peter');\nDatabase State:\n- Table: maastricht_formation, Columns: [label, description, named_after, part_of, instance_of]",
        "Response": "Table: eponym"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO people (People_ID, Name, Height, Weight, Home_Town)  VALUES (11, 'Mike Murphy', 6.799999999999999823, 215.0, 'Austin, TX');\nDatabase State:\n- Table: perpetrator, Columns: [Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured]\n- Table: people, Columns: [People_ID, Name, Height, Weight, Home_Town]",
        "Response": "Table: people"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate)  VALUES (5, 6, 'VMV-5', 1931, 'Uusikaupunki , Finland', 23, 'Decommissioned 1959');\nDatabase State:\n- Table: mission, Columns: [Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
        "Response": "Table: mission"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO competitor_event (event_id, competitor_id, medal_id)  VALUES (25, 169109, 4);\nDatabase State:\n- Table: games, Columns: [id, games_year, games_name, season]\n- Table: games_competitor, Columns: [id, games_id, person_id, age]\n- Table: person, Columns: [id, full_name, gender, height, weight]\n- Table: person_region, Columns: [person_id, region_id]\n- Table: event, Columns: [id, sport_id, event_name]\n- Table: noc_region, Columns: [id, noc, region_name]\n- Table: games_city, Columns: [games_id, city_id]\n- Table: sport, Columns: [id, sport_name]\n- Table: city, Columns: [id, city_name]\n- Table: medal, Columns: [id, medal_name]\n- Table: competitor_event, Columns: [event_id, competitor_id, medal_id]",
        "Response": "Table: competitor_event"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO institution_grads (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (150145, 2007, 'M', 'A', '4y other', '0', 'NULL', '0', 'NULL', 'NULL');\nDatabase State:\n- Table: institution_grads, Columns: [unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate]",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Ref_Payment_Methods (payment_method_code, payment_method_description)  VALUES ('American E', 'credit');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Ref_Payment_Methods"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violation (inspection_id, point_id, fine, inspector_comment)  VALUES (357206, 29, 250, 'A separate and distinct offense shall be deemed to have been committed for each Minor violation that is not corrected upon re-inspection by the health authority.    PREVIOUS VIOLATION NOT CORRECT, DATED 8/26/2009, FOR VIOLATION #32 MUST PROVIDE ADEQUATE SNEEZE GUARD AT BUFFET SALAD BAR IN SERVICE AREA. INSPECTION #162976  ');\nDatabase State:\n- Table: employee, Columns: [employee_id, first_name, last_name, address, city, state, zip, phone, title, salary, supervisor]",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Document_Structures (document_structure_code, parent_document_structure_code, document_structure_description)  VALUES ('1', '1', 'Header');\nDatabase State:\n- Table: Document_Sections, Columns: [section_id, document_code, section_sequence, section_code, section_title]\n- Table: Roles, Columns: [role_code, role_description]",
        "Response": "Table: Document_Structures"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO department (Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)  VALUES (13, 'Education', '1979', 13, 62.79999999999999716, 4487.0);\nDatabase State:\n- Table: management, Columns: [department_ID, head_ID, temporary_acting]\n- Table: department, Columns: [Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees]",
        "Response": "Table: department"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (playerID, year, stint, tmID, lgID, GP, Min, W, L, T/OL, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA)  VALUES ('beaupdo01', 1990, 1, 'WAS', 'NHL', '45', '2572', '20', '18', '3', '3', '5', '113', '1095', '11', '624', '5', '5', NULL, '2', '1', '29', '294');\nDatabase State:\n- Table: TeamsSC, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM]\n- Table: abbrev, Columns: [Type, Code, Fullname]\n- Table: TeamVsTeam, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]\n- Table: SeriesPost, Columns: [year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L, T, GoalsWinner, GoalsLoser, note]\n- Table: Goalies, Columns: [playerID, year, stint, tmID, lgID, GP, Min, W, L, T/OL, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA]\n- Table: GoaliesShootout, Columns: [playerID, year, stint, tmID, W, L, SA, GA]\n- Table: Master, Columns: [playerID, coachID, hofID, firstName, lastName, nameNote, nameGiven, nameNick, height, weight, shootCatch, legendsID, ihdbID, hrefID, firstNHL, lastNHL, firstWHA, lastWHA, pos, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity, deathYear, deathMon, deathDay, deathCountry, deathState, deathCity]\n- Table: AwardsMisc, Columns: [name, ID, award, year, lgID, note]\n- Table: CombinedShutouts, Columns: [year, month, date, tmID, oppID, R/P, IDgoalie1, IDgoalie2]\n- Table: TeamsPost, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: ScoringSC, Columns: [playerID, year, tmID, lgID, pos, GP, G, A, Pts, PIM]\n- Table: ScoringSup, Columns: [playerID, year, PPA, SHA]\n- Table: AwardsPlayers, Columns: [playerID, award, year, lgID, note, pos]\n- Table: GoaliesSC, Columns: [playerID, year, tmID, lgID, GP, Min, W, L, T, SHO, GA]\n- Table: ScoringShootout, Columns: [playerID, year, stint, tmID, S, G, GDG]\n- Table: TeamsHalf, Columns: [year, lgID, tmID, half, rank, G, W, L, T, GF, GA]\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: HOF, Columns: [year, hofID, name, category]\n- Table: Scoring, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, +/-, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, Post+/-, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]",
        "Response": "Table: Goalies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO price (ID, price)  VALUES (387, 25289.83381000000008);\nDatabase State:\n- Table: price, Columns: [ID, price]",
        "Response": "Table: price"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, student_id, grade, sat)  VALUES (1, 12, 'B', 4);\nDatabase State:\n- Table: course, Columns: [course_id, name, credit, diff]\n- Table: registration, Columns: [course_id, student_id, grade, sat]\n- Table: student, Columns: [student_id, f_name, l_name, phone_number, email, intelligence, gpa, type]",
        "Response": "Table: registration"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO railway (Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber)  VALUES (8, 'GWRWk', 'Swindon Works', '1907', '4-6-0', 'Swindon', '1978-7027');\nDatabase State:\n- Table: railway_manage, Columns: [Railway_ID, Manager_ID, From_Year]\n- Table: manager, Columns: [Manager_ID, Name, Country, Working_year_starts, Age, Level]",
        "Response": "Table: railway"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost)  VALUES ('SO - 0001110', 'In-Store', 'WARE-XYS1001', '4/10/18', '9/26/18', '10/12/18', '10/19/18', 'USD', 10, 3, 29, 2, 4, 0.4000000000000000222, '917.90', '559.92');\nDatabase State:\n- Table: Products, Columns: [ProductID, Product_Name]\n- Table: Customers, Columns: [CustomerID, Customer_Names]\n- Table: Store_Locations, Columns: [StoreID, City_Name, County, StateCode, State, Type, Latitude, Longitude, AreaCode, Population, Household_Income, Median_Income, Land_Area, Water_Area, Time_Zone]\n- Table: Regions, Columns: [StateCode, State, Region]",
        "Response": "Table: Sales_Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID)  VALUES (1565, 'Utsunomiya', 'JPN', 'Tochigi', 440353);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, encodes, found_in_taxon, strand_orientation, instance_of, genomic_end, genomic_start)  VALUES ('let-4', 'protein-coding gene in the species Caenorhabditis elegans', '181554', 'Leucine-rich repeat-containing protein let-4 CELE_C44H4.2', 'Caenorhabditis elegans', 'forward strand', 'gene', '14580921.0', '14577935.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, 1st_quarter_payroll, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA)  VALUES (2465, 'West Newton', 'MA', 'No', 'Branch', NULL, 'Eastern', 'Yes', 42.35042899999999833, -71.22561399999999309, 40, 25, 17, 'Northeast', 'New England', 11829, 11710, 4331, 760100, 149104, 2.649999999999999912, 10093, 367, 563, 1227, 57, 12, 267, 5576, 6134, 42.89999999999999858, 41.39999999999999858, 44.0, 4464, 235, 4912, 320, 29330000, 137071000, 2951, 0.00100000000000000002, 2.241999999999999993, 4247, 157, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 14460);\nDatabase State:\n- Table: zip_congress, Columns: [zip_code, district]\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]\n- Table: area_code, Columns: [zip_code, area_code]\n- Table: avoid, Columns: [zip_code, bad_alias]\n- Table: country, Columns: [zip_code, county, state]\n- Table: CBSA, Columns: [CBSA, CBSA_name, CBSA_type]\n- Table: state, Columns: [abbreviation, name]\n- Table: zip_data, Columns: [zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, 1st_quarter_payroll, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA]",
        "Response": "Table: zip_data"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO wedding (Church_ID, Male_ID, Female_ID, Year)  VALUES (3, 3, 4, 2015);\nDatabase State:\n- Table: wedding, Columns: [Church_ID, Male_ID, Female_ID, Year]\n- Table: people, Columns: [People_ID, Name, Country, Is_Male, Age]",
        "Response": "Table: wedding"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO journal (Journal_ID, Date, Theme, Sales)  VALUES (16, 'December 30, 2001', 'Cleveland Browns', 3798);\nDatabase State:\n- Table: journal_committee, Columns: [Editor_ID, Journal_ID, Work_Type]",
        "Response": "Table: journal"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Answer (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('Maybe', 2018, 3633, 12);\nDatabase State:\n- Table: Survey, Columns: [SurveyID, Description]\n- Table: Answer, Columns: [AnswerText, SurveyID, UserID, QuestionID]\n- Table: Question, Columns: [questiontext, questionid]",
        "Response": "Table: Answer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO user_reviews (App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity)  VALUES ('FOX', 'From bad to worse, after the last update I can already stream, start for 5 seconds then turn off my computer, this is only with your since I use as HBO the streaming is done well transmits without problem on my tv.', 'Negative', '-0.27499999999999997', '0.5833333333333333');\nDatabase State:\n- Table: playstore, Columns: [App, Category, Rating, Reviews, Size, Installs, Type, Price, Content_Rating, Genres]",
        "Response": "Table: user_reviews"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Allergy, AllergyType)  VALUES ('Cat', 'animal');\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Allergy_Type, Columns: [Allergy, AllergyType]\n- Table: Has_Allergy, Columns: [StuID, Allergy]",
        "Response": "Table: Allergy_Type"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Products (product_id, product_name, product_details)  VALUES (12, 'phone', NULL);\nDatabase State:\n- Table: Invoices, Columns: [invoice_number, invoice_date, invoice_details]\n- Table: Products, Columns: [product_id, product_name, product_details]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Ship (Ship_ID, Name, Type, Built_Year, Class, Flag)  VALUES (6, 'HMS Trojan', 'Panamax', 1997.0, 'KR', 'Panama');\nDatabase State:\n- Table: Ship, Columns: [Ship_ID, Name, Type, Built_Year, Class, Flag]\n- Table: captain, Columns: [Captain_ID, Name, Ship_ID, age, Class, Rank]",
        "Response": "Table: Ship"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID)  VALUES ('432-19-8765', 'Bronson', 'Paul', '11/20/03', 'US$58,000.00', 'M', 'Good', 2, 6);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (accelerator_id, browser_id, compatible_since_year)  VALUES (3, 2, 2007);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: accelerator_compatible_browser"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, mountain_id, color)  VALUES (10, 10, 20, 'RBG', 'life');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: photos"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, point_in_time, instance_of, office_contested, followed_by, follows, freebase_id, part_of)  VALUES ('1972 Leeds City Council election', 'nan', 'United Kingdom', '+1972-05-05T00:00:00Z', 'Leeds municipal election', 'Councillor of the County Borough of Leeds', '1973 Leeds City Council election', '1971 Leeds City Council election', '/m/0ktxr8x', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country)  VALUES ('Yachad', 'UK nonprofit seeking peace in Israel', 'nonprofit organization', 'United Kingdom');\nDatabase State:\n- Table: administrative_centre, Columns: [label, description, instance_of, locator_map_image, coordinate_location, topics_main_category, freebase_id, capital, population, inception, country, category_of_associated_people, coat_of_arms_image, shares_border_with, commons_category, musicbrainz_area_id, geonames_id, area, viaf_id, inaturalist_place_id]\n- Table: place_of_birth, Columns: [label, description, image, country, located_in_the_administrative_territorial_entity, instance_of, commons_category, coordinate_location, freebase_id]\n- Table: given_name, Columns: [label, description, language_of_work_or_name, instance_of, said_to_be_the_same_as, different_from, native_label, writing_system, soundex, cologne_phonetics, caverphone, commons_category]\n- Table: part, Columns: [label, description, commons_category, topics_main_category, instance_of, freebase_id, gnd_id, quora_topic_id, locator_map_image, viaf_id, has_parts, coordinate_location, part_of]\n- Table: head_of_state, Columns: [label, description, sex_or_gender, place_of_birth, spouse, commons_category, library_of_congress_authority_id, gnd_id, award_received, date_of_birth, viaf_id, instance_of, freebase_id, religion_or_worldview, country_of_citizenship, occupation, educated_at, given_name, munzinger_person_id, position_held, languages_spoken_written_or_signed, encyclop\u00e6dia_britannica_online_id, worldcat_identities_id, isni, name_in_native_language, image, opensanctions_id]\n- Table: administrative_territorial_entity, Columns: [label, description, image, instance_of, located_in_the_administrative_territorial_entity, country, coordinate_location, commons_category, freebase_id, geonames_id, locator_map_image, population, area, capital]\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, coordinates_of_southernmost_point, category_for_films_shot_at_this_location, gnd_id, category_of_associated_people, emergency_phone_number, electrical_plug_type, licence_plate_code, babelnet_id, office_held_by_head_of_government, gini_coefficient, curlie_id, native_label, musicbrainz_area_id, insee_countries_and_foreign_territories_code, diplomatic_relation, flag_image, commons_gallery, civicus_monitor_country_entry, history_of_topic, capital, subreddit, openstreetmap_relation_id, mobile_country_code, nkcr_aut_id, category_of_people_buried_here, geoshape, coordinates_of_easternmost_point, demonym, le_monde_diplomatique_subject_id, fast_id, life_expectancy, member_of, unemployment_rate, viaf_id, located_in_time_zone, category_for_people_who_died_here, yso_id, office_held_by_head_of_state, commons_category, shares_border_with, nalt_id, iso_3166_1_numeric_code, coordinates_of_westernmost_point, giant_bomb_id, country_calling_code, stw_thesaurus_for_economics_id, statoids_id, driving_side, flag, fips_10_4_countries_and_regions, dagens_nyheter_topic_id, isni, nese_id, maritime_identification_digits, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, wikimedia_outline, ndl_authority_id, currency, geonames_id, unicode_character, invasive_species_compendium_datasheet_id, unesco_thesaurus_id, geography_of_topic, iso_3166_1_alpha_3_code, quora_topic_id, country, mesh_descriptor_id, basic_form_of_government, ituisoiec_object_identifier, legislative_body, freebase_id, official_language, replaces, continent, coat_of_arms, age_of_majority, national_library_of_israel_id_old, on_focus_list_of_wikimedia_project, wipo_st3, coordinates_of_northernmost_point, has_quality, iso_3166_1_alpha_2_code, total_fertility_rate, area, central_bank, different_from, topics_main_category, biblioth\u00e8que_nationale_de_france_id, locator_map_image, bbc_things_id, head_of_government, ioc_country_code, official_name, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, m49_code, mains_voltage, executive_body, number_of_out_of_school_children, anthem, inception, top_level_internet_domain, instance_of, highest_point, category_for_people_born_here, short_name, lowest_point, idref_id, contains_the_administrative_territorial_entity, itu_letter_code, library_of_congress_authority_id, coordinate_location, language_used, described_by_source, klexikon_article_id, loc_and_marc_vocabularies_id, asc_leiden_thesaurus_id, world_encyclopedia_of_puppetry_arts_id, iab_code, whos_on_first_id, the_top_tens_id, dr_topic_id, treccanis_dizionario_di_storia_id, part_of, inaturalist_place_id, omegawiki_defined_meaning, hds_id, gs1_country_code, culture, geonlp_id, category_for_maps, analysis_policy_observatory_term_id, vat_rate, french_vikidia_id, spanish_vikidia_id, pronunciation_audio, eurovoc_id, worldcat_identities_id, open_data_portal, kbpedia_id, grove_art_online_id, rkd_thesaurus_id, interlingual_index_id, jewish_encyclopedia_id_russian, economy_of_topic, edition_humboldt_digital_id, tasteatlas_id, github_topic, uk_parliament_thesaurus_id, wordnet_31_synset_id, demographics_of_topic, zhihu_topic_id, joconde_location_id, idaigazetteer_id, ysa_id, obo_gazetteer_id, krugosvet_article, store_norske_leksikon_id, den_store_danske_id, gran_enciclop\u00e8dia_catalana_id, treccani_id, schoenberg_database_of_manuscripts_place_id, dewey_decimal_classification, official_website, the_world_factbook_country_id, national_library_of_israel_j9u_id, democracy_index, online_pwn_encyclopedia_id, namuwiki_id, der_spiegel_topic_id, yle_topic_id, wikisimpsons_id, urban_electric_transit_country_id, coat_of_arms_image, postimees_topic_id, head_of_state, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, hashtag, image, pm20_geo_code, openstreetmap_element, happy_planet_index_score, new_york_times_topic_id, encyclop\u00e6dia_universalis_id, motto_text, us_national_archives_identifier, brockhaus_enzyklop\u00e4die_online_id, bbc_news_topic_id, colon_classification, museum_digital_place_id, marriageable_age, comic_vine_id]\n- Table: peace_organization, Columns: [label, description, instance_of, country]",
        "Response": "Table: peace_organization"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of)  VALUES ('1-cys-glutaredoxin-like protein-1', 'nan', 'GLP1', 'O97232', 'cell redox homeostasis', 'electron transfer activity', 'Glutaredoxin domain', 'Plasmodium falciparum 3D7', 'nan', 'protein', 'Thioredoxin-like superfamily');\nDatabase State:\n- Table: chromosome, Columns: [label, description, found_in_taxon, instance_of]\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, chromosome, genomic_start, strand_orientation, genomic_end, instance_of]\n- Table: encodes, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO playstore (App, Category, Rating, Reviews, Size, Installs, Type, Price, Content_Rating, Genres)  VALUES ('Cisco Webex Meetings', 'BUSINESS', 4.400000000000000356, 108741, '28M', '10,000,000+', 'Free', '0', 'Everyone', 'Business');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: playstore"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO followed_by (label, description, instance_of, edition_number, sport, country, start_time, end_time, winner, follows, followed_by)  VALUES ('1983 Grand Prix of Sochi', 'nan', 'Grand Prix of Sochi', '30', 'road bicycle racing', 'Soviet Union', '+1983-04-01T00:00:00Z', '+1983-04-05T00:00:00Z', 'Ivar Fels', '1982 Grand Prix of Sochi', '1984 Grand Prix of Sochi');\nDatabase State:\n- Table: followed_by, Columns: [label, description, instance_of, edition_number, sport, country, start_time, end_time, winner, follows, followed_by]\n- Table: grand_prix_of_sochi, Columns: [label, description, instance_of, edition_number, sport, country, start_time, end_time, winner, follows, followed_by]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (outcome_code, outcome_description)  VALUES ('Patent', 'Research Patent');\nDatabase State:\n- Table: Research_Outcomes, Columns: [outcome_code, outcome_description]\n- Table: Projects, Columns: [project_id, organisation_id, project_details]\n- Table: Organisation_Types, Columns: [organisation_type, organisation_type_description]\n- Table: Staff_Roles, Columns: [role_code, role_description]\n- Table: Tasks, Columns: [task_id, project_id, task_details, eg_Agree_Objectives]\n- Table: Grants, Columns: [grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]\n- Table: Research_Staff, Columns: [staff_id, employer_organisation_id, staff_details]\n- Table: Document_Types, Columns: [document_type_code, document_description]\n- Table: Project_Outcomes, Columns: [project_id, outcome_code, outcome_details]\n- Table: Project_Staff, Columns: [staff_id, project_id, role_code, date_from, date_to, other_details]",
        "Response": "Table: Research_Outcomes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (HH_ID, Member_ID, Total_amount)  VALUES (5, 5, 16.92000000000000171);\nDatabase State:\n- Table: member, Columns: [Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address]\n- Table: happy_hour, Columns: [HH_ID, Shop_ID, Month, Num_of_shaff_in_charge]",
        "Response": "Table: happy_hour_member"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO leucyl_phenylalanyl_trna_protein_transferase (label, description, subclass_of, uniprot_protein_id, encoded_by, found_in_taxon, biological_process, cell_component, molecular_function, instance_of, refseq_protein_id, part_of)  VALUES ('Leucyl/phenylalanyl-tRNA/protein transferase Mesci_3556', 'microbial protein found in Mesorhizobium ciceri biovar biserrulae WSM1271', 'protein', 'E8TLC5', 'leucyl/phenylalanyl-tRNA/protein transferase Mesci_3556', 'Mesorhizobium ciceri biovar biserrulae WSM1271', 'protein catabolic process', 'cytoplasm', 'leucyltransferase activity', 'protein', 'YP_004142726', 'Acyl-CoA N-acyltransferase');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, subclass_of, found_in_taxon, entrez_gene_id, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: leucyl_phenylalanyl_trna_protein_transferase"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (year, lgID, tmID, oppID, W, L, T, OTL)  VALUES (2006, 'NHL', 'NYR', 'BOS', 4, 0, NULL, '0');\nDatabase State:\n- Table: ScoringSup, Columns: [playerID, year, PPA, SHA]\n- Table: Teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: Goalies, Columns: [playerID, year, stint, tmID, lgID, GP, Min, W, L, T/OL, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA]\n- Table: Coaches, Columns: [coachID, year, tmID, lgID, stint, notes, g, w, l, t, postg, postw, postl, postt]\n- Table: TeamsSC, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM]\n- Table: HOF, Columns: [year, hofID, name, category]\n- Table: Master, Columns: [playerID, coachID, hofID, firstName, lastName, nameNote, nameGiven, nameNick, height, weight, shootCatch, legendsID, ihdbID, hrefID, firstNHL, lastNHL, firstWHA, lastWHA, pos, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity, deathYear, deathMon, deathDay, deathCountry, deathState, deathCity]\n- Table: SeriesPost, Columns: [year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L, T, GoalsWinner, GoalsLoser, note]\n- Table: ScoringSC, Columns: [playerID, year, tmID, lgID, pos, GP, G, A, Pts, PIM]\n- Table: AwardsPlayers, Columns: [playerID, award, year, lgID, note, pos]\n- Table: AwardsMisc, Columns: [name, ID, award, year, lgID, note]\n- Table: ScoringShootout, Columns: [playerID, year, stint, tmID, S, G, GDG]\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: TeamVsTeam, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]\n- Table: Scoring, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, +/-, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, Post+/-, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]\n- Table: TeamsHalf, Columns: [year, lgID, tmID, half, rank, G, W, L, T, GF, GA]\n- Table: GoaliesShootout, Columns: [playerID, year, stint, tmID, W, L, SA, GA]\n- Table: GoaliesSC, Columns: [playerID, year, tmID, lgID, GP, Min, W, L, T, SHO, GA]\n- Table: CombinedShutouts, Columns: [year, month, date, tmID, oppID, R/P, IDgoalie1, IDgoalie2]\n- Table: TeamsPost, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]",
        "Response": "Table: TeamVsTeam"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag)  VALUES ('Nurf-38', 'protein-coding gene in the species Drosophila melanogaster', '37922.0', 'nan', 'Nucleosome remodeling factor - 38kD Dmel_CG4634', 'Drosophila melanogaster', 'reverse strand', '24561087', '24558967', 'gene', 'Dmel_CG4634');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of)  VALUES ('4-hydroxybenzoate polyprenyltransferase RP686', 'microbial protein found in Rickettsia prowazekii str. Madrid E', '4-hydroxybenzoate polyprenyltransferase RP686', 'Q9ZCN7', 'ubiquinone biosynthetic process', 'prenyltransferase activity', 'plasma membrane', 'nan', 'Rickettsia prowazekii str. Madrid E', 'NP_221047', 'protein', '4-hydroxybenzoate polyprenyltransferase-like');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: 4_hydroxybenzoate_polyprenyltransferase_like"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (recipe_id, title, subtitle, servings, yield_unit, prep_min, cook_min, stnd_min, source, intro, directions)  VALUES (786, '-Asian Pears-', NULL, 4, NULL, 3, 0, 0, NULL, NULL, 'Good for eating-out-of-hand, or cut up raw in fruit salads and desserts.');\nDatabase State:\n- Table: Nutrition, Columns: [recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories]\n- Table: Quantity, Columns: [quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional]\n- Table: Ingredient, Columns: [ingredient_id, category, name, plural]\n- Table: Recipe, Columns: [recipe_id, title, subtitle, servings, yield_unit, prep_min, cook_min, stnd_min, source, intro, directions]",
        "Response": "Table: Recipe"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details)  VALUES (173, 'PR', 'Alene', '1', '1980-10-14 12:23:10', NULL);\nDatabase State:\n- Table: Document_Locations, Columns: [Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]\n- Table: Ref_Calendar, Columns: [Calendar_Date, Day_Number]\n- Table: Employees, Columns: [Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details]\n- Table: All_Documents, Columns: [Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details]",
        "Response": "Table: Employees"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO luc7_related (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of)  VALUES ('LUC7 related splicing factor homolog CELE_B0495.8', 'Protein found in Caenorhabditis elegans', 'luc-7L', 'Q09217', 'mRNA splice site selection', 'mRNA binding', 'U1 snRNP', 'Caenorhabditis elegans', 'NP_741025', 'protein', 'Luc7-related');\nDatabase State:\n- Table: orthology, Columns: [label, description, entrez_gene_id, ensembl_gene_id, homologene_id, chromosome, found_in_taxon, refseq_rna_id, ensembl_transcript_id, encodes, ortholog, strand_orientation, instance_of, genomic_end, genomic_start, expressed_in]\n- Table: luc7_related, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: chromosome, Columns: [label, description, refseq_genome_id, found_in_taxon, instance_of]\n- Table: expressed_in, Columns: [label, description, terminologia_anatomica_98_id, foundational_model_of_anatomy_id, described_by_source, mesh_tree_code, jstor_topic_id, subclass_of, ta98_latin_term, mesh_descriptor_id, uberon_id, ta2_id, microsoft_academic_id, umls_cui, kbpedia_id, openalex_id, commons_category, instance_of, freebase_id, encyclop\u00e6dia_britannica_online_id, wordnet_31_synset_id]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, ensembl_gene_id, ensembl_transcript_id, homologene_id, refseq_rna_id, ortholog, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, chromosome, instance_of, cytogenetic_location, expressed_in]\n- Table: encodes, Columns: [label, description, ensembl_protein_id, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: luc7_related"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO transport_hub (label, description, commons_category, coordinate_location, country, instance_of, located_in_the_administrative_territorial_entity, image)  VALUES ('Olympic Station Public Transport Interchange', 'Public transport interchange in Hong Kong', 'Olympic Station Public Transport Interchange', '22.318753', 'People''s Republic of China', 'transport hub', 'Yau Tsim Mong District', 'Olympic Station Public Transport Interchange.jpg');\nDatabase State:\n- Table: transport_hub, Columns: [label, description, commons_category, coordinate_location, country, instance_of, located_in_the_administrative_territorial_entity, image]\n- Table: administrative_territorial_entity, Columns: [label, description, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, openstreetmap_relation_id, commons_category, topics_main_category, official_website, freebase_id, geonames_id, image, area, locator_map_image, population]\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, coordinates_of_southernmost_point, new_york_times_topic_id, gnd_id, category_of_associated_people, emergency_phone_number, electrical_plug_type, licence_plate_code, babelnet_id, gini_coefficient, category_for_people_who_died_here, native_label, musicbrainz_area_id, public_holiday, insee_countries_and_foreign_territories_code, diplomatic_relation, commons_gallery, viaf_id, history_of_topic, capital, official_website, openstreetmap_relation_id, mobile_country_code, maritime_identification_digits, nkcr_aut_id, category_of_people_buried_here, motto_text, geoshape, dewey_decimal_classification, coordinates_of_easternmost_point, on_focus_list_of_wikimedia_project, le_monde_diplomatique_subject_id, member_of, unemployment_rate, railway_traffic_side, category_for_people_born_here, yso_id, office_held_by_head_of_state, part_of, commons_category, shares_border_with, us_national_archives_identifier, iso_3166_1_numeric_code, coordinates_of_westernmost_point, giant_bomb_id, country_calling_code, stw_thesaurus_for_economics_id, statoids_id, driving_side, curlie_id, flag, fips_10_4_countries_and_regions, isni, nese_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, wikimedia_outline, ndl_authority_id, currency, geonames_id, unicode_character, unesco_thesaurus_id, geography_of_topic, iso_3166_1_alpha_3_code, quora_topic_id, mesh_descriptor_id, guardian_topic_id, basic_form_of_government, topics_main_template, coat_of_arms_image, inception, ituisoiec_object_identifier, legislative_body, located_in_time_zone, freebase_id, official_language, replaces, continent, coat_of_arms, demonym, national_library_of_israel_id_old, asc_leiden_thesaurus_id, wipo_st3, coordinates_of_northernmost_point, has_quality, iso_3166_1_alpha_2_code, total_fertility_rate, area, executive_body, central_bank, topics_main_category, head_of_government, biblioth\u00e8que_nationale_de_france_id, locator_map_image, ioc_country_code, official_name, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, described_by_source, page_banner, category_for_films_shot_at_this_location, mains_voltage, fast_id, anthem, highest_judicial_authority, life_expectancy, gran_enciclop\u00e8dia_catalana_id, top_level_internet_domain, instance_of, highest_point, short_name, head_of_state, lowest_point, civicus_monitor_country_entry, idref_id, contains_the_administrative_territorial_entity, itu_letter_code, library_of_congress_authority_id, coordinate_location, language_used, brockhaus_enzyklop\u00e4die_online_id, klexikon_article_id, flag_image, loc_and_marc_vocabularies_id, located_in_or_next_to_body_of_water, dr_topic_id, iab_code, bbc_news_topic_id, whos_on_first_id, treccanis_dizionario_di_storia_id, the_top_tens_id, world_encyclopedia_of_puppetry_arts_id, fandom_article_id, omegawiki_defined_meaning, m49_code, hds_id, gs1_country_code, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, italian_vikidia_id, online_pwn_encyclopedia_id, pronunciation_audio, eurovoc_id, worldcat_identities_id, country, open_data_portal, kbpedia_id, grove_art_online_id, rkd_thesaurus_id, pm20_geo_code, subreddit, interlingual_index_id, jewish_encyclopedia_id_russian, economy_of_topic, uk_parliament_thesaurus_id, sapa_id, bhcl_uuid, yle_topic_id, tasteatlas_id, democracy_index, namuwiki_id, wordnet_31_synset_id, store_norske_leksikon_id, demographics_of_topic, inaturalist_place_id, \u00e1vvir_topic_id, ysa_id, joconde_location_id, zhihu_topic_id, idaigazetteer_id, krugosvet_article, encyclopedia_of_the_history_of_ukraine_id, treccani_id, larousse_id, schoenberg_database_of_manuscripts_place_id, edition_humboldt_digital_id, obo_gazetteer_id, the_world_factbook_country_id, national_library_of_israel_j9u_id, colon_classification, fandom_wiki_id, den_store_danske_id, der_spiegel_topic_id, museum_digital_place_id, wikisimpsons_id, urban_electric_transit_country_id, hashtag, office_held_by_head_of_government, postimees_topic_id, s\u00fcddeutsche_zeitung_topic_id, image, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, openstreetmap_element, happy_planet_index_score, uic_alphabetical_country_code, comic_vine_id, vat_rate, dagens_nyheter_topic_id, maintained_by_wikiproject, age_of_majority, uic_numerical_country_code, gynopedia_id, github_topic, armeniapedia_id]\n- Table: part, Columns: [label, description, instance_of, commons_category, topics_main_category, viaf_id, freebase_id, has_parts, locator_map_image, quora_topic_id]\n- Table: given_name, Columns: [label, description, instance_of, native_label, writing_system, language_of_work_or_name]\n- Table: place_of_birth, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, coordinate_location, commons_category, gnd_id, topics_main_category, freebase_id, musicbrainz_area_id, geonames_id, official_website, image, viaf_id, postal_code, commons_gallery, population, area, nkcr_aut_id, library_of_congress_authority_id, worldcat_identities_id, national_library_of_israel_j9u_id]\n- Table: head_of_state, Columns: [label, description, country_of_citizenship, occupation, commons_category, library_of_congress_authority_id, viaf_id, gnd_id, isni, position_held, date_of_birth, topics_main_category, instance_of, freebase_id, spouse, official_website, family_name, languages_spoken_written_or_signed, native_language, name_in_native_language, residence, father, signature, award_received, fast_id, genicom_profile_id, encyclop\u00e6dia_britannica_online_id, gran_enciclop\u00e8dia_catalana_id, sex_or_gender, munzinger_person_id, store_norske_leksikon_id, nese_id, worldcat_identities_id, treccani_id, candidacy_in_election, den_store_danske_id, given_name, image, place_of_birth, educated_at, plwabn_id, religion_or_worldview, opensanctions_id]",
        "Response": "Table: transport_hub"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO musical (Musical_ID, Name, Year, Award, Category, Nominee, Result)  VALUES (2, 'Les Mis\u00e9rables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: musical"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO people (People_ID, District, Name, Party, Age)  VALUES (5, 'New York 5', 'William B. Maclay', 'Democratic', 36);\nDatabase State:\n- Table: debate_people, Columns: [Debate_ID, Affirmative, Negative, If_Affirmative_Win]",
        "Response": "Table: people"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, sport, country, point_in_time, followed_by, competition_class, has_parts, on_focus_list_of_wikimedia_project, follows)  VALUES ('1989 Canadian Junior Badminton Championships U19', 'badminton championships', 'Canadian Junior Badminton Championships', 'badminton', 'Canada', '+1989-00-00T00:00:00Z', '1990 Canadian Junior Badminton Championships U19', 'national championship', '1989 Canadian Junior Badminton Championships U19 \u2013 men''s singles', 'WikiProject Badminton/tournament focus list', '1988 Canadian Junior Badminton Championships U19');\nDatabase State:\n- Table: follows, Columns: [label, description, instance_of, sport, country, point_in_time, followed_by, competition_class, has_parts, on_focus_list_of_wikimedia_project, follows]\n- Table: canadian_junior_badminton_championships, Columns: [label, description, instance_of, sport, country, point_in_time, followed_by, competition_class, has_parts, on_focus_list_of_wikimedia_project, follows]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, country, coordinate_location, freebase_id, instance_of, geonames_id, commons_category, located_in_the_administrative_territorial_entity, area, population, capital, locator_map_image, topics_main_category)  VALUES ('Lesser Poland Voivodeship', 'voivodeship of Poland', 'Poland', '49.85', '/m/055hc', 'voivodeship of Poland', '858786.0', 'Lesser Poland Voivodeship', 'Poland', 15108.0, 3360581.0, 'Krak\u00f3w', 'Malopolskie in Poland.svg', 'Category:Lesser Poland Voivodeship');\nDatabase State:\n- Table: capital_city, Columns: [label, description, instance_of, country, commons_category, coordinate_location, topics_main_category, freebase_id, located_in_time_zone, geonames_id, capital_of, viaf_id, located_in_the_administrative_territorial_entity, library_of_congress_authority_id, category_of_associated_people, whos_on_first_id, image, national_library_of_israel_j9u_id, area, elevation_above_sea_level, population]\n- Table: head_of_state, Columns: [label, description, instance_of, place_of_birth, position_held, date_of_birth, occupation, sex_or_gender, country_of_citizenship, given_name, image, member_of_political_party, educated_at, commons_category, name_in_native_language, viaf_id, gnd_id, opensanctions_id, languages_spoken_written_or_signed]\n- Table: administrative_territorial_entity, Columns: [label, description, country, coordinate_location, freebase_id, instance_of, geonames_id, commons_category, located_in_the_administrative_territorial_entity, area, population, capital, locator_map_image, topics_main_category]\n- Table: place_of_birth, Columns: [label, description, instance_of, country, commons_category, coordinate_location, freebase_id, geonames_id, located_in_the_administrative_territorial_entity, whos_on_first_id, image]\n- Table: ministry_of_culture, Columns: [label, description, instance_of, country, applies_to_jurisdiction]\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, wikimedia_outline, ndl_authority_id, currency, new_york_times_topic_id, geonames_id, gnd_id, unicode_character, category_of_associated_people, emergency_phone_number, electrical_plug_type, babelnet_id, geography_of_topic, iso_3166_1_alpha_3_code, office_held_by_head_of_government, quora_topic_id, curlie_id, country, encyclop\u00e6dia_universalis_id, mesh_descriptor_id, ituisoiec_object_identifier, musicbrainz_area_id, has_quality, coat_of_arms_image, number_of_out_of_school_children, insee_countries_and_foreign_territories_code, diplomatic_relation, office_held_by_head_of_state, commons_gallery, legislative_body, inception, official_language, history_of_topic, stw_thesaurus_for_economics_id, viaf_id, continent, capital, coat_of_arms, demonym, geoshape, openstreetmap_relation_id, wipo_st3, coordinates_of_northernmost_point, nkcr_aut_id, comic_vine_id, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, shares_border_with, marriageable_age, topics_main_category, head_of_government, head_of_state, biblioth\u00e8que_nationale_de_france_id, locator_map_image, age_of_majority, dewey_decimal_classification, area, le_monde_diplomatique_subject_id, ioc_country_code, member_of, unemployment_rate, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, isni, mains_voltage, located_in_time_zone, category_for_people_who_died_here, yso_id, anthem, life_expectancy, gran_enciclop\u00e8dia_catalana_id, part_of, commons_category, top_level_internet_domain, instance_of, highest_point, category_for_people_born_here, short_name, driving_side, lowest_point, brockhaus_enzyklop\u00e4die_online_id, civicus_monitor_country_entry, iso_3166_1_numeric_code, idref_id, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, freebase_id, statoids_id, iso_3166_1_alpha_2_code, flag, coordinate_location, fips_10_4_countries_and_regions, described_by_source, flag_image, uk_parliament_thesaurus_id, iab_code, klexikon_article_id, library_of_congress_authority_id, loc_and_marc_vocabularies_id, central_bank, official_name, category_for_films_shot_at_this_location, language_used, whos_on_first_id, treccanis_dizionario_di_storia_id, dr_topic_id, official_website, omegawiki_defined_meaning, hds_id, gs1_country_code, culture, coordinates_of_southernmost_point, coordinates_of_easternmost_point, coordinates_of_westernmost_point, geonlp_id, store_norske_leksikon_id, unesco_thesaurus_id, analysis_policy_observatory_term_id, category_for_maps, vat_rate, french_vikidia_id, spanish_vikidia_id, pronunciation_audio, eurovoc_id, worldcat_identities_id, fast_id, kbpedia_id, grove_art_online_id, subreddit, interlingual_index_id, native_label, economy_of_topic, tasteatlas_id, github_topic, wordnet_31_synset_id, demographics_of_topic, inaturalist_place_id, the_world_factbook_country_id, national_library_of_israel_j9u_id, democracy_index, ysa_id, yle_topic_id, postimees_topic_id, wikisimpsons_id, krugosvet_article, den_store_danske_id, bbc_news_topic_id, m49_code, online_pwn_encyclopedia_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, hashtag, on_focus_list_of_wikimedia_project, gini_coefficient, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, namuwiki_id, basic_form_of_government, licence_plate_code, rkd_thesaurus_id, museum_digital_place_id]\n- Table: jurisdiction, Columns: [label, description, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, wikimedia_outline, ndl_authority_id, currency, new_york_times_topic_id, geonames_id, gnd_id, unicode_character, category_of_associated_people, emergency_phone_number, electrical_plug_type, babelnet_id, geography_of_topic, iso_3166_1_alpha_3_code, office_held_by_head_of_government, quora_topic_id, curlie_id, country, encyclop\u00e6dia_universalis_id, mesh_descriptor_id, ituisoiec_object_identifier, musicbrainz_area_id, has_quality, coat_of_arms_image, insee_countries_and_foreign_territories_code, diplomatic_relation, office_held_by_head_of_state, commons_gallery, legislative_body, inception, official_language, history_of_topic, stw_thesaurus_for_economics_id, viaf_id, continent, capital, coat_of_arms, demonym, geoshape, openstreetmap_relation_id, wipo_st3, coordinates_of_northernmost_point, nkcr_aut_id, comic_vine_id, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, shares_border_with, topics_main_category, head_of_government, head_of_state, biblioth\u00e8que_nationale_de_france_id, locator_map_image, dewey_decimal_classification, area, le_monde_diplomatique_subject_id, ioc_country_code, member_of, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, isni, mains_voltage, located_in_time_zone, category_for_people_who_died_here, yso_id, anthem, life_expectancy, gran_enciclop\u00e8dia_catalana_id, part_of, commons_category, top_level_internet_domain, instance_of, highest_point, category_for_people_born_here, short_name, driving_side, lowest_point, brockhaus_enzyklop\u00e4die_online_id, civicus_monitor_country_entry, iso_3166_1_numeric_code, idref_id, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, freebase_id, statoids_id, iso_3166_1_alpha_2_code, flag, coordinate_location, fips_10_4_countries_and_regions, described_by_source, flag_image, uk_parliament_thesaurus_id, iab_code, klexikon_article_id, library_of_congress_authority_id, loc_and_marc_vocabularies_id, central_bank, official_name, category_for_films_shot_at_this_location, language_used, whos_on_first_id, treccanis_dizionario_di_storia_id, dr_topic_id, official_website, omegawiki_defined_meaning, hds_id, culture, coordinates_of_southernmost_point, coordinates_of_easternmost_point, coordinates_of_westernmost_point, geonlp_id, store_norske_leksikon_id, unesco_thesaurus_id, category_for_maps, french_vikidia_id, spanish_vikidia_id, pronunciation_audio, eurovoc_id, worldcat_identities_id, fast_id, kbpedia_id, subreddit, interlingual_index_id, native_label, economy_of_topic, tasteatlas_id, github_topic, wordnet_31_synset_id, demographics_of_topic, inaturalist_place_id, the_world_factbook_country_id, national_library_of_israel_j9u_id, democracy_index, ysa_id, yle_topic_id, postimees_topic_id, krugosvet_article, den_store_danske_id, bbc_news_topic_id, online_pwn_encyclopedia_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, hashtag, on_focus_list_of_wikimedia_project, obo_gazetteer_id, openstreetmap_element, namuwiki_id, licence_plate_code, rkd_thesaurus_id, museum_digital_place_id]\n- Table: part, Columns: [label, description, commons_category, topics_main_category, freebase_id, instance_of, has_parts]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales (EVENTID, REFID, EVENT_DATE, AMOUNT)  VALUES (1959158, 205998, '2007-04-16 12:00:00.0', 16.21600000000000108);\nDatabase State:\n- Table: Customers, Columns: [ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age]\n- Table: mailings3, Columns: [REFID, REF_DATE, RESPONSE]\n- Table: Sales, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]\n- Table: Demog, Columns: [GEOID, INHABITANTS_K, INCOME_K, A_VAR1, A_VAR2, A_VAR3, A_VAR4, A_VAR5, A_VAR6, A_VAR7, A_VAR8, A_VAR9, A_VAR10, A_VAR11, A_VAR12, A_VAR13, A_VAR14, A_VAR15, A_VAR16, A_VAR17, A_VAR18]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO political_border (label, description, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, shares_border_with, official_website, country, postal_code, insee_municipality_code, commons_category, freebase_id, geonames_id, image, population, area, biblioth\u00e8que_nationale_de_france_id, locator_map_image, coat_of_arms_image, office_held_by_head_of_government, factgrid_item_id, viaf_id, official_name, whos_on_first_id, french_public_service_directory_id, associated_electoral_district, ehess_id_of_a_french_commune, male_population, female_population, legal_form, industry, siren_number, located_in_time_zone)  VALUES ('Malakoff', 'commune in Hauts-de-Seine, France', '48.81722222222201', 'commune of France', 'Seine', 'Paris', 'https://www.malakoff.fr', 'France', '92240.0', '92046.0', 'Malakoff (Hauts-de-Seine)', '/m/08ryv7', '6451972', 'Malakoff place du 11 Novembre 1.jpg', 30950.0, 2.06999999999999984, '15280264n', 'Malakoff map.svg', 'Blason ville fr Malakoff (Hauts-de-Seine).svg', 'Mayor of Malakoff', 'Q122859', '159578749', 'Malakoff', '101749799.0', 'ile-de-france/hauts-de-seine/mairie-92046-01', 'canton of Montrouge', '20754.0', 14725.0, 15995.0, 'commune et commune nouvelle', 'administration publique g\u00e9n\u00e9rale', '219200466.0', 'nan');\nDatabase State:\n- Table: jurisdiction, Columns: [label, description, official_website, topics_main_category, country, insee_municipality_code, commons_category, image, postal_code, located_in_time_zone, coat_of_arms_image, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, freebase_id, geonames_id, capital_of, area, shares_border_with, locator_map_image, population, viaf_id, biblioth\u00e8que_nationale_de_france_id, official_name, office_held_by_head_of_government, whos_on_first_id, french_public_service_directory_id, ehess_id_of_a_french_commune, male_population, female_population, factgrid_item_id, legal_form, industry, siren_number, associated_electoral_district]\n- Table: office_held_by_head_of_government, Columns: [label, description, instance_of, subclass_of, applies_to_jurisdiction, country]",
        "Response": "Table: political_border"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (student_id, capability, prof_id, salary)  VALUES (12, 2, 4, 'low');\nDatabase State:\n- Table: RA, Columns: [student_id, capability, prof_id, salary]\n- Table: student, Columns: [student_id, f_name, l_name, phone_number, email, intelligence, gpa, type]",
        "Response": "Table: RA"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship)  VALUES (4, 'Iris Fontbona', 1942.0, 17.39999999999999857, 'Chile');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: singer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS)  VALUES (5529, '1997-1998', 'Belleville Bulls', 'OHL', 'Regular Season', 64, 31, 45, 76, 62, 14);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO lewisham_london_borough_council_election (label, description, country, instance_of, point_in_time, freebase_id, part_of)  VALUES ('1978 Lewisham London Borough Council election', '1978 local election in England, UK', 'United Kingdom', 'Lewisham London Borough Council election', '+1978-00-00T00:00:00Z', '/m/0c02wy4', '1978 United Kingdom local elections');\nDatabase State:\n- Table: part, Columns: [label, description, topics_main_category, instance_of, country, point_in_time, freebase_id]\n- Table: lewisham_london_borough_council_election, Columns: [label, description, country, instance_of, point_in_time, freebase_id, part_of]",
        "Response": "Table: lewisham_london_borough_council_election"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO financial_regulatory_agency (label, description, instance_of, official_website, country, freebase_id)  VALUES ('Dubai Multi Commodities Centre', 'free-trade zone in Dubai', 'business', 'http://www.dmcc.ae/', 'United Arab Emirates', '/m/06zqffs');\nDatabase State:\n- Table: financial_regulatory_agency, Columns: [label, description, instance_of, official_website, country, freebase_id]\n- Table: part, Columns: [label, description, instance_of, viaf_id, commons_category, locator_map_image, topics_main_category, freebase_id, coordinate_location, has_parts, worldcat_identities_id]\n- Table: place_of_birth, Columns: [label, description, coordinate_location, instance_of, country, located_in_the_administrative_territorial_entity, freebase_id, commons_category, geonames_id]\n- Table: administrative_territorial_entity, Columns: [label, description, commons_category, country, coordinate_location, topics_main_category, instance_of, freebase_id, geonames_id, area, official_website, population, located_in_the_administrative_territorial_entity, locator_map_image]",
        "Response": "Table: financial_regulatory_agency"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (IMG_ID, ATT_CLASS_ID, OBJ_SAMPLE_ID)  VALUES (2376001, 694, 2);\nDatabase State:\n- Table: IMG_OBJ, Columns: [IMG_ID, OBJ_SAMPLE_ID, OBJ_CLASS_ID, X, Y, W, H]\n- Table: PRED_CLASSES, Columns: [PRED_CLASS_ID, PRED_CLASS]\n- Table: OBJ_CLASSES, Columns: [OBJ_CLASS_ID, OBJ_CLASS]\n- Table: ATT_CLASSES, Columns: [ATT_CLASS_ID, ATT_CLASS]\n- Table: IMG_REL, Columns: [IMG_ID, PRED_CLASS_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID]\n- Table: IMG_OBJ_ATT, Columns: [IMG_ID, ATT_CLASS_ID, OBJ_SAMPLE_ID]",
        "Response": "Table: IMG_OBJ_ATT"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO location (id_restaurant, street_num, street_name, city)  VALUES (1546, 1620, 'shattuck ave', 'berkeley');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO takes (ID, course_id, sec_id, semester, year, grade)  VALUES ('75252', '747', '1', 'Spring', 2004, 'C+');\nDatabase State:\n- Table: takes, Columns: [ID, course_id, sec_id, semester, year, grade]\n- Table: instructor, Columns: [ID, name, dept_name, salary]\n- Table: student, Columns: [ID, name, dept_name, tot_cred]\n- Table: advisor, Columns: [s_ID, i_ID]\n- Table: department, Columns: [dept_name, building, budget]\n- Table: course, Columns: [course_id, title, dept_name, credits]\n- Table: classroom, Columns: [building, room_number, capacity]\n- Table: time_slot, Columns: [time_slot_id, day, start_hr, start_min, end_hr, end_min]",
        "Response": "Table: takes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO south_australian_house_of_assembly_by_election (label, description, instance_of, office_contested, point_in_time, country, applies_to_jurisdiction, successful_candidate, candidate)  VALUES ('Barossa colonial by-election, 1857', 'South Australian by-election', 'South Australian House of Assembly by-election', 'Member of the South Australian House of Assembly', '+1857-06-01T00:00:00Z', 'United Kingdom of Great Britain and Ireland', 'Barossa', 'Horace Dean', 'Horace Dean');\nDatabase State:\n- Table: given_name, Columns: [label, description, said_to_be_the_same_as, family_name_identical_to_this_given_name, instance_of, different_from, native_label, writing_system, soundex, cologne_phonetics, caverphone, commons_category, language_of_work_or_name]\n- Table: eponym, Columns: [label, description, commons_category, instance_of, freebase_id, image]",
        "Response": "Table: south_australian_house_of_assembly_by_election"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, gene_ontology_id, subclass_of, exact_match, instance_of)  VALUES ('protein localization to ciliary membrane', 'A process in which a protein is transported to, or maintained in, a location within a ciliary membrane.', 'GO:1903441', 'protein localization to cilium', 'http://purl.obolibrary.org/obo/GO_1903441', 'biological process');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: regulates_molecular_biology"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (book_id, author_id)  VALUES (2918, 5281);\nDatabase State:\n- Table: customer_address, Columns: [customer_id, address_id, status_id]\n- Table: customer, Columns: [customer_id, first_name, last_name, email]\n- Table: order_history, Columns: [history_id, order_id, status_id, status_date]\n- Table: address_status, Columns: [status_id, address_status]\n- Table: book, Columns: [book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id]\n- Table: order_status, Columns: [status_id, status_value]\n- Table: publisher, Columns: [publisher_id, publisher_name]\n- Table: order_line, Columns: [line_id, order_id, book_id, price]\n- Table: book_author, Columns: [book_id, author_id]\n- Table: book_language, Columns: [language_id, language_code, language_name]\n- Table: shipping_method, Columns: [method_id, method_name, cost]\n- Table: author, Columns: [author_id, author_name]",
        "Response": "Table: book_author"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Finance_ID, Other_Details)  VALUES (14, 'Good');\nDatabase State:\n- Table: Agreements, Columns: [Document_ID, Event_ID]\n- Table: Events, Columns: [Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID]\n- Table: Assets_in_Events, Columns: [Asset_ID, Event_ID]\n- Table: Finances, Columns: [Finance_ID, Other_Details]\n- Table: Locations, Columns: [Location_ID, Other_Details]\n- Table: Channels, Columns: [Channel_ID, Other_Details]\n- Table: Assets, Columns: [Asset_ID, Other_Details]\n- Table: Parties, Columns: [Party_ID, Party_Details]",
        "Response": "Table: Finances"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Code, Name, Hours)  VALUES ('Ast2', 'A Puzzling Parallax', 299);\nDatabase State:\n- Table: AssignedTo, Columns: [Scientist, Project]",
        "Response": "Table: Projects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, instance_of, part_of, followed_by, follows, google_knowledge_graph_id)  VALUES ('Exodus 18', 'eighteenth chapter of Exodus, composed of 27 verses', 'chapter of the Bible', 'Exodus', 'Exodus 19', 'Exodus 17', '/g/1hc0gfm71');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO region_sales (region_id, game_platform_id, num_sales)  VALUES (2, 405, 0.1100000000000000005);\nDatabase State:\n- Table: publisher, Columns: [id, publisher_name]\n- Table: region_sales, Columns: [region_id, game_platform_id, num_sales]\n- Table: platform, Columns: [id, platform_name]\n- Table: game_publisher, Columns: [id, game_id, publisher_id]\n- Table: game, Columns: [id, genre_id, game_name]\n- Table: genre, Columns: [id, genre_name]\n- Table: region, Columns: [id, region_name]\n- Table: game_platform, Columns: [id, game_publisher_id, platform_id, release_year]",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Reservations (Code)  VALUES (21216, 'CAS', '03-OCT-10', '04-OCT-10', 201.25, 'VANNAMAN', 'ERICH', 1, 0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Reservations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Addresses (address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country)  VALUES (15, '266 Feeney Falls', 'West Brandynland', '320', 'Arkansas', 'USA');\nDatabase State:\n- Table: Organizations, Columns: [organization_id, date_formed, organization_name, uk_vat_number]\n- Table: Party_Services, Columns: [booking_id, customer_id, service_id, service_datetime, booking_made_date]\n- Table: Individuals, Columns: [individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name]\n- Table: Party_Addresses, Columns: [party_id, address_id, date_address_from, address_type_code, date_address_to]\n- Table: Services, Columns: [service_id, service_type_code, service_name, service_descriptio]\n- Table: Party_Forms, Columns: [party_id, form_id, date_completion_started, form_status_code, date_fully_completed]\n- Table: Forms, Columns: [form_id, form_type_code, service_id, form_number, form_name, form_description]\n- Table: Organization_Contact_Individuals, Columns: [individual_id, organization_id, date_contact_from, date_contact_to]\n- Table: Parties, Columns: [party_id, payment_method_code, party_phone, party_email]",
        "Response": "Table: Addresses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO film (Film_ID, Title, Studio, Director, Gross_in_dollar)  VALUES (7, '48 Hrs', 'Paramount', 'Walter Hill', 78868508);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: film"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (u_id)  VALUES (7, 'Emily');\nDatabase State:\n- Table: review, Columns: [a_id]\n- Table: item, Columns: [i_id]",
        "Response": "Table: useracct"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO french_suited_playing_cards (label, description, depicts, commons_category, part_of, unicode_character, image, instance_of, follows, followed_by, google_knowledge_graph_id)  VALUES ('five of hearts', 'playing card', 'heart', '5 of Hearts', 'standard 52-card deck', '\ud83c\udcb5', 'Cards-5-Heart.svg', 'playing card', 'four of hearts', 'six of hearts', '/g/121v8gk1');\nDatabase State:\n- Table: french_suited_playing_cards, Columns: [label, description, depicts, commons_category, part_of, unicode_character, image, instance_of, follows, followed_by, google_knowledge_graph_id]\n- Table: follows, Columns: [label, description, image, unicode_character, instance_of, commons_category, follows, followed_by, depicts, part_of, google_knowledge_graph_id]\n- Table: followed_by, Columns: [label, description, image, commons_category, unicode_character, instance_of, follows, followed_by, depicts, part_of, google_knowledge_graph_id]",
        "Response": "Table: french_suited_playing_cards"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, coat_of_arms_image, postal_code, commons_category, coordinate_location, head_of_government, instance_of, freebase_id, located_in_the_administrative_territorial_entity, ine_municipality_code, population, geonames_id, openstreetmap_relation_id, image, elevation_above_sea_level, official_website, office_held_by_head_of_government, area, located_in_time_zone, licence_plate_code, shares_border_with, whos_on_first_id, official_name, male_population, female_population, part_of, inspire_id, factgrid_item_id)  VALUES ('Barrado', 'municipality in province of C\u00e1ceres, Spain', 'Spain', 'Escudo de Barrado (C\u00e1ceres).svg', '10696', 'Barrado', '40.084166666667', 'Juan Jose Paniagua Prieto', 'municipality of Spain', '/m/02z7j9d', 'C\u00e1ceres Province', '10025', 353.0, '6356722', '343070', 'Barrado1.jpg', 804.0, 'http://www.barrado.es', 'mayor of Barrado', 21.28999999999999915, 'UTC+01:00', 'CC', 'Casas del Casta\u00f1ar', '1125768527', 'Barrado', 207.0, 194.0, 'Valle del Jerte', 'ES.IGN.BDDAE.34111010025', 'Q344548');\nDatabase State:\n- Table: jurisdiction, Columns: [label, description, country, coat_of_arms_image, postal_code, commons_category, locator_map_image, coordinate_location, head_of_government, instance_of, freebase_id, located_in_the_administrative_territorial_entity, ine_municipality_code, population, geonames_id, openstreetmap_relation_id, image, viaf_id, elevation_above_sea_level, official_website, office_held_by_head_of_government, area, located_in_time_zone, capital, licence_plate_code, shares_border_with, whos_on_first_id, official_name, male_population, female_population, part_of, inspire_id, factgrid_item_id]\n- Table: head_of_government, Columns: [label, description, instance_of, sex_or_gender, occupation, country_of_citizenship, given_name, work_location, languages_spoken_written_or_signed]",
        "Response": "Table: workplace"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, ncbi_locus_tag, entrez_gene_id, found_in_taxon, subclass_of, encodes, genomic_end, strand_orientation, instance_of, genomic_start)  VALUES ('Mce family protein Mce1D Rv0172', 'microbial gene found in Mycobacterium tuberculosis H37Rv', 'Rv0172', '886807', 'Mycobacterium tuberculosis H37Rv', 'gene', 'Mce family protein Mce1D Rv0172', '204067', 'forward strand', 'gene', '202475');\nDatabase State:\n- Table: virulence_factor_mce_protein, Columns: [label, description, refseq_protein_id, uniprot_protein_id, found_in_taxon, encoded_by, has_parts, part_of, instance_of]\n- Table: encodes, Columns: [label, description, refseq_protein_id, uniprot_protein_id, found_in_taxon, encoded_by, has_parts, part_of, instance_of]\n- Table: encoded_by, Columns: [label, description, ncbi_locus_tag, entrez_gene_id, found_in_taxon, subclass_of, encodes, genomic_end, strand_orientation, instance_of, genomic_start]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Competition_ID, Farm_ID, Rank)  VALUES (1, 3, 3);\nDatabase State:\n- Table: competition_record, Columns: [Competition_ID, Farm_ID, Rank]\n- Table: farm_competition, Columns: [Competition_ID, Year, Theme, Host_city_ID, Hosts]",
        "Response": "Table: competition_record"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Answer (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('1', 2014, 330, 5);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Answer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO district_of_albania (label, description, country, iso_3166_2_code, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, freebase_id, geonames_id, located_in_time_zone, elevation_above_sea_level, area, locator_map_image, inaturalist_place_id)  VALUES ('Puk\u00eb District', 'former geographic subdivision of Albania', 'Albania', 'AL-PU', '42.066666666667', 'Shkod\u00ebr County', 'district of Albania', '/m/02b_4j', '781913', 'UTC+01:00', 826.0, 1034.0, 'Puk\u00eb District.svg', '14047');\nDatabase State:\n- Table: capital_city, Columns: [label, description, twinned_administrative_body, commons_category, country, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, page_banner, freebase_id, dewey_decimal_classification, geonames_id, gnd_id, located_in_time_zone, instance_of, capital_of, viaf_id, musicbrainz_area_id, image, official_website, population, elevation_above_sea_level, postal_code, local_dialing_code, category_of_associated_people, described_by_source, coat_of_arms_image, library_of_congress_authority_id, whos_on_first_id, national_library_of_israel_j9u_id]",
        "Response": "Table: district_of_albania"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO degrees (Year, Campus)  VALUES (1993, 3, 3008);\nDatabase State:\n- Table: degrees, Columns: [Year, Campus]\n- Table: faculty, Columns: [Campus]\n- Table: csu_fees, Columns: [Campus]\n- Table: discipline_enrollments, Columns: [Campus]",
        "Response": "Table: degrees"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderDetailID, OrderID, ProductID, Quantity)  VALUES (496, 10435, 72, 10);\nDatabase State:\n- Table: Shippers, Columns: [ShipperID, ShipperName, Phone]\n- Table: Suppliers, Columns: [SupplierID, SupplierName, ContactName, Address, City, PostalCode, Country, Phone]\n- Table: Employees, Columns: [EmployeeID, LastName, FirstName, BirthDate, Photo, Notes]\n- Table: Products, Columns: [ProductID, ProductName, SupplierID, CategoryID, Unit, Price]\n- Table: Categories, Columns: [CategoryID, CategoryName, Description]\n- Table: Orders, Columns: [OrderID, CustomerID, EmployeeID, OrderDate, ShipperID]",
        "Response": "Table: OrderDetails"
    }
]