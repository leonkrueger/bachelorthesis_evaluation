[
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `given_name` (`label`, `description`, `instance_of`, `said_to_be_the_same_as`, `commons_category`, `native_label`, `writing_system`, `language_of_work_or_name`)  VALUES ('Mikhail', 'male given name (\u041c\u0438\u0445\u0430\u0438\u043b)', 'male given name', 'Michael', 'nan', '\u041c\u0438\u0445\u0430\u0438\u043b', 'Cyrillic script', 'Russian');\nDatabase State:\n- Table: `winner`, Columns: [`label`, `description`, `date_of_birth`, `instance_of`, `place_of_birth`, `occupation`, `freebase_id`, `country_of_citizenship`, `participant_in`, `given_name`, `sport`, `cq_ranking_male_cyclist_id`, `cycling_archives_cyclist_id`, `procyclingstats_cyclist_id`, `member_of_sports_team`, `short_name`, `sex_or_gender`, `country_for_sport`, `height`, `mass`, `languages_spoken_written_or_signed`, `uci_rider_id`]",
        "Response": "Table: `given_name`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `camera_lens` (`id`, `brand`, `name`, `focal_length_mm`, `max_aperture`)  VALUES (10, 'Sigma', 'Sigma 19mm f2.8 EX DN', 19.0, 2.799999999999999823);\nDatabase State:\n- Table: `mountain`, Columns: [`id`, `name`, `Height`, `Prominence`, `Range`, `Country`]\n- Table: `camera_lens`, Columns: [`id`, `brand`, `name`, `focal_length_mm`, `max_aperture`]",
        "Response": "Table: `camera_lens`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (userid, movieid, rating)  VALUES (2761, 2474888, '3');\nDatabase State:\n- Table: `u2base`, Columns: [userid, movieid, rating]\n- Table: `directors`, Columns: [directorid, d_quality, avg_revenue]\n- Table: `movies2directors`, Columns: [movieid, directorid, genre]\n- Table: `movies2actors`, Columns: [movieid, actorid, cast_num]",
        "Response": "Table: `u2base`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Roller_Coaster_ID`, `Name`, `Park`, `Country_ID`, `Length`, `Height`, `Speed`, `Opened`, `Status`)  VALUES (2, 'Dauling Dragon', 'Happy Valley', 1, 3914.0, 105.0, '55', '2012', 'Operating');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `roller_coaster`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `chromosome` (`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`)  VALUES ('Caenorhabditis elegans chromosome V', 'None chromosome', 'NC_003283', 'Caenorhabditis elegans', 'chromosome');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `ensembl_transcript_id`, `homologene_id`, `refseq_rna_id`, `ortholog`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `expressed_in`]\n- Table: `cellular_component`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `synaptobrevin_vesicle_associated_membrane_protein`, Columns: [`label`, `description`, `ensembl_protein_id`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `expressed_in`, Columns: [`label`, `description`, `freebase_id`, `described_by_source`, `uberon_id`, `mesh_descriptor_id`, `instance_of`, `part_of`, `subclass_of`, `microsoft_academic_id`, `mesh_tree_code`, `openalex_id`, `foundational_model_of_anatomy_id`, `jstor_topic_id`, `image`]\n- Table: `encodes`, Columns: [`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `refseq_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `ensembl_protein_id`, `instance_of`, `part_of`]\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]",
        "Response": "Table: `chromosome`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO aircraft (`Aircraft_ID`, `Aircraft`, `Description`, `Max_Gross_Weight`, `Total_disk_area`, `Max_disk_Loading`)  VALUES (4, 'Mil Mi-26', 'Heavy-lift helicopter', '123,500 lb (56,000 kg)', '8,495 ft\u00b2 (789 m\u00b2)', '14.5 lb/ft\u00b2 (71 kg/m\u00b2)');\nDatabase State:\n- Table: airport, Columns: [`Airport_ID`, `Airport_Name`, `Total_Passengers`, `%_Change_2007`, `International_Passengers`, `Domestic_Passengers`, `Transit_Passengers`, `Aircraft_Movements`, `Freight_Metric_Tonnes`]",
        "Response": "Table: aircraft"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`enzyme_id`, `medicine_id`, `interaction_type`)  VALUES (5, 19, 'activitor');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `medicine_enzyme_interaction`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `country`, `coordinate_location`, `instance_of`, `topics_main_category`, `geonames_id`, `located_in_the_administrative_territorial_entity`, `area`, `freebase_id`, `inaturalist_place_id`)  VALUES ('Otjozondjupa Region', 'region of Namibia', 'Namibia', '-20.25', 'region of Namibia', 'Category:Otjozondjupa Region', '3371209.0', 'Namibia', 105185.0, '/m/029l34', '11412.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `rally_poland` (`label`, `description`, `sport`, `instance_of`, `follows`, `followed_by`, `point_in_time`, `country`)  VALUES ('1980 Rally Poland', 'nan', 'rallying', 'Rally Poland', '1979 Rally Poland', '1984 Rally Poland', '+1980-00-00T00:00:00Z', 'Poland');\nDatabase State:\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `sport`, `follows`, `followed_by`, `point_in_time`, `country`]\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `sport`, `follows`, `followed_by`, `point_in_time`, `country`]\n- Table: `rally_poland`, Columns: [`label`, `description`, `sport`, `instance_of`, `follows`, `followed_by`, `point_in_time`, `country`]",
        "Response": "Table: `rally_poland`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `era` (`label`, `description`, `instance_of`, `duration`, `start_time`, `end_time`, `short_name`, `follows`, `followed_by`, `series_ordinal`, `topics_main_template`)  VALUES ('2015-2016 one-year-period', 'period of about one year starting in 2015 and ending in 2016', 'one-year-period overlapping two calendar years', 1.0, '+2015-00-00T00:00:00Z', '+2016-00-00T00:00:00Z', '2015-2016', '2014-2015 one-year-period', '2016-2017 one-year-period', '2015', 'Template:2015\u201316 in Cypriot volleyball');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `era`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Gymnast_ID`, `Floor_Exercise_Points`, `Pommel_Horse_Points`, `Rings_Points`, `Vault_Points`, `Parallel_Bars_Points`, `Horizontal_Bar_Points`, `Total_Points`)  VALUES (7, 9.68699999999999939, 9.67500000000000072, 9.30000000000000072, 9.53700000000000082, 9.72499999999999965, 9.5, 57.42399999999999949);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `gymnast`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `found_in_taxon`, `encodes`, `instance_of`, `strand_orientation`, `genomic_start`, `genomic_end`, `ncbi_locus_tag`)  VALUES ('5''-nucleotidase domain-containing protein Mesci_1888', 'microbial gene found in Mesorhizobium ciceri biovar biserrulae WSM1271', '10117354', 'protein-coding gene', 'Mesorhizobium ciceri biovar biserrulae WSM1271', '5''-nucleotidase domain-containing protein Mesci_1888', 'gene', 'reverse strand', '1971730', '1973760', 'Mesci_1888');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `ncbi_taxonomy_id`, `parent_taxon`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `exact_match`, `subclass_of`, `instance_of`, `has_parts`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO observations (DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, VALUE, UNITS)  VALUES ('2010-12-10', 'bcc6577e-d51a-4071-9f22-ccb45f6db2f3', 'ccd040e1-f477-4bf8-943c-b84ba81be904', '4548-4', 'Hemoglobin A1c/Hemoglobin.total in Blood', 6.599999999999999645, '%');\nDatabase State:\n- Table: patients, Columns: [patient, birthdate, deathdate, ssn, drivers, passport, prefix, first, last, suffix, maiden, marital, race, ethnicity, gender, birthplace, address]\n- Table: `claims`, Columns: [ID, PATIENT, BILLABLEPERIOD, ORGANIZATION, ENCOUNTER, DIAGNOSIS, TOTAL]",
        "Response": "Table: observations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, `text`, LocationID, UserID)  VALUES ('tw-707299812664717312', 'Tuesday', 13, 8, 'en', 'FALSE', 108, 0, 0, 33, 0.0, '#Hyperglance Provides AWS #OpenStack Infrastructure View in One Tab https://awsinsider.net/articles/2016/03/07/hyperglance-topology-view.aspx', 3778, 'tw-3145393748');\nDatabase State:\n- Table: location, Columns: [LocationID, Country, State, StateCode, City]\n- Table: user, Columns: [UserID, Gender]",
        "Response": "Table: twitter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (rid, dst_apid)  VALUES (19390, 3370, 'CA', 6390, 'WX', 1767, 'CZ', NULL);\nDatabase State:\n- Table: routes, Columns: [rid, dst_apid]\n- Table: airlines, Columns: [alid]",
        "Response": "Table: routes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `vidde_vidd` (`label`, `description`, `coordinate_location`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `ssr_place_name_number`, `native_label`)  VALUES ('G\u00e1mehiseana', 'place in Karasjok, Troms og Finnmark, Norway', '69.35496', 'Norway', 'vidde / vidd', 'Karasjok', '443005.0', 'G\u00e1mehiseana');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `vidde_vidd`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `copi_mediated_anterograde_transport` (`label`, `description`, `reactome_id`, `found_in_taxon`, `instance_of`, `cites_work`, `part_of`, `exact_match`, `has_parts`)  VALUES ('ERGIC-to-Golgi vesicles bind dynein:dynactin', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-6809003)', 'R-HSA-6809003', 'Homo sapiens', 'biological process', 'beta III spectrin binds to the Arp1 subunit of dynactin', 'COPI-mediated anterograde transport', 'https://identifiers.org/reactome:R-HSA-6809003', 'Dynein:Dynactin:microtubule [cytosol]');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `copi_mediated_anterograde_transport`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross)  VALUES ('Frankenweenie', 'Oct 5, 2012', 'Comedy', 'PG', '$35,287,788', '$37,363,513');\nDatabase State:\n- Table: `voice-actors`, Columns: [character, `voice-actor`, movie]\n- Table: characters, Columns: [movie_title, release_date, hero, villian, song]\n- Table: director, Columns: [name, director]",
        "Response": "Table: movies_total_gross"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO artwork (`Artwork_ID`, `Type`, `Name`)  VALUES (1, 'Program Music/Variety Show', 'Indonesian Idol');\nDatabase State:\n- Table: nomination, Columns: [`Artwork_ID`, `Festival_ID`, `Result`]\n- Table: `festival_detail`, Columns: [`Festival_ID`, `Festival_Name`, `Chair_Name`, `Location`, `Year`, `Num_of_Audience`]\n- Table: artwork, Columns: [`Artwork_ID`, `Type`, `Name`]",
        "Response": "Table: artwork"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Region_id, Region_code, Region_name)  VALUES (9, 'AG', 'Antigua and Barbuda');\nDatabase State:\n- Table: `region`, Columns: [Region_id, Region_code, Region_name]",
        "Response": "Table: `region`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`County_ID`, `Name`, `Population`, `Police_officers`, `Residents_per_officer`, `Case_burden`, `Crime_rate`, `Police_force`, `Location`)  VALUES (1, 'Abbotsford', 128165, 187, 685, 81, 118.0, 'Abbotsford Police Department', 'East');\nDatabase State:\n- Table: `city`, Columns: [`City_ID`, `County_ID`, `Name`, `White`, `Black`, `Amerindian`, `Asian`, `Multiracial`, `Hispanic`]\n- Table: `county_public_safety`, Columns: [`County_ID`, `Name`, `Population`, `Police_officers`, `Residents_per_officer`, `Case_burden`, `Crime_rate`, `Police_force`, `Location`]",
        "Response": "Table: `county_public_safety`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (p_id, p_id_dummy)  VALUES (429, 335);\nDatabase State:\n- Table: taughtBy, Columns: [course_id, p_id]\n- Table: person, Columns: [p_id, professor, student, hasPosition, inPhase, yearsInProgram]\n- Table: `advisedBy`, Columns: [p_id, p_id_dummy]",
        "Response": "Table: `advisedBy`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, VALUE, UNITS)  VALUES ('2016-10-26', '58ac67e1-76c3-4b4a-b98b-5a4dfa60a393', '6012a075-5cb5-40c4-8a87-43dd53ab0fa0', '8462-4', 'Diastolic Blood Pressure', 80.0, 'mmHg');\nDatabase State:\n- Table: careplans, Columns: [ID, START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]",
        "Response": "Table: observations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (REFID, REF_DATE, RESPONSE)  VALUES (90653, '2007-07-01 12:00:00.0', 'false');\nDatabase State:\n- Table: Demog, Columns: [GEOID, INHABITANTS_K, INCOME_K, A_VAR1, A_VAR2, A_VAR3, A_VAR4, A_VAR5, A_VAR6, A_VAR7, A_VAR8, A_VAR9, A_VAR10, A_VAR11, A_VAR12, A_VAR13, A_VAR14, A_VAR15, A_VAR16, A_VAR17, A_VAR18]\n- Table: `Sales`, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]\n- Table: `Mailings1_2`, Columns: [REFID, REF_DATE, RESPONSE]\n- Table: `Customers`, Columns: [ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age]\n- Table: mailings3, Columns: [REFID, REF_DATE, RESPONSE]",
        "Response": "Table: mailings3"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, category, person, role, credited)  VALUES ('S20-E2', 'Cast', 'Pamela Hayden', 'Jimbo Jones', 'true');\nDatabase State:\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Character_Award, Columns: [award_id, character]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (address_id, line_1_number_building, city, zip_postcode, state_province_county, country)  VALUES (10, '2291 Larkin Ports', 'South Richieport', '95098', 'Idaho', 'USA');\nDatabase State:\n- Table: Customer_Payments, Columns: [customer_id, datetime_payment, payment_method_code, amount_payment]\n- Table: Customers, Columns: [customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number, cell_mobile_phone_number]\n- Table: Vehicles, Columns: [vehicle_id, vehicle_details]\n- Table: Lessons, Columns: [lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price]\n- Table: Addresses, Columns: [address_id, line_1_number_building, city, zip_postcode, state_province_county, country]",
        "Response": "Table: Addresses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (character, `voice-actor`, movie)  VALUES ('Mildred', 'Angela Bassett', 'Meet the Robinsons');\nDatabase State:\n- Table: movies_total_gross, Columns: [movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross]\n- Table: `voice-actors`, Columns: [character, `voice-actor`, movie]\n- Table: characters, Columns: [movie_title, release_date, hero, villian, song]",
        "Response": "Table: `voice-actors`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `cinema` (`Cinema_ID`, `Name`, `Openning_year`, `Capacity`, `Location`)  VALUES (2, 'Carrowleagh', 2012, 368, 'County Cork');\nDatabase State:\n- Table: `schedule`, Columns: [`Cinema_ID`, `Film_ID`, `Date`, `Show_times_per_day`, `Price`]\n- Table: `cinema`, Columns: [`Cinema_ID`, `Name`, `Openning_year`, `Capacity`, `Location`]\n- Table: `film`, Columns: [`Film_ID`, `Rank_in_series`, `Number_in_season`, `Title`, `Directed_by`, `Original_air_date`, `Production_code`]",
        "Response": "Table: `cinema`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (locationID, locationcity, address, state, zipcode, officephone)  VALUES (6, 'Denver', '312 Mount View Dr', 'CO', 54657, '(205)607-5289');\nDatabase State:\n- Table: employee, Columns: [ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID]\n- Table: position, Columns: [positionID, positiontitle, educationrequired, minsalary, maxsalary]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `instance_of`, `atomic_number`, `neutron_number`, `mass`, `mass_excess`, `binding_energy`, `wolfram_language_entity_code`, `decays_to`, `half_life`)  VALUES ('samarium-153', 'isotope of samarium', 'samarium', 'isotope of samarium', 62.0, 91.0, 152.9221039690000055, -72559.68600000000151, 1258965.702000000048, 'Entity[\"Isotope\", \"Samarium153\"]', 'europium-153', 46.28399999999999892);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `decays_to`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `region_of_somalia` (`label`, `description`, `country`, `iso_3166_2_code`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `instance_of`, `freebase_id`, `fips_10_4_countries_and_regions`, `geonames_id`, `getty_thesaurus_of_geographic_names_id`, `commons_category`, `locator_map_image`, `capital`, `whos_on_first_id`, `geoshape`, `inaturalist_place_id`)  VALUES ('Lower Juba', 'region of Somalia', 'Somalia', 'SO-JH', '0.43333333333333', 'Jubaland', 'Category:Lower Juba', 'region of Somalia', '/m/01996y', 'SO09', '56083', '1001687', 'Lower Juba Region', 'Jubbada Hoose, Somalia.svg', 'Kismayo', '85677287', 'Data:Somalia/Jubbada Hoose.map', '11923');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `freebase_id`, `locator_map_image`, `capital`, `commons_category`, `inaturalist_place_id`, `coordinate_location`, `topics_main_category`, `fips_10_4_countries_and_regions`, `geonames_id`, `getty_thesaurus_of_geographic_names_id`, `whos_on_first_id`, `geoshape`]",
        "Response": "Table: `region_of_somalia`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO status (station_id, bikes_available, docks_available, time)  VALUES (75, 12, 7, '2015-06-02 14:24:02');\nDatabase State:\n- Table: trip, Columns: [id, duration, start_date, start_station_name, end_date, end_station_name, bike_id, subscription_type, zip_code]\n- Table: station, Columns: [id, name, lat, long, dock_count, city, installation_date]\n- Table: status, Columns: [station_id, bikes_available, docks_available, time]",
        "Response": "Table: status"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO matchs (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('EC', '2018-04-02', 'Hartlepool', 'Guiseley', 0, 1, 'A', 2018);\nDatabase State:\n- Table: divisions, Columns: [division, name, country]\n- Table: matchs, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `railway` (`Railway_ID`, `Railway`, `Builder`, `Built`, `Wheels`, `Location`, `ObjectNumber`)  VALUES (4, 'GWRS', 'GWR Swindon', '1903', '4-4-0', 'Toddington', '1978-7025');\nDatabase State:\n- Table: `manager`, Columns: [`Manager_ID`, `Name`, `Country`, `Working_year_starts`, `Age`, `Level`]\n- Table: `railway`, Columns: [`Railway_ID`, `Railway`, `Builder`, `Built`, `Wheels`, `Location`, `ObjectNumber`]\n- Table: `railway_manage`, Columns: [`Railway_ID`, `Manager_ID`, `From_Year`]\n- Table: `train`, Columns: [`Train_ID`, `Train_Num`, `Name`, `From`, `Arrival`, `Railway_ID`]",
        "Response": "Table: `railway`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `book` (`Book_ID`, `Title`, `Issues`, `Writer`)  VALUES (6, 'Dead Corps', 4.0, 'Christopher Hinz');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `book`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `mid_size_car` (`label`, `description`, `manufacturer`, `commons_category`, `instance_of`, `image`, `brand`, `subclass_of`)  VALUES ('Mitsubishi Galant', 'nan', 'Mitsubishi Motors', 'Mitsubishi Galant (7th generation)', 'automobile model', 'Mitsubishi Galant front 20071126.jpg', 'nan', 'mid-size car');\nDatabase State:\n- Table: `headquarters`, Columns: [`label`, `description`, `topics_main_category`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `commons_category`, `image`, `locator_map_image`, `postal_code`, `coordinate_location`, `page_banner`, `musicbrainz_area_id`, `freebase_id`, `gnd_id`, `library_of_congress_authority_id`, `viaf_id`, `geonames_id`, `category_of_associated_people`, `located_in_time_zone`, `official_website`, `population`, `elevation_above_sea_level`, `quora_topic_id`, `area`, `archinform_location_id`, `gran_enciclop\u00e8dia_catalana_id`, `whos_on_first_id`, `worldcat_identities_id`]\n- Table: `brand`, Columns: [`label`, `description`, `commons_category`, `instance_of`, `topics_main_category`, `freebase_id`, `inception`, `industry`, `owned_by`, `logo_image`, `product_or_material_produced`, `official_website`, `store_norske_leksikon_id`, `headquarters_location`, `image`, `country`]",
        "Response": "Table: `mid_size_car`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (premise_id, premises_type, premise_details)  VALUES (2, 'Warehouse', '676 Kelly Spur');\nDatabase State:\n- Table: Premises, Columns: [premise_id, premises_type, premise_details]\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password]",
        "Response": "Table: Premises"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (rID)  VALUES (205, 103, 3, '2011-01-27');\nDatabase State:\n- Table: Rating, Columns: [rID]\n- Table: Reviewer, Columns: [rID]",
        "Response": "Table: Rating"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate)  VALUES ('Aj ei akash', 'Topu', 'India', 6, 'modern', 10, 'bangla', '27-MAR-2004', 320);\nDatabase State:\n- Table: files, Columns: [f_id, artist_name, file_size, duration, formats]\n- Table: genre, Columns: [g_name, rating, most_popular_in]",
        "Response": "Table: song"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('PTS system transporter subunit IIC EF0834', 'microbial protein found in Enterococcus faecalis V583', 'Q837K3', 'Enterococcus faecalis V583', 'PTS system transporter subunit IIC EF0834', 'carbohydrate transport', 'protein-N(PI)-phosphohistidine-sugar phosphotransferase activity', 'plasma membrane', 'Phosphotransferase system, EIIC component, type 3', 'protein', 'NP_814576', 'Phosphotransferase system, cellobiose-type IIC component');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `ncbi_locus_tag`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `phosphotransferase_system_cellobiose_type_iic_component`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `genbank_assembly_accession_number`, `gram_staining`]",
        "Response": "Table: `phosphotransferase_system_cellobiose_type_iic_component`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Enterobacter aerogenes KCTC 2190', 'bacterial strain', 'strain', 'Enterobacter aerogenes KCTC 2190', 'Klebsiella aerogenes', '1028307', 'Gram-negative bacteria', 'GCA_000215745.1');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`, `has_parts`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `paragraphs` (id, ParagraphNum, PlainText, character_id, chapter_id)  VALUES (663102, 113, replace('I do not care whether you do or no. She''s a fool to\\nstay behind her father; let her to the Greeks; and so\\nI''ll tell her the next time I see her: for my part,\\nI''ll meddle nor make no more i'' the matter.','\\n',char(10)), 858, 19588);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `paragraphs`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Code, Name, Cost)  VALUES (2, 'Obtuse Pyloric Recombobulation', 3750.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Procedures"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, score, date, type)  VALUES (21429, 96, '2015-01-30', 'Routine - Unscheduled');\nDatabase State:\n- Table: violations, Columns: [business_id, date, violation_type_id, risk_category, description]\n- Table: businesses, Columns: [business_id, name, address, city, postal_code, latitude, longitude, phone_number, tax_code, business_certificate, application_date, owner_name, owner_address, owner_city, owner_state, owner_zip]",
        "Response": "Table: inspections"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `follows` (`label`, `description`, `instance_of`, `country`, `point_in_time`, `sport`, `followed_by`, `google_knowledge_graph_id`, `follows`)  VALUES ('Norwegian Boxing Championships 1959', 'nan', 'Norwegian Boxing Championships', 'Norway', '+1959-01-01T00:00:00Z', 'boxing', 'Norwegian Boxing Championships 1960', '/g/11h_9xs1jg', 'Norwegian Boxing Championships 1958');\nDatabase State:\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `country`, `point_in_time`, `sport`, `followed_by`, `google_knowledge_graph_id`, `follows`]\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `country`, `point_in_time`, `sport`, `follows`, `followed_by`, `google_knowledge_graph_id`]\n- Table: `norwegian_boxing_championships`, Columns: [`label`, `description`, `country`, `instance_of`, `point_in_time`, `sport`, `follows`, `followed_by`, `google_knowledge_graph_id`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `flights` (Airline)  VALUES (8, 1086, ' EDF', ' AFO');\nDatabase State:\n- Table: `airlines`, Columns: [uid]",
        "Response": "Table: `flights`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit)  VALUES (9494, 'US-2018-101840', '2018-02-06', '2018-02-12', 'Standard Class', 'SP-20545', 'East', 'TEC-PH-10002538', 227.4600000000000079, 6, 0.0, 65.96339999999999292);\nDatabase State:\n- Table: people, Columns: [`Customer ID`, `Customer Name`, Segment, Country, City, State, `Postal Code`, Region]\n- Table: east_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]\n- Table: west_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]\n- Table: south_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]\n- Table: central_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]",
        "Response": "Table: east_superstore"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `part` (`label`, `description`, `part_of`, `instance_of`, `reactome_id`, `found_in_taxon`, `exact_match`, `has_parts`)  VALUES ('SDC2 multimerises', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-4093342)', 'EPHB-mediated forward signaling', 'biological process', 'R-HSA-4093342', 'Homo sapiens', 'https://identifiers.org/reactome:R-HSA-4093342', 'p-Y179,Y191-SDC2 [plasma membrane]');\nDatabase State:\n- Table: `syndecan_2`, Columns: [`label`, `description`, `found_in_taxon`, `subclass_of`, `reactome_id`, `exact_match`, `part_of`]",
        "Response": "Table: `part`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (rid, dst_apid)  VALUES (35330, 3905, 'PGK', 3904, 'TJQ', 3290, 'JT', 'Y');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: routes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `musical` (`Musical_ID`, `Name`, `Year`, `Award`, `Category`, `Nominee`, `Result`)  VALUES (1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated');\nDatabase State:\n- Table: `musical`, Columns: [`Musical_ID`, `Name`, `Year`, `Award`, `Category`, `Nominee`, `Result`]",
        "Response": "Table: `musical`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Crime (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11295301, 'JB237318', '4/25/2018 11:15', '076XX S CICERO AVE', '860', 'DEPARTMENT STORE', 'TRUE', 'FALSE', 833, 8, 13, 65, '6', '41.75459296', '-87.74152854');\nDatabase State:\n- Table: IUCR, Columns: [iucr_no, primary_description, secondary_description, index_code]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Apartments (apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count)  VALUES (8, 153, 'Flat', 'Suite 693', 2, 3, '9');\nDatabase State:\n- Table: Apartments, Columns: [apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count]\n- Table: View_Unit_Status, Columns: [apt_id, apt_booking_id, status_date, available_yn]\n- Table: Apartment_Facilities, Columns: [apt_id, facility_code]\n- Table: Guests, Columns: [guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth]\n- Table: Apartment_Buildings, Columns: [building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone]",
        "Response": "Table: Apartments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `official_website`, `instance_of`, `country`, `commons_category`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `topics_main_category`, `freebase_id`, `geonames_id`, `gnd_id`, `viaf_id`, `elevation_above_sea_level`, `image`, `population`, `locator_map_image`, `located_in_time_zone`, `area`, `whos_on_first_id`, `openstreetmap_relation_id`, `head_of_government`, `factgrid_item_id`, `coat_of_arms_image`)  VALUES ('Hopferau', 'municipality of Germany', 'https://www.hopferau.de/', 'non-urban municipality of Germany', 'Germany', 'Hopferau', 'Ostallg\u00e4u', '47.616666666667', 'Category:Hopferau', '/m/02q64d7', '6557214', '4647388-9', '236123372.0', 811.0, 'Hopferau - Heimen n\u00f6 - Heimen v NO.JPG', 1251.0, 'Hopferau in OAL.svg', 'UTC+01:00', 13.15000000000000035, '101788943.0', '448304.0', 'Rudolf Achatz', 'Q86553', 'Wappen Hopferau.svg');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `official_website`, `instance_of`, `country`, `commons_category`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `topics_main_category`, `freebase_id`, `geonames_id`, `gnd_id`, `viaf_id`, `elevation_above_sea_level`, `image`, `population`, `locator_map_image`, `located_in_time_zone`, `area`, `whos_on_first_id`, `openstreetmap_relation_id`, `head_of_government`, `factgrid_item_id`, `coat_of_arms_image`]\n- Table: `drumlin`, Columns: [`label`, `description`, `instance_of`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `people` (`People_ID`, `Name`, `Height`, `Weight`, `Birth_Date`, `Birth_Place`)  VALUES (6, 'Jake Gardiner', 205.0, 92.0, 'July 4, 1990', 'Minnetonka, Minnesota');\nDatabase State:\n- Table: `body_builder`, Columns: [`Body_Builder_ID`, `People_ID`, `Snatch`, `Clean_Jerk`, `Total`]\n- Table: `people`, Columns: [`People_ID`, `Name`, `Height`, `Weight`, `Birth_Date`, `Birth_Place`]",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO characters (MovieID, ActorID, `Character Name`, creditOrder, pay, screentime)  VALUES (243, 779, 'Dr. Rosen', 4, NULL, NULL);\nDatabase State:\n- Table: movie, Columns: [MovieID, Title, `MPAA Rating`, Budget, Gross, `Release Date`, Genre, Runtime, Rating, `Rating Count`, Summary]",
        "Response": "Table: characters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`District_ID`, `District_name`, `Headquartered_City`, `City_Population`, `City_Area`)  VALUES (9, 'Gujranwala District', 'Gujranwala City', 1526168.0, 75.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `district`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `crossing` (`label`, `description`, `instance_of`, `country`, `commons_category`, `gnd_id`, `topics_main_category`, `freebase_id`, `geonames_id`, `image`, `coordinate_location`, `described_by_source`, `great_russian_encyclopedia_online_id`, `on_focus_list_of_wikimedia_project`, `store_norske_leksikon_id`, `viaf_id`, `gran_enciclop\u00e8dia_catalana_id`, `encyclop\u00e6dia_britannica_online_id`, `den_store_danske_id`, `online_pwn_encyclopedia_id`)  VALUES ('Caspian Sea', 'lake between Europe and Asia', 'endorheic lake', 'Iran', 'Caspian Sea', '4110033-5', 'Category:Caspian Sea', '/m/01mlk', '630671', 'ISS056-E-13641 - View of Azerbaijan.jpg', '42.0', 'Armenian Soviet Encyclopedia', '2050560.0', 'Wikipedia:List of articles all languages should have', 'Det_kaspiske_hav', '235067119', '15808.0', 'place/Caspian-Sea', 'Det_Kaspiske_Hav', '3920928');\nDatabase State:\n- Table: `train_ferry_route`, Columns: [`label`, `description`, `country`, `instance_of`, `crosses`, `state_of_use`]\n- Table: `language_proficiency`, Columns: [`label`, `description`, `great_russian_encyclopedia_online_id`, `glottolog_code`, `art_architecture_thesaurus_id`, `psh_id`, `iso_639_2_code`, `topics_main_category`, `ndl_authority_id`, `gnd_id`, `linguistic_typology`, `unesco_thesaurus_id`, `language_regulatory_body`, `number_of_speakers_writers_or_signers`, `ietf_language_tag`, `encyclop\u00e6dia_britannica_online_id`, `category_for_films_in_this_language`, `has_grammatical_gender`, `page_banner`, `iso_639_3_code`, `quora_topic_id`, `omegawiki_defined_meaning`, `country`, `native_label`, `iso_639_1_code`, `wals_lect_code`, `commons_category`, `gost_77597_code`, `instance_of`, `has_grammatical_mood`, `short_name`, `writing_system`, `has_tense`, `has_grammatical_case`, `freebase_id`, `subclass_of`, `distribution_map`, `wikimedia_language_code`, `iab_code`, `bncf_thesaurus_id`, `ethnologuecom_language_code`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `ethnologue_language_status`, `abs_ascl_2011_code`, `indigenous_to`, `australian_educational_vocabulary_id`, `described_by_source`, `exact_match`, `related_category`, `french_vikidia_id`, `yso_id`, `kbpedia_id`, `twitch_tag_id`, `github_topic`, `library_of_congress_authority_id`, `biblioth\u00e8que_nationale_de_france_id`, `store_norske_leksikon_id`, `posix_locale_identifier`, `krugosvet_article`, `national_library_of_israel_j9u_id`, `open_library_subject_id`, `lingua_libre_id`, `den_store_danske_id`, `wordnet_31_synset_id`, `nkcr_aut_id`, `online_pwn_encyclopedia_id`, `uk_archival_thesaurus_id`, `eu_knowledge_graph_item_id`, `entry_in_abbreviations_table`, `on_focus_list_of_wikimedia_project`, `image`, `babelnet_id`, `studied_by`, `zhihu_topic_id`, `openalex_id`, `encyclopedia_of_china_third_edition_id`]\n- Table: `part`, Columns: [`label`, `description`, `instance_of`, `commons_category`, `locator_map_image`, `coordinate_location`, `topics_main_category`, `viaf_id`, `freebase_id`, `quora_topic_id`, `different_from`, `worldcat_identities_id`, `part_of`, `has_parts`, `nkcr_aut_id`]",
        "Response": "Table: `crossing`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `part_of`, `follows`, `followed_by`, `topics_main_category`, `point_in_time`, `commons_category`, `has_list`)  VALUES ('460', 'year', 'year', '460s', '459', '461', 'Category:460', '+0460-01-01T00:00:00Z', '460', 'list of state leaders in 460');\nDatabase State:\n- Table: `follows`, Columns: [`label`, `description`, `commons_category`, `instance_of`, `part_of`, `follows`, `followed_by`, `topics_main_category`, `point_in_time`, `has_list`]\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `part_of`, `follows`, `followed_by`, `topics_main_category`, `point_in_time`, `commons_category`, `has_list`]\n- Table: `450s`, Columns: [`label`, `description`, `instance_of`, `part_of`, `follows`, `followed_by`, `commons_category`, `topics_main_category`, `point_in_time`, `has_list`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customer_Contact_Channels (customer_id, channel_code, active_from_date, active_to_date, contact_number)  VALUES (14, 'Cell', '2017-10-17 11:46:37', '2018-03-08 20:07:20', '846.043.4809x0426');\nDatabase State:\n- Table: Products, Columns: [product_id, product_details]\n- Table: Customer_Contact_Channels, Columns: [customer_id, channel_code, active_from_date, active_to_date, contact_number]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status, order_date, order_details]\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, date_became_customer, other_customer_details]\n- Table: Order_Items, Columns: [order_id, product_id, order_quantity]",
        "Response": "Table: Customer_Contact_Channels"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Products (product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price)  VALUES (119, 8, 'Hardware', '1994-12-18 15:13:19', '1997-07-02 18:26:16', 'Keyboard', 'Designed for games', 109.9899999999999949);\nDatabase State:\n- Table: Customers, Columns: [customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, `+/-`, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, `Post+/-`, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG)  VALUES ('metcasc01', 1987, 2, 'BUF', 'NHL', 'L', 1, 0, 1, 1, 0, '-1', '0', '0', '0', '0', '0', '0', '1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: HOF, Columns: [year, hofID, name, category]",
        "Response": "Table: Scoring"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`name`, `month`)  VALUES ('student502', 2);\nDatabase State:\n- Table: enrolled, Columns: [name, school, month]\n- Table: unemployed, Columns: [`name`]\n- Table: person, Columns: [`name`]\n- Table: male, Columns: [`name`]",
        "Response": "Table: longest_absense_from_school"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `instance_of`, `capital`, `area`, `indian_census_area_code_2011`, `population`, `male_population`, `female_population`, `number_of_households`, `urban_population`, `rural_population`)  VALUES ('Belgaum division', 'administrative division of karnataka, India', 'Karnataka', 'India', '15.85', 'division of India', 'nan', NULL, 'nan', NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `instance_of`, `capital`, `area`, `indian_census_area_code_2011`, `population`, `male_population`, `female_population`, `number_of_households`, `urban_population`, `rural_population`]\n- Table: `administrative_centre`, Columns: [`label`, `description`, `capital`, `instance_of`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `located_in_time_zone`, `area`, `indian_census_area_code_2011`, `population`, `male_population`, `female_population`, `number_of_households`, `urban_population`, `rural_population`]\n- Table: `capital_city`, Columns: [`label`, `description`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `freebase_id`, `instance_of`, `geonames_id`, `capital_of`, `elevation_above_sea_level`, `postal_code`, `local_dialing_code`, `area`, `whos_on_first_id`, `located_in_time_zone`, `population`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (inspection_id, point_id, fine, inspector_comment)  VALUES (277916, 41, 100, 'All parts of the food establishment and all parts of the property used in connection with the operation of the establishment shall be kept neat and clean and should not produce any offensive odors.  ORGANIZE REAR STORAGE AREAS TO PREVENT PEST HARBORAGE.');\nDatabase State:\n- Table: employee, Columns: [employee_id, first_name, last_name, address, city, state, zip, phone, title, salary, supervisor]\n- Table: inspection_point, Columns: [point_id, Description, category, code, fine, point_level]",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Faculty (FacID, Lname, Fname, Rank, Sex, Phone, Room, Building)  VALUES (1193, 'Jones', 'Stacey', 'Instructor', 'F', 3550, '224', 'NEB');\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Faculty"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `commons_category`, `coordinate_location`, `topics_main_category`, `official_website`, `instance_of`, `ndl_authority_id`, `freebase_id`, `population`, `geonames_id`, `viaf_id`, `area`, `located_in_time_zone`, `locator_map_image`, `image`, `geonlp_id`, `located_in_the_administrative_territorial_entity`, `worldcat_identities_id`)  VALUES ('Miyako Island', 'island in Okinawa, Japan', 'Japan', 'Miyakojima', '24.779444444444444', 'nan', 'nan', 'island', '632112.0', '/m/0421j0', 47825.0, '1856779.0', '256971299.0', 158.8700000000000045, 'nan', 'nan', 'Yonahamaehama Miyakojima Okinawa Japan06s3s4592.jpg', 'nan', 'Miyakojima', 'viaf-256971299');\nDatabase State:\n- Table: `traditional_craft_designated_by_the_minister_of_economy_trade_and_industry_in_japan`, Columns: [`label`, `description`, `instance_of`, `country_of_origin`, `location_of_creation`]",
        "Response": "Table: `location_of_creation`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `coordinate_location`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `shares_border_with`, `official_website`, `capital`, `locator_map_image`, `head_of_government`, `archinform_location_id`, `inaturalist_place_id`, `whos_on_first_id`, `area`, `population`)  VALUES ('Somme', 'French department', 'Hauts-de-France', 'Somme (department)', 'France', '49.883333333333', 'Category:Somme (department)', 'department of France', '/m/0l178', '2974304.0', 'Aisne', 'http://www.somme.pref.gouv.fr/', 'Amiens', 'Somme-Position.svg', 'Daniel Dubois', '2764.0', '30212.0', '85683363.0', 6170.0, 570559.0);\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `coordinate_location`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `shares_border_with`, `official_website`, `capital`, `locator_map_image`, `head_of_government`, `archinform_location_id`, `inaturalist_place_id`, `whos_on_first_id`, `area`, `population`]\n- Table: `part`, Columns: [`label`, `description`, `commons_category`, `topics_main_category`, `freebase_id`, `gnd_id`, `viaf_id`, `instance_of`, `quora_topic_id`, `has_parts`, `coordinate_location`, `locator_map_image`]\n- Table: `capital_city`, Columns: [`label`, `description`, `country`, `commons_category`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `topics_main_category`, `freebase_id`, `instance_of`, `geonames_id`, `official_website`, `image`, `capital_of`, `viaf_id`, `postal_code`, `population`, `area`, `library_of_congress_authority_id`, `whos_on_first_id`, `worldcat_identities_id`, `different_from`, `national_library_of_israel_j9u_id`]\n- Table: `badminton_club`, Columns: [`label`, `description`, `instance_of`, `sport`, `country`]\n- Table: `head_of_state`, Columns: [`label`, `description`, `commons_category`, `viaf_id`, `isni`, `library_of_congress_authority_id`, `gnd_id`, `country_of_citizenship`, `image`, `place_of_birth`, `date_of_birth`, `occupation`, `position_held`, `educated_at`, `instance_of`, `freebase_id`, `munzinger_person_id`, `languages_spoken_written_or_signed`, `given_name`, `native_language`, `award_received`, `signature`, `family_name`, `name_in_native_language`, `sex_or_gender`, `worldcat_identities_id`, `opensanctions_id`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `results` (`resultId`, `raceId`, `driverId`, `constructorId`, `number`, `grid`, `position`, `positionText`, `positionOrder`, `points`, `laps`, `time`, `milliseconds`, `fastestLap`, `rank`, `fastestLapTime`, `fastestLapSpeed`, `statusId`)  VALUES (6318, 299, 119, 3, 6, 1, '', 'R', 13, 0.0, '55', '', '', '', '', '', '', 5);\nDatabase State:\n- Table: `lapTimes`, Columns: [`raceId`, `driverId`, `lap`, `position`, `time`, `milliseconds`]\n- Table: `results`, Columns: [`resultId`, `raceId`, `driverId`, `constructorId`, `number`, `grid`, `position`, `positionText`, `positionOrder`, `points`, `laps`, `time`, `milliseconds`, `fastestLap`, `rank`, `fastestLapTime`, `fastestLapSpeed`, `statusId`]\n- Table: `drivers`, Columns: [`driverId`, `driverRef`, `number`, `code`, `forename`, `surname`, `dob`, `nationality`, `url`]\n- Table: `qualifying`, Columns: [`qualifyId`, `raceId`, `driverId`, `constructorId`, `number`, `position`, `q1`, `q2`, `q3`]\n- Table: `constructorResults`, Columns: [`constructorResultsId`, `raceId`, `constructorId`, `points`, `status`]",
        "Response": "Table: `results`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11520194, 'JB434828', '9/14/2018 9:45', '004XX S KEDZIE AVE', '2014', 'PARKING LOT/GARAGE(NON.RESID.)', 'TRUE', 'FALSE', 1134, 11, 28, 27, '18', NULL, NULL);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (region_id, game_platform_id, num_sales)  VALUES (3, 15429, 0.0);\nDatabase State:\n- Table: region_sales, Columns: [region_id, game_platform_id, num_sales]\n- Table: region, Columns: [id, region_name]\n- Table: game_platform, Columns: [id, game_publisher_id, platform_id, release_year]",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `followed_by` (`label`, `description`, `instance_of`, `sport`, `follows`, `followed_by`, `edition_number`, `point_in_time`, `general_classification_of_race_participants`, `winner`, `country`, `start_point`, `destination_point`, `google_knowledge_graph_id`, `cycling_archives_race_id`)  VALUES ('2013 Grand Prix de Denain', 'cycling race', 'Grand Prix de Denain', 'road bicycle racing', '2012 Grand Prix de Denain', '2014 Grand Prix de Denain', '55', '+2013-04-11T00:00:00Z', 'Bryan Coquard', 'Arnaud D\u00e9mare', 'France', 'Denain', 'Denain', '/g/1203lwwnp', 'nan');\nDatabase State:\n- Table: `event`, Columns: [`label`, `description`, `topics_main_category`, `official_website`, `has_parts`, `instance_of`, `follows`, `edition_number`, `followed_by`]\n- Table: `winner`, Columns: [`label`, `description`, `sex_or_gender`, `date_of_birth`, `instance_of`, `country_of_citizenship`, `occupation`, `participant_in`, `given_name`, `sport`, `cycling_archives_cyclist_id`, `place_of_birth`, `procyclingstats_cyclist_id`, `member_of_sports_team`]\n- Table: `grand_prix_de_denain`, Columns: [`label`, `description`, `instance_of`, `sport`, `followed_by`, `country`, `edition_number`, `point_in_time`, `general_classification_of_race_participants`, `winner`, `follows`, `start_point`, `destination_point`, `google_knowledge_graph_id`, `cycling_archives_race_id`]\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `sport`, `follows`, `followed_by`, `edition_number`, `point_in_time`, `general_classification_of_race_participants`, `winner`, `country`, `start_point`, `destination_point`, `google_knowledge_graph_id`, `cycling_archives_race_id`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Addresses (address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details)  VALUES (9, '9168 King Rest', 'Felicityfort', '482', 'Texas', 'USA', NULL);\nDatabase State:\n- Table: Addresses, Columns: [address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status, order_date, order_details]\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, date_became_customer, other_customer_details]\n- Table: Products, Columns: [product_id, product_details]\n- Table: Order_Items, Columns: [order_id, product_id, order_quantity]\n- Table: Customer_Addresses, Columns: [customer_id, address_id, date_address_from, address_type, date_address_to]\n- Table: Customer_Contact_Channels, Columns: [customer_id, channel_code, active_from_date, active_to_date, contact_number]",
        "Response": "Table: Addresses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `monothiol_glutaredoxin_related` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `instance_of`, `part_of`)  VALUES ('Hypothetical protein tll1582', 'microbial protein found in Thermosynechococcus elongatus BP-1', 'hypothetical protein tll1582', 'Q8DIK3', 'nan', 'nan', 'nan', 'Thermosynechococcus elongatus BP-1', 'protein', 'GIY-YIG endonuclease superfamily');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `commons_category`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `image`, `catalogue_of_life_id`]",
        "Response": "Table: `monothiol_glutaredoxin_related`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO loan (loan_ID, loan_type, cust_ID, branch_ID, amount)  VALUES ('2', 'Auto', '1', '2', 3000);\nDatabase State:\n- Table: customer, Columns: [cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state]\n- Table: loan, Columns: [loan_ID, loan_type, cust_ID, branch_ID, amount]\n- Table: bank, Columns: [branch_ID, bname, no_of_customers, city, state]",
        "Response": "Table: loan"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderID, CustomerID, EmployeeID, OrderDate, ShipperID)  VALUES (10324, 71, 9, '1996-10-08', 1);\nDatabase State:\n- Table: Orders, Columns: [OrderID, CustomerID, EmployeeID, OrderDate, ShipperID]\n- Table: Shippers, Columns: [ShipperID, ShipperName, Phone]\n- Table: Categories, Columns: [CategoryID, CategoryName, Description]\n- Table: Products, Columns: [ProductID, ProductName, SupplierID, CategoryID, Unit, Price]\n- Table: Customers, Columns: [CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country]",
        "Response": "Table: Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Settlements (Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount)  VALUES (176, 641, '1971-06-29', 1588.450000000000045);\nDatabase State:\n- Table: Claims, Columns: [Claim_ID, FNOL_ID, Effective_Date]\n- Table: Services, Columns: [Service_ID, Service_name]\n- Table: Customers_Policies, Columns: [Customer_ID, Policy_ID, Date_Opened, Date_Closed]\n- Table: Settlements, Columns: [Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount]\n- Table: First_Notification_of_Loss, Columns: [FNOL_ID, Customer_ID, Policy_ID, Service_ID]\n- Table: Customers, Columns: [Customer_ID, Customer_name]",
        "Response": "Table: Settlements"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('23S rRNA (uracil-5-)-methyltransferase RumA LSL_0369', 'microbial gene found in Lactobacillus salivarius UCC118', 'Lactobacillus salivarius UCC118', '3977965', 'gene', 'LSL_0369', '23S rRNA (uracil-5-)-methyltransferase RumA LSL_0369', 'gene', '400755', 'forward strand', '399376');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `rna_methyltransferase_trma_conserved_site_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `has_parts`, `molecular_function`, `biological_process`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `discipline_enrollments` (`Campus`)  VALUES (7, 14, 2004, 1550, 80);\nDatabase State:\n- Table: `discipline_enrollments`, Columns: [`Campus`]\n- Table: `enrollments`, Columns: [`Campus`]\n- Table: `csu_fees`, Columns: [`Campus`]\n- Table: `degrees`, Columns: [`Year`, `Campus`]\n- Table: `Campuses`, Columns: [`Id`]",
        "Response": "Table: `discipline_enrollments`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update)  VALUES (2017, '2005-06-17 12:33:30.0', 1434, 516, '2005-06-19 10:08:30.0', 2, '2006-02-15 21:30:53.0');\nDatabase State:\n- Table: `actor`, Columns: [actor_id, first_name, last_name, last_update]\n- Table: `payment`, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: `address`, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: `country`, Columns: [country_id, country, last_update]",
        "Response": "Table: `rental`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price)  VALUES (581, 'Primavera', 46, 1, 1, 'KC Porter & JB Eckl', 378618, 12504234, 0.989999999999999992);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: tracks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('I2', '2012-11-10', 'Cittadella', 'Vicenza', 2, 2, 'D', 2013);\nDatabase State:\n- Table: matchs, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]\n- Table: divisions, Columns: [division, name, country]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (211352, 2010, 'M', 'X', '4y other', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL');\nDatabase State:\n- Table: institution_grads, Columns: [unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate]\n- Table: state_sector_grads, Columns: [stateid, state, state_abbr, control, level, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate, grad_cohort_ct]",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO production (ID, model_year, country)  VALUES (186, 1974, 1);\nDatabase State:\n- Table: production, Columns: [ID, model_year, country]",
        "Response": "Table: production"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('peptide methionine sulfoxide reductase MsrB 2 NGR_b07820', 'microbial gene found in Sinorhizobium fredii NGR234', '7788521.0', 'gene', 'Peptide methionine sulfoxide reductase MsrB 2 NGR_b07820', 'Sinorhizobium fredii NGR234', 'reverse strand', '787767.0', '787282.0', 'gene', 'NGR_b07820');\nDatabase State:\n- Table: `peptide_methionine_sulfoxide_reductase`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`, `has_parts`)  VALUES ('iodide transport', 'The directed movement of iodide into, out of or within a cell, or between cells, by means of some agent such as a transporter or pore.', 'GO:0015705', 'inorganic anion transport', 'http://purl.obolibrary.org/obo/GO_0015705', 'biological process', 'iodide ion');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `part`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Device_ID`, `Device`, `Carrier`, `Package_Version`, `Applications`, `Software_Platform`)  VALUES (3, 'Huawei', 'Telus Mobility', '5.0.0.419', '5.0.0.419', 'Android');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `device`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `international_cross_country_championships` (`label`, `description`, `instance_of`, `sport`, `point_in_time`, `edition_number`, `located_in_the_administrative_territorial_entity`, `freebase_id`)  VALUES ('1954 International Cross Country Championships', 'international athletics championship event', 'International Cross Country Championships', 'athletics', '+1954-00-00T00:00:00Z', '41.0', 'nan', '/m/0y4y42w');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `international_cross_country_championships`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violations (business_id, date, violation_type_id, risk_category, description)  VALUES (66921, '2016-02-24', '103157', 'Low Risk', 'Food safety certificate or food handler card not available');\nDatabase State:\n- Table: businesses, Columns: [business_id, name, address, city, postal_code, latitude, longitude, phone_number, tax_code, business_certificate, application_date, owner_name, owner_address, owner_city, owner_state, owner_zip]\n- Table: inspections, Columns: [business_id, score, date, type]",
        "Response": "Table: violations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1027, 'Brody', 'Paul', 18, 'M', 520, 8723, 'LOS');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO flight (flno, origin, destination, distance, departure_date, arrival_date, price, aid)  VALUES (99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.9799999999999898, 1);\nDatabase State:\n- Table: employee, Columns: [eid, name, salary]\n- Table: certificate, Columns: [eid, aid]\n- Table: flight, Columns: [flno, origin, destination, distance, departure_date, arrival_date, price, aid]",
        "Response": "Table: flight"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Climber_ID`, `Name`, `Country`, `Time`, `Points`, `Mountain_ID`)  VALUES (5, 'Horst Owesle', 'West Germany', '1:17.22.0', 6.0, 2);\nDatabase State:\n- Table: `climber`, Columns: [`Climber_ID`, `Name`, `Country`, `Time`, `Points`, `Mountain_ID`]",
        "Response": "Table: `climber`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `natural_product` (`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Neisseria meningitidis MC58', 'bacterial strain', 'Neisseria meningitidis MC58', 'Neisseria meningitidis', '122586', 'strain', 'Gram-negative bacteria', 'GCA_000008805.1');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `encodes`, Columns: [`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `parent_taxon`, `instance_of`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`, `catalogue_of_life_id`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO IMG_OBJ (IMG_ID, OBJ_SAMPLE_ID, OBJ_CLASS_ID, X, Y, W, H)  VALUES (2363170, 7, 265, 209, 63, 55, 64);\nDatabase State:\n- Table: ATT_CLASSES, Columns: [ATT_CLASS_ID, ATT_CLASS]\n- Table: IMG_OBJ_ATT, Columns: [IMG_ID, ATT_CLASS_ID, OBJ_SAMPLE_ID]\n- Table: OBJ_CLASSES, Columns: [OBJ_CLASS_ID, OBJ_CLASS]",
        "Response": "Table: IMG_OBJ"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('pyruvate-flavodoxin oxidoreductase FN1170', 'microbial gene found in Fusobacterium nucleatum subsp. nucleatum ATCC 25586', 'Fusobacterium nucleatum subsp. nucleatum ATCC 25586', '991927', 'gene', 'Pyruvate-flavodoxin oxidoreductase FN1170', 'FN1170', 'gene', '1832362', 'reverse strand', '1828796');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `parent_taxon`, `instance_of`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`, `catalogue_of_life_id`]\n- Table: `pyruvate_flavodoxin_oxidoreductase_central_domain`, Columns: [`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `subclass_of`, `molecular_function`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `subclass_of`, `molecular_function`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `molecular_function`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `sport`, `country`, `point_in_time`, `follows`, `followed_by`, `competition_class`, `has_parts`, `on_focus_list_of_wikimedia_project`)  VALUES ('1985/1986 South West German Badminton Championships', 'badminton championships', 'South West German Badminton Championships', 'badminton', 'Germany', '+1985-00-00T00:00:00Z', '1984/1985 South West German Badminton Championships', '1986/1987 South West German Badminton Championships', 'national championship', '1985/1986 South West German Badminton Championships \u2013 men''s singles', 'WikiProject Badminton/tournament focus list');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `natural_product` (`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Streptococcus mitis B6', 'bacterial strain', 'strain', 'Streptococcus mitis B6', 'Streptococcus mitis', '365659', 'gram-positive bacteria', 'GCA_000027165.1');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `located_in_the_administrative_territorial_entity`, `postal_code`, `shares_border_with`, `located_in_time_zone`, `local_dialing_code`, `istat_id`, `coordinate_location`, `country`, `italian_cadastre_code_municipality`, `instance_of`, `freebase_id`, `geonames_id`, `topics_main_category`, `official_website`, `licence_plate_code`, `coordinates_of_northernmost_point`, `coordinates_of_southernmost_point`, `coordinates_of_easternmost_point`, `coordinates_of_westernmost_point`, `openstreetmap_relation_id`, `elevation_above_sea_level`, `image`, `area`, `population`, `indicepa_id`, `whos_on_first_id`, `locator_map_image`, `wiki_loves_monuments_id`, `seismic_classification`)  VALUES ('Cavezzo', 'Italian comune', 'Cavezzo', 'Province of Modena', '41032', 'Carpi', 'UTC+01:00', '535.0', '36009.0', '44.83703', 'Italy', 'C398', 'comune of Italy', '/m/0gkg5h', '6539707', 'Category:Cavezzo', 'https://www.comune.cavezzo.mo.it/', 'MO', '44.8734285', '44.8111842', '44.8420388', '44.8362053', '43678.0', 22.0, 'Centro storico di Cavezzo.jpg', 26.76999999999999958, 7031.0, 'c_c398', '101796419.0', 'Map of comune of Cavezzo (province of Modena, region Emilia-Romagna, Italy).svg', '08C3980000', '3');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `commons_category`, `located_in_the_administrative_territorial_entity`, `postal_code`, `shares_border_with`, `local_dialing_code`, `located_in_time_zone`, `image`, `istat_id`, `country`, `italian_cadastre_code_municipality`, `instance_of`, `freebase_id`, `geonames_id`, `topics_main_category`, `official_website`, `coordinate_location`, `licence_plate_code`, `openstreetmap_relation_id`, `elevation_above_sea_level`, `area`, `population`, `indicepa_id`, `locator_map_image`, `wiki_loves_monuments_id`, `seismic_classification`]",
        "Response": "Table: `political_border`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('endoribonuclease YbeY b0659', 'microbial gene found in Escherichia coli str. K-12 substr. MG1655', '946430', 'gene', 'Endoribonuclease YbeY b0659', 'Escherichia coli str. K-12 substr. MG1655', 'reverse strand', '692340', '691873', 'gene', 'b0659');\nDatabase State:\n- Table: `endoribonuclease_ybey_conserved_site_protein_family`, Columns: [`label`, `description`, `encoded_by`, `subclass_of`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO product (`Product ID`, `Product Name`, Category, `Sub-Category`, Region)  VALUES ('FUR-TA-10004175', 'Hon 30\" x 60\" Table with Locking Drawer', 'Furniture', 'Tables', 'West');\nDatabase State:\n- Table: west_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]",
        "Response": "Table: product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (case_number, race, gender, last_name, first_name, full_name)  VALUES ('36033X', 'L', 'M', 'Melo', 'Richard', 'Melo, Richard');\nDatabase State:\n- Table: incidents, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]",
        "Response": "Table: officers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `jurisdiction` (`label`, `description`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `instance_of`, `area`, `locator_map_image`, `coat_of_arms_image`, `official_number_of_town_quarter`)  VALUES ('Zehlendorf', 'human settlement in Germany', '52.435', 'Germany', 'Berlin', 'borough of Berlin', 70.5, 'Berliner Bezirk Zehlendorf vor 2001.png', 'Coat of arms de-be zehlendorf 1956.png', 'X');\nDatabase State:\n- Table: `district_mayor`, Columns: [`label`, `description`, `instance_of`, `subclass_of`, `applies_to_jurisdiction`]\n- Table: `jurisdiction`, Columns: [`label`, `description`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `instance_of`, `area`, `locator_map_image`, `coat_of_arms_image`, `official_number_of_town_quarter`]",
        "Response": "Table: `jurisdiction`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Projects (Code, Name, Hours)  VALUES ('Ast2', 'A Puzzling Parallax', 299);\nDatabase State:\n- Table: Scientists, Columns: [SSN, Name]\n- Table: Projects, Columns: [Code, Name, Hours]\n- Table: AssignedTo, Columns: [Scientist, Project]",
        "Response": "Table: Projects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `coordinate_location`, `official_website`, `freebase_id`, `population`, `instance_of`, `geonames_id`, `topics_main_category`, `viaf_id`, `image`, `located_in_time_zone`, `area`, `whos_on_first_id`, `worldcat_identities_id`, `coat_of_arms_image`)  VALUES ('Kitami', 'city in Hokkaido, Japan', 'Hokkaido', 'Kitami, Hokkaido', 'Japan', '43.80277777777778', 'https://www.city.kitami.lg.jp/', '/m/01wfc0', 115441.0, 'city of Japan', '2129537.0', 'Category:Kitami, Hokkaido', '260783367', 'Kitami montage.JPG', 'UTC+09:00', 1427.410000000000081, '102032047.0', 'lccn-n81149875', 'Emblem of Kitami, Hokkaido.svg');\nDatabase State:\n- Table: `hypermarket`, Columns: [`label`, `description`, `coordinate_location`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `coordinate_location`, `official_website`, `freebase_id`, `population`, `instance_of`, `geonames_id`, `topics_main_category`, `viaf_id`, `image`, `located_in_time_zone`, `area`, `whos_on_first_id`, `worldcat_identities_id`, `coat_of_arms_image`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`name`)  VALUES ('student275');\nDatabase State:\n- Table: male, Columns: [`name`]\n- Table: person, Columns: [`name`]\n- Table: unemployed, Columns: [`name`]\n- Table: enlist, Columns: [`name`, organ]",
        "Response": "Table: male"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Crime (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11505182, 'JB513187', '11/12/2018 13:35', '015XX S CALIFORNIA BLVD', '545', 'HOSPITAL BUILDING/GROUNDS', 'FALSE', 'FALSE', 1023, 10, 28, 29, '08A', '41.8609112', '-87.69574471');\nDatabase State:\n- Table: Ward, Columns: [ward_no, alderman_first_name, alderman_last_name, alderman_name_suffix, ward_office_address, ward_office_zip, ward_email, ward_office_phone, ward_office_fax, city_hall_office_room, city_hall_office_phone, city_hall_office_fax, Population]\n- Table: Crime, Columns: [report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude]\n- Table: Community_Area, Columns: [community_area_no, community_area_name, side, population]\n- Table: FBI_Code, Columns: [fbi_code_no, title, description, crime_against]\n- Table: Neighborhood, Columns: [neighborhood_name, community_area_no]\n- Table: IUCR, Columns: [iucr_no, primary_description, secondary_description, index_code]\n- Table: District, Columns: [district_no, district_name, address, zip_code, commander, email, phone, fax, tty, twitter]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (case_number, race, gender, last_name, first_name, full_name)  VALUES ('260896-2015', 'L', 'M', 'Lujan', 'Edmundo', 'Lujan, Edmundo');\nDatabase State:\n- Table: subjects, Columns: [case_number, race, gender, last_name, first_name, full_name]",
        "Response": "Table: officers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `has_parts`, `is_a_list_of`)  VALUES ('list of Pok\u00e9mon introduced in Generation VII', 'Wikimedia list article', 'list of Pok\u00e9mon species', 'nan', 'Pok\u00e9mon species');\nDatabase State:\n- Table: `dark_type_pok\u00e9mon`, Columns: [`label`, `description`, `instance_of`, `from_narrative_universe`, `part_of`, `pok\u00e9mon_index`, `media_franchise`, `fandom_article_id`, `present_in_work`, `subclass_of`]\n- Table: `part`, Columns: [`label`, `description`, `instance_of`, `has_parts`, `is_a_list_of`]",
        "Response": "Table: `part`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id_restaurant, street_num, street_name, city)  VALUES (6000, 4710, 'meridian ave', 'san jose');\nDatabase State:\n- Table: generalinfo, Columns: [id_restaurant, label, food_type, city, review]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violation (inspection_id, point_id, fine, inspector_comment)  VALUES (539525, 33, 100, 'All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.  INTERIOR OF 2 DOOR PREP COOLER UNCLEAN MUST CLEAN AND MAINTAIN;  GUN HOLDER IN BAR AREA UNCLEAN MUST CLEAN AND MAINTAIN');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Code, Name, Price, Manufacturer)  VALUES (11, 'DVD drive', 150, 3);\nDatabase State:\n- Table: Manufacturers, Columns: [Code, Name, Headquarter, Founder, Revenue]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `museum` (`Museum_ID`, `Name`, `Num_of_Staff`, `Open_Year`)  VALUES (7, 'Central City District Residential Museum', 15, '2010');\nDatabase State:\n- Table: `museum`, Columns: [`Museum_ID`, `Name`, `Num_of_Staff`, `Open_Year`]",
        "Response": "Table: `museum`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details)  VALUES (7, 'Shop', '1996-09-16 22:04:27', '1998-09-15 05:26:22', 'avalon', replace('092 Paucek Highway Apt. 772\\nEast Erika, IA 61358','\\n',char(10)), 8, 150045.7568000000028, 296733, 2794972.249499999918, 'quos', 'est', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Ref_Property_Types, Columns: [property_type_code, property_type_description]\n- Table: Other_Property_Features, Columns: [property_id, feature_id, property_feature_description]\n- Table: Other_Available_Features, Columns: [feature_id, feature_type_code, feature_name, feature_description]\n- Table: Ref_Feature_Types, Columns: [feature_type_code, feature_type_name]",
        "Response": "Table: Properties"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Scoring (playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, `+/-`, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, `Post+/-`, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG)  VALUES ('holikbo01', 1991, 1, 'HAR', 'NHL', 'L', 76, 21, 24, 45, 44, '4', '1', '1', '0', '0', '2', '1', '207', '7', '0', '1', '1', '6', '-2', '0', '0', '0', '0', '0', '18');\nDatabase State:\n- Table: GoaliesSC, Columns: [playerID, year, tmID, lgID, GP, Min, W, L, T, SHO, GA]\n- Table: AwardsPlayers, Columns: [playerID, award, year, lgID, note, pos]\n- Table: Scoring, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, `+/-`, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, `Post+/-`, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]\n- Table: Coaches, Columns: [coachID, year, tmID, lgID, stint, notes, g, w, l, t, postg, postw, postl, postt]\n- Table: TeamsSC, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM]\n- Table: GoaliesShootout, Columns: [playerID, year, stint, tmID, W, L, SA, GA]\n- Table: TeamVsTeam, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]\n- Table: Master, Columns: [playerID, coachID, hofID, firstName, lastName, nameNote, nameGiven, nameNick, height, weight, shootCatch, legendsID, ihdbID, hrefID, firstNHL, lastNHL, firstWHA, lastWHA, pos, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity, deathYear, deathMon, deathDay, deathCountry, deathState, deathCity]\n- Table: Goalies, Columns: [playerID, year, stint, tmID, lgID, GP, Min, W, L, `T/OL`, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA]\n- Table: Teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: SeriesPost, Columns: [year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L, T, GoalsWinner, GoalsLoser, note]\n- Table: TeamsHalf, Columns: [year, lgID, tmID, half, rank, G, W, L, T, GF, GA]\n- Table: ScoringSC, Columns: [playerID, year, tmID, lgID, pos, GP, G, A, Pts, PIM]\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]\n- Table: ScoringSup, Columns: [playerID, year, PPA, SHA]\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: abbrev, Columns: [Type, Code, Fullname]",
        "Response": "Table: Scoring"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `follows` (`label`, `description`, `coordinate_location`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `postal_code`, `follows`, `followed_by`, `part_of`, `google_knowledge_graph_id`, `geonlp_id`)  VALUES ('Shimantocho-higashi interchange', 'interchange in Shimanto, Takaoka district, Kochi prefecture, Japan', '33.279027777778', 'Japan', 'interchange', 'Shimanto', '786-0032', 'Nakatosa interchange', 'Shimantocho-chuo interchange', 'Kochi Expressway', '/g/122tj8dq', 'PnxDkJ');\nDatabase State:\n- Table: `located_in_the_present_day_administrative_territorial_entity`, Columns: [`label`, `description`, `dantai_code`, `commons_category`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `official_website`, `instance_of`, `freebase_id`, `population`, `geonames_id`, `topics_main_category`, `corporate_number_japan`, `located_in_time_zone`, `name_in_kana`, `area`, `opencorporates_id`, `geonlp_id`, `image`, `openstreetmap_relation_id`, `shares_border_with`, `inception`, `replaces`, `whos_on_first_id`, `inaturalist_place_id`, `ndl_authority_id`, `viaf_id`, `worldcat_identities_id`, `flag_image`]\n- Table: `follows`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `postal_code`, `follows`, `followed_by`, `part_of`, `google_knowledge_graph_id`, `geonlp_id`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `dantai_code`, `commons_category`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `official_website`, `instance_of`, `freebase_id`, `population`, `geonames_id`, `topics_main_category`, `corporate_number_japan`, `located_in_time_zone`, `name_in_kana`, `area`, `opencorporates_id`, `geonlp_id`, `image`, `openstreetmap_relation_id`, `shares_border_with`, `inception`, `replaces`, `whos_on_first_id`, `inaturalist_place_id`, `ndl_authority_id`, `viaf_id`, `worldcat_identities_id`, `flag_image`]\n- Table: `kochi_expressway`, Columns: [`label`, `description`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `postal_code`, `follows`, `followed_by`, `part_of`, `google_knowledge_graph_id`]\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `postal_code`, `follows`, `followed_by`, `part_of`, `google_knowledge_graph_id`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update)  VALUES (11688, 433, 1, 14559, 6.990000000000000213, '2005-08-21 16:11:35.0', '2006-02-15 22:18:38.0');\nDatabase State:\n- Table: `inventory`, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: `address`, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: film_text, Columns: [film_id, title, description]\n- Table: `customer`, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: `rental`, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]\n- Table: `country`, Columns: [country_id, country, last_update]\n- Table: `city`, Columns: [city_id, city, country_id, last_update]\n- Table: `payment`, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: `actor`, Columns: [actor_id, first_name, last_name, last_update]\n- Table: `language`, Columns: [language_id, name, last_update]\n- Table: `staff`, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]\n- Table: `store`, Columns: [store_id, manager_staff_id, address_id, last_update]",
        "Response": "Table: `payment`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `described_by_source`, `writing_system`, `native_label`, `said_to_be_the_same_as`, `different_from`)  VALUES ('Ch\u00e9n', 'family name (\u9673 / \u9648)', 'Han surname', 'Hundred Family Surnames', 'Chinese characters', '\u9673', 'Chen', 'Chen');\nDatabase State:\n- Table: `ancestral_home`, Columns: [`label`, `description`, `country`, `instance_of`, `chgis_id`, `located_in_the_administrative_territorial_entity`]\n- Table: `replaced_entity`, Columns: [`label`, `description`, `commons_category`, `topics_main_category`, `freebase_id`, `instance_of`, `replaced_by`, `replaces`, `capital`, `part_of`, `inception`, `dissolved_abolished_or_demolished_date`]",
        "Response": "Table: `family_name`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `taxon_name`, `taxon_rank`, `freebase_id`, `ncbi_taxonomy_id`, `parent_taxon`, `instance_of`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `mesh_descriptor_id`, `bacdive_id`, `microsoft_academic_id`, `openalex_id`, `catalogue_of_life_id`)  VALUES ('Listeria monocytogenes', 'species of bacterium', 'Listeria monocytogenes', 'species', '/m/02cw3t', '1639.0', 'Listeria', 'taxon', '5428162.0', '963001.0', 'gram-positive bacteria', '10932504.0', 'http://www.bacterio.net/listeria.html#monocytogenes', 'D008089', '6875.0', '2781350384.0', 'C2781350384', '3VGJ4');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `refseq_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `part_of`, `instance_of`]\n- Table: `d_ala_d_ala_carboxypeptidase_c_terminal_domain_superfamily`, Columns: [`label`, `description`, `uniprot_protein_id`, `refseq_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `part_of`, `instance_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Model_name`, `Launch_year`, `RAM_MiB`, `ROM_MiB`, `Slots`, `WiFi`, `Bluetooth`)  VALUES ('X3 Advanced', 2003.0, 64.0, 64.0, '1SD', 'No', 'No');\nDatabase State:\n- Table: `screen_mode`, Columns: [`Graphics_mode`, `Char_cells`, `Pixels`, `Hardware_colours`, `used_kb`, `map`, `Type`]\n- Table: `chip_model`, Columns: [`Model_name`, `Launch_year`, `RAM_MiB`, `ROM_MiB`, `Slots`, `WiFi`, `Bluetooth`]",
        "Response": "Table: `chip_model`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Host_ID`, `Name`, `Nationality`, `Age`)  VALUES (3, 'Kornel David', 'Hungary', '31');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `host`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('SARP family transcriptional regulator AMED_5278', 'microbial protein found in Amycolatopsis mediterranei U32', 'SARP family transcriptional regulator AMED_5278', 'A0A0H3D7R8', 'DNA binding', 'Bacterial transcriptional activator domain', 'Amycolatopsis mediterranei U32', 'YP_003767442', 'protein', 'Tetratricopeptide-like helical domain superfamily', 'protein');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `city` (`City_ID`, `County_ID`, `Name`, `White`, `Black`, `Amerindian`, `Asian`, `Multiracial`, `Hispanic`)  VALUES (16, 6, 'Carolina', 64.29999999999999716, 22.80000000000000071, 0.9000000000000000222, 0.4000000000000000222, 11.69999999999999929, 98.5999999999999944);\nDatabase State:\n- Table: `city`, Columns: [`City_ID`, `County_ID`, `Name`, `White`, `Black`, `Amerindian`, `Asian`, `Multiracial`, `Hispanic`]\n- Table: `county_public_safety`, Columns: [`County_ID`, `Name`, `Population`, `Police_officers`, `Residents_per_officer`, `Case_burden`, `Crime_rate`, `Police_force`, `Location`]",
        "Response": "Table: `city`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `topics_main_category`, `freebase_id`, `official_website`, `image`, `geonames_id`, `locator_map_image`, `inception`, `capital`, `population`, `legislative_body`, `area`, `openstreetmap_relation_id`, `archinform_location_id`)  VALUES ('Blaenau Gwent County Borough', 'principal area in south-east Wales, United Kingdom', 'Blaenau Gwent County Borough', 'United Kingdom', 'principal area of Wales', 'Wales', '51.775833333333', 'Category:Blaenau Gwent', '/m/01z8qp', 'https://www.blaenau-gwent.gov.uk/en/home/', 'View in Blaenau Gwent (4641538).jpg', '3333238', 'Blaenau Gwent in Wales.svg', 'nan', 'nan', 69713.0, 'nan', 108.7279000000000053, '2750598.0', '7746.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (UserID, Gender)  VALUES ('tw-20711189', 'Male');\nDatabase State:\n- Table: user, Columns: [UserID, Gender]\n- Table: location, Columns: [LocationID, Country, State, StateCode, City]\n- Table: twitter, Columns: [TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, `text`, LocationID, UserID]",
        "Response": "Table: user"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `subclass_of`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Histidinol phosphatase CA_C3053', 'microbial protein found in Clostridium acetobutylicum ATCC 824', 'Q97EQ5', 'Clostridium acetobutylicum ATCC 824', 'histidinol phosphatase CA_C3053', 'protein', 'dephosphorylation', 'D,D-heptose 1,7-bisphosphate phosphatase activity', 'cytoplasm', 'Histidinol-phosphate phosphatase domain', 'protein', 'NP_349653', 'HAD-like superfamily');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `molecular_function`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `parent_taxon`, `instance_of`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`, `catalogue_of_life_id`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (route_id, route_name, other_route_details)  VALUES (7, 'Adams, Macejkovic and Carroll', replace('941 Ritchie Plains Suite 833\\nNorth Jerry, LA 32804-7405','\\n',char(10)));\nDatabase State:\n- Table: Employees, Columns: [employee_id, employee_address_id, employee_name, employee_phone]\n- Table: Order_Deliveries, Columns: [location_code, actual_order_id, delivery_status_code, driver_employee_id, truck_id, delivery_date]",
        "Response": "Table: Delivery_Routes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `follows` (`label`, `description`, `instance_of`, `sport`, `point_in_time`, `followed_by`, `follows`, `google_knowledge_graph_id`, `organizer`)  VALUES ('2013 UEC Cyclo-cross European Championships', 'nan', 'UEC European Cyclo-cross Championships', 'cyclo-cross', '+2013-00-00T00:00:00Z', '2014 UEC Cyclo-cross European Championships', '2012 UEC Cyclo-cross European Championships', '/g/1yg4lyd1n', 'European Cycling Union');\nDatabase State:\n- Table: `uec_european_cyclo_cross_championships`, Columns: [`label`, `description`, `instance_of`, `sport`, `follows`, `followed_by`, `point_in_time`, `google_knowledge_graph_id`, `organizer`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `subclass_of`, `ncbi_locus_tag`, `found_in_taxon`, `chromosome`, `strand_orientation`, `entrez_gene_id`, `ensembl_gene_id`, `encodes`, `genomic_end`, `saccharomyces_genome_database_id`, `genomic_start`, `refseq_rna_id`, `instance_of`, `ensembl_transcript_id`)  VALUES ('DAN1', 'protein-coding gene in the species Saccharomyces cerevisiae S288c', 'protein-coding gene', 'YJR150C', 'Saccharomyces cerevisiae S288c', 'Saccharomyces cerevisiae S288c chromosome X', 'reverse strand', '853615', 'YJR150C', 'Dan1p YJR150C', '709707', 'S000003911', '708811', 'NM_001181808', 'gene', 'YJR150C_mRNA');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `refseq_protein_id`, `biological_process`, `found_in_taxon`, `uniprot_protein_id`, `cell_component`, `saccharomyces_genome_database_id`, `instance_of`, `part_of`, `molecular_function`, `ensembl_protein_id`]\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]\n- Table: `stress_induced_protein_srp1_tip1`, Columns: [`label`, `description`, `encoded_by`, `refseq_protein_id`, `biological_process`, `found_in_taxon`, `uniprot_protein_id`, `cell_component`, `saccharomyces_genome_database_id`, `instance_of`, `part_of`, `molecular_function`, `ensembl_protein_id`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `ncbi_locus_tag`, `found_in_taxon`, `chromosome`, `strand_orientation`, `entrez_gene_id`, `ensembl_gene_id`, `encodes`, `genomic_end`, `saccharomyces_genome_database_id`, `genomic_start`, `refseq_rna_id`, `instance_of`, `ensembl_transcript_id`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `people` (`People_ID`, `Name`, `Height`, `Weight`, `Home Town`)  VALUES (11, 'Mike Murphy', 6.799999999999999823, 215.0, 'Austin, TX');\nDatabase State:\n- Table: `perpetrator`, Columns: [`Perpetrator_ID`, `People_ID`, `Date`, `Year`, `Location`, `Country`, `Killed`, `Injured`]",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO matchs (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('D2', '2017-03-12', 'Kaiserslautern', 'Heidenheim', 1, 1, 'D', 2017);\nDatabase State:\n- Table: divisions, Columns: [division, name, country]\n- Table: matchs, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO employee (emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date)  VALUES ('KJJ92907F', 'Karla', 'J', 'Jablonski', 9, 170, '9999', '1994-03-11 00:00:00.0');\nDatabase State:\n- Table: jobs, Columns: [job_id, job_desc, min_lvl, max_lvl]\n- Table: publishers, Columns: [pub_id, pub_name, city, state, country]\n- Table: titles, Columns: [title_id, title, type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate]\n- Table: sales, Columns: [stor_id, ord_num, ord_date, qty, payterms, title_id]\n- Table: roysched, Columns: [title_id, lorange, hirange, royalty]\n- Table: employee, Columns: [emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date]\n- Table: titleauthor, Columns: [au_id, title_id, au_ord, royaltyper]\n- Table: stores, Columns: [stor_id, stor_name, stor_address, city, state, zip]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Thiamine pyrophosphate enzyme Moth_2277', 'microbial protein found in Moorella thermoacetica ATCC 39073', 'Q2RG75', 'Moorella thermoacetica ATCC 39073', 'protein', 'thiamine pyrophosphate enzyme Moth_2277', 'metabolism', 'catalytic activity', '4Fe-4S ferredoxin, iron-sulphur binding, conserved site', 'protein', 'YP_431107', 'Indolepyruvate ferredoxin oxidoreductase, alpha subunit');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO routes (rid, dst_apid)  VALUES (60442, 3484, 'AX', 3817, 'SMF', 5265, 'S', 'Y');\nDatabase State:\n- Table: airlines, Columns: [alid]\n- Table: airports, Columns: [apid]",
        "Response": "Table: routes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `pubchem_cid`, `inchi`, `inchikey`, `chemical_formula`, `canonical_smiles`, `isomeric_smiles`, `mass`, `found_in_taxon`)  VALUES ('ethyl (15R,16S,18R)-10,16-dihydroxy-15-methyl-3,5-dioxo-28-oxa-4,14,19-triazaoctacyclo[12.11.2.115,18.02,6.07,27.08,13.019,26.020,25]octacosa-1,6,8(13),9,11,20,22,24,26-nonaene-16-carboxylate', 'chemical compound', 'chemical compound', '100997437.0', 'InChI=1S/C28H21N3O7/c1-3-37-26(35)28(36)11-17-30-15-7-5-4-6-13(15)18-20-21(25(34)29-24(20)33)19-14-10-12(32)8-9-16(14)31(23(19)22(18)30)27(28,2)38-17/h4-10,17,32,36H,3,11H2,1-2H3,(H,29,33,34)/t17-,27-,28-/m1/s1', 'LJOOYJUOJXUSEB-SGNOPVRASA-N', 'C\u2082\u2088H\u2082\u2081N\u2083O\u2087', 'O=C1N=C(O)C=2C1=C3C4=CC(O)=CC=C4N5C3=C6C2C=7C=CC=CC7N6C8OC5(C)C(O)(C(=O)OCC)C8', 'CCOC(=O)[C@]1(O)C[C@H]2O[C@@]1(C)n1c3ccc(O)cc3c3c4c(c5c6ccccc6n2c5c31)C(O)=NC4=O', 511.1379500119999761, 'Streptomyces');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `taxon_rank`, `parent_taxon`, `gbif_taxon_id`, `itis_tsn`, `ncbi_taxonomy_id`, `irmng_id`, `catalogue_of_life_id`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `parent_taxon`, `instance_of`, `encyclopedia_of_life_id`, `worms_id_for_taxa`, `gbif_taxon_id`, `itis_tsn`, `ncbi_taxonomy_id`, `new_zealand_organisms_register_id`, `irmng_id`, `inaturalist_taxon_id`, `commons_category`, `catalogue_of_life_id`, `image`]",
        "Response": "Table: `indolo23_acarbazole_alkaloid`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price)  VALUES (14, 11, 'Cancelled', 11, 1, '2018-03-07 11:53:32', '5', 483.0);\nDatabase State:\n- Table: Customer_Payments, Columns: [customer_id, datetime_payment, payment_method_code, amount_payment]\n- Table: Addresses, Columns: [address_id, line_1_number_building, city, zip_postcode, state_province_county, country]\n- Table: Staff, Columns: [staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff]\n- Table: Vehicles, Columns: [vehicle_id, vehicle_details]\n- Table: Lessons, Columns: [lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price]",
        "Response": "Table: Lessons"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customers (Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details)  VALUES ('240', 286, 'Harold', '624-096-7791', 'jerde.harmon@example.com', NULL);\nDatabase State:\n- Table: Bookings, Columns: [Booking_ID, Customer_ID, Workshop_Group_ID, Status_Code, Store_ID, Order_Date, Planned_Delivery_Date, Actual_Delivery_Date, Other_Order_Details]\n- Table: Customers, Columns: [Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details]\n- Table: Order_Items, Columns: [Order_Item_ID, Order_ID, Product_ID, Order_Quantity, Other_Item_Details]\n- Table: Performers_in_Bookings, Columns: [Order_ID, Performer_ID]\n- Table: Invoice_Items, Columns: [Invoice_Item_ID, Invoice_ID, Order_ID, Order_Item_ID, Product_ID, Order_Quantity, Other_Item_Details]\n- Table: Ref_Service_Types, Columns: [Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description]\n- Table: Customer_Orders, Columns: [Order_ID, Customer_ID, Store_ID, Order_Date, Planned_Delivery_Date, Actual_Delivery_Date, Other_Order_Details]\n- Table: Marketing_Regions, Columns: [Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details]\n- Table: Bookings_Services, Columns: [Order_ID, Product_ID]\n- Table: Addresses, Columns: [Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details]\n- Table: Services, Columns: [Service_ID, Service_Type_Code, Workshop_Group_ID, Product_Description, Product_Name, Product_Price, Other_Product_Service_Details]\n- Table: Invoices, Columns: [Invoice_ID, Order_ID, payment_method_code, Product_ID, Order_Quantity, Other_Item_Details, Order_Item_ID]\n- Table: Clients, Columns: [Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customers (Customer_ID, Customer_name)  VALUES (756, 'Mr. Randal Lynch III');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `follows`, `followed_by`, `participant_in`, `part_of_the_series`, `instance_of`, `country`, `point_in_time`)  VALUES ('Spain in the Eurovision Song Contest 1970', 'nan', 'Spain in the Eurovision Song Contest 1969', 'Spain in the Eurovision Song Contest 1971', 'Eurovision Song Contest 1970', 'Spain in the Eurovision Song Contest', 'Spain in the Eurovision Song Contest', 'Spain', '+1970-00-00T00:00:00Z');\nDatabase State:\n- Table: `victory`, Columns: [`label`, `description`, `winner`, `participant`, `commons_category`, `topics_main_category`, `instance_of`, `freebase_id`, `presenter`, `location`, `point_in_time`, `imdb_id`, `genre`, `official_website`, `number_of_participants`, `part_of_the_series`, `fandom_article_id`, `end_time`]\n- Table: `participant`, Columns: [`label`, `description`, `commons_category`, `musicbrainz_artist_id`, `viaf_id`, `isni`, `gnd_id`, `imdb_id`, `instance_of`, `image`, `freebase_id`, `participant_in`, `genre`, `discogs_artist_id`, `work_period_start`, `worldcat_identities_id`, `muziekweb_performer_id`, `lyricstranslate_id`, `fandom_article_id`]\n- Table: `followed_by`, Columns: [`label`, `description`, `followed_by`, `instance_of`, `participant_in`, `part_of_the_series`, `country`, `point_in_time`, `follows`]\n- Table: `winner`, Columns: [`label`, `description`, `instance_of`, `participant_in`, `victory`]\n- Table: `follows`, Columns: [`label`, `description`, `followed_by`, `instance_of`, `participant_in`, `part_of_the_series`, `point_in_time`, `country`, `follows`]",
        "Response": "Table: `spain_in_the_eurovision_song_contest`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `ensembl_protein_id`, `encoded_by`, `uniprot_protein_id`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `biological_process`, `instance_of`, `part_of`)  VALUES ('Keratin-associated protein 19-5', 'mammalian protein found in Macaca nemestrina', 'ENSMNEP00000003744', 'LOC105472755', 'A0A2K6AX58', 'nan', 'southern pig-tailed macaque', 'XP_011724582', 'nan', 'protein', 'Keratin-associated protein, type6/8/16/19/20/21');\nDatabase State:\n- Table: `keratin_associated_protein_type6_8_16_19_20_21`, Columns: [`label`, `description`, `ensembl_protein_id`, `encoded_by`, `uniprot_protein_id`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `biological_process`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `ensembl_transcript_id`, `refseq_rna_id`, `encodes`, `found_in_taxon`, `exact_match`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `cytogenetic_location`, `expressed_in`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Company_ID`, `People_ID`, `Year_working`)  VALUES (7, 4, 1);\nDatabase State:\n- Table: `people`, Columns: [`People_ID`, `Age`, `Name`, `Nationality`, `Graduation_College`]\n- Table: `company`, Columns: [`Company_ID`, `Name`, `Headquarters`, `Industry`, `Sales_in_Billion`, `Profits_in_Billion`, `Assets_in_Billion`, `Market_Value_in_Billion`]",
        "Response": "Table: `employment`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ResID, ResName, Address, Rating)  VALUES (1, 'Subway', '3233 St Paul St, Baltimore, MD 21218', 3);\nDatabase State:\n- Table: Type_Of_Restaurant, Columns: [ResID, ResTypeID]\n- Table: Restaurant_Type, Columns: [ResTypeID, ResTypeName, ResTypeDescription]",
        "Response": "Table: Restaurant"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('ribosome maturation factor RimM HP1149', 'microbial gene found in Helicobacter pylori 26695', 'Helicobacter pylori 26695', '899687', 'gene', 'HP1149', 'Ribosome maturation factor RimM HP1149', 'gene', '1212852', 'reverse strand', '1212298');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Customer ID`, `Customer Name`, Segment, Country, City, State, `Postal Code`, Region)  VALUES ('QJ-19255', 'Quincy Jones', 'Corporate', 'United States', 'Philadelphia', 'Pennsylvania', 19134, 'East');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: people"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `film` (`Film_ID`, `Title`, `Studio`, `Director`, `Gross_in_dollar`)  VALUES (7, '48 Hrs', 'Paramount', 'Walter Hill', 78868508);\nDatabase State:\n- Table: `film_market_estimation`, Columns: [`Estimation_ID`, `Low_Estimate`, `High_Estimate`, `Film_ID`, `Type`, `Market_ID`, `Year`]\n- Table: `market`, Columns: [`Market_ID`, `Country`, `Number_cities`]\n- Table: `film`, Columns: [`Film_ID`, `Title`, `Studio`, `Director`, `Gross_in_dollar`]",
        "Response": "Table: `film`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Organization_Contact_Individuals (individual_id, organization_id, date_contact_from, date_contact_to)  VALUES (9, 1, '2017-01-06 09:38:54', '2018-02-27 09:20:42');\nDatabase State:\n- Table: Party_Forms, Columns: [party_id, form_id, date_completion_started, form_status_code, date_fully_completed]\n- Table: Services, Columns: [service_id, service_type_code, service_name, service_descriptio]\n- Table: Parties, Columns: [party_id, payment_method_code, party_phone, party_email]\n- Table: Addresses, Columns: [address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country]",
        "Response": "Table: Organization_Contact_Individuals"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `alley_house` (`label`, `description`, `instance_of`, `located_in_the_administrative_territorial_entity`, `country`, `heritage_designation`, `pcp_reference_number`, `coordinate_location`, `street_address`, `postal_code`, `part_of`, `egid`)  VALUES ('Houses Obere Gasse', 'alley houses in Baden in the canton of Aargau, Switzerland', 'architectural structure', 'Baden', 'Switzerland', 'class B Swiss cultural property of regional significance', '9839.0', '47.47253', 'nan', 'nan', 'list of cultural properties in Baden', 'nan');\nDatabase State:\n- Table: `part`, Columns: [`label`, `description`, `commons_category`, `instance_of`, `country`, `is_a_list_of`]",
        "Response": "Table: `alley_house`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Reservations` (`Code`)  VALUES (56286, 'AOB', '29-JUL-10', '31-JUL-10', 201.25, 'BRICKEL', 'ROCKY', 3, 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Reservations`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, student_id, grade, sat)  VALUES (4, 31, 'C', 2);\nDatabase State:\n- Table: `course`, Columns: [course_id, name, credit, diff]\n- Table: RA, Columns: [student_id, capability, prof_id, salary]",
        "Response": "Table: registration"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('phosphate ABC transporter permease lmo2497', 'microbial gene found in Listeria monocytogenes EGD-e', 'gene', 'Listeria monocytogenes EGD-e', '987312', 'lmo2497', 'Phosphate ABC transporter permease lmo2497', 'gene', '2572882', 'reverse strand', '2571998');\nDatabase State:\n- Table: `phosphate_transport_system_permease_protein_psta`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `carbamate_kinase` (`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `biological_process`, `molecular_function`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Carbamate kinase BPSL1745', 'microbial protein found in Burkholderia pseudomallei K96243', 'protein', 'Q63U71', 'carbamate kinase BPSL1745', 'Burkholderia pseudomallei K96243', 'arginine metabolic process', 'carbamate kinase activity', 'Aspartate/glutamate/uridylate kinase domain', 'protein', 'YP_108345', 'Acetylglutamate kinase-like superfamily');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]",
        "Response": "Table: `carbamate_kinase`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `embroidery` (`label`, `description`, `instance_of`, `inception`, `made_from_material`)  VALUES ('Game of Thrones Tapestry', 'embroidered tapestry based on the Bayeux tapestry, telling the story of the HBO series ''Game of Thrones''', 'work of art', 'nan', 'linen');\nDatabase State:\n- Table: `material`, Columns: [`label`, `description`, `commons_category`, `freebase_id`, `subclass_of`, `art_architecture_thesaurus_id`, `described_by_source`, `image`, `jstor_topic_id`, `encyclop\u00e6dia_britannica_online_id`, `babelnet_id`, `kbpedia_id`, `wordnet_31_synset_id`]\n- Table: `embroidery`, Columns: [`label`, `description`, `instance_of`, `inception`, `made_from_material`]",
        "Response": "Table: `embroidery`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO student (student_id, f_name, l_name, phone_number, email, intelligence, gpa, type)  VALUES (18, 'Pablo', 'Wellings', '(996) 8465427', 'pwellingsh@hku.hk', 5, 3.700000000000000177, 'UG');\nDatabase State:\n- Table: student, Columns: [student_id, f_name, l_name, phone_number, email, intelligence, gpa, type]\n- Table: RA, Columns: [student_id, capability, prof_id, salary]",
        "Response": "Table: student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `commons_category`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `topics_main_category`, `locator_map_image`, `instance_of`, `freebase_id`, `fips_6_4`, `gnis_id`, `population`, `geonames_id`, `official_website`, `area`, `shares_border_with`, `inception`, `capital`, `image`, `viaf_id`, `archinform_location_id`, `library_of_congress_authority_id`, `whos_on_first_id`, `list_of_monuments`, `water_as_percent_of_area`, `native_label`, `wolfram_language_entity_code`, `colorado_encyclopedia_id`, `named_after`, `worldcat_identities_id`, `hasc`, `openstreetmap_relation_id`, `ballotpedia_id`, `getty_thesaurus_of_geographic_names_id`, `inaturalist_place_id`, `per_capita_income`, `number_of_households`, `national_library_of_israel_j9u_id`)  VALUES ('Washington County', 'county in Colorado, United States', 'United States of America', 'Washington County, Colorado', 'Colorado', '39.98', 'Category:Washington County, Colorado', 'Map of Colorado highlighting Washington County.svg', 'county of Colorado', '/m/0n_q4', '8121', '198176', 4817.0, '5443305', 'http://co.washington.co.us', 6537.0, 'Logan County', '+1877-00-00T00:00:00Z', 'Akron', 'Akron Gymnasium.JPG', '145460568.0', '18491.0', 'n83232856', '102086125.0', 'National Register of Historic Places listings in Colorado', 0.2000000000000000111, 'Washington County', 'Entity[\"AdministrativeDivision\", {\"WashingtonCounty\", \"Colorado\", \"UnitedStates\"}]', 'washington-county', 'George Washington', 'lccn-n83232856', 'US.CO.WA', '1411318', 'Washington_County,_Colorado', '2000252', '2579', 28224.0, 2081.0, '9.870075530605052e+17');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Cinema_ID`, `Film_ID`, `Date`, `Show_times_per_day`, `Price`)  VALUES (1, 2, '21 May', 3, 12.99000000000000021);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `schedule`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `natural_product` (`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Prochlorococcus marinus subsp. marinus str. CCMP1375', 'nan', 'taxon', 'Prochlorococcus marinus subsp. marinus str. CCMP1375', 'Prochlorococcus marinus marinus', '167539', 'Gram-negative bacteria', 'GCA_000007925.1');\nDatabase State:\n- Table: `inorganic_pyrophosphatase_superfamily`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SportsInfo (StuID, SportName, HoursPerWeek, GamesPlayed, OnScholarship)  VALUES (1019, 'Swimming', 8, 16, 'Y');\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: SportsInfo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`)  VALUES ('mouse chromosome 8', 'Mus musculus chromosome', 'NC_000074', 'house mouse', 'chromosome');\nDatabase State:\n- Table: `zinc_finger_mynd_type_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `ensembl_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `ensembl_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `chromosome`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score)  VALUES (322, 19, 2014, 150);\nDatabase State:\n- Table: university, Columns: [id, country_id, university_name]\n- Table: country, Columns: [id, country_name]\n- Table: university_year, Columns: [university_id, year, num_students, student_staff_ratio, pct_international_students, pct_female_students]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `oxidoreductase_acting_on_paired_donors_with_incorporation_or_reduction_of_molecular_oxygen` (`label`, `description`, `subclass_of`, `instance_of`, `molecular_function`)  VALUES ('Sphingolipid delta4-desaturase', 'InterPro Family', 'protein', 'protein family', 'sphingolipid delta-4 desaturase activity');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `oxidoreductase_acting_on_paired_donors_with_incorporation_or_reduction_of_molecular_oxygen`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `molecular_function`, `instance_of`, `refseq_protein_id`, `part_of`, `subclass_of`)  VALUES ('Hypothetical protein DVU2234', 'microbial protein found in Desulfovibrio vulgaris str. Hildenborough', 'Q729W3', 'hypothetical protein DVU2234', 'Desulfovibrio vulgaris subsp. vulgaris str. Hildenborough', 'oxidoreductase activity', 'protein', 'YP_011447', '3-Dehydro-bile acid delta(4,6)-reductase-like', 'protein');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `hi0933_like_insert_domain_superfamily`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO PlayerInfo (ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0)  VALUES (8840, 'Antoine Vermette', '1982-07-20', 1982, 7, 20, 'Saint-Agapit, QC, CAN', 'Canada', 73, 198, 'C', 'L', 2000, 2, 55, 'Ottawa Senators', 15, 216, 2922, 'yes');\nDatabase State:\n- Table: PlayerInfo, Columns: [ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0]\n- Table: SeasonStatus, Columns: [ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS]\n- Table: weight_info, Columns: [weight_id, weight_in_kg, weight_in_lbs]\n- Table: height_info, Columns: [height_id, height_in_cm, height_in_inch]",
        "Response": "Table: PlayerInfo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cars (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num)  VALUES (4, 1, 4, 'rectangle', 'long', 'not_double', 'none', 2, 'rectangle', 3);\nDatabase State:\n- Table: cars, Columns: [id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num]",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO City (ID, Name, CountryCode, District, Population)  VALUES (1686, 'Higashimurayama', 'JPN', 'Tokyo-to', 136970);\nDatabase State:\n- Table: City, Columns: [ID, Name, CountryCode, District, Population]\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]\n- Table: CountryLanguage, Columns: [CountryCode, Language, IsOfficial, Percentage]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `mountain` (`Mountain_ID`, `Name`, `Height`, `Prominence`, `Range`, `Country`)  VALUES (6, 'Ngaliema / Mt Stanley (Savoia Pk)', 4977.0, 110.0, 'Rwenzori', 'Uganda');\nDatabase State:\n- Table: `climber`, Columns: [`Climber_ID`, `Name`, `Country`, `Time`, `Points`, `Mountain_ID`]",
        "Response": "Table: `mountain`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes)  VALUES (160363, 183830, 111704, '2008-08-30 00:00:00', 63, 74, 'left', 'medium', 'medium', 63, 32, 38, 60, 28, 69, 49, 50, 38, 69, 77, 69, 73, 66, 78, 45, 48, 67, 46, 27, 52, 52, 58, 63, 42, 21, 21, 18, 1, 21, 37, 21, 21);\nDatabase State:\n- Table: League, Columns: [id, country_id, name]",
        "Response": "Table: `Player_Attributes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('protein translocase subunit secA CCNA_03164', 'microbial gene found in Caulobacter vibrioides NA1000', 'Caulobacter crescentus NA1000', '7331002', 'protein-coding gene', 'CCNA_03164', 'Protein translocase subunit secA CCNA_03164', 'gene', '3323463', 'forward strand', '3320692');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `seca_wing_scaffold_superfamily`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `cell_component`, `molecular_function`, `biological_process`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `freebase_id`, `ncbi_taxonomy_id`, `parent_taxon`, `instance_of`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`, `catalogue_of_life_id`]\n- Table: `encodes`, Columns: [`label`, `description`, `refseq_protein_id`, `uniprot_protein_id`, `found_in_taxon`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `encoded_by`, `part_of`, `instance_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `coordinate_location`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `heritage_designation`, `heritage_nl_id`)  VALUES ('Alexander Payne\u2019s Store', 'Parson''s Pond', '50.0325', 'Canada', 'fishing stage', 'Parson''s Pond', 'listed on the Fisheries Heritage Preservation Program', 'alexander-paynes-store-fisheries-heritage-preservation-program');\nDatabase State:\n- Table: `fishing_stage`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `heritage_designation`, `heritage_nl_id`]",
        "Response": "Table: `fishing_stage`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`City_ID`, `County_ID`, `Name`, `White`, `Black`, `Amerindian`, `Asian`, `Multiracial`, `Hispanic`)  VALUES (10, 3, 'Barranquitas', 86.0, 5.400000000000000355, 0.2999999999999999889, 0.0, 8.300000000000000711, 99.2999999999999972);\nDatabase State:\n- Table: `city`, Columns: [`City_ID`, `County_ID`, `Name`, `White`, `Black`, `Amerindian`, `Asian`, `Multiracial`, `Hispanic`]",
        "Response": "Table: `city`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `coordinate_location`, `instance_of`, `country`, `image`, `located_in_the_administrative_territorial_entity`, `mapycz_id`)  VALUES ('Rotunda', 'nan', 'Rotunda (Host\u00fdn)', '49.3791803', 'Holy Sepulchre chapel', 'Czech Republic', 'Host\u00fdn-kapli\u010dka-u-h\u0159bitova2013.jpg', 'Chval\u010dov', 'base&id=2078438');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `holy_sepulchre_chapel`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `whatdotheyknow_organisation_id`, `country`, `official_website`, `inception`, `applies_to_jurisdiction`)  VALUES ('HMP Woodhill Independent Monitoring Board', 'UK monitoring committee for HMP Woodhill', 'Independent Monitoring Board', 'hmp_woodhill_imb', 'United Kingdom', 'https://www.imb.org.uk/', '+2003-04-00T00:00:00Z', 'HM Prison Woodhill');\nDatabase State:\n- Table: `independent_monitoring_board`, Columns: [`label`, `description`, `instance_of`, `whatdotheyknow_organisation_id`, `country`, `official_website`, `inception`, `applies_to_jurisdiction`]",
        "Response": "Table: `governing_body`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `paragraphs` (id, ParagraphNum, PlainText, character_id, chapter_id)  VALUES (642959, 766, replace('Why, as you, my lord,\\nAn''t like your lordly lord-protectorship.','\\n',char(10)), 363, 18993);\nDatabase State:\n- Table: `chapters`, Columns: [id, Act, Scene, Description, work_id]",
        "Response": "Table: `paragraphs`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `freebase_id`, `instance_of`, `geonames_id`, `image`, `commons_category`, `gss_code_2011`, `toid`, `openstreetmap_relation_id`)  VALUES ('Monmouth', 'town and community in Monmouthshire, United Kingdom', 'United Kingdom', '51.81', 'Monmouthshire', '/m/0ck0k', 'town', '2642313.0', 'Monmouth from Livox Wood - geograph.org.uk - 203771.jpg', 'Monmouth, Wales', 'W04001076', '7000000000001685.0', '11005806.0');\nDatabase State:\n- Table: `flag`, Columns: [`label`, `description`, `instance_of`, `image`, `country`, `applies_to_jurisdiction`, `freebase_id`]\n- Table: `historic_county`, Columns: [`label`, `description`, `instance_of`, `country`, `flag_image`, `part_of`, `locator_map_image`, `shares_border_with`, `vision_of_britain_place_id`, `population`, `flag`, `different_from`, `coordinate_location`, `catalog_code`, `commons_category`, `factgrid_item_id`]\n- Table: `outhouse`, Columns: [`label`, `description`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `instance_of`, `heritage_designation`, `historic_county`]\n- Table: `political_border`, Columns: [`label`, `description`, `instance_of`, `country`, `part_of`, `flag_image`, `locator_map_image`, `shares_border_with`, `vision_of_britain_place_id`, `population`, `flag`, `coordinate_location`, `catalog_code`, `commons_category`, `factgrid_item_id`]\n- Table: `jurisdiction`, Columns: [`label`, `description`, `instance_of`, `country`, `part_of`, `flag_image`, `locator_map_image`, `shares_border_with`, `vision_of_britain_place_id`, `population`, `flag`, `coordinate_location`, `catalog_code`, `different_from`, `commons_category`, `factgrid_item_id`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `freebase_id`, `instance_of`, `geonames_id`, `image`, `commons_category`, `gss_code_2011`, `toid`, `openstreetmap_relation_id`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `cycling_archives_cyclist_id`, `given_name`, `date_of_birth`, `instance_of`, `occupation`, `freebase_id`, `image`, `country_of_citizenship`, `place_of_birth`, `participant_in`, `family_name`, `sport`, `procyclingstats_cyclist_id`, `cyclebase_cyclist_id`, `m\u00e9moire_du_cyclisme_cyclist_id`, `sex_or_gender`)  VALUES ('Chris Horner', 'road bicycle racer', '9228', 'Christopher', '+1971-10-23T00:00:00Z', 'human', 'sport cyclist', '/m/06jpgd', 'Christopher Horner CA 2011.jpg', 'United States of America', 'Okinawa', 'Vuelta a Espa\u00f1a', 'Horner', 'road bicycle racing', '140769.0', '7550.0', '13354.0', 'male');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `winner`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Payments (payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid)  VALUES (10, 13, 10, 'Credit Card', '1', '2018-03-23 13:24:33', 486.75, 681.2100000000000363);\nDatabase State:\n- Table: Customers, Columns: [customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire]\n- Table: Bookings, Columns: [booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding, amount_of_refund]\n- Table: View_Product_Availability, Columns: [product_id, booking_id, status_date, available_yn]",
        "Response": "Table: Payments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `topics_main_category`, `freebase_id`, `commons_category`, `viaf_id`, `geonames_id`, `population`, `official_website`, `image`, `locator_map_image`, `openstreetmap_relation_id`, `area`, `whos_on_first_id`, `worldcat_identities_id`)  VALUES ('Fife', 'council area of Scotland', 'United Kingdom', 'Scottish council area', 'Scotland', '56.25', 'Category:Fife', '/m/0l1k8', 'Fife', '152454871.0', '2649469', 373550.0, 'https://www.fife.gov.uk/', 'Fife House, Glenrothes.jpg', 'Fife in Scotland.svg', '1905841', 1325.02500000000009, '85684569.0', 'lccn-n81083048');\nDatabase State:\n- Table: `listening_station`, Columns: [`label`, `description`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `instance_of`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `hiring` (`Shop_ID`, `Employee_ID`, `Start_from`, `Is_full_time`)  VALUES (5, 5, '2013', 'T');\nDatabase State:\n- Table: `hiring`, Columns: [`Shop_ID`, `Employee_ID`, `Start_from`, `Is_full_time`]\n- Table: `shop`, Columns: [`Shop_ID`, `Name`, `Location`, `District`, `Number_products`, `Manager_name`]\n- Table: `employee`, Columns: [`Employee_ID`, `Name`, `Age`, `City`]",
        "Response": "Table: `hiring`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `school` (`School_ID`, `Grade`, `School`, `Location`, `Type`)  VALUES (4, '5th-12th grade', 'Punahou School', 'Honolulu, Hawaii', 'Private');\nDatabase State:\n- Table: `driver`, Columns: [`Driver_ID`, `Name`, `Party`, `Home_city`, `Age`]",
        "Response": "Table: `school`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `teacher` (`Teacher_ID`, `Name`, `Age`, `Hometown`)  VALUES (7, 'Lucy Wong', '39', 'Turton Urban District');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `teacher`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `locality_of_berlin` (`label`, `description`, `commons_category`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `freebase_id`, `gnd_id`, `instance_of`, `geonames_id`, `topics_main_category`, `viaf_id`, `image`, `commons_gallery`, `area`, `population`, `located_in_time_zone`, `elevation_above_sea_level`, `shares_border_with`, `locator_map_image`, `archinform_location_id`, `pronunciation_audio`, `whos_on_first_id`, `category_for_maps`, `museum_digital_place_id`, `detail_map`)  VALUES ('Obersch\u00f6neweide', 'locality of Berlin', 'Berlin-Obersch\u00f6neweide', 'Treptow-K\u00f6penick', 'Germany', '52.462', '/m/0bs55ws', '4340895-3', 'locality of Berlin', '2859103.0', 'Category:Berlin-Obersch\u00f6neweide', '126095710', 'Wilhelminenhofstr B-Oberschoeneweide 08-2017 img1.jpg', 'Berlin-Obersch\u00f6neweide', 6.179999999999999716, 18919.0, 'UTC+01:00', 36.0, 'Pl\u00e4nterwald', 'Berlin Treptow-K\u00f6penick Obersch\u00f6neweide.svg', '43325.0', 'LL-Q188 (deu)-Sebastian Wallroth-Berlin-Obersch\u00f6neweide.wav', '420784387.0', 'Category:Maps of Berlin-Obersch\u00f6neweide', '794.0', 'Obersch\u00f6neweide aus OpenStreetMap.jpg');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `locality_of_berlin`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO sales_in_weather (date, store_nbr, item_nbr, units)  VALUES ('2012-09-29', 32, 87, 0);\nDatabase State:\n- Table: weather, Columns: [station_nbr, date, tmax, tmin, tavg, depart, dewpoint, wetbulb, heat, cool, sunrise, sunset, codesum, snowfall, preciptotal, stnpressure, sealevel, resultspeed, resultdir, avgspeed]",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (student_id, capability, prof_id, salary)  VALUES (31, 3, 3, 'low');\nDatabase State:\n- Table: registration, Columns: [course_id, student_id, grade, sat]\n- Table: `course`, Columns: [course_id, name, credit, diff]\n- Table: prof, Columns: [prof_id, gender, first_name, last_name, email, popularity, teachingability, graduate_from]\n- Table: student, Columns: [student_id, f_name, l_name, phone_number, email, intelligence, gpa, type]\n- Table: RA, Columns: [student_id, capability, prof_id, salary]",
        "Response": "Table: RA"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `south_australian_state_election` (`label`, `description`, `instance_of`, `office_contested`, `followed_by`, `follows`, `point_in_time`, `country`, `applies_to_jurisdiction`, `freebase_id`)  VALUES ('1959 South Australian state election', 'South Australian general election held in 1959', 'South Australian state election', 'Member of the South Australian House of Assembly', '1962 South Australian state election', '1956 South Australian state election', '+1959-03-07T00:00:00Z', 'Australia', 'South Australia', '/m/0576f5b');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `followed_by`, `follows`, `point_in_time`, `country`, `applies_to_jurisdiction`, `freebase_id`, `office_contested`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `country`, `applies_to_jurisdiction`, `point_in_time`, `followed_by`, `follows`, `office_contested`, `freebase_id`]",
        "Response": "Table: `south_australian_state_election`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('I don''t know', 2016, 2028, 23);\nDatabase State:\n- Table: Question, Columns: [questiontext, questionid]",
        "Response": "Table: `Answer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Events (Event_ID, Service_ID, Event_Details)  VALUES (3, 5, 'Success');\nDatabase State:\n- Table: Participants_in_Events, Columns: [Event_ID, Participant_ID]\n- Table: Participants, Columns: [Participant_ID, Participant_Type_Code, Participant_Details]\n- Table: Events, Columns: [Event_ID, Service_ID, Event_Details]\n- Table: Services, Columns: [Service_ID, Service_Type_Code]",
        "Response": "Table: Events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `writing_system`, `iso_639_2_code`, `iso_639_3_code`, `freebase_id`, `ietf_language_tag`, `instance_of`, `glottolog_code`, `topics_main_category`, `ethnologuecom_language_code`, `loc_and_marc_vocabularies_id`, `exact_match`, `posix_locale_identifier`, `lingua_libre_id`)  VALUES ('Akan', 'language of Akan lands in Ghana', 'Central Tano', 'Latin script', 'aka', 'aka', '/m/02hw_03', 'ak', 'language', 'akan1250', 'Category:Akan language', 'aka', 'languages/aka', 'http://publications.europa.eu/resource/authority/language/AKA', 'ak', 'Q152');\nDatabase State:\n- Table: `iso_639_3_macrolanguage`, Columns: [`label`, `description`, `subclass_of`, `writing_system`, `iso_639_2_code`, `iso_639_3_code`, `freebase_id`, `ietf_language_tag`, `instance_of`, `glottolog_code`, `topics_main_category`, `ethnologuecom_language_code`, `loc_and_marc_vocabularies_id`, `exact_match`, `posix_locale_identifier`, `lingua_libre_id`]\n- Table: `writing_system`, Columns: [`label`, `description`, `instance_of`, `freebase_id`]",
        "Response": "Table: `iso_639_3_macrolanguage`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (address_id, address_details)  VALUES (6, 'US');\nDatabase State:\n- Table: Draft_Copies, Columns: [document_id, draft_number, copy_number]\n- Table: Ref_Document_Status, Columns: [document_status_code, document_status_description]\n- Table: Addresses, Columns: [address_id, address_details]\n- Table: Ref_Shipping_Agents, Columns: [shipping_agent_code, shipping_agent_name, shipping_agent_description]\n- Table: Circulation_History, Columns: [document_id, draft_number, copy_number, employee_id]\n- Table: Document_Drafts, Columns: [document_id, draft_number, draft_details]\n- Table: Roles, Columns: [role_code, role_description]\n- Table: Employees, Columns: [employee_id, role_code, employee_name, other_details]\n- Table: Documents, Columns: [document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details]\n- Table: Documents_Mailed, Columns: [document_id, mailed_to_address_id, mailing_date]",
        "Response": "Table: Addresses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `decays_to` (`label`, `description`, `subclass_of`, `instance_of`, `atomic_number`, `neutron_number`, `mass`, `mass_excess`, `binding_energy`, `wolfram_language_entity_code`, `decays_to`, `half_life`)  VALUES ('barium-124', 'isotope of barium', 'barium', 'isotope of barium', 56.0, 68.0, 123.9150936289999975, -79089.77499999999417, 1036121.680000000051, 'Entity[\"Isotope\", \"Barium124\"]', 'caesium-124', 11.0);\nDatabase State:\n- Table: `cerium`, Columns: [`label`, `description`, `subclass_of`, `atomic_number`, `neutron_number`, `decays_to`, `instance_of`]\n- Table: `decays_to`, Columns: [`label`, `description`, `subclass_of`, `instance_of`, `atomic_number`, `neutron_number`, `mass`, `mass_excess`, `binding_energy`, `wolfram_language_entity_code`, `decays_to`, `half_life`]",
        "Response": "Table: `decays_to`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`)  VALUES ('Homo sapiens', 'species of mammal', 'taxon', 'Homo sapiens', 'Homo', '9606');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `subclass_of`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Hypothetical protein smi_0265', 'microbial protein found in Streptococcus mitis B6', 'Streptococcus mitis B6', 'D3H6P5', 'hypothetical protein smi_0265', 'protein', 'protein', 'YP_003445405', 'Toxin-antitoxin system, RelE/ParE toxin domain superfamily');\nDatabase State:\n- Table: `toxin_antitoxin_system_yafq_like_toxin`, Columns: [`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `subclass_of`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `subclass_of`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `parent_taxon`, `instance_of`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `bacdive_id`, `itis_tsn`, `gram_staining`, `jstor_topic_id`, `irmng_id`, `lpsn_url`, `mesh_descriptor_id`, `mesh_tree_code`, `microsoft_academic_id`, `openalex_id`, `catalogue_of_life_id`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `toxin_antitoxin_system_yafq_like_toxin`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `paragraphs` (id, ParagraphNum, PlainText, character_id, chapter_id)  VALUES (642839, 351, 'What say''st thou? majesty! I am but grace.', 377, 18990);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `paragraphs`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2)  VALUES ('AND', 'Andorra', 'Europe', 'Southern Europe', 468.0, 1278, 78000, 83.5, 1630.0, NULL, 'Andorra', 'Parliamentary Coprincipality', '', 55, 'AD');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Country"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `galectin_carbohydrate_recognition_domain_protein_family` (`label`, `description`, `instance_of`, `encoded_by`, `ensembl_protein_id`, `uniprot_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `part_of`)  VALUES ('Galectin 12', 'mammalian protein found in Homo sapiens', 'protein', 'LGALS12', 'ENSP00000255684', 'Q96DT0', 'lactose binding', 'Galectin, carbohydrate recognition domain', 'Homo sapiens', 'NP_001136007', 'Concanavalin A-like lectin/glucanase domain superfamily');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `galectin_carbohydrate_recognition_domain_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, game_id, publisher_id)  VALUES (4779, 2525, 532);\nDatabase State:\n- Table: region_sales, Columns: [region_id, game_platform_id, num_sales]\n- Table: game_publisher, Columns: [id, game_id, publisher_id]\n- Table: game, Columns: [id, genre_id, game_name]\n- Table: region, Columns: [id, region_name]\n- Table: genre, Columns: [id, genre_name]\n- Table: platform, Columns: [id, platform_name]\n- Table: game_platform, Columns: [id, game_publisher_id, platform_id, release_year]\n- Table: publisher, Columns: [id, publisher_name]",
        "Response": "Table: game_publisher"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (rID)  VALUES (208, 'Ashley White');\nDatabase State:\n- Table: Rating, Columns: [rID]\n- Table: Movie, Columns: [mID]\n- Table: Reviewer, Columns: [rID]",
        "Response": "Table: Reviewer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `instance_of`)  VALUES ('Bongaigaon District Judiciary', 'Judiciary in Assam', 'India', 'judiciary');\nDatabase State:\n- Table: `head_of_state`, Columns: [`label`, `description`, `instance_of`, `date_of_birth`, `place_of_birth`, `country_of_citizenship`, `given_name`, `commons_category`, `occupation`, `educated_at`, `name_in_native_language`, `languages_spoken_written_or_signed`, `viaf_id`, `gnd_id`, `image`, `position_held`, `library_of_congress_authority_id`, `worldcat_identities_id`, `sex_or_gender`, `freebase_id`, `opensanctions_id`, `religion_or_worldview`]\n- Table: `country`, Columns: [`label`, `description`, `great_russian_encyclopedia_online_id`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `coordinates_of_southernmost_point`, `wikimedia_outline`, `ndl_authority_id`, `viaf_id`, `new_york_times_topic_id`, `babelnet_id`, `geonames_id`, `gnd_id`, `unicode_character`, `category_of_associated_people`, `emergency_phone_number`, `unesco_thesaurus_id`, `electrical_plug_type`, `licence_plate_code`, `hashtag`, `coordinates_of_westernmost_point`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `official_name`, `office_held_by_head_of_government`, `isni`, `quora_topic_id`, `curlie_id`, `country`, `native_label`, `ituisoiec_object_identifier`, `basic_form_of_government`, `musicbrainz_area_id`, `has_quality`, `mesh_descriptor_id`, `insee_countries_and_foreign_territories_code`, `diplomatic_relation`, `commons_gallery`, `legislative_body`, `inception`, `civicus_monitor_country_entry`, `omegawiki_defined_meaning`, `history_of_topic`, `gran_enciclop\u00e8dia_catalana_id`, `biblioth\u00e8que_nationale_de_france_id`, `stw_thesaurus_for_economics_id`, `official_language`, `continent`, `capital`, `official_website`, `coat_of_arms`, `subreddit`, `demonym`, `geoshape`, `openstreetmap_relation_id`, `on_focus_list_of_wikimedia_project`, `wipo_st3`, `national_library_of_israel_id_old`, `coordinates_of_northernmost_point`, `coordinates_of_easternmost_point`, `nkcr_aut_id`, `mobile_country_code`, `total_fertility_rate`, `maritime_identification_digits`, `nese_id`, `us_national_archives_identifier`, `shares_border_with`, `marriageable_age`, `topics_main_category`, `le_monde_diplomatique_subject_id`, `category_of_people_buried_here`, `locator_map_image`, `age_of_majority`, `dewey_decimal_classification`, `area`, `ioc_country_code`, `member_of`, `store_norske_leksikon_id`, `unemployment_rate`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `gs1_country_code`, `page_banner`, `category_for_films_shot_at_this_location`, `mains_voltage`, `executive_body`, `category_for_people_who_died_here`, `currency`, `yso_id`, `anthem`, `office_held_by_head_of_state`, `life_expectancy`, `part_of`, `commons_category`, `top_level_internet_domain`, `instance_of`, `highest_point`, `category_for_people_born_here`, `short_name`, `driving_side`, `lowest_point`, `iso_3166_1_numeric_code`, `located_in_time_zone`, `pronunciation_audio`, `idref_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `country_calling_code`, `freebase_id`, `statoids_id`, `library_of_congress_authority_id`, `iso_3166_1_alpha_2_code`, `flag`, `coordinate_location`, `fips_10_4_countries_and_regions`, `central_bank`, `described_by_source`, `brockhaus_enzyklop\u00e4die_online_id`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `iab_code`, `language_used`, `whos_on_first_id`, `dr_topic_id`, `treccanis_dizionario_di_storia_id`, `hds_id`, `geonlp_id`, `analysis_policy_observatory_term_id`, `category_for_maps`, `french_vikidia_id`, `spanish_vikidia_id`, `eurovoc_id`, `worldcat_identities_id`, `open_data_portal`, `kbpedia_id`, `grove_art_online_id`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `economy_of_topic`, `uk_parliament_thesaurus_id`, `tasteatlas_id`, `github_topic`, `democracy_index`, `wordnet_31_synset_id`, `namuwiki_id`, `demographics_of_topic`, `inaturalist_place_id`, `joconde_location_id`, `zhihu_topic_id`, `yle_topic_id`, `ysa_id`, `krugosvet_article`, `the_world_factbook_country_id`, `national_library_of_israel_j9u_id`, `head_of_state`, `head_of_government`, `flag_image`, `coat_of_arms_image`, `museum_digital_place_id`, `wikisimpsons_id`, `online_pwn_encyclopedia_id`, `den_store_danske_id`, `postimees_topic_id`, `urban_electric_transit_country_id`, `bbc_news_topic_id`, `culture`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `world_encyclopedia_of_puppetry_arts_id`, `obo_gazetteer_id`, `openstreetmap_element`, `happy_planet_index_score`, `gini_coefficient`, `asc_leiden_thesaurus_id`, `m49_code`, `rkd_thesaurus_id`]",
        "Response": "Table: `judiciary`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `taxon_rank`, `parent_taxon`, `taxon_name`, `instance_of`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `encyclopedia_of_life_id`, `itis_tsn`, `bacdive_id`, `gram_staining`, `mesh_descriptor_id`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`, `catalogue_of_life_id`)  VALUES ('Pseudomonas putida', 'species of bacterium', 'species', 'Pseudomonas', 'Pseudomonas putida', 'taxon', '/m/045ny3', '303', '3223145.0', '973141.0', '965297.0', '12871.0', 'Gram-negative bacteria', 'D016958', '11263822.0', 'http://www.bacterio.net/pseudomonas.html#putida', '2780543182.0', '4P3S2');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `school_bus` (`School_ID`, `Driver_ID`, `Years_Working`, `If_full_time`)  VALUES (1, 10, 10, 'F');\nDatabase State:\n- Table: `school_bus`, Columns: [`School_ID`, `Driver_ID`, `Years_Working`, `If_full_time`]\n- Table: `school`, Columns: [`School_ID`, `Grade`, `School`, `Location`, `Type`]",
        "Response": "Table: `school_bus`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderDetailID, OrderID, ProductID, Quantity)  VALUES (369, 10387, 28, 6);\nDatabase State:\n- Table: Shippers, Columns: [ShipperID, ShipperName, Phone]\n- Table: Customers, Columns: [CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country]\n- Table: OrderDetails, Columns: [OrderDetailID, OrderID, ProductID, Quantity]\n- Table: Products, Columns: [ProductID, ProductName, SupplierID, CategoryID, Unit, Price]\n- Table: Categories, Columns: [CategoryID, CategoryName, Description]\n- Table: Suppliers, Columns: [SupplierID, SupplierName, ContactName, Address, City, PostalCode, Country, Phone]\n- Table: Orders, Columns: [OrderID, CustomerID, EmployeeID, OrderDate, ShipperID]",
        "Response": "Table: OrderDetails"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth)  VALUES (2302, 'Seychelle Gabriel', '1991-03-25', 'Burbank', 'USA', 63, 'As though being tapped to portray the young Eva Mendes in Frank Miller''s The Spirit wasn''t enough to jump start her career, Seychelle Gabriel has gone on to several great roles in many high-profile projects. Born in Burbank, Calif., Gabriel embarked upon a performing arts career at a very early age. She was just three weeks old when she first ...', 'Female', NULL, NULL);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `work` (`label`, `description`, `instance_of`, `takes_place_in_fictional_universe`, `part_of_the_series`, `characters`, `title`, `fandom_article_id`, `media_franchise`)  VALUES ('Star Trek: The Original Series', 'American science fiction television series', 'television series', 'Star Trek universe', 'nan', 'James T. Kirk', 'Star Trek', 'memory-alpha:Star_Trek:_The_Original_Series', 'Star Trek');\nDatabase State:\n- Table: `starfleet_ship`, Columns: [`label`, `description`, `from_narrative_universe`, `instance_of`, `pennant_number`, `present_in_work`, `fandom_article_id`, `media_franchise`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `coordinate_location`, `topics_main_category`, `locator_map_image`, `instance_of`, `freebase_id`, `image`, `population`, `geonames_id`, `official_website`, `shares_border_with`, `capital`, `inception`, `area`, `us_national_archives_identifier`, `viaf_id`, `archinform_location_id`, `category_of_associated_people`, `whos_on_first_id`, `category_for_maps`, `water_as_percent_of_area`, `native_label`, `worldcat_identities_id`, `openstreetmap_relation_id`, `getty_thesaurus_of_geographic_names_id`, `inaturalist_place_id`, `musicbrainz_area_id`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`]\n- Table: `capital_city`, Columns: [`label`, `description`, `instance_of`, `country`, `commons_category`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `freebase_id`, `geonames_id`, `musicbrainz_area_id`, `elevation_above_sea_level`, `image`, `postal_code`, `official_website`, `locator_map_image`, `curlie_id`, `located_in_time_zone`, `area`, `quora_topic_id`, `archinform_location_id`, `capital_of`, `whos_on_first_id`, `viaf_id`, `factgrid_item_id`, `population`, `topics_main_category`, `encyclop\u00e6dia_britannica_online_id`, `category_of_associated_people`, `inception`, `worldcat_identities_id`, `national_library_of_israel_j9u_id`]",
        "Response": "Table: `work`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Crime (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11496380, 'JB501456', '11/3/2018 3:35', '0000X N LARAMIE AVE', '143A', 'SIDEWALK', 'TRUE', 'FALSE', 1522, 15, 28, 25, '15', '41.88189247', '-87.75512125');\nDatabase State:\n- Table: IUCR, Columns: [iucr_no, primary_description, secondary_description, index_code]\n- Table: Ward, Columns: [ward_no, alderman_first_name, alderman_last_name, alderman_name_suffix, ward_office_address, ward_office_zip, ward_email, ward_office_phone, ward_office_fax, city_hall_office_room, city_hall_office_phone, city_hall_office_fax, Population]\n- Table: Crime, Columns: [report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude]\n- Table: District, Columns: [district_no, district_name, address, zip_code, commander, email, phone, fax, tty, twitter]\n- Table: FBI_Code, Columns: [fbi_code_no, title, description, crime_against]\n- Table: Community_Area, Columns: [community_area_no, community_area_name, side, population]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Guests (guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth)  VALUES (1, 'Male', 'Kip', 'DuBuque', '1995-11-04 07:09:57');\nDatabase State:\n- Table: Guests, Columns: [guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth]\n- Table: View_Unit_Status, Columns: [apt_id, apt_booking_id, status_date, available_yn]",
        "Response": "Table: Guests"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (player_id, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp)  VALUES ('wrighgl01', 1926, 1, 'PIT', 'NL', 119, 458, 73, 141, 15, 15, 8, 77, 6, '', 19, 26, '', 0, 16, '', '');\nDatabase State:\n- Table: player_award_vote, Columns: [award_id, year, league_id, player_id, points_won, points_max, votes_first]\n- Table: fielding_outfield, Columns: [player_id, year, stint, glf, gcf, grf]\n- Table: player_award, Columns: [player_id, tie, notes]\n- Table: pitching, Columns: [player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]\n- Table: manager, Columns: [player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]\n- Table: player_college, Columns: [player_id, college_id, year]\n- Table: all_star, Columns: [player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]\n- Table: batting_postseason, Columns: [year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]\n- Table: manager_award, Columns: [player_id, award_id, year, league_id, tie, notes]\n- Table: batting, Columns: [player_id, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]\n- Table: appearances, Columns: [year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]\n- Table: fielding, Columns: [player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]\n- Table: home_game, Columns: [year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]\n- Table: team_franchise, Columns: [franchise_id, franchise_name, active, na_assoc]\n- Table: player, Columns: [player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]\n- Table: team, Columns: [year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]\n- Table: pitching_postseason, Columns: [player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]\n- Table: college, Columns: [college_id, name_full, city, state, country]\n- Table: team_half, Columns: [year, league_id, team_id, half, div_id, div_win, rank, g, w, l]\n- Table: manager_award_vote, Columns: [award_id, year, league_id, player_id, points_won, points_max, votes_first]\n- Table: postseason, Columns: [year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]\n- Table: manager_half, Columns: [player_id, year, team_id, league_id, inseason, half, g, w, l, rank]",
        "Response": "Table: batting"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('preprotein translocase subunit SecB NRG857_17955', 'microbial gene found in Escherichia coli O83:H1 str. NRG 857C', 'Escherichia coli O83:H1 str. NRG 857C', '12876634', 'gene', 'NRG857_17955', 'Preprotein translocase subunit SecB NRG857_17955', 'gene', '3804677', 'reverse strand', '3804210');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`id`, `name`, `Operating_system`, `Client`, `Connection`)  VALUES (18, 'WinGate', 'Windows (2000 onwards)', 'All', 'Any');\nDatabase State:\n- Table: `accelerator_compatible_browser`, Columns: [`accelerator_id`, `browser_id`, `compatible_since_year`]\n- Table: `Web_client_accelerator`, Columns: [`id`, `name`, `Operating_system`, `Client`, `Connection`]",
        "Response": "Table: `Web_client_accelerator`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `hiring` (`Shop_ID`, `Employee_ID`, `Start_from`, `Is_full_time`)  VALUES (8, 3, '2011', 'F');\nDatabase State:\n- Table: `shop`, Columns: [`Shop_ID`, `Name`, `Location`, `District`, `Number_products`, `Manager_name`]",
        "Response": "Table: `hiring`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('50S ribosomal protein L9 DR_0102', 'microbial gene found in Deinococcus radiodurans R1', '1799186', 'gene', '50S ribosomal protein L9 DR_0102', 'Deinococcus radiodurans R1', 'forward strand', '102148', '101708', 'gene', 'DR_0102');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO people (`Customer ID`, `Customer Name`, Segment, Country, City, State, `Postal Code`, Region)  VALUES ('DJ-13420', 'Denny Joy', 'Corporate', 'United States', 'Milwaukee', 'Wisconsin', 53209, 'Central');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: people"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO actor (ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth)  VALUES (775, 'Henry Czerny', '1959-02-08', 'Toronto', 'Canada', 69, 'Henry Czerny was born on February 8, 1959 in Toronto, Ontario, Canada. He is an actor, known for Mission: Impossible (1996), Clear and Present Danger (1994) and The Pink Panther (2006). He has been married to Claudine Cassidy since 2001. They have one child.', NULL, NULL, '$6,000,000.00');\nDatabase State:\n- Table: characters, Columns: [MovieID, ActorID, `Character Name`, creditOrder, pay, screentime]",
        "Response": "Table: actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Elimination` (`Elimination_ID`, `Wrestler_ID`, `Team`, `Eliminated_By`, `Elimination_Move`, `Time`)  VALUES ('6', '9', 'Team Orton', 'Batista', 'Spear', '14:32');\nDatabase State:\n- Table: `wrestler`, Columns: [`Wrestler_ID`, `Name`, `Reign`, `Days_held`, `Location`, `Event`]",
        "Response": "Table: `Elimination`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `country`, `coordinate_location`, `instance_of`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `curlie_id`, `page_banner`, `musicbrainz_area_id`, `freebase_id`, `image`, `geonames_id`, `gnd_id`, `woeid`, `local_dialing_code`, `located_in_time_zone`, `vision_of_britain_place_id`, `toid`, `encyclop\u00e6dia_britannica_online_id`, `capital_of`, `population`, `postal_code`, `library_of_congress_authority_id`, `viaf_id`, `whos_on_first_id`, `vision_of_britain_unit_id`, `gazetteer_for_scotland_place_id`, `gss_code_2011`, `historic_county`, `worldcat_identities_id`, `described_by_source`, `factgrid_item_id`, `national_library_of_israel_j9u_id`, `store_norske_leksikon_id`, `os_grid_reference`)  VALUES ('Stornoway', 'town on the Isle of Lewis, in the Outer Hebrides, Scotland, UK', 'Stornoway', 'United Kingdom', '58.209', 'town', 'Outer Hebrides', 'Category:Stornoway', 'Regional/Europe/United_Kingdom/Scotland/Western_Isles/Isle_of_Lewis/Stornoway/', 'Stornoway page banner.jpg', '2d0bf69e-dca0-4304-ade2-7738cf81198f', '/m/02l6bt', 'Stornoway Harbour.jpg', '2636790', '3011518-8', '36349.0', '1851.0', 'UTC\u00b100:00', '17083', '4000000074577797', 'nan', 'Outer Hebrides', 8038.0, 'HS1', 'n88032142', '133792992.0', '101872741', '10362131.0', 'towns/townfirst612', 'nan', 'Ross-shire', 'lccn-n88032142', 'The Nuttall Encyclop\u00e6dia', 'Q214349', '987007567210005171', 'Stornoway', 'NB426340');\nDatabase State:\n- Table: `political_border`, Columns: [`label`, `description`, `commons_category`, `coordinate_location`, `country`, `freebase_id`, `located_in_the_administrative_territorial_entity`, `instance_of`, `population`, `shares_border_with`, `vision_of_britain_place_id`, `locator_map_image`, `described_by_source`, `catalog_code`, `factgrid_item_id`]",
        "Response": "Table: `capital_city`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `biological_process`, `molecular_function`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('UDP-glucose 6-dehydrogenase KPHS_35540', 'microbial protein found in Klebsiella pneumoniae subsp. pneumoniae HS11286', 'protein', 'A0A0H3GV84', 'UDP-glucose 6-dehydrogenase KPHS_35540', 'Klebsiella pneumoniae subsp. pneumoniae HS11286', 'polysaccharide biosynthetic process', 'UDP-glucose 6-dehydrogenase activity', 'UDP-glucose/GDP-mannose dehydrogenase, dimerisation', 'protein', 'YP_005227854', 'NAD(P)-binding domain superfamily');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `encodes`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `biological_process`, `molecular_function`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `udp_glucose_6_dehydrogenase_bacterial_type`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Students (student_id, student_details)  VALUES (121, 'Martin');\nDatabase State:\n- Table: Candidate_Assessments, Columns: [candidate_id, qualification, assessment_date, asessment_outcome_code]\n- Table: Students, Columns: [student_id, student_details]\n- Table: Courses, Columns: [course_id, course_name, course_description, other_details]",
        "Response": "Table: Students"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO taughtBy (course_id, p_id)  VALUES (18, 213);\nDatabase State:\n- Table: `advisedBy`, Columns: [p_id, p_id_dummy]",
        "Response": "Table: taughtBy"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed)  VALUES (3, 1, '0', 'BUL', 'MED', 'Mavis', '8', '2008-05-19 15:54:49', '1', '8.04', '2017-06-25 10:14:05', '2018-03-07 21:45:43', '2018-03-25 10:25:46');\nDatabase State:\n- Table: Charges, Columns: [charge_id, charge_type, charge_amount]\n- Table: Treatment_Types, Columns: [treatment_type_code, treatment_type_description]\n- Table: Professionals, Columns: [professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number]\n- Table: Breeds, Columns: [breed_code, breed_name]\n- Table: Treatments, Columns: [treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment]\n- Table: Dogs, Columns: [dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed]\n- Table: Sizes, Columns: [size_code, size_description]\n- Table: Owners, Columns: [owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number]",
        "Response": "Table: Dogs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Reviews` (business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length)  VALUES (15300, 29779, 4, 'None', 'Low', 'None', 'Medium');\nDatabase State:\n- Table: Days, Columns: [day_id, day_of_week]\n- Table: `Users_Compliments`, Columns: [compliment_id, user_id, number_of_compliments]\n- Table: `Elite`, Columns: [user_id, year_id]\n- Table: `Users`, Columns: [user_id, user_yelping_since_year, user_average_stars, user_votes_funny, user_votes_useful, user_votes_cool, user_review_count, user_fans]\n- Table: Categories, Columns: [category_id, category_name]\n- Table: `Business`, Columns: [business_id, active, city, state, stars, review_count]\n- Table: `Reviews`, Columns: [business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length]\n- Table: `Business_Categories`, Columns: [business_id, category_id]\n- Table: Compliments, Columns: [compliment_id, compliment_type]\n- Table: `Business_Hours`, Columns: [business_id, day_id, opening_time, closing_time]\n- Table: Attributes, Columns: [attribute_id, attribute_name]\n- Table: `Tips`, Columns: [business_id, user_id, likes, tip_length]\n- Table: Years, Columns: [year_id, actual_year]\n- Table: `Checkins`, Columns: [business_id, day_id, label_time_0, label_time_1, label_time_2, label_time_3, label_time_4, label_time_5, label_time_6, label_time_7, label_time_8, label_time_9, label_time_10, label_time_11, label_time_12, label_time_13, label_time_14, label_time_15, label_time_16, label_time_17, label_time_18, label_time_19, label_time_20, label_time_21, label_time_22, label_time_23]\n- Table: `Business_Attributes`, Columns: [attribute_id, business_id, attribute_value]",
        "Response": "Table: `Reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (userid, movieid, rating)  VALUES (498, 1733566, '4');\nDatabase State:\n- Table: `movies2directors`, Columns: [movieid, directorid, genre]\n- Table: `actors`, Columns: [actorid, a_gender, a_quality]\n- Table: `directors`, Columns: [directorid, d_quality, avg_revenue]\n- Table: `movies2actors`, Columns: [movieid, actorid, cast_num]\n- Table: users, Columns: [userid, age, u_gender, occupation]",
        "Response": "Table: `u2base`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`People_ID`, `Name`, `Height`, `Weight`, `Home Town`)  VALUES (3, 'Tyrone Brayan', 6.700000000000000177, 220.0, 'Placentia, CA');\nDatabase State:\n- Table: `perpetrator`, Columns: [`Perpetrator_ID`, `People_ID`, `Date`, `Year`, `Location`, `Country`, `Killed`, `Injured`]",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `antigen_presentation_folding_assembly_and_peptide_loading_of_class_i_mhc` (`label`, `description`, `cites_work`, `instance_of`, `found_in_taxon`, `reactome_id`, `part_of`, `exact_match`, `has_parts`)  VALUES ('Capturing cargo and formation of prebudding complex', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-983426)', 'Dynamics of transitional endoplasmic reticulum sites in vertebrate cells', 'biological process', 'Homo sapiens', 'R-HSA-983426', 'Antigen Presentation: Folding, assembly and peptide loading of class I MHC', 'https://identifiers.org/reactome:R-HSA-983426', 'Antigen peptide bound class I MHC [integral component of lumenal side of endoplasmic reticulum membrane]');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `antigen_presentation_folding_assembly_and_peptide_loading_of_class_i_mhc`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO employee (ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID)  VALUES ('000-01-0000', 'Milgrom', 'Patricia', '10/1/04', 'US$57,500.00', 'F', 'Average', 2, 2);\nDatabase State:\n- Table: location, Columns: [locationID, locationcity, address, state, zipcode, officephone]\n- Table: employee, Columns: [ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID]\n- Table: position, Columns: [positionID, positiontitle, educationrequired, minsalary, maxsalary]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Furniture_ID`, `Name`, `Num_of_Component`, `Market_Rate`)  VALUES (2, 'Chabudai', 4, 40.0);\nDatabase State:\n- Table: `manufacturer`, Columns: [`Manufacturer_ID`, `Open_Year`, `Name`, `Num_of_Factories`, `Num_of_Shops`]",
        "Response": "Table: `furniture`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO city (ID)  VALUES (3252, 'Hims', 'SYR', 'Hims', 507404);\nDatabase State:\n- Table: country, Columns: [Code]\n- Table: city, Columns: [ID]\n- Table: countrylanguage, Columns: [CountryCode]",
        "Response": "Table: city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `on_focus_list_of_wikimedia_project`, `instance_of`)  VALUES ('freedom of religion in Kuwait', 'nan', 'Kuwait', 'WikiProject Human Rights', 'freedom of religion by country');\nDatabase State:\n- Table: `head_of_state`, Columns: [`label`, `description`, `viaf_id`, `commons_category`, `date_of_birth`, `place_of_birth`, `country_of_citizenship`, `instance_of`, `position_held`, `occupation`, `given_name`, `image`, `languages_spoken_written_or_signed`, `name_in_native_language`, `educated_at`, `sex_or_gender`]",
        "Response": "Table: `freedom_of_religion_by_country`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO AREA_CODE_STATE (area_code)  VALUES (941, 'FL');\nDatabase State:\n- Table: VOTES, Columns: [vote_id]\n- Table: CONTESTANTS, Columns: [contestant_number]",
        "Response": "Table: AREA_CODE_STATE"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `climber` (`Climber_ID`, `Name`, `Country`, `Time`, `Points`, `Mountain_ID`)  VALUES (4, 'Jean Claude Castella', 'Switzerland', '1:17.16.0', 8.0, 2);\nDatabase State:\n- Table: `mountain`, Columns: [`Mountain_ID`, `Name`, `Height`, `Prominence`, `Range`, `Country`]\n- Table: `climber`, Columns: [`Climber_ID`, `Name`, `Country`, `Time`, `Points`, `Mountain_ID`]",
        "Response": "Table: `climber`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `competition_record` (`Competition_ID`, `Farm_ID`, `Rank`)  VALUES (2, 4, 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `competition_record`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Products (product_id, product_category, product_name)  VALUES (3, 'Books', 'Four Seasons');\nDatabase State:\n- Table: Mailshot_Customers, Columns: [mailshot_id, customer_id, outcome_code, mailshot_customer_date]\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password]\n- Table: Customer_Addresses, Columns: [customer_id, premise_id, date_address_from, address_type_code, date_address_to]\n- Table: Premises, Columns: [premise_id, premises_type, premise_details]\n- Table: Order_Items, Columns: [item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity]\n- Table: Mailshot_Campaigns, Columns: [mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges]\n- Table: Products, Columns: [product_id, product_category, product_name]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Member_ID`, `Member_Name`, `Party_ID`, `In_office`)  VALUES (11, 'Phil Barresi', '3', '1996\u20132007');\nDatabase State:\n- Table: `party_events`, Columns: [`Event_ID`, `Event_Name`, `Party_ID`, `Member_in_charge_ID`]\n- Table: `party`, Columns: [`Party_ID`, `Minister`, `Took_office`, `Left_office`, `Region_ID`, `Party_name`]",
        "Response": "Table: `member`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `company` (`Company_ID`, `Rank`, `Company`, `Headquarters`, `Main_Industry`, `Sales_billion`, `Profits_billion`, `Assets_billion`, `Market_Value`)  VALUES (2, 3, 'General Electric', 'USA', 'Conglomerate', 147.3000000000000113, 14.19999999999999929, 717.2000000000000454, 213.6999999999999887);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `company`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `people` (`People_ID`, `Age`, `Name`, `Nationality`, `Graduation_College`)  VALUES (4, 31, 'Darryl Kennedy', 'United States', 'Oklahoma');\nDatabase State:\n- Table: `people`, Columns: [`People_ID`, `Age`, `Name`, `Nationality`, `Graduation_College`]\n- Table: `company`, Columns: [`Company_ID`, `Name`, `Headquarters`, `Industry`, `Sales_in_Billion`, `Profits_in_Billion`, `Assets_in_Billion`, `Market_Value_in_Billion`]\n- Table: `employment`, Columns: [`Company_ID`, `People_ID`, `Year_working`]",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, price)  VALUES (105, 20000.0);\nDatabase State:\n- Table: data, Columns: [ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name]",
        "Response": "Table: price"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details)  VALUES (6, 10, 'Debit', '5102229294602335', '2017-01-01 13:34:04', '2018-03-11 01:12:33', '5513587359761653');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Customers_Cards"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `topics_main_category`, `freebase_id`, `gnd_id`, `viaf_id`, `instance_of`, `quora_topic_id`, `has_parts`, `unesco_thesaurus_id`, `topics_main_wikimedia_portal`, `eurovoc_id`, `worldcat_identities_id`, `different_from`, `coordinate_location`, `locator_map_image`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`)  VALUES ('Latin America', 'region of the Americas where Romance languages are primarily spoken', 'Latin America', 'Category:Latin America', '/m/04pnx', '4074032-8', '3834151433038256420005', 'geographic region', 'Latin-America', 'Caribbean', 'concept966', 'Portal:Latin America', '1632.0', 'viaf-3834151433038256420005', 'Middle America', '-1.106889', 'Latin America (orthographic projection).svg', 'sh85074879', '9.870075557822052e+17');\nDatabase State:\n- Table: `country`, Columns: [`label`, `description`, `great_russian_encyclopedia_online_id`, `coordinates_of_southernmost_point`, `new_york_times_topic_id`, `gnd_id`, `category_of_associated_people`, `emergency_phone_number`, `electrical_plug_type`, `licence_plate_code`, `hashtag`, `babelnet_id`, `office_held_by_head_of_government`, `curlie_id`, `native_label`, `musicbrainz_area_id`, `public_holiday`, `comic_vine_id`, `insee_countries_and_foreign_territories_code`, `vat_rate`, `diplomatic_relation`, `flag_image`, `commons_gallery`, `viaf_id`, `history_of_topic`, `capital`, `subreddit`, `biblioteca_nacional_de_espa\u00f1a_id`, `openstreetmap_relation_id`, `mobile_country_code`, `maritime_identification_digits`, `nkcr_aut_id`, `asc_leiden_thesaurus_id`, `marriageable_age`, `category_of_people_buried_here`, `motto_text`, `geoshape`, `coordinates_of_easternmost_point`, `le_monde_diplomatique_subject_id`, `retirement_age`, `member_of`, `unemployment_rate`, `railway_traffic_side`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `office_held_by_head_of_state`, `commons_category`, `shares_border_with`, `us_national_archives_identifier`, `nalt_id`, `treccani_id`, `iso_3166_1_numeric_code`, `coordinates_of_westernmost_point`, `country_calling_code`, `stw_thesaurus_for_economics_id`, `statoids_id`, `flag`, `fips_10_4_countries_and_regions`, `dagens_nyheter_topic_id`, `isni`, `nese_id`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `geonames_id`, `unicode_character`, `unesco_thesaurus_id`, `ethnic_group`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `official_name`, `quora_topic_id`, `mesh_descriptor_id`, `guardian_topic_id`, `basic_form_of_government`, `coat_of_arms_image`, `ituisoiec_object_identifier`, `legislative_body`, `trunk_prefix`, `freebase_id`, `official_language`, `replaces`, `continent`, `coat_of_arms`, `age_of_majority`, `national_library_of_israel_id_old`, `on_focus_list_of_wikimedia_project`, `wipo_st3`, `coordinates_of_northernmost_point`, `has_quality`, `iso_3166_1_alpha_2_code`, `total_fertility_rate`, `area`, `store_norske_leksikon_id`, `compulsory_education_minimum_age`, `different_from`, `topics_main_category`, `biblioth\u00e8que_nationale_de_france_id`, `locator_map_image`, `bbc_things_id`, `head_of_government`, `ioc_country_code`, `fast_id`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `page_banner`, `category_for_films_shot_at_this_location`, `mains_voltage`, `executive_body`, `anthem`, `highest_judicial_authority`, `life_expectancy`, `top_level_internet_domain`, `instance_of`, `highest_point`, `category_for_people_born_here`, `driving_side`, `lowest_point`, `civicus_monitor_country_entry`, `pronunciation_audio`, `idref_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `library_of_congress_authority_id`, `coordinate_location`, `described_by_source`, `brockhaus_enzyklop\u00e4die_online_id`, `iab_code`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `language_used`, `dr_topic_id`, `world_encyclopedia_of_puppetry_arts_id`, `wolfram_language_entity_code`, `gran_enciclop\u00e8dia_catalana_id`, `whos_on_first_id`, `orthodox_encyclopedia_id`, `participant_in`, `inaturalist_place_id`, `omegawiki_defined_meaning`, `hds_id`, `gs1_country_code`, `culture`, `geonlp_id`, `analysis_policy_observatory_term_id`, `category_for_maps`, `treccanis_dizionario_di_storia_id`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `basque_vikidia_id`, `italian_vikidia_id`, `larousse_id`, `worldcat_identities_id`, `eurovoc_id`, `part_of`, `open_data_portal`, `kbpedia_id`, `inception`, `gynopedia_id`, `rkd_thesaurus_id`, `pm20_geo_code`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `economy_of_topic`, `uk_parliament_thesaurus_id`, `edition_humboldt_digital_id`, `tasteatlas_id`, `sapa_id`, `bhcl_uuid`, `github_topic`, `namuwiki_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `cna_topic_id`, `ysa_id`, `yle_topic_id`, `bbc_news_topic_id`, `joconde_location_id`, `topics_main_template`, `armeniapedia_id`, `zhihu_topic_id`, `idaigazetteer_id`, `encyclopedia_of_the_history_of_ukraine_id`, `encyclopedia_of_modern_ukraine_id`, `den_store_danske_id`, `krugosvet_article`, `schoenberg_database_of_manuscripts_place_id`, `colon_classification`, `national_library_of_israel_j9u_id`, `democracy_index`, `online_pwn_encyclopedia_id`, `postimees_topic_id`, `head_of_state`, `der_spiegel_topic_id`, `google_arts_culture_entity_id`, `gyldendals_teaterleksikon_id`, `museum_digital_place_id`, `wikisimpsons_id`, `urban_electric_transit_country_id`, `image`, `personality_database_profile_id`, `m49_code`, `short_name`, `demonym`, `country`, `official_website`, `alltrails_trail_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `central_bank`, `gini_coefficient`, `obo_gazetteer_id`, `openstreetmap_element`, `happy_planet_index_score`, `ipa_transcription`, `giant_bomb_id`, `number_of_out_of_school_children`, `the_top_tens_id`, `grove_art_online_id`, `dewey_decimal_classification`, `the_world_factbook_country_id`]\n- Table: `wholesale_market`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`]\n- Table: `head_of_state`, Columns: [`label`, `description`, `commons_category`, `viaf_id`, `isni`, `library_of_congress_authority_id`, `country_of_citizenship`, `image`, `place_of_birth`, `date_of_birth`, `occupation`, `position_held`, `educated_at`, `instance_of`, `freebase_id`, `munzinger_person_id`, `languages_spoken_written_or_signed`, `given_name`, `native_language`, `award_received`, `signature`, `spouse`, `family_name`, `residence`, `name_in_native_language`, `quora_topic_id`, `religion_or_worldview`, `sex_or_gender`, `topics_main_category`, `treccani_id`, `worldcat_identities_id`, `plwabn_id`, `store_norske_leksikon_id`, `child`, `opensanctions_id`, `national_library_of_israel_j9u_id`, `birth_name`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `population`, `located_in_the_administrative_territorial_entity`, `commons_category`, `instance_of`, `located_in_time_zone`, `coordinate_location`, `topics_main_category`, `official_website`, `freebase_id`, `shares_border_with`, `geonames_id`, `image`, `area`, `openstreetmap_relation_id`, `official_name`, `whos_on_first_id`, `country`]",
        "Response": "Table: `part`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `template_has_topic` (`label`, `description`, `subclass_of`, `topics_main_category`, `country`, `freebase_id`, `topics_main_template`)  VALUES ('province of Indonesia', 'first-level subdivision of Indonesia', 'first-level administrative country subdivision in Indonesia', 'Category:Provinces of Indonesia', 'Indonesia', '/m/016wnh', 'Template:Infobox Indonesia province');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `template_has_topic`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Users_Compliments` (compliment_id, user_id, number_of_compliments)  VALUES (9, 33711, 'Low');\nDatabase State:\n- Table: `Reviews`, Columns: [business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length]\n- Table: `Business_Categories`, Columns: [business_id, category_id]",
        "Response": "Table: `Users_Compliments`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student_Course_Attendance (student_id, course_id, date_of_attendance)  VALUES (171, 301, '2015-04-09 11:44:34');\nDatabase State:\n- Table: Students, Columns: [student_id, student_details]\n- Table: Student_Course_Registrations, Columns: [student_id, course_id, registration_date]\n- Table: People_Addresses, Columns: [person_address_id, person_id, address_id, date_from, date_to]\n- Table: Candidates, Columns: [candidate_id, candidate_details]\n- Table: People, Columns: [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]",
        "Response": "Table: Student_Course_Attendance"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customer_Payments (customer_id, datetime_payment, payment_method_code, amount_payment)  VALUES (3, '2018-02-06 13:35:58', 'Credit Card', 787.1200000000000045);\nDatabase State:\n- Table: Vehicles, Columns: [vehicle_id, vehicle_details]\n- Table: Addresses, Columns: [address_id, line_1_number_building, city, zip_postcode, state_province_county, country]\n- Table: Customer_Payments, Columns: [customer_id, datetime_payment, payment_method_code, amount_payment]",
        "Response": "Table: Customer_Payments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `freebase_id`, `sport`, `country`, `location`, `followed_by`, `instance_of`, `point_in_time`, `part_of`, `organizer`, `follows`, `start_time`, `end_time`)  VALUES ('2009 European Athletics Junior Championships', 'international athletics championship event', '2009 European Athletics Junior Championships', '/m/06zn_lh', 'athletics', 'Serbia', 'Novi Sad', '2011 European Athletics Junior Championships', 'European Athletics U20 Championships', '+2009-01-01T00:00:00Z', 'nan', 'European Athletic Association', '2007 European Athletics Junior Championships', '+2009-07-23T00:00:00Z', '+2009-07-26T00:00:00Z');\nDatabase State:\n- Table: `winner`, Columns: [`label`, `description`, `sex_or_gender`, `country_of_citizenship`, `occupation`, `instance_of`, `date_of_birth`, `place_of_birth`, `freebase_id`, `world_athletics_athlete_id`, `given_name`, `sport`, `sports_discipline_competed_in`, `olympicorg_athlete_id_archived`, `all_athleticscom_id_archived`, `commons_category`, `diamond_league_athlete_id`, `height`, `mass`, `participant_in`, `image`, `olympicscom_athlete_id`, `olympedia_people_id`, `munzinger_sport_number`, `sports_referencecom_olympic_athlete_id_archived`]\n- Table: `2015_world_championships_in_athletics`, Columns: [`label`, `description`, `sport`, `part_of`, `follows`, `followed_by`, `instance_of`, `point_in_time`, `winner`, `location`, `google_knowledge_graph_id`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `country`, `commons_category`, `topics_main_category`, `geonames_id`, `instance_of`, `coordinate_location`, `located_in_the_administrative_territorial_entity`]\n- Table: `event`, Columns: [`label`, `description`, `commons_category`, `freebase_id`, `sport`, `country`, `location`, `followed_by`, `instance_of`, `point_in_time`, `part_of`, `organizer`, `follows`, `start_time`, `end_time`]\n- Table: `followed_by`, Columns: [`label`, `description`, `sport`, `follows`, `instance_of`, `point_in_time`, `part_of`, `country`, `organizer`, `followed_by`, `winner`, `location`, `google_knowledge_graph_id`]",
        "Response": "Table: `event`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, VALUE, UNITS)  VALUES ('2011-08-13', '07f3476a-6a5f-4ce5-88cb-e6b6f883d0fd', 'ab8817b1-166b-471d-a3c1-1623139f93c8', '38483-4', 'Creatinine', 1.0, 'mg/dL');\nDatabase State:\n- Table: patients, Columns: [patient, birthdate, deathdate, ssn, drivers, passport, prefix, first, last, suffix, maiden, marital, race, ethnicity, gender, birthplace, address]\n- Table: immunizations, Columns: [DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION]",
        "Response": "Table: observations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `atomic_number`, `neutron_number`, `decays_to`, `half_life`, `instance_of`)  VALUES ('indium-100', 'isotope of indium', 'indium', 49.0, 51.0, 'silver-99', 5.900000000000000355, 'isotope of indium');\nDatabase State:\n- Table: `isotope_of_indium`, Columns: [`label`, `description`, `subclass_of`, `atomic_number`, `neutron_number`, `decays_to`, `half_life`, `instance_of`]\n- Table: `decays_to`, Columns: [`label`, `description`, `subclass_of`, `instance_of`, `atomic_number`, `neutron_number`, `spin_quantum_number`, `parity_quantum_number`, `mass`, `mass_excess`, `binding_energy`, `wolfram_language_entity_code`]",
        "Response": "Table: `isotope_of_indium`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SeasonStatus (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS)  VALUES (3637, '2005-2006', 'Sweden U19 (all)', 'International-Jr', 'Regular Season', 4, 0, 0, 0, 0, 0);\nDatabase State:\n- Table: SeasonStatus, Columns: [ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS]",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `news_report` (`journalist_ID`, `Event_ID`, `Work_Type`)  VALUES (11, 5, 'Screening');\nDatabase State:\n- Table: `journalist`, Columns: [`journalist_ID`, `Name`, `Nationality`, `Age`, `Years_working`]\n- Table: `news_report`, Columns: [`journalist_ID`, `Event_ID`, `Work_Type`]",
        "Response": "Table: `news_report`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `natural_product` (`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `genbank_assembly_accession_number`, `gram_staining`)  VALUES ('Escherichia coli IAI39', 'bacterial strain', 'Escherichia coli IAI39', 'Escherichia coli', '585057', 'strain', 'GCA_000026345.1', 'nan');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `protein_of_unknown_function_duf2509`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `entrez_gene_id`, `found_in_taxon`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `genbank_assembly_accession_number`, `gram_staining`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `part_of`, `chapter`, `title`, `language_of_work_or_name`, `followed_by`, `published_in`, `follows`)  VALUES ('Romance of the Three Kingdoms, Chapter 76', 'nan', 'chapter', 'The Romance of the Three Kingdoms', '76', '\u5f90\u516c\u660e\u5927\u6230\u6c94\u6c34 \u95dc\u96f2\u9577\u6557\u8d70\u9ea5\u57ce', 'Traditional Chinese', 'Romance of the Three Kingdoms, Chapter 77', 'The Romance of the Three Kingdoms', 'Romance of the Three Kingdoms, Chapter 75');\nDatabase State:\n- Table: `the_romance_of_the_three_kingdoms`, Columns: [`label`, `description`, `part_of`, `instance_of`, `chapter`, `title`, `language_of_work_or_name`, `followed_by`, `published_in`, `follows`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `way_of_saint_james` (`label`, `description`, `commons_category`, `instance_of`, `country`, `part_of`)  VALUES ('Way of Saint James in Italy', 'pilgrimage routes in Italy to Santiago de Compostela, Spain', 'Way of Saint James in Italy', 'Way of St. James', 'Italy', 'Way of Saint James');\nDatabase State:\n- Table: `head_of_state`, Columns: [`label`, `description`, `country_of_citizenship`, `educated_at`, `instance_of`, `place_of_birth`, `date_of_birth`, `sex_or_gender`, `position_held`, `occupation`, `given_name`, `commons_category`, `viaf_id`, `image`, `spouse`, `gnd_id`, `languages_spoken_written_or_signed`, `family_name`, `name_in_native_language`, `freebase_id`, `award_received`, `gran_enciclop\u00e8dia_catalana_id`, `library_of_congress_authority_id`, `isni`, `religion_or_worldview`, `munzinger_person_id`, `worldcat_identities_id`, `opensanctions_id`]",
        "Response": "Table: `way_of_saint_james`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update)  VALUES (10659, '2005-08-01 16:40:34.0', 786, 238, '2005-08-09 21:00:34.0', 2, '2006-02-15 21:30:53.0');\nDatabase State:\n- Table: `city`, Columns: [city_id, city, country_id, last_update]\n- Table: `language`, Columns: [language_id, name, last_update]\n- Table: `payment`, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: `store`, Columns: [store_id, manager_staff_id, address_id, last_update]\n- Table: `inventory`, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: `film_actor`, Columns: [actor_id, film_id, last_update]\n- Table: `film_category`, Columns: [film_id, category_id, last_update]",
        "Response": "Table: `rental`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Bacteroides thetaiotaomicron VPI-5482', 'nan', 'Bacteroides thetaiotaomicron VPI-5482', 'Bacteroides thetaiotaomicron', '226186', 'taxon', 'Gram-negative bacteria', 'GCA_000011065.1');\nDatabase State:\n- Table: `putative_membrane_protein_insertion_efficiency_factor`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `cell_component`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)  VALUES (1, 9, 'PP', '2010-09-24 01:15:11', '1999-07-08 03:31:04', '');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Templates"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `taxon` (`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `mesh_descriptor_id`, `lpsn_url`, `microsoft_academic_id`)  VALUES ('Listeria monocytogenes', 'species of bacterium', 'Listeria', 'Listeria monocytogenes', 'taxon', 'species', '963001.0', '/m/02cw3t', '1639.0', '5428162.0', '10932504.0', '3VGJ4', 'gram-positive bacteria', 'D008089', 'http://www.bacterio.net/listeria.html#monocytogenes', '2781350384.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `chromosome` (`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`)  VALUES ('Danio rerio chromosome 9', 'chromosome', 'NC_007120', 'Danio rerio', 'chromosome');\nDatabase State:\n- Table: `orthology`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `homologene_id`, `chromosome`, `found_in_taxon`, `refseq_rna_id`, `ensembl_transcript_id`, `encodes`, `ortholog`, `exact_match`, `strand_orientation`, `instance_of`, `cytogenetic_location`, `genomic_end`, `genomic_start`, `expressed_in`]",
        "Response": "Table: `chromosome`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `protected_zones_of_national_interest` (`label`, `description`, `coordinate_location`, `country`, `instance_of`, `area`, `described_at_url`, `inception`, `located_in_the_administrative_territorial_entity`, `code`, `location`, `geoshape`, `inaturalist_place_id`, `official_name`)  VALUES ('L\u00e9i', 'Nature reserve in Luxembourg', '49.5955', 'Luxembourg', 'geographical feature', 125.9599999999999938, 'http://legilux.public.lu/eli/etat/leg/rgd/1988/03/19/n3/jo', '+1988-03-19T00:00:00Z', 'Bertrange', 'ZH 47', 'Bertrange', 'Data:ZPIN L\u00e9i.map', '157367', 'L\u00e9i');\nDatabase State:\n- Table: `capital_city`, Columns: [`label`, `description`, `country`, `instance_of`, `capital_of`, `population`]\n- Table: `protected_zones_of_national_interest`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `area`, `described_at_url`, `inception`, `located_in_the_administrative_territorial_entity`, `code`, `location`, `geoshape`, `inaturalist_place_id`, `official_name`]\n- Table: `political_border`, Columns: [`label`, `description`, `commons_category`, `country`, `coat_of_arms_image`, `coordinate_location`, `instance_of`, `topics_main_category`, `freebase_id`, `geonames_id`, `viaf_id`, `elevation_above_sea_level`, `shares_border_with`, `area`, `official_website`, `image`, `population`, `lau`, `whos_on_first_id`, `inaturalist_place_id`, `located_in_the_administrative_territorial_entity`, `capital`]\n- Table: `physical_location`, Columns: [`label`, `description`, `commons_category`, `country`, `coordinate_location`, `instance_of`, `topics_main_category`, `freebase_id`, `geonames_id`, `shares_border_with`, `area`, `official_website`, `elevation_above_sea_level`, `population`, `lau`, `whos_on_first_id`, `inaturalist_place_id`, `located_in_the_administrative_territorial_entity`]",
        "Response": "Table: `protected_zones_of_national_interest`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `follows` (`label`, `description`, `topics_main_category`, `instance_of`, `point_in_time`, `follows`, `followed_by`, `part_of`)  VALUES ('561 BC', 'year', 'Category:561 BC', 'year BC', '-0561-01-01T00:00:00Z', '562 BC', '560 BC', '560s BC');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `topics_main_category`, `instance_of`, `point_in_time`, `follows`, `followed_by`, `part_of`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Institution` (`Institution_id`, `Institution`, `Location`, `Founded`, `Type`, `Enrollment`, `Team`, `Primary_Conference`, `building_id`)  VALUES ('9', 'Valley City State University', 'Valley City, North Dakota', 1890.0, 'Public', 1340, 'Vikings', 'none', '3');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Institution`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, uid, text, createdate)  VALUES (8, 4, 'I feel tired and don''t want to write SQLs.', '2018-03-12 02:30:30');\nDatabase State:\n- Table: follows, Columns: [f1, f2]\n- Table: tweets, Columns: [id, uid, text, createdate]",
        "Response": "Table: tweets"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Airlines (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  VALUES ('2018/8/28', 21167, 'N604CZ', 5737, 14747, 1474703, 30559, 'SEA', 14831, 1483106, 32457, 'SJC', 1701, 1700, -1, 0, 1901, -10, 0, 0, NULL, 130, 121, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Airports, Columns: [Code, Description]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `srgb_color_hex_triplet`, `instance_of`, `freebase_id`, `factgrid_item_id`, `art_architecture_thesaurus_id`)  VALUES ('garnet', 'color', 'red', 'B30033', 'color', '/m/04mkbj', 'Q393723', '300311172.0');\nDatabase State:\n- Table: `color`, Columns: [`label`, `description`, `subclass_of`, `srgb_color_hex_triplet`, `instance_of`, `freebase_id`, `factgrid_item_id`, `art_architecture_thesaurus_id`]\n- Table: `eye_color`, Columns: [`label`, `description`, `instance_of`, `color`]",
        "Response": "Table: `color`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (UserID, Gender)  VALUES ('tw-299252830', 'Male');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: user"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `subclass_of`, `biological_process`, `has_parts`, `encoded_by`, `molecular_function`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Pyridine nucleotide-disulfide oxidoreductase family protein BMAA2023', 'microbial protein found in Burkholderia mallei ATCC 23344', 'Burkholderia mallei ATCC 23344', 'A0A0H2WAI7', 'protein', 'lipid metabolism', 'FAD/NAD(P)-binding domain', 'pyridine nucleotide-disulfide oxidoreductase family protein BMAA2023', 'flavin adenine dinucleotide binding', 'protein', 'YP_106539', 'FAD/NAD-linked reductase, dimerisation domain superfamily');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Answer` (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('Yes', 2018, 3853, 29);\nDatabase State:\n- Table: Survey, Columns: [SurveyID, Description]\n- Table: Question, Columns: [questiontext, questionid]\n- Table: `Answer`, Columns: [AnswerText, SurveyID, UserID, QuestionID]",
        "Response": "Table: `Answer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Driver_ID`, `Name`, `Party`, `Home_city`, `Age`)  VALUES (1, 'Matthew Ritter', 'Dem', 'Hartford', 40);\nDatabase State:\n- Table: `driver`, Columns: [`Driver_ID`, `Name`, `Party`, `Home_city`, `Age`]",
        "Response": "Table: `driver`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO data (ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name)  VALUES (212, 16.5, 6, 168.0, 120, 3820, 16.69999999999999929, 76, 'mercedes-benz 280s');\nDatabase State:\n- Table: data, Columns: [ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name]\n- Table: price, Columns: [ID, price]\n- Table: production, Columns: [ID, model_year, country]",
        "Response": "Table: data"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Fault_Log (fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details)  VALUES (11, 15, 12, '2018-03-21 15:02:17', 'failed parts', NULL);\nDatabase State:\n- Table: Skills_Required_To_Fix, Columns: [part_fault_id, skill_id]\n- Table: Asset_Parts, Columns: [asset_id, part_id]\n- Table: Parts, Columns: [part_id, part_name, chargeable_yn, chargeable_amount, other_part_details]\n- Table: Maintenance_Engineers, Columns: [engineer_id, company_id, first_name, last_name, other_details]\n- Table: Part_Faults, Columns: [part_fault_id, part_id, fault_short_name, fault_description, other_fault_details]\n- Table: Skills, Columns: [skill_id, skill_code, skill_description]",
        "Response": "Table: Fault_Log"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `sex_or_gender`, `date_of_birth`, `place_of_birth`, `country_of_citizenship`, `occupation`, `instance_of`, `freebase_id`, `given_name`, `sport`, `lpga_tour_golf_player_id`, `family_name`)  VALUES ('Park Sung-hyun', 'Korean golfer', 'female', '+1993-09-21T00:00:00Z', 'Seoul', 'South Korea', 'golfer', 'human', 'nan', 'Seong-hyeon', 'golf', 'sung-hyun-park/98648', 'Park');\nDatabase State:\n- Table: `winner`, Columns: [`label`, `description`, `sex_or_gender`, `date_of_birth`, `place_of_birth`, `country_of_citizenship`, `occupation`, `instance_of`, `freebase_id`, `given_name`, `sport`, `lpga_tour_golf_player_id`, `family_name`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `coordinate_location`, `topics_main_category`, `locator_map_image`, `instance_of`, `freebase_id`, `gnis_id`, `population`, `geonames_id`, `official_website`, `area`, `shares_border_with`, `inception`, `image`, `viaf_id`, `archinform_location_id`, `category_of_associated_people`, `whos_on_first_id`, `category_for_maps`, `water_as_percent_of_area`, `native_label`, `wolfram_language_entity_code`, `worldcat_identities_id`, `openstreetmap_relation_id`, `getty_thesaurus_of_geographic_names_id`, `inaturalist_place_id`, `per_capita_income`, `number_of_households`, `library_of_congress_authority_id`]\n- Table: `political_border`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `coordinate_location`, `topics_main_category`, `locator_map_image`, `instance_of`, `freebase_id`, `gnis_id`, `population`, `geonames_id`, `official_website`, `area`, `named_after`, `shares_border_with`, `inception`, `capital`, `image`, `viaf_id`, `archinform_location_id`, `category_of_associated_people`, `whos_on_first_id`, `category_for_maps`, `water_as_percent_of_area`, `native_label`, `wolfram_language_entity_code`, `worldcat_identities_id`, `hasc`, `openstreetmap_relation_id`, `getty_thesaurus_of_geographic_names_id`, `inaturalist_place_id`, `per_capita_income`, `number_of_households`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`]\n- Table: `physical_location`, Columns: [`label`, `description`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `instance_of`, `freebase_id`]\n- Table: `united_states_womens_open_championship`, Columns: [`label`, `description`, `coordinate_location`, `country`, `sport`, `instance_of`, `point_in_time`, `competition_class`, `location`, `freebase_id`, `winner`]",
        "Response": "Table: `winner`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `protein_of_unknown_function_duf45` (`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `refseq_protein_id`, `subclass_of`, `part_of`, `instance_of`)  VALUES ('Hypothetical protein Mesci_0447', 'microbial protein found in Mesorhizobium ciceri biovar biserrulae WSM1271', 'Mesorhizobium ciceri biovar biserrulae WSM1271', 'E8TBD6', 'hypothetical protein Mesci_0447', 'YP_004139669', 'protein', 'Protein of unknown function DUF45', 'protein');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `protein_of_unknown_function_duf45`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO rankings (`ranking_date`)  VALUES (20100927, 689, 203399, 28, 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: rankings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, price)  VALUES (237, 30000.0);\nDatabase State:\n- Table: data, Columns: [ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name]\n- Table: price, Columns: [ID, price]",
        "Response": "Table: price"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `death` (`caused_by_ship_id`, `id`, `note`, `killed`, `injured`)  VALUES (5, 6, 'Dantewada, Chhattisgarh', 0, 0);\nDatabase State:\n- Table: `death`, Columns: [`caused_by_ship_id`, `id`, `note`, `killed`, `injured`]\n- Table: `ship`, Columns: [`lost_in_battle`, `id`, `name`, `tonnage`, `ship_type`, `location`, `disposition_of_ship`]",
        "Response": "Table: `death`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `appellations` (`No`)  VALUES (30, 'Napa Valley', 'Napa', 'California', 'North Coast', 'Yes');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `appellations`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update)  VALUES (4144, '2005-07-07 08:25:44', 550, 431, '2005-07-16 13:10:44', 2, '2006-02-15 21:30:53');\nDatabase State:\n- Table: film, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]\n- Table: film_text, Columns: [film_id, title, description]\n- Table: city, Columns: [city_id, city, country_id, last_update]\n- Table: country, Columns: [country_id, country, last_update]\n- Table: film_category, Columns: [film_id, category_id, last_update]\n- Table: customer, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: inventory, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: rental, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]",
        "Response": "Table: rental"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (sales_transaction_id, sales_details)  VALUES (7, 'p');\nDatabase State:\n- Table: Transactions_Lots, Columns: [transaction_id, lot_id]\n- Table: Purchases, Columns: [purchase_transaction_id, purchase_details]\n- Table: Ref_Transaction_Types, Columns: [transaction_type_code, transaction_type_description]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `model_list` (`ModelId`)  VALUES (17, 13, 'mercedes');\nDatabase State:\n- Table: `countries`, Columns: [`CountryId`]\n- Table: `continents`, Columns: [`ContId`]",
        "Response": "Table: `model_list`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`)  VALUES ('SO - 0006809', 'Online', 'WARE-UHY1004', '3/10/20', '8/2/20', '8/30/20', '9/1/20', 'USD', 14, 17, 220, 38, 3, 0.07499999999999999723, '201.00', '116.58');\nDatabase State:\n- Table: Regions, Columns: [StateCode, State, Region]",
        "Response": "Table: `Sales Orders`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, score, date, type)  VALUES (431, 92, '2016-05-25', 'Routine - Unscheduled');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: inspections"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `topics_main_category`, `instance_of`, `country`, `point_in_time`, `freebase_id`)  VALUES ('1976 United Kingdom local elections', 'nan', 'Category:1976 United Kingdom local elections', 'United Kingdom local elections', 'United Kingdom', '+1976-00-00T00:00:00Z', '/m/026jbqm');\nDatabase State:\n- Table: `leeds_city_council_election`, Columns: [`label`, `description`, `instance_of`, `country`, `point_in_time`, `office_contested`, `follows`, `followed_by`, `freebase_id`, `part_of`]\n- Table: `part`, Columns: [`label`, `description`, `topics_main_category`, `instance_of`, `country`, `point_in_time`, `freebase_id`]\n- Table: `followed_by`, Columns: [`label`, `description`, `country`, `point_in_time`, `instance_of`, `office_contested`, `follows`, `followed_by`, `freebase_id`, `part_of`]",
        "Response": "Table: `part`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`People_ID`, `Name`, `Country`, `Is_Male`, `Age`)  VALUES (7, 'Lucas Glover', 'United States', 'T', 31);\nDatabase State:\n- Table: `people`, Columns: [`People_ID`, `Name`, `Country`, `Is_Male`, `Age`]\n- Table: `wedding`, Columns: [`Church_ID`, `Male_ID`, `Female_ID`, `Year`]\n- Table: `church`, Columns: [`Church_ID`, `Name`, `Organized_by`, `Open_Date`, `Continuation_of`]",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`ranking_date`)  VALUES (20120206, 1018, 210567, 10, 4);\nDatabase State:\n- Table: rankings, Columns: [`ranking_date`]",
        "Response": "Table: rankings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('ATP-dependent DNA ligase AMED_5204', 'microbial gene found in Amycolatopsis mediterranei U32', '9439381', 'gene', 'ATP-dependent DNA ligase AMED_5204', 'Amycolatopsis mediterranei U32', 'reverse strand', '5776646.0', '5775702.0', 'gene', 'AMED_5204');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Answer` (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('-1', 2017, 3237, 82);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Answer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (registration_id, date_test_taken, test_result)  VALUES (9, '2018-03-19 02:04:26', 'Pass');\nDatabase State:\n- Table: Courses, Columns: [course_id, author_id, subject_id, course_name, course_description]\n- Table: Student_Course_Enrolment, Columns: [registration_id, student_id, course_id, date_of_enrolment, date_of_completion]\n- Table: Students, Columns: [student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name]\n- Table: Subjects, Columns: [subject_id, subject_name]\n- Table: Student_Tests_Taken, Columns: [registration_id, date_test_taken, test_result]",
        "Response": "Table: Student_Tests_Taken"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO bank (branch_ID, bname, no_of_customers, city, state)  VALUES (2, 'downtown', 123, 'Salt Lake City', 'Utah');\nDatabase State:\n- Table: customer, Columns: [cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state]\n- Table: bank, Columns: [branch_ID, bname, no_of_customers, city, state]\n- Table: loan, Columns: [loan_ID, loan_type, cust_ID, branch_ID, amount]",
        "Response": "Table: bank"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (region_id, game_platform_id, num_sales)  VALUES (4, 8968, 0.0);\nDatabase State:\n- Table: game, Columns: [id, genre_id, game_name]\n- Table: region_sales, Columns: [region_id, game_platform_id, num_sales]\n- Table: game_publisher, Columns: [id, game_id, publisher_id]\n- Table: platform, Columns: [id, platform_name]\n- Table: region, Columns: [id, region_name]\n- Table: genre, Columns: [id, genre_name]\n- Table: publisher, Columns: [id, publisher_name]",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Product (product_id, product_name, product_details)  VALUES (13, 'learn', 'h');\nDatabase State:\n- Table: Problem_Status_Codes, Columns: [problem_status_code, problem_status_description]\n- Table: Problem_Category_Codes, Columns: [problem_category_code, problem_category_description]\n- Table: Product, Columns: [product_id, product_name, product_details]\n- Table: Problem_Log, Columns: [problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details]\n- Table: Staff, Columns: [staff_id, staff_first_name, staff_last_name, other_staff_details]",
        "Response": "Table: Product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `us_pro_indoor` (`label`, `description`, `follows`, `followed_by`, `instance_of`, `sport`, `point_in_time`, `has_parts`, `edition_number`, `freebase_id`, `country`, `prize_money`, `part_of`, `location`, `located_in_the_administrative_territorial_entity`, `surface_played_on`)  VALUES ('1968 U.S. Professional Indoor', 'tennis tournament', 'nan', '1969 U.S. Professional Indoor', 'U.S. Pro Indoor', 'tennis', '+1968-00-00T00:00:00Z', '1968 U.S. Professional Indoor \u2013 singles', '1', '/m/05mtdxp', 'United States of America', NULL, 'nan', 'nan', 'Philadelphia', 'carpet court');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `us_pro_indoor`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Round`, `Location`, `Country`, `Date`, `Fastest_Qualifying`, `Winning_Pilot`, `Winning_Aircraft`)  VALUES (7.0, 'River Danube , Budapest', 'Hungary', 'Cancelled', 'Cancelled', '6', '5');\nDatabase State:\n- Table: airport, Columns: [`Airport_ID`, `Airport_Name`, `Total_Passengers`, `%_Change_2007`, `International_Passengers`, `Domestic_Passengers`, `Transit_Passengers`, `Aircraft_Movements`, `Freight_Metric_Tonnes`]\n- Table: match, Columns: [`Round`, `Location`, `Country`, `Date`, `Fastest_Qualifying`, `Winning_Pilot`, `Winning_Aircraft`]\n- Table: airport_aircraft, Columns: [`ID`, `Airport_ID`, `Aircraft_ID`]",
        "Response": "Table: match"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO movies_total_gross (movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross)  VALUES ('Angie', 'Mar 4, 1994', 'Comedy', 'R', '$9,252,349', '$19,116,981');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: movies_total_gross"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Crime (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11557521, 'JB572137', '12/29/2018 20:20', '005XX N WELLS ST', '2250', 'RESTAURANT', 'TRUE', 'FALSE', 1831, 18, 42, 8, '22', '41.89105171', '-87.63405559');\nDatabase State:\n- Table: IUCR, Columns: [iucr_no, primary_description, secondary_description, index_code]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (204705, 2013, 'M', 'W', '4y bach', '497', '85', '215', '17.1', '43.3');\nDatabase State:\n- Table: institution_details, Columns: [unitid, chronname, city, state, level, control, basic, hbcu, flagship, long_x, lat_y, site, student_count, awards_per_value, awards_per_state_value, awards_per_natl_value, exp_award_value, exp_award_state_value, exp_award_natl_value, exp_award_percentile, ft_pct, fte_value, fte_percentile, med_sat_value, med_sat_percentile, aid_value, aid_percentile, endow_value, endow_percentile, grad_100_value, grad_100_percentile, grad_150_value, grad_150_percentile, pell_value, pell_percentile, retain_value, retain_percentile, ft_fac_value, ft_fac_percentile, vsa_year, vsa_grad_after4_first, vsa_grad_elsewhere_after4_first, vsa_enroll_after4_first, vsa_enroll_elsewhere_after4_first, vsa_grad_after6_first, vsa_grad_elsewhere_after6_first, vsa_enroll_after6_first, vsa_enroll_elsewhere_after6_first, vsa_grad_after4_transfer, vsa_grad_elsewhere_after4_transfer, vsa_enroll_after4_transfer, vsa_enroll_elsewhere_after4_transfer, vsa_grad_after6_transfer, vsa_grad_elsewhere_after6_transfer, vsa_enroll_after6_transfer, vsa_enroll_elsewhere_after6_transfer, similar, state_sector_ct, carnegie_ct, counted_pct, nicknames, cohort_size]\n- Table: `state_sector_details`, Columns: [stateid, state, state_post, level, control, schools_count, counted_pct, awards_per_state_value, awards_per_natl_value, exp_award_state_value, exp_award_natl_value, state_appr_value, state_appr_rank, grad_rate_rank, awards_per_rank]",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Account_ID, Statement_ID, Account_Details)  VALUES (61, 57, '930.14');\nDatabase State:\n- Table: Accounts, Columns: [Account_ID, Statement_ID, Account_Details]\n- Table: Documents, Columns: [Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details]\n- Table: Statements, Columns: [Statement_ID, Statement_Details]\n- Table: Projects, Columns: [Project_ID, Project_Details]\n- Table: Documents_with_Expenses, Columns: [Document_ID, Budget_Type_Code, Document_Details]\n- Table: Ref_Budget_Codes, Columns: [Budget_Type_Code, Budget_Type_Description]",
        "Response": "Table: Accounts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id_restaurant, street_num, street_name, city)  VALUES (8206, 629, '4th st', 'santa rosa');\nDatabase State:\n- Table: location, Columns: [id_restaurant, street_num, street_name, city]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price)  VALUES (569, 'Tuiuti', 45, 1, 7, 'Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som', 259657, 8749492, 0.989999999999999992);\nDatabase State:\n- Table: genres, Columns: [id, name]\n- Table: albums, Columns: [id, title, artist_id]\n- Table: employees, Columns: [id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]\n- Table: invoice_lines, Columns: [id, invoice_id, track_id, unit_price, quantity]\n- Table: playlist_tracks, Columns: [playlist_id, track_id]\n- Table: media_types, Columns: [id, name]\n- Table: invoices, Columns: [id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]\n- Table: artists, Columns: [id, name]",
        "Response": "Table: tracks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Date received`, Product, `Sub-product`, Issue, `Sub-issue`, `Consumer complaint narrative`, Tags, `Consumer consent provided?`, `Submitted via`, `Date sent to company`, `Company response to consumer`, `Timely response?`, `Consumer disputed?`, `Complaint ID`, Client_ID)  VALUES ('2015-09-22', 'Credit card', NULL, 'Credit card protection / Debt protection', NULL, NULL, NULL, 'N/A', 'Referral', '2015-09-23', 'Closed with explanation', 'Yes', 'No', 'CR1573867', 'C00000192');\nDatabase State:\n- Table: client, Columns: [client_id, sex, day, month, year, age, social, first, middle, last, phone, email, address_1, address_2, city, state, zipcode, district_id]\n- Table: district, Columns: [district_id, city, state_abbrev, division]\n- Table: callcenterlogs, Columns: [`Date received`, `Complaint ID`, `rand client`, phonefinal, `vru+line`, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time]",
        "Response": "Table: events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Journal_ID`, `Date`, `Theme`, `Sales`)  VALUES (10, 'November 18, 2001', 'at Cincinnati Bengals', 3421);\nDatabase State:\n- Table: `journal`, Columns: [`Journal_ID`, `Date`, `Theme`, `Sales`]",
        "Response": "Table: `journal`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `ribosomal_protein_l36` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('50S ribosomal protein L36 KPHS_11800', 'microbial protein found in Klebsiella pneumoniae subsp. pneumoniae HS11286', '50S ribosomal protein L36 KPHS_11800', 'A0A0H3GKK3', 'protein biosynthesis', 'structural constituent of ribosome', 'ribosome', 'Klebsiella pneumoniae subsp. pneumoniae HS11286', 'YP_005225480', 'protein', 'Ribosomal protein L36', 'protein');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `ribosomal_protein_l36`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]",
        "Response": "Table: `ribosomal_protein_l36`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate)  VALUES (49125, 26784, 'D58B-4B43-AA', 1, 780, 1, 1243.0, 0.0, 1243.0, '6D590EAC-2917-4CFA-8C74-A9F2683A9E25', '2012-12-31 00:00:00.0');\nDatabase State:\n- Table: ProductModelProductDescriptionCulture, Columns: [ProductModelID, ProductDescriptionID, CultureID, ModifiedDate]\n- Table: CountryRegion, Columns: [CountryRegionCode, Name, ModifiedDate]\n- Table: `CurrencyRate`, Columns: [CurrencyRateID, CurrencyRateDate, FromCurrencyCode, ToCurrencyCode, AverageRate, EndOfDayRate, ModifiedDate]\n- Table: `PhoneNumberType`, Columns: [PhoneNumberTypeID, Name, ModifiedDate]\n- Table: Password, Columns: [BusinessEntityID, PasswordHash, PasswordSalt, rowguid, ModifiedDate]\n- Table: SalesReason, Columns: [SalesReasonID, Name, ReasonType, ModifiedDate]\n- Table: ProductProductPhoto, Columns: [ProductID, ProductPhotoID, `Primary`, ModifiedDate]\n- Table: SpecialOffer, Columns: [SpecialOfferID, Description, DiscountPct, Type, Category, StartDate, EndDate, MinQty, MaxQty, rowguid, ModifiedDate]\n- Table: Person, Columns: [BusinessEntityID, PersonType, NameStyle, Title, FirstName, MiddleName, LastName, Suffix, EmailPromotion, AdditionalContactInfo, Demographics, rowguid, ModifiedDate]\n- Table: `JobCandidate`, Columns: [JobCandidateID, BusinessEntityID, Resume, ModifiedDate]\n- Table: `BusinessEntity`, Columns: [BusinessEntityID, rowguid, ModifiedDate]\n- Table: ProductDocument, Columns: [ProductID, DocumentNode, ModifiedDate]\n- Table: ShoppingCartItem, Columns: [ShoppingCartItemID, ShoppingCartID, Quantity, ProductID, DateCreated, ModifiedDate]\n- Table: Shift, Columns: [ShiftID, Name, StartTime, EndTime, ModifiedDate]\n- Table: SpecialOfferProduct, Columns: [SpecialOfferID, ProductID, rowguid, ModifiedDate]\n- Table: ProductSubcategory, Columns: [ProductSubcategoryID, ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: Employee, Columns: [BusinessEntityID, NationalIDNumber, LoginID, OrganizationNode, OrganizationLevel, JobTitle, BirthDate, MaritalStatus, Gender, HireDate, SalariedFlag, VacationHours, SickLeaveHours, CurrentFlag, rowguid, ModifiedDate]\n- Table: SalesOrderDetail, Columns: [SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate]\n- Table: SalesPerson, Columns: [BusinessEntityID, TerritoryID, SalesQuota, Bonus, CommissionPct, SalesYTD, SalesLastYear, rowguid, ModifiedDate]\n- Table: ScrapReason, Columns: [ScrapReasonID, Name, ModifiedDate]",
        "Response": "Table: SalesOrderDetail"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `commons_category`, `category_contains`, `category_combines_topics`)  VALUES ('Category:People from Waldo County, Maine', 'Wikimedia category', 'Wikimedia category', 'nan', 'human', 'person related to this place');\nDatabase State:\n- Table: `eponym`, Columns: [`label`, `description`, `commons_category`, `instance_of`, `topics_main_category`, `freebase_id`, `image`, `described_by_source`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`, `encyclop\u00e6dia_britannica_online_id`]\n- Table: `county_of_maine`, Columns: [`label`, `description`, `contains_the_administrative_territorial_entity`, `country`, `located_in_the_administrative_territorial_entity`, `commons_category`, `coordinate_location`, `topics_main_category`, `locator_map_image`, `freebase_id`, `fips_6_4`, `gnis_id`, `instance_of`, `population`, `geonames_id`, `official_website`, `musicbrainz_area_id`, `image`, `named_after`, `shares_border_with`, `inception`, `curlie_id`, `capital`, `us_national_archives_identifier`, `viaf_id`, `archinform_location_id`, `category_of_associated_people`, `area`, `encyclop\u00e6dia_britannica_online_id`, `whos_on_first_id`, `water_as_percent_of_area`, `native_label`, `maine_an_encyclopedia_id`, `wolfram_language_entity_code`, `worldcat_identities_id`, `hasc`, `openstreetmap_relation_id`, `ballotpedia_id`, `getty_thesaurus_of_geographic_names_id`, `inaturalist_place_id`, `per_capita_income`, `number_of_households`]\n- Table: `wikimedia_category`, Columns: [`label`, `description`, `instance_of`, `commons_category`, `category_contains`, `category_combines_topics`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `instance_of`, `geonames_id`, `elevation_above_sea_level`, `gnis_id`, `postal_code`, `fips_55_3_locations_in_the_us`, `population`, `area`, `local_dialing_code`, `whos_on_first_id`, `freebase_id`, `per_capita_income`, `number_of_households`, `viaf_id`, `worldcat_identities_id`, `commons_category`, `located_in_time_zone`]\n- Table: `administrative_centre`, Columns: [`label`, `description`, `contains_the_administrative_territorial_entity`, `country`, `located_in_the_administrative_territorial_entity`, `commons_category`, `coordinate_location`, `topics_main_category`, `locator_map_image`, `freebase_id`, `fips_6_4`, `gnis_id`, `instance_of`, `population`, `geonames_id`, `official_website`, `musicbrainz_area_id`, `image`, `named_after`, `shares_border_with`, `inception`, `curlie_id`, `capital`, `us_national_archives_identifier`, `viaf_id`, `archinform_location_id`, `category_of_associated_people`, `area`, `encyclop\u00e6dia_britannica_online_id`, `whos_on_first_id`, `water_as_percent_of_area`, `native_label`, `maine_an_encyclopedia_id`, `wolfram_language_entity_code`, `worldcat_identities_id`, `hasc`, `openstreetmap_relation_id`, `ballotpedia_id`, `getty_thesaurus_of_geographic_names_id`, `inaturalist_place_id`, `per_capita_income`, `number_of_households`]\n- Table: `political_border`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `commons_category`, `coordinate_location`, `topics_main_category`, `locator_map_image`, `freebase_id`, `fips_6_4`, `gnis_id`, `instance_of`, `population`, `geonames_id`, `official_website`, `contains_the_administrative_territorial_entity`, `area`, `shares_border_with`, `capital`, `inception`, `curlie_id`, `image`, `musicbrainz_area_id`, `us_national_archives_identifier`, `viaf_id`, `archinform_location_id`, `category_of_associated_people`, `encyclop\u00e6dia_britannica_online_id`, `whos_on_first_id`, `water_as_percent_of_area`, `native_label`, `maine_an_encyclopedia_id`, `wolfram_language_entity_code`, `worldcat_identities_id`, `hasc`, `openstreetmap_relation_id`, `ballotpedia_id`, `getty_thesaurus_of_geographic_names_id`, `inaturalist_place_id`, `per_capita_income`, `number_of_households`]",
        "Response": "Table: `wikimedia_category`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1006, 'Schultz', 'Andy', 18, 'M', 600, 1148, 'BAL');\nDatabase State:\n- Table: Voting_record, Columns: [StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `freebase_id`, `issn`, `era_journal_id`, `oclc_control_number`, `coden`, `scopus_source_id`, `danish_bibliometric_research_indicator_bfi_snocno`, `danish_bibliometric_research_indicator_level`, `publisher`, `official_website`, `title`, `opencitations_bibliographic_resource_id`, `nlm_unique_id`, `language_of_work_or_name`, `country_of_origin`, `inception`, `uniprot_journal_id`, `jufo_id`, `main_subject`, `acnp_journal_id`, `crossref_journal_id`, `scilit_journal_id`, `indexed_in_bibliographic_review`, `issn_l`, `openalex_id`)  VALUES ('Biochemical and Biophysical Research Communications', 'journal', 'scientific journal', '/m/0520879', '0006-291X', '2147', '1532958.0', 'BBRCA9', '16845.0', '5098', '1', 'Academic Press', 'http://www.elsevier.com/wps/find/journaldescription.cws_home/622790/description', 'Biochemical and Biophysical Research Communications', '5123', '0372516', 'English', 'England', '+1959-01-01T00:00:00Z', '228.0', '52307', 'biochemistry', '885.0', '491', '81082.0', 'Scopus', '0006-291X', 'V151589183');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `publishing`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Player_Match (Match_Id, Player_Id, Role_Id, Team_Id)  VALUES (829720, 370, 3, 5);\nDatabase State:\n- Table: Match, Columns: [Match_Id, Team_1, Team_2, Match_Date, Season_Id, Venue_Id, Toss_Winner, Toss_Decide, Win_Type, Win_Margin, Outcome_type, Match_Winner, Man_of_the_Match]\n- Table: Country, Columns: [Country_Id, Country_Name]\n- Table: Team, Columns: [Team_Id, Team_Name]\n- Table: Player_Match, Columns: [Match_Id, Player_Id, Role_Id, Team_Id]\n- Table: Extra_Type, Columns: [Extra_Id, Extra_Name]\n- Table: Toss_Decision, Columns: [Toss_Id, Toss_Name]\n- Table: Rolee, Columns: [Role_Id, Role_Desc]\n- Table: Batting_Style, Columns: [Batting_Id, Batting_hand]\n- Table: Season, Columns: [Season_Id, Man_of_the_Series, Orange_Cap, Purple_Cap, Season_Year]\n- Table: Wicket_Taken, Columns: [Match_Id, Over_Id, Ball_Id, Player_Out, Kind_Out, Fielders, Innings_No]\n- Table: Venue, Columns: [Venue_Id, Venue_Name, City_Id]\n- Table: Ball_by_Ball, Columns: [Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler]\n- Table: Bowling_Style, Columns: [Bowling_Id, Bowling_skill]\n- Table: Out_Type, Columns: [Out_Id, Out_Name]\n- Table: Extra_Runs, Columns: [Match_Id, Over_Id, Ball_Id, Extra_Type_Id, Extra_Runs, Innings_No]\n- Table: Batsman_Scored, Columns: [Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No]\n- Table: Win_By, Columns: [Win_Id, Win_Type]",
        "Response": "Table: Player_Match"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `image`, `commons_category`, `followed_by`, `manufacturer`, `follows`, `topics_main_category`, `freebase_id`, `part_of`, `logo_image`, `publication_date`, `subreddit`, `giant_bomb_id`, `gamecip_platform_id`, `subclass_of`, `quora_topic_id`, `internet_game_database_platform_id`, `mobygames_platform_id`, `gamefaqs_platform_id`, `units_sold`, `developer`, `uvl_platform_id`, `videogamegeek_platform_id`, `the_video_games_museum_system_id`, `screenscraper_platform_id`, `launchbox_games_database_platform_id`, `thegamesdb_platform_id`, `gamekult_platform_id`, `instance_of`, `tv_tropes_identifier`, `fandom_article_id`, `cpu`)  VALUES ('Wii U', 'eight-generation home video game console by Nintendo', 'Wii U Console and Gamepad.png', 'Wii U', 'Nintendo Switch', 'Nintendo', 'Wii', 'Category:Wii U', '/m/0gls6tt', 'eighth generation of video game consoles', 'WiiU.svg', '+2012-11-18T00:00:00Z', 'wiiu', '3045-139', '1130.0', 'home video game console', 'Nintendo-Wii-U', 'wiiu', 'wii-u', 'wii-u', 13560000.0, 'Nintendo', '196.0', '10763.0', '106.0', '18.0', '34.0', '38.0', '160096.0', 'home video game console model', 'UsefulNotes/WiiU', 'wiiu:Wii_U', 'Espresso');\nDatabase State:\n- Table: `computing_platform`, Columns: [`label`, `description`, `image`, `commons_category`, `manufacturer`, `follows`, `topics_main_category`, `freebase_id`, `part_of`, `logo_image`, `publication_date`, `subreddit`, `giant_bomb_id`, `subclass_of`, `quora_topic_id`, `internet_game_database_platform_id`, `mobygames_platform_id`, `gamefaqs_platform_id`, `units_sold`, `uvl_platform_id`, `videogamegeek_platform_id`, `the_video_games_museum_system_id`, `launchbox_games_database_platform_id`, `thegamesdb_platform_id`, `gamekult_platform_id`, `instance_of`, `tv_tropes_identifier`, `fandom_article_id`, `cpu`]\n- Table: `headquarters`, Columns: [`label`, `description`, `locator_map_image`, `coordinate_location`, `instance_of`, `shares_border_with`, `population`, `located_in_time_zone`, `flag_image`, `country`, `topics_main_category`, `commons_category`, `gnd_id`, `viaf_id`, `page_banner`, `freebase_id`, `musicbrainz_area_id`, `geonames_id`, `category_of_associated_people`, `located_in_the_administrative_territorial_entity`, `encyclop\u00e6dia_britannica_online_id`, `inception`, `area`, `openstreetmap_relation_id`, `quora_topic_id`, `archinform_location_id`, `whos_on_first_id`, `worldcat_identities_id`, `image`, `inaturalist_place_id`, `official_website`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `sport`, `followed_by`, `follows`, `instance_of`, `edition_number`, `country`, `point_in_time`, `location`, `competition_class`, `has_parts`, `on_focus_list_of_wikimedia_project`, `home_venue`, `start_time`, `end_time`, `google_knowledge_graph_id`)  VALUES ('2005 English Badminton Championships', 'badminton championships', 'badminton', '2006 English Badminton Championships', '2004 English Badminton Championships', 'English Badminton Championships', '42.0', 'United Kingdom', '+2005-00-00T00:00:00Z', 'Manchester', 'national championship', '2005 English Badminton Championships \u2013 men''s singles', 'WikiProject Badminton/tournament focus list', 'Manchester Velodrome', '+2005-02-04T00:00:00Z', '+2005-02-06T00:00:00Z', '/g/1225q3_4');\nDatabase State:\n- Table: `english_badminton_championships`, Columns: [`label`, `description`, `sport`, `followed_by`, `follows`, `instance_of`, `edition_number`, `country`, `point_in_time`, `location`, `competition_class`, `has_parts`, `on_focus_list_of_wikimedia_project`, `home_venue`, `start_time`, `end_time`, `google_knowledge_graph_id`]\n- Table: `physical_location`, Columns: [`label`, `description`, `instance_of`, `commons_category`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `curlie_id`, `musicbrainz_area_id`, `freebase_id`, `page_banner`, `image`, `geonames_id`, `viaf_id`, `local_dialing_code`, `vision_of_britain_place_id`, `toid`, `whos_on_first_id`, `located_in_time_zone`, `historic_county`, `worldcat_identities_id`, `library_of_congress_authority_id`, `factgrid_item_id`, `national_library_of_israel_j9u_id`]",
        "Response": "Table: `english_badminton_championships`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Branch_ID`, `Name`, `Open_year`, `Address_road`, `City`, `membership_amount`)  VALUES (7, 'Saint Amant', '2015', 'Concord Road', 'London', '91');\nDatabase State:\n- Table: `branch`, Columns: [`Branch_ID`, `Name`, `Open_year`, `Address_road`, `City`, `membership_amount`]\n- Table: `member`, Columns: [`Member_ID`, `Card_Number`, `Name`, `Hometown`, `Level`]\n- Table: `membership_register_branch`, Columns: [`Member_ID`, `Branch_ID`, `Register_Year`]\n- Table: `purchase`, Columns: [`Member_ID`, `Branch_ID`, `Year`, `Total_pounds`]",
        "Response": "Table: `branch`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `taxon_rank`, `parent_taxon`, `taxon_name`, `instance_of`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `mesh_descriptor_id`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`, `catalogue_of_life_id`)  VALUES ('Mesorhizobium ciceri', 'species of bacterium', 'species', 'Mesorhizobium', 'Mesorhizobium ciceri', 'taxon', '/m/0_v7bt5', '39645.0', '3220971.0', '963300.0', 'Gram-negative bacteria', 'nan', '10031928.0', 'http://www.bacterio.net/mesorhizobium.html#ciceri', '2776667247.0', '6RBS4');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `encodes`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `has_parts`, `biological_process`, `molecular_function`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `news_report` (`journalist_ID`, `Event_ID`, `Work_Type`)  VALUES (1, 3, 'Screening');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `news_report`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Election_ID`, `Counties_Represented`, `District`, `Delegate`, `Party`, `First_Elected`, `Committee`)  VALUES (8, '13', 3, 'Turner, Frank S. Frank S. Turner', 7, 1994.0, 'Ways and Means');\nDatabase State:\n- Table: `election`, Columns: [`Election_ID`, `Counties_Represented`, `District`, `Delegate`, `Party`, `First_Elected`, `Committee`]\n- Table: `county`, Columns: [`County_Id`, `County_name`, `Population`, `Zip_code`]\n- Table: `party`, Columns: [`Party_ID`, `Year`, `Party`, `Governor`, `Lieutenant_Governor`, `Comptroller`, `Attorney_General`, `US_Senate`]",
        "Response": "Table: `election`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO PlayerInfo (ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0)  VALUES (9391, 'Neil Komadoski', '1982-02-10', 1982, 2, 10, 'Chesterfield, MO, USA', 'USA', 74, 203, 'D', 'L', 2001, 3, 81, 'Ottawa Senators', 83, 0, 0, 'no');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: PlayerInfo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `country`, `shares_border_with`, `capital`, `commons_category`, `locator_map_image`, `coordinate_location`, `openstreetmap_relation_id`, `located_in_the_administrative_territorial_entity`, `official_website`, `topics_main_category`, `page_banner`, `curlie_id`, `instance_of`, `freebase_id`, `gnis_id`, `inception`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `category_of_associated_people`, `seal_image`, `area`, `library_of_congress_authority_id`, `viaf_id`, `population`, `contains_the_administrative_territorial_entity`, `water_as_percent_of_area`, `named_after`, `getty_thesaurus_of_geographic_names_id`, `native_label`, `archinform_location_id`, `wolfram_language_entity_code`, `whos_on_first_id`, `category_for_maps`, `worldcat_identities_id`, `hasc`, `ballotpedia_id`, `inaturalist_place_id`, `national_library_of_israel_j9u_id`, `per_capita_income`, `number_of_households`)  VALUES ('North Dakota', 'state of the United States of America', 'United States of America', 'Saskatchewan', 'Bismarck', 'North Dakota', 'North Dakota in United States.svg', '47.5', '161653.0', 'United States of America', 'https://www.nd.gov/', 'Category:North Dakota', 'Bannernorthdakota.jpg', 'Regional/North_America/United_States/North_Dakota/', 'U.S. state', '/m/05fky', '1779797.0', '+1889-11-02T00:00:00Z', 'Category:Births in North Dakota', 'Category:Death in North Dakota', '5690763.0', 'Category:People from North Dakota', 'Seal of the State of North Dakota.svg', 183108.0, 'n79068662', '180769387.0', 779094.0, 'Adams County', 2.399999999999999912, 'Dakota people', '7007705.0', 'State of North Dakota', '6076.0', 'Entity[\"AdministrativeDivision\", {\"NorthDakota\", \"UnitedStates\"}]', '85688525.0', 'Category:Maps of North Dakota', 'lccn-n79068662', 'US.ND', 'North_Dakota', '13.0', '9.870075642396052e+17', 36289.0, 320873.0);\nDatabase State:\n- Table: `park_district`, Columns: [`label`, `description`, `instance_of`, `country`, `official_website`, `located_in_the_administrative_territorial_entity`, `osm_name_suggestion_index_identifier`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `country`, `shares_border_with`, `capital`, `commons_category`, `locator_map_image`, `coordinate_location`, `openstreetmap_relation_id`, `located_in_the_administrative_territorial_entity`, `official_website`, `topics_main_category`, `page_banner`, `curlie_id`, `instance_of`, `freebase_id`, `gnis_id`, `inception`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `category_of_associated_people`, `seal_image`, `area`, `library_of_congress_authority_id`, `viaf_id`, `population`, `contains_the_administrative_territorial_entity`, `water_as_percent_of_area`, `named_after`, `getty_thesaurus_of_geographic_names_id`, `native_label`, `archinform_location_id`, `wolfram_language_entity_code`, `whos_on_first_id`, `category_for_maps`, `worldcat_identities_id`, `hasc`, `ballotpedia_id`, `inaturalist_place_id`, `national_library_of_israel_j9u_id`, `per_capita_income`, `number_of_households`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `capital_city` (`label`, `description`, `country`, `siruta_code`, `coordinate_location`, `population`, `instance_of`, `located_in_the_administrative_territorial_entity`, `capital_of`, `geonames_id`, `located_in_time_zone`, `native_label`, `image`, `whos_on_first_id`)  VALUES ('Giurgiu', 'locality in Giurgiu County, Romania', 'Romania', '100530', '43.9', 61353.0, 'constituent locality', 'Giurgiu', 'Giurgiu', '677106', 'UTC+02:00', 'Giurgiu', 'Str garii.JPG', '101751947.0');\nDatabase State:\n- Table: `human_settlement`, Columns: [`label`, `description`, `country`, `siruta_code`, `coordinate_location`, `population`, `instance_of`, `located_in_the_administrative_territorial_entity`, `capital_of`, `geonames_id`, `located_in_time_zone`, `native_label`, `image`, `whos_on_first_id`]\n- Table: `language`, Columns: [`label`, `description`, `great_russian_encyclopedia_online_id`, `commons_category`, `gost_77597_code`, `glottolog_code`, `art_architecture_thesaurus_id`, `instance_of`, `iso_639_2_code`, `short_name`, `topics_main_category`, `ndl_authority_id`, `writing_system`, `biblioth\u00e8que_nationale_de_france_id`, `linguistic_typology`, `distribution_map`, `babelnet_id`, `gnd_id`, `ietf_language_tag`, `number_of_speakers_writers_or_signers`, `unesco_thesaurus_id`, `encyclop\u00e6dia_britannica_online_id`, `has_grammatical_case`, `language_regulatory_body`, `iso_639_3_code`, `freebase_id`, `subclass_of`, `category_for_films_in_this_language`, `library_of_congress_authority_id`, `iab_code`, `wikimedia_language_code`, `country`, `native_label`, `iso_639_1_code`, `wals_lect_code`, `bncf_thesaurus_id`, `omegawiki_defined_meaning`, `ethnologuecom_language_code`, `loc_and_marc_vocabularies_id`, `ethnologue_language_status`, `abs_ascl_2011_code`, `indigenous_to`, `australian_educational_vocabulary_id`, `exact_match`, `related_category`, `yso_id`, `kbpedia_id`, `described_by_source`, `dewey_decimal_classification`, `posix_locale_identifier`, `krugosvet_article`, `national_library_of_israel_j9u_id`, `lingua_libre_id`, `on_focus_list_of_wikimedia_project`, `encyclopedia_of_china_third_edition_id`, `store_norske_leksikon_id`, `wordnet_31_synset_id`, `nkcr_aut_id`, `online_pwn_encyclopedia_id`, `eu_knowledge_graph_item_id`, `entry_in_abbreviations_table`]\n- Table: `office_held_by_head_of_government`, Columns: [`label`, `description`, `instance_of`, `country`, `applies_to_jurisdiction`, `subclass_of`]\n- Table: `municipiu_of_romania`, Columns: [`label`, `description`, `commons_category`, `coat_of_arms_image`, `country`, `coordinate_location`, `topics_main_category`, `freebase_id`, `siruta_code`, `population`, `located_in_the_administrative_territorial_entity`, `capital`, `contains_settlement`, `geonames_id`, `image`, `viaf_id`, `official_website`, `head_of_government`, `area`, `elevation_above_sea_level`, `located_in_time_zone`, `locator_map_image`, `postal_code`, `instance_of`, `native_label`, `category_for_maps`, `office_held_by_head_of_government`, `pronunciation_audio`, `inaturalist_place_id`, `telephone_number`, `street_address`]",
        "Response": "Table: `capital_city`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Department_ID`, `Name`, `Creation`, `Ranking`, `Budget_in_Billions`, `Num_Employees`)  VALUES (14, 'Veterans Affairs', '1989', 14, 73.20000000000000284, 235000.0);\nDatabase State:\n- Table: `management`, Columns: [`department_ID`, `head_ID`, `temporary_acting`]\n- Table: `head`, Columns: [`head_ID`, `name`, `born_state`, `age`]",
        "Response": "Table: `department`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ClubID, ClubName, ClubDesc, ClubLocation)  VALUES (1, 'Bootup Baltimore', 'Refurbish computers; teach kids and adults about computer basics.', 'AKW');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Club"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `dna_directed_rna_polymerase_subunit_beta_prime` (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `has_parts`, `molecular_function`, `biological_process`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('DNA-directed RNA polymerase subunit beta/beta'' HP1198', 'microbial protein found in Helicobacter pylori 26695', 'O25806', 'Helicobacter pylori 26695', 'protein', 'DNA-directed RNA polymerase subunit beta/beta'' HP1198', 'RNA polymerase, beta subunit, protrusion', 'transferase activity', 'transcription, DNA-templated', 'protein', 'NP_207989', 'DNA-directed RNA polymerase, subunit beta-prime');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `dna_directed_rna_polymerase_subunit_beta_prime`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, category, person, role, credited)  VALUES ('S20-E18', 'Cast', 'Tress MacNeille', 'Various Kids', 'true');\nDatabase State:\n- Table: Character_Award, Columns: [award_id, character]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `homologene_id`, `refseq_rna_id`, `ensembl_transcript_id`, `ortholog`, `encodes`, `found_in_taxon`, `exact_match`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`)  VALUES ('c5', 'protein-coding gene in the species Danio rerio', '565774', 'nan', 'ENSDARG00000021004', '20412.0', 'XM_001919191', 'ENSDART00000097325', 'Hc', 'Complement component 5', 'Danio rerio', 'nan', 'reverse strand', '63509581.0', '63458263.0', 'Danio rerio chromosome 5', 'gene');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `biological_process`, `cell_component`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `anaphylatoxin_complement_system`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `biological_process`, `cell_component`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `homologene_id`, `refseq_rna_id`, `ensembl_transcript_id`, `ortholog`, `encodes`, `found_in_taxon`, `exact_match`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth)  VALUES (2666, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: actor, Columns: [ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth]\n- Table: characters, Columns: [MovieID, ActorID, `Character Name`, creditOrder, pay, screentime]\n- Table: movie, Columns: [MovieID, Title, `MPAA Rating`, Budget, Gross, `Release Date`, Genre, Runtime, Rating, `Rating Count`, Summary]",
        "Response": "Table: actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`School_id`, `Year`, `Budgeted`, `total_budget_percent_budgeted`, `Invested`, `total_budget_percent_invested`, `Budget_invested_percent`)  VALUES (1, 2003, 119527, 2.399999999999999912, 85249, 2.200000000000000178, '71.3');\nDatabase State:\n- Table: `endowment`, Columns: [`endowment_id`, `School_id`, `donator_name`, `amount`]\n- Table: `School`, Columns: [`School_id`, `School_name`, `Location`, `Mascot`, `Enrollment`, `IHSAA_Class`, `IHSAA_Football_Class`, `County`]",
        "Response": "Table: `budget`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `chromosome` (`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`)  VALUES ('Rattus norvegicus chromosome 10', 'mammalian chromosome', 'NC_051345', 'brown rat', 'chromosome');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `chromosome`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`People_ID`, `District`, `Name`, `Party`, `Age`)  VALUES (2, 'New York 2', 'James Humphrey', 'Republican', 38);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `SalesOrderHeader` (SalesOrderID, RevisionNumber, OrderDate, DueDate, ShipDate, Status, OnlineOrderFlag, SalesOrderNumber, PurchaseOrderNumber, AccountNumber, CustomerID, SalesPersonID, TerritoryID, BillToAddressID, ShipToAddressID, ShipMethodID, CreditCardID, CreditCardApprovalCode, CurrencyRateID, SubTotal, TaxAmt, Freight, TotalDue, Comment, rowguid, ModifiedDate)  VALUES (48090, 8, '2012-09-30 00:00:00.0', '2012-10-12 00:00:00.0', '2012-10-07 00:00:00.0', 5, 0, 'SO48090', 'PO9512117066', '10-4020-000135', 29667, 279, 5, 923, 923, 5, 14371, '118742Vi74498', NULL, 7540.910399999999755, 721.5759000000000469, 225.4925000000000068, 8487.978800000000775, NULL, '5DE2EA1F-55D5-49EB-8146-A5F15157BF30', '2012-10-07 00:00:00.0');\nDatabase State:\n- Table: Shift, Columns: [ShiftID, Name, StartTime, EndTime, ModifiedDate]\n- Table: CountryRegionCurrency, Columns: [CountryRegionCode, CurrencyCode, ModifiedDate]\n- Table: ProductCostHistory, Columns: [ProductID, StartDate, EndDate, StandardCost, ModifiedDate]\n- Table: SalesPersonQuotaHistory, Columns: [BusinessEntityID, QuotaDate, SalesQuota, rowguid, ModifiedDate]\n- Table: Currency, Columns: [CurrencyCode, Name, ModifiedDate]\n- Table: `BusinessEntity`, Columns: [BusinessEntityID, rowguid, ModifiedDate]\n- Table: SalesOrderHeaderSalesReason, Columns: [SalesOrderID, SalesReasonID, ModifiedDate]\n- Table: ProductVendor, Columns: [ProductID, BusinessEntityID, AverageLeadTime, StandardPrice, LastReceiptCost, LastReceiptDate, MinOrderQty, MaxOrderQty, OnOrderQty, UnitMeasureCode, ModifiedDate]\n- Table: TransactionHistoryArchive, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: TransactionHistory, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: ProductModel, Columns: [ProductModelID, Name, CatalogDescription, Instructions, rowguid, ModifiedDate]\n- Table: PurchaseOrderDetail, Columns: [PurchaseOrderID, PurchaseOrderDetailID, DueDate, OrderQty, ProductID, UnitPrice, LineTotal, ReceivedQty, RejectedQty, StockedQty, ModifiedDate]\n- Table: SalesPerson, Columns: [BusinessEntityID, TerritoryID, SalesQuota, Bonus, CommissionPct, SalesYTD, SalesLastYear, rowguid, ModifiedDate]\n- Table: ProductInventory, Columns: [ProductID, LocationID, Shelf, Bin, Quantity, rowguid, ModifiedDate]\n- Table: `Document`, Columns: [DocumentNode, DocumentLevel, Title, Owner, FolderFlag, FileName, FileExtension, Revision, ChangeNumber, Status, DocumentSummary, Document, rowguid, ModifiedDate]\n- Table: ProductPhoto, Columns: [ProductPhotoID, ThumbNailPhoto, ThumbnailPhotoFileName, LargePhoto, LargePhotoFileName, ModifiedDate]\n- Table: SalesReason, Columns: [SalesReasonID, Name, ReasonType, ModifiedDate]\n- Table: `BillOfMaterials`, Columns: [BillOfMaterialsID, ProductAssemblyID, ComponentID, StartDate, EndDate, UnitMeasureCode, BOMLevel, PerAssemblyQty, ModifiedDate]\n- Table: ProductCategory, Columns: [ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: `AddressType`, Columns: [AddressTypeID, Name, rowguid, ModifiedDate]\n- Table: `CreditCard`, Columns: [CreditCardID, CardType, CardNumber, ExpMonth, ExpYear, ModifiedDate]\n- Table: SalesTerritoryHistory, Columns: [BusinessEntityID, TerritoryID, StartDate, EndDate, rowguid, ModifiedDate]\n- Table: PersonCreditCard, Columns: [BusinessEntityID, CreditCardID, ModifiedDate]\n- Table: SalesTaxRate, Columns: [SalesTaxRateID, StateProvinceID, TaxType, TaxRate, Name, rowguid, ModifiedDate]\n- Table: SalesTerritory, Columns: [TerritoryID, Name, CountryRegionCode, `Group`, SalesYTD, SalesLastYear, CostYTD, CostLastYear, rowguid, ModifiedDate]\n- Table: `ContactType`, Columns: [ContactTypeID, Name, ModifiedDate]\n- Table: `CurrencyRate`, Columns: [CurrencyRateID, CurrencyRateDate, FromCurrencyCode, ToCurrencyCode, AverageRate, EndOfDayRate, ModifiedDate]\n- Table: Employee, Columns: [BusinessEntityID, NationalIDNumber, LoginID, OrganizationNode, OrganizationLevel, JobTitle, BirthDate, MaritalStatus, Gender, HireDate, SalariedFlag, VacationHours, SickLeaveHours, CurrentFlag, rowguid, ModifiedDate]\n- Table: ProductDescription, Columns: [ProductDescriptionID, Description, rowguid, ModifiedDate]\n- Table: SpecialOffer, Columns: [SpecialOfferID, Description, DiscountPct, Type, Category, StartDate, EndDate, MinQty, MaxQty, rowguid, ModifiedDate]\n- Table: Culture, Columns: [CultureID, Name, ModifiedDate]\n- Table: `EmployeeDepartmentHistory`, Columns: [BusinessEntityID, DepartmentID, ShiftID, StartDate, EndDate, ModifiedDate]\n- Table: `SalesOrderHeader`, Columns: [SalesOrderID, RevisionNumber, OrderDate, DueDate, ShipDate, Status, OnlineOrderFlag, SalesOrderNumber, PurchaseOrderNumber, AccountNumber, CustomerID, SalesPersonID, TerritoryID, BillToAddressID, ShipToAddressID, ShipMethodID, CreditCardID, CreditCardApprovalCode, CurrencyRateID, SubTotal, TaxAmt, Freight, TotalDue, Comment, rowguid, ModifiedDate]\n- Table: `Department`, Columns: [DepartmentID, Name, GroupName, ModifiedDate]\n- Table: ShipMethod, Columns: [ShipMethodID, Name, ShipBase, ShipRate, rowguid, ModifiedDate]\n- Table: `StateProvince`, Columns: [StateProvinceID, StateProvinceCode, CountryRegionCode, IsOnlyStateProvinceFlag, Name, TerritoryID, rowguid, ModifiedDate]\n- Table: `Address`, Columns: [AddressID, AddressLine1, AddressLine2, City, StateProvinceID, PostalCode, SpatialLocation, rowguid, ModifiedDate]\n- Table: SalesOrderDetail, Columns: [SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate]\n- Table: WorkOrder, Columns: [WorkOrderID, ProductID, OrderQty, StockedQty, ScrappedQty, StartDate, EndDate, DueDate, ScrapReasonID, ModifiedDate]\n- Table: ProductModelProductDescriptionCulture, Columns: [ProductModelID, ProductDescriptionID, CultureID, ModifiedDate]\n- Table: Store, Columns: [BusinessEntityID, Name, SalesPersonID, Demographics, rowguid, ModifiedDate]",
        "Response": "Table: `SalesOrderHeader`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num)  VALUES (55, 17, 4, 'rectangle', 'long', 'not_double', 'none', 2, 'rectangle', 3);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `twin_town` (`label`, `description`, `country`, `head_of_government`, `located_in_the_administrative_territorial_entity`, `commons_category`, `postal_code`, `instance_of`, `twinned_administrative_body`, `located_in_time_zone`, `image`, `local_dialing_code`, `coordinate_location`, `page_banner`, `topics_main_category`, `musicbrainz_area_id`, `freebase_id`, `gnd_id`, `population`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `openstreetmap_relation_id`, `category_of_associated_people`, `capital_of`, `viaf_id`, `official_name`, `official_website`, `commons_gallery`, `facebook_places_id`, `elevation_above_sea_level`, `area`, `flag_image`, `library_of_congress_authority_id`, `native_label`, `quora_topic_id`, `us_national_archives_identifier`, `great_russian_encyclopedia_online_id`, `described_by_source`, `encyclop\u00e6dia_universalis_id`, `archinform_location_id`, `nkcr_aut_id`, `gran_enciclop\u00e8dia_catalana_id`, `whos_on_first_id`, `encyclop\u00e6dia_britannica_online_id`, `category_for_maps`, `french_vikidia_id`, `worldcat_identities_id`, `factgrid_item_id`, `national_library_of_israel_j9u_id`, `store_norske_leksikon_id`, `online_pwn_encyclopedia_id`, `locator_map_image`, `curlie_id`)  VALUES ('Andorra la Vella', 'capital of Andorra', 'Andorra', 'Marc Pons Martell', 'Andorra la Vella', 'Andorra la Vella', 'AD500', 'capital city', 'Foix', 'UTC+02:00', 'Santa Coloma Andorra.jpg', 'nan', '42.5', 'Andorra la Vella banner.jpg', 'Category:Andorra la Vella', 'ef59e1df-7525-43ff-87ed-409648f754c7', '/m/0g53z', '4355876-8', 22151.0, 'nan', 'Category:Deaths in Andorra la Vella', '3041563.0', '3657693.0', 'Category:People from Andorra la Vella', 'Andorra', '140183426', 'Andorra la Vella', 'https://www.andorralavella.ad/', 'Andorra la Vella', '110344915654538.0', 1022.0, 30.0, 'Flag of Andorra la Vella.svg', 'n88060677', 'Andorra la Vella', 'Andorra-La-Vella', 'nan', '1822576.0', 'Brockhaus and Efron Encyclopedic Dictionary', 'andorre-la-vieille', '8373.0', 'nan', '3871.0', '101877135.0', 'place/Andorra-la-Vella', 'nan', 'Andorre-la-Vieille', 'lccn-n88060677', 'nan', '9.870075601117052e+17', 'Andorra_la_Vella', '3869271.0', 'Andorra la Vella in Andorra.svg', 'Regional/Europe/Andorra/Localities/Andorra_La_Vella/');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `commons_category`, `flag_image`, `coat_of_arms_image`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `topics_main_category`, `instance_of`, `freebase_id`, `musicbrainz_area_id`, `geonames_id`, `locator_map_image`, `area`, `capital`, `openstreetmap_relation_id`, `population`, `whos_on_first_id`, `inaturalist_place_id`]\n- Table: `twin_town`, Columns: [`label`, `description`, `country`, `head_of_government`, `located_in_the_administrative_territorial_entity`, `commons_category`, `postal_code`, `instance_of`, `twinned_administrative_body`, `located_in_time_zone`, `image`, `local_dialing_code`, `coordinate_location`, `page_banner`, `topics_main_category`, `musicbrainz_area_id`, `freebase_id`, `gnd_id`, `population`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `openstreetmap_relation_id`, `category_of_associated_people`, `capital_of`, `viaf_id`, `official_name`, `official_website`, `commons_gallery`, `facebook_places_id`, `elevation_above_sea_level`, `area`, `flag_image`, `library_of_congress_authority_id`, `native_label`, `quora_topic_id`, `us_national_archives_identifier`, `great_russian_encyclopedia_online_id`, `described_by_source`, `encyclop\u00e6dia_universalis_id`, `archinform_location_id`, `nkcr_aut_id`, `gran_enciclop\u00e8dia_catalana_id`, `whos_on_first_id`, `encyclop\u00e6dia_britannica_online_id`, `category_for_maps`, `french_vikidia_id`, `worldcat_identities_id`, `factgrid_item_id`, `national_library_of_israel_j9u_id`, `store_norske_leksikon_id`, `online_pwn_encyclopedia_id`, `locator_map_image`, `curlie_id`]\n- Table: `pan_american_judo_championships`, Columns: [`label`, `description`, `sport`, `instance_of`, `sports_season_of_league_or_competition`, `point_in_time`, `country`, `location`, `followed_by`, `follows`, `judoinside_competition_id`, `start_time`, `end_time`]\n- Table: `followed_by`, Columns: [`label`, `description`, `sport`, `instance_of`, `sports_season_of_league_or_competition`, `point_in_time`, `country`, `location`, `followed_by`, `follows`, `judoinside_competition_id`, `start_time`, `end_time`]\n- Table: `physical_location`, Columns: [`label`, `description`, `topics_main_category`, `twinned_administrative_body`, `coat_of_arms_image`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `page_banner`, `instance_of`, `musicbrainz_area_id`, `freebase_id`, `commons_category`, `geonames_id`, `gnd_id`, `inception`, `postal_code`, `located_in_time_zone`, `official_website`, `category_of_associated_people`, `described_by_source`, `viaf_id`, `elevation_above_sea_level`, `population`, `area`, `gran_enciclop\u00e8dia_catalana_id`, `encyclop\u00e6dia_britannica_online_id`, `quora_topic_id`, `us_national_archives_identifier`, `archinform_location_id`, `library_of_congress_authority_id`, `flag_image`, `whos_on_first_id`, `worldcat_identities_id`, `wordnet_31_synset_id`, `image`, `online_pwn_encyclopedia_id`, `national_library_of_israel_j9u_id`]\n- Table: `place_of_death`, Columns: [`label`, `description`, `instance_of`, `category_combines_topics`, `category_contains`]\n- Table: `capital_city`, Columns: [`label`, `description`, `category_for_people_who_died_here`, `topics_main_category`, `twinned_administrative_body`, `coat_of_arms_image`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `page_banner`, `instance_of`, `commons_gallery`, `musicbrainz_area_id`, `freebase_id`, `commons_category`, `geonames_id`, `gnd_id`, `inception`, `postal_code`, `local_dialing_code`, `located_in_time_zone`, `official_website`, `category_of_associated_people`, `capital_of`, `described_by_source`, `viaf_id`, `elevation_above_sea_level`, `facebook_places_id`, `population`, `area`, `gran_enciclop\u00e8dia_catalana_id`, `encyclop\u00e6dia_britannica_online_id`, `quora_topic_id`, `us_national_archives_identifier`, `encyclop\u00e6dia_universalis_id`, `demonym`, `different_from`, `great_russian_encyclopedia_online_id`, `archinform_location_id`, `library_of_congress_authority_id`, `flag_image`, `whos_on_first_id`, `nkcr_aut_id`, `worldcat_identities_id`, `gynopedia_id`, `interlingual_index_id`, `wordnet_31_synset_id`, `factgrid_item_id`, `official_name`, `store_norske_leksikon_id`, `image`, `online_pwn_encyclopedia_id`, `national_library_of_israel_j9u_id`, `native_label`, `den_store_danske_id`, `on_focus_list_of_wikimedia_project`, `biblioth\u00e8que_nationale_de_france_id`]",
        "Response": "Table: `twin_town`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `cites_work`, `instance_of`, `found_in_taxon`, `reactome_id`, `part_of`, `exact_match`, `has_parts`)  VALUES ('LTD4 is converted to LTE4 by DPEP1/2', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-266012)', 'Purification and characterization of human microsomal dipeptidase', 'biological process', 'Homo sapiens', 'R-HSA-266012', 'Synthesis of Leukotrienes (LT) and Eoxins (EX)', 'https://identifiers.org/reactome:R-HSA-266012', 'water');\nDatabase State:\n- Table: `synthesis_of_leukotrienes_lt_and_eoxins_ex`, Columns: [`label`, `description`, `cites_work`, `instance_of`, `found_in_taxon`, `reactome_id`, `part_of`, `exact_match`, `has_parts`]",
        "Response": "Table: `synthesis_of_leukotrienes_lt_and_eoxins_ex`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO observations (DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, VALUE, UNITS)  VALUES ('2007-12-05', '3630abb3-e44f-48ff-b599-26c86d1e1cce', '442bc385-ea98-4c07-8d0c-c78ccfa76f58', '39156-5', 'Body Mass Index', 43.5, 'kg/m2');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: observations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Person (person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname)  VALUES ('nm0686761', 'Mike Platarote Jr.', NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Award, Columns: [award_id, organization, year, award_category, award, series, episode_id, person_id, role, result]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Credit, Columns: [episode_id, person_id, category, role, credited]",
        "Response": "Table: Person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Event_ID`, `Event_Name`, `Party_ID`, `Member_in_charge_ID`)  VALUES (6, 'Election Meeting', 3, 11);\nDatabase State:\n- Table: `party_events`, Columns: [`Event_ID`, `Event_Name`, `Party_ID`, `Member_in_charge_ID`]\n- Table: `member`, Columns: [`Member_ID`, `Member_Name`, `Party_ID`, `In_office`]",
        "Response": "Table: `party_events`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `representative` (`Representative_ID`, `Name`, `State`, `Party`, `Lifespan`)  VALUES (2, 'John Quayle', 'New York', 'Democratic', '1868\u20131930');\nDatabase State:\n- Table: `representative`, Columns: [`Representative_ID`, `Name`, `State`, `Party`, `Lifespan`]\n- Table: `election`, Columns: [`Election_ID`, `Representative_ID`, `Date`, `Votes`, `Vote_Percent`, `Seats`, `Place`]",
        "Response": "Table: `representative`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `fictional_location` (`label`, `description`, `instance_of`, `fandom_article_id`, `from_narrative_universe`, `present_in_work`)  VALUES ('Sea Treader''s Path', 'fictional biome on Planet 4546B', 'fictional location', 'en.subnautica:Sea_Treader''s_Path', 'Subnautica', 'Subnautica');\nDatabase State:\n- Table: `fictional_universe`, Columns: [`label`, `description`, `instance_of`, `fictional_universe_described_in`]\n- Table: `genre`, Columns: [`label`, `description`, `instance_of`, `subclass_of`, `topics_main_category`, `freebase_id`]",
        "Response": "Table: `fictional_location`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO matchs (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('D2', '2006-03-31', 'Paderborn', 'Bochum', 1, 3, 'A', 2006);\nDatabase State:\n- Table: matchs, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Answer` (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('-1', 2017, 2871, 64);\nDatabase State:\n- Table: Question, Columns: [questiontext, questionid]\n- Table: Survey, Columns: [SurveyID, Description]\n- Table: `Answer`, Columns: [AnswerText, SurveyID, UserID, QuestionID]",
        "Response": "Table: `Answer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Ingredient (ingredient_id, category, name, plural)  VALUES (722, 'deli meats', 'chorizo or hot Italian sausage', NULL);\nDatabase State:\n- Table: Recipe, Columns: [recipe_id, title, subtitle, servings, yield_unit, prep_min, cook_min, stnd_min, source, intro, directions]\n- Table: Quantity, Columns: [quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional]\n- Table: Ingredient, Columns: [ingredient_id, category, name, plural]",
        "Response": "Table: Ingredient"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, GameID, Hours_Played)  VALUES (1032, 3, 100);\nDatabase State:\n- Table: Plays_Games, Columns: [StuID, GameID, Hours_Played]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: SportsInfo, Columns: [StuID, SportName, HoursPerWeek, GamesPlayed, OnScholarship]",
        "Response": "Table: Plays_Games"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO country (zip_code, county, state)  VALUES (19526, 'BERKS', 'PA');\nDatabase State:\n- Table: area_code, Columns: [zip_code, area_code]\n- Table: zip_data, Columns: [zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, `1st_quarter_payroll`, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA]\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]\n- Table: state, Columns: [abbreviation, name]\n- Table: country, Columns: [zip_code, county, state]",
        "Response": "Table: country"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (3853484, 4, 14000, 435, 940);\nDatabase State:\n- Table: Customers, Columns: [CustomerID, FirstName, MiddleInitial, LastName]\n- Table: Employees, Columns: [EmployeeID, FirstName, MiddleInitial, LastName]\n- Table: Products, Columns: [ProductID, Name, Price]\n- Table: Sales, Columns: [SalesID, SalesPersonID, CustomerID, ProductID, Quantity]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO WorkOrder (WorkOrderID, ProductID, OrderQty, StockedQty, ScrappedQty, StartDate, EndDate, DueDate, ScrapReasonID, ModifiedDate)  VALUES (45555, 806, 12, 12, 0, '2013-09-11 00:00:00.0', '2013-09-22 00:00:00.0', '2013-09-22 00:00:00.0', NULL, '2013-09-22 00:00:00.0');\nDatabase State:\n- Table: SalesOrderDetail, Columns: [SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate]\n- Table: ScrapReason, Columns: [ScrapReasonID, Name, ModifiedDate]\n- Table: `Document`, Columns: [DocumentNode, DocumentLevel, Title, Owner, FolderFlag, FileName, FileExtension, Revision, ChangeNumber, Status, DocumentSummary, Document, rowguid, ModifiedDate]\n- Table: SalesPersonQuotaHistory, Columns: [BusinessEntityID, QuotaDate, SalesQuota, rowguid, ModifiedDate]\n- Table: SalesTerritory, Columns: [TerritoryID, Name, CountryRegionCode, `Group`, SalesYTD, SalesLastYear, CostYTD, CostLastYear, rowguid, ModifiedDate]\n- Table: BusinessEntityContact, Columns: [BusinessEntityID, PersonID, ContactTypeID, rowguid, ModifiedDate]\n- Table: ProductPhoto, Columns: [ProductPhotoID, ThumbNailPhoto, ThumbnailPhotoFileName, LargePhoto, LargePhotoFileName, ModifiedDate]\n- Table: SalesPerson, Columns: [BusinessEntityID, TerritoryID, SalesQuota, Bonus, CommissionPct, SalesYTD, SalesLastYear, rowguid, ModifiedDate]\n- Table: `CreditCard`, Columns: [CreditCardID, CardType, CardNumber, ExpMonth, ExpYear, ModifiedDate]\n- Table: SpecialOfferProduct, Columns: [SpecialOfferID, ProductID, rowguid, ModifiedDate]\n- Table: `CurrencyRate`, Columns: [CurrencyRateID, CurrencyRateDate, FromCurrencyCode, ToCurrencyCode, AverageRate, EndOfDayRate, ModifiedDate]\n- Table: `SalesOrderHeader`, Columns: [SalesOrderID, RevisionNumber, OrderDate, DueDate, ShipDate, Status, OnlineOrderFlag, SalesOrderNumber, PurchaseOrderNumber, AccountNumber, CustomerID, SalesPersonID, TerritoryID, BillToAddressID, ShipToAddressID, ShipMethodID, CreditCardID, CreditCardApprovalCode, CurrencyRateID, SubTotal, TaxAmt, Freight, TotalDue, Comment, rowguid, ModifiedDate]\n- Table: EmailAddress, Columns: [BusinessEntityID, EmailAddressID, EmailAddress, rowguid, ModifiedDate]\n- Table: `BillOfMaterials`, Columns: [BillOfMaterialsID, ProductAssemblyID, ComponentID, StartDate, EndDate, UnitMeasureCode, BOMLevel, PerAssemblyQty, ModifiedDate]\n- Table: BusinessEntityAddress, Columns: [BusinessEntityID, AddressID, AddressTypeID, rowguid, ModifiedDate]\n- Table: `Location`, Columns: [LocationID, Name, CostRate, Availability, ModifiedDate]\n- Table: ProductDocument, Columns: [ProductID, DocumentNode, ModifiedDate]\n- Table: ProductCostHistory, Columns: [ProductID, StartDate, EndDate, StandardCost, ModifiedDate]\n- Table: ProductModelProductDescriptionCulture, Columns: [ProductModelID, ProductDescriptionID, CultureID, ModifiedDate]\n- Table: ProductSubcategory, Columns: [ProductSubcategoryID, ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: `Address`, Columns: [AddressID, AddressLine1, AddressLine2, City, StateProvinceID, PostalCode, SpatialLocation, rowguid, ModifiedDate]\n- Table: `EmployeePayHistory`, Columns: [BusinessEntityID, RateChangeDate, Rate, PayFrequency, ModifiedDate]\n- Table: Customer, Columns: [CustomerID, PersonID, StoreID, TerritoryID, AccountNumber, rowguid, ModifiedDate]\n- Table: ProductCategory, Columns: [ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: PurchaseOrderDetail, Columns: [PurchaseOrderID, PurchaseOrderDetailID, DueDate, OrderQty, ProductID, UnitPrice, LineTotal, ReceivedQty, RejectedQty, StockedQty, ModifiedDate]\n- Table: Culture, Columns: [CultureID, Name, ModifiedDate]\n- Table: UnitMeasure, Columns: [UnitMeasureCode, Name, ModifiedDate]\n- Table: `ContactType`, Columns: [ContactTypeID, Name, ModifiedDate]",
        "Response": "Table: WorkOrder"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO actor (ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth)  VALUES (1054, 'Yeardley Smith', '1964-07-03', 'Paris', 'France', 63, 'Comic actress and voice specialist Yeardley Smith has made a virtue out of her odd looks, small figure and distinctive, child-like nasal tones. Lending vocal life to the animated role of \"Lisa Simpson\" - the intelligent, caring, saxophone-droning, vegetarian member of the Simpson family - has been her bread-and-butter job for over 20 years. She is...', NULL, NULL, '$85,000,000.00');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO roysched (title_id, lorange, hirange, royalty)  VALUES ('PS1372', 40001, 50000, 18);\nDatabase State:\n- Table: sales, Columns: [stor_id, ord_num, ord_date, qty, payterms, title_id]\n- Table: pub_info, Columns: [pub_id, logo, pr_info]\n- Table: jobs, Columns: [job_id, job_desc, min_lvl, max_lvl]\n- Table: employee, Columns: [emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date]\n- Table: discounts, Columns: [discounttype, stor_id, lowqty, highqty, discount]\n- Table: authors, Columns: [au_id, au_lname, au_fname, phone, address, city, state, zip, contract]\n- Table: titleauthor, Columns: [au_id, title_id, au_ord, royaltyper]\n- Table: roysched, Columns: [title_id, lorange, hirange, royalty]",
        "Response": "Table: roysched"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `subreddit` (`label`, `description`, `instance_of`, `official_website`, `number_of_subscribers`, `search_formatter_url`, `language_of_work_or_name`, `main_subject`)  VALUES ('r/itookapicture', 'subreddit focused on photography', 'subreddit', 'https://www.reddit.com/r/itookapicture', 2660739.0, 'https://www.reddit.com/r/itookapicture/search?q=$1&restrict_sr=1', 'English', 'photography');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `subreddit`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `s_adenosyl_l_methionine_dependent_methyltransferase_mraw_recognition_domain_superfamily` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`, `cell_component`)  VALUES ('S-adenosyl-methyltransferase MraW TDE1198', 'microbial protein found in Treponema denticola ATCC 35405', 'S-adenosyl-methyltransferase MraW TDE1198', 'P62477', 'rRNA processing', 'transferase activity', 'Treponema denticola ATCC 35405', 'NP_971805', 'protein', 'Ribosomal RNA small subunit methyltransferase H', 'protein', 'cytoplasm');\nDatabase State:\n- Table: `s_adenosyl_l_methionine_dependent_methyltransferase_mraw_recognition_domain_superfamily`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`, `cell_component`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `s_adenosyl_l_methionine_dependent_methyltransferase_mraw_recognition_domain_superfamily`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `poker_player` (`Poker_Player_ID`, `People_ID`, `Final_Table_Made`, `Best_Finish`, `Money_Rank`, `Earnings`)  VALUES (2, 2, 10.0, 2.0, 141.0, 189233.0);\nDatabase State:\n- Table: `poker_player`, Columns: [`Poker_Player_ID`, `People_ID`, `Final_Table_Made`, `Best_Finish`, `Money_Rank`, `Earnings`]",
        "Response": "Table: `poker_player`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO zip_data (zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, `1st_quarter_payroll`, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA)  VALUES (49645, 'Kaleva', 'MI', 'No', 'Post Office', NULL, 'Eastern', 'Yes', 44.37879600000000124, -86.05102800000000229, 598, 26, 101, 'Midwest', 'East North Central', 1589, 1632, 682, 93600, 42361, 2.390000000000000124, 1591, 6, 53, 5, 41, 0, 15, 803, 829, 45.10000000000000142, 44.89999999999999858, 45.39999999999999858, 665, 51, 875, 32, 782000, 3519000, 122, 0.4470000000000000084, 40.17300000000000181, 665, 0, 555, 370, 100, 40, 15, 30, 375, 683000, 483000, 54000, NULL);\nDatabase State:\n- Table: state, Columns: [abbreviation, name]",
        "Response": "Table: zip_data"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `version_edition_or_translation` (`label`, `description`, `instance_of`, `language_of_work_or_name`, `author`, `has_edition_or_translation`, `perry_index`, `commons_category`, `image`)  VALUES ('The Old Man and his Sons', 'Aesop''s fable', 'fable', 'Ancient Greek', 'Aesop', 'Les Enfants d\u00e9sunis du Laboureur', '53.0', 'The Old Man and his Sons', 'Pater et Filii Litigantes.jpg');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `language_of_work_or_name`, `translator`, `edition_or_translation_of`, `image`, `title`, `author`, `published_in`, `part_of`, `editor`, `illustrator`, `publication_date`, `commons_category`, `follows`, `followed_by`]\n- Table: `the_fables_of_\u00e6sop`, Columns: [`label`, `description`, `instance_of`, `language_of_work_or_name`, `translator`, `edition_or_translation_of`, `image`, `title`, `author`, `published_in`, `part_of`, `editor`, `illustrator`, `publication_date`, `follows`, `commons_category`, `followed_by`]",
        "Response": "Table: `version_edition_or_translation`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `caverphone`, `instance_of`, `soundex`, `native_label`, `writing_system`, `geneanet_family_name_id`, `different_from`, `g\u00e9opatronyme_id`)  VALUES ('Evans', 'family name', 'AFNS11', 'family name', 'E152', 'Evans', 'Latin script', 'EVANS', 'Evans', 'EVANS');\nDatabase State:\n- Table: `south_australian_house_of_assembly_by_election`, Columns: [`label`, `description`, `instance_of`, `office_contested`, `point_in_time`, `country`, `applies_to_jurisdiction`, `successful_candidate`, `candidate`]\n- Table: `eponym`, Columns: [`label`, `description`, `commons_category`, `instance_of`, `freebase_id`, `image`]\n- Table: `jurisdiction`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `named_after`, `inception`, `located_in_the_administrative_territorial_entity`, `freebase_id`]\n- Table: `family_name`, Columns: [`label`, `description`, `caverphone`, `instance_of`, `soundex`, `native_label`, `writing_system`, `geneanet_family_name_id`, `different_from`, `g\u00e9opatronyme_id`]\n- Table: `family_name_identical_to_this_given_name`, Columns: [`label`, `description`, `instance_of`, `different_from`, `said_to_be_the_same_as`, `native_label`, `writing_system`, `soundex`, `cologne_phonetics`, `caverphone`, `g\u00e9opatronyme_id`, `geneanet_family_name_id`]",
        "Response": "Table: `family_name`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (CountryCode)  VALUES ('HKG', 'Chiu chau', 'F', 1.399999999999999912);\nDatabase State:\n- Table: country, Columns: [Code]\n- Table: city, Columns: [ID]\n- Table: countrylanguage, Columns: [CountryCode]",
        "Response": "Table: countrylanguage"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `field_of_work` (`label`, `description`, `subclass_of`, `commons_category`, `topics_main_category`, `freebase_id`, `image`, `psh_id`, `instance_of`, `uses`, `practiced_by`, `iptc_newscode`, `encyclop\u00e6dia_britannica_online_id`, `enciclop\u00e8dia_de_lesport_catal\u00e0_id`, `yso_id`, `store_norske_leksikon_id`, `fandom_article_id`, `icon`, `nkcr_aut_id`, `openstreetmap_tag_or_key`, `bncf_thesaurus_id`, `ndl_authority_id`, `gnd_id`, `quora_topic_id`, `on_focus_list_of_wikimedia_project`, `french_vikidia_id`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`, `abc_news_topic_id`, `den_store_danske_id`, `wordnet_31_synset_id`, `great_russian_encyclopedia_online_id`, `kbpedia_id`)  VALUES ('diving', 'sport of jumping or falling into water from a platform or springboard', 'water sport', 'Diving', 'Category:Diving (sport)', '/m/02bkg', 'Salto ornamental - UnB.jpg', '9989.0', 'type of sport', 'nan', 'competitive diver', 'mediatopic/20000913', 'sports/diving', 'nan', '4329.0', 'stuping', 'world-sports-results:Diving', 'Diving pictogram.svg', 'ph125598', 'nan', '16111.0', '674176.0', '4189259-8', 'Diving-in-pools', 'Wikipedia:Vital articles/Level/4', 'Plongeon', 'sh85038594', '9.870075579492051e+17', 'diving', 'udspring', '00443966-n', '3170467.0', 'Diving');\nDatabase State:\n- Table: `follows`, Columns: [`label`, `description`, `sport`, `instance_of`, `point_in_time`, `country`, `freebase_id`]\n- Table: `type_of_sport`, Columns: [`label`, `description`, `subclass_of`, `commons_category`, `topics_main_category`, `freebase_id`, `image`, `instance_of`, `uses`, `practiced_by`, `iptc_newscode`, `encyclop\u00e6dia_britannica_online_id`, `enciclop\u00e8dia_de_lesport_catal\u00e0_id`, `yso_id`, `fandom_article_id`, `icon`, `nkcr_aut_id`, `openstreetmap_tag_or_key`, `bncf_thesaurus_id`, `gnd_id`, `quora_topic_id`, `on_focus_list_of_wikimedia_project`, `french_vikidia_id`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`, `abc_news_topic_id`, `den_store_danske_id`, `wordnet_31_synset_id`, `great_russian_encyclopedia_online_id`, `iab_code`, `kbpedia_id`]\n- Table: `field_of_work`, Columns: [`label`, `description`, `subclass_of`, `commons_category`, `topics_main_category`, `freebase_id`, `image`, `psh_id`, `instance_of`, `uses`, `practiced_by`, `iptc_newscode`, `encyclop\u00e6dia_britannica_online_id`, `enciclop\u00e8dia_de_lesport_catal\u00e0_id`, `yso_id`, `store_norske_leksikon_id`, `fandom_article_id`, `icon`, `nkcr_aut_id`, `openstreetmap_tag_or_key`, `bncf_thesaurus_id`, `ndl_authority_id`, `gnd_id`, `quora_topic_id`, `on_focus_list_of_wikimedia_project`, `french_vikidia_id`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`, `abc_news_topic_id`, `den_store_danske_id`, `wordnet_31_synset_id`, `great_russian_encyclopedia_online_id`, `kbpedia_id`]\n- Table: `intentional_human_activity`, Columns: [`label`, `description`, `field_of_this_occupation`, `subclass_of`, `instance_of`, `commons_category`, `topics_main_category`, `female_form_of_label`, `topics_main_template`]\n- Table: `2018_central_american_and_caribbean_games`, Columns: [`label`, `description`, `instance_of`, `part_of`, `sport`, `follows`, `google_knowledge_graph_id`]",
        "Response": "Table: `field_of_work`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `scalarane_sesterterpenoid` (`label`, `description`, `instance_of`, `isomeric_smiles`, `inchikey`, `mass`, `pubchem_cid`, `canonical_smiles`, `inchi`, `chemical_formula`, `found_in_taxon`)  VALUES ('[(1S,5aS,5bR,7aS,11aS,11bR,13S,13aS)-1-hydroxy-5b,8,8,11a,13a-pentamethyl-3-oxo-5a,6,7,7a,9,10,11,11b,12,13-decahydro-1H-phenanthro[2,1-e][2]benzofuran-13-yl] acetate', 'chemical compound', 'chemical compound', 'CC(=O)O[C@H]1C[C@@H]2[C@@]3(C)CCCC(C)(C)[C@@H]3CC[C@@]2(C)[C@@H]2C=CC3=C([C@@H](O)OC3=O)[C@@]12C', 'BJBGDHNOBUEPQV-HDRSVQBTSA-N', 442.2719243160000246, '162861868', 'O=C1OC(O)C2=C1C=CC3C2(C)C(OC(=O)C)CC4C3(C)CCC5C(C)(C)CCCC54C', 'InChI=1S/C27H38O5/c1-15(28)31-20-14-19-25(4)12-7-11-24(2,3)17(25)10-13-26(19,5)18-9-8-16-21(27(18,20)6)23(30)32-22(16)29/h8-9,17-20,23,30H,7,10-14H2,1-6H3/t17-,18-,19+,20-,23-,25-,26-,27+/m0/s1', 'C\u2082\u2087H\u2083\u2088O\u2085', 'Spongia matamata');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `instance_of`, `parent_taxon`, `worms_id_for_taxa`, `gbif_taxon_id`, `ncbi_taxonomy_id`, `irmng_id`, `catalogue_of_life_id`]\n- Table: `scalarane_sesterterpenoid`, Columns: [`label`, `description`, `instance_of`, `isomeric_smiles`, `inchikey`, `mass`, `pubchem_cid`, `canonical_smiles`, `inchi`, `chemical_formula`, `found_in_taxon`]",
        "Response": "Table: `scalarane_sesterterpenoid`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`School_ID`, `School`, `Location`, `Founded`, `Affiliation`, `Enrollment`, `Nickname`, `Primary_conference`)  VALUES (4, 'Rutgers University', 'New Brunswick, NJ', 1766.0, 'Public', 56868.0, 'Scarlet Knights', 'American Athletic Conference ( D-I )');\nDatabase State:\n- Table: `basketball_match`, Columns: [`Team_ID`, `School_ID`, `Team_Name`, `ACC_Regular_Season`, `ACC_Percent`, `ACC_Home`, `ACC_Road`, `All_Games`, `All_Games_Percent`, `All_Home`, `All_Road`, `All_Neutral`]",
        "Response": "Table: `university`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `follows`, `followed_by`, `instance_of`, `point_in_time`)  VALUES ('Switzerland in the Eurovision Song Contest 1980', 'nan', 'Switzerland in the Eurovision Song Contest 1979', 'Switzerland in the Eurovision Song Contest 1981', 'Switzerland in the Eurovision Song Contest', '+1980-00-00T00:00:00Z');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `switzerland_in_the_eurovision_song_contest`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `refseq_protein_id`, `found_in_taxon`, `encoded_by`, `cell_component`, `has_parts`, `instance_of`, `part_of`)  VALUES ('Putative glycosyltransferase BF3423', 'microbial protein found in Bacteroides fragilis YCH46', 'Q64QR5', 'YP_100700', 'Bacteroides fragilis YCH46', 'putative glycosyltransferase BF3423', 'integral component of membrane', 'Glycosyltransferase RgtA/B/C/D-like', 'protein', 'membrane proteins');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`]\n- Table: `glycosyltransferase_rgta_b_c_d_like_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `refseq_protein_id`, `found_in_taxon`, `encoded_by`, `cell_component`, `has_parts`, `instance_of`, `part_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `freebase_id`, `ncbi_taxonomy_id`, `parent_taxon`, `instance_of`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `refseq_protein_id`, `found_in_taxon`, `encoded_by`, `cell_component`, `has_parts`, `instance_of`, `part_of`]",
        "Response": "Table: `glycosyltransferase_rgta_b_c_d_like_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `characters` (id, CharName, Abbrev, Description)  VALUES (809, 'Mustardseed', 'MUSTARDSEED', 'a fairy');\nDatabase State:\n- Table: `works`, Columns: [id, Title, LongTitle, Date, GenreType]\n- Table: `chapters`, Columns: [id, Act, Scene, Description, work_id]\n- Table: `paragraphs`, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]\n- Table: `characters`, Columns: [id, CharName, Abbrev, Description]",
        "Response": "Table: `characters`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, courseLevel)  VALUES (119, 'Level_500');\nDatabase State:\n- Table: taughtBy, Columns: [course_id, p_id]\n- Table: `advisedBy`, Columns: [p_id, p_id_dummy]\n- Table: course, Columns: [course_id, courseLevel]\n- Table: person, Columns: [p_id, professor, student, hasPosition, inPhase, yearsInProgram]",
        "Response": "Table: course"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (CountryRegionCode, Name, ModifiedDate)  VALUES ('DO', 'Dominican Republic', '2008-04-30 00:00:00.0');\nDatabase State:\n- Table: `Document`, Columns: [DocumentNode, DocumentLevel, Title, Owner, FolderFlag, FileName, FileExtension, Revision, ChangeNumber, Status, DocumentSummary, Document, rowguid, ModifiedDate]\n- Table: SalesPersonQuotaHistory, Columns: [BusinessEntityID, QuotaDate, SalesQuota, rowguid, ModifiedDate]\n- Table: `Product`, Columns: [ProductID, Name, ProductNumber, MakeFlag, FinishedGoodsFlag, Color, SafetyStockLevel, ReorderPoint, StandardCost, ListPrice, Size, SizeUnitMeasureCode, WeightUnitMeasureCode, Weight, DaysToManufacture, ProductLine, Class, Style, ProductSubcategoryID, ProductModelID, SellStartDate, SellEndDate, DiscontinuedDate, rowguid, ModifiedDate]\n- Table: ProductPhoto, Columns: [ProductPhotoID, ThumbNailPhoto, ThumbnailPhotoFileName, LargePhoto, LargePhotoFileName, ModifiedDate]\n- Table: Person, Columns: [BusinessEntityID, PersonType, NameStyle, Title, FirstName, MiddleName, LastName, Suffix, EmailPromotion, AdditionalContactInfo, Demographics, rowguid, ModifiedDate]\n- Table: ProductSubcategory, Columns: [ProductSubcategoryID, ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: ProductProductPhoto, Columns: [ProductID, ProductPhotoID, `Primary`, ModifiedDate]\n- Table: Customer, Columns: [CustomerID, PersonID, StoreID, TerritoryID, AccountNumber, rowguid, ModifiedDate]\n- Table: Shift, Columns: [ShiftID, Name, StartTime, EndTime, ModifiedDate]\n- Table: ProductCostHistory, Columns: [ProductID, StartDate, EndDate, StandardCost, ModifiedDate]\n- Table: `AddressType`, Columns: [AddressTypeID, Name, rowguid, ModifiedDate]\n- Table: SalesOrderHeaderSalesReason, Columns: [SalesOrderID, SalesReasonID, ModifiedDate]\n- Table: WorkOrder, Columns: [WorkOrderID, ProductID, OrderQty, StockedQty, ScrappedQty, StartDate, EndDate, DueDate, ScrapReasonID, ModifiedDate]\n- Table: ProductListPriceHistory, Columns: [ProductID, StartDate, EndDate, ListPrice, ModifiedDate]\n- Table: ProductDocument, Columns: [ProductID, DocumentNode, ModifiedDate]\n- Table: SpecialOfferProduct, Columns: [SpecialOfferID, ProductID, rowguid, ModifiedDate]\n- Table: SalesReason, Columns: [SalesReasonID, Name, ReasonType, ModifiedDate]\n- Table: CountryRegionCurrency, Columns: [CountryRegionCode, CurrencyCode, ModifiedDate]\n- Table: `BillOfMaterials`, Columns: [BillOfMaterialsID, ProductAssemblyID, ComponentID, StartDate, EndDate, UnitMeasureCode, BOMLevel, PerAssemblyQty, ModifiedDate]\n- Table: TransactionHistory, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: ProductModel, Columns: [ProductModelID, Name, CatalogDescription, Instructions, rowguid, ModifiedDate]\n- Table: `EmployeePayHistory`, Columns: [BusinessEntityID, RateChangeDate, Rate, PayFrequency, ModifiedDate]\n- Table: ProductVendor, Columns: [ProductID, BusinessEntityID, AverageLeadTime, StandardPrice, LastReceiptCost, LastReceiptDate, MinOrderQty, MaxOrderQty, OnOrderQty, UnitMeasureCode, ModifiedDate]\n- Table: Password, Columns: [BusinessEntityID, PasswordHash, PasswordSalt, rowguid, ModifiedDate]\n- Table: Employee, Columns: [BusinessEntityID, NationalIDNumber, LoginID, OrganizationNode, OrganizationLevel, JobTitle, BirthDate, MaritalStatus, Gender, HireDate, SalariedFlag, VacationHours, SickLeaveHours, CurrentFlag, rowguid, ModifiedDate]\n- Table: ProductReview, Columns: [ProductReviewID, ProductID, ReviewerName, ReviewDate, EmailAddress, Rating, Comments, ModifiedDate]",
        "Response": "Table: CountryRegion"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Properties (property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details)  VALUES (8, 'Apartment', '1976-06-10 20:25:38', '2001-11-09 04:37:33', 'vogue', replace('24365 Ulices Run\\nHomenicktown, MD 88485-6198','\\n',char(10)), 9, 13.47150000000000069, 0, 0, 'fuga', 'odio', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Properties, Columns: [property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details]\n- Table: Ref_Feature_Types, Columns: [feature_type_code, feature_type_name]\n- Table: Ref_Property_Types, Columns: [property_type_code, property_type_description]",
        "Response": "Table: Properties"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Organisations (organisation_id, organisation_type, organisation_details)  VALUES (10, 'SPON', 'officiis');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Organisations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO customer_address (customer_id, address_id, status_id)  VALUES (760, 995, 1);\nDatabase State:\n- Table: country, Columns: [country_id, country_name]\n- Table: book, Columns: [book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id]",
        "Response": "Table: customer_address"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `payment` (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update)  VALUES (13050, 483, 2, 10677, 0.989999999999999992, '2005-08-01 17:24:35.0', '2006-02-15 22:19:55.0');\nDatabase State:\n- Table: `customer`, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: film_text, Columns: [film_id, title, description]\n- Table: `inventory`, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: `film_actor`, Columns: [actor_id, film_id, last_update]\n- Table: `film_category`, Columns: [film_id, category_id, last_update]\n- Table: `address`, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: `film`, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]",
        "Response": "Table: `payment`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Ball_by_Ball (Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler)  VALUES (734010, 20, 6, 1, 2, 6, 5, 27, 301, 342);\nDatabase State:\n- Table: Rolee, Columns: [Role_Id, Role_Desc]\n- Table: Extra_Type, Columns: [Extra_Id, Extra_Name]\n- Table: Out_Type, Columns: [Out_Id, Out_Name]\n- Table: Player_Match, Columns: [Match_Id, Player_Id, Role_Id, Team_Id]\n- Table: Batsman_Scored, Columns: [Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No]\n- Table: Season, Columns: [Season_Id, Man_of_the_Series, Orange_Cap, Purple_Cap, Season_Year]\n- Table: Venue, Columns: [Venue_Id, Venue_Name, City_Id]\n- Table: Batting_Style, Columns: [Batting_Id, Batting_hand]\n- Table: Win_By, Columns: [Win_Id, Win_Type]\n- Table: Outcome, Columns: [Outcome_Id, Outcome_Type]\n- Table: Toss_Decision, Columns: [Toss_Id, Toss_Name]\n- Table: Match, Columns: [Match_Id, Team_1, Team_2, Match_Date, Season_Id, Venue_Id, Toss_Winner, Toss_Decide, Win_Type, Win_Margin, Outcome_type, Match_Winner, Man_of_the_Match]\n- Table: Country, Columns: [Country_Id, Country_Name]\n- Table: Team, Columns: [Team_Id, Team_Name]",
        "Response": "Table: Ball_by_Ball"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details)  VALUES (10, 18, '2017-10-09 17:31:44', '2018-03-18 03:28:47', 620.2800999999999476, 'house');\nDatabase State:\n- Table: Ref_Detention_Type, Columns: [detention_type_code, detention_type_description]\n- Table: Students, Columns: [student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details]\n- Table: Addresses, Columns: [address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details]\n- Table: Behavior_Incident, Columns: [incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details]\n- Table: Student_Addresses, Columns: [student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details]\n- Table: Assessment_Notes, Columns: [notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details]",
        "Response": "Table: Student_Addresses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`School_Id`, `School_Year`, `Class_A`, `Class_AA`)  VALUES (1, '1987-88', 'Yantis', 'Blanco');\nDatabase State:\n- Table: `player`, Columns: [`Player_ID`, `Player`, `Team`, `Age`, `Position`, `School_ID`]\n- Table: `school_details`, Columns: [`School_ID`, `Nickname`, `Colors`, `League`, `Class`, `Division`]",
        "Response": "Table: `school_performance`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `edition_number`, `country`, `point_in_time`, `followed_by`, `instance_of`, `winner`, `follows`)  VALUES ('Tour des a\u00e9roports 2003', 'nan', '7', 'Tunisia', '+2003-00-00T00:00:00Z', 'Tour des a\u00e9roports 2006', 'Tour des A\u00e9roports', 'Aur\u00e9lien Passeron', 'Tour des a\u00e9roports 2002');\nDatabase State:\n- Table: `follows`, Columns: [`label`, `description`, `edition_number`, `country`, `point_in_time`, `followed_by`, `instance_of`, `winner`, `follows`]\n- Table: `tour_des_a\u00e9roports`, Columns: [`label`, `description`, `edition_number`, `country`, `point_in_time`, `followed_by`, `instance_of`, `winner`, `follows`]\n- Table: `winner`, Columns: [`label`, `description`, `date_of_birth`, `country_of_citizenship`, `sex_or_gender`, `instance_of`, `occupation`, `cycling_archives_cyclist_id`, `sport`, `procyclingstats_cyclist_id`]\n- Table: `followed_by`, Columns: [`label`, `description`, `edition_number`, `country`, `point_in_time`, `follows`, `followed_by`, `instance_of`, `winner`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Date received`, Product, `Sub-product`, Issue, `Sub-issue`, `Consumer complaint narrative`, Tags, `Consumer consent provided?`, `Submitted via`, `Date sent to company`, `Company response to consumer`, `Timely response?`, `Consumer disputed?`, `Complaint ID`, Client_ID)  VALUES ('2015-08-05', 'Bank account or service', 'Other bank product/service', 'Using a debit or ATM card', NULL, replace('I called my bank BOFA to ask for a new debit card as the one I have the magnetic strip seem to be worn. They told me that I have to pay {$5.00} to replace it because it is not expired as yet. Is this fair to ask a consumer to pay for a new debit card? \\n','\\n',char(10)), NULL, 'Consent provided', 'Web', '2015-08-05', 'Closed with explanation', 'Yes', 'No', 'CR1503760', 'C00003097');\nDatabase State:\n- Table: client, Columns: [client_id, sex, day, month, year, age, social, first, middle, last, phone, email, address_1, address_2, city, state, zipcode, district_id]\n- Table: callcenterlogs, Columns: [`Date received`, `Complaint ID`, `rand client`, phonefinal, `vru+line`, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time]\n- Table: reviews, Columns: [`Date`, Stars, Reviews, Product, district_id]",
        "Response": "Table: events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `people` (`People_ID`, `Age`, `Name`, `Nationality`, `Graduation_College`)  VALUES (1, 27, 'Reggie Lewis', 'United States', 'Northeastern');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO institution_grads (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (240417, 2002, 'B', 'B', '4y bach', '11', '0', '2', '0.0', '18.2');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Airlines (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  VALUES ('2018/8/2', 19687, 'N400QX', 2735, 10713, 1071302, 30713, 'BOI', 14747, 1474703, 30559, 'SEA', 2150, 2146, -4, 0, 2235, 5, 5, 0, NULL, 100, 109, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `chromosome` (`label`, `description`, `instance_of`, `refseq_genome_id`, `found_in_taxon`)  VALUES ('Danio rerio chromosome 2', 'chromosome', 'chromosome', 'NC_007113', 'Danio rerio');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `ensembl_protein_id`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `chromosome`, Columns: [`label`, `description`, `instance_of`, `refseq_genome_id`, `found_in_taxon`]\n- Table: `expressed_in`, Columns: [`label`, `description`, `uberon_id`, `instance_of`, `subclass_of`]\n- Table: `arrestin_c_terminal_like_domain_protein_family`, Columns: [`label`, `description`, `ensembl_protein_id`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `ensembl_transcript_id`, `homologene_id`, `refseq_rna_id`, `encodes`, `found_in_taxon`, `strand_orientation`, `instance_of`, `chromosome`, `genomic_end`, `genomic_start`, `expressed_in`]",
        "Response": "Table: `chromosome`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, full_name, gender, height, weight)  VALUES (36308, 'Willi Forrer', 'M', 0, 0);\nDatabase State:\n- Table: games_city, Columns: [games_id, city_id]\n- Table: city, Columns: [id, city_name]\n- Table: noc_region, Columns: [id, noc, region_name]\n- Table: medal, Columns: [id, medal_name]\n- Table: person, Columns: [id, full_name, gender, height, weight]\n- Table: games, Columns: [id, games_year, games_name, season]\n- Table: event, Columns: [id, sport_id, event_name]\n- Table: sport, Columns: [id, sport_name]\n- Table: competitor_event, Columns: [event_id, competitor_id, medal_id]",
        "Response": "Table: person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity)  VALUES (211, 10327, 11, 50);\nDatabase State:\n- Table: Suppliers, Columns: [SupplierID, SupplierName, ContactName, Address, City, PostalCode, Country, Phone]\n- Table: Shippers, Columns: [ShipperID, ShipperName, Phone]\n- Table: Employees, Columns: [EmployeeID, LastName, FirstName, BirthDate, Photo, Notes]\n- Table: Orders, Columns: [OrderID, CustomerID, EmployeeID, OrderDate, ShipperID]",
        "Response": "Table: OrderDetails"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `coordinate_location`, `instance_of`, `country`, `image`, `located_in_the_administrative_territorial_entity`, `tripadvisor_id`, `official_website`)  VALUES ('Shakujii Park', 'park in Tokyo, Japan', '35.73888889', 'Tokyo metropolitan park', 'Japan', 'Nerima Syakujii park sampoji pond.jpg', 'Nerima-ku', '1373806.0', 'https://www.tokyo-park.or.jp/park/format/index006.html');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `scenic_park`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `payment` (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update)  VALUES (7041, 260, 2, 14441, 2.990000000000000213, '2005-08-21 11:59:38.0', '2006-02-15 22:14:59.0');\nDatabase State:\n- Table: `customer`, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]",
        "Response": "Table: `payment`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ingredient_id, category, name, plural)  VALUES (2728, 'spices and seasonings', 'powdered saffron', NULL);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Ingredient"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `governorate_of_syria` (`label`, `description`, `country`, `iso_3166_2_code`, `coordinate_location`, `instance_of`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `freebase_id`, `fips_10_4_countries_and_regions`, `geonames_id`, `population`, `commons_category`, `located_in_time_zone`, `area`, `locator_map_image`, `capital`, `category_of_associated_people`, `image`, `whos_on_first_id`, `geoshape`, `inaturalist_place_id`, `getty_thesaurus_of_geographic_names_id`)  VALUES ('Hama Governorate', 'governorate of Syria', 'Syria', 'SY-HM', '35.23', 'governorate of Syria', 'Syria', 'Category:Hama Governorate', '/m/0261ykr', 'SY10', '170015', 1628000.0, 'Hama Governorate', 'UTC+02:00', 8883.0, 'Hama in Syria (+Golan).svg', 'Hama', 'Category:People from Hama Governorate', 'Shayzar4.jpg', '85678363', 'Data:Syria/Hamah.map', '12014', '1002053.0');\nDatabase State:\n- Table: `wikimedia_category`, Columns: [`label`, `description`, `instance_of`, `category_combines_topics`, `category_contains`]",
        "Response": "Table: `governorate_of_syria`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional)  VALUES (4699, 764, 1621, 1.0, 1.0, 'pound(s)', NULL, 'FALSE');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Quantity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (history_id, order_id, status_id, status_date)  VALUES (5475, 8466, 1, '2020-05-05 01:25:00');\nDatabase State:\n- Table: `order_line`, Columns: [line_id, order_id, book_id, price]\n- Table: author, Columns: [author_id, author_name]\n- Table: `order_history`, Columns: [history_id, order_id, status_id, status_date]\n- Table: order_status, Columns: [status_id, status_value]",
        "Response": "Table: `order_history`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`name`)  VALUES ('student636');\nDatabase State:\n- Table: disabled, Columns: [`name`]\n- Table: no_payment_due, Columns: [`name`, bool]\n- Table: person, Columns: [`name`]\n- Table: enrolled, Columns: [name, school, month]\n- Table: male, Columns: [`name`]\n- Table: filed_for_bankrupcy, Columns: [`name`]\n- Table: enlist, Columns: [`name`, organ]\n- Table: bool, Columns: [`name`]",
        "Response": "Table: person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, person_id, category, role, credited)  VALUES ('tt0629170', 'nm0496511', 'Camera and Electrical Department', 'electrician', 'true');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, game_id, publisher_id)  VALUES (7442, 2003, 50);\nDatabase State:\n- Table: game_platform, Columns: [id, game_publisher_id, platform_id, release_year]\n- Table: game, Columns: [id, genre_id, game_name]\n- Table: game_publisher, Columns: [id, game_id, publisher_id]\n- Table: platform, Columns: [id, platform_name]",
        "Response": "Table: game_publisher"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `ncbi_locus_tag`, `subclass_of`, `found_in_taxon`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('putative outer membrane protein probably involved in nutrient binding BF3070', 'microbial gene found in Bacteroides fragilis YCH46', '3083266', 'BF3070', 'gene', 'Bacteroides fragilis YCH46', 'Putative outer membrane protein probably involved in nutrient binding BF3070', 'gene', '3474740', 'reverse strand', '3473052');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO enrolled (name, school, month)  VALUES ('student296', 'smc', 9);\nDatabase State:\n- Table: longest_absense_from_school, Columns: [`name`, `month`]\n- Table: bool, Columns: [`name`]\n- Table: male, Columns: [`name`]\n- Table: filed_for_bankrupcy, Columns: [`name`]\n- Table: enrolled, Columns: [name, school, month]\n- Table: disabled, Columns: [`name`]\n- Table: unemployed, Columns: [`name`]\n- Table: no_payment_due, Columns: [`name`, bool]\n- Table: person, Columns: [`name`]\n- Table: enlist, Columns: [`name`, organ]",
        "Response": "Table: enrolled"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `wikimedia_category` (`label`, `description`, `commons_category`, `instance_of`, `category_combines_topics`, `category_contains`)  VALUES ('Category:People from Cairns', 'Wikimedia category', 'People of Cairns, Queensland', 'Wikimedia category', 'person related to this place', 'human');\nDatabase State:\n- Table: `physical_location`, Columns: [`label`, `description`, `twinned_administrative_body`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`, `commons_category`, `image`, `located_in_time_zone`, `coordinate_location`, `topics_main_category`, `page_banner`, `official_website`, `musicbrainz_area_id`, `freebase_id`, `gnd_id`, `category_for_people_who_died_here`, `geonames_id`, `category_of_associated_people`, `viaf_id`, `capital_of`, `population`, `library_of_congress_authority_id`, `quora_topic_id`, `elevation_above_sea_level`, `area`, `us_national_archives_identifier`, `official_name`, `native_label`, `postal_code`, `encyclop\u00e6dia_britannica_online_id`, `great_russian_encyclopedia_online_id`, `archinform_location_id`, `gran_enciclop\u00e8dia_catalana_id`, `whos_on_first_id`, `worldcat_identities_id`, `interlingual_index_id`, `wordnet_31_synset_id`, `factgrid_item_id`, `store_norske_leksikon_id`, `national_library_of_israel_j9u_id`, `online_pwn_encyclopedia_id`, `den_store_danske_id`]\n- Table: `wikimedia_category`, Columns: [`label`, `description`, `commons_category`, `instance_of`, `category_combines_topics`, `category_contains`]\n- Table: `oceania_youth_athletics_championships`, Columns: [`label`, `description`, `sport`, `point_in_time`, `instance_of`, `freebase_id`, `location`]",
        "Response": "Table: `wikimedia_category`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('30S ribosomal protein S18 STM4393', 'microbial gene found in Salmonella enterica subsp. enterica serovar Typhimurium str. LT2', '1255919', 'gene', '30S ribosomal protein S18 STM4393', 'Salmonella enterica subsp. enterica serovar Typhimurium str. LT2', 'forward strand', '4631476.0', '4631234.0', 'gene', 'STM4393');\nDatabase State:\n- Table: `ribosomal_protein_s18_conserved_site_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `user_reviews` (App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity)  VALUES ('Basketball FRVR - Shoot the Hoop and Slam Dunk!', 'Awesome', 'Positive', '1.0', '1.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `user_reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity)  VALUES ('EyeEm - Camera & Photo Filter', 'So far smooth function easy navigate possibly sell photos encourages think outside box snapping photos. I would give 5 stars I''m still waiting market show movement :)', 'Positive', '0.2388888888888889', '0.7305555555555555');\nDatabase State:\n- Table: `playstore`, Columns: [App, Category, Rating, Reviews, Size, Installs, Type, Price, `Content Rating`, Genres]\n- Table: `user_reviews`, Columns: [App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity]",
        "Response": "Table: `user_reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `endowment` (`endowment_id`, `School_id`, `donator_name`, `amount`)  VALUES (5, 3, 'San Crist\u00f3bal', 9.050000000000000711);\nDatabase State:\n- Table: `budget`, Columns: [`School_id`, `Year`, `Budgeted`, `total_budget_percent_budgeted`, `Invested`, `total_budget_percent_invested`, `Budget_invested_percent`]\n- Table: `School`, Columns: [`School_id`, `School_name`, `Location`, `Mascot`, `Enrollment`, `IHSAA_Class`, `IHSAA_Football_Class`, `County`]",
        "Response": "Table: `endowment`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `tureen` (`label`, `description`, `instance_of`, `collection`, `on_focus_list_of_wikimedia_project`)  VALUES ('Covered soup tureen', 'tureen at the Metropolitan Museum of Art (MET, 2018.933.28a, b)', 'tureen', 'The American Wing', 'Met Museum artworks on display');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `tureen`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `point_in_time`, `country`, `followed_by`, `office_contested`, `follows`, `facet_of`)  VALUES ('Results of the 1987 Australian Senate election', 'Senate elections for Australia in July 1987', 'Australian Senate election', '+1987-07-11T00:00:00Z', 'Australia', 'Results of the 1990 Australian Senate election', 'member of the Australian Senate', 'Results of the 1984 Australian Senate election', '1987 Australian federal election');\nDatabase State:\n- Table: `australian_senate_election`, Columns: [`label`, `description`, `instance_of`, `point_in_time`, `country`, `office_contested`, `followed_by`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `point_in_time`, `country`, `followed_by`, `office_contested`, `follows`, `facet_of`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION)  VALUES ('2014-11-04', '2014-11-04', '045e2f8e-5bbd-4776-9a84-43ba02cea3ba', 'feb9e2d1-5960-4e5b-a372-5fd23e2436ff', 1736854, 'Cisplatin 50 MG Injection', 67841000119103, 'Primary small cell malignant neoplasm of lung  TNM stage 4 (disorder)');\nDatabase State:\n- Table: careplans, Columns: [ID, START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: procedures, Columns: [DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: `claims`, Columns: [ID, PATIENT, BILLABLEPERIOD, ORGANIZATION, ENCOUNTER, DIAGNOSIS, TOTAL]\n- Table: encounters, Columns: [ID, DATE, PATIENT, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: all_prevalences, Columns: [ITEM, `POPULATION TYPE`, OCCURRENCES, `POPULATION COUNT`, `PREVALENCE RATE`, `PREVALENCE PERCENTAGE`]\n- Table: allergies, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: medications, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: conditions, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: patients, Columns: [patient, birthdate, deathdate, ssn, drivers, passport, prefix, first, last, suffix, maiden, marital, race, ethnicity, gender, birthplace, address]\n- Table: immunizations, Columns: [DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: observations, Columns: [DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, VALUE, UNITS]",
        "Response": "Table: medications"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (UserID, Gender)  VALUES ('tw-102998244', 'Male');\nDatabase State:\n- Table: location, Columns: [LocationID, Country, State, StateCode, City]",
        "Response": "Table: user"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Volume_ID`, `Volume_Issue`, `Issue_Date`, `Weeks_on_Top`, `Song`, `Artist_ID`)  VALUES (3, '45:16', '24 January', 1.0, ' Walk Like an Egyptian ', 1);\nDatabase State:\n- Table: `artist`, Columns: [`Artist_ID`, `Artist`, `Age`, `Famous_Title`, `Famous_Release_date`]\n- Table: `volume`, Columns: [`Volume_ID`, `Volume_Issue`, `Issue_Date`, `Weeks_on_Top`, `Song`, `Artist_ID`]",
        "Response": "Table: `volume`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `portugal_open_women` (`label`, `description`, `part_of`, `has_parts`, `sport`, `instance_of`, `organizer`, `point_in_time`, `edition_number`, `start_time`, `end_time`, `google_knowledge_graph_id`)  VALUES ('2002 Estoril Open (women)', 'women''s tennis tournament', '2002 Estoril Open', '2002 Estoril Open \u2013 women''s singles', 'tennis', 'Portugal Open (women)', 'Women''s Tennis Association', '+2002-00-00T00:00:00Z', '6', '+2002-04-08T00:00:00Z', '+2002-04-14T00:00:00Z', '/g/11b6hp57yk');\nDatabase State:\n- Table: `portugal_open_women`, Columns: [`label`, `description`, `part_of`, `has_parts`, `sport`, `instance_of`, `organizer`, `point_in_time`, `edition_number`, `start_time`, `end_time`, `google_knowledge_graph_id`]",
        "Response": "Table: `portugal_open_women`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `people` (`People_ID`, `District`, `Name`, `Party`, `Age`)  VALUES (5, 'New York 5', 'William B. Maclay', 'Democratic', 36);\nDatabase State:\n- Table: `debate_people`, Columns: [`Debate_ID`, `Affirmative`, `Negative`, `If_Affirmative_Win`]\n- Table: `debate`, Columns: [`Debate_ID`, `Date`, `Venue`, `Num_of_Audience`]",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (MovieID, ActorID, `Character Name`, creditOrder, pay, screentime)  VALUES (443, 2279, 'Jasper Hale', 8, NULL, NULL);\nDatabase State:\n- Table: characters, Columns: [MovieID, ActorID, `Character Name`, creditOrder, pay, screentime]",
        "Response": "Table: characters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `uniprot_protein_id`, `refseq_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `molecular_function`, `part_of`, `instance_of`)  VALUES ('Phage related helicase LBA0442', 'microbial protein found in Lactobacillus acidophilus NCFM', 'Q5FLU2', 'YP_193363', 'Lactobacillus acidophilus NCFM', 'phage related helicase LBA0442', 'Helicase/UvrB, N-terminal', 'DNA binding', 'Protein of unknown function DUF3427', 'protein');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`]\n- Table: `protein_of_unknown_function_duf3427`, Columns: [`label`, `description`, `uniprot_protein_id`, `refseq_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `molecular_function`, `part_of`, `instance_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `freebase_id`, `ncbi_taxonomy_id`, `parent_taxon`, `instance_of`, `gbif_taxon_id`, `encyclopedia_of_life_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `mesh_descriptor_id`, `bacdive_id`, `microsoft_academic_id`, `openalex_id`, `catalogue_of_life_id`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `order_line` (line_id, order_id, book_id, price)  VALUES (7950, 4865, 2758, 5.980000000000000426);\nDatabase State:\n- Table: book, Columns: [book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id]\n- Table: customer, Columns: [customer_id, first_name, last_name, email]\n- Table: `order_line`, Columns: [line_id, order_id, book_id, price]\n- Table: shipping_method, Columns: [method_id, method_name, cost]\n- Table: customer_address, Columns: [customer_id, address_id, status_id]\n- Table: order_status, Columns: [status_id, status_value]\n- Table: publisher, Columns: [publisher_id, publisher_name]\n- Table: book_author, Columns: [book_id, author_id]\n- Table: book_language, Columns: [language_id, language_code, language_name]",
        "Response": "Table: `order_line`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `alabama_state_park` (`label`, `description`, `coordinate_location`, `country`, `instance_of`, `official_website`, `encyclopedia_of_alabama_id`, `freebase_id`, `located_in_the_administrative_territorial_entity`, `geonames_id`, `gnis_id`)  VALUES ('Gulf State Park', 'State park in Alabama, United States', '30.2637', 'United States of America', 'Alabama state park', 'https://www.alapark.com/parks/gulf-state-park', 'h-2602', '/m/02ww568', 'Alabama', '4065556.0', '119463.0');\nDatabase State:\n- Table: `eponym`, Columns: [`label`, `description`, `find_a_grave_memorial_id`, `country_of_citizenship`, `commons_category`, `viaf_id`, `library_of_congress_authority_id`, `place_of_birth`, `place_of_death`, `occupation`, `date_of_birth`, `date_of_death`, `instance_of`, `image`, `freebase_id`, `given_name`, `family_name`, `fast_id`, `genicom_profile_id`, `wikitree_person_id`, `sex_or_gender`, `worldcat_identities_id`, `national_library_of_israel_j9u_id`]\n- Table: `alabama_state_park`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `official_website`, `encyclopedia_of_alabama_id`, `freebase_id`, `located_in_the_administrative_territorial_entity`, `geonames_id`, `gnis_id`]\n- Table: `administrative_centre`, Columns: [`label`, `description`, `country`, `located_in_the_administrative_territorial_entity`, `commons_category`, `coordinate_location`, `topics_main_category`, `locator_map_image`, `instance_of`, `freebase_id`, `fips_6_4`, `gnis_id`, `population`, `geonames_id`, `official_website`, `image`, `area`, `named_after`, `shares_border_with`, `inception`, `capital`, `licence_plate_code`, `openstreetmap_relation_id`, `viaf_id`, `getty_thesaurus_of_geographic_names_id`, `archinform_location_id`, `library_of_congress_authority_id`, `list_of_monuments`, `category_for_maps`, `water_as_percent_of_area`, `native_label`, `encyclopedia_of_alabama_id`, `wolfram_language_entity_code`, `worldcat_identities_id`, `hasc`, `inaturalist_place_id`, `category_for_the_view_of_the_item`, `per_capita_income`, `mean_age`, `number_of_households`, `national_library_of_israel_j9u_id`, `different_from`]\n- Table: `capital_city`, Columns: [`label`, `description`, `country`, `instance_of`, `commons_category`, `coordinate_location`, `freebase_id`, `located_in_the_administrative_territorial_entity`, `locator_map_image`, `geonames_id`, `viaf_id`, `elevation_above_sea_level`, `image`, `gnis_id`, `official_website`, `fips_55_3_locations_in_the_us`, `local_dialing_code`, `postal_code`, `area`, `quora_topic_id`, `archinform_location_id`, `musicbrainz_area_id`, `inception`, `capital_of`, `library_of_congress_authority_id`, `gran_enciclop\u00e8dia_catalana_id`, `whos_on_first_id`, `worldcat_identities_id`, `population`, `water_as_percent_of_area`, `factgrid_item_id`, `water_area`, `per_capita_income`, `mean_age`, `number_of_households`, `national_library_of_israel_j9u_id`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `commons_category`, `coordinate_location`, `topics_main_category`, `locator_map_image`, `instance_of`, `freebase_id`, `fips_6_4`, `gnis_id`, `population`, `geonames_id`, `official_website`, `image`, `area`, `named_after`, `shares_border_with`, `capital`, `inception`, `licence_plate_code`, `openstreetmap_relation_id`, `us_national_archives_identifier`, `viaf_id`, `getty_thesaurus_of_geographic_names_id`, `archinform_location_id`, `library_of_congress_authority_id`, `different_from`, `whos_on_first_id`, `category_for_maps`, `water_as_percent_of_area`, `native_label`, `encyclopedia_of_alabama_id`, `wolfram_language_entity_code`, `worldcat_identities_id`, `hasc`, `category_for_the_view_of_the_item`, `inaturalist_place_id`, `per_capita_income`, `mean_age`, `number_of_households`, `national_library_of_israel_j9u_id`]\n- Table: `political_border`, Columns: [`label`, `description`, `country`, `located_in_the_administrative_territorial_entity`, `commons_category`, `coordinate_location`, `topics_main_category`, `locator_map_image`, `instance_of`, `freebase_id`, `fips_6_4`, `gnis_id`, `population`, `geonames_id`, `official_website`, `image`, `area`, `named_after`, `shares_border_with`, `inception`, `capital`, `licence_plate_code`, `openstreetmap_relation_id`, `viaf_id`, `getty_thesaurus_of_geographic_names_id`, `archinform_location_id`, `library_of_congress_authority_id`, `list_of_monuments`, `category_for_maps`, `water_as_percent_of_area`, `native_label`, `encyclopedia_of_alabama_id`, `wolfram_language_entity_code`, `worldcat_identities_id`, `hasc`, `inaturalist_place_id`, `category_for_the_view_of_the_item`, `per_capita_income`, `mean_age`, `number_of_households`, `national_library_of_israel_j9u_id`, `different_from`]",
        "Response": "Table: `alabama_state_park`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Contacts (contact_id, customer_id, gender, first_name, last_name, contact_phone)  VALUES (14, 8, 'female', 'Amani', 'Kunze', '405-058-1659');\nDatabase State:\n- Table: Products, Columns: [product_id, product_type_code, product_name, product_price]\n- Table: Customers, Columns: [customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email]",
        "Response": "Table: Contacts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (character, `voice-actor`, movie)  VALUES ('Gyro Gearloose', 'Hal Smith', 'DuckTales');\nDatabase State:\n- Table: revenue, Columns: [Year, `Studio Entertainment[NI 1]`, `Disney Consumer Products[NI 2]`, `Disney Interactive[NI 3][Rev 1]`, `Walt Disney Parks and Resorts`, `Disney Media Networks`, Total]\n- Table: characters, Columns: [movie_title, release_date, hero, villian, song]\n- Table: movies_total_gross, Columns: [movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross]\n- Table: `voice-actors`, Columns: [character, `voice-actor`, movie]\n- Table: director, Columns: [name, director]",
        "Response": "Table: `voice-actors`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `player` (`Player_ID`, `Sponsor_name`, `Player_name`, `Gender`, `Residence`, `Occupation`, `Votes`, `Rank`)  VALUES (1, 'Brandon\u2014Souris', 'Jean Luc Bouch\u00e9', 'M', 'Brandon', 'Locomotive Engineer', 6055, '2nd');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `player`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `population`, `viaf_id`, `geonames_id`, `musicbrainz_area_id`, `coat_of_arms_image`, `capital`, `geoshape`, `openstreetmap_relation_id`, `shares_border_with`, `flag_image`, `topics_main_category`, `locator_map_image`, `area`, `commons_category`, `instance_of`, `freebase_id`, `library_of_congress_authority_id`, `coordinate_location`, `country`, `whos_on_first_id`, `category_for_maps`, `inaturalist_place_id`, `national_library_of_israel_j9u_id`, `official_website`, `located_in_the_administrative_territorial_entity`)  VALUES ('Aisne', 'department of France', 531345.0, '148931080.0', '3038375', 'ab0b7076-baed-4022-bce4-3310bbade22d', 'Blason d\u00e9partement fr Aisne.svg', 'Laon', 'Data:Aisne.map', '7411.0', 'Marne', 'Drapeau fr d\u00e9partement Aisne.svg', 'Category:Aisne', 'Aisne-Position.svg', 7369.0, 'Aisne', 'department of France', '/m/0l9rg', 'n81039829', '49.5', 'France', '85683247.0', 'Category:Maps of Aisne', '30210.0', '9.870075573198052e+17', 'https://aisne.com/', 'Hauts-de-France');\nDatabase State:\n- Table: `country`, Columns: [`label`, `description`, `commons_category`, `gnd_id`, `freebase_id`, `idref_id`, `instance_of`, `locator_map_image`, `inception`, `topics_main_category`, `office_held_by_head_of_government`, `babelnet_id`, `store_norske_leksikon_id`, `isni`, `biblioth\u00e8que_nationale_de_france_id`, `viaf_id`, `worldcat_identities_id`, `quora_topic_id`, `continent`, `diplomatic_relation`, `demonym`, `flag_image`, `short_name`, `category_for_maps`, `nese_id`, `brockhaus_enzyklop\u00e4die_online_id`, `country`, `museum_digital_place_id`, `office_held_by_head_of_state`, `head_of_state`, `great_russian_encyclopedia_online_id`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `coordinates_of_southernmost_point`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `new_york_times_topic_id`, `geonames_id`, `unicode_character`, `category_of_associated_people`, `emergency_phone_number`, `unesco_thesaurus_id`, `electrical_plug_type`, `licence_plate_code`, `coordinates_of_westernmost_point`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `official_name`, `curlie_id`, `mesh_descriptor_id`, `basic_form_of_government`, `musicbrainz_area_id`, `has_quality`, `coat_of_arms_image`, `uic_alphabetical_country_code`, `number_of_out_of_school_children`, `insee_countries_and_foreign_territories_code`, `commons_gallery`, `legislative_body`, `civicus_monitor_country_entry`, `history_of_topic`, `stw_thesaurus_for_economics_id`, `official_language`, `subreddit`, `capital`, `coat_of_arms`, `geoshape`, `national_library_of_israel_id_old`, `openstreetmap_relation_id`, `wipo_st3`, `coordinates_of_northernmost_point`, `coordinates_of_easternmost_point`, `nkcr_aut_id`, `mobile_country_code`, `total_fertility_rate`, `maritime_identification_digits`, `us_national_archives_identifier`, `asc_leiden_thesaurus_id`, `marriageable_age`, `le_monde_diplomatique_subject_id`, `category_of_people_buried_here`, `bbc_things_id`, `age_of_majority`, `dewey_decimal_classification`, `on_focus_list_of_wikimedia_project`, `ituisoiec_object_identifier`, `head_of_government`, `ioc_country_code`, `member_of`, `fast_id`, `unemployment_rate`, `railway_traffic_side`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `page_banner`, `category_for_films_shot_at_this_location`, `mains_voltage`, `executive_body`, `category_for_people_who_died_here`, `yso_id`, `anthem`, `life_expectancy`, `gran_enciclop\u00e8dia_catalana_id`, `part_of`, `top_level_internet_domain`, `area`, `shares_border_with`, `highest_point`, `driving_side`, `uic_numerical_country_code`, `lowest_point`, `iso_3166_1_numeric_code`, `located_in_time_zone`, `giant_bomb_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `country_calling_code`, `statoids_id`, `library_of_congress_authority_id`, `iso_3166_1_alpha_2_code`, `motto_text`, `flag`, `coordinate_location`, `fips_10_4_countries_and_regions`, `dagens_nyheter_topic_id`, `described_by_source`, `maintained_by_wikiproject`, `klexikon_article_id`, `iab_code`, `loc_and_marc_vocabularies_id`, `central_bank`, `language_used`, `comic_vine_id`, `treccanis_dizionario_di_storia_id`, `native_label`, `whos_on_first_id`, `dr_topic_id`, `inaturalist_place_id`, `omegawiki_defined_meaning`, `hds_id`, `gs1_country_code`, `culture`, `geonlp_id`, `analysis_policy_observatory_term_id`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `pronunciation_audio`, `eurovoc_id`, `open_data_portal`, `kbpedia_id`, `krugosvet_article`, `grove_art_online_id`, `replaces`, `rkd_thesaurus_id`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `bbc_news_topic_id`, `economy_of_topic`, `the_top_tens_id`, `yle_topic_id`, `uk_parliament_thesaurus_id`, `tasteatlas_id`, `sapa_id`, `github_topic`, `wordnet_31_synset_id`, `demographics_of_topic`, `ysa_id`, `joconde_location_id`, `zhihu_topic_id`, `schoenberg_database_of_manuscripts_place_id`, `the_world_factbook_country_id`, `national_library_of_israel_j9u_id`, `colon_classification`, `democracy_index`, `namuwiki_id`, `der_spiegel_topic_id`, `wikisimpsons_id`, `den_store_danske_id`, `urban_electric_transit_country_id`, `postimees_topic_id`, `online_pwn_encyclopedia_id`, `m49_code`, `pm20_geo_code`, `s\u00fcddeutsche_zeitung_topic_id`, `alltrails_trail_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `vat_rate`, `hashtag`, `located_in_or_next_to_body_of_water`, `gini_coefficient`, `obo_gazetteer_id`, `openstreetmap_element`, `happy_planet_index_score`, `gynopedia_id`]\n- Table: `political_border`, Columns: [`label`, `description`, `population`, `viaf_id`, `geonames_id`, `musicbrainz_area_id`, `coat_of_arms_image`, `capital`, `geoshape`, `openstreetmap_relation_id`, `shares_border_with`, `flag_image`, `topics_main_category`, `locator_map_image`, `area`, `commons_category`, `instance_of`, `freebase_id`, `library_of_congress_authority_id`, `coordinate_location`, `country`, `whos_on_first_id`, `category_for_maps`, `inaturalist_place_id`, `national_library_of_israel_j9u_id`, `official_website`, `located_in_the_administrative_territorial_entity`]",
        "Response": "Table: `political_border`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (BusinessEntityID, CreditCardID, ModifiedDate)  VALUES (12290, 12024, '2012-03-19 00:00:00.0');\nDatabase State:\n- Table: ProductListPriceHistory, Columns: [ProductID, StartDate, EndDate, ListPrice, ModifiedDate]\n- Table: `StateProvince`, Columns: [StateProvinceID, StateProvinceCode, CountryRegionCode, IsOnlyStateProvinceFlag, Name, TerritoryID, rowguid, ModifiedDate]\n- Table: `BillOfMaterials`, Columns: [BillOfMaterialsID, ProductAssemblyID, ComponentID, StartDate, EndDate, UnitMeasureCode, BOMLevel, PerAssemblyQty, ModifiedDate]\n- Table: ProductCategory, Columns: [ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: ProductDescription, Columns: [ProductDescriptionID, Description, rowguid, ModifiedDate]\n- Table: `CurrencyRate`, Columns: [CurrencyRateID, CurrencyRateDate, FromCurrencyCode, ToCurrencyCode, AverageRate, EndOfDayRate, ModifiedDate]\n- Table: `Product`, Columns: [ProductID, Name, ProductNumber, MakeFlag, FinishedGoodsFlag, Color, SafetyStockLevel, ReorderPoint, StandardCost, ListPrice, Size, SizeUnitMeasureCode, WeightUnitMeasureCode, Weight, DaysToManufacture, ProductLine, Class, Style, ProductSubcategoryID, ProductModelID, SellStartDate, SellEndDate, DiscontinuedDate, rowguid, ModifiedDate]\n- Table: CountryRegion, Columns: [CountryRegionCode, Name, ModifiedDate]\n- Table: ProductVendor, Columns: [ProductID, BusinessEntityID, AverageLeadTime, StandardPrice, LastReceiptCost, LastReceiptDate, MinOrderQty, MaxOrderQty, OnOrderQty, UnitMeasureCode, ModifiedDate]\n- Table: EmailAddress, Columns: [BusinessEntityID, EmailAddressID, EmailAddress, rowguid, ModifiedDate]\n- Table: `Location`, Columns: [LocationID, Name, CostRate, Availability, ModifiedDate]\n- Table: `SalesOrderHeader`, Columns: [SalesOrderID, RevisionNumber, OrderDate, DueDate, ShipDate, Status, OnlineOrderFlag, SalesOrderNumber, PurchaseOrderNumber, AccountNumber, CustomerID, SalesPersonID, TerritoryID, BillToAddressID, ShipToAddressID, ShipMethodID, CreditCardID, CreditCardApprovalCode, CurrencyRateID, SubTotal, TaxAmt, Freight, TotalDue, Comment, rowguid, ModifiedDate]\n- Table: Currency, Columns: [CurrencyCode, Name, ModifiedDate]\n- Table: ShipMethod, Columns: [ShipMethodID, Name, ShipBase, ShipRate, rowguid, ModifiedDate]\n- Table: ProductReview, Columns: [ProductReviewID, ProductID, ReviewerName, ReviewDate, EmailAddress, Rating, Comments, ModifiedDate]\n- Table: SpecialOfferProduct, Columns: [SpecialOfferID, ProductID, rowguid, ModifiedDate]\n- Table: Shift, Columns: [ShiftID, Name, StartTime, EndTime, ModifiedDate]\n- Table: ProductDocument, Columns: [ProductID, DocumentNode, ModifiedDate]\n- Table: SalesTerritoryHistory, Columns: [BusinessEntityID, TerritoryID, StartDate, EndDate, rowguid, ModifiedDate]\n- Table: TransactionHistoryArchive, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: SpecialOffer, Columns: [SpecialOfferID, Description, DiscountPct, Type, Category, StartDate, EndDate, MinQty, MaxQty, rowguid, ModifiedDate]\n- Table: `BusinessEntity`, Columns: [BusinessEntityID, rowguid, ModifiedDate]\n- Table: Culture, Columns: [CultureID, Name, ModifiedDate]\n- Table: SalesPerson, Columns: [BusinessEntityID, TerritoryID, SalesQuota, Bonus, CommissionPct, SalesYTD, SalesLastYear, rowguid, ModifiedDate]\n- Table: `PhoneNumberType`, Columns: [PhoneNumberTypeID, Name, ModifiedDate]\n- Table: BusinessEntityAddress, Columns: [BusinessEntityID, AddressID, AddressTypeID, rowguid, ModifiedDate]\n- Table: ProductModelProductDescriptionCulture, Columns: [ProductModelID, ProductDescriptionID, CultureID, ModifiedDate]\n- Table: WorkOrder, Columns: [WorkOrderID, ProductID, OrderQty, StockedQty, ScrappedQty, StartDate, EndDate, DueDate, ScrapReasonID, ModifiedDate]\n- Table: SalesPersonQuotaHistory, Columns: [BusinessEntityID, QuotaDate, SalesQuota, rowguid, ModifiedDate]\n- Table: Employee, Columns: [BusinessEntityID, NationalIDNumber, LoginID, OrganizationNode, OrganizationLevel, JobTitle, BirthDate, MaritalStatus, Gender, HireDate, SalariedFlag, VacationHours, SickLeaveHours, CurrentFlag, rowguid, ModifiedDate]\n- Table: Customer, Columns: [CustomerID, PersonID, StoreID, TerritoryID, AccountNumber, rowguid, ModifiedDate]\n- Table: `Address`, Columns: [AddressID, AddressLine1, AddressLine2, City, StateProvinceID, PostalCode, SpatialLocation, rowguid, ModifiedDate]\n- Table: SalesOrderHeaderSalesReason, Columns: [SalesOrderID, SalesReasonID, ModifiedDate]\n- Table: CountryRegionCurrency, Columns: [CountryRegionCode, CurrencyCode, ModifiedDate]\n- Table: ProductPhoto, Columns: [ProductPhotoID, ThumbNailPhoto, ThumbnailPhotoFileName, LargePhoto, LargePhotoFileName, ModifiedDate]\n- Table: SalesTerritory, Columns: [TerritoryID, Name, CountryRegionCode, `Group`, SalesYTD, SalesLastYear, CostYTD, CostLastYear, rowguid, ModifiedDate]\n- Table: `JobCandidate`, Columns: [JobCandidateID, BusinessEntityID, Resume, ModifiedDate]\n- Table: UnitMeasure, Columns: [UnitMeasureCode, Name, ModifiedDate]\n- Table: SalesOrderDetail, Columns: [SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate]\n- Table: PurchaseOrderHeader, Columns: [PurchaseOrderID, RevisionNumber, Status, EmployeeID, VendorID, ShipMethodID, OrderDate, ShipDate, SubTotal, TaxAmt, Freight, TotalDue, ModifiedDate]\n- Table: WorkOrderRouting, Columns: [WorkOrderID, ProductID, OperationSequence, LocationID, ScheduledStartDate, ScheduledEndDate, ActualStartDate, ActualEndDate, ActualResourceHrs, PlannedCost, ActualCost, ModifiedDate]\n- Table: ProductSubcategory, Columns: [ProductSubcategoryID, ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: `EmployeeDepartmentHistory`, Columns: [BusinessEntityID, DepartmentID, ShiftID, StartDate, EndDate, ModifiedDate]\n- Table: ScrapReason, Columns: [ScrapReasonID, Name, ModifiedDate]\n- Table: ShoppingCartItem, Columns: [ShoppingCartItemID, ShoppingCartID, Quantity, ProductID, DateCreated, ModifiedDate]\n- Table: ProductCostHistory, Columns: [ProductID, StartDate, EndDate, StandardCost, ModifiedDate]\n- Table: PurchaseOrderDetail, Columns: [PurchaseOrderID, PurchaseOrderDetailID, DueDate, OrderQty, ProductID, UnitPrice, LineTotal, ReceivedQty, RejectedQty, StockedQty, ModifiedDate]\n- Table: ProductInventory, Columns: [ProductID, LocationID, Shelf, Bin, Quantity, rowguid, ModifiedDate]\n- Table: PersonCreditCard, Columns: [BusinessEntityID, CreditCardID, ModifiedDate]\n- Table: `Department`, Columns: [DepartmentID, Name, GroupName, ModifiedDate]\n- Table: `EmployeePayHistory`, Columns: [BusinessEntityID, RateChangeDate, Rate, PayFrequency, ModifiedDate]\n- Table: TransactionHistory, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: `Document`, Columns: [DocumentNode, DocumentLevel, Title, Owner, FolderFlag, FileName, FileExtension, Revision, ChangeNumber, Status, DocumentSummary, Document, rowguid, ModifiedDate]\n- Table: BusinessEntityContact, Columns: [BusinessEntityID, PersonID, ContactTypeID, rowguid, ModifiedDate]\n- Table: Person, Columns: [BusinessEntityID, PersonType, NameStyle, Title, FirstName, MiddleName, LastName, Suffix, EmailPromotion, AdditionalContactInfo, Demographics, rowguid, ModifiedDate]\n- Table: ProductModel, Columns: [ProductModelID, Name, CatalogDescription, Instructions, rowguid, ModifiedDate]\n- Table: `ContactType`, Columns: [ContactTypeID, Name, ModifiedDate]\n- Table: SalesReason, Columns: [SalesReasonID, Name, ReasonType, ModifiedDate]\n- Table: SalesTaxRate, Columns: [SalesTaxRateID, StateProvinceID, TaxType, TaxRate, Name, rowguid, ModifiedDate]\n- Table: ProductProductPhoto, Columns: [ProductID, ProductPhotoID, `Primary`, ModifiedDate]\n- Table: Store, Columns: [BusinessEntityID, Name, SalesPersonID, Demographics, rowguid, ModifiedDate]\n- Table: Password, Columns: [BusinessEntityID, PasswordHash, PasswordSalt, rowguid, ModifiedDate]\n- Table: `CreditCard`, Columns: [CreditCardID, CardType, CardNumber, ExpMonth, ExpYear, ModifiedDate]\n- Table: `AddressType`, Columns: [AddressTypeID, Name, rowguid, ModifiedDate]",
        "Response": "Table: PersonCreditCard"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `boutique_hotel` (`label`, `description`, `official_website`, `instance_of`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`)  VALUES ('The Mont Hotel', 'The Mont Hotel is a 4-star, boutique hotel located on Merrion Street Lower, Dublin 2.', 'https://www.themonthotel.ie/', 'hotel', 'Republic of Ireland', '53.3415078', 'County Dublin');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `topics_main_category`, `commons_category`, `instance_of`, `country`, `area`, `located_in_the_administrative_territorial_entity`, `freebase_id`, `archinform_location_id`, `locator_map_image`, `geonames_id`, `population`, `coordinate_location`, `encyclop\u00e6dia_britannica_online_id`, `whos_on_first_id`, `openstreetmap_relation_id`, `image`, `page_banner`, `gnd_id`, `musicbrainz_area_id`, `located_in_time_zone`, `viaf_id`, `category_for_maps`, `worldcat_identities_id`]",
        "Response": "Table: `boutique_hotel`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO WorkOrderRouting (WorkOrderID, ProductID, OperationSequence, LocationID, ScheduledStartDate, ScheduledEndDate, ActualStartDate, ActualEndDate, ActualResourceHrs, PlannedCost, ActualCost, ModifiedDate)  VALUES (33876, 519, 7, 60, '2013-04-19 00:00:00.0', '2013-04-30 00:00:00.0', '2013-04-30 00:00:00.0', '2013-05-01 00:00:00.0', 4.0, 49.0, 49.0, '2013-05-01 00:00:00.0');\nDatabase State:\n- Table: `Department`, Columns: [DepartmentID, Name, GroupName, ModifiedDate]\n- Table: `ContactType`, Columns: [ContactTypeID, Name, ModifiedDate]\n- Table: Currency, Columns: [CurrencyCode, Name, ModifiedDate]\n- Table: Culture, Columns: [CultureID, Name, ModifiedDate]\n- Table: `Location`, Columns: [LocationID, Name, CostRate, Availability, ModifiedDate]\n- Table: WorkOrderRouting, Columns: [WorkOrderID, ProductID, OperationSequence, LocationID, ScheduledStartDate, ScheduledEndDate, ActualStartDate, ActualEndDate, ActualResourceHrs, PlannedCost, ActualCost, ModifiedDate]\n- Table: `Document`, Columns: [DocumentNode, DocumentLevel, Title, Owner, FolderFlag, FileName, FileExtension, Revision, ChangeNumber, Status, DocumentSummary, Document, rowguid, ModifiedDate]\n- Table: `CreditCard`, Columns: [CreditCardID, CardType, CardNumber, ExpMonth, ExpYear, ModifiedDate]\n- Table: TransactionHistoryArchive, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]",
        "Response": "Table: WorkOrderRouting"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO games_competitor (id, games_id, person_id, age)  VALUES (176884, 23, 133128, 20);\nDatabase State:\n- Table: medal, Columns: [id, medal_name]\n- Table: noc_region, Columns: [id, noc, region_name]\n- Table: games_competitor, Columns: [id, games_id, person_id, age]\n- Table: person_region, Columns: [person_id, region_id]\n- Table: city, Columns: [id, city_name]\n- Table: sport, Columns: [id, sport_name]\n- Table: competitor_event, Columns: [event_id, competitor_id, medal_id]",
        "Response": "Table: games_competitor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (inspection_id, point_id, fine, inspector_comment)  VALUES (114664, 33, 100, 'All food and non-food contact surfaces of equipment and all food storage utensils shall be thoroughly cleaned and sanitized daily.    OBSERVED FOOD BUILD UP INSIDE PREP AREA REACH IN COOLERS DOOR RUBBER GASKETS. MUST CLEAN AND MAINTAIN COOLER GASKETS.');\nDatabase State:\n- Table: inspection_point, Columns: [point_id, Description, category, code, fine, point_level]\n- Table: establishment, Columns: [license_no, dba_name, aka_name, facility_type, risk_level, address, city, state, zip, latitude, longitude, ward]\n- Table: employee, Columns: [employee_id, first_name, last_name, address, city, state, zip, phone, title, salary, supervisor]",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Track_ID`, `Name`, `Location`, `Seating`, `Year_Opened`)  VALUES (6, 'Kansas Speedway', 'Kansas City, KS', 81687.0, 2001.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `track`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO games_competitor (id, games_id, person_id, age)  VALUES (24154, 2, 18372, 25);\nDatabase State:\n- Table: competitor_event, Columns: [event_id, competitor_id, medal_id]\n- Table: games_city, Columns: [games_id, city_id]\n- Table: sport, Columns: [id, sport_name]\n- Table: event, Columns: [id, sport_id, event_name]\n- Table: medal, Columns: [id, medal_name]\n- Table: noc_region, Columns: [id, noc, region_name]\n- Table: person_region, Columns: [person_id, region_id]\n- Table: city, Columns: [id, city_name]",
        "Response": "Table: games_competitor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `country`, `coat_of_arms_image`, `postal_code`, `head_of_government`, `coordinate_location`, `instance_of`, `freebase_id`, `ine_municipality_code`, `population`, `geonames_id`, `shares_border_with`, `openstreetmap_relation_id`, `image`, `office_held_by_head_of_government`, `official_website`, `located_in_the_administrative_territorial_entity`, `elevation_above_sea_level`, `located_in_time_zone`, `licence_plate_code`, `area`, `whos_on_first_id`, `official_name`, `viaf_id`, `male_population`, `female_population`, `inspire_id`, `factgrid_item_id`)  VALUES ('Villafranca de los Caballeros', 'municipality of Spain', 'Villafranca de los Caballeros', 'Spain', 'Escudo de Villafranca de los Caballeros (Toledo).svg', '45730', 'nan', '39.426111111111005', 'municipality of Spain', '/m/02z8jjc', '45187', 4884.0, '6361846.0', 'Alc\u00e1zar de San Juan', '342715.0', 'Villafranca de los Caballeros, Plaza de Espa\u00f1a.jpg', 'mayor of Villafranca de los Caballeros', 'http://www.aytovillafranca.es', 'Toledo Province', 643.0, 'UTC+01:00', 'TO', 107.0, '101776753', 'Villafranca de los Caballeros', '136213215.0', 2421.0, 2475.0, 'ES.IGN.BDDAE.34084545187', 'Q356758');\nDatabase State:\n- Table: `jurisdiction`, Columns: [`label`, `description`, `country`, `postal_code`, `coordinate_location`, `instance_of`, `freebase_id`, `located_in_the_administrative_territorial_entity`, `ine_municipality_code`, `population`, `geonames_id`, `shares_border_with`, `openstreetmap_relation_id`, `elevation_above_sea_level`, `commons_category`, `image`, `office_held_by_head_of_government`, `official_website`, `area`, `located_in_time_zone`, `licence_plate_code`, `whos_on_first_id`, `viaf_id`, `official_name`, `coat_of_arms_image`, `male_population`, `female_population`, `inspire_id`, `factgrid_item_id`, `head_of_government`]\n- Table: `given_name`, Columns: [`label`, `description`, `instance_of`, `said_to_be_the_same_as`, `language_of_work_or_name`, `native_label`, `writing_system`, `caverphone`, `commons_category`, `different_from`]\n- Table: `office_held_by_head_of_government`, Columns: [`label`, `description`, `instance_of`, `subclass_of`, `applies_to_jurisdiction`, `country`, `female_form_of_label`]\n- Table: `political_border`, Columns: [`label`, `description`, `commons_category`, `country`, `coat_of_arms_image`, `postal_code`, `head_of_government`, `coordinate_location`, `instance_of`, `freebase_id`, `ine_municipality_code`, `population`, `geonames_id`, `shares_border_with`, `openstreetmap_relation_id`, `image`, `office_held_by_head_of_government`, `official_website`, `located_in_the_administrative_territorial_entity`, `elevation_above_sea_level`, `located_in_time_zone`, `licence_plate_code`, `area`, `whos_on_first_id`, `official_name`, `viaf_id`, `male_population`, `female_population`, `inspire_id`, `factgrid_item_id`]\n- Table: `workplace`, Columns: [`label`, `description`, `commons_category`, `country`, `coat_of_arms_image`, `postal_code`, `shares_border_with`, `openstreetmap_relation_id`, `image`, `locator_map_image`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `head_of_government`, `instance_of`, `freebase_id`, `ine_municipality_code`, `population`, `official_website`, `elevation_above_sea_level`, `office_held_by_head_of_government`, `located_in_time_zone`, `area`, `whos_on_first_id`, `viaf_id`, `official_name`, `female_population`, `male_population`, `inspire_id`, `factgrid_item_id`, `geonames_id`, `licence_plate_code`]\n- Table: `festival_of_regional_tourist_interest_in_castile_la_mancha`, Columns: [`label`, `description`, `instance_of`, `country`, `location`]",
        "Response": "Table: `political_border`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `inception`, `geonames_id`, `area`, `topics_main_category`, `commons_category`, `dantai_code`, `coordinate_location`, `musicbrainz_area_id`, `ndl_authority_id`, `freebase_id`, `population`, `shares_border_with`, `viaf_id`, `image`, `located_in_time_zone`, `official_website`, `geonlp_id`, `locator_map_image`, `worldcat_identities_id`, `flag_image`, `name_in_kana`)  VALUES ('Higashimurayama district', 'district in Yamagata prefecture, Japan', 'Japan', 'district of Japan', 'Yamagata Prefecture', '+1878-11-01T00:00:00Z', '2112760.0', 92.5999999999999944, 'nan', 'nan', 'nan', '38.296', 'nan', 'nan', '/m/03l2h0', NULL, 'nan', 'nan', 'nan', 'nan', 'nan', 'fxQyi6', 'nan', 'nan', 'nan', 'nan');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `inception`, `geonames_id`, `area`, `topics_main_category`, `commons_category`, `dantai_code`, `coordinate_location`, `musicbrainz_area_id`, `ndl_authority_id`, `freebase_id`, `population`, `shares_border_with`, `viaf_id`, `image`, `located_in_time_zone`, `official_website`, `geonlp_id`, `locator_map_image`, `worldcat_identities_id`, `flag_image`, `name_in_kana`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Answer` (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('1', 2016, 1753, 22);\nDatabase State:\n- Table: Question, Columns: [questiontext, questionid]\n- Table: `Answer`, Columns: [AnswerText, SurveyID, UserID, QuestionID]\n- Table: Survey, Columns: [SurveyID, Description]",
        "Response": "Table: `Answer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Orchestra_ID`, `Orchestra`, `Conductor_ID`, `Record_Company`, `Year_of_Founded`, `Major_Record_Format`)  VALUES (4, 'Royal Danish Orchestra', 4, 'Kultur', 2002.0, 'DVD');\nDatabase State:\n- Table: `performance`, Columns: [`Performance_ID`, `Orchestra_ID`, `Type`, `Date`, `Official_ratings_(millions)`, `Weekly_rank`, `Share`]",
        "Response": "Table: `orchestra`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('nucleoside diphosphate kinase', 'nan', 'NDK', 'Q8ID43', 'nucleoside diphosphate phosphorylation', 'magnesium ion binding', 'nan', 'Nucleoside diphosphate kinase-like domain', 'Plasmodium falciparum 3D7', 'nan', 'protein', 'Nucleoside diphosphate kinase');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `cellular_component`, Columns: [`label`, `description`, `subclass_of`, `gene_ontology_id`, `exact_match`, `instance_of`]\n- Table: `molecular_function`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `found_in_taxon`, `instance_of`, `encodes`, `strand_orientation`, `genomic_end`, `genomic_start`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (name, school, month)  VALUES ('student960', 'smc', 2);\nDatabase State:\n- Table: longest_absense_from_school, Columns: [`name`, `month`]\n- Table: male, Columns: [`name`]\n- Table: disabled, Columns: [`name`]\n- Table: bool, Columns: [`name`]\n- Table: no_payment_due, Columns: [`name`, bool]\n- Table: enlist, Columns: [`name`, organ]\n- Table: unemployed, Columns: [`name`]\n- Table: person, Columns: [`name`]",
        "Response": "Table: enrolled"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (shipping_agent_code, shipping_agent_name, shipping_agent_description)  VALUES ('UP', 'UPS', 'g');\nDatabase State:\n- Table: Ref_Shipping_Agents, Columns: [shipping_agent_code, shipping_agent_name, shipping_agent_description]\n- Table: Documents_Mailed, Columns: [document_id, mailed_to_address_id, mailing_date]\n- Table: Ref_Document_Types, Columns: [document_type_code, document_type_description]\n- Table: Employees, Columns: [employee_id, role_code, employee_name, other_details]\n- Table: Document_Drafts, Columns: [document_id, draft_number, draft_details]\n- Table: Draft_Copies, Columns: [document_id, draft_number, copy_number]",
        "Response": "Table: Ref_Shipping_Agents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `aircraft` (`Aircraft_ID`, `Order_Year`, `Manufacturer`, `Model`, `Fleet_Series`, `Powertrain`, `Fuel_Propulsion`)  VALUES (1, 1992, 'Gillig', 'Phantom (High Floor)', '444-464 (21)', 'DD S50EGR Allison WB-400R', 'Diesel');\nDatabase State:\n- Table: `aircraft`, Columns: [`Aircraft_ID`, `Order_Year`, `Manufacturer`, `Model`, `Fleet_Series`, `Powertrain`, `Fuel_Propulsion`]\n- Table: `pilot`, Columns: [`Pilot_ID`, `Pilot_name`, `Rank`, `Age`, `Nationality`, `Position`, `Join_Year`, `Team`]",
        "Response": "Table: `aircraft`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `visit` (`Museum_ID`, `visitor_ID`, `Num_of_Ticket`, `Total_spent`)  VALUES (2, '5', 4, 89.98000000000000397);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `visit`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `uniprot_protein_id`, `ensembl_protein_id`, `encoded_by`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `biological_process`, `molecular_function`, `instance_of`, `part_of`)  VALUES ('Leptin receptor overlapping transcript', 'Protein found in Danio rerio', 'Q561T9', 'nan', 'leprot', 'Golgi membrane', 'Danio rerio', 'NP_001017787', 'late endosome to vacuole transport via multivesicular body sorting pathway', 'signaling receptor binding', 'protein', 'Vacuolar protein sorting 55');\nDatabase State:\n- Table: `vacuolar_protein_sorting_55`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `refseq_protein_id`, `molecular_function`, `cell_component`, `found_in_taxon`, `part_of`, `instance_of`, `ensembl_protein_id`, `biological_process`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (eid, aid)  VALUES (567354612, 12);\nDatabase State:\n- Table: aircraft, Columns: [aid, name, distance]",
        "Response": "Table: certificate"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `instance_of`, `eci_lok_sabha_constituency_code`, `geoshape`, `freebase_id`, `coordinate_location`)  VALUES ('Jalaun Lok Sabha constituency', 'Lok Sabha Constituency in Uttar Pradesh', 'Uttar Pradesh', 'India', 'Lok Sabha constituency', 'S24-45', 'Data:Lok Sabha constituencies/2019/Uttar Pradesh/Jalaun.map', '/m/02vptx_', '26.06');\nDatabase State:\n- Table: `jurisdiction`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `instance_of`, `eci_lok_sabha_constituency_code`, `geoshape`, `freebase_id`, `coordinate_location`]\n- Table: `1998_indian_general_election_in_uttar_pradesh`, Columns: [`label`, `description`, `office_contested`, `ballots_cast`, `country`, `followed_by`, `electorate`, `part_of`, `applies_to_jurisdiction`, `instance_of`]\n- Table: `followed_by`, Columns: [`label`, `description`, `office_contested`, `ballots_cast`, `country`, `followed_by`, `electorate`, `part_of`, `applies_to_jurisdiction`, `instance_of`, `follows`]\n- Table: `follows`, Columns: [`label`, `description`, `office_contested`, `ballots_cast`, `country`, `followed_by`, `electorate`, `part_of`, `applies_to_jurisdiction`, `instance_of`]",
        "Response": "Table: `jurisdiction`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, person_id, category, role, credited)  VALUES ('tt0629394', 'nm6214567', 'Script and Continuity Department', 'script co-ordinator', 'true');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight)  VALUES (55, 67952, 'Abdul-Yakinu Iddi', 180316, '1986-05-25 00:00:00', 172.7199999999999989, 146);\nDatabase State:\n- Table: League, Columns: [id, country_id, name]\n- Table: Player, Columns: [id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight]\n- Table: `Player_Attributes`, Columns: [id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes]\n- Table: Team_Attributes, Columns: [id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass]",
        "Response": "Table: Player"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Manufacturer_ID`, `Open_Year`, `Name`, `Num_of_Factories`, `Num_of_Shops`)  VALUES (3, 1991.0, 'Ford Make', 12, 2);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `manufacturer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`id`, `name`, `date`, `bulgarian_commander`, `latin_commander`, `result`)  VALUES (1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `battle`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `regulation_of_hormone_secretion` (`label`, `description`, `gene_ontology_id`, `subclass_of`, `regulates_molecular_biology`, `exact_match`, `instance_of`)  VALUES ('regulation of peptide hormone secretion', 'Any process that modulates the rate, frequency, or extent of the regulated release of a peptide hormone from secretory granules.', 'GO:0090276', 'regulation of peptide secretion', 'peptide hormone secretion', 'http://purl.obolibrary.org/obo/GO_0090276', 'biological process');\nDatabase State:\n- Table: `regulates_molecular_biology`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]",
        "Response": "Table: `regulation_of_hormone_secretion`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `1980_summer_olympics` (`label`, `description`, `commons_category`, `freebase_id`, `instance_of`, `part_of`, `sport`, `topics_main_category`, `country`, `point_in_time`, `has_parts`, `location`)  VALUES ('1980 Summer Olympics opening ceremony', 'nan', '1980 Summer Olympics opening ceremony', '/m/0cp0f5y', 'Olympic Games ceremony', '1980 Summer Olympics', 'nan', 'nan', 'Soviet Union', '+1980-00-00T00:00:00Z', 'nan', 'Luzhniki Stadium');\nDatabase State:\n- Table: `use`, Columns: [`label`, `description`, `freebase_id`, `subclass_of`, `commons_category`, `image`]\n- Table: `physical_location`, Columns: [`label`, `description`, `coordinate_location`, `commons_category`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `freebase_id`]\n- Table: `1980_summer_olympics`, Columns: [`label`, `description`, `commons_category`, `freebase_id`, `instance_of`, `part_of`, `sport`, `topics_main_category`, `country`, `point_in_time`, `has_parts`, `location`]\n- Table: `field_of_work`, Columns: [`label`, `description`, `commons_category`, `subclass_of`, `bncf_thesaurus_id`, `topics_main_category`, `freebase_id`, `image`, `psh_id`, `encyclop\u00e6dia_britannica_online_id`, `gnd_id`, `quora_topic_id`, `instance_of`, `uses`, `practiced_by`, `icon`, `french_vikidia_id`, `enciclop\u00e8dia_de_lesport_catal\u00e0_id`, `kbpedia_id`, `wordnet_31_synset_id`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`, `yso_id`, `den_store_danske_id`, `nkcr_aut_id`, `on_focus_list_of_wikimedia_project`, `encyclop\u00e6dia_universalis_id`, `different_from`]\n- Table: `intentional_human_activity`, Columns: [`label`, `description`, `instance_of`, `subclass_of`, `field_of_this_occupation`, `commons_category`, `topics_main_category`, `female_form_of_label`, `male_form_of_label`, `topics_main_template`]\n- Table: `type_of_sport`, Columns: [`label`, `description`, `commons_category`, `subclass_of`, `topics_main_category`, `freebase_id`, `image`, `psh_id`, `encyclop\u00e6dia_britannica_online_id`, `gnd_id`, `quora_topic_id`, `instance_of`, `great_russian_encyclopedia_online_id`, `uses`, `practiced_by`, `iptc_newscode`, `icon`, `french_vikidia_id`, `enciclop\u00e8dia_de_lesport_catal\u00e0_id`, `kbpedia_id`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`, `abc_news_topic_id`, `yso_id`, `den_store_danske_id`, `nkcr_aut_id`, `on_focus_list_of_wikimedia_project`, `encyclop\u00e6dia_universalis_id`]",
        "Response": "Table: `1980_summer_olympics`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO IMG_OBJ (IMG_ID, OBJ_SAMPLE_ID, OBJ_CLASS_ID, X, Y, W, H)  VALUES (2413812, 8, 252, 249, 248, 135, 61);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: IMG_OBJ"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Shop_ID`, `Address`, `Num_of_staff`, `Score`, `Open_Year`)  VALUES (4, '909 Walnut Street', '27', 32.0, '2010');\nDatabase State:\n- Table: `shop`, Columns: [`Shop_ID`, `Address`, `Num_of_staff`, `Score`, `Open_Year`]\n- Table: `member`, Columns: [`Member_ID`, `Name`, `Membership_card`, `Age`, `Time_of_purchase`, `Level_of_membership`, `Address`]\n- Table: `happy_hour_member`, Columns: [`HH_ID`, `Member_ID`, `Total_amount`]\n- Table: `happy_hour`, Columns: [`HH_ID`, `Shop_ID`, `Month`, `Num_of_shaff_in_charge`]",
        "Response": "Table: `shop`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `sport`, `country`, `point_in_time`, `follows`, `followed_by`, `competition_class`, `has_parts`, `on_focus_list_of_wikimedia_project`)  VALUES ('2014 Malta Badminton Championships', 'badminton championships', 'Maltese Badminton Championships', 'badminton', 'Malta', '+2014-00-00T00:00:00Z', '2013 Malta Badminton Championships', '2015 Malta Badminton Championships', 'national championship', '2014 Malta Badminton Championships \u2013 men''s singles', 'WikiProject Badminton/tournament focus list');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `teacher` (`Teacher_ID`, `Name`, `Age`, `Hometown`)  VALUES (2, 'Gustaaf Deloor', '29', 'Bolton County Borough');\nDatabase State:\n- Table: `course_arrange`, Columns: [`Course_ID`, `Teacher_ID`, `Grade`]\n- Table: `course`, Columns: [`Course_ID`, `Staring_Date`, `Course`]\n- Table: `teacher`, Columns: [`Teacher_ID`, `Name`, `Age`, `Hometown`]",
        "Response": "Table: `teacher`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Member_ID`, `Name`, `Nationality`, `Role`)  VALUES ('5', 'Juan Espil', 'Argentina', 'Viola');\nDatabase State:\n- Table: `performance`, Columns: [`Performance_ID`, `Date`, `Host`, `Location`, `Attendance`]",
        "Response": "Table: `member`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Residents (resident_id, property_id, date_moved_in, date_moved_out, other_details)  VALUES (37, 669, '2015-03-27 12:00:00', '2018-01-30 10:20:59', 'Prof. Arvel Kozey');\nDatabase State:\n- Table: Customer_Event_Notes, Columns: [Customer_Event_Note_ID, Customer_Event_ID, service_type_code, resident_id, property_id, date_moved_in]\n- Table: Customer_Events, Columns: [Customer_Event_ID, customer_id, date_moved_in, property_id, resident_id, thing_id]\n- Table: Timed_Locations_of_Things, Columns: [thing_id, Date_and_Time, Location_Code]\n- Table: Organizations, Columns: [organization_id, parent_organization_id, organization_details]",
        "Response": "Table: Residents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Major histocompatibility complex class I UJA', 'Protein found in Danio rerio', 'Q7T2D5', 'mhc1uja', 'nan', 'membrane', 'Immunoglobulin C1-set', 'Danio rerio', 'NP_956700', 'protein', 'Immunoglobulin-like fold');\nDatabase State:\n- Table: `mhc_class_i_alpha_chain_alpha1_alpha2_domains_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `refseq_rna_id`, `encodes`, `found_in_taxon`, `instance_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `follows` (`label`, `description`, `followed_by`, `follows`, `instance_of`, `sport`, `country`, `point_in_time`, `competition_class`, `has_parts`, `on_focus_list_of_wikimedia_project`)  VALUES ('2017 Israel Badminton Championships', 'badminton championships', '2018 Israel Badminton Championships', '2016 Israeli Badminton Championships', 'Israeli Badminton Championships', 'badminton', 'Israel', '+2017-00-00T00:00:00Z', 'national championship', '2017 Israel Badminton Championships \u2013 men''s singles', 'WikiProject Badminton/tournament focus list');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `coordinate_location`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `image`, `commons_category`, `part_of`, `connects_with`, `historic_county`, `toid`)  VALUES ('West Hill', 'road in Wandsworth, London, England', '51.4567', 'United Kingdom', 'road', 'London Borough of Wandsworth', 'West Hill, Wandsworth 16.JPG', 'West Hill, Wandsworth', 'A3 road', 'Wandsworth High Street', 'Surrey', '4000000030482922');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `a3_road`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `first_appearance` (`label`, `description`, `instance_of`, `has_parts`, `bulbapedia_article_id`, `tv_tropes_identifier`)  VALUES ('fourth generation of Pok\u00e9mon', 'Pok\u00e9mon generation', 'Pok\u00e9mon generation', 'list of Pok\u00e9mon introduced in Generation IV', 'Generation_IV', 'Characters/PokemonGenerationIVFamilies');\nDatabase State:\n- Table: `part`, Columns: [`label`, `description`, `instance_of`, `has_parts`, `is_a_list_of`]\n- Table: `first_appearance`, Columns: [`label`, `description`, `instance_of`, `has_parts`, `bulbapedia_article_id`, `tv_tropes_identifier`]\n- Table: `steel_type_pok\u00e9mon`, Columns: [`label`, `description`, `part_of`, `instance_of`, `from_narrative_universe`, `media_franchise`, `fandom_article_id`, `first_appearance`, `present_in_work`]",
        "Response": "Table: `first_appearance`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `headquarters` (`label`, `description`, `commons_category`, `instance_of`, `coordinate_location`, `topics_main_category`, `freebase_id`, `country`, `located_in_time_zone`, `geonames_id`, `twinned_administrative_body`, `gnd_id`, `category_of_associated_people`, `viaf_id`, `elstat_geographical_code`, `elevation_above_sea_level`, `image`, `postal_code`, `local_dialing_code`, `located_in_the_administrative_territorial_entity`, `population`, `capital_of`, `area`, `whos_on_first_id`, `national_library_of_israel_j9u_id`, `official_website`)  VALUES ('Chalkida', 'Greek city in Central Greece region', 'Chalkida', 'city', '38.4625', 'Category:Chalcis', '/m/016_r5', 'Greece', 'UTC+02:00', '260133', 'Menden (Sauerland)', '4009713-4', 'Category:People from Chalcis', '238331912', '2901010101.0', 5.0, 'Strandpromenade Chalkida.jpg', '34100', '22210', 'Euboea', 59125.0, 'Euboea regional unit', NULL, '101752347', '9.870075647371052e+17', 'https://dimoschalkideon.gr/');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `headquarters`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, category, person, role, credited)  VALUES ('S20-E7', 'Music Department', 'Denise Donatelli', 'vocalist', 'false');\nDatabase State:\n- Table: `Episode`, Columns: [episode_id, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Credit, Columns: [episode_id, category, person, role, credited]\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Character_Award, Columns: [award_id, character]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, person, role, episode_id, season, song, result]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Sales Orders` (OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`)  VALUES ('SO - 000765', 'Online', 'WARE-MKL1006', '4/10/18', '8/16/18', '9/11/18', '9/20/18', 'USD', 17, 28, 332, 29, 4, 0.2000000000000000111, '1,976.50', '1,581.20');\nDatabase State:\n- Table: Products, Columns: [ProductID, `Product Name`]\n- Table: `Sales Orders`, Columns: [OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`]",
        "Response": "Table: `Sales Orders`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SeasonStatus (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS)  VALUES (15331, '2000-2001', 'Regina Pats', 'WHL', 'Regular Season', 64, 10, 25, 35, 40, 7);\nDatabase State:\n- Table: weight_info, Columns: [weight_id, weight_in_kg, weight_in_lbs]\n- Table: SeasonStatus, Columns: [ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS]",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (year, lgID, tmID, oppID, W, L, T, OTL)  VALUES (1991, 'NHL', 'PHI', 'WIN', 0, 3, 0, NULL);\nDatabase State:\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]\n- Table: Coaches, Columns: [coachID, year, tmID, lgID, stint, notes, g, w, l, t, postg, postw, postl, postt]\n- Table: Goalies, Columns: [playerID, year, stint, tmID, lgID, GP, Min, W, L, `T/OL`, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA]\n- Table: abbrev, Columns: [Type, Code, Fullname]\n- Table: GoaliesSC, Columns: [playerID, year, tmID, lgID, GP, Min, W, L, T, SHO, GA]\n- Table: TeamsSC, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM]\n- Table: ScoringSup, Columns: [playerID, year, PPA, SHA]\n- Table: Teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: ScoringSC, Columns: [playerID, year, tmID, lgID, pos, GP, G, A, Pts, PIM]",
        "Response": "Table: TeamVsTeam"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (224554, 2012, 'M', 'W', '4y other', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL');\nDatabase State:\n- Table: institution_grads, Columns: [unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate]\n- Table: state_sector_grads, Columns: [stateid, state, state_abbr, control, level, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate, grad_cohort_ct]\n- Table: institution_details, Columns: [unitid, chronname, city, state, level, control, basic, hbcu, flagship, long_x, lat_y, site, student_count, awards_per_value, awards_per_state_value, awards_per_natl_value, exp_award_value, exp_award_state_value, exp_award_natl_value, exp_award_percentile, ft_pct, fte_value, fte_percentile, med_sat_value, med_sat_percentile, aid_value, aid_percentile, endow_value, endow_percentile, grad_100_value, grad_100_percentile, grad_150_value, grad_150_percentile, pell_value, pell_percentile, retain_value, retain_percentile, ft_fac_value, ft_fac_percentile, vsa_year, vsa_grad_after4_first, vsa_grad_elsewhere_after4_first, vsa_enroll_after4_first, vsa_enroll_elsewhere_after4_first, vsa_grad_after6_first, vsa_grad_elsewhere_after6_first, vsa_enroll_after6_first, vsa_enroll_elsewhere_after6_first, vsa_grad_after4_transfer, vsa_grad_elsewhere_after4_transfer, vsa_enroll_after4_transfer, vsa_enroll_elsewhere_after4_transfer, vsa_grad_after6_transfer, vsa_grad_elsewhere_after6_transfer, vsa_enroll_after6_transfer, vsa_enroll_elsewhere_after6_transfer, similar, state_sector_ct, carnegie_ct, counted_pct, nicknames, cohort_size]\n- Table: `state_sector_details`, Columns: [stateid, state, state_post, level, control, schools_count, counted_pct, awards_per_state_value, awards_per_natl_value, exp_award_state_value, exp_award_natl_value, state_appr_value, state_appr_rank, grad_rate_rank, awards_per_rank]",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate)  VALUES ('Tumi robe nirobe', 'Shrikanta', 'India', 1, 'tagore', 8, 'bangla', '28-AUG-2011', 1080);\nDatabase State:\n- Table: song, Columns: [song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate]\n- Table: artist, Columns: [artist_name, country, gender, preferred_genre]\n- Table: genre, Columns: [g_name, rating, most_popular_in]",
        "Response": "Table: song"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `native_label`, `driving_side`, `topics_main_wikimedia_portal`, `category_for_people_who_died_here`, `instance_of`, `central_bank`, `omegawiki_defined_meaning`, `official_website`, `official_language`, `shares_border_with`, `currency`, `anthem`, `top_level_internet_domain`, `coat_of_arms_image`, `basic_form_of_government`, `flag`, `executive_body`, `highest_judicial_authority`, `locator_map_image`, `coat_of_arms`, `contains_the_administrative_territorial_entity`, `iso_3166_1_alpha_2_code`, `iso_3166_1_alpha_3_code`, `iso_3166_1_numeric_code`, `part_of`, `openstreetmap_relation_id`, `located_in_time_zone`, `gnd_id`, `library_of_congress_authority_id`, `ndl_authority_id`, `viaf_id`, `commons_category`, `continent`, `licence_plate_code`, `inception`, `capital`, `nkcr_aut_id`, `coordinate_location`, `public_holiday`, `topics_main_category`, `country_calling_code`, `page_banner`, `ioc_country_code`, `curlie_id`, `musicbrainz_area_id`, `legislative_body`, `freebase_id`, `highest_point`, `commons_gallery`, `fips_10_4_countries_and_regions`, `diplomatic_relation`, `category_for_people_born_here`, `geonames_id`, `category_for_films_shot_at_this_location`, `category_of_people_buried_here`, `category_of_associated_people`, `described_by_source`, `history_of_topic`, `mobile_country_code`, `lowest_point`, `geography_of_topic`, `encyclop\u00e6dia_britannica_online_id`, `electrical_plug_type`, `mains_voltage`, `emergency_phone_number`, `gs1_country_code`, `coordinates_of_northernmost_point`, `nese_id`, `new_york_times_topic_id`, `guardian_topic_id`, `compulsory_education_minimum_age`, `age_of_majority`, `marriageable_age`, `area`, `quora_topic_id`, `insee_countries_and_foreign_territories_code`, `bbc_things_id`, `coordinates_of_southernmost_point`, `coordinates_of_easternmost_point`, `coordinates_of_westernmost_point`, `unicode_character`, `short_name`, `le_monde_diplomatique_subject_id`, `treccani_id`, `unesco_thesaurus_id`, `subreddit`, `office_held_by_head_of_government`, `fast_id`, `yso_id`, `dagens_nyheter_topic_id`, `getty_thesaurus_of_geographic_names_id`, `office_held_by_head_of_state`, `stw_thesaurus_for_economics_id`, `language_used`, `us_national_archives_identifier`, `uic_numerical_country_code`, `uic_alphabetical_country_code`, `gacs_id`, `gran_enciclop\u00e8dia_catalana_id`, `mesh_descriptor_id`, `official_name`, `babelnet_id`, `great_russian_encyclopedia_online_id`, `total_fertility_rate`, `maritime_identification_digits`, `brockhaus_enzyklop\u00e4die_online_id`, `on_focus_list_of_wikimedia_project`, `wikimedia_outline`, `civicus_monitor_country_entry`, `geoshape`, `isni`, `flag_image`, `member_of`, `head_of_government`, `population`, `biblioth\u00e8que_nationale_de_france_id`, `ituisoiec_object_identifier`, `archinform_location_id`, `national_library_of_israel_id_old`, `idref_id`, `railway_traffic_side`, `replaces`, `life_expectancy`, `statoids_id`, `itu_letter_code`, `wipo_st3`, `different_from`, `comic_vine_id`, `located_in_or_next_to_body_of_water`, `maintained_by_wikiproject`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `zhihu_topic_id`, `asc_leiden_thesaurus_id`, `dr_topic_id`, `iab_code`, `whos_on_first_id`, `the_top_tens_id`, `hds_id`, `fandom_article_id`, `culture`, `geonlp_id`, `world_encyclopedia_of_puppetry_arts_id`, `larousse_id`, `analysis_policy_observatory_term_id`, `category_for_maps`, `vat_rate`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `pronunciation_audio`, `eurovoc_id`, `worldcat_identities_id`, `image`, `motto_text`, `open_data_portal`, `kbpedia_id`, `grove_art_online_id`, `gynopedia_id`, `rkd_thesaurus_id`, `interlingual_index_id`, `bbc_news_topic_id`, `economy_of_topic`, `country`, `demonym`, `tasteatlas_id`, `sapa_id`, `bhcl_uuid`, `github_topic`, `uk_parliament_thesaurus_id`, `wordnet_31_synset_id`, `namuwiki_id`, `demographics_of_topic`, `inaturalist_place_id`, `\u00e1vvir_topic_id`, `joconde_location_id`, `topics_main_template`, `idaigazetteer_id`, `encyclopedia_of_the_history_of_ukraine_id`, `store_norske_leksikon_id`, `krugosvet_article`, `den_store_danske_id`, `schoenberg_database_of_manuscripts_place_id`, `edition_humboldt_digital_id`, `the_world_factbook_country_id`, `online_pwn_encyclopedia_id`, `armeniapedia_id`, `colon_classification`, `national_library_of_israel_j9u_id`, `democracy_index`, `ysa_id`, `yle_topic_id`, `postimees_topic_id`, `der_spiegel_topic_id`, `museum_digital_place_id`, `wikisimpsons_id`, `urban_electric_transit_country_id`, `hashtag`, `personality_database_profile_id`, `s\u00fcddeutsche_zeitung_topic_id`, `alltrails_trail_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `jewish_encyclopedia_id_russian`, `reddit_topic_id`, `head_of_state`, `pm20_geo_code`, `obo_gazetteer_id`, `openstreetmap_element`, `number_of_out_of_school_children`, `happy_planet_index_score`, `gini_coefficient`, `dewey_decimal_classification`, `unemployment_rate`, `giant_bomb_id`, `has_quality`, `treccanis_dizionario_di_storia_id`, `m49_code`, `basque_vikidia_id`, `google_arts_culture_entity_id`)  VALUES ('Spain', 'country in southwestern Europe with territories in Africa', 'Reino de Espa\u00f1a', 'right', 'Portal:Spain', 'Category:Deaths in Spain', 'sovereign state', 'nan', '7965', 'http://www.spain.info/', 'Spanish', 'Gibraltar', 'euro', 'Marcha Real', '.es', 'Escudo de Espa\u00f1a (mazonado).svg', 'parliamentary monarchy', 'flag of Spain', 'Government of Spain', 'Supreme Court of Spain', 'EU-Spain.svg', 'coat of arms of Spain', 'plazas de soberan\u00eda', 'ES', 'ESP', '724', 'Europe', '1311341', 'UTC+01:00', '4055964-6', 'n79006971', '571694', '133609710', 'Spain', 'Europe', 'E', '+1715-00-00T00:00:00Z', 'Madrid', 'ge131543', '40.2', 'New Year''s Day', 'Category:Spain', '34', 'Cardej\u00f3n banner1.jpg', 'ESP', 'Regional/Europe/Spain/', '471c46a7-afc5-31c4-923c-d0444f5053a4', 'Cortes Generales', '/m/06mkj', 'Teide', 'Espa\u00f1a', 'SP', 'Italy', 'Category:Births in Spain', '2510769', 'Category:Films shot in Spain', 'Category:Burials in Spain', 'Category:Spanish people', 'Catholic Encyclopedia', 'history of Spain', '214', 'Mina de Las Cruces', 'geography of Spain', 'place/Spain', 'Europlug', 230.0, '112', '840-849', '43.791222222222224', 'spanien', 'destination/spain', 'world/spain', 6.0, 18.0, 16.0, 505990.0, 'Spain', '99134.0', 'c0adb26a-0bdb-4f42-8c12-7d41b56986de', '27.641944444444444', '39.87672222222222', '27.704167', '\ud83c\uddea\ud83c\uddf8', '\u0406\u0441\u043f\u0430\u043d\u0456\u044f', 'pays/espagne', 'spagna', 'concept923', 'es', 'Prime Minister of Spain', '1204303.0', '105209', 'spanien', '1000095', 'Monarch of Spain', '17161-5', 'Spanish', '10035826.0', '71.0', 'E', '295', '24810.0', 'D013030', '\u0160pan\u011blsk\u00e9 kr\u00e1lovstv\u00ed', '00031605n', '2632850', 1.270000000000000017, '224', 'spanien', 'Wikipedia:List of articles all languages should have', 'outline of Spain', 'spain', 'Data:Spain.map', '0000 0001 2324 3505', 'Flag of Spain.svg', 'North Atlantic Treaty Organization', 'Pedro S\u00e1nchez', 47415750.0, '118635857', '2.16.724', '3043', '974222.0', '026376296', 'nan', 'Hispanic Monarchy', 82.83171000000000105, 'ues', 'E', 'ES', 'Espa\u00f1ol', '4020-55776', 'Atlantic Ocean', 'WikiProject Spain', 'Spanien', 'countries/sp', '19592266.0', '294938850', 'spanien', '1412', '85633129', '64.0', '3372.0', 'nan', 'culture of Spain', 'NgN1jZ', 'spain', 'pays/Espagne/118438', '9496', 'Category:Maps of Spain', 21.0, 'Espagne', 'Spain', 'Espa\u00f1a', 'Lb-Spuenien.ogg', '863', 'lccn-n79006971', 'nan', 'Plus Ultra', 'Spain open data portal', 'Spain', 'T080265', 'Spain', '386', 'i84082', 'c302m85qenvt', 'economy of Spain', 'Spain', 'Spanish', 'spain', 'p/43369cca-be00-41fd-804a-873cf1c50294', 'e2f8a55c-e941-4638-8f8b-5086aa7744f8', 'spain', '12960', '09045691-n', '\uc2a4\ud398\uc778', 'demographics of Spain', '6774', 'espannja', 'T84-703', 'Template:Spain topics', '2074390.0', 'Ispanija', 'Spania', 'strany_mira/ISPANIYA.html', 'Spanien', '30.0', 'H0010330', 'spain', '4169050', '16484.0', 'SG--541', '987007552531805171', 8.119999999999999218, 'Y105209', '18-177171', '3290.0', 'spanien', '2333.0', '48451', '23', 'Spain', '50665.0', 'Spanien', 'spain', 0.9050000000000000266, 'geo/F9FEFF96-EEF8-45D8-BA7A-3C8BAC93164D', 'Q7', '11856.0', 'spain', 'Felipe VI of Spain', 'A30', '591', 'node/148332300', 35822.0, 52.29999999999999716, 34.29999999999999715, '2--46', 16.0, '3035-527', 'free country', 'spagna', '724.0', 'Espainia', 'm06mkj');\nDatabase State:\n- Table: `video_game_developer`, Columns: [`label`, `description`, `instance_of`, `freebase_id`, `headquarters_location`, `industry`, `country`, `inception`, `official_website`, `mobygames_company_id`, `videogamegeek_developer_id`]\n- Table: `part`, Columns: [`label`, `description`, `topics_main_category`, `freebase_id`, `quora_topic_id`, `library_of_congress_authority_id`, `instance_of`, `nkcr_aut_id`, `national_library_of_israel_j9u_id`, `has_parts`, `part_of`, `commons_category`, `page_banner`, `gnd_id`, `viaf_id`, `coordinate_location`, `topics_main_wikimedia_portal`, `locator_map_image`, `yso_id`, `store_norske_leksikon_id`, `french_vikidia_id`, `worldcat_identities_id`, `den_store_danske_id`]\n- Table: `video_game_reboot`, Columns: [`label`, `description`, `game_mode`, `genre`, `part_of_the_series`, `platform`, `freebase_id`, `publisher`, `publication_date`, `distribution_format`, `developer`, `mobygames_game_id`, `gamefaqs_game_id`, `igromania_id`, `mixer_game_id_former_scheme`, `vglist_video_game_id`, `country_of_origin`, `speedruncom_game_id`, `instance_of`]\n- Table: `country_of_origin`, Columns: [`label`, `description`, `native_label`, `driving_side`, `topics_main_wikimedia_portal`, `category_for_people_who_died_here`, `instance_of`, `central_bank`, `omegawiki_defined_meaning`, `official_website`, `official_language`, `shares_border_with`, `currency`, `anthem`, `top_level_internet_domain`, `coat_of_arms_image`, `basic_form_of_government`, `flag`, `executive_body`, `highest_judicial_authority`, `locator_map_image`, `coat_of_arms`, `contains_the_administrative_territorial_entity`, `iso_3166_1_alpha_2_code`, `iso_3166_1_alpha_3_code`, `iso_3166_1_numeric_code`, `part_of`, `openstreetmap_relation_id`, `located_in_time_zone`, `gnd_id`, `library_of_congress_authority_id`, `ndl_authority_id`, `viaf_id`, `commons_category`, `continent`, `licence_plate_code`, `inception`, `capital`, `nkcr_aut_id`, `coordinate_location`, `public_holiday`, `topics_main_category`, `country_calling_code`, `page_banner`, `ioc_country_code`, `curlie_id`, `musicbrainz_area_id`, `legislative_body`, `freebase_id`, `highest_point`, `commons_gallery`, `fips_10_4_countries_and_regions`, `diplomatic_relation`, `category_for_people_born_here`, `geonames_id`, `category_for_films_shot_at_this_location`, `category_of_people_buried_here`, `category_of_associated_people`, `described_by_source`, `history_of_topic`, `mobile_country_code`, `lowest_point`, `geography_of_topic`, `encyclop\u00e6dia_britannica_online_id`, `electrical_plug_type`, `mains_voltage`, `emergency_phone_number`, `gs1_country_code`, `coordinates_of_northernmost_point`, `nese_id`, `new_york_times_topic_id`, `guardian_topic_id`, `compulsory_education_minimum_age`, `age_of_majority`, `marriageable_age`, `area`, `quora_topic_id`, `insee_countries_and_foreign_territories_code`, `bbc_things_id`, `coordinates_of_southernmost_point`, `coordinates_of_easternmost_point`, `coordinates_of_westernmost_point`, `unicode_character`, `short_name`, `le_monde_diplomatique_subject_id`, `treccani_id`, `unesco_thesaurus_id`, `subreddit`, `office_held_by_head_of_government`, `fast_id`, `yso_id`, `dagens_nyheter_topic_id`, `getty_thesaurus_of_geographic_names_id`, `office_held_by_head_of_state`, `stw_thesaurus_for_economics_id`, `language_used`, `us_national_archives_identifier`, `uic_numerical_country_code`, `uic_alphabetical_country_code`, `gacs_id`, `gran_enciclop\u00e8dia_catalana_id`, `mesh_descriptor_id`, `official_name`, `babelnet_id`, `great_russian_encyclopedia_online_id`, `total_fertility_rate`, `maritime_identification_digits`, `brockhaus_enzyklop\u00e4die_online_id`, `on_focus_list_of_wikimedia_project`, `wikimedia_outline`, `civicus_monitor_country_entry`, `geoshape`, `isni`, `flag_image`, `member_of`, `head_of_government`, `population`, `biblioth\u00e8que_nationale_de_france_id`, `ituisoiec_object_identifier`, `archinform_location_id`, `national_library_of_israel_id_old`, `idref_id`, `railway_traffic_side`, `replaces`, `life_expectancy`, `statoids_id`, `itu_letter_code`, `wipo_st3`, `different_from`, `comic_vine_id`, `located_in_or_next_to_body_of_water`, `maintained_by_wikiproject`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `zhihu_topic_id`, `asc_leiden_thesaurus_id`, `dr_topic_id`, `iab_code`, `whos_on_first_id`, `the_top_tens_id`, `hds_id`, `fandom_article_id`, `culture`, `geonlp_id`, `world_encyclopedia_of_puppetry_arts_id`, `larousse_id`, `analysis_policy_observatory_term_id`, `category_for_maps`, `vat_rate`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `pronunciation_audio`, `eurovoc_id`, `worldcat_identities_id`, `image`, `motto_text`, `open_data_portal`, `kbpedia_id`, `grove_art_online_id`, `gynopedia_id`, `rkd_thesaurus_id`, `interlingual_index_id`, `bbc_news_topic_id`, `economy_of_topic`, `country`, `demonym`, `tasteatlas_id`, `sapa_id`, `bhcl_uuid`, `github_topic`, `uk_parliament_thesaurus_id`, `wordnet_31_synset_id`, `namuwiki_id`, `demographics_of_topic`, `inaturalist_place_id`, `\u00e1vvir_topic_id`, `joconde_location_id`, `topics_main_template`, `idaigazetteer_id`, `encyclopedia_of_the_history_of_ukraine_id`, `store_norske_leksikon_id`, `krugosvet_article`, `den_store_danske_id`, `schoenberg_database_of_manuscripts_place_id`, `edition_humboldt_digital_id`, `the_world_factbook_country_id`, `online_pwn_encyclopedia_id`, `armeniapedia_id`, `colon_classification`, `national_library_of_israel_j9u_id`, `democracy_index`, `ysa_id`, `yle_topic_id`, `postimees_topic_id`, `der_spiegel_topic_id`, `museum_digital_place_id`, `wikisimpsons_id`, `urban_electric_transit_country_id`, `hashtag`, `personality_database_profile_id`, `s\u00fcddeutsche_zeitung_topic_id`, `alltrails_trail_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `jewish_encyclopedia_id_russian`, `reddit_topic_id`, `head_of_state`, `pm20_geo_code`, `obo_gazetteer_id`, `openstreetmap_element`, `number_of_out_of_school_children`, `happy_planet_index_score`, `gini_coefficient`, `dewey_decimal_classification`, `unemployment_rate`, `giant_bomb_id`, `has_quality`, `treccanis_dizionario_di_storia_id`, `m49_code`, `basque_vikidia_id`, `google_arts_culture_entity_id`]\n- Table: `genre`, Columns: [`label`, `description`, `instance_of`, `freebase_id`, `subclass_of`, `topics_main_category`, `tv_tropes_identifier`, `glitchwave_genre_id`]\n- Table: `series`, Columns: [`label`, `description`, `freebase_id`, `instance_of`, `genre`, `mobygames_group_id`, `giant_bomb_id`]",
        "Response": "Table: `country_of_origin`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, model_year, country)  VALUES (326, 1980, 2);\nDatabase State:\n- Table: country, Columns: [origin, country]\n- Table: data, Columns: [ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name]",
        "Response": "Table: production"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (individual_id, organization_id, date_contact_from, date_contact_to)  VALUES (8, 3, '2016-07-26 09:08:15', '2018-03-02 03:50:51');\nDatabase State:\n- Table: Individuals, Columns: [individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name]\n- Table: Parties, Columns: [party_id, payment_method_code, party_phone, party_email]\n- Table: Organizations, Columns: [organization_id, date_formed, organization_name, uk_vat_number]\n- Table: Party_Forms, Columns: [party_id, form_id, date_completion_started, form_status_code, date_fully_completed]\n- Table: Forms, Columns: [form_id, form_type_code, service_id, form_number, form_name, form_description]\n- Table: Party_Addresses, Columns: [party_id, address_id, date_address_from, address_type_code, date_address_to]\n- Table: Organization_Contact_Individuals, Columns: [individual_id, organization_id, date_contact_from, date_contact_to]\n- Table: Addresses, Columns: [address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country]",
        "Response": "Table: Organization_Contact_Individuals"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Salmonella enterica subsp. enterica serovar Typhimurium str. LT2', 'bacterial strain', 'Salmonella enterica subsp. enterica serovar Typhimurium str. LT2', 'Salmonella enterica', '99287', 'strain', 'Gram-negative bacteria', 'GCA_000006945.2');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('flgK bll6857', 'microbial gene found in Bradyrhizobium diazoefficiens USDA 110', 'Bradyrhizobium japonicum USDA 110', '1052627', 'gene', 'FlgK bll6857', 'bll6857', 'gene', '7552766', 'reverse strand', '7551291');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `flagellar_hook_associated_protein_1`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EVENTID, REFID, EVENT_DATE, AMOUNT)  VALUES (676886, 71171, '2007-04-09 12:00:00.0', 12.11100000000000065);\nDatabase State:\n- Table: mailings3, Columns: [REFID, REF_DATE, RESPONSE]",
        "Response": "Table: `Sales`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO longest_absense_from_school (`name`, `month`)  VALUES ('student559', 7);\nDatabase State:\n- Table: male, Columns: [`name`]\n- Table: person, Columns: [`name`]\n- Table: enrolled, Columns: [name, school, month]\n- Table: longest_absense_from_school, Columns: [`name`, `month`]",
        "Response": "Table: longest_absense_from_school"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `point_in_time`, `country`, `followed_by`, `part_of`, `office_contested`, `follows`)  VALUES ('2018 Tameside Metropolitan Borough Council election in Stalybridge South', '2018 local election in England, UK', 'Tameside Metropolitan Borough Council election', '+2018-05-03T00:00:00Z', 'United Kingdom', '2019 Tameside Metropolitan Borough Council election in Stalybridge South', '2018 Tameside Metropolitan Borough Council election', 'member of Tameside Metropolitan Borough Council', '2016 Tameside Metropolitan Borough Council election in Stalybridge South');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `tameside_metropolitan_borough_council_election`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Player_ID`, `Sponsor_name`, `Player_name`, `Gender`, `Residence`, `Occupation`, `Votes`, `Rank`)  VALUES (14, 'Winnipeg South Centre', 'Rachel Heinrichs', 'F', 'Winnipeg', 'Student', 5490, '3rd');\nDatabase State:\n- Table: `coach`, Columns: [`Coach_ID`, `Coach_name`, `Gender`, `Club_ID`, `Rank`]\n- Table: `player_coach`, Columns: [`Player_ID`, `Coach_ID`, `Starting_year`]\n- Table: `club`, Columns: [`Club_ID`, `Club_name`, `Region`, `Start_year`]\n- Table: `player`, Columns: [`Player_ID`, `Sponsor_name`, `Player_name`, `Gender`, `Residence`, `Occupation`, `Votes`, `Rank`]\n- Table: `match_result`, Columns: [`Rank`, `Club_ID`, `Gold`, `Big_Silver`, `Small_Silver`, `Bronze`, `Points`]",
        "Response": "Table: `player`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `muallaqat` (`label`, `description`, `instance_of`, `author`, `google_knowledge_graph_id`, `form_of_creative_work`, `part_of`)  VALUES ('Mu\u02bballaqah of Antarah', 'poem written by Antarah ibn Shaddad', 'poem', 'Antarah ibn Shaddad', '/g/11bwcbn3hs', 'poem', 'Mu''allaqat');\nDatabase State:\n- Table: `muallaqat`, Columns: [`label`, `description`, `instance_of`, `author`, `google_knowledge_graph_id`, `form_of_creative_work`, `part_of`]",
        "Response": "Table: `muallaqat`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO book_author (book_id, author_id)  VALUES (10662, 3006);\nDatabase State:\n- Table: shipping_method, Columns: [method_id, method_name, cost]\n- Table: customer_address, Columns: [customer_id, address_id, status_id]\n- Table: address_status, Columns: [status_id, address_status]\n- Table: `order_history`, Columns: [history_id, order_id, status_id, status_date]\n- Table: book_language, Columns: [language_id, language_code, language_name]\n- Table: `cust_order`, Columns: [order_id, order_date, customer_id, shipping_method_id, dest_address_id]\n- Table: book, Columns: [book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id]\n- Table: author, Columns: [author_id, author_name]\n- Table: address, Columns: [address_id, street_number, street_name, city, country_id]\n- Table: book_author, Columns: [book_id, author_id]\n- Table: publisher, Columns: [publisher_id, publisher_name]",
        "Response": "Table: book_author"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `ensembl_transcript_id`, `homologene_id`, `refseq_rna_id`, `ortholog`, `encodes`, `found_in_taxon`, `exact_match`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `expressed_in`)  VALUES ('pdcl', 'protein-coding gene in the species Danio rerio', '323645', 'nan', 'ENSDARG00000009480', 'ENSDART00000153959', '38043.0', 'NM_199647', 'Pdcl', 'Phosducin-like', 'Danio rerio', 'nan', 'reverse strand', '51966846.0', '51950510.0', 'Danio rerio chromosome 16', 'gene', 'testicle');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `ribosomal_protein_s10_domain_superfamily` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('conserved protein, unknown function', 'nan', 'PF3D7_0521200', 'C0H4F4', 'nan', 'nan', 'cytoplasm', 'nan', 'Plasmodium falciparum 3D7', 'nan', 'protein', 'Ribosomal protein S10 domain superfamily', 'protein');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `ribosomal_protein_s10_domain_superfamily`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]",
        "Response": "Table: `ribosomal_protein_s10_domain_superfamily`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Member_ID`, `Name`, `Membership_card`, `Age`, `Time_of_purchase`, `Level_of_membership`, `Address`)  VALUES (8, 'Reynolds, Richard', 'Black', 45, 24, 1, 'Waterbury');\nDatabase State:\n- Table: `shop`, Columns: [`Shop_ID`, `Address`, `Num_of_staff`, `Score`, `Open_Year`]\n- Table: `happy_hour_member`, Columns: [`HH_ID`, `Member_ID`, `Total_amount`]",
        "Response": "Table: `member`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY)  VALUES ('AC_MGR', 'Accounting Manager', 8200, 16000);\nDatabase State:\n- Table: countries, Columns: [COUNTRY_ID, COUNTRY_NAME, REGION_ID]\n- Table: locations, Columns: [LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID]\n- Table: regions, Columns: [REGION_ID, REGION_NAME]",
        "Response": "Table: jobs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `rental` (rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update)  VALUES (1438, '2005-06-15 18:38:51.0', 1816, 82, '2005-06-17 23:50:51.0', 1, '2006-02-15 21:30:53.0');\nDatabase State:\n- Table: `store`, Columns: [store_id, manager_staff_id, address_id, last_update]\n- Table: `film_category`, Columns: [film_id, category_id, last_update]\n- Table: `payment`, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]",
        "Response": "Table: `rental`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `located_in_the_administrative_territorial_entity`, `shares_border_with`, `country`, `coordinate_location`, `commons_category`, `instance_of`, `freebase_id`, `banque_de_noms_de_lieux_du_qu\u00e9bec_id`, `cgndb_unique_id`, `openstreetmap_relation_id`, `locator_map_image`, `area`, `population`, `statistics_canada_geographic_code`)  VALUES ('Jam\u00e9sie', 'equivalent territory and geographic region in Quebec, Canada', 'Nord-du-Qu\u00e9bec', 'Kativik Regional Government', 'Canada', '52.0', 'Jam\u00e9sie Equivalent Territory', 'equivalent territory', '/m/03718y', '291320.0', 'EPWPC', '8477435', 'Quebec MRC Jam\u00e9sie location map.svg', 283859.8900000000139, 14832.0, 'nan');\nDatabase State:\n- Table: `wildlife_reserve_of_quebec`, Columns: [`label`, `description`, `coordinate_location`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`, `official_website`, `banque_de_noms_de_lieux_du_qu\u00e9bec_id`, `cgndb_unique_id`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `fructose_16_bisphosphatase` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('Fructose-1,6-bisphosphatase EAE_09580', 'microbial protein found in Klebsiella aerogenes KCTC 2190', 'fructose-1,6-bisphosphatase EAE_09580', 'A0A0H3FN52', 'gluconeogenesis', 'fructose 1,6-bisphosphate 1-phosphatase activity', 'cytoplasm', 'Fructose-1,6-bisphosphatase, active site', 'Enterobacter aerogenes KCTC 2190', 'YP_004592113', 'protein', 'Fructose-1,6-bisphosphatase', 'protein');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `fructose_16_bisphosphatase`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]",
        "Response": "Table: `fructose_16_bisphosphatase`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Answer` (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('-1', 2018, 3632, 55);\nDatabase State:\n- Table: `Answer`, Columns: [AnswerText, SurveyID, UserID, QuestionID]",
        "Response": "Table: `Answer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `leucine_rich_repeat_4_protein_family` (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Leucine rich repeat and coiled-coil centrosomal protein 1', 'mammalian protein found in Rattus norvegicus', 'E9PTY0', 'Lrrcc1', 'Leucine-rich repeat', 'brown rat', 'NP_001094115', 'protein', 'Leucine-rich repeat domain superfamily');\nDatabase State:\n- Table: `leucine_rich_repeat_4_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `leucine_rich_repeat_4_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`LastName`)  VALUES ('HANNEMANN', ' CHANTAL', 1, 102);\nDatabase State:\n- Table: `list`, Columns: [`LastName`]",
        "Response": "Table: `list`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (name, director)  VALUES ('Frozen', 'Chris Buck');\nDatabase State:\n- Table: movies_total_gross, Columns: [movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross]\n- Table: `voice-actors`, Columns: [character, `voice-actor`, movie]\n- Table: characters, Columns: [movie_title, release_date, hero, villian, song]\n- Table: director, Columns: [name, director]",
        "Response": "Table: director"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `gnd_id`, `freebase_id`, `topics_main_category`, `encyclop\u00e6dia_britannica_online_id`, `instance_of`, `yso_id`, `subclass_of`, `nkcr_aut_id`)  VALUES ('sociology', 'social science that studies human society and its development', 'Sociology', '4077624-4', '/m/06ms6', 'Category:Sociology', 'topic/sociology', 'academic discipline', '331.0', 'social science', 'ph116198');\nDatabase State:\n- Table: `field_of_work`, Columns: [`label`, `description`, `commons_category`, `gnd_id`, `freebase_id`, `topics_main_category`, `encyclop\u00e6dia_britannica_online_id`, `instance_of`, `yso_id`, `subclass_of`, `nkcr_aut_id`]\n- Table: `university_of_pennsylvania_school_of_arts_and_sciences`, Columns: [`label`, `description`, `part_of`, `field_of_work`, `instance_of`, `official_website`]",
        "Response": "Table: `field_of_work`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO City (ID, Name, CountryCode, District, Population)  VALUES (637, 'Mit Ghamr', 'EGY', 'al-Daqahliya', 101801);\nDatabase State:\n- Table: CountryLanguage, Columns: [CountryCode, Language, IsOfficial, Percentage]\n- Table: City, Columns: [ID, Name, CountryCode, District, Population]\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `tags` (`index`, id, tag)  VALUES (103054, 50660, 'pop');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `tags`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('thymidylate synthase MSMEG_2670', 'microbial gene found in Mycolicibacterium smegmatis MC2 155', '4533426.0', 'gene', 'Thymidylate synthase MSMEG_2670', 'Mycobacterium smegmatis str. MC2 155', 'forward strand', '2750342', '2749542', 'gene', 'MSMEG_2670');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `mesh_descriptor_id`, `microsoft_academic_id`, `openalex_id`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `thymidylate_synthase_dcmp_hydroxymethylase_superfamily`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `refseq_protein_id`, `biological_process`, `cell_component`, `molecular_function`, `has_parts`, `found_in_taxon`, `part_of`, `instance_of`, `subclass_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, ParagraphNum, PlainText, character_id, chapter_id)  VALUES (642858, 419, replace('[Giving his petition] Against my master, Thomas\\nHorner, for saying that the Duke of York was rightful\\nheir to the crown.','\\n',char(10)), 873, 18991);\nDatabase State:\n- Table: `paragraphs`, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]\n- Table: `characters`, Columns: [id, CharName, Abbrev, Description]",
        "Response": "Table: `paragraphs`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderID, CustomerID, EmployeeID, OrderDate, ShipperID)  VALUES (10263, 20, 9, '1996-07-23', 3);\nDatabase State:\n- Table: OrderDetails, Columns: [OrderDetailID, OrderID, ProductID, Quantity]\n- Table: Categories, Columns: [CategoryID, CategoryName, Description]",
        "Response": "Table: Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Participants (Participant_ID, Participant_Type_Code, Participant_Details)  VALUES (75, 'Participant', 'Berniece Weimann');\nDatabase State:\n- Table: Services, Columns: [Service_ID, Service_Type_Code]",
        "Response": "Table: Participants"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EVENTID, REFID, EVENT_DATE, AMOUNT)  VALUES (1479359, 155485, '2007-06-19 12:00:00.0', 12.84200000000000052);\nDatabase State:\n- Table: `Mailings1_2`, Columns: [REFID, REF_DATE, RESPONSE]\n- Table: Demog, Columns: [GEOID, INHABITANTS_K, INCOME_K, A_VAR1, A_VAR2, A_VAR3, A_VAR4, A_VAR5, A_VAR6, A_VAR7, A_VAR8, A_VAR9, A_VAR10, A_VAR11, A_VAR12, A_VAR13, A_VAR14, A_VAR15, A_VAR16, A_VAR17, A_VAR18]\n- Table: `Sales`, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]\n- Table: mailings3, Columns: [REFID, REF_DATE, RESPONSE]",
        "Response": "Table: `Sales`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details)  VALUES (123, 'PT', 'Hugh', '', '2010-03-15 00:17:13', NULL);\nDatabase State:\n- Table: Roles, Columns: [Role_Code, Role_Name, Role_Description]\n- Table: Ref_Locations, Columns: [Location_Code, Location_Name, Location_Description]\n- Table: Employees, Columns: [Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details]\n- Table: Ref_Calendar, Columns: [Calendar_Date, Day_Number]\n- Table: Document_Locations, Columns: [Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]\n- Table: All_Documents, Columns: [Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details]\n- Table: Documents_to_be_Destroyed, Columns: [Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details]\n- Table: Ref_Document_Types, Columns: [Document_Type_Code, Document_Type_Name, Document_Type_Description]",
        "Response": "Table: Employees"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, category, person, role, credited)  VALUES ('S20-E14', 'Produced by', 'Felicia Nalivansky-Caplan', 'associate producer', 'true');\nDatabase State:\n- Table: Award, Columns: [award_id, organization, year, award_category, award, person, role, episode_id, season, song, result]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: `Episode`, Columns: [episode_id, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Credit, Columns: [episode_id, category, person, role, credited]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO jobs (job_id, job_desc, min_lvl, max_lvl)  VALUES (5, 'Publisher', 150, 250);\nDatabase State:\n- Table: titles, Columns: [title_id, title, type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate]\n- Table: sales, Columns: [stor_id, ord_num, ord_date, qty, payterms, title_id]\n- Table: discounts, Columns: [discounttype, stor_id, lowqty, highqty, discount]\n- Table: jobs, Columns: [job_id, job_desc, min_lvl, max_lvl]",
        "Response": "Table: jobs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`People_ID`, `Name`, `Height`, `Weight`, `Home Town`)  VALUES (7, 'Gary Goodner', 6.700000000000000177, 220.0, 'Denton, TX');\nDatabase State:\n- Table: `people`, Columns: [`People_ID`, `Name`, `Height`, `Weight`, `Home Town`]",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `competition_class`, `part_of`, `described_at_url`, `location`, `event_distance`, `follows`, `followed_by`, `point_in_time`, `sport`)  VALUES ('2013 World Rowing U23 Championships \u2013 U23 lightweight men''s coxless pair', 'rowing event', 'rowing event', 'U23 lightweight men''s coxless pair', '2013 World Rowing U23 Championships', 'http://www.worldrowing.com/events/2013-under-23-world-rowing-championships/u23-lightweight-mens-pair/', 'Regattazentrum Ottensheim', 2000.0, '2012 World Rowing U23 Championships \u2013 U23 lightweight men''s coxless pair', '2014 World Rowing U23 Championships \u2013 U23 lightweight men''s coxless pair', '+2013-00-00T00:00:00Z', 'rowing');\nDatabase State:\n- Table: `competition_class`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `short_name`, `sport`, `catalog_code`]\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `part_of`, `described_at_url`, `location`, `event_distance`, `follows`, `followed_by`, `point_in_time`, `sport`]\n- Table: `2014_world_rowing_u23_championships`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `part_of`, `described_at_url`, `location`, `event_distance`, `follows`, `followed_by`, `point_in_time`, `sport`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No)  VALUES (829764, 14, 4, 1, 1);\nDatabase State:\n- Table: Country, Columns: [Country_Id, Country_Name]\n- Table: Batting_Style, Columns: [Batting_Id, Batting_hand]\n- Table: Wicket_Taken, Columns: [Match_Id, Over_Id, Ball_Id, Player_Out, Kind_Out, Fielders, Innings_No]\n- Table: Player, Columns: [Player_Id, Player_Name, DOB, Batting_hand, Bowling_skill, Country_Name]\n- Table: Rolee, Columns: [Role_Id, Role_Desc]\n- Table: Toss_Decision, Columns: [Toss_Id, Toss_Name]\n- Table: City, Columns: [City_Id, City_Name, Country_id]\n- Table: Season, Columns: [Season_Id, Man_of_the_Series, Orange_Cap, Purple_Cap, Season_Year]\n- Table: Ball_by_Ball, Columns: [Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler]\n- Table: Bowling_Style, Columns: [Bowling_Id, Bowling_skill]\n- Table: Outcome, Columns: [Outcome_Id, Outcome_Type]\n- Table: Extra_Type, Columns: [Extra_Id, Extra_Name]\n- Table: Player_Match, Columns: [Match_Id, Player_Id, Role_Id, Team_Id]\n- Table: Venue, Columns: [Venue_Id, Venue_Name, City_Id]\n- Table: Team, Columns: [Team_Id, Team_Name]\n- Table: Extra_Runs, Columns: [Match_Id, Over_Id, Ball_Id, Extra_Type_Id, Extra_Runs, Innings_No]\n- Table: Match, Columns: [Match_Id, Team_1, Team_2, Match_Date, Season_Id, Venue_Id, Toss_Winner, Toss_Decide, Win_Type, Win_Margin, Outcome_type, Match_Winner, Man_of_the_Match]\n- Table: Win_By, Columns: [Win_Id, Win_Type]",
        "Response": "Table: Batsman_Scored"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, CID, Grade)  VALUES (1001, '600.337', 'A');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Enrolled_in"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `located_in_the_administrative_territorial_entity`, `commons_category`, `locator_map_image`, `coordinate_location`, `official_website`, `instance_of`, `topics_main_category`, `freebase_id`, `country`, `population`, `geonames_id`, `viaf_id`, `area`, `openstreetmap_relation_id`, `capital`)  VALUES ('Gunma Prefecture', 'prefecture of Japan', 'Japan', 'Gunma prefecture', 'Gunma in Japan.svg', '36.39066666666667', 'https://www.pref.gunma.jp/', 'prefecture of Japan', 'Category:Gunma Prefecture', '/m/01f4wx', 'Japan', 1934920.0, '1863501.0', '127838727', 6362.279999999999746, '1851649.0', 'Maebashi');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`People_ID`, `Name`, `Height`, `Weight`, `Birth_Date`, `Birth_Place`)  VALUES (4, 'Mark Fayne', 215.0, 102.0, 'May 5, 1987', 'Nashua, New Hampshire');\nDatabase State:\n- Table: `body_builder`, Columns: [`Body_Builder_ID`, `People_ID`, `Snatch`, `Clean_Jerk`, `Total`]",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Code`)  VALUES (56509, 'IBD', '08-MAR-10', '10-MAR-10', 150.0, 'VONDRA', 'HUMBERTO', 3, 0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Reservations`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `taxon_name`, `image`, `taxon_rank`, `parent_taxon`, `instance_of`, `freebase_id`, `itis_tsn`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `new_zealand_organisms_register_id`, `bacdive_id`, `gram_staining`, `jstor_topic_id`, `irmng_id`, `mesh_descriptor_id`, `lpsn_url`, `microsoft_academic_id`, `openalex_id`, `catalogue_of_life_id`)  VALUES ('Enterobacter', 'genus of bacteria', 'Enterobacter', 'Enterobacter', 'Enterobacter cloacae 01.png', 'genus', 'Enterobacteriaceae', 'taxon', '/m/05v7v0', '246.0', '547', '3221976.0', 'd352f933-7d5c-46a6-bb04-ae98545cde40', 'nan', 'Gram-negative bacteria', 'enterobacter', '1275938.0', 'D004754', 'http://www.bacterio.net/enterobacter.html', '2778983983.0', 'C2778983983', '4C3J');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `genbank_assembly_accession_number`, `gram_staining`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `ncbi_locus_tag`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `dna_polymerase_iii_psi_subunit_superfamily`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `biological_process`, `molecular_function`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `commons_category`, `taxon_name`, `image`, `taxon_rank`, `parent_taxon`, `instance_of`, `freebase_id`, `itis_tsn`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `new_zealand_organisms_register_id`, `bacdive_id`, `gram_staining`, `jstor_topic_id`, `irmng_id`, `mesh_descriptor_id`, `lpsn_url`, `microsoft_academic_id`, `openalex_id`, `catalogue_of_life_id`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, PetID)  VALUES (1002, 2002);\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Has_Pet, Columns: [StuID, PetID]\n- Table: Pets, Columns: [PetID, PetType, pet_age, weight]",
        "Response": "Table: Has_Pet"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('DNA ligase C    Rv3731', 'microbial protein found in Mycobacterium tuberculosis H37Rv', 'DNA ligase C Rv3731', 'L0TDE1', 'DNA ligation', 'nucleotide binding', 'DNA ligase, ATP-dependent, central domain', 'Mycobacterium tuberculosis H37Rv', 'NP_218248', 'protein', 'Nucleic acid-binding, OB-fold', 'protein');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `genbank_assembly_accession_number`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `gram_staining`]\n- Table: `molecular_function`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `dna_ligase_atp_dependent_central_domain_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `follows`, `successful_candidate`, `followed_by`, `country`, `freebase_id`, `instance_of`, `office_contested`, `topics_main_category`, `commons_category`, `number_of_seats`)  VALUES ('1826 United Kingdom general election', 'general election held in the United Kingdom', '1820 United Kingdom general election', 'Robert Jenkinson, 2nd Earl of Liverpool', '1830 United Kingdom general election', 'United Kingdom of Great Britain and Ireland', '/m/09phwc', 'United Kingdom general election', 'Member of Parliament', 'Category:1826 United Kingdom general election', 'nan', 658.0);\nDatabase State:\n- Table: `candidate`, Columns: [`label`, `description`, `sex_or_gender`, `commons_category`, `library_of_congress_authority_id`, `viaf_id`, `gnd_id`, `isni`, `place_of_birth`, `place_of_death`, `country_of_citizenship`, `date_of_birth`, `date_of_death`, `member_of_political_party`, `educated_at`, `instance_of`, `position_held`, `image`, `freebase_id`, `spouse`, `biblioth\u00e8que_nationale_de_france_id`, `libraries_australia_id`, `occupation`, `award_received`, `given_name`, `languages_spoken_written_or_signed`, `nationale_thesaurus_voor_auteurs_id`, `family_name`, `hansard_18032005_id`, `described_by_source`, `open_library_id`, `nla_trove_people_id`, `national_portrait_gallery_london_person_id`, `fast_id`, `name_in_native_language`, `work_location`, `wikitree_person_id`, `uk_national_archives_id`, `snac_ark_id`, `nese_id`, `nukat_id`, `oxford_dictionary_of_national_biography_id`, `great_russian_encyclopedia_online_id`, `idref_id`, `national_library_of_wales_authority_id`, `ra_collections_id`, `treccanis_dizionario_di_storia_id`, `store_norske_leksikon_id`, `the_peerage_person_id`, `father`, `genicom_profile_id`, `find_a_grave_memorial_id`, `brockhaus_enzyklop\u00e4die_online_id`, `worldcat_identities_id`, `deutsche_biographie_gnd_id`, `alexander_turnbull_library_id`, `genealogicsorg_person_id`, `national_library_of_israel_j9u_id`, `den_store_danske_id`, `govuk_person_id`, `encyclop\u00e6dia_britannica_online_id`, `mother`]\n- Table: `united_kingdom_general_election`, Columns: [`label`, `description`, `instance_of`, `follows`, `successful_candidate`, `followed_by`, `country`, `freebase_id`, `office_contested`, `commons_category`, `topics_main_category`, `number_of_seats`]\n- Table: `follows`, Columns: [`label`, `description`, `follows`, `successful_candidate`, `followed_by`, `country`, `freebase_id`, `instance_of`, `office_contested`, `topics_main_category`, `commons_category`, `number_of_seats`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Election_ID`, `Representative_ID`, `Date`, `Votes`, `Vote_Percent`, `Seats`, `Place`)  VALUES (3, 4, '1946', 13049.0, 19.5, 10.0, 2.0);\nDatabase State:\n- Table: `representative`, Columns: [`Representative_ID`, `Name`, `State`, `Party`, `Lifespan`]\n- Table: `election`, Columns: [`Election_ID`, `Representative_ID`, `Date`, `Votes`, `Vote_Percent`, `Seats`, `Place`]",
        "Response": "Table: `election`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('E0', '2010-03-06', 'West Ham', 'Bolton', 1, 2, 'A', 2010);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `pts_system_mannose_sorbose_specific_iia_subunit_protein_family` (`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `has_parts`, `cell_component`, `biological_process`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('PTS system transporter subunit IIA EF2267', 'microbial protein found in Enterococcus faecalis V583', 'Enterococcus faecalis V583', 'Q832G2', 'PTS system transporter subunit IIA EF2267', 'Phosphotransferase system, mannose-type IIA component', 'integral component of membrane', 'phosphoenolpyruvate-dependent sugar phosphotransferase system', 'protein', 'NP_815925', 'Phosphotransferase system, mannose-type IIA component superfamily');\nDatabase State:\n- Table: `pts_system_mannose_sorbose_specific_iia_subunit_protein_family`, Columns: [`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `has_parts`, `cell_component`, `biological_process`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `ncbi_locus_tag`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]",
        "Response": "Table: `pts_system_mannose_sorbose_specific_iia_subunit_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Person (person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname)  VALUES ('nm0109172', 'R. Emery Bright', NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Credit, Columns: [episode_id, person_id, category, role, credited]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, series, episode_id, person_id, role, result]",
        "Response": "Table: Person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Airlines (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  VALUES ('2018/8/17', 20363, 'N923XJ', 5187, 14122, 1412202, 30198, 'PIT', 10721, 1072102, 30721, 'BOS', 600, 556, -4, 0, 743, -1, 0, 0, NULL, 104, 107, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Airlines, Columns: [FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `country`, `commons_category`, `coat_of_arms_image`, `coordinate_location`, `instance_of`, `located_in_the_administrative_territorial_entity`, `geonames_id`, `topics_main_category`, `elevation_above_sea_level`, `licence_plate_code`, `locator_map_image`, `area`, `official_name`, `hasc`, `gadm_id`)  VALUES ('Brugg District', 'district in Switzerland', 'Switzerland', 'Brugg (district)', 'Brugg-blason.svg', '47.48333333333299', 'district of the canton of Aargau', 'Canton Aargau', '6458826.0', 'Category:Brugg (district)', 360.0, 'AG', 'Karte Bezirk Brugg 2018.png', 149.3100000000000022, 'Bezirk Brugg', 'CH.AG.BR', 'CHE.1.4_1');\nDatabase State:\n- Table: `wikimedia_category`, Columns: [`label`, `description`, `instance_of`, `category_combines_topics`, `category_contains`]\n- Table: `followed_by`, Columns: [`label`, `description`, `part_of`, `point_in_time`, `event_distance`, `winner`, `start_point`, `destination_point`, `series_ordinal`, `follows`, `followed_by`, `instance_of`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO movie (MovieID, Title, `MPAA Rating`, Budget, Gross, `Release Date`, Genre, Runtime, Rating, `Rating Count`, Summary)  VALUES (356, 'Superman Returns', 'PG-13', 270000000, 391081192, '2006-06-28', 'Action', 154, 6.0, 262915, 'Superman returns to Earth after spending five years in space examining his homeworld Krypton. But he finds things have changed while he was gone, and he must once again prove himself important to the world.');\nDatabase State:\n- Table: characters, Columns: [MovieID, ActorID, `Character Name`, creditOrder, pay, screentime]",
        "Response": "Table: movie"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `refseq_protein_id`, `encoded_by`, `has_parts`, `cell_component`, `molecular_function`, `biological_process`, `part_of`, `instance_of`)  VALUES ('Type 4 (IV) prepilin-like protein leader peptide processing enzyme PilD lpg1524', 'microbial protein found in Legionella pneumophila subsp. pneumophila str. Philadelphia 1', 'Q5ZVB6', 'Legionella pneumophila subsp. pneumophila str. Philadelphia 1', 'YP_095553', 'type 4 (IV) prepilin-like protein leader peptide processing enzyme PilD lpg1524', 'Prepilin type IV endopeptidase, peptidase domain', 'plasma membrane', 'transferase activity', 'proteolysis', 'Peptidase A24A, prepilin type IV, bacterial', 'protein');\nDatabase State:\n- Table: `peptidase_a24a_prepilin_type_iv_bacterial`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `refseq_protein_id`, `encoded_by`, `has_parts`, `cell_component`, `molecular_function`, `biological_process`, `part_of`, `instance_of`]",
        "Response": "Table: `peptidase_a24a_prepilin_type_iv_bacterial`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `ncbi_locus_tag`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('hypothetical protein NGR_c08960', 'microbial gene found in Sinorhizobium fredii NGR234', 'NGR_c08960', 'gene', 'Sinorhizobium fredii NGR234', '7792121', 'Hypothetical protein NGR_c08960', 'gene', '953676', 'forward strand', '952789');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `ncbi_locus_tag`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `domain_of_unknown_function_duf1732_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`id`, `Vehicle_Flight_number`, `Date`, `Pilot`, `Velocity`, `Altitude`, `airport_id`, `company_id`)  VALUES (10, 'M2-F1 #64', 'August 30, 1965', 'Thompson', 240.0, 3650.0, 9, 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `flight`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update)  VALUES (7054, 261, 1, 5122, 3.990000000000000213, '2005-07-09 07:19:35.0', '2006-02-15 22:15:00.0');\nDatabase State:\n- Table: `rental`, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]\n- Table: `city`, Columns: [city_id, city, country_id, last_update]\n- Table: `film_category`, Columns: [film_id, category_id, last_update]\n- Table: `inventory`, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: film_text, Columns: [film_id, title, description]\n- Table: `address`, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: `customer`, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: `payment`, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: `film_actor`, Columns: [actor_id, film_id, last_update]\n- Table: `film`, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]\n- Table: `category`, Columns: [category_id, name, last_update]\n- Table: `store`, Columns: [store_id, manager_staff_id, address_id, last_update]\n- Table: `country`, Columns: [country_id, country, last_update]\n- Table: `language`, Columns: [language_id, name, last_update]\n- Table: `staff`, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]",
        "Response": "Table: `payment`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional)  VALUES (4968, 1125, 1288, 10.0, 10.0, 'ounce(s)', NULL, 'FALSE');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Quantity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (individual_id, organization_id, date_contact_from, date_contact_to)  VALUES (10, 3, '2016-08-23 03:24:24', '2018-03-12 07:55:28');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Organization_Contact_Individuals"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`index`, id, tag)  VALUES (146904, 69179, 'instrumental');\nDatabase State:\n- Table: `tags`, Columns: [`index`, id, tag]",
        "Response": "Table: `tags`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('uroporphyrinogen-III synthase HP1224', 'microbial gene found in Helicobacter pylori 26695', 'Helicobacter pylori 26695', '899017', 'gene', 'Uroporphyrinogen-III synthase HP1224', 'HP1224', 'gene', '1301055', 'forward strand', '1300375');\nDatabase State:\n- Table: `tetrapyrrole_biosynthesis_uroporphyrinogen_iii_synthase_superfamily`, Columns: [`label`, `description`, `encoded_by`, `subclass_of`, `found_in_taxon`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EVENTID, REFID, EVENT_DATE, AMOUNT)  VALUES (2121542, 223132, '2007-04-10 12:00:00.0', 10.19599999999999973);\nDatabase State:\n- Table: `Customers`, Columns: [ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age]\n- Table: `Sales`, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]",
        "Response": "Table: `Sales`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`)  VALUES ('Tower', 'former control tower of the Schlei\u00dfheim airfield', 'control tower', 'Germany', '48.2395', 'Oberschlei\u00dfheim');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `control_tower`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Teacher_ID`, `Name`, `Age`, `Hometown`)  VALUES (1, 'Joseph Huts', '32', 'Blackrod Urban District');\nDatabase State:\n- Table: `course_arrange`, Columns: [`Course_ID`, `Teacher_ID`, `Grade`]\n- Table: `teacher`, Columns: [`Teacher_ID`, `Name`, `Age`, `Hometown`]",
        "Response": "Table: `teacher`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email)  VALUES (7, 4, 'store_name', replace('41924 Alfredo Cliff\\nNew Eviestad, NY 17573','\\n',char(10)), '1-109-872-9142x77078', 'ihamill@example.org');\nDatabase State:\n- Table: Order_Items, Columns: [order_item_id, order_id, product_id]\n- Table: Suppliers, Columns: [supplier_id, supplier_name, supplier_phone]\n- Table: Addresses, Columns: [address_id, address_details]\n- Table: Products, Columns: [product_id, product_type_code, product_name, product_price]\n- Table: Staff_Department_Assignments, Columns: [staff_id, department_id, date_assigned_from, job_title_code, date_assigned_to]\n- Table: Customer_Addresses, Columns: [customer_id, address_id, date_from, date_to]\n- Table: Staff, Columns: [staff_id, staff_gender, staff_name]\n- Table: Customers, Columns: [customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email]\n- Table: Department_Stores, Columns: [dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status_code, order_date]\n- Table: Product_Suppliers, Columns: [product_id, supplier_id, date_supplied_from, date_supplied_to, total_amount_purchased, total_value_purchased]\n- Table: Supplier_Addresses, Columns: [supplier_id, address_id, date_from, date_to]\n- Table: Departments, Columns: [department_id, dept_store_id, department_name]\n- Table: Department_Store_Chain, Columns: [dept_store_chain_id, dept_store_chain_name]",
        "Response": "Table: Department_Stores"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `point_in_time`, `follows`, `followed_by`, `part_of`, `topics_main_category`)  VALUES ('1098 BC', 'year', 'year BC', '-1098-01-01T00:00:00Z', '1099 BC', '1097 BC', '1090s BC', 'Category:1098 BC');\nDatabase State:\n- Table: `1090s_bc`, Columns: [`label`, `description`, `instance_of`, `point_in_time`, `follows`, `followed_by`, `part_of`, `topics_main_category`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `point_in_time`, `follows`, `followed_by`, `part_of`, `topics_main_category`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `followed_by` (`label`, `description`, `topics_main_category`, `instance_of`, `point_in_time`, `follows`, `followed_by`, `part_of`)  VALUES ('533 BC', 'year', 'Category:533 BC', 'year BC', '-0533-01-01T00:00:00Z', '534 BC', '532 BC', '530s BC');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `topics_main_category`, `instance_of`, `point_in_time`, `follows`, `followed_by`, `part_of`]\n- Table: `follows`, Columns: [`label`, `description`, `topics_main_category`, `instance_of`, `point_in_time`, `follows`, `followed_by`, `part_of`]\n- Table: `530s_bc`, Columns: [`label`, `description`, `instance_of`, `point_in_time`, `topics_main_category`, `follows`, `followed_by`, `part_of`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`, `has_parts`)  VALUES ('L-threonine import across plasma membrane', 'The directed movement of L-threonine from outside of a cell, across the plasma membrane and into the cytosol.', 'GO:1903807', 'amino acid import across plasma membrane', 'http://purl.obolibrary.org/obo/GO_1903807', 'biological process', 'L-Threonine');\nDatabase State:\n- Table: `regulates_molecular_biology`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`, `has_parts`]\n- Table: `positive_regulation_of_cation_transmembrane_transport`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `regulates_molecular_biology`, `exact_match`, `instance_of`]",
        "Response": "Table: `regulates_molecular_biology`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number)  VALUES (114, 'Good Credit Rating', '039 Jedidiah Estate Suite 537', 'Apt. 245', 'Sauerberg', 'Hawaii', 'cayla.satterfield@example.net', '470-803-0244');\nDatabase State:\n- Table: Staff, Columns: [staff_id, gender, first_name, last_name, email_address, phone_number]\n- Table: Customers, Columns: [customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number]\n- Table: Products, Columns: [product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price]\n- Table: Complaints, Columns: [complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  VALUES ('2018/8/25', 19805, 'N652AW', 1742, 14107, 1410702, 30466, 'PHX', 10713, 1071302, 30713, 'BOI', 955, 1004, 9, 9, 1305, 8, 8, 0, NULL, 122, 121, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `orthology` (`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `homologene_id`, `found_in_taxon`, `refseq_rna_id`, `ensembl_transcript_id`, `chromosome`, `encodes`, `mouse_genome_informatics_id`, `exact_match`, `mgi_gene_symbol`, `strand_orientation`, `ortholog`, `instance_of`, `cytogenetic_location`, `genomic_start`, `genomic_end`, `expressed_in`)  VALUES ('Ptafr', 'protein-coding gene in the species Mus musculus', '19204', 'protein-coding gene', 'ENSMUSG00000056529', '20260', 'house mouse', 'NM_001081211', 'ENSMUST00000070690', 'mouse chromosome 4', 'Platelet-activating factor receptor', 'MGI:106066', 'http://identifiers.org/ncbigene/19204', 'Ptafr', 'forward strand', 'Ptafr', 'gene', '4 D2.3|4 65.56 cM', '132291378.0', '132309994.0', 'bone marrow');\nDatabase State:\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `g_protein_coupled_receptor`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `transporter_classification_database_id`]",
        "Response": "Table: `orthology`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, person_id, category, role, credited)  VALUES ('tt0629266', 'nm0223375', 'Additional Crew', 'assistant: Ed Sherin', 'false');\nDatabase State:\n- Table: Credit, Columns: [episode_id, person_id, category, role, credited]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`book_club_id`, `Year`, `Author_or_Editor`, `Book_Title`, `Publisher`, `Category`, `Result`)  VALUES (11, 1990, 'Jeffrey N. McMahan', 'Somewhere in the Night', 'Alyson', 'Gay SF/F', 'Won [B ]');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `book_club`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score)  VALUES (170, 21, 2015, 48);\nDatabase State:\n- Table: ranking_system, Columns: [id, system_name]\n- Table: university_ranking_year, Columns: [university_id, ranking_criteria_id, year, score]\n- Table: university, Columns: [id, country_id, university_name]\n- Table: university_year, Columns: [university_id, year, num_students, student_staff_ratio, pct_international_students, pct_female_students]\n- Table: country, Columns: [id, country_name]\n- Table: ranking_criteria, Columns: [id, ranking_system_id, criteria_name]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO generalinfo (id_restaurant, label, food_type, city, review)  VALUES (5525, 'the empress of india', 'indian', 'santa clara', 3.5);\nDatabase State:\n- Table: geographic, Columns: [city, county, region]",
        "Response": "Table: generalinfo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `ensembl_protein_id`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('coatomer subunit gamma, putative', 'nan', 'nan', 'SEC21', 'Q8IHR6', 'intracellular protein transport', 'structural molecule activity', 'membrane coat', 'Clathrin/coatomer adaptor, adaptin-like, N-terminal', 'Plasmodium falciparum 3D7', 'nan', 'protein', 'Coatomer, gamma subunit, appendage domain superfamily');\nDatabase State:\n- Table: `orthology`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `homologene_id`, `chromosome`, `found_in_taxon`, `refseq_rna_id`, `ensembl_transcript_id`, `encodes`, `ortholog`, `strand_orientation`, `instance_of`, `cytogenetic_location`, `genomic_start`, `genomic_end`, `expressed_in`]\n- Table: `expressed_in`, Columns: [`label`, `description`, `foundational_model_of_anatomy_id`, `freebase_id`, `uberon_id`, `instance_of`, `subclass_of`, `microsoft_academic_id`, `openalex_id`, `jstor_topic_id`, `mesh_tree_code`]\n- Table: `encodes`, Columns: [`label`, `description`, `ensembl_protein_id`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `refseq_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `part_of`]\n- Table: `coatomer_calthrin_adaptor_appendage_c_terminal_subdomain`, Columns: [`label`, `description`, `ensembl_protein_id`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]\n- Table: `cellular_component`, Columns: [`label`, `description`, `gene_ontology_id`, `part_of`, `subclass_of`, `exact_match`, `instance_of`]",
        "Response": "Table: `coatomer_calthrin_adaptor_appendage_c_terminal_subdomain`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`index`, id, tag)  VALUES (133001, 63194, 'edm');\nDatabase State:\n- Table: `torrents`, Columns: [groupName, totalSnatched, artist, groupYear, releaseType, groupId, id]",
        "Response": "Table: `tags`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('FixL-related histidine kinase SRU_1122', 'microbial protein found in Salinibacter ruber DSM 13855', 'Salinibacter ruber DSM 13855', 'protein', 'FixL-related histidine kinase SRU_1122', 'Q2S3I2', 'protein', 'YP_445249', 'Signal transduction histidine kinase, dimerisation/phosphoacceptor domain superfamily');\nDatabase State:\n- Table: `protein_of_unknown_function_duf3467`, Columns: [`label`, `description`, `found_in_taxon`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `encodes`, Columns: [`label`, `description`, `found_in_taxon`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `protein_of_unknown_function_duf3467`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Manufacturer_ID`, `Open_Year`, `Name`, `Num_of_Factories`, `Num_of_Shops`)  VALUES (2, 1990.0, 'IKEA', 21, 19);\nDatabase State:\n- Table: `furniture_manufacte`, Columns: [`Manufacturer_ID`, `Furniture_ID`, `Price_in_Dollar`]",
        "Response": "Table: `manufacturer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `use` (`label`, `description`, `subclass_of`, `commons_category`, `freebase_id`, `image`, `kbpedia_id`, `wordnet_31_synset_id`)  VALUES ('swimming pool', 'excavation or containment structure filled with water and used for swimming', 'sports venue', 'Swimming pools', '/m/0b_rs', 'Fm stirling pool.jpg', 'SwimmingPool', '04378312-n');\nDatabase State:\n- Table: `use`, Columns: [`label`, `description`, `subclass_of`, `commons_category`, `freebase_id`, `image`, `kbpedia_id`, `wordnet_31_synset_id`]\n- Table: `type_of_sport`, Columns: [`label`, `description`, `openstreetmap_tag_or_key`, `instance_of`, `commons_category`, `subclass_of`, `freebase_id`, `image`, `gnd_id`, `icon`, `encyclop\u00e6dia_britannica_online_id`, `practiced_by`, `uses`, `iptc_newscode`, `topics_main_category`, `fandom_article_id`, `abc_news_topic_id`, `on_focus_list_of_wikimedia_project`, `bncf_thesaurus_id`, `psh_id`, `encyclop\u00e6dia_universalis_id`, `french_vikidia_id`, `yso_id`, `enciclop\u00e8dia_de_lesport_catal\u00e0_id`, `wordnet_31_synset_id`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`, `den_store_danske_id`, `nkcr_aut_id`]",
        "Response": "Table: `use`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `singer` (`Singer_ID`, `Name`, `Birth_Year`, `Net_Worth_Millions`, `Citizenship`)  VALUES (1, 'Liliane Bettencourt', 1944.0, 30.0, 'France');\nDatabase State:\n- Table: `song`, Columns: [`Song_ID`, `Title`, `Singer_ID`, `Sales`, `Highest_Position`]\n- Table: `singer`, Columns: [`Singer_ID`, `Name`, `Birth_Year`, `Net_Worth_Millions`, `Citizenship`]",
        "Response": "Table: `singer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Catalog_Contents (catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width)  VALUES (14, 9, 3, 5, 8, 'Fenta Orange', '65 wc', 415.9200000000000159, 385.8500000000000227, 371.8999999999999773, '7', '4', '3', '7');\nDatabase State:\n- Table: Catalog_Structure, Columns: [catalog_level_number, catalog_id, catalog_level_name]\n- Table: Catalog_Contents_Additional_Attributes, Columns: [catalog_entry_id, catalog_level_number, attribute_id, attribute_value]\n- Table: Attribute_Definitions, Columns: [attribute_id, attribute_name, attribute_data_type]\n- Table: Catalogs, Columns: [catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]\n- Table: Catalog_Contents, Columns: [catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
        "Response": "Table: Catalog_Contents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (attribute_id, business_id, attribute_value)  VALUES (2, 2999, 'true');\nDatabase State:\n- Table: `Business_Attributes`, Columns: [attribute_id, business_id, attribute_value]\n- Table: `Users_Compliments`, Columns: [compliment_id, user_id, number_of_compliments]\n- Table: `Business_Categories`, Columns: [business_id, category_id]\n- Table: Compliments, Columns: [compliment_id, compliment_type]\n- Table: Attributes, Columns: [attribute_id, attribute_name]\n- Table: `Reviews`, Columns: [business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length]\n- Table: `Checkins`, Columns: [business_id, day_id, label_time_0, label_time_1, label_time_2, label_time_3, label_time_4, label_time_5, label_time_6, label_time_7, label_time_8, label_time_9, label_time_10, label_time_11, label_time_12, label_time_13, label_time_14, label_time_15, label_time_16, label_time_17, label_time_18, label_time_19, label_time_20, label_time_21, label_time_22, label_time_23]\n- Table: `Tips`, Columns: [business_id, user_id, likes, tip_length]\n- Table: Years, Columns: [year_id, actual_year]\n- Table: Categories, Columns: [category_id, category_name]\n- Table: `Users`, Columns: [user_id, user_yelping_since_year, user_average_stars, user_votes_funny, user_votes_useful, user_votes_cool, user_review_count, user_fans]\n- Table: `Business_Hours`, Columns: [business_id, day_id, opening_time, closing_time]\n- Table: `Elite`, Columns: [user_id, year_id]\n- Table: `Business`, Columns: [business_id, active, city, state, stars, review_count]\n- Table: Days, Columns: [day_id, day_of_week]",
        "Response": "Table: `Business_Attributes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `category_combines_topics`, `opposite_of`, `category_contains`, `commons_category`)  VALUES ('Category:Deaths in M\u00fcnster', 'Wikimedia category', 'Wikimedia category', 'place of death', 'Category:Births in M\u00fcnster (Westfalen)', 'human', 'Deaths in M\u00fcnster (Westfalen)');\nDatabase State:\n- Table: `twin_town`, Columns: [`label`, `description`, `dewey_decimal_classification`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `commons_category`, `coordinate_location`, `coat_of_arms_image`, `image`, `official_website`, `twinned_administrative_body`, `freebase_id`, `locator_map_image`, `topics_main_category`, `category_for_people_born_here`, `category_for_people_who_died_here`, `viaf_id`, `musicbrainz_area_id`, `elevation_above_sea_level`, `area`, `official_name`, `postal_code`, `openstreetmap_relation_id`, `geonames_id`, `gnd_id`, `capital_of`, `category_of_associated_people`, `population`, `whos_on_first_id`, `worldcat_identities_id`, `getty_thesaurus_of_geographic_names_id`, `head_of_government`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `page_banner`, `commons_gallery`, `located_in_time_zone`, `described_by_source`, `nkcr_aut_id`, `curlie_id`, `category_for_maps`, `different_from`, `factgrid_item_id`, `store_norske_leksikon_id`, `online_pwn_encyclopedia_id`, `sbn_place_id`, `den_store_danske_id`, `gran_enciclop\u00e8dia_catalana_id`]\n- Table: `source_of_information`, Columns: [`label`, `description`, `instance_of`, `language_of_work_or_name`]\n- Table: `specialized_bank`, Columns: [`label`, `description`, `headquarters_location`, `country`, `inception`, `instance_of`, `legal_form`, `official_website`, `iso_9362_swiftbic_code`]\n- Table: `capital_city`, Columns: [`label`, `description`, `locator_map_image`, `coordinate_location`, `image`, `located_in_the_administrative_territorial_entity`, `country`, `category_for_people_who_died_here`, `dewey_decimal_classification`, `page_banner`, `commons_category`, `gnd_id`, `coat_of_arms_image`, `instance_of`, `german_municipality_key`, `local_dialing_code`, `located_in_time_zone`, `flag_image`, `twinned_administrative_body`, `licence_plate_code`, `topics_main_category`, `postal_code`, `musicbrainz_area_id`, `freebase_id`, `biblioth\u00e8que_nationale_de_france_id`, `idref_id`, `category_for_people_born_here`, `geonames_id`, `category_of_associated_people`, `official_website`, `population`, `head_of_government`, `located_in_or_next_to_body_of_water`, `shares_border_with`, `nuts_code`, `described_by_source`, `capital_of`, `commons_gallery`, `facebook_places_id`, `area`, `library_of_congress_authority_id`, `elevation_above_sea_level`, `quora_topic_id`, `short_name`, `archives_at`, `openstreetmap_relation_id`, `member_of`, `official_name`, `encyclop\u00e6dia_britannica_online_id`, `archinform_location_id`, `national_library_of_israel_id_old`, `native_label`, `great_russian_encyclopedia_online_id`, `nkcr_aut_id`, `viaf_id`, `whos_on_first_id`, `inaturalist_place_id`, `category_for_maps`, `worldcat_identities_id`, `grove_art_online_id`, `gadm_id`, `factgrid_item_id`, `national_library_of_israel_j9u_id`, `store_norske_leksikon_id`, `museum_digital_place_id`, `sbn_place_id`, `den_store_danske_id`, `online_pwn_encyclopedia_id`]",
        "Response": "Table: `opposite`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`product_id`, `product`, `dimensions`, `dpi`, `pages_per_minute_color`, `max_page_size`, `interface`)  VALUES (6, 'Canon DR-2080C', '298 x 209 x 99', 600.0, 36.0, '216mm x 355mm', 'USB 2.0');\nDatabase State:\n- Table: `store_product`, Columns: [`Store_ID`, `Product_ID`]",
        "Response": "Table: `product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `song` (`Song_ID`, `Title`, `Singer_ID`, `Sales`, `Highest_Position`)  VALUES (2, 'F**k It (I Don''t Want You Back)', 1, 552407.0, 1.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `song`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `replacing_subject` (`label`, `description`, `dissolved_abolished_or_demolished_date`, `instance_of`, `freebase_id`, `topics_main_category`, `replaced_by`, `capital`, `inception`, `replaces`, `commons_category`, `continent`, `demonym`, `member_of`, `locator_map_image`, `shares_border_with`, `coat_of_arms_image`, `basic_form_of_government`, `flag_image`, `library_of_congress_authority_id`, `currency`, `language_used`, `encyclop\u00e6dia_britannica_online_id`, `official_language`, `native_label`, `coordinate_location`, `national_library_of_israel_j9u_id`, `quora_topic_id`, `area`, `population`)  VALUES ('Kingdom of W\u00fcrttemberg', 'kingdom in Central Europe between 1806\u20131918, from January 1871 part of the German Empire', '+1918-11-06T00:00:00Z', 'historical country', '/m/03m3qw2', 'Category:Kingdom of W\u00fcrttemberg', 'Free People''s State of W\u00fcrttemberg', 'Stuttgart', '+1806-01-01T00:00:00Z', 'Duchy of W\u00fcrttemberg', 'W\u00fcrttemberg', 'Europe', 'W\u00fcrttembergischer', 'Confederation of the Rhine', 'Wurttemberg in the German Reich (1871).svg', 'nan', 'Coat of Arms of the Kingdom of W\u00fcrttemberg 1817-1921.svg', 'constitutional monarchy', 'Flagge K\u00f6nigreich W\u00fcrttemberg.svg', 'nan', 'W\u00fcrttemberg gulden', 'German', 'place/Wurttemberg', 'German', 'K\u00f6nigreich W\u00fcrttemberg', 'nan', 'nan', 'nan', 19508.0, 2437574.0);\nDatabase State:\n- Table: `operator`, Columns: [`label`, `description`, `dissolved_abolished_or_demolished_date`, `commons_category`, `continent`, `flag_image`, `shares_border_with`, `member_of`, `capital`, `coordinate_location`, `topics_main_category`, `freebase_id`, `instance_of`, `inception`, `demonym`, `official_language`, `quora_topic_id`, `currency`, `coat_of_arms_image`, `locator_map_image`, `area`, `population`, `basic_form_of_government`, `encyclop\u00e6dia_britannica_online_id`, `language_used`, `replaced_by`, `replaces`, `native_label`]\n- Table: `legation`, Columns: [`label`, `description`, `country`, `instance_of`, `operator`]\n- Table: `replacing_subject`, Columns: [`label`, `description`, `dissolved_abolished_or_demolished_date`, `instance_of`, `freebase_id`, `topics_main_category`, `replaced_by`, `capital`, `inception`, `replaces`, `commons_category`, `continent`, `demonym`, `member_of`, `locator_map_image`, `shares_border_with`, `coat_of_arms_image`, `basic_form_of_government`, `flag_image`, `library_of_congress_authority_id`, `currency`, `language_used`, `encyclop\u00e6dia_britannica_online_id`, `official_language`, `native_label`, `coordinate_location`, `national_library_of_israel_j9u_id`, `quora_topic_id`, `area`, `population`]\n- Table: `administrative_centre`, Columns: [`label`, `description`, `commons_category`, `topics_main_category`, `freebase_id`, `inception`, `locator_map_image`, `capital`, `instance_of`, `coordinate_location`, `replaces`, `image`, `quora_topic_id`, `continent`, `library_of_congress_authority_id`, `population`, `native_label`, `national_library_of_israel_j9u_id`, `area`, `coat_of_arms_image`]\n- Table: `unit_of_account`, Columns: [`label`, `description`, `freebase_id`, `country`, `instance_of`]",
        "Response": "Table: `replacing_subject`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (zip_code, county, state)  VALUES (63848, 'NEW MADRID', 'MO');\nDatabase State:\n- Table: zip_data, Columns: [zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, `1st_quarter_payroll`, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA]\n- Table: CBSA, Columns: [CBSA, CBSA_name, CBSA_type]\n- Table: avoid, Columns: [zip_code, bad_alias]\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]\n- Table: state, Columns: [abbreviation, name]",
        "Response": "Table: country"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `ensembl_protein_id`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Gamma-aminobutyric acid type A receptor subunit beta1', 'mammalian protein found in Rattus norvegicus', 'ENSRNOP00000003170', 'Gabrb1', 'P15431', 'ion transport', 'transmembrane signaling receptor activity', 'nucleus', 'Neurotransmitter-gated ion-channel transmembrane domain', 'brown rat', 'NP_037088', 'protein', 'Neurotransmitter-gated ion-channel ligand-binding domain superfamily');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `gamma_aminobutyric_acid_a_receptor_beta_subunit`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `rubidium` (`label`, `description`, `subclass_of`, `atomic_number`, `neutron_number`, `decays_to`, `half_life`, `instance_of`)  VALUES ('rubidium-84m', 'isotope of rubidium', 'rubidium', 37.0, 47.0, 'krypton-84', 20.26000000000000157, 'nuclear isomer');\nDatabase State:\n- Table: `decays_to`, Columns: [`label`, `description`, `subclass_of`, `instance_of`, `atomic_number`, `neutron_number`, `decays_to`, `half_life`, `spin_quantum_number`, `parity_quantum_number`, `mass`, `mass_excess`, `binding_energy`, `wolfram_language_entity_code`]\n- Table: `rubidium`, Columns: [`label`, `description`, `subclass_of`, `atomic_number`, `neutron_number`, `decays_to`, `half_life`, `instance_of`]",
        "Response": "Table: `rubidium`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `ensembl_transcript_id`, `homologene_id`, `refseq_rna_id`, `ortholog`, `encodes`, `found_in_taxon`, `exact_match`, `strand_orientation`, `instance_of`, `chromosome`, `genomic_start`, `genomic_end`, `cytogenetic_location`, `expressed_in`)  VALUES ('MOAP1', 'protein-coding gene in the species Homo sapiens', '64112.0', 'protein-coding gene', 'ENSG00000165943', 'ENST00000298894', '11154.0', 'NM_022151', 'Moap1', 'Modulator of apoptosis 1', 'Homo sapiens', 'http://identifiers.org/ncbigene/64112', 'reverse strand', 'gene', 'human chromosome 14', '93648541.0', '93651273.0', '14q32.12', 'superior frontal gyrus');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `refseq_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `instance_of`, `part_of`, `ensembl_protein_id`]\n- Table: `orthology`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `homologene_id`, `chromosome`, `found_in_taxon`, `refseq_rna_id`, `ensembl_transcript_id`, `encodes`, `ortholog`, `exact_match`, `strand_orientation`, `instance_of`, `cytogenetic_location`, `genomic_start`, `genomic_end`, `expressed_in`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS)  VALUES (11266, '2005-2006', 'Owen Sound Attack', 'OHL', 'Regular Season', 67, 6, 9, 15, 236, -11);\nDatabase State:\n- Table: SeasonStatus, Columns: [ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS]\n- Table: PlayerInfo, Columns: [ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0]\n- Table: weight_info, Columns: [weight_id, weight_in_kg, weight_in_lbs]",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `singer_in_concert` (`concert_ID`, `Singer_ID`)  VALUES (2, '6');\nDatabase State:\n- Table: `singer_in_concert`, Columns: [`concert_ID`, `Singer_ID`]\n- Table: `stadium`, Columns: [`Stadium_ID`, `Location`, `Name`, `Capacity`, `Highest`, `Lowest`, `Average`]",
        "Response": "Table: `singer_in_concert`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `protein_of_unknown_function_duf1006` (`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Hypothetical protein SCO3007', 'microbial protein found in Streptomyces coelicolor A3(2)', 'protein', 'Q9KYX4', 'hypothetical protein SCO3007', 'Streptomyces coelicolor A3(2)', 'protein', 'NP_627229', 'Protein of unknown function DUF1006');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `protein_of_unknown_function_duf1006`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Students_in_Detention (student_id, detention_id, incident_id)  VALUES (14, 15, 13);\nDatabase State:\n- Table: Students, Columns: [student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details]",
        "Response": "Table: Students_in_Detention"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, p_id)  VALUES (68, 331);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: taughtBy"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, course_name, course_description, other_details)  VALUES (1, 'ds', 'p', NULL);\nDatabase State:\n- Table: Student_Enrolment, Columns: [student_enrolment_id, degree_program_id, semester_id, student_id, other_details]",
        "Response": "Table: Courses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `part_of`, `instance_of`, `sport`, `country`, `participant_in`)  VALUES ('Hertha BSC Berlin', 'first men''s team of Hertha BSC Berlin', 'Hertha BSC', 'men''s association football team', 'association football', 'Germany', '2012\u201313 2. Fu\u00dfball-Bundesliga');\nDatabase State:\n- Table: `source_of_information`, Columns: [`label`, `description`, `instance_of`, `language_of_work_or_name`]\n- Table: `mens_association_football_team`, Columns: [`label`, `description`, `part_of`, `instance_of`, `sport`, `country`, `participant_in`]",
        "Response": "Table: `mens_association_football_team`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO sales_in_weather (date, store_nbr, item_nbr, units)  VALUES ('2012-10-13', 10, 9, 0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `chip_model` (`Model_name`, `Launch_year`, `RAM_MiB`, `ROM_MiB`, `Slots`, `WiFi`, `Bluetooth`)  VALUES ('X51v', 2005.0, 64.0, 256.0, '1CFII,1SD', '802.11b', '1.2');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `chip_model`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, model_year, country)  VALUES (231, 1978, 1);\nDatabase State:\n- Table: production, Columns: [ID, model_year, country]\n- Table: data, Columns: [ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name]\n- Table: country, Columns: [origin, country]\n- Table: price, Columns: [ID, price]",
        "Response": "Table: production"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1031, 'Smith', 'Sarah', 20, 'F', 550, 8772, 'PHL');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `place_of_birth` (`label`, `description`, `commons_category`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `freebase_id`, `instance_of`, `geonames_id`, `image`, `population`, `quora_topic_id`, `postal_code`, `whos_on_first_id`)  VALUES ('Auckland', 'city on the North Island New Zealand', 'Auckland', 'New Zealand', '-36.85', 'Auckland Region', 'Category:Auckland', '/m/012ts', 'city', '2193733', 'Auckland CBD.jpg', 1467800.0, 'Auckland-New-Zealand', '0600\u20132699', '101914257.0');\nDatabase State:\n- Table: `family_name_identical_to_this_given_name`, Columns: [`label`, `description`, `instance_of`, `different_from`, `commons_category`, `native_label`, `writing_system`, `soundex`, `caverphone`, `cologne_phonetics`, `wolfram_language_entity_code`, `g\u00e9opatronyme_id`, `geneanet_family_name_id`]\n- Table: `family_name`, Columns: [`label`, `description`, `instance_of`, `different_from`, `commons_category`, `native_label`, `writing_system`, `soundex`, `caverphone`, `wolfram_language_entity_code`, `g\u00e9opatronyme_id`, `geneanet_family_name_id`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `commons_category`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `freebase_id`, `instance_of`, `geonames_id`, `image`, `population`, `quora_topic_id`, `postal_code`, `whos_on_first_id`]",
        "Response": "Table: `place_of_birth`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO CHECKING (custid, balance)  VALUES (2, 2000.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: CHECKING"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('-1', 2016, 2540, 54);\nDatabase State:\n- Table: Survey, Columns: [SurveyID, Description]",
        "Response": "Table: `Answer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customers (Customer_ID, Customer_Details)  VALUES (994, 'Miss Felicita Reichel');\nDatabase State:\n- Table: Claims_Processing, Columns: [Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID]\n- Table: Customers, Columns: [Customer_ID, Customer_Details]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `applies_to_jurisdiction`, `country`, `instance_of`, `female_form_of_label`)  VALUES ('mayor of Fondarella', 'political position in Spain', 'mayor of a place in Spain', 'Fondarella', 'Spain', 'position', 'alcaldesa de Fondarella');\nDatabase State:\n- Table: `catalan_regional_election_2015_in_pla_durgell`, Columns: [`label`, `description`, `instance_of`, `country`, `applies_to_jurisdiction`, `point_in_time`, `office_contested`, `eligible_voters`, `ballots_cast`, `total_valid_votes`, `candidate`, `part_of`]\n- Table: `jurisdiction`, Columns: [`label`, `description`, `country`, `coat_of_arms_image`, `postal_code`, `coordinate_location`, `instance_of`, `head_of_government`, `freebase_id`, `ine_municipality_code`, `population`, `geonames_id`, `commons_category`, `openstreetmap_relation_id`, `located_in_the_administrative_territorial_entity`, `shares_border_with`, `image`, `viaf_id`, `topics_main_category`, `gran_enciclop\u00e8dia_catalana_id`, `office_held_by_head_of_government`, `elevation_above_sea_level`, `area`, `idescat_territorial_code_in_catalonia`, `licence_plate_code`, `demonym`, `locator_map_image`, `whos_on_first_id`, `official_name`, `official_website`, `male_population`, `female_population`, `inspire_id`, `factgrid_item_id`, `official_language`, `number_of_households`]",
        "Response": "Table: `office_held_by_head_of_government`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID)  VALUES ('777-78-7777', 'Marder', 'Kelly', '9/25/97', 'US$38,500.00', 'F', 'Average', 1, 3);\nDatabase State:\n- Table: employee, Columns: [ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID]\n- Table: location, Columns: [locationID, locationcity, address, state, zipcode, officephone]\n- Table: position, Columns: [positionID, positiontitle, educationrequired, minsalary, maxsalary]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (region_id, game_platform_id, num_sales)  VALUES (4, 6182, 0.0);\nDatabase State:\n- Table: region_sales, Columns: [region_id, game_platform_id, num_sales]\n- Table: game, Columns: [id, genre_id, game_name]\n- Table: genre, Columns: [id, genre_name]",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO competitor_event (event_id, competitor_id, medal_id)  VALUES (135, 8537, 2);\nDatabase State:\n- Table: competitor_event, Columns: [event_id, competitor_id, medal_id]\n- Table: games_competitor, Columns: [id, games_id, person_id, age]\n- Table: person_region, Columns: [person_id, region_id]\n- Table: games, Columns: [id, games_year, games_name, season]\n- Table: city, Columns: [id, city_name]\n- Table: medal, Columns: [id, medal_name]",
        "Response": "Table: competitor_event"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO ACCOUNTS (custid, name)  VALUES (2, 'Wang');\nDatabase State:\n- Table: ACCOUNTS, Columns: [custid, name]\n- Table: CHECKING, Columns: [custid, balance]",
        "Response": "Table: ACCOUNTS"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO IMG_OBJ (IMG_ID, OBJ_SAMPLE_ID, OBJ_CLASS_ID, X, Y, W, H)  VALUES (2340551, 2, 234, 250, 38, 175, 32);\nDatabase State:\n- Table: PRED_CLASSES, Columns: [PRED_CLASS_ID, PRED_CLASS]",
        "Response": "Table: IMG_OBJ"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `followed_by` (`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `follows`, `followed_by`, `competition_class`, `has_parts`)  VALUES ('2011/2012 Swedish Junior Badminton Championships U19', 'badminton championships', 'Swedish Junior Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'Sweden', '+2012-00-00T00:00:00Z', '2010/2011 Swedish Junior Badminton Championships U19', '2012/2013 Swedish Junior Badminton Championships U19', 'national championship', '2011/2012 Swedish Junior Badminton Championships U19 \u2013 Men''s singles');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `follows`, `followed_by`, `competition_class`, `has_parts`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `followed_by`, `competition_class`, `has_parts`, `follows`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`School_ID`, `School`, `Location`, `Founded`, `Affiliation`, `Enrollment`, `Nickname`, `Primary_conference`)  VALUES (3, 'University of Rhode Island', 'Kingston, RI', 1892.0, 'Public', 19095.0, 'Rams', 'Atlantic 10 Conference ( D-I )');\nDatabase State:\n- Table: `basketball_match`, Columns: [`Team_ID`, `School_ID`, `Team_Name`, `ACC_Regular_Season`, `ACC_Percent`, `ACC_Home`, `ACC_Road`, `All_Games`, `All_Games_Percent`, `All_Home`, `All_Road`, `All_Neutral`]\n- Table: `university`, Columns: [`School_ID`, `School`, `Location`, `Founded`, `Affiliation`, `Enrollment`, `Nickname`, `Primary_conference`]",
        "Response": "Table: `university`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `chaperone_modulatory_protein_cbpm` (`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Chaperone-modulator protein CbpM STM1111', 'microbial protein found in Salmonella enterica subsp. enterica serovar Typhimurium str. LT2', 'protein', 'Q7CQS3', 'Salmonella enterica subsp. enterica serovar Typhimurium str. LT2', 'chaperone-modulator protein CbpM STM1111', 'protein', 'NP_460084', 'Chaperone modulatory protein CbpM');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `ncbi_locus_tag`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]",
        "Response": "Table: `chaperone_modulatory_protein_cbpm`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Club (ClubID, ClubName, ClubDesc, ClubLocation)  VALUES (4, 'Tennis Club', 'A competitive tennis club.', 'AKW');\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Club"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `TV_series` (`id`, `Episode`, `Air_Date`, `Rating`, `Share`, `18_49_Rating_Share`, `Viewers_m`, `Weekly_Rank`, `Channel`)  VALUES (10.0, 'Blowback', 'November 26, 2007', '3.7', 6.0, '2.4/6', '6.05', 68.0, '719');\nDatabase State:\n- Table: `Cartoon`, Columns: [`id`, `Title`, `Directed_by`, `Written_by`, `Original_air_date`, `Production_code`, `Channel`]",
        "Response": "Table: `TV_series`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Papers (paperID, title)  VALUES (204, 'Making Standard ML a Practical Database Programming Language');\nDatabase State:\n- Table: Authorship, Columns: [authID, instID, paperID, authOrder]\n- Table: Authors, Columns: [authID, lname, fname]",
        "Response": "Table: Papers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (student_course_id, course_id, student_enrolment_id)  VALUES (681404, 10, 4);\nDatabase State:\n- Table: Departments, Columns: [department_id, department_name, department_description, other_details]\n- Table: Transcript_Contents, Columns: [student_course_id, transcript_id]\n- Table: Student_Enrolment, Columns: [student_enrolment_id, degree_program_id, semester_id, student_id, other_details]\n- Table: Addresses, Columns: [address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details]\n- Table: Sections, Columns: [section_id, course_id, section_name, section_description, other_details]\n- Table: Semesters, Columns: [semester_id, semester_name, semester_description, other_details]",
        "Response": "Table: Student_Enrolment_Courses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Editor_ID`, `Journal_ID`, `Work_Type`)  VALUES (1, 13, 'Photo');\nDatabase State:\n- Table: `journal_committee`, Columns: [`Editor_ID`, `Journal_ID`, `Work_Type`]\n- Table: `journal`, Columns: [`Journal_ID`, `Date`, `Theme`, `Sales`]\n- Table: `editor`, Columns: [`Editor_ID`, `Name`, `Age`]",
        "Response": "Table: `journal_committee`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No)  VALUES (980916, 3, 6, 1, 1);\nDatabase State:\n- Table: Out_Type, Columns: [Out_Id, Out_Name]\n- Table: Extra_Runs, Columns: [Match_Id, Over_Id, Ball_Id, Extra_Type_Id, Extra_Runs, Innings_No]\n- Table: Team, Columns: [Team_Id, Team_Name]\n- Table: Ball_by_Ball, Columns: [Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler]\n- Table: Rolee, Columns: [Role_Id, Role_Desc]\n- Table: City, Columns: [City_Id, City_Name, Country_id]\n- Table: Player, Columns: [Player_Id, Player_Name, DOB, Batting_hand, Bowling_skill, Country_Name]\n- Table: Country, Columns: [Country_Id, Country_Name]\n- Table: Bowling_Style, Columns: [Bowling_Id, Bowling_skill]\n- Table: Batting_Style, Columns: [Batting_Id, Batting_hand]\n- Table: Player_Match, Columns: [Match_Id, Player_Id, Role_Id, Team_Id]\n- Table: Batsman_Scored, Columns: [Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No]\n- Table: Extra_Type, Columns: [Extra_Id, Extra_Name]\n- Table: Match, Columns: [Match_Id, Team_1, Team_2, Match_Date, Season_Id, Venue_Id, Toss_Winner, Toss_Decide, Win_Type, Win_Margin, Outcome_type, Match_Winner, Man_of_the_Match]",
        "Response": "Table: Batsman_Scored"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `coordinate_location`, `freebase_id`, `instance_of`, `located_in_the_administrative_territorial_entity`, `population`)  VALUES ('La Vall de Bo\u00ed', 'municipality in the province of Lleida, in the autonomous community of Catalonia, Spain', 'Spain', '42.507222222222', '/m/0fq1fk', 'municipality of Catalonia', 'Alta Ribagor\u00e7a', 1090.0);\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `country`, `coordinate_location`, `freebase_id`, `instance_of`, `located_in_the_administrative_territorial_entity`, `population`]\n- Table: `buttress_dam`, Columns: [`label`, `description`, `commons_category`, `coordinate_location`, `instance_of`, `image`, `country`, `located_in_the_administrative_territorial_entity`, `drainage_basin`, `length`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Member_ID`, `Member_Name`, `Party_ID`, `In_office`)  VALUES (15, 'Hon Bruce Billson', '3', '1996\u2013present');\nDatabase State:\n- Table: `party`, Columns: [`Party_ID`, `Minister`, `Took_office`, `Left_office`, `Region_ID`, `Party_name`]",
        "Response": "Table: `member`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO west_superstore (`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit)  VALUES (19336, 'CA-2016-143364', '2016-07-14', '2016-07-19', 'Second Class', 'TG-21310', 'West', 'FUR-CH-10004287', 441.9200000000000159, 2, 0.2000000000000000111, 49.71600000000000108);\nDatabase State:\n- Table: west_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]\n- Table: south_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]\n- Table: central_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]\n- Table: east_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]",
        "Response": "Table: west_superstore"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (attribute_id, attribute_name, attribute_data_type)  VALUES (3, 'Yellow', 'Bool');\nDatabase State:\n- Table: Catalogs, Columns: [catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
        "Response": "Table: Attribute_Definitions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `film_actor` (actor_id, film_id, last_update)  VALUES (60, 771, '2006-02-15 05:05:03.0');\nDatabase State:\n- Table: `payment`, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: `actor`, Columns: [actor_id, first_name, last_name, last_update]",
        "Response": "Table: `film_actor`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SeasonStatus (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS)  VALUES (19384, '2000-2001', 'Sherbrooke Castors', 'QMJHL', 'Playoffs', 3, 1, 3, 4, 4, -4);\nDatabase State:\n- Table: height_info, Columns: [height_id, height_in_cm, height_in_inch]\n- Table: SeasonStatus, Columns: [ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS]\n- Table: weight_info, Columns: [weight_id, weight_in_kg, weight_in_lbs]",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date)  VALUES (352, 6, 'Property', '2016-05-23', '2017-12-09');\nDatabase State:\n- Table: Customer_Policies, Columns: [Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date]\n- Table: Claims, Columns: [Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]\n- Table: Customers, Columns: [Customer_ID, Customer_Details]\n- Table: Settlements, Columns: [Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
        "Response": "Table: Customer_Policies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO institution_grads (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (118198, 2011, 'M', 'B', '2y all', '20', 'NULL', '6', 'NULL', '30.0');\nDatabase State:\n- Table: institution_details, Columns: [unitid, chronname, city, state, level, control, basic, hbcu, flagship, long_x, lat_y, site, student_count, awards_per_value, awards_per_state_value, awards_per_natl_value, exp_award_value, exp_award_state_value, exp_award_natl_value, exp_award_percentile, ft_pct, fte_value, fte_percentile, med_sat_value, med_sat_percentile, aid_value, aid_percentile, endow_value, endow_percentile, grad_100_value, grad_100_percentile, grad_150_value, grad_150_percentile, pell_value, pell_percentile, retain_value, retain_percentile, ft_fac_value, ft_fac_percentile, vsa_year, vsa_grad_after4_first, vsa_grad_elsewhere_after4_first, vsa_enroll_after4_first, vsa_enroll_elsewhere_after4_first, vsa_grad_after6_first, vsa_grad_elsewhere_after6_first, vsa_enroll_after6_first, vsa_enroll_elsewhere_after6_first, vsa_grad_after4_transfer, vsa_grad_elsewhere_after4_transfer, vsa_enroll_after4_transfer, vsa_enroll_elsewhere_after4_transfer, vsa_grad_after6_transfer, vsa_grad_elsewhere_after6_transfer, vsa_enroll_after6_transfer, vsa_enroll_elsewhere_after6_transfer, similar, state_sector_ct, carnegie_ct, counted_pct, nicknames, cohort_size]\n- Table: `state_sector_details`, Columns: [stateid, state, state_post, level, control, schools_count, counted_pct, awards_per_state_value, awards_per_natl_value, exp_award_state_value, exp_award_natl_value, state_appr_value, state_appr_rank, grad_rate_rank, awards_per_rank]\n- Table: institution_grads, Columns: [unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate]\n- Table: state_sector_grads, Columns: [stateid, state, state_abbr, control, level, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate, grad_cohort_ct]",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `located_in_the_administrative_territorial_entity`, `instance_of`, `commons_category`, `coordinate_location`, `country`, `shares_border_with`, `topics_main_category`, `population`, `geonames_id`, `category_of_associated_people`, `viaf_id`, `official_website`, `musicbrainz_area_id`, `located_in_time_zone`, `part_of`, `official_language`, `yso_id`, `image`, `whos_on_first_id`, `freebase_id`, `coat_of_arms_image`, `store_norske_leksikon_id`, `page_banner`)  VALUES ('Southern Ostrobothnia', 'region of Finland', 'Western and Central Finland Regional State Administrative Agency', 'region of Finland', 'South Ostrobothnia', '62.75', 'Finland', 'Ostrobothnia', 'Category:South Ostrobothnia', 192156.0, '830682', 'Category:People from South Ostrobothnia', '6145602330301360677', 'https://epliitto.fi/', '4763ad43-aa77-426e-a8a1-16e4aa6e0f64', 'Eastern European Time', 'nan', 'nan', '94107.0', 'nan', '85683113.0', '/m/02wjz6', 'Etel\u00e4-Pohjanmaan maakunnan vaakuna.svg', 'S\u00f6dra_\u00d6sterbotten', 'Etel\u00e4 Pohjanmaa banner Kauhajoki railway crossing.jpg');\nDatabase State:\n- Table: `place_of_birth`, Columns: [`label`, `description`, `twinned_administrative_body`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `postal_code`, `located_in_time_zone`, `locator_map_image`, `topics_main_category`, `official_website`, `instance_of`, `freebase_id`, `gnd_id`, `musicbrainz_area_id`, `dewey_decimal_classification`, `category_for_people_who_died_here`, `category_of_associated_people`, `image`, `capital_of`, `elevation_above_sea_level`, `commons_gallery`, `viaf_id`, `facebook_places_id`, `coordinate_location`, `library_of_congress_authority_id`, `described_by_source`, `population`, `openstreetmap_relation_id`, `encyclop\u00e6dia_britannica_online_id`, `area`, `head_of_government`, `quora_topic_id`, `archinform_location_id`, `geonames_id`, `whos_on_first_id`, `official_name`, `nkcr_aut_id`, `worldcat_identities_id`, `native_label`, `national_library_of_israel_j9u_id`, `online_pwn_encyclopedia_id`, `store_norske_leksikon_id`, `category_for_maps`]\n- Table: `wikimedia_category`, Columns: [`label`, `description`, `instance_of`, `category_combines_topics`, `category_contains`]\n- Table: `twin_town`, Columns: [`label`, `description`, `locator_map_image`, `instance_of`, `located_in_the_administrative_territorial_entity`, `shares_border_with`, `country`, `commons_category`, `coat_of_arms_image`, `twinned_administrative_body`, `located_in_time_zone`, `topics_main_category`, `page_banner`, `official_website`, `musicbrainz_area_id`, `freebase_id`, `category_of_associated_people`, `image`, `viaf_id`, `coordinate_location`, `population`, `area`, `quora_topic_id`, `geonames_id`, `inaturalist_place_id`]\n- Table: `country`, Columns: [`label`, `description`, `great_russian_encyclopedia_online_id`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `coordinates_of_southernmost_point`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `new_york_times_topic_id`, `babelnet_id`, `geonames_id`, `gnd_id`, `unicode_character`, `category_of_associated_people`, `emergency_phone_number`, `unesco_thesaurus_id`, `electrical_plug_type`, `licence_plate_code`, `coordinates_of_westernmost_point`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `office_held_by_head_of_government`, `isni`, `quora_topic_id`, `country`, `encyclop\u00e6dia_universalis_id`, `mesh_descriptor_id`, `guardian_topic_id`, `basic_form_of_government`, `musicbrainz_area_id`, `public_holiday`, `has_quality`, `coat_of_arms_image`, `uic_alphabetical_country_code`, `number_of_out_of_school_children`, `continent`, `insee_countries_and_foreign_territories_code`, `diplomatic_relation`, `inception`, `office_held_by_head_of_state`, `commons_gallery`, `legislative_body`, `iso_3166_1_numeric_code`, `nuts_code`, `history_of_topic`, `stw_thesaurus_for_economics_id`, `replaces`, `native_label`, `subreddit`, `located_in_or_next_to_body_of_water`, `capital`, `official_website`, `coat_of_arms`, `demonym`, `age_of_majority`, `national_library_of_israel_id_old`, `openstreetmap_relation_id`, `on_focus_list_of_wikimedia_project`, `wipo_st3`, `coordinates_of_northernmost_point`, `coordinates_of_easternmost_point`, `nkcr_aut_id`, `comic_vine_id`, `mobile_country_code`, `total_fertility_rate`, `maritime_identification_digits`, `us_national_archives_identifier`, `executive_body`, `compulsory_education_minimum_age`, `marriageable_age`, `topics_main_category`, `le_monde_diplomatique_subject_id`, `head_of_state`, `category_of_people_buried_here`, `locator_map_image`, `bbc_things_id`, `geoshape`, `dewey_decimal_classification`, `area`, `ituisoiec_object_identifier`, `head_of_government`, `ioc_country_code`, `member_of`, `fast_id`, `store_norske_leksikon_id`, `unemployment_rate`, `viaf_id`, `railway_traffic_side`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `page_banner`, `category_for_films_shot_at_this_location`, `mains_voltage`, `official_name`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `anthem`, `highest_judicial_authority`, `life_expectancy`, `part_of`, `commons_category`, `top_level_internet_domain`, `shares_border_with`, `instance_of`, `highest_point`, `category_for_people_born_here`, `short_name`, `driving_side`, `uic_numerical_country_code`, `lowest_point`, `brockhaus_enzyklop\u00e4die_online_id`, `ipa_transcription`, `civicus_monitor_country_entry`, `official_language`, `pronunciation_audio`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `country_calling_code`, `freebase_id`, `statoids_id`, `asc_leiden_thesaurus_id`, `library_of_congress_authority_id`, `curlie_id`, `flag`, `coordinate_location`, `fips_10_4_countries_and_regions`, `dagens_nyheter_topic_id`, `described_by_source`, `flag_image`, `iso_3166_1_alpha_2_code`, `maintained_by_wikiproject`, `iab_code`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `language_used`, `whos_on_first_id`, `dr_topic_id`, `world_encyclopedia_of_puppetry_arts_id`, `gran_enciclop\u00e8dia_catalana_id`, `nese_id`, `omegawiki_defined_meaning`, `hds_id`, `treccani_id`, `gs1_country_code`, `culture`, `geonlp_id`, `analysis_policy_observatory_term_id`, `category_for_maps`, `treccanis_dizionario_di_storia_id`, `vat_rate`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `basque_vikidia_id`, `eurovoc_id`, `worldcat_identities_id`, `fandom_article_id`, `nalt_id`, `motto_text`, `open_data_portal`, `kbpedia_id`, `grove_art_online_id`, `gynopedia_id`, `rkd_thesaurus_id`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `bbc_news_topic_id`, `inaturalist_place_id`, `economy_of_topic`, `edition_humboldt_digital_id`, `sapa_id`, `ysa_id`, `yle_topic_id`, `bhcl_uuid`, `tasteatlas_id`, `github_topic`, `uk_parliament_thesaurus_id`, `namuwiki_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `cna_topic_id`, `joconde_location_id`, `zhihu_topic_id`, `idaigazetteer_id`, `encyclopedia_of_the_history_of_ukraine_id`, `armeniapedia_id`, `schoenberg_database_of_manuscripts_place_id`, `the_world_factbook_country_id`, `online_pwn_encyclopedia_id`, `larousse_id`, `colon_classification`, `national_library_of_israel_j9u_id`, `democracy_index`, `image_archive_herder_institute`, `der_spiegel_topic_id`, `gyldendals_teaterleksikon_id`, `museum_digital_place_id`, `wikisimpsons_id`, `krugosvet_article`, `den_store_danske_id`, `urban_electric_transit_country_id`, `biblioth\u00e8que_nationale_de_france_id`, `biblioteca_nacional_de_espa\u00f1a_id`, `hashtag`, `marine_regions_geographic_id`, `named_after`, `postimees_topic_id`, `m49_code`, `s\u00fcddeutsche_zeitung_topic_id`, `idref_id`, `alltrails_trail_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `central_bank`, `gini_coefficient`, `pm20_geo_code`, `obo_gazetteer_id`, `openstreetmap_element`, `happy_planet_index_score`, `different_from`]\n- Table: `part`, Columns: [`label`, `description`, `quora_topic_id`, `viaf_id`, `nkcr_aut_id`, `topics_main_category`, `locator_map_image`, `store_norske_leksikon_id`, `commons_category`, `instance_of`, `has_parts`, `freebase_id`, `coordinate_location`, `worldcat_identities_id`]\n- Table: `parish_union`, Columns: [`label`, `description`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`, `official_website`, `diocese`]\n- Table: `political_border`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `instance_of`, `commons_category`, `coordinate_location`, `country`, `shares_border_with`, `topics_main_category`, `population`, `geonames_id`, `category_of_associated_people`, `viaf_id`, `official_website`, `musicbrainz_area_id`, `located_in_time_zone`, `part_of`, `official_language`, `yso_id`, `image`, `whos_on_first_id`, `freebase_id`, `coat_of_arms_image`, `store_norske_leksikon_id`, `page_banner`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `dewey_decimal_classification`, `twinned_administrative_body`, `country`, `commons_category`, `instance_of`, `coat_of_arms_image`, `image`, `located_in_time_zone`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `page_banner`, `musicbrainz_area_id`, `topics_main_category`, `freebase_id`, `population`, `geonames_id`, `shares_border_with`, `category_of_associated_people`, `official_website`, `finnish_municipality_number`, `legislative_body`, `official_language`, `area`, `yso_id`, `store_norske_leksikon_id`, `archinform_location_id`, `viaf_id`, `whos_on_first_id`, `ysa_id`]\n- Table: `head_of_state`, Columns: [`label`, `description`, `freebase_id`, `religion_or_worldview`, `native_language`, `commons_category`, `member_of_political_party`, `instance_of`, `date_of_birth`, `place_of_birth`, `country_of_citizenship`, `occupation`, `given_name`, `position_held`, `languages_spoken_written_or_signed`, `viaf_id`, `library_of_congress_authority_id`, `idref_id`, `award_received`, `image`, `educated_at`, `family_name`, `spouse`, `gnd_id`, `name_in_native_language`, `isni`, `gran_enciclop\u00e8dia_catalana_id`, `signature`, `gtaa_id`, `residence`, `treccani_id`, `radio_radicale_person_id`, `munzinger_person_id`, `worldcat_identities_id`, `fast_id`, `sex_or_gender`, `candidacy_in_election`, `plwabn_id`, `store_norske_leksikon_id`, `nese_id`, `opensanctions_id`, `genicom_profile_id`, `topics_main_category`, `nkcr_aut_id`]",
        "Response": "Table: `political_border`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `seal_image`, `dewey_decimal_classification`, `topics_main_wikimedia_portal`, `country`, `capital`, `shares_border_with`, `flag_image`, `flag`, `iso_3166_2_code`, `commons_category`, `locator_map_image`, `located_in_time_zone`, `head_of_government`, `openstreetmap_relation_id`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `official_website`, `topics_main_category`, `page_banner`, `curlie_id`, `musicbrainz_area_id`, `instance_of`, `legislative_body`, `freebase_id`, `contains_the_administrative_territorial_entity`, `gnis_id`, `fips_10_4_countries_and_regions`, `inception`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `gnd_id`, `category_for_films_shot_at_this_location`, `category_of_people_buried_here`, `category_of_associated_people`, `office_held_by_head_of_government`, `viaf_id`, `library_of_congress_authority_id`, `population`, `nickname`, `topics_main_template`, `ballotpedia_id`, `described_by_source`, `geography_of_topic`, `encyclop\u00e6dia_britannica_online_id`, `has_seal_badge_or_sigil`, `pronunciation_audio`, `gran_enciclop\u00e8dia_catalana_id`, `area`, `quora_topic_id`, `bbc_things_id`, `yso_id`, `short_name`, `demonym`, `subreddit`, `motto_text`, `highest_point`, `lowest_point`, `history_of_topic`, `elevation_above_sea_level`, `us_national_archives_identifier`, `gacs_id`, `mesh_descriptor_id`, `archives_at`, `official_symbol`, `fips_5_2_alpha_code_us_states`, `fips_5_2_numeric_code_us_states`, `wikimedia_outline`, `water_as_percent_of_area`, `named_after`, `coordinates_of_geographic_center`, `executive_body`, `foundational_text`, `highest_judicial_authority`, `getty_thesaurus_of_geographic_names_id`, `part_of`, `c_span_organization_id`, `native_label`, `idref_id`, `archinform_location_id`, `national_library_of_israel_id_old`, `geoshape`, `wolfram_language_entity_code`, `nkcr_aut_id`, `different_from`, `comic_vine_id`, `maximum_temperature_record`, `loc_and_marc_vocabularies_id`, `language_used`, `anthem`, `whos_on_first_id`, `store_norske_leksikon_id`, `located_in_or_next_to_body_of_water`, `omegawiki_defined_meaning`, `minimum_temperature_record`, `category_for_maps`, `larousse_id`, `treccanis_dizionario_di_storia_id`, `french_vikidia_id`, `english_vikidia_id`, `italian_vikidia_id`, `worldcat_identities_id`, `isni`, `kbpedia_id`, `rkd_thesaurus_id`, `hasc`, `interlingual_index_id`, `the_top_tens_id`, `economy_of_topic`, `google_maps_customer_id`, `tripadvisor_id`, `open_civic_data_division_id`, `google_news_topics_id`, `category_for_the_view_of_the_item`, `github_topic`, `uk_parliament_thesaurus_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `coordinates_of_northernmost_point`, `inaturalist_place_id`, `marriageable_age`, `compulsory_education_maximum_age`, `twitter_topic_id`, `openstreetmap_zoom_level`, `online_pwn_encyclopedia_id`, `wikisimpsons_id`, `related_category`, `den_store_danske_id`, `per_capita_income`, `mean_age`, `number_of_households`, `hashtag`, `national_library_of_israel_j9u_id`, `ringgold_id`, `catholic_encyclopedia_id`)  VALUES ('Mississippi', 'state of the United States of America', 'Seal of Mississippi (2014\u2013present).svg', '2--762', 'Portal:Mississippi', 'United States of America', 'Jackson', 'Louisiana', 'Flag of Mississippi.svg', 'flag of Mississippi', 'US-MS', 'Mississippi (state)', 'Mississippi in United States.svg', 'UTC\u221206:00', 'Tate Reeves', '161943.0', 'United States of America', '33.0', 'http://www.mississippi.gov', 'Category:Mississippi', 'Mississippi banner Wolf River swamp.jpg', 'Regional/North_America/United_States/Mississippi/', '6fddb177-f3fc-4c30-9d49-9c7e949fe0bc', 'U.S. state', 'Mississippi Legislature', '/m/04tgp', 'Adams County', '1779790.0', 'US28', '+1817-12-10T00:00:00Z', 'Category:Births in Mississippi', 'Category:Deaths in Mississippi', '4436296.0', '4039588-1', 'Category:Films shot in Mississippi', 'Category:Burials in Mississippi', 'Category:People from Mississippi', 'Governor of Mississippi', '140657496.0', 'n79138969', 2961279.0, 'The Magnolia State', 'Template:Mississippi', 'Mississippi', 'Armenian Soviet Encyclopedia', 'geography of Mississippi', 'place/Mississippi-state', 'Seal of Mississippi', 'En-us-Mississippi.ogg', '42906.0', 125443.0, 'Mississippi-state-1', '62a31a5b-e8db-41f6-b612-94b59e34a35b', '116860.0', 'MS', 'Mississippian', 'Mississippi', 'Virtute et armis', 'Woodall Mountain', 'Gulf of Mexico', 'history of Mississippi', 91.0, '10045240.0', '8101.0', 'D008922', 'Mississippi Department of Archives and History', 'Northern Mockingbird', 'MS', '28.0', 'outline of Mississippi', 3.109999999999999876, 'Mississippi River', '32.7364', 'Government of Mississippi', 'Constitution of Mississippi', 'Supreme Court of Mississippi', '7007522.0', 'contiguous United States', '19294.0', 'State of Mississippi', '026629631', '6075.0', 'nan', 'Data:Mississippi.map', 'Entity[\"AdministrativeDivision\", {\"Mississippi\", \"UnitedStates\"}]', 'ge130027', 'Mississippi', '4020-56246', 115.0, 'countries/msu', 'Louisiana French', 'Go, Mississippi', '85688579.0', 'Mississippi_-_delstat', 'Gulf of Mexico', '370112.0', -19.0, 'Category:Mississippi maps', 'autre-region/wd/133410', 'mississippi', 'Mississippi_(\u00c9tat)', 'Mississippi', 'Mississippi_(stato)', 'lccn-n79138969', '0000 0004 0427 8210', 'Mississippi-State', '39595.0', 'US.MS', 'i84474', '244.0', 'economy of Mississippi', '7065329228566013658', '28945.0', 'ocd-division/country:us/state:ms', 'CAAqIQgKIhtDQkFTRGdvSUwyMHZNRFIwWjNBU0FtVnVLQUFQAQ', 'Category:Views of Mississippi', 'mississippi', '11704.0', '09126551-n', 'demographics of Mississippi', '35.0', '37.0', 15.0, 17.0, 'nan', '7.0', '3942022.0', '49973.0', 'Category:Mississippi-related lists', 'Mississippi', 25444.0, 37.70000000000000285, 1116649.0, 'Mississippi', '9.870075550834052e+17', '148138.0', '10394a');\nDatabase State:\n- Table: `facet_of`, Columns: [`label`, `description`, `seal_image`, `dewey_decimal_classification`, `topics_main_wikimedia_portal`, `country`, `capital`, `shares_border_with`, `flag_image`, `flag`, `iso_3166_2_code`, `commons_category`, `locator_map_image`, `located_in_time_zone`, `head_of_government`, `openstreetmap_relation_id`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `official_website`, `topics_main_category`, `page_banner`, `curlie_id`, `musicbrainz_area_id`, `instance_of`, `legislative_body`, `freebase_id`, `contains_the_administrative_territorial_entity`, `gnis_id`, `fips_10_4_countries_and_regions`, `inception`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `gnd_id`, `category_for_films_shot_at_this_location`, `category_of_people_buried_here`, `category_of_associated_people`, `office_held_by_head_of_government`, `viaf_id`, `library_of_congress_authority_id`, `population`, `nickname`, `topics_main_template`, `ballotpedia_id`, `described_by_source`, `geography_of_topic`, `encyclop\u00e6dia_britannica_online_id`, `has_seal_badge_or_sigil`, `pronunciation_audio`, `gran_enciclop\u00e8dia_catalana_id`, `area`, `quora_topic_id`, `bbc_things_id`, `yso_id`, `short_name`, `demonym`, `subreddit`, `motto_text`, `highest_point`, `lowest_point`, `history_of_topic`, `elevation_above_sea_level`, `us_national_archives_identifier`, `gacs_id`, `mesh_descriptor_id`, `archives_at`, `official_symbol`, `fips_5_2_alpha_code_us_states`, `fips_5_2_numeric_code_us_states`, `wikimedia_outline`, `water_as_percent_of_area`, `named_after`, `coordinates_of_geographic_center`, `executive_body`, `foundational_text`, `highest_judicial_authority`, `getty_thesaurus_of_geographic_names_id`, `part_of`, `c_span_organization_id`, `native_label`, `idref_id`, `archinform_location_id`, `national_library_of_israel_id_old`, `geoshape`, `wolfram_language_entity_code`, `nkcr_aut_id`, `different_from`, `comic_vine_id`, `maximum_temperature_record`, `loc_and_marc_vocabularies_id`, `language_used`, `anthem`, `whos_on_first_id`, `store_norske_leksikon_id`, `located_in_or_next_to_body_of_water`, `omegawiki_defined_meaning`, `minimum_temperature_record`, `category_for_maps`, `larousse_id`, `treccanis_dizionario_di_storia_id`, `french_vikidia_id`, `english_vikidia_id`, `italian_vikidia_id`, `worldcat_identities_id`, `isni`, `kbpedia_id`, `rkd_thesaurus_id`, `hasc`, `interlingual_index_id`, `the_top_tens_id`, `economy_of_topic`, `google_maps_customer_id`, `tripadvisor_id`, `open_civic_data_division_id`, `google_news_topics_id`, `category_for_the_view_of_the_item`, `github_topic`, `uk_parliament_thesaurus_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `coordinates_of_northernmost_point`, `inaturalist_place_id`, `marriageable_age`, `compulsory_education_maximum_age`, `twitter_topic_id`, `openstreetmap_zoom_level`, `online_pwn_encyclopedia_id`, `wikisimpsons_id`, `related_category`, `den_store_danske_id`, `per_capita_income`, `mean_age`, `number_of_households`, `hashtag`, `national_library_of_israel_j9u_id`, `ringgold_id`, `catholic_encyclopedia_id`]\n- Table: `geography`, Columns: [`label`, `description`, `topics_main_category`, `subclass_of`, `instance_of`]\n- Table: `aspect_of_history`, Columns: [`label`, `description`, `part_of`, `commons_category`, `topics_main_category`, `dewey_decimal_classification`, `instance_of`, `facet_of`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`]",
        "Response": "Table: `us_state`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Driver_ID`, `Name`, `Party`, `Home_city`, `Age`)  VALUES (9, 'Jason Rojas', 'Dem', 'East Hartford', 38);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `driver`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO subjects (case_number, race, gender, last_name, first_name, full_name)  VALUES ('94073V', 'B', 'M', 'Scott', 'Losten', 'Scott, Losten');\nDatabase State:\n- Table: subjects, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: officers, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: incidents, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]",
        "Response": "Table: subjects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('ribose-5-phosphate isomerase A ECL_04240', 'microbial gene found in Enterobacter cloacae subsp. cloacae ATCC 13047', '9126716', 'gene', 'Ribose-5-phosphate isomerase A ECL_04240', 'Enterobacter cloacae subsp. cloacae ATCC 13047', 'reverse strand', '4351788.0', '4351129.0', 'gene', 'ECL_04240');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id_restaurant, street_num, street_name, city)  VALUES (4645, 1420, '3rd ave', 'oakland');\nDatabase State:\n- Table: location, Columns: [id_restaurant, street_num, street_name, city]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (candidate_id, qualification, assessment_date, asessment_outcome_code)  VALUES (121, 'B', '2010-04-17 11:44:34', 'Pass');\nDatabase State:\n- Table: People, Columns: [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]",
        "Response": "Table: Candidate_Assessments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `catalogus_professorum` (`label`, `description`, `instance_of`, `official_website`, `wikidata_property`)  VALUES ('Gutenberg Biographics', 'nan', 'online database', 'http://gutenberg-biographics.ub.uni-mainz.de/home.html', 'Elizabeth II');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `catalogus_professorum`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `citation` (`label`, `description`, `pubmed_id`, `instance_of`, `title`, `published_in`, `volume`, `issue`, `publication_date`, `pages`, `author_name_string`, `doi`, `language_of_work_or_name`)  VALUES ('IL-28, IL-29 and their class II cytokine receptor IL-28R', 'scientific article', '12469119', 'scholarly article', 'IL-28, IL-29 and their class II cytokine receptor IL-28R', 'Nature Immunology', '4', '1.0', '+2003-01-00T00:00:00Z', '63-8', 'Paul Sheppard', '10.1038/NI873', 'English');\nDatabase State:\n- Table: `publishing`, Columns: [`label`, `description`, `instance_of`, `official_website`, `freebase_id`, `issn`, `era_journal_id`, `oclc_control_number`, `scopus_source_id`, `danish_bibliometric_research_indicator_bfi_snocno`, `danish_bibliometric_research_indicator_level`, `publisher`, `iso_4_abbreviation`, `title`, `opencitations_bibliographic_resource_id`, `nlm_unique_id`, `language_of_work_or_name`, `country_of_origin`, `inception`, `uniprot_journal_id`, `jufo_id`, `main_subject`, `crossref_journal_id`, `scilit_journal_id`, `indexed_in_bibliographic_review`, `issn_l`, `openalex_id`, `acnp_journal_id`]\n- Table: `interleukin_20_family_signaling`, Columns: [`label`, `description`, `cites_work`, `instance_of`, `found_in_taxon`, `reactome_id`, `part_of`, `exact_match`, `has_parts`]",
        "Response": "Table: `citation`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION)  VALUES ('ENG', 'English', 'A&SCI', 160, 'DRE 102, Box 223', '1004');\nDatabase State:\n- Table: ENROLL, Columns: [CLASS_CODE, STU_NUM, ENROLL_GRADE]\n- Table: DEPARTMENT, Columns: [DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]\n- Table: PROFESSOR, Columns: [EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]",
        "Response": "Table: DEPARTMENT"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `2016_world_rowing_u23_championships` (`label`, `description`, `instance_of`, `competition_class`, `part_of`, `described_at_url`, `location`, `event_distance`, `follows`, `followed_by`, `point_in_time`, `sport`)  VALUES ('2016 World Rowing U23 Championships \u2013 U23 lightweight women''s single scull', 'rowing event', 'rowing event', 'U23 lightweight women''s single scull', '2016 World Rowing U23 Championships', 'http://www.worldrowing.com/events/2016-world-rowing-under-23-championships/u23-lightweight-womens-single-sculls/', 'Willem-Alexander Baan', 2000.0, '2015 World Rowing U23 Championships \u2013 U23 lightweight women''s single scull', '2017 World Rowing U23 Championships \u2013 U23 lightweight women''s single scull', '+2016-00-00T00:00:00Z', 'rowing');\nDatabase State:\n- Table: `2016_world_rowing_u23_championships`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `part_of`, `described_at_url`, `location`, `event_distance`, `follows`, `followed_by`, `point_in_time`, `sport`]\n- Table: `competition_class`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `short_name`, `sport`, `catalog_code`]\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `part_of`, `described_at_url`, `location`, `event_distance`, `follows`, `point_in_time`, `sport`, `followed_by`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `part_of`, `described_at_url`, `location`, `event_distance`, `follows`, `followed_by`, `point_in_time`, `sport`]",
        "Response": "Table: `2016_world_rowing_u23_championships`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `temperature` (`City_ID`, `Jan`, `Feb`, `Mar`, `Apr`, `Jun`, `Jul`, `Aug`, `Sep`, `Oct`, `Nov`, `Dec`)  VALUES (4, 26.69999999999999929, 27.19999999999999929, 27.80000000000000071, 28.30000000000000071, 30.60000000000000142, 31.10000000000000142, 31.69999999999999929, 31.69999999999999929, 30.60000000000000142, 28.89999999999999858, 27.80000000000000071);\nDatabase State:\n- Table: `hosting_city`, Columns: [`Year`, `Match_ID`, `Host_City`]\n- Table: `match`, Columns: [`Match_ID`, `Date`, `Venue`, `Score`, `Result`, `Competition`]\n- Table: `city`, Columns: [`City_ID`, `City`, `Hanzi`, `Hanyu_Pinyin`, `Regional_Population`, `GDP`]",
        "Response": "Table: `temperature`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (rID)  VALUES (207, 'James Cameron');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Reviewer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, Name, CountryCode, District, Population)  VALUES (451, 'Palho\u00e7a', 'BRA', 'Santa Catarina', 89465);\nDatabase State:\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `book_club` (`book_club_id`, `Year`, `Author_or_Editor`, `Book_Title`, `Publisher`, `Category`, `Result`)  VALUES (8, 1989, 'Judy Grahn', 'Mundane\u04f3 World', 'Crossing Press', 'Lesb. M/SF', 'Nom');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `book_club`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `cell_component`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Cytochrome SDY_3292', 'microbial protein found in Shigella dysenteriae Sd197', 'Q32BL5', 'cytochrome SDY_3292', 'Shigella dysenteriae Sd197', 'integral component of membrane', 'protein', 'YP_404781', 'Protein of unknown function DUF805');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO officers (case_number, race, gender, last_name, first_name, full_name)  VALUES ('203348T', 'W', 'M', 'Borchardt', 'Jeremy', 'Borchardt, Jeremy');\nDatabase State:\n- Table: subjects, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: officers, Columns: [case_number, race, gender, last_name, first_name, full_name]",
        "Response": "Table: officers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO IMG_OBJ (IMG_ID, OBJ_SAMPLE_ID, OBJ_CLASS_ID, X, Y, W, H)  VALUES (2390488, 11, 225, 320, 27, 178, 343);\nDatabase State:\n- Table: IMG_OBJ, Columns: [IMG_ID, OBJ_SAMPLE_ID, OBJ_CLASS_ID, X, Y, W, H]",
        "Response": "Table: IMG_OBJ"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `mountain` (`id`, `name`, `Height`, `Prominence`, `Range`, `Country`)  VALUES (5, 'Jbel Toubkal', 4167.0, 3755.0, 'Toubkal Atlas', 'Morocco');\nDatabase State:\n- Table: `camera_lens`, Columns: [`id`, `brand`, `name`, `focal_length_mm`, `max_aperture`]\n- Table: `mountain`, Columns: [`id`, `name`, `Height`, `Prominence`, `Range`, `Country`]\n- Table: `photos`, Columns: [`id`, `mountain_id`, `color`]",
        "Response": "Table: `mountain`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `shs2_domain_inserted_in_ftsa_protein_family` (`label`, `description`, `uniprot_protein_id`, `refseq_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `cell_component`, `biological_process`, `part_of`, `instance_of`)  VALUES ('Cell division protein FtsA lmo2033', 'microbial protein found in Listeria monocytogenes EGD-e', 'Q8Y5M4', 'NP_465557', 'Listeria monocytogenes EGD-e', 'cell division protein FtsA lmo2033', 'SHS2 domain inserted in FtsA', 'plasma membrane', 'cell cycle', 'Cell division protein FtsA', 'protein');\nDatabase State:\n- Table: `shs2_domain_inserted_in_ftsa_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `refseq_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `cell_component`, `biological_process`, `part_of`, `instance_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`]",
        "Response": "Table: `shs2_domain_inserted_in_ftsa_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `commons_category`, `country`, `coordinate_location`, `shares_border_with`, `instance_of`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `freebase_id`, `population`, `geonames_id`, `official_website`, `image`, `locator_map_image`, `whos_on_first_id`, `viaf_id`, `area`)  VALUES ('Ylitornio', 'municipality in the region of Lapland in Finland', 'Ylitornio', 'Finland', '66.316666666667', '\u00d6vertorne\u00e5 Municipality', 'municipality of Finland', 'Lapland', 'Category:Ylitornio', '/m/02w0bf', 4291.0, '630780.0', 'http://www.ylitornio.fi', 'Ylitornio from Ainiovaara.jpg', 'Ylitornio.sijainti.suomi.2008.svg', '101814491.0', '137359655.0', NULL);\nDatabase State:\n- Table: `survey_marker`, Columns: [`label`, `description`, `instance_of`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `heritage_designation`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `commons_category`, `country`, `coordinate_location`, `shares_border_with`, `instance_of`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `freebase_id`, `population`, `geonames_id`, `official_website`, `image`, `locator_map_image`, `whos_on_first_id`, `viaf_id`, `area`]\n- Table: `political_border`, Columns: [`label`, `description`, `commons_category`, `located_in_the_administrative_territorial_entity`, `country`, `locator_map_image`, `coordinate_location`, `shares_border_with`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `official_website`, `area`, `population`, `inception`, `image`, `whos_on_first_id`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler)  VALUES (598013, 5, 4, 2, 2, 1, 3, 8, 162, 315);\nDatabase State:\n- Table: Batting_Style, Columns: [Batting_Id, Batting_hand]\n- Table: Rolee, Columns: [Role_Id, Role_Desc]\n- Table: Bowling_Style, Columns: [Bowling_Id, Bowling_skill]\n- Table: Extra_Type, Columns: [Extra_Id, Extra_Name]\n- Table: Player_Match, Columns: [Match_Id, Player_Id, Role_Id, Team_Id]\n- Table: Match, Columns: [Match_Id, Team_1, Team_2, Match_Date, Season_Id, Venue_Id, Toss_Winner, Toss_Decide, Win_Type, Win_Margin, Outcome_type, Match_Winner, Man_of_the_Match]\n- Table: Team, Columns: [Team_Id, Team_Name]\n- Table: Batsman_Scored, Columns: [Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No]\n- Table: Win_By, Columns: [Win_Id, Win_Type]\n- Table: Player, Columns: [Player_Id, Player_Name, DOB, Batting_hand, Bowling_skill, Country_Name]\n- Table: Ball_by_Ball, Columns: [Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler]\n- Table: Country, Columns: [Country_Id, Country_Name]\n- Table: Wicket_Taken, Columns: [Match_Id, Over_Id, Ball_Id, Player_Out, Kind_Out, Fielders, Innings_No]\n- Table: Extra_Runs, Columns: [Match_Id, Over_Id, Ball_Id, Extra_Type_Id, Extra_Runs, Innings_No]\n- Table: Umpire, Columns: [Umpire_Id, Umpire_Name, Umpire_Country]",
        "Response": "Table: Ball_by_Ball"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (eid, aid)  VALUES (142519864, 7);\nDatabase State:\n- Table: certificate, Columns: [eid, aid]\n- Table: flight, Columns: [flno, origin, destination, distance, departure_date, arrival_date, price, aid]\n- Table: employee, Columns: [eid, name, salary]\n- Table: aircraft, Columns: [aid, name, distance]",
        "Response": "Table: certificate"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `phone` (`Name`, `Phone_ID`, `Memory_in_G`, `Carrier`, `Price`)  VALUES ('IPhone 6s', 2, 128, 'TMobile', 699.0);\nDatabase State:\n- Table: `market`, Columns: [`Market_ID`, `District`, `Num_of_employees`, `Num_of_shops`, `Ranking`]\n- Table: `phone`, Columns: [`Name`, `Phone_ID`, `Memory_in_G`, `Carrier`, `Price`]\n- Table: `phone_market`, Columns: [`Market_ID`, `Phone_ID`, `Num_of_stock`]",
        "Response": "Table: `phone`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('Glutaminyl-tRNA synthetase NRG857_03070', 'microbial protein found in Escherichia coli O83:H1 str. NRG 857C', 'glutaminyl-tRNA synthetase NRG857_03070', 'A0A0H3EEK9', 'glutaminyl-tRNA aminoacylation', 'nucleotide binding', 'cytoplasm', 'Glutamyl/glutaminyl-tRNA synthetase, class Ib, catalytic domain', 'Escherichia coli O83:H1 str. NRG 857C', 'YP_006118979', 'protein', 'Ribosomal protein L25/Gln-tRNA synthetase, anti-codon-binding domain superfamily', 'protein');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `image`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `glutamyl_glutaminyl_trna_synthetase_class_ib_anti_codon_binding_domain_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]",
        "Response": "Table: `glutamyl_glutaminyl_trna_synthetase_class_ib_anti_codon_binding_domain_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO inspections (business_id, score, date, type)  VALUES (66861, 94, '2016-01-25', 'Routine - Unscheduled');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: inspections"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (event_id, competitor_id, medal_id)  VALUES (23, 95431, 4);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: competitor_event"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `captain` (`Captain_ID`, `Name`, `Ship_ID`, `age`, `Class`, `Rank`)  VALUES (4, 'Lieutenant Montagu Verling', 4, '45', 'Armed schooner', 'Midshipman');\nDatabase State:\n- Table: `captain`, Columns: [`Captain_ID`, `Name`, `Ship_ID`, `age`, `Class`, `Rank`]",
        "Response": "Table: `captain`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Orchestra_ID`, `Orchestra`, `Conductor_ID`, `Record_Company`, `Year_of_Founded`, `Major_Record_Format`)  VALUES (2, 'Columbia Symphony Orchestra', 2, 'Columbia Masterworks', 2009.0, 'CD / LP');\nDatabase State:\n- Table: `show`, Columns: [`Show_ID`, `Performance_ID`, `If_first_show`, `Result`, `Attendance`]\n- Table: `orchestra`, Columns: [`Orchestra_ID`, `Orchestra`, `Conductor_ID`, `Record_Company`, `Year_of_Founded`, `Major_Record_Format`]",
        "Response": "Table: `orchestra`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO student (student_id, f_name, l_name, phone_number, email, intelligence, gpa, type)  VALUES (12, 'Crichton', 'Francescuccio', '(326) 3015233', 'cfrancescucciob@gmail.com', 3, 3.399999999999999912, 'RPG');\nDatabase State:\n- Table: RA, Columns: [student_id, capability, prof_id, salary]\n- Table: registration, Columns: [course_id, student_id, grade, sat]\n- Table: student, Columns: [student_id, f_name, l_name, phone_number, email, intelligence, gpa, type]",
        "Response": "Table: student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO matchs (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('SP1', '2010-10-18', 'Hercules', 'Villarreal', 2, 2, 'D', 2011);\nDatabase State:\n- Table: divisions, Columns: [division, name, country]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EVENTID, REFID, EVENT_DATE, AMOUNT)  VALUES (961698, 101118, '2007-05-03 12:00:00.0', 12.98000000000000042);\nDatabase State:\n- Table: `Sales`, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]\n- Table: mailings3, Columns: [REFID, REF_DATE, RESPONSE]",
        "Response": "Table: `Sales`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`School_ID`, `School`, `Location`, `Founded`, `Affiliation`, `Enrollment`, `Nickname`, `Primary_conference`)  VALUES (2, 'Lebanon Valley College', 'Annville, PA', 1866.0, 'Private/Methodist', 2100.0, 'Flying Dutchmen', 'MAC Commonwealth Conference ( D-III )');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `university`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `wrestler` (`Wrestler_ID`, `Name`, `Reign`, `Days_held`, `Location`, `Event`)  VALUES (10, 'Shinjiro Otani \u00a7', '1', '56', 'Nagoya , Japan', 'Live event');\nDatabase State:\n- Table: `wrestler`, Columns: [`Wrestler_ID`, `Name`, `Reign`, `Days_held`, `Location`, `Event`]\n- Table: `Elimination`, Columns: [`Elimination_ID`, `Wrestler_ID`, `Team`, `Eliminated_By`, `Elimination_Move`, `Time`]",
        "Response": "Table: `wrestler`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (zip_code, alias)  VALUES (60040, 'Highwood');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: alias"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `instance_of`, `part_of`)  VALUES ('Presbytery of Langholm', 'Church of Scotland Presbytery', 'religious administrative entity', 'religious administrative entity', 'Synod of Dumfries');\nDatabase State:\n- Table: `part`, Columns: [`label`, `description`, `part_of`, `subclass_of`]\n- Table: `religious_administrative_entity`, Columns: [`label`, `description`, `subclass_of`, `instance_of`, `part_of`]",
        "Response": "Table: `religious_administrative_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO fielding_outfield (player_id, year, stint, glf, gcf, grf)  VALUES ('jacksjo01', 1911, 1, 0, 47, 100);\nDatabase State:\n- Table: postseason, Columns: [year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]\n- Table: all_star, Columns: [player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]\n- Table: player_award_vote, Columns: [award_id, year, league_id, player_id, points_won, points_max, votes_first]\n- Table: college, Columns: [college_id, name_full, city, state, country]\n- Table: appearances, Columns: [year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]\n- Table: fielding_postseason, Columns: [player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]\n- Table: player_award, Columns: [player_id, tie, notes]\n- Table: batting_postseason, Columns: [year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]\n- Table: park, Columns: [park_id, park_name, park_alias, city, state, country]\n- Table: manager, Columns: [player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]\n- Table: fielding_outfield, Columns: [player_id, year, stint, glf, gcf, grf]\n- Table: manager_award_vote, Columns: [award_id, year, league_id, player_id, points_won, points_max, votes_first]\n- Table: player_college, Columns: [player_id, college_id, year]",
        "Response": "Table: fielding_outfield"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `country`, `located_in_the_administrative_territorial_entity`, `instance_of`, `commons_category`, `image`, `coordinate_location`, `official_website`, `topics_main_category`, `musicbrainz_area_id`, `freebase_id`, `geonames_id`, `population`, `area`, `openstreetmap_relation_id`, `whos_on_first_id`, `shares_border_with`, `locator_map_image`)  VALUES ('Banyoles', 'municipality in Catalonia, Spain', 'Spain', 'Pla de l\u2019Estany', 'municipality of Catalonia', 'Banyoles', 'Aerea estany de banyoles.png', '42.119444444444', 'http://www.banyoles.cat/', 'Category:Banyoles', '07aa7e41-a6e1-41de-a16f-27cfed4078d1', '/m/08q0df', '6534014.0', 20187.0, 11.09999999999999965, '343842.0', '404334589.0', 'Fontcoberta', 'Localitzaci\u00f3 de Banyoles respecte del Pla de l''Estany.svg');\nDatabase State:\n- Table: `physical_location`, Columns: [`label`, `description`, `instance_of`, `coordinate_location`, `commons_category`, `country`, `located_in_the_administrative_territorial_entity`, `image`, `significant_event`]\n- Table: `political_border`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `instance_of`, `freebase_id`, `topics_main_category`, `commons_category`, `official_website`, `area`, `shares_border_with`, `population`, `locator_map_image`, `musicbrainz_area_id`, `geonames_id`, `viaf_id`, `image`, `whos_on_first_id`, `openstreetmap_relation_id`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `delta_aminolevulinic_acid_dehydratase` (`label`, `description`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Delta-aminolevulinic acid dehydratase SF0249', 'microbial protein found in Shigella flexneri 2a str. 301', 'protein', 'delta-aminolevulinic acid dehydratase SF0249', 'P0ACB3', 'nan', 'nan', 'Delta-aminolevulinic acid dehydratase, active site', 'Shigella flexneri 2a str. 301', 'NP_706203', 'protein', 'Delta-aminolevulinic acid dehydratase');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `delta_aminolevulinic_acid_dehydratase`, Columns: [`label`, `description`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `delta_aminolevulinic_acid_dehydratase`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`)  VALUES ('SO - 0007798', 'Online', 'WARE-NMK1003', '6/18/20', '11/24/20', '11/30/20', '12/6/20', 'USD', 19, 31, 107, 27, 1, 0.4000000000000000222, '1,085.40', '510.14');\nDatabase State:\n- Table: `Sales Orders`, Columns: [OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`]\n- Table: Products, Columns: [ProductID, `Product Name`]\n- Table: Regions, Columns: [StateCode, State, Region]",
        "Response": "Table: `Sales Orders`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `marvel_domain_protein_family` (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Proteolipid protein 2a', 'Protein found in Danio rerio', 'Q29RF3', 'plp2a', 'ENSDARP00000154494', 'nan', 'Marvel domain', 'Danio rerio', 'NP_001034924', 'protein', 'Marvel domain, protein family');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `marvel_domain_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Team_ID`, `School_ID`, `Team_Name`, `ACC_Regular_Season`, `ACC_Percent`, `ACC_Home`, `ACC_Road`, `All_Games`, `All_Games_Percent`, `All_Home`, `All_Road`, `All_Neutral`)  VALUES (1, 1, 'North Carolina', '14\u20132', '.875', '6\u20132', '8\u20130', '35\u20132', 0.945999999999999953, '14\u20132', '13\u20130', '9\u20131');\nDatabase State:\n- Table: `university`, Columns: [`School_ID`, `School`, `Location`, `Founded`, `Affiliation`, `Enrollment`, `Nickname`, `Primary_conference`]\n- Table: `basketball_match`, Columns: [`Team_ID`, `School_ID`, `Team_Name`, `ACC_Regular_Season`, `ACC_Percent`, `ACC_Home`, `ACC_Road`, `All_Games`, `All_Games_Percent`, `All_Home`, `All_Road`, `All_Neutral`]",
        "Response": "Table: `basketball_match`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `image`, `commons_category`, `unicode_character`, `instance_of`, `follows`, `followed_by`, `depicts`, `part_of`, `google_knowledge_graph_id`)  VALUES ('seven of spades', 'playing card', 'Cards-7-Spade.svg', '7 of Spades', '\ud83c\udca7', 'playing card', 'six of spades', 'eight of spades', 'spade', 'standard 52-card deck', '/g/120jfckh');\nDatabase State:\n- Table: `french_suited_playing_cards`, Columns: [`label`, `description`, `depicts`, `commons_category`, `part_of`, `unicode_character`, `image`, `instance_of`, `follows`, `followed_by`, `google_knowledge_graph_id`]\n- Table: `follows`, Columns: [`label`, `description`, `image`, `unicode_character`, `instance_of`, `commons_category`, `follows`, `followed_by`, `depicts`, `part_of`, `google_knowledge_graph_id`]\n- Table: `followed_by`, Columns: [`label`, `description`, `image`, `commons_category`, `unicode_character`, `instance_of`, `follows`, `followed_by`, `depicts`, `part_of`, `google_knowledge_graph_id`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (book_id, author_id)  VALUES (5583, 4360);\nDatabase State:\n- Table: author, Columns: [author_id, author_name]\n- Table: book, Columns: [book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id]\n- Table: address, Columns: [address_id, street_number, street_name, city, country_id]\n- Table: customer, Columns: [customer_id, first_name, last_name, email]\n- Table: shipping_method, Columns: [method_id, method_name, cost]\n- Table: order_status, Columns: [status_id, status_value]\n- Table: book_language, Columns: [language_id, language_code, language_name]\n- Table: `cust_order`, Columns: [order_id, order_date, customer_id, shipping_method_id, dest_address_id]\n- Table: `order_history`, Columns: [history_id, order_id, status_id, status_date]\n- Table: book_author, Columns: [book_id, author_id]\n- Table: country, Columns: [country_id, country_name]\n- Table: customer_address, Columns: [customer_id, address_id, status_id]\n- Table: `order_line`, Columns: [line_id, order_id, book_id, price]",
        "Response": "Table: book_author"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `instance_of`, `biological_process`, `refseq_protein_id`, `part_of`)  VALUES ('Regulator SCO3926', 'microbial protein found in Streptomyces coelicolor A3(2)', 'Streptomyces coelicolor A3(2)', 'protein', 'Q9X9U2', 'regulator SCO3926', 'protein', 'cell division', 'NP_628111', 'Sporulation-specific cell division protein SsgB');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('ATP-dependent 6-phosphofructokinase 2 CELE_C50F4.2', 'protein found in Caenorhabditis elegans', 'pfk-1.2', 'Q27483', 'fructose 6-phosphate metabolic process', 'nucleotide binding', 'cytoplasm', 'Phosphofructokinase, conserved site', 'Caenorhabditis elegans', 'NP_505457', 'protein', 'Phosphofructokinase superfamily');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `phosphofructokinase_conserved_site_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `phosphofructokinase_conserved_site_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO PersonFriend (name, friend, year)  VALUES ('Bob', 'Zach', 5);\nDatabase State:\n- Table: Person, Columns: [name, age, city, gender, job]\n- Table: PersonFriend, Columns: [name, friend, year]",
        "Response": "Table: PersonFriend"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO pitching (player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp)  VALUES ('quiseda01', 1987, 1, 'KCA', 'AL', 4, 1, 47, 0, 0, 0, 8, 147, 58, 15, 3, 10, 17, 0.2800000000000000267, 2.759999999999999787, 3, 0, 1, 0, 215, 39, 15, '', '', '');\nDatabase State:\n- Table: home_game, Columns: [year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]\n- Table: player, Columns: [player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]",
        "Response": "Table: pitching"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (date, store_nbr, item_nbr, units)  VALUES ('2012-03-05', 45, 109, 0);\nDatabase State:\n- Table: relation, Columns: [store_nbr, station_nbr]\n- Table: weather, Columns: [station_nbr, date, tmax, tmin, tavg, depart, dewpoint, wetbulb, heat, cool, sunrise, sunset, codesum, snowfall, preciptotal, stnpressure, sealevel, resultspeed, resultdir, avgspeed]\n- Table: sales_in_weather, Columns: [date, store_nbr, item_nbr, units]",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO central_superstore (`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit)  VALUES (1940, 'CA-2014-112809', '2016-08-18', '2016-08-22', 'Standard Class', 'RA-19915', 'Central', 'OFF-ST-10002276', 200.063999999999993, 3, 0.2000000000000000111, 12.50399999999999956);\nDatabase State:\n- Table: west_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]\n- Table: product, Columns: [`Product ID`, `Product Name`, Category, `Sub-Category`, Region]",
        "Response": "Table: central_superstore"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id_restaurant, street_num, street_name, city)  VALUES (3194, 5100, 'el camino real', 'los altos');\nDatabase State:\n- Table: geographic, Columns: [city, county, region]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (5463738, 21, 14400, 356, 861);\nDatabase State:\n- Table: Employees, Columns: [EmployeeID, FirstName, MiddleInitial, LastName]\n- Table: Products, Columns: [ProductID, Name, Price]\n- Table: Customers, Columns: [CustomerID, FirstName, MiddleInitial, LastName]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `game` (`stadium_id`, `id`, `Season`, `Date`, `Home_team`, `Away_team`, `Score`, `Competition`)  VALUES (4, 16, 2012, '9 August 2012', 'Pakhtakor', 'Bunyodkor', '1\u20131', 'League');\nDatabase State:\n- Table: `injury_accident`, Columns: [`game_id`, `id`, `Player`, `Injury`, `Number_of_matches`, `Source`]\n- Table: `game`, Columns: [`stadium_id`, `id`, `Season`, `Date`, `Home_team`, `Away_team`, `Score`, `Competition`]\n- Table: `stadium`, Columns: [`id`, `name`, `Home_Games`, `Average_Attendance`, `Total_Attendance`, `Capacity_Percentage`]",
        "Response": "Table: `game`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Race_ID`, `Name`, `Class`, `Date`, `Track_ID`)  VALUES (3, 'Mexico City 250', 'DP/GT', 'April 19', '2');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `race`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID)  VALUES ('335-55-5533', 'Jones', 'Holly', '4/8/86', 'US$65,000.00', 'F', 'Good', 2, 5);\nDatabase State:\n- Table: location, Columns: [locationID, locationcity, address, state, zipcode, officephone]\n- Table: position, Columns: [positionID, positiontitle, educationrequired, minsalary, maxsalary]\n- Table: employee, Columns: [ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Rating (rID)  VALUES (204, 101, 3, '2011-01-09');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Rating"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country)  VALUES (77, 'The Big Cheese', 'Liz Nixon', '89 Jefferson Way Suite 2', 'Portland', '97201', 'USA');\nDatabase State:\n- Table: Suppliers, Columns: [SupplierID, SupplierName, ContactName, Address, City, PostalCode, Country, Phone]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Product_ID, Product_Type_Code, Product_Name, Product_Price)  VALUES (1, 'Books', 'Business Policy', 1336.259999999999991);\nDatabase State:\n- Table: Products, Columns: [Product_ID, Product_Type_Code, Product_Name, Product_Price]\n- Table: Events, Columns: [Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID]\n- Table: Assets_in_Events, Columns: [Asset_ID, Event_ID]\n- Table: Addresses, Columns: [Address_ID, address_details]\n- Table: Parties_in_Events, Columns: [Party_ID, Event_ID, Role_Code]\n- Table: Locations, Columns: [Location_ID, Other_Details]\n- Table: Channels, Columns: [Channel_ID, Other_Details]\n- Table: Agreements, Columns: [Document_ID, Event_ID]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Person (person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname)  VALUES ('nm0318487', 'Peter Giles', '1971-02-15', NULL, 'Vancouver', 'British Columbia', 'Canada', 1.879999999999999894, NULL);\nDatabase State:\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Person, Columns: [person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Credit, Columns: [episode_id, person_id, category, role, credited]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, series, episode_id, person_id, role, result]",
        "Response": "Table: Person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `temperature` (`City_ID`, `Jan`, `Feb`, `Mar`, `Apr`, `Jun`, `Jul`, `Aug`, `Sep`, `Oct`, `Nov`, `Dec`)  VALUES (6, 17.19999999999999929, 17.19999999999999929, 18.30000000000000071, 18.89999999999999857, 20.60000000000000143, 21.69999999999999929, 21.69999999999999929, 21.10000000000000143, 20.60000000000000143, 20.0, 18.30000000000000071);\nDatabase State:\n- Table: `temperature`, Columns: [`City_ID`, `Jan`, `Feb`, `Mar`, `Apr`, `Jun`, `Jul`, `Aug`, `Sep`, `Oct`, `Nov`, `Dec`]\n- Table: `match`, Columns: [`Match_ID`, `Date`, `Venue`, `Score`, `Result`, `Competition`]",
        "Response": "Table: `temperature`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Book_ID`, `Title`, `Issues`, `Writer`)  VALUES (9, 'Michael Moorcock''s Multiverse', 12.0, 'Michael Moorcock');\nDatabase State:\n- Table: `book`, Columns: [`Book_ID`, `Title`, `Issues`, `Writer`]",
        "Response": "Table: `book`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)  VALUES (7, 8, 'PPT', '1993-10-07 02:33:04', '1975-07-16 04:52:10', '');\nDatabase State:\n- Table: Paragraphs, Columns: [Paragraph_ID, Document_ID, Paragraph_Text, Other_Details]\n- Table: Templates, Columns: [Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details]\n- Table: Ref_Template_Types, Columns: [Template_Type_Code, Template_Type_Description]",
        "Response": "Table: Templates"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (customer_id, first_name, last_name, email)  VALUES (1608, 'Rachael', 'Ruprecht', 'rruprechtgv@privacy.gov.au');\nDatabase State:\n- Table: book_author, Columns: [book_id, author_id]",
        "Response": "Table: customer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `physical_location` (`label`, `description`, `great_russian_encyclopedia_online_id`, `participant_in`, `coordinates_of_southernmost_point`, `category_for_films_shot_at_this_location`, `gnd_id`, `category_of_associated_people`, `emergency_phone_number`, `electrical_plug_type`, `licence_plate_code`, `babelnet_id`, `office_held_by_head_of_government`, `gini_coefficient`, `curlie_id`, `native_label`, `musicbrainz_area_id`, `public_holiday`, `insee_countries_and_foreign_territories_code`, `diplomatic_relation`, `flag_image`, `commons_gallery`, `civicus_monitor_country_entry`, `history_of_topic`, `capital`, `subreddit`, `openstreetmap_relation_id`, `mobile_country_code`, `nkcr_aut_id`, `category_of_people_buried_here`, `geoshape`, `coordinates_of_easternmost_point`, `demonym`, `le_monde_diplomatique_subject_id`, `fast_id`, `life_expectancy`, `member_of`, `unemployment_rate`, `railway_traffic_side`, `viaf_id`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `office_held_by_head_of_state`, `commons_category`, `shares_border_with`, `nalt_id`, `iso_3166_1_numeric_code`, `coordinates_of_westernmost_point`, `country_calling_code`, `stw_thesaurus_for_economics_id`, `statoids_id`, `driving_side`, `flag`, `fips_10_4_countries_and_regions`, `dagens_nyheter_topic_id`, `isni`, `nese_id`, `maritime_identification_digits`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `geonames_id`, `unicode_character`, `unesco_thesaurus_id`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `quora_topic_id`, `country`, `mesh_descriptor_id`, `guardian_topic_id`, `basic_form_of_government`, `highest_judicial_authority`, `ituisoiec_object_identifier`, `legislative_body`, `freebase_id`, `official_language`, `replaces`, `continent`, `coat_of_arms`, `age_of_majority`, `national_library_of_israel_id_old`, `on_focus_list_of_wikimedia_project`, `wipo_st3`, `coordinates_of_northernmost_point`, `has_quality`, `iso_3166_1_alpha_2_code`, `total_fertility_rate`, `area`, `compulsory_education_minimum_age`, `central_bank`, `topics_main_category`, `biblioth\u00e8que_nationale_de_france_id`, `locator_map_image`, `bbc_things_id`, `head_of_government`, `ioc_country_code`, `official_name`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `page_banner`, `m49_code`, `mains_voltage`, `executive_body`, `anthem`, `inception`, `top_level_internet_domain`, `instance_of`, `highest_point`, `category_for_people_born_here`, `short_name`, `lowest_point`, `idref_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `library_of_congress_authority_id`, `median_income`, `coordinate_location`, `language_used`, `described_by_source`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `asc_leiden_thesaurus_id`, `world_encyclopedia_of_puppetry_arts_id`, `iab_code`, `whos_on_first_id`, `orthodox_encyclopedia_id`, `the_top_tens_id`, `dr_topic_id`, `treccanis_dizionario_di_storia_id`, `spoken_text_audio`, `part_of`, `inaturalist_place_id`, `omegawiki_defined_meaning`, `hds_id`, `gs1_country_code`, `culture`, `geonlp_id`, `category_for_maps`, `analysis_policy_observatory_term_id`, `vat_rate`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `italian_vikidia_id`, `pronunciation_audio`, `eurovoc_id`, `worldcat_identities_id`, `open_data_portal`, `kbpedia_id`, `grove_art_online_id`, `rkd_thesaurus_id`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `economy_of_topic`, `edition_humboldt_digital_id`, `sapa_id`, `bhcl_uuid`, `tasteatlas_id`, `github_topic`, `uk_parliament_thesaurus_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `\u00e1vvir_topic_id`, `zhihu_topic_id`, `joconde_location_id`, `joconde_discovery_id`, `idaigazetteer_id`, `ysa_id`, `obo_gazetteer_id`, `encyclopedia_of_the_history_of_ukraine_id`, `encyclopedia_of_modern_ukraine_id`, `krugosvet_article`, `store_norske_leksikon_id`, `den_store_danske_id`, `gran_enciclop\u00e8dia_catalana_id`, `larousse_id`, `treccani_id`, `schoenberg_database_of_manuscripts_place_id`, `dewey_decimal_classification`, `official_website`, `the_world_factbook_country_id`, `national_library_of_israel_j9u_id`, `democracy_index`, `online_pwn_encyclopedia_id`, `namuwiki_id`, `der_spiegel_topic_id`, `google_arts_culture_entity_id`, `yle_topic_id`, `wikisimpsons_id`, `urban_electric_transit_country_id`, `coat_of_arms_image`, `postimees_topic_id`, `s\u00fcddeutsche_zeitung_topic_id`, `head_of_state`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `hashtag`, `image`, `pm20_geo_code`, `openstreetmap_element`, `happy_planet_index_score`, `new_york_times_topic_id`, `comic_vine_id`, `located_in_or_next_to_body_of_water`, `motto_text`, `marine_regions_geographic_id`, `us_national_archives_identifier`, `named_after`, `brockhaus_enzyklop\u00e4die_online_id`, `bbc_news_topic_id`, `colon_classification`, `gyldendals_teaterleksikon_id`, `museum_digital_place_id`, `personality_database_profile_id`, `alltrails_trail_id`, `reddit_topic_id`, `golden_id`)  VALUES ('Germany', 'country in Central Europe', '2354371', 'G4 nations', '47.2700279', 'Category:Films shot in Germany', '4011882-4', 'Category:German people', '112', 'Schuko', 'D', '00026684n', 'Federal Chancellor of Germany', 31.69999999999999929, 'Regional/Europe/Germany/', 'Bundesrepublik Deutschland', '85752fda-13c4-31a3-bee5-0e5cb1f51dad', 'German Unity Day', '99109.0', 'Yemen', 'Flag of Germany.svg', 'Deutschland', 'germany', 'history of Germany', 'Berlin', 'deutschland', '51477', '262', 'ge135889', 'Category:Burials in Germany', 'Data:Germany.map', '51.27279981', 'Deutscher', 'pays/allemagne', '1210272.0', 80.79999999999999716, 'World Trade Organization', 5.0, 'right', '189116956', 'UTC+01:00', 'Category:Deaths in Germany', '105087', 'president of Germany', 'Germany', 'Czech Republic', '15494.0', '276', '51.05110016', '49', '18012-3', 'ude', 'right', 'flag of Germany', 'GM', 'tyskland', '0000 0001 2285 4945', 'tyskland', '211', 83149300.0, '7000084', 'Portal:Germany', 'outline of Germany', '561571', 'euro', '2921044', '\ud83c\udde9\ud83c\uddea', 'concept904', 'geography of Germany', 'DEU', 'Germany', 'Germany', 'D005858', 'world/germany', 'federal parliamentary republic', 'Federal Constitutional Court', '2.16.276', 'Bundesrat', '/m/0345h', 'German', 'West Germany', 'Europe', 'coat of arms of Germany', 18.0, '981369', 'Wikipedia:List of articles all languages should have', 'DE', '55.0584', 'free country', 'DE', 1.389999999999999903, 357587.7700000000186, 5.0, 'Deutsche Bundesbank', 'Category:Germany', '12205186t', 'Germany (orthographic projection).svg', '2e3befc0-e70a-41c7-b6cb-2f8f0d69a7db', 'Olaf Scholz', 'GER', 'Bundesrepublik Deutschland', '601', '2979', 'place/Germany', '\u00d6tlingen - Panoramaansicht klein banner.jpg', '276', 230.0, 'federal level of Germany', 'Das Lied der Deutschen', '+1990-10-03T00:00:00Z', '.de', 'sovereign state', 'Zugspitze', 'Category:Births in Germany', 'Deutschland', 'Neuendorf-Sachsenbande', '30685435.0', 'Baden-W\u00fcrttemberg', 'D', 'n80125931', 33333.0, '51.0', 'Swabian', 'Ott\u016fv slovn\u00edk nau\u010dn\u00fd', 'Deutschland', 'countries/gw', '294913572', 'germany', '1300', '85633111', '529087.0', 'nan', 'tyskland', 'germania', 'nan', 'Western Europe', '7207', '7118', '3352', '400-440', 'culture of Germany', 'VwiQvi', 'Category:Maps of Germany', '3002', 19.0, 'Allemagne', 'Germany', 'Alemania', 'Germania', 'De-Deutschland.ogg', '1318', 'lccn-n95056124', 'GovData', 'Germany', 'nan', '456', 'i82954', '11122', 'economy of Germany', 'H0005517', 'p/a7cbf121-4ac8-4cbd-af7d-4d6d25cd7efb', '2bde846d-48ca-4ac0-880c-91f4fe24c210', 'germany', 'deutschland', '10438', '08784821-n', 'demographics of Germany', 'duiska', '19554996', 'T84-600', 'T115-306', '2044274.0', 'Y105087', '2646.0', 'Nimechchyna', '72433.0', 'strany_mira/GERMANIYA.html', 'Tyskland', 'Tyskland', '220737', 'pays/wd/104884', 'germania', '66', 'nan', 'https://verwaltung.bund.de', 'nan', '987007559778705171', 8.669999999999999929, '4169110', '\ub3c5\uc77c', 'deutschland', 'm0345h', '18-177448', '21469', '10', 'Coat of arms of Germany.svg', '1865', 'Deutschland', 'Frank-Walter Steinmeier', 0.941999999999999949, 'geo/5954BE73-910D-4ABC-96C2-6781831F6043', 'Q22', 'Deutschland', 'Aerial view of Berlin (32881394137).jpg', 'A10', 'node/1683325355', 52.70000000000000284, 'destination/germany', '4020-55777', 'Baltic Sea', 'Einigkeit und Recht und Freiheit', '2101.0', '10044480.0', 'Germania', 'deutschland', 'c77jz3md4rdt', 'SG--55', 'Tyskland', '209.0', '50643.0', 'germany', 'germany', 'nan');\nDatabase State:\n- Table: `geography`, Columns: [`label`, `description`, `commons_category`, `topics_main_category`, `subclass_of`, `quora_topic_id`, `instance_of`, `country`, `store_norske_leksikon_id`, `related_category`, `facet_of`]\n- Table: `aspect_of_history`, Columns: [`label`, `description`, `commons_category`, `topics_main_category`, `instance_of`, `facet_of`, `encyclop\u00e6dia_universalis_id`, `encyclop\u00e6dia_britannica_online_id`, `related_category`, `on_focus_list_of_wikimedia_project`]\n- Table: `wikimedia_category`, Columns: [`label`, `description`, `commons_category`, `instance_of`, `category_combines_topics`, `category_contains`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `commons_category`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `instance_of`, `freebase_id`, `geonames_id`, `whos_on_first_id`, `topics_main_category`, `official_website`, `locator_map_image`, `image`, `area`, `population`]\n- Table: `country`, Columns: [`label`, `description`, `great_russian_encyclopedia_online_id`, `participant_in`, `coordinates_of_southernmost_point`, `category_for_films_shot_at_this_location`, `gnd_id`, `category_of_associated_people`, `emergency_phone_number`, `electrical_plug_type`, `licence_plate_code`, `babelnet_id`, `office_held_by_head_of_government`, `gini_coefficient`, `curlie_id`, `native_label`, `musicbrainz_area_id`, `public_holiday`, `insee_countries_and_foreign_territories_code`, `diplomatic_relation`, `flag_image`, `commons_gallery`, `civicus_monitor_country_entry`, `history_of_topic`, `capital`, `subreddit`, `openstreetmap_relation_id`, `mobile_country_code`, `nkcr_aut_id`, `category_of_people_buried_here`, `geoshape`, `coordinates_of_easternmost_point`, `demonym`, `le_monde_diplomatique_subject_id`, `fast_id`, `life_expectancy`, `member_of`, `unemployment_rate`, `railway_traffic_side`, `viaf_id`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `office_held_by_head_of_state`, `commons_category`, `shares_border_with`, `nalt_id`, `iso_3166_1_numeric_code`, `coordinates_of_westernmost_point`, `country_calling_code`, `stw_thesaurus_for_economics_id`, `statoids_id`, `driving_side`, `flag`, `fips_10_4_countries_and_regions`, `dagens_nyheter_topic_id`, `isni`, `nese_id`, `maritime_identification_digits`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `geonames_id`, `unicode_character`, `unesco_thesaurus_id`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `quora_topic_id`, `country`, `mesh_descriptor_id`, `guardian_topic_id`, `basic_form_of_government`, `highest_judicial_authority`, `ituisoiec_object_identifier`, `legislative_body`, `freebase_id`, `official_language`, `replaces`, `continent`, `coat_of_arms`, `age_of_majority`, `national_library_of_israel_id_old`, `on_focus_list_of_wikimedia_project`, `wipo_st3`, `coordinates_of_northernmost_point`, `has_quality`, `iso_3166_1_alpha_2_code`, `total_fertility_rate`, `area`, `compulsory_education_minimum_age`, `central_bank`, `topics_main_category`, `biblioth\u00e8que_nationale_de_france_id`, `locator_map_image`, `bbc_things_id`, `head_of_government`, `ioc_country_code`, `official_name`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `page_banner`, `m49_code`, `mains_voltage`, `executive_body`, `anthem`, `inception`, `top_level_internet_domain`, `instance_of`, `highest_point`, `category_for_people_born_here`, `short_name`, `lowest_point`, `idref_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `library_of_congress_authority_id`, `median_income`, `coordinate_location`, `language_used`, `described_by_source`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `asc_leiden_thesaurus_id`, `world_encyclopedia_of_puppetry_arts_id`, `iab_code`, `whos_on_first_id`, `orthodox_encyclopedia_id`, `the_top_tens_id`, `dr_topic_id`, `treccanis_dizionario_di_storia_id`, `spoken_text_audio`, `part_of`, `inaturalist_place_id`, `omegawiki_defined_meaning`, `hds_id`, `gs1_country_code`, `culture`, `geonlp_id`, `category_for_maps`, `analysis_policy_observatory_term_id`, `vat_rate`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `italian_vikidia_id`, `pronunciation_audio`, `eurovoc_id`, `worldcat_identities_id`, `open_data_portal`, `kbpedia_id`, `grove_art_online_id`, `rkd_thesaurus_id`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `economy_of_topic`, `edition_humboldt_digital_id`, `sapa_id`, `bhcl_uuid`, `tasteatlas_id`, `github_topic`, `uk_parliament_thesaurus_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `\u00e1vvir_topic_id`, `zhihu_topic_id`, `joconde_location_id`, `joconde_discovery_id`, `idaigazetteer_id`, `ysa_id`, `obo_gazetteer_id`, `encyclopedia_of_the_history_of_ukraine_id`, `encyclopedia_of_modern_ukraine_id`, `krugosvet_article`, `store_norske_leksikon_id`, `den_store_danske_id`, `gran_enciclop\u00e8dia_catalana_id`, `larousse_id`, `treccani_id`, `schoenberg_database_of_manuscripts_place_id`, `dewey_decimal_classification`, `official_website`, `the_world_factbook_country_id`, `national_library_of_israel_j9u_id`, `democracy_index`, `online_pwn_encyclopedia_id`, `namuwiki_id`, `der_spiegel_topic_id`, `google_arts_culture_entity_id`, `yle_topic_id`, `wikisimpsons_id`, `urban_electric_transit_country_id`, `coat_of_arms_image`, `postimees_topic_id`, `s\u00fcddeutsche_zeitung_topic_id`, `head_of_state`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `hashtag`, `image`, `pm20_geo_code`, `openstreetmap_element`, `happy_planet_index_score`, `new_york_times_topic_id`, `comic_vine_id`, `located_in_or_next_to_body_of_water`, `motto_text`, `marine_regions_geographic_id`, `us_national_archives_identifier`, `named_after`, `brockhaus_enzyklop\u00e4die_online_id`, `bbc_news_topic_id`, `colon_classification`, `gyldendals_teaterleksikon_id`, `museum_digital_place_id`, `personality_database_profile_id`, `alltrails_trail_id`, `reddit_topic_id`, `golden_id`]\n- Table: `animal_theme_park`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `official_website`, `located_in_the_administrative_territorial_entity`, `commons_category`, `inception`, `image`]\n- Table: `physical_location`, Columns: [`label`, `description`, `great_russian_encyclopedia_online_id`, `participant_in`, `coordinates_of_southernmost_point`, `category_for_films_shot_at_this_location`, `gnd_id`, `category_of_associated_people`, `emergency_phone_number`, `electrical_plug_type`, `licence_plate_code`, `babelnet_id`, `office_held_by_head_of_government`, `gini_coefficient`, `curlie_id`, `native_label`, `musicbrainz_area_id`, `public_holiday`, `insee_countries_and_foreign_territories_code`, `diplomatic_relation`, `flag_image`, `commons_gallery`, `civicus_monitor_country_entry`, `history_of_topic`, `capital`, `subreddit`, `openstreetmap_relation_id`, `mobile_country_code`, `nkcr_aut_id`, `category_of_people_buried_here`, `geoshape`, `coordinates_of_easternmost_point`, `demonym`, `le_monde_diplomatique_subject_id`, `fast_id`, `life_expectancy`, `member_of`, `unemployment_rate`, `railway_traffic_side`, `viaf_id`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `office_held_by_head_of_state`, `commons_category`, `shares_border_with`, `nalt_id`, `iso_3166_1_numeric_code`, `coordinates_of_westernmost_point`, `country_calling_code`, `stw_thesaurus_for_economics_id`, `statoids_id`, `driving_side`, `flag`, `fips_10_4_countries_and_regions`, `dagens_nyheter_topic_id`, `isni`, `nese_id`, `maritime_identification_digits`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `geonames_id`, `unicode_character`, `unesco_thesaurus_id`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `quora_topic_id`, `country`, `mesh_descriptor_id`, `guardian_topic_id`, `basic_form_of_government`, `highest_judicial_authority`, `ituisoiec_object_identifier`, `legislative_body`, `freebase_id`, `official_language`, `replaces`, `continent`, `coat_of_arms`, `age_of_majority`, `national_library_of_israel_id_old`, `on_focus_list_of_wikimedia_project`, `wipo_st3`, `coordinates_of_northernmost_point`, `has_quality`, `iso_3166_1_alpha_2_code`, `total_fertility_rate`, `area`, `compulsory_education_minimum_age`, `central_bank`, `topics_main_category`, `biblioth\u00e8que_nationale_de_france_id`, `locator_map_image`, `bbc_things_id`, `head_of_government`, `ioc_country_code`, `official_name`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `page_banner`, `m49_code`, `mains_voltage`, `executive_body`, `anthem`, `inception`, `top_level_internet_domain`, `instance_of`, `highest_point`, `category_for_people_born_here`, `short_name`, `lowest_point`, `idref_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `library_of_congress_authority_id`, `median_income`, `coordinate_location`, `language_used`, `described_by_source`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `asc_leiden_thesaurus_id`, `world_encyclopedia_of_puppetry_arts_id`, `iab_code`, `whos_on_first_id`, `orthodox_encyclopedia_id`, `the_top_tens_id`, `dr_topic_id`, `treccanis_dizionario_di_storia_id`, `spoken_text_audio`, `part_of`, `inaturalist_place_id`, `omegawiki_defined_meaning`, `hds_id`, `gs1_country_code`, `culture`, `geonlp_id`, `category_for_maps`, `analysis_policy_observatory_term_id`, `vat_rate`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `italian_vikidia_id`, `pronunciation_audio`, `eurovoc_id`, `worldcat_identities_id`, `open_data_portal`, `kbpedia_id`, `grove_art_online_id`, `rkd_thesaurus_id`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `economy_of_topic`, `edition_humboldt_digital_id`, `sapa_id`, `bhcl_uuid`, `tasteatlas_id`, `github_topic`, `uk_parliament_thesaurus_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `\u00e1vvir_topic_id`, `zhihu_topic_id`, `joconde_location_id`, `joconde_discovery_id`, `idaigazetteer_id`, `ysa_id`, `obo_gazetteer_id`, `encyclopedia_of_the_history_of_ukraine_id`, `encyclopedia_of_modern_ukraine_id`, `krugosvet_article`, `store_norske_leksikon_id`, `den_store_danske_id`, `gran_enciclop\u00e8dia_catalana_id`, `larousse_id`, `treccani_id`, `schoenberg_database_of_manuscripts_place_id`, `dewey_decimal_classification`, `official_website`, `the_world_factbook_country_id`, `national_library_of_israel_j9u_id`, `democracy_index`, `online_pwn_encyclopedia_id`, `namuwiki_id`, `der_spiegel_topic_id`, `google_arts_culture_entity_id`, `yle_topic_id`, `wikisimpsons_id`, `urban_electric_transit_country_id`, `coat_of_arms_image`, `postimees_topic_id`, `s\u00fcddeutsche_zeitung_topic_id`, `head_of_state`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `hashtag`, `image`, `pm20_geo_code`, `openstreetmap_element`, `happy_planet_index_score`, `new_york_times_topic_id`, `comic_vine_id`, `located_in_or_next_to_body_of_water`, `motto_text`, `marine_regions_geographic_id`, `us_national_archives_identifier`, `named_after`, `brockhaus_enzyklop\u00e4die_online_id`, `bbc_news_topic_id`, `colon_classification`, `gyldendals_teaterleksikon_id`, `museum_digital_place_id`, `personality_database_profile_id`, `alltrails_trail_id`, `reddit_topic_id`, `golden_id`]\n- Table: `economy_of_region`, Columns: [`label`, `description`, `commons_category`, `topics_main_category`, `instance_of`, `quora_topic_id`, `babelnet_id`, `country`, `location`, `subclass_of`, `total_reserves`, `inflation_rate`, `nominal_gdp`, `nominal_gdp_per_capita`, `ppp_gdp_per_capita`, `gdp_ppp`, `real_gdp_growth_rate`, `store_norske_leksikon_id`, `related_category`]\n- Table: `facet_of`, Columns: [`label`, `description`, `great_russian_encyclopedia_online_id`, `participant_in`, `coordinates_of_southernmost_point`, `category_for_films_shot_at_this_location`, `gnd_id`, `category_of_associated_people`, `emergency_phone_number`, `electrical_plug_type`, `licence_plate_code`, `babelnet_id`, `office_held_by_head_of_government`, `gini_coefficient`, `curlie_id`, `native_label`, `musicbrainz_area_id`, `public_holiday`, `insee_countries_and_foreign_territories_code`, `diplomatic_relation`, `flag_image`, `commons_gallery`, `civicus_monitor_country_entry`, `history_of_topic`, `capital`, `subreddit`, `openstreetmap_relation_id`, `mobile_country_code`, `nkcr_aut_id`, `category_of_people_buried_here`, `geoshape`, `coordinates_of_easternmost_point`, `demonym`, `le_monde_diplomatique_subject_id`, `fast_id`, `life_expectancy`, `member_of`, `unemployment_rate`, `railway_traffic_side`, `viaf_id`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `office_held_by_head_of_state`, `commons_category`, `shares_border_with`, `nalt_id`, `iso_3166_1_numeric_code`, `coordinates_of_westernmost_point`, `country_calling_code`, `stw_thesaurus_for_economics_id`, `statoids_id`, `driving_side`, `flag`, `fips_10_4_countries_and_regions`, `dagens_nyheter_topic_id`, `isni`, `nese_id`, `maritime_identification_digits`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `geonames_id`, `unicode_character`, `unesco_thesaurus_id`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `quora_topic_id`, `country`, `mesh_descriptor_id`, `guardian_topic_id`, `basic_form_of_government`, `highest_judicial_authority`, `ituisoiec_object_identifier`, `legislative_body`, `freebase_id`, `official_language`, `replaces`, `continent`, `coat_of_arms`, `age_of_majority`, `national_library_of_israel_id_old`, `on_focus_list_of_wikimedia_project`, `wipo_st3`, `coordinates_of_northernmost_point`, `has_quality`, `iso_3166_1_alpha_2_code`, `total_fertility_rate`, `area`, `compulsory_education_minimum_age`, `central_bank`, `topics_main_category`, `biblioth\u00e8que_nationale_de_france_id`, `locator_map_image`, `bbc_things_id`, `head_of_government`, `ioc_country_code`, `official_name`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `page_banner`, `m49_code`, `mains_voltage`, `executive_body`, `anthem`, `inception`, `top_level_internet_domain`, `instance_of`, `highest_point`, `category_for_people_born_here`, `short_name`, `lowest_point`, `idref_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `library_of_congress_authority_id`, `median_income`, `coordinate_location`, `language_used`, `described_by_source`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `asc_leiden_thesaurus_id`, `world_encyclopedia_of_puppetry_arts_id`, `iab_code`, `whos_on_first_id`, `orthodox_encyclopedia_id`, `the_top_tens_id`, `dr_topic_id`, `treccanis_dizionario_di_storia_id`, `spoken_text_audio`, `part_of`, `inaturalist_place_id`, `omegawiki_defined_meaning`, `hds_id`, `gs1_country_code`, `culture`, `geonlp_id`, `category_for_maps`, `analysis_policy_observatory_term_id`, `vat_rate`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `italian_vikidia_id`, `pronunciation_audio`, `eurovoc_id`, `worldcat_identities_id`, `open_data_portal`, `kbpedia_id`, `grove_art_online_id`, `rkd_thesaurus_id`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `economy_of_topic`, `edition_humboldt_digital_id`, `sapa_id`, `bhcl_uuid`, `tasteatlas_id`, `github_topic`, `uk_parliament_thesaurus_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `\u00e1vvir_topic_id`, `zhihu_topic_id`, `joconde_location_id`, `joconde_discovery_id`, `idaigazetteer_id`, `ysa_id`, `obo_gazetteer_id`, `encyclopedia_of_the_history_of_ukraine_id`, `encyclopedia_of_modern_ukraine_id`, `krugosvet_article`, `store_norske_leksikon_id`, `den_store_danske_id`, `gran_enciclop\u00e8dia_catalana_id`, `larousse_id`, `treccani_id`, `schoenberg_database_of_manuscripts_place_id`, `dewey_decimal_classification`, `official_website`, `the_world_factbook_country_id`, `national_library_of_israel_j9u_id`, `democracy_index`, `online_pwn_encyclopedia_id`, `namuwiki_id`, `der_spiegel_topic_id`, `google_arts_culture_entity_id`, `yle_topic_id`, `wikisimpsons_id`, `urban_electric_transit_country_id`, `coat_of_arms_image`, `postimees_topic_id`, `s\u00fcddeutsche_zeitung_topic_id`, `head_of_state`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `hashtag`, `image`, `pm20_geo_code`, `openstreetmap_element`, `happy_planet_index_score`, `new_york_times_topic_id`, `comic_vine_id`, `located_in_or_next_to_body_of_water`, `motto_text`, `marine_regions_geographic_id`, `us_national_archives_identifier`, `named_after`, `brockhaus_enzyklop\u00e4die_online_id`, `bbc_news_topic_id`, `colon_classification`, `gyldendals_teaterleksikon_id`, `museum_digital_place_id`, `personality_database_profile_id`, `alltrails_trail_id`, `reddit_topic_id`, `golden_id`]",
        "Response": "Table: `physical_location`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `technician` (`technician_id`, `Name`, `Team`, `Starting_Year`, `Age`)  VALUES (2.0, 'John Brown', 'NYY', 2013.0, 36);\nDatabase State:\n- Table: `repair_assignment`, Columns: [`technician_id`, `repair_ID`, `Machine_ID`]\n- Table: `repair`, Columns: [`repair_ID`, `name`, `Launch_Date`, `Notes`]\n- Table: `technician`, Columns: [`technician_id`, `Name`, `Team`, `Starting_Year`, `Age`]",
        "Response": "Table: `technician`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `commons_category`, `numeric_value`, `unicode_character`, `kit_linked_open_numbers_id`, `prime_factor`, `pronunciation_audio`, `number_of_decimal_digits`, `code`, `omegawiki_defined_meaning`, `babelnet_id`)  VALUES ('64', 'natural number', 'natural number', '64 (number)', 64.0, 'nan', '64', '2.0', 'nan', 2.0, '\u0bec\u0bf0\u0bea', 'nan', '03131372n');\nDatabase State:\n- Table: `positional_numeral_system`, Columns: [`label`, `description`, `instance_of`, `radix`]\n- Table: `prime_factor`, Columns: [`label`, `description`, `instance_of`, `commons_category`, `numeric_value`, `unicode_character`, `kit_linked_open_numbers_id`, `prime_factor`, `encyclop\u00e6dia_britannica_online_id`, `label_in_sign_language`, `pronunciation_audio`, `number_of_decimal_digits`, `code`, `spoken_text_audio`, `code_image`, `omegawiki_defined_meaning`, `babelnet_id`, `personality_database_profile_id`, `factgrid_item_id`, `pixiv_encyclopedia_id`, `image`]",
        "Response": "Table: `radix`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `found_in_taxon`, `encoded_by`, `uniprot_protein_id`, `refseq_protein_id`, `biological_process`, `cell_component`, `molecular_function`, `has_parts`, `instance_of`, `part_of`, `ensembl_protein_id`)  VALUES ('Peptidylglycine alpha-amidating monooxygenase', 'mammalian protein found in Rattus norvegicus', 'brown rat', 'Pam', 'P14925', 'NP_037132', 'peptide amidation', 'extracellular region', 'catalytic activity', 'Copper type II, ascorbate-dependent monooxygenase, N-terminal', 'protein', 'PHM/PNGase F domain superfamily', 'ENSRNOP00000046774');\nDatabase State:\n- Table: `expressed_in`, Columns: [`label`, `description`, `described_by_source`, `uberon_id`, `subclass_of`, `instance_of`, `freebase_id`, `microsoft_academic_id`, `openalex_id`, `commons_category`]\n- Table: `encodes`, Columns: [`label`, `description`, `found_in_taxon`, `encoded_by`, `uniprot_protein_id`, `refseq_protein_id`, `biological_process`, `cell_component`, `molecular_function`, `has_parts`, `instance_of`, `part_of`, `ensembl_protein_id`]\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `orthology`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `homologene_id`, `found_in_taxon`, `refseq_rna_id`, `encodes`, `ortholog`, `exact_match`, `instance_of`, `cytogenetic_location`, `ensembl_gene_id`, `chromosome`, `strand_orientation`, `genomic_start`, `genomic_end`, `ensembl_transcript_id`, `expressed_in`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID)  VALUES (161, 'Sarath', 'Sewall', 'SSEWALL', '011.44.1345.529268', '1987-08-17', 'SA_REP', 7000, 0.25, 146, 80);\nDatabase State:\n- Table: jobs, Columns: [JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]\n- Table: locations, Columns: [LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID]\n- Table: employees, Columns: [EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]",
        "Response": "Table: employees"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Projects (project_id, organisation_id, project_details)  VALUES (2, 11, 'et');\nDatabase State:\n- Table: Organisation_Types, Columns: [organisation_type, organisation_type_description]\n- Table: Projects, Columns: [project_id, organisation_id, project_details]\n- Table: Documents, Columns: [document_id, document_type_code, grant_id, sent_date, response_received_date, other_details]\n- Table: Project_Outcomes, Columns: [project_id, outcome_code, outcome_details]\n- Table: Tasks, Columns: [task_id, project_id, task_details, eg_Agree_Objectives]\n- Table: Document_Types, Columns: [document_type_code, document_description]\n- Table: Project_Staff, Columns: [staff_id, project_id, role_code, date_from, date_to, other_details]\n- Table: Organisations, Columns: [organisation_id, organisation_type, organisation_details]\n- Table: Research_Staff, Columns: [staff_id, employer_organisation_id, staff_details]\n- Table: Grants, Columns: [grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]\n- Table: Staff_Roles, Columns: [role_code, role_description]\n- Table: Research_Outcomes, Columns: [outcome_code, outcome_description]",
        "Response": "Table: Projects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Quantity (quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional)  VALUES (982, 435, 2288, 0.5, 0.5, 'cup(s)', 'sliced thin', 'FALSE');\nDatabase State:\n- Table: Nutrition, Columns: [recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories]\n- Table: Recipe, Columns: [recipe_id, title, subtitle, servings, yield_unit, prep_min, cook_min, stnd_min, source, intro, directions]",
        "Response": "Table: Quantity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Code, Name, Hours)  VALUES ('AeH4', 'Aerodynamics and Ice Hockey', 789);\nDatabase State:\n- Table: Scientists, Columns: [SSN, Name]\n- Table: AssignedTo, Columns: [Scientist, Project]",
        "Response": "Table: Projects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `part` (`label`, `description`, `instance_of`, `is_a_list_of`, `has_parts`, `from_narrative_universe`, `media_franchise`)  VALUES ('Houndour and Houndoom', 'evolution of a Pok\u00e9mon species', 'Pok\u00e9mon evolutionary line', 'Pok\u00e9mon species', 'Houndour', 'Pok\u00e9mon universe', 'Pok\u00e9mon');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `part`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (branch_ID, bname, no_of_customers, city, state)  VALUES (1, 'morningside', 203, 'New York City', 'New York');\nDatabase State:\n- Table: customer, Columns: [cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state]\n- Table: loan, Columns: [loan_ID, loan_type, cust_ID, branch_ID, amount]\n- Table: bank, Columns: [branch_ID, bname, no_of_customers, city, state]",
        "Response": "Table: bank"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (IMG_ID, PRED_CLASS_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID)  VALUES (2394713, 147, 7, 1);\nDatabase State:\n- Table: IMG_REL, Columns: [IMG_ID, PRED_CLASS_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID]",
        "Response": "Table: IMG_REL"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO status (station_id, bikes_available, docks_available, time)  VALUES (74, 7, 16, '2015-06-02 13:28:02');\nDatabase State:\n- Table: weather, Columns: [date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "Response": "Table: status"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  VALUES ('2018/8/20', 20304, 'N877AS', 3062, 11823, 1182304, 31823, 'FWA', 13930, 1393006, 30977, 'ORD', 1929, 2245, 196, 196, 2258, 198, 198, 0, NULL, 71, 73, 167, 0, 2, 0, 29);\nDatabase State:\n- Table: `Air Carriers`, Columns: [Code, Description]\n- Table: Airports, Columns: [Code, Description]\n- Table: Airlines, Columns: [FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO zip_data (zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, `1st_quarter_payroll`, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA)  VALUES (49621, 'Cedar', 'MI', 'No', 'Post Office', NULL, 'Eastern', 'Yes', 44.86368199999999717, -85.75797799999999426, 656, 26, 89, 'Midwest', 'East North Central', 3523, 3096, 1259, 223200, 63198, 2.450000000000000177, 3004, 7, 58, 24, 69, 0, 23, 1574, 1522, 46.60000000000000142, 46.29999999999999716, 46.79999999999999716, 1438, 12, 1668, 76, 1556000, 8644000, 274, 7.471000000000000085, 58.71399999999999864, 1438, 0, 855, 680, 65, 35, 40, 35, 695, 1189000, 994000, 49000, 45900);\nDatabase State:\n- Table: area_code, Columns: [zip_code, area_code]\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]\n- Table: alias, Columns: [zip_code, alias]\n- Table: CBSA, Columns: [CBSA, CBSA_name, CBSA_type]",
        "Response": "Table: zip_data"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `chip_model` (`Model_name`, `Launch_year`, `RAM_MiB`, `ROM_MiB`, `Slots`, `WiFi`, `Bluetooth`)  VALUES ('X50 Advanced', 2004.0, 64.0, 128.0, '1CFII,1SD', '802.11b', 'Yes');\nDatabase State:\n- Table: `chip_model`, Columns: [`Model_name`, `Launch_year`, `RAM_MiB`, `ROM_MiB`, `Slots`, `WiFi`, `Bluetooth`]\n- Table: `screen_mode`, Columns: [`Graphics_mode`, `Char_cells`, `Pixels`, `Hardware_colours`, `used_kb`, `map`, `Type`]",
        "Response": "Table: `chip_model`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `ferrochelatase` (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `cell_component`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('Ferrochelatase HP0376', 'microbial protein found in Helicobacter pylori 26695', 'P56107', 'ferrochelatase HP0376', 'cytoplasm', 'porphyrin-containing compound biosynthetic process', 'lyase activity', 'Ferrochelatase, C-terminal', 'Helicobacter pylori 26695', 'NP_207174', 'protein', 'ferrochelatase', 'protein');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `ferrochelatase`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `cell_component`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]",
        "Response": "Table: `ferrochelatase`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity)  VALUES ('Endomondo - Running & Walking', 'nan', 'nan', 'nan', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `user_reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `city` (`City_ID`, `County_ID`, `Name`, `White`, `Black`, `Amerindian`, `Asian`, `Multiracial`, `Hispanic`)  VALUES (13, 4, 'Caguas', 76.09999999999999431, 11.0, 0.5999999999999999778, 0.2000000000000000111, 12.09999999999999965, 99.0999999999999944);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `city`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1016, 'Schwartz', 'Mark', 17, 'M', 600, 2192, 'DET');\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderDetailID, OrderID, ProductID, Quantity)  VALUES (18, 10254, 24, 15);\nDatabase State:\n- Table: Shippers, Columns: [ShipperID, ShipperName, Phone]\n- Table: Customers, Columns: [CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country]",
        "Response": "Table: OrderDetails"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO jobs (job_id, job_desc, min_lvl, max_lvl)  VALUES (9, 'Acquisitions Manager', 75, 175);\nDatabase State:\n- Table: titleauthor, Columns: [au_id, title_id, au_ord, royaltyper]\n- Table: publishers, Columns: [pub_id, pub_name, city, state, country]\n- Table: jobs, Columns: [job_id, job_desc, min_lvl, max_lvl]",
        "Response": "Table: jobs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `u2base` (userid, movieid, rating)  VALUES (2058, 2242954, '4');\nDatabase State:\n- Table: `movies2actors`, Columns: [movieid, actorid, cast_num]\n- Table: `movies2directors`, Columns: [movieid, directorid, genre]\n- Table: `movies`, Columns: [movieid, year, isEnglish, country, runningtime]\n- Table: `actors`, Columns: [actorid, a_gender, a_quality]\n- Table: `directors`, Columns: [directorid, d_quality, avg_revenue]\n- Table: users, Columns: [userid, age, u_gender, occupation]",
        "Response": "Table: `u2base`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `freebase_id`, `instance_of`, `country_of_origin`, `genre`)  VALUES ('Hello From the Magic Tavern', 'podcast', 'nan', 'podcast', 'nan', 'fantasy');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `work`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `player` (`Player_ID`, `name`, `Position`, `Club_ID`, `Apps`, `Tries`, `Goals`, `Points`)  VALUES (8, 'Terry Newton', 'Hooker', 5, 26.0, 9.0, '0', 36.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `player`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `shabnameh` (`label`, `description`, `instance_of`, `distribution_format`, `publication_date`, `author`, `country_of_origin`, `copyright_status`, `document_file_on_wikimedia_commons`, `commons_category`, `followed_by`, `language_of_work_or_name`, `follows`)  VALUES ('Political-Military communiqu\u00e9 number 16', 'People''s Mujahedin of Iran statement', 'communiqu\u00e9', 'flyer', '+1973-06-05T00:00:00Z', 'People''s Mojahedin Organization of Iran', 'Iran', 'public domain', 'People''s Mujahedin of Iran, Political-Military communiqu\u00e9 16 (Typed text).pdf', 'Political-Military communiqu\u00e9 16', 'Political-Military communiqu\u00e9 number 17', 'Persian', 'nan');\nDatabase State:\n- Table: `shabnameh`, Columns: [`label`, `description`, `instance_of`, `distribution_format`, `publication_date`, `author`, `country_of_origin`, `copyright_status`, `document_file_on_wikimedia_commons`, `commons_category`, `followed_by`, `language_of_work_or_name`, `follows`]\n- Table: `followed_by`, Columns: [`label`, `description`, `follows`, `instance_of`, `author`, `country_of_origin`, `publication_date`, `distribution_format`, `document_file_on_wikimedia_commons`, `copyright_status`, `commons_category`, `language_of_work_or_name`, `followed_by`]",
        "Response": "Table: `shabnameh`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (university_id, ranking_criteria_id, year, score)  VALUES (88, 4, 2011, 65);\nDatabase State:\n- Table: university_ranking_year, Columns: [university_id, ranking_criteria_id, year, score]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Answer` (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('Some of them', 2014, 771, 100);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Answer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity)  VALUES ('AD - Nieuws, Sport, Regio & Entertainment', 'nan', 'nan', 'nan', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `user_reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `party_host` (`Party_ID`, `Host_ID`, `Is_Main_in_Charge`)  VALUES (1, 1, 'T');\nDatabase State:\n- Table: `party`, Columns: [`Party_ID`, `Party_Theme`, `Location`, `First_year`, `Last_year`, `Number_of_hosts`]\n- Table: `party_host`, Columns: [`Party_ID`, `Host_ID`, `Is_Main_in_Charge`]",
        "Response": "Table: `party_host`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Answer` (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('1', 2016, 2110, 9);\nDatabase State:\n- Table: `Answer`, Columns: [AnswerText, SurveyID, UserID, QuestionID]",
        "Response": "Table: `Answer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Batsman_Scored (Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No)  VALUES (829730, 20, 2, 1, 2);\nDatabase State:\n- Table: Batsman_Scored, Columns: [Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No]\n- Table: Toss_Decision, Columns: [Toss_Id, Toss_Name]\n- Table: Match, Columns: [Match_Id, Team_1, Team_2, Match_Date, Season_Id, Venue_Id, Toss_Winner, Toss_Decide, Win_Type, Win_Margin, Outcome_type, Match_Winner, Man_of_the_Match]\n- Table: Out_Type, Columns: [Out_Id, Out_Name]\n- Table: Extra_Runs, Columns: [Match_Id, Over_Id, Ball_Id, Extra_Type_Id, Extra_Runs, Innings_No]\n- Table: Country, Columns: [Country_Id, Country_Name]\n- Table: Venue, Columns: [Venue_Id, Venue_Name, City_Id]\n- Table: Outcome, Columns: [Outcome_Id, Outcome_Type]\n- Table: Player_Match, Columns: [Match_Id, Player_Id, Role_Id, Team_Id]\n- Table: Bowling_Style, Columns: [Bowling_Id, Bowling_skill]\n- Table: Batting_Style, Columns: [Batting_Id, Batting_hand]\n- Table: Rolee, Columns: [Role_Id, Role_Desc]\n- Table: Umpire, Columns: [Umpire_Id, Umpire_Name, Umpire_Country]\n- Table: Player, Columns: [Player_Id, Player_Name, DOB, Batting_hand, Bowling_skill, Country_Name]\n- Table: Team, Columns: [Team_Id, Team_Name]\n- Table: Win_By, Columns: [Win_Id, Win_Type]\n- Table: City, Columns: [City_Id, City_Name, Country_id]\n- Table: Season, Columns: [Season_Id, Man_of_the_Series, Orange_Cap, Purple_Cap, Season_Year]\n- Table: Ball_by_Ball, Columns: [Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler]",
        "Response": "Table: Batsman_Scored"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (authID, lname, fname)  VALUES (53, 'Shivers', 'Olin');\nDatabase State:\n- Table: Inst, Columns: [instID, name, country]",
        "Response": "Table: Authors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff)  VALUES (9, 4, 'ymiller', 'Margie', 'Caesar', 'Doyle', '1995-06-03 08:09:17', '2017-12-22 03:06:32', '2018-03-08 12:31:16');\nDatabase State:\n- Table: Vehicles, Columns: [vehicle_id, vehicle_details]\n- Table: Customer_Payments, Columns: [customer_id, datetime_payment, payment_method_code, amount_payment]\n- Table: Staff, Columns: [staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff]\n- Table: Addresses, Columns: [address_id, line_1_number_building, city, zip_postcode, state_province_county, country]\n- Table: Lessons, Columns: [lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price]\n- Table: Customers, Columns: [customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number, cell_mobile_phone_number]",
        "Response": "Table: Staff"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`index`, id, tag)  VALUES (22747, 10490, 'breaks');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `tags`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `freebase_id`, `instance_of`, `sex_or_gender`, `father`, `mother`, `sandrartnet_person_id`, `theoi_project_id`, `child`)  VALUES ('Rhea', 'female Titan in Greek mythology, mother of Zeus and mother of Hera', '/m/0g934', 'titan', 'female', 'Uranus', 'Gaia', '3025.0', 'Titan/TitanisRhea', 'Zeus');\nDatabase State:\n- Table: `mother`, Columns: [`label`, `description`, `freebase_id`, `instance_of`, `sex_or_gender`, `spouse`, `image`, `sandrartnet_person_id`, `described_by_source`, `theoi_project_id`, `child`, `topostext_person_id`, `father`, `mother`]\n- Table: `father`, Columns: [`label`, `description`, `freebase_id`, `instance_of`, `sex_or_gender`, `father`, `mother`, `spouse`, `sandrartnet_person_id`, `sibling`, `theoi_project_id`, `described_by_source`, `child`]\n- Table: `titan`, Columns: [`label`, `description`, `freebase_id`, `instance_of`, `sex_or_gender`, `father`, `mother`, `sandrartnet_person_id`, `theoi_project_id`, `child`]",
        "Response": "Table: `titan`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customers_Policies (Customer_ID, Policy_ID, Date_Opened, Date_Closed)  VALUES (996, 366, '2016-10-31', '2018-03-19');\nDatabase State:\n- Table: Customers, Columns: [Customer_ID, Customer_name]\n- Table: Settlements, Columns: [Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount]\n- Table: First_Notification_of_Loss, Columns: [FNOL_ID, Customer_ID, Policy_ID, Service_ID]",
        "Response": "Table: Customers_Policies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `store_product` (`Store_ID`, `Product_ID`)  VALUES (3, 4);\nDatabase State:\n- Table: `product`, Columns: [`product_id`, `product`, `dimensions`, `dpi`, `pages_per_minute_color`, `max_page_size`, `interface`]\n- Table: `district`, Columns: [`District_ID`, `District_name`, `Headquartered_City`, `City_Population`, `City_Area`]\n- Table: `store`, Columns: [`Store_ID`, `Store_Name`, `Type`, `Area_size`, `Number_of_product_category`, `Ranking`]",
        "Response": "Table: `store_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `category_combines_topics`, `category_contains`)  VALUES ('Category:Lists of landforms of Japan', 'Wikimedia category', 'Wikimedia lists category', 'Japan', 'Wikimedia list article');\nDatabase State:\n- Table: `wikimedia_category`, Columns: [`label`, `description`, `instance_of`, `category_combines_topics`, `category_contains`]",
        "Response": "Table: `wikimedia_category`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `found_in_taxon`, `encodes`, `strand_orientation`, `instance_of`, `genomic_end`, `genomic_start`, `ncbi_locus_tag`)  VALUES ('beta-galactosidase SCO6457', 'microbial gene found in Streptomyces coelicolor A3(2)', '1101896', 'gene', 'Streptomyces coelicolor A3(2)', 'Beta-galactosidase SCO6457', 'forward strand', 'gene', '7146128', '7142205', 'SCO6457');\nDatabase State:\n- Table: `glycoside_hydrolase_family_2`, Columns: [`label`, `description`, `found_in_taxon`, `encoded_by`, `uniprot_protein_id`, `refseq_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `found_in_taxon`, `encodes`, `strand_orientation`, `instance_of`, `genomic_end`, `genomic_start`, `ncbi_locus_tag`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes)  VALUES (78081, 193171, 160844, '2013-03-22 00:00:00', 67, 71, 'left', 'high', 'low', 68, 39, 59, 63, 36, 62, 67, 61, 65, 65, 78, 81, 79, 65, 79, 58, 71, 81, 60, 60, 75, 59, 60, 55, 54, 65, 67, 69, 9, 10, 15, 9, 13);\nDatabase State:\n- Table: Country, Columns: [id, name]\n- Table: `Player_Attributes`, Columns: [id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes]\n- Table: Team_Attributes, Columns: [id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass]\n- Table: League, Columns: [id, country_id, name]",
        "Response": "Table: `Player_Attributes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, PATIENT, BILLABLEPERIOD, ORGANIZATION, ENCOUNTER, DIAGNOSIS, TOTAL)  VALUES ('aad751c5-7fd3-4f0b-b65e-8058ba725ca2', '7d930372-7a58-4940-ac33-cd6373720f4a', '2010-03-29', 'temp organization', '7d930372-7a58-4940-ac33-cd6373720f4a', NULL, 100);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `claims`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO businesses (business_id, name, address, city, postal_code, latitude, longitude, phone_number, tax_code, business_certificate, application_date, owner_name, owner_address, owner_city, owner_state, owner_zip)  VALUES (71562, 'Mccarthy''s Irish Bar', '046 WEST PORTAL Ave', 'SF', '94127', 37.74040000000000105, -122.465999999999994, 14155561412, 'H86', 475875, '2013-01-25', 'Nell Mccarthy''s Irish Bar LLC', '1812 47th Ave. #2', 'San Francisco', 'CA', '94122');\nDatabase State:\n- Table: violations, Columns: [business_id, date, violation_type_id, risk_category, description]\n- Table: businesses, Columns: [business_id, name, address, city, postal_code, latitude, longitude, phone_number, tax_code, business_certificate, application_date, owner_name, owner_address, owner_city, owner_state, owner_zip]\n- Table: inspections, Columns: [business_id, score, date, type]",
        "Response": "Table: businesses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `glycoside_hydrolase_family_47` (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Mannosidase 1, alpha', 'mammalian protein found in Mus musculus', 'P45700', 'Man1a', 'ENSMUSP00000003843', 'N-glycan processing', 'calcium ion binding', 'Golgi membrane', 'house mouse', 'NP_032574', 'protein', 'Glycoside hydrolase family 47');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `ensembl_transcript_id`, `homologene_id`, `refseq_rna_id`, `ortholog`, `encodes`, `found_in_taxon`, `chromosome`, `genomic_start`, `strand_orientation`, `genomic_end`, `instance_of`, `expressed_in`]",
        "Response": "Table: `glycoside_hydrolase_family_47`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `head_of_government` (`label`, `description`, `instance_of`, `position_held`, `sex_or_gender`, `country_of_citizenship`, `given_name`, `date_of_birth`, `occupation`, `family_name`, `languages_spoken_written_or_signed`)  VALUES ('Florence Berthout', 'French politician', 'human', 'Mayor of 5th arrondissement of Paris', 'female', 'France', 'Florence', '+1962-06-25T00:00:00Z', 'politician', 'Berthout', 'French');\nDatabase State:\n- Table: `office_held_by_head_of_government`, Columns: [`label`, `description`, `instance_of`, `subclass_of`, `applies_to_jurisdiction`, `country`]",
        "Response": "Table: `head_of_government`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO competitor_event (event_id, competitor_id, medal_id)  VALUES (297, 42264, 4);\nDatabase State:\n- Table: person_region, Columns: [person_id, region_id]\n- Table: person, Columns: [id, full_name, gender, height, weight]\n- Table: event, Columns: [id, sport_id, event_name]\n- Table: medal, Columns: [id, medal_name]",
        "Response": "Table: competitor_event"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `player` (`Player_ID`, `Player`, `Years_Played`, `Total_WL`, `Singles_WL`, `Doubles_WL`, `Team`)  VALUES (2, 'Chung Hong (717)', '1 (2011)', '0\u20130', '0\u20130', '0\u20130', 1);\nDatabase State:\n- Table: `player`, Columns: [`Player_ID`, `Player`, `Years_Played`, `Total_WL`, `Singles_WL`, `Doubles_WL`, `Team`]\n- Table: `country`, Columns: [`Country_id`, `Country_name`, `Capital`, `Official_native_language`]",
        "Response": "Table: `player`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1017, 'Wilson', 'Bruce', 27, 'M', 600, 1148, 'LON');\nDatabase State:\n- Table: Pets, Columns: [PetID, PetType, pet_age, weight]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO genre (g_name, rating, most_popular_in)  VALUES ('tagore', '8', 'Bangladesh');\nDatabase State:\n- Table: artist, Columns: [artist_name, country, gender, preferred_genre]",
        "Response": "Table: genre"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Branch_ID`, `Name`, `Open_year`, `Address_road`, `City`, `membership_amount`)  VALUES (1, 'Alexandre', '2001', 'Valleys Place', 'London', '112');\nDatabase State:\n- Table: `member`, Columns: [`Member_ID`, `Card_Number`, `Name`, `Hometown`, `Level`]\n- Table: `purchase`, Columns: [`Member_ID`, `Branch_ID`, `Year`, `Total_pounds`]",
        "Response": "Table: `branch`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `atp_dependent_clp_protease_adaptor_protein_clps` (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `biological_process`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('ATP-dependent Clp protease adapter protein ClpS    Rv1331', 'microbial protein found in Mycobacterium tuberculosis H37Rv', 'P9WPC1', 'Mycobacterium tuberculosis H37Rv', 'protein', 'ATP-dependent Clp protease adapter protein ClpS Rv1331', 'proteolysis', 'Adaptor protein ClpS, core', 'protein', 'NP_215847', 'ATP-dependent Clp protease adaptor protein ClpS');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `atp_dependent_clp_protease_adaptor_protein_clps`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, Name, CountryCode, District, Population)  VALUES (2915, 'Porto', 'PRT', 'Porto', 273060);\nDatabase State:\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]\n- Table: City, Columns: [ID, Name, CountryCode, District, Population]\n- Table: CountryLanguage, Columns: [CountryCode, Language, IsOfficial, Percentage]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `technician` (`technician_id`, `Name`, `Team`, `Starting_Year`, `Age`)  VALUES (7.0, 'Eddie Collins', 'CWS', 2005.0, 45);\nDatabase State:\n- Table: `repair`, Columns: [`repair_ID`, `name`, `Launch_Date`, `Notes`]\n- Table: `repair_assignment`, Columns: [`technician_id`, `repair_ID`, `Machine_ID`]\n- Table: `machine`, Columns: [`Machine_ID`, `Making_Year`, `Class`, `Team`, `Machine_series`, `value_points`, `quality_rank`]",
        "Response": "Table: `technician`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO IMG_OBJ (IMG_ID, OBJ_SAMPLE_ID, OBJ_CLASS_ID, X, Y, W, H)  VALUES (2372270, 12, 223, 0, 272, 72, 10);\nDatabase State:\n- Table: IMG_OBJ, Columns: [IMG_ID, OBJ_SAMPLE_ID, OBJ_CLASS_ID, X, Y, W, H]\n- Table: ATT_CLASSES, Columns: [ATT_CLASS_ID, ATT_CLASS]\n- Table: OBJ_CLASSES, Columns: [OBJ_CLASS_ID, OBJ_CLASS]\n- Table: IMG_OBJ_ATT, Columns: [IMG_ID, ATT_CLASS_ID, OBJ_SAMPLE_ID]",
        "Response": "Table: IMG_OBJ"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO callcenterlogs (`Date received`, `Complaint ID`, `rand client`, phonefinal, `vru+line`, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time)  VALUES ('2019-01-14', NULL, NULL, '446-694-8849', 'AA0213', 30708, 1, 'PS', 'PHANTOM', 'NO_SERVER', '14:10:50', '14:10:54', '00:00:04');\nDatabase State:\n- Table: events, Columns: [`Date received`, Product, `Sub-product`, Issue, `Sub-issue`, `Consumer complaint narrative`, Tags, `Consumer consent provided?`, `Submitted via`, `Date sent to company`, `Company response to consumer`, `Timely response?`, `Consumer disputed?`, `Complaint ID`, Client_ID]\n- Table: district, Columns: [district_id, city, state_abbrev, division]\n- Table: reviews, Columns: [`Date`, Stars, Reviews, Product, district_id]\n- Table: client, Columns: [client_id, sex, day, month, year, age, social, first, middle, last, phone, email, address_1, address_2, city, state, zipcode, district_id]",
        "Response": "Table: callcenterlogs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num)  VALUES (16, 5, 2, 'rectangle', 'long', 'not_double', 'flat', 3, 'rectangle', 1);\nDatabase State:\n- Table: cars, Columns: [id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num]",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `geonames_id`, `gnis_id`)  VALUES ('Kea\u012bwa Lava Flow of 1823', 'nan', 'lava flow', '19.208611111111', 'United States of America', 'Hawaii County', '5848932.0', '360921.0');\nDatabase State:\n- Table: `eponym`, Columns: [`label`, `description`, `viaf_id`, `library_of_congress_authority_id`, `instance_of`, `image`, `freebase_id`, `national_library_of_israel_j9u_id`, `commons_category`, `topics_main_category`]\n- Table: `lava_flow`, Columns: [`label`, `description`, `instance_of`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `geonames_id`, `gnis_id`]\n- Table: `administrative_centre`, Columns: [`label`, `description`, `commons_category`, `country`, `coordinate_location`, `contains_the_administrative_territorial_entity`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `shares_border_with`, `official_website`, `capital`, `locator_map_image`, `image`, `area`, `located_in_the_administrative_territorial_entity`, `population`, `archinform_location_id`, `wolfram_language_entity_code`, `openstreetmap_relation_id`, `whos_on_first_id`, `hasc`, `inaturalist_place_id`, `fips_6_4`, `gnis_id`, `inception`, `viaf_id`, `category_for_maps`, `water_as_percent_of_area`, `native_label`, `worldcat_identities_id`, `getty_thesaurus_of_geographic_names_id`, `per_capita_income`, `number_of_households`]\n- Table: `capital_city`, Columns: [`label`, `description`, `commons_category`, `country`, `image`, `located_in_time_zone`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `curlie_id`, `instance_of`, `freebase_id`, `geonames_id`, `viaf_id`, `official_website`, `postal_code`, `population`, `local_dialing_code`, `area`, `gran_enciclop\u00e8dia_catalana_id`, `elevation_above_sea_level`, `archinform_location_id`, `capital_of`, `library_of_congress_authority_id`, `whos_on_first_id`, `worldcat_identities_id`, `national_library_of_israel_j9u_id`, `gnis_id`, `fips_55_3_locations_in_the_us`, `locator_map_image`, `water_as_percent_of_area`, `per_capita_income`, `number_of_households`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `capital`, `locator_map_image`, `area`, `official_website`, `population`, `viaf_id`, `inaturalist_place_id`, `commons_category`, `openstreetmap_relation_id`, `image`, `native_label`]\n- Table: `monument`, Columns: [`label`, `description`, `is_a_list_of`, `country`, `commons_category`, `instance_of`]\n- Table: `political_border`, Columns: [`label`, `description`, `commons_category`, `country`, `coordinate_location`, `contains_the_administrative_territorial_entity`, `topics_main_category`, `instance_of`, `freebase_id`, `inception`, `geonames_id`, `shares_border_with`, `population`, `area`, `official_website`, `capital`, `locator_map_image`, `image`, `located_in_the_administrative_territorial_entity`, `archinform_location_id`, `openstreetmap_relation_id`, `whos_on_first_id`, `hasc`, `inaturalist_place_id`, `category_of_associated_people`, `fips_6_4`, `gnis_id`, `viaf_id`, `named_after`, `list_of_monuments`, `category_for_maps`, `water_as_percent_of_area`, `native_label`, `wolfram_language_entity_code`, `worldcat_identities_id`, `getty_thesaurus_of_geographic_names_id`, `per_capita_income`, `number_of_households`]",
        "Response": "Table: `lava_flow`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (inspection_id, point_id, fine, inspector_comment)  VALUES (471957, 38, 100, 'Repair the leaks in the new dishmachine.');\nDatabase State:\n- Table: employee, Columns: [employee_id, first_name, last_name, address, city, state, zip, phone, title, salary, supervisor]\n- Table: inspection_point, Columns: [point_id, Description, category, code, fine, point_level]\n- Table: establishment, Columns: [license_no, dba_name, aka_name, facility_type, risk_level, address, city, state, zip, latitude, longitude, ward]\n- Table: violation, Columns: [inspection_id, point_id, fine, inspector_comment]",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding, amount_of_refund)  VALUES (3, 3, 'Confirmed', '1', '2017-04-04 11:02:43', '2018-02-01 09:30:50', '729', 351.3199999999999932, 49.25999999999999802, 66.01000000000000511, 135.9399999999999978);\nDatabase State:\n- Table: Discount_Coupons, Columns: [coupon_id, date_issued, coupon_amount]\n- Table: Customers, Columns: [customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire]\n- Table: Payments, Columns: [payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid]",
        "Response": "Table: Bookings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details)  VALUES (8, 'Elyssa', 'Lind', replace('094 Julianne Mill\\nWebstertown, KY 91980-4004','\\n',char(10)), '+12(6)9024410984', 'dell13@example.com', NULL);\nDatabase State:\n- Table: Financial_Transactions, Columns: [transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details]\n- Table: Customers, Columns: [customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Actor_ID`, `Name`, `Musical_ID`, `Character`, `Duration`, `age`)  VALUES (6, 'Jackie Woodburne', 6, 'Susan Kennedy', '1994\u2014', 20);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `actor`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `part_of`, `followed_by`, `follows`, `google_knowledge_graph_id`)  VALUES ('Exodus 32', 'thirty-second chapter of Exodus, composed of 35 verses', 'chapter of the Bible', 'Exodus', 'Exodus 33', 'Exodus 31', '/g/119pgr2cx');\nDatabase State:\n- Table: `exodus`, Columns: [`label`, `description`, `part_of`, `instance_of`, `followed_by`, `follows`, `google_knowledge_graph_id`]\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `part_of`, `followed_by`, `follows`, `google_knowledge_graph_id`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `follows`, `followed_by`, `point_in_time`, `edition_number`, `image`, `google_knowledge_graph_id`)  VALUES ('31st NHK K\u014dhaku Uta Gassen', '1980', 'magazine', '30th NHK K\u014dhaku Uta Gassen', '32nd NHK K\u014dhaku Uta Gassen', '+1980-12-31T00:00:00Z', '31.0', 'NHK-Hall 2016.jpg', '/g/120nqfq1');\nDatabase State:\n- Table: `k\u014dhaku_uta_gassen`, Columns: [`label`, `description`, `instance_of`, `follows`, `followed_by`, `point_in_time`, `edition_number`, `image`, `google_knowledge_graph_id`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `follows`, `followed_by`, `point_in_time`, `edition_number`, `image`, `google_knowledge_graph_id`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `train` (`Train_ID`, `Train_Num`, `Name`, `From`, `Arrival`, `Railway_ID`)  VALUES (9, '11401', 'Nandigram Exp', 'Mumbai CST', '13:28', 10);\nDatabase State:\n- Table: `railway_manage`, Columns: [`Railway_ID`, `Manager_ID`, `From_Year`]\n- Table: `manager`, Columns: [`Manager_ID`, `Name`, `Country`, `Working_year_starts`, `Age`, `Level`]\n- Table: `train`, Columns: [`Train_ID`, `Train_Num`, `Name`, `From`, `Arrival`, `Railway_ID`]",
        "Response": "Table: `train`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Player_ID`, `Player`, `Team`, `Age`, `Position`, `School_ID`)  VALUES (9, 'Aaron Crow *', 'Washington Nationals', 16, 'Right-handed pitcher', 1);\nDatabase State:\n- Table: `school_performance`, Columns: [`School_Id`, `School_Year`, `Class_A`, `Class_AA`]",
        "Response": "Table: `player`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `sex_or_gender`, `occupation`, `country_of_citizenship`, `languages_spoken_written_or_signed`, `given_name`)  VALUES ('Eduard Turon i Mainat', 'Spanish politician', 'human', 'female', 'politician', 'Spain', 'Spanish', 'N\u00faria');\nDatabase State:\n- Table: `head_of_government`, Columns: [`label`, `description`, `instance_of`, `sex_or_gender`, `occupation`, `country_of_citizenship`, `languages_spoken_written_or_signed`, `given_name`]",
        "Response": "Table: `head_of_government`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO AREA_CODE_STATE (area_code)  VALUES (224, 'IL');\nDatabase State:\n- Table: CONTESTANTS, Columns: [contestant_number]\n- Table: AREA_CODE_STATE, Columns: [area_code]",
        "Response": "Table: AREA_CODE_STATE"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO PlayerInfo (ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0)  VALUES (9235, 'Zdenek Bahensky', '1986-03-10', 1986, 3, 10, 'Most, CZE', 'Czech Rep.', 74, 190, 'RW', 'L', 2004, 3, 73, 'New York Rangers', 24, 0, 0, 'no');\nDatabase State:\n- Table: PlayerInfo, Columns: [ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0]",
        "Response": "Table: PlayerInfo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, person_id, category, role, credited)  VALUES ('tt0629292', 'nm0568153', 'Cast', 'Harold De Groot', 'true');\nDatabase State:\n- Table: Keyword, Columns: [episode_id, keyword]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO events (`Date received`, Product, `Sub-product`, Issue, `Sub-issue`, `Consumer complaint narrative`, Tags, `Consumer consent provided?`, `Submitted via`, `Date sent to company`, `Company response to consumer`, `Timely response?`, `Consumer disputed?`, `Complaint ID`, Client_ID)  VALUES ('2014-02-04', 'Bank account or service', 'Savings account', 'Problems caused by my funds being low', NULL, NULL, NULL, 'N/A', 'Referral', '2014-02-11', 'Closed with explanation', 'Yes', 'No', 'CR0707914', 'C00003763');\nDatabase State:\n- Table: callcenterlogs, Columns: [`Date received`, `Complaint ID`, `rand client`, phonefinal, `vru+line`, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time]\n- Table: events, Columns: [`Date received`, Product, `Sub-product`, Issue, `Sub-issue`, `Consumer complaint narrative`, Tags, `Consumer consent provided?`, `Submitted via`, `Date sent to company`, `Company response to consumer`, `Timely response?`, `Consumer disputed?`, `Complaint ID`, Client_ID]\n- Table: state, Columns: [StateCode, State, Region]\n- Table: district, Columns: [district_id, city, state_abbrev, division]\n- Table: reviews, Columns: [`Date`, Stars, Reviews, Product, district_id]",
        "Response": "Table: events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (u_id)  VALUES (4, 'Nancy');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: useracct"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (character, `voice-actor`, movie)  VALUES ('Crane', 'Jeff Bennett', 'Belle''s Magical World');\nDatabase State:\n- Table: revenue, Columns: [Year, `Studio Entertainment[NI 1]`, `Disney Consumer Products[NI 2]`, `Disney Interactive[NI 3][Rev 1]`, `Walt Disney Parks and Resorts`, `Disney Media Networks`, Total]",
        "Response": "Table: `voice-actors`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Captain_ID`, `Name`, `Ship_ID`, `age`, `Class`, `Rank`)  VALUES (3, 'Lieutenant Hugh Bolitho', 3, '43', 'Cutter', 'Midshipman');\nDatabase State:\n- Table: `captain`, Columns: [`Captain_ID`, `Name`, `Ship_ID`, `age`, `Class`, `Rank`]\n- Table: `Ship`, Columns: [`Ship_ID`, `Name`, `Type`, `Built_Year`, `Class`, `Flag`]",
        "Response": "Table: `captain`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (date, store_nbr, item_nbr, units)  VALUES ('2013-02-12', 38, 94, 0);\nDatabase State:\n- Table: sales_in_weather, Columns: [date, store_nbr, item_nbr, units]",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO institution_grads (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (433013, 2006, 'M', 'B', '2y all', '1', 'NULL', '1', 'NULL', '100.0');\nDatabase State:\n- Table: state_sector_grads, Columns: [stateid, state, state_abbr, control, level, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate, grad_cohort_ct]\n- Table: institution_grads, Columns: [unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate]\n- Table: `state_sector_details`, Columns: [stateid, state, state_post, level, control, schools_count, counted_pct, awards_per_state_value, awards_per_natl_value, exp_award_state_value, exp_award_natl_value, state_appr_value, state_appr_rank, grad_rate_rank, awards_per_rank]",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `tags` (`index`, id, tag)  VALUES (135945, 64439, 'spoken.word');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `tags`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO matchs (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('E0', '2014-03-25', 'Man United', 'Man City', 0, 3, 'A', 2014);\nDatabase State:\n- Table: matchs, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]\n- Table: divisions, Columns: [division, name, country]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (zip_code, alias)  VALUES (88354, 'Weed');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: alias"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)  VALUES (8, 'Employee', 'Karley', replace('36895 Eli Ferry\\nPort Marcelle, FL 45712','\\n',char(10)), 'Kirastad', 'Indiana', '33020', 'Hyatt', 'goyette.roosevelt@example.net', '891.475.2256', '328.842.3792');\nDatabase State:\n- Table: Owners, Columns: [owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number]\n- Table: Sizes, Columns: [size_code, size_description]\n- Table: Dogs, Columns: [dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed]\n- Table: Treatments, Columns: [treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment]\n- Table: Professionals, Columns: [professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number]\n- Table: Breeds, Columns: [breed_code, breed_name]\n- Table: Treatment_Types, Columns: [treatment_type_code, treatment_type_description]\n- Table: Charges, Columns: [charge_id, charge_type, charge_amount]",
        "Response": "Table: Professionals"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Match_ID`, `Date`, `Venue`, `Score`, `Result`, `Competition`)  VALUES (6, '23 July 2000', 'Estadio Cuscatl\u00e1n , San Salvador , El Salvador', '2\u20131', '7\u20131', '2002 FIFA World Cup qualification');\nDatabase State:\n- Table: `city`, Columns: [`City_ID`, `City`, `Hanzi`, `Hanyu_Pinyin`, `Regional_Population`, `GDP`]\n- Table: `hosting_city`, Columns: [`Year`, `Match_ID`, `Host_City`]\n- Table: `temperature`, Columns: [`City_ID`, `Jan`, `Feb`, `Mar`, `Apr`, `Jun`, `Jul`, `Aug`, `Sep`, `Oct`, `Nov`, `Dec`]\n- Table: `match`, Columns: [`Match_ID`, `Date`, `Venue`, `Score`, `Result`, `Competition`]",
        "Response": "Table: `match`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`common_name`, `protein_name`, `divergence_from_human_lineage`, `accession_number`, `sequence_length`, `sequence_identity_to_human_protein`, `Institution_id`)  VALUES ('porkworm', 'surface antigen repeat family protein', 937.5, 'XP_003380263.1', 2030.0, '36%', '9');\nDatabase State:\n- Table: `building`, Columns: [`building_id`, `Name`, `Street_address`, `Years_as_tallest`, `Height_feet`, `Floors`]\n- Table: `protein`, Columns: [`common_name`, `protein_name`, `divergence_from_human_lineage`, `accession_number`, `sequence_length`, `sequence_identity_to_human_protein`, `Institution_id`]\n- Table: `Institution`, Columns: [`Institution_id`, `Institution`, `Location`, `Founded`, `Type`, `Enrollment`, `Team`, `Primary_Conference`, `building_id`]",
        "Response": "Table: `protein`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `u2base` (userid, movieid, rating)  VALUES (3216, 2216176, '3');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `u2base`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO zip_congress (zip_code, district)  VALUES (62852, 'IL-15');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: zip_congress"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `point_in_time`, `country`, `instance_of`, `freebase_id`, `follows`, `followed_by`, `office_contested`)  VALUES ('2013 Luxembourg general election', 'election in Luxembourg', '+2013-10-20T00:00:00Z', 'Luxembourg', 'Luxembourg general election', '/m/0w7q1kn', '2009 Luxembourg general election', '2018 Luxembourg general election', 'Deputy of the Chamber of Deputies of Luxembourg');\nDatabase State:\n- Table: `follows`, Columns: [`label`, `description`, `freebase_id`, `country`, `instance_of`, `point_in_time`, `followed_by`, `follows`, `office_contested`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Region_id, Storm_ID, Number_city_affected)  VALUES (12, 5, 37.0);\nDatabase State:\n- Table: affected_region, Columns: [Region_id, Storm_ID, Number_city_affected]\n- Table: `region`, Columns: [Region_id, Region_code, Region_name]",
        "Response": "Table: affected_region"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`endowment_id`, `School_id`, `donator_name`, `amount`)  VALUES (7, 4, 'Santiago', 8.849999999999999645);\nDatabase State:\n- Table: `endowment`, Columns: [`endowment_id`, `School_id`, `donator_name`, `amount`]\n- Table: `School`, Columns: [`School_id`, `School_name`, `Location`, `Mascot`, `Enrollment`, `IHSAA_Class`, `IHSAA_Football_Class`, `County`]",
        "Response": "Table: `endowment`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `gene_ontology_id`, `part_of`, `subclass_of`, `exact_match`, `instance_of`)  VALUES ('mating projection membrane', 'The portion of the plasma membrane surrounding a mating projection, the projection formed by unicellular fungi in response to mating pheromone.', 'GO:0070250', 'mating projection', 'cell projection membrane', 'http://purl.obolibrary.org/obo/GO_0070250', 'cellular component');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `cell_projection_membrane`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `train` (`id`, `train_number`, `name`, `origin`, `destination`, `time`, `interval`)  VALUES (4, 16723, 'Ananthapuri Express', 'Chennai', 'Trivandrum', '11:35', 'Daily');\nDatabase State:\n- Table: `weekly_weather`, Columns: [`station_id`, `day_of_week`, `high_temperature`, `low_temperature`, `precipitation`, `wind_speed_mph`]\n- Table: `train`, Columns: [`id`, `train_number`, `name`, `origin`, `destination`, `time`, `interval`]\n- Table: `route`, Columns: [`train_id`, `station_id`]\n- Table: `station`, Columns: [`id`, `network_name`, `services`, `local_authority`]",
        "Response": "Table: `train`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Crime (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11548330, 'JB569360', '12/27/2018 16:40', '028XX N CLARK ST', '810', 'STREET', 'FALSE', 'FALSE', 1934, 19, 44, 6, '6', '41.93358238', '-87.64551708');\nDatabase State:\n- Table: District, Columns: [district_no, district_name, address, zip_code, commander, email, phone, fax, tty, twitter]\n- Table: Ward, Columns: [ward_no, alderman_first_name, alderman_last_name, alderman_name_suffix, ward_office_address, ward_office_zip, ward_email, ward_office_phone, ward_office_fax, city_hall_office_room, city_hall_office_phone, city_hall_office_fax, Population]\n- Table: Neighborhood, Columns: [neighborhood_name, community_area_no]\n- Table: IUCR, Columns: [iucr_no, primary_description, secondary_description, index_code]\n- Table: FBI_Code, Columns: [fbi_code_no, title, description, crime_against]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID)  VALUES (648, 761, '2017-09-22', '2018-02-14', 32079, 1266, 805);\nDatabase State:\n- Table: Settlements, Columns: [Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]\n- Table: Payments, Columns: [Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]\n- Table: Customers, Columns: [Customer_ID, Customer_Details]\n- Table: Customer_Policies, Columns: [Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date]\n- Table: Claims, Columns: [Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]",
        "Response": "Table: Settlements"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `succinate_coa_synthetase_beta_subunit` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `biological_process`, `part_of`, `instance_of`, `subclass_of`, `refseq_protein_id`)  VALUES ('Succinyl-CoA synthetase subunit beta RB10617', 'microbial protein found in Rhodopirellula baltica SH 1', 'succinyl-CoA synthetase subunit beta RB10617', 'Q7UKI3', 'ligase activity', 'ATP-grasp fold, succinyl-CoA synthetase-type', 'Rhodopirellula baltica SH 1', 'tricarboxylic acid cycle', 'Succinate--CoA synthetase, beta subunit', 'protein', 'protein', 'NP_869518');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `succinate_coa_synthetase_beta_subunit`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `biological_process`, `part_of`, `instance_of`, `subclass_of`, `refseq_protein_id`]",
        "Response": "Table: `succinate_coa_synthetase_beta_subunit`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Roller_Coaster_ID`, `Name`, `Park`, `Country_ID`, `Length`, `Height`, `Speed`, `Opened`, `Status`)  VALUES (1, 'Boardwalk Bullet', 'Kemah Boardwalk', 1, 3236.0, 96.0, '51', 'August 31, 2007', 'Operating');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `roller_coaster`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `political_border` (`label`, `description`, `commons_category`, `country`, `coat_of_arms_image`, `postal_code`, `coordinate_location`, `image`, `head_of_government`, `instance_of`, `freebase_id`, `ine_municipality_code`, `population`, `geonames_id`, `shares_border_with`, `openstreetmap_relation_id`, `located_in_the_administrative_territorial_entity`, `viaf_id`, `topics_main_category`, `elevation_above_sea_level`, `office_held_by_head_of_government`, `official_website`, `gran_enciclop\u00e8dia_catalana_id`, `located_in_time_zone`, `area`, `idescat_territorial_code_in_catalonia`, `licence_plate_code`, `locator_map_image`, `number_of_households`, `demonym`, `whos_on_first_id`, `official_name`, `official_language`, `category_for_maps`, `female_population`, `male_population`, `inspire_id`, `factgrid_item_id`)  VALUES ('Sant Pere de Torell\u00f3', 'municipality in Catalonia, Spain', 'Sant Pere de Torell\u00f3', 'Spain', 'Escut de Sant Pere de Torell\u00f3.svg', '8572', '42.074782', 'Sant Pere de Torell\u00f3 des del mirador de Monserrat a la serra de Bellmunt - P1300393.jpg', 'Jordi F\u00e0brega i Colomer', 'municipality of Catalonia', '/m/0b6fh2c', '8233', 2514.0, '6356255', 'Vidr\u00e0', '342903', 'Osona', '316733286', 'Category:Sant Pere de Torell\u00f3', 621.0, 'mayor of San Pedro de Torell\u00f3', 'http://www.stpere.cat', '236604', 'UTC+01:00', 55.10000000000000142, '82331', 'B', 'Localitzaci\u00f3 de Sant Pere de Torell\u00f3 respecte d''Osona.svg', 62.0, 'Santperenc, santperenca', '101850409', 'Sant Pere de Torell\u00f3', 'Catalan', 'Category:Maps of Sant Pere de Torell\u00f3', 1177.0, 1242.0, 'ES.IGN.BDDAE.34090808233', 'Q354306');\nDatabase State:\n- Table: `given_name`, Columns: [`label`, `description`, `language_of_work_or_name`, `instance_of`, `said_to_be_the_same_as`, `native_label`, `writing_system`, `caverphone`, `different_from`, `commons_category`, `soundex`, `cologne_phonetics`]\n- Table: `head_of_government`, Columns: [`label`, `description`, `instance_of`, `sex_or_gender`, `occupation`, `given_name`, `country_of_citizenship`, `languages_spoken_written_or_signed`]\n- Table: `office_held_by_head_of_government`, Columns: [`label`, `description`, `subclass_of`, `applies_to_jurisdiction`, `country`, `instance_of`, `female_form_of_label`]",
        "Response": "Table: `political_border`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Ref_Document_Types (Document_Type_Code, Document_Type_Name, Document_Type_Description)  VALUES ('RV', 'Review', '');\nDatabase State:\n- Table: All_Documents, Columns: [Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details]\n- Table: Employees, Columns: [Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details]\n- Table: Document_Locations, Columns: [Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]\n- Table: Ref_Document_Types, Columns: [Document_Type_Code, Document_Type_Name, Document_Type_Description]",
        "Response": "Table: Ref_Document_Types"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `browser` (`id`, `name`, `market_share`)  VALUES (2, 'Firefox', 18.10999999999999944);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `browser`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `phone_market` (`Market_ID`, `Phone_ID`, `Num_of_stock`)  VALUES (1, '1', 2232);\nDatabase State:\n- Table: `phone_market`, Columns: [`Market_ID`, `Phone_ID`, `Num_of_stock`]\n- Table: `market`, Columns: [`Market_ID`, `District`, `Num_of_employees`, `Num_of_shops`, `Ranking`]",
        "Response": "Table: `phone_market`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO location (id_restaurant, street_num, street_name, city)  VALUES (7147, 205, 'port chicago hwy', 'west pittsburg');\nDatabase State:\n- Table: generalinfo, Columns: [id_restaurant, label, food_type, city, review]\n- Table: geographic, Columns: [city, county, region]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `has_parts`, `biological_process`, `molecular_function`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Glutamate-ammonia-ligase adenylyltransferase Rru_A2038', 'microbial protein found in Rhodospirillum rubrum ATCC 11170', 'protein', 'Q2RSQ7', 'glutamate-ammonia-ligase adenylyltransferase Rru_A2038', 'Rhodospirillum rubrum ATCC 11170', 'Alkyl hydroperoxide reductase subunit C/ Thiol specific antioxidant', 'glutamine biosynthetic process', 'peroxiredoxin activity', 'protein', 'YP_427125', 'Thioredoxin-like superfamily');\nDatabase State:\n- Table: `molecular_function`, Columns: [`label`, `description`, `subclass_of`, `gene_ontology_id`, `exact_match`, `instance_of`, `ec_enzyme_number`]\n- Table: `pii_uridylyltransferase_glutamine_synthetase_adenylyltransferase_family`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `has_parts`, `biological_process`, `molecular_function`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `instance_of`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_rank`, `parent_taxon`, `taxon_name`, `instance_of`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `mesh_descriptor_id`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`, `catalogue_of_life_id`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Iduronate-2-sulfatase RB11127', 'microbial protein found in Rhodopirellula baltica SH 1', 'protein', 'iduronate-2-sulfatase RB11127', 'Q7UJQ7', 'metabolism', 'catalytic activity', 'Domain of unknown function DUF4976', 'Rhodopirellula baltica SH 1', 'NP_869797', 'protein', 'Idursulfase');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `genomic_start`, `strand_orientation`, `genomic_end`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `domain_of_unknown_function_duf4976_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales (sales_transaction_id, sales_details)  VALUES (9, 'p');\nDatabase State:\n- Table: Transactions, Columns: [transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details]\n- Table: Transactions_Lots, Columns: [transaction_id, lot_id]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Wrestler_ID`, `Name`, `Reign`, `Days_held`, `Location`, `Event`)  VALUES (6, 'The Great Sasuke \u00a7', '1', '99', 'Tokyo , Japan', 'Live event');\nDatabase State:\n- Table: `wrestler`, Columns: [`Wrestler_ID`, `Name`, `Reign`, `Days_held`, `Location`, `Event`]",
        "Response": "Table: `wrestler`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `part_of`, `follows`, `followed_by`, `topics_main_category`, `point_in_time`, `has_list`, `commons_category`)  VALUES ('656', 'year', 'year', '650s', '655', '657', 'Category:656', '+0656-01-01T00:00:00Z', 'list of state leaders in 656', '656.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details)  VALUES (801801, 4, 'How to read a book', 'w', NULL);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Documents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `club_rank` (`Rank`, `Club_ID`, `Gold`, `Silver`, `Bronze`, `Total`)  VALUES (5.0, 5, 3.0, 3.0, 0.0, 6.0);\nDatabase State:\n- Table: `club`, Columns: [`Club_ID`, `name`, `Region`, `Start_year`]\n- Table: `player`, Columns: [`Player_ID`, `name`, `Position`, `Club_ID`, `Apps`, `Tries`, `Goals`, `Points`]\n- Table: `competition_result`, Columns: [`Competition_ID`, `Club_ID_1`, `Club_ID_2`, `Score`]\n- Table: `club_rank`, Columns: [`Rank`, `Club_ID`, `Gold`, `Silver`, `Bronze`, `Total`]",
        "Response": "Table: `club_rank`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Department_ID`, `Name`, `Creation`, `Ranking`, `Budget_in_Billions`, `Num_Employees`)  VALUES (10, 'Housing and Urban Development', '1965', 10, 46.20000000000000284, 10600.0);\nDatabase State:\n- Table: `department`, Columns: [`Department_ID`, `Name`, `Creation`, `Ranking`, `Budget_in_Billions`, `Num_Employees`]",
        "Response": "Table: `department`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `appellations` (`No`)  VALUES (18, 'Green Valley of Russian River Valley', 'Sonoma', 'California', 'North Coast', 'Yes');\nDatabase State:\n- Table: `wine`, Columns: [`No`]\n- Table: `grapes`, Columns: [`ID`]",
        "Response": "Table: `appellations`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('DNA-directed RNA polymerase beta'' chain Atu1955', 'microbial protein found in Agrobacterium fabrum str. C58', 'Q8UE09', 'DNA-directed RNA polymerase beta'' chain Atu1955', 'transcription, DNA-templated', 'DNA binding', 'RNA polymerase, N-terminal', 'Agrobacterium fabrum str. C58', 'NP_354930', 'protein', 'DNA-directed RNA polymerase, subunit beta-prime', 'protein');\nDatabase State:\n- Table: `rna_polymerase_rpb1_domain_1_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `instance_of`, `genomic_start`, `strand_orientation`, `genomic_end`, `ncbi_locus_tag`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `located_in_the_administrative_territorial_entity`, `coat_of_arms_image`, `coordinate_location`, `country`, `instance_of`, `freebase_id`, `nisins_code`, `geonames_id`, `shares_border_with`, `topics_main_category`, `official_website`, `postal_code`, `local_dialing_code`, `image`, `area`, `musicbrainz_area_id`, `annual_number_of_weddings`, `population`, `whos_on_first_id`, `viaf_id`, `locator_map_image`, `located_in_time_zone`, `list_of_monuments`)  VALUES ('Leuven', 'capital city of Flemish Brabant, Belgium', 'Leuven', 'Arrondissement of Leuven', 'Wapen van Leuven.svg', '50.8775', 'Belgium', 'Belgian municipality with the title of city', '/m/0k6bt', '24062', '2792483.0', 'Rotselaar', 'Category:Leuven', 'https://www.leuven.be', '3000.0', '16', 'Oude Markt Leuven.jpg', 56.63000000000000255, '38f97ed2-6128-4da3-be1d-423d75331ff2', 479.0, 101032.0, '101748089.0', '124318105', 'Leuven Flemish-Brabant Belgium Map.svg', 'UTC+01:00', 'Onroerend erfgoed in Leuven');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `location_or_destination_point`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score)  VALUES (36, 8, 2015, 16);\nDatabase State:\n- Table: ranking_criteria, Columns: [id, ranking_system_id, criteria_name]\n- Table: university_year, Columns: [university_id, year, num_students, student_staff_ratio, pct_international_students, pct_female_students]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO locations (LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID)  VALUES (3200, 'Mariano Escobedo 9991', '11932', 'Mexico City', '\"Distrito Federal', '\"');\nDatabase State:\n- Table: employees, Columns: [EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]\n- Table: jobs, Columns: [JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]\n- Table: job_history, Columns: [EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]\n- Table: regions, Columns: [REGION_ID, REGION_NAME]\n- Table: countries, Columns: [COUNTRY_ID, COUNTRY_NAME, REGION_ID]\n- Table: departments, Columns: [DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]",
        "Response": "Table: locations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('electron transfer flavoprotein subunit alpha PA2951', 'microbial gene found in Pseudomonas aeruginosa PAO1', '882932', 'gene', 'Electron transfer flavoprotein subunit alpha PA2951', 'Pseudomonas aeruginosa PAO1', 'reverse strand', '3311720', '3310791', 'gene', 'PA2951');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `electron_transfer_flavoprotein_alpha_subunit_c_terminal_domain_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `taxon_rank`, `parent_taxon`, `taxon_name`, `image`, `commons_category`, `topics_main_category`, `ncbi_taxonomy_id`, `itis_tsn`, `instance_of`, `freebase_id`, `tropicos_id`, `encyclopedia_of_life_id`, `ipni_plant_id`, `grin_url`, `usda_plants_id`, `flora_of_china_id`, `dyntaxa_id`, `gbif_taxon_id`, `new_zealand_organisms_register_id`, `taxon_common_name`, `eppo_code`, `plants_of_the_world_online_id`, `irmng_id`, `inaturalist_taxon_id`, `mesh_descriptor_id`, `world_flora_online_id`, `open_tree_of_life_id`, `national_library_of_israel_j9u_id`, `catalogue_of_life_id`, `described_by_source`)  VALUES ('Magnolia', 'genus of plants', 'genus', 'Magnolioideae', 'Magnolia', 'Magnolia wieseneri.jpg', 'Magnolia', 'Category:Magnolia', '3402', '18069.0', 'taxon', '/m/0b1lz', '40012123.0', '44478', '25589-1', 'https://npgsweb.ars-grin.gov/gringlobal/taxonomygenus.aspx?id=7165', 'MAGNO', '119452.0', '6010517.0', '2888195', '139e5de5-0ca5-4654-9797-aa575b87d3c2', 'magnolia', '1MAGG', 'urn:lsid:ipni.org:names:30000709-2', '1307983.0', '82096', 'D031566', 'wfo-4000022860', '288480', '9.870075435541052e+17', '8VZ4K', 'Armenian Soviet Encyclopedia');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `kegg_id`, `pubchem_substance_id_sid`, `natural_product_of_taxon`, `subclass_of`, `part_of`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Product_Suppliers (product_id, supplier_id, date_supplied_from, date_supplied_to, total_amount_purchased, total_value_purchased)  VALUES (7, 4, '2017-11-17 08:23:16', '2018-03-25 12:03:33', '20689.78', 61800.94999999999709);\nDatabase State:\n- Table: Departments, Columns: [department_id, dept_store_id, department_name]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status_code, order_date]\n- Table: Customer_Addresses, Columns: [customer_id, address_id, date_from, date_to]\n- Table: Suppliers, Columns: [supplier_id, supplier_name, supplier_phone]",
        "Response": "Table: Product_Suppliers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO actor (ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth)  VALUES (351, 'Efrem Zimbalist Jr.', '1918-11-30', 'New York City', 'USA', 72, 'It''s hardly surprising that the son of renowned Russian-born concert violinist Efrem Zimbalist Sr. (1889-1985) and Romanian-born opera singer Alma Gluck (1884-1938) would desire a performing career of some kind. Born in New York City on November 30, 1918, surrounded by people of wealth and privilege throughout his childhood, Efrem Zimbalist Jr. ...', 'Male', 'White', NULL);\nDatabase State:\n- Table: actor, Columns: [ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth]\n- Table: movie, Columns: [MovieID, Title, `MPAA Rating`, Budget, Gross, `Release Date`, Genre, Runtime, Rating, `Rating Count`, Summary]\n- Table: characters, Columns: [MovieID, ActorID, `Character Name`, creditOrder, pay, screentime]",
        "Response": "Table: actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories)  VALUES (1090, 14.07000000000000028, 31.67999999999999972, 0.0, 6.169999999999999929, 1.239999999999999992, 28.76000000000000156, 207.1100000000000137, 2.160000000000000143, 4.849999999999999645, 117.7600000000000051, 1.780000000000000026, 53.11999999999999745, 23.28999999999999915, 23.58999999999999986, 238.5699999999999932);\nDatabase State:\n- Table: Quantity, Columns: [quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional]\n- Table: Recipe, Columns: [recipe_id, title, subtitle, servings, yield_unit, prep_min, cook_min, stnd_min, source, intro, directions]\n- Table: Ingredient, Columns: [ingredient_id, category, name, plural]\n- Table: Nutrition, Columns: [recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories]",
        "Response": "Table: Nutrition"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO employee (emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date)  VALUES ('A-C71970F', 'Aria', '', 'Cruz', 10, 87, '1389', '1991-10-26 00:00:00.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `body_builder` (`Body_Builder_ID`, `People_ID`, `Snatch`, `Clean_Jerk`, `Total`)  VALUES (5, 6, 130.0, 162.5, 292.5);\nDatabase State:\n- Table: `body_builder`, Columns: [`Body_Builder_ID`, `People_ID`, `Snatch`, `Clean_Jerk`, `Total`]\n- Table: `people`, Columns: [`People_ID`, `Name`, `Height`, `Weight`, `Birth_Date`, `Birth_Place`]",
        "Response": "Table: `body_builder`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `a50_motorway` (`label`, `description`, `instance_of`, `coordinate_location`, `country`, `part_of`, `located_in_the_administrative_territorial_entity`, `described_at_url`)  VALUES ('Emmeloord interchange', 'interchange in the Netherlands', 'interchange', '52.692778', 'Netherlands', 'A6 motorway', 'Noordoostpolder', 'https://www.wegenwiki.nl/Knooppunt_Emmeloord');\nDatabase State:\n- Table: `human_settlement`, Columns: [`label`, `description`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `instance_of`]\n- Table: `a50_motorway`, Columns: [`label`, `description`, `instance_of`, `coordinate_location`, `country`, `part_of`, `located_in_the_administrative_territorial_entity`, `described_at_url`]\n- Table: `jurisdiction`, Columns: [`label`, `description`, `cbs_municipality_code`, `commons_category`, `flag_image`, `coat_of_arms_image`, `postal_code`, `country`, `coordinate_location`, `instance_of`, `shares_border_with`, `freebase_id`, `geonames_id`, `contains_settlement`, `topics_main_category`, `image`, `locator_map_image`, `official_website`, `population`, `number_of_households`, `elevation_above_sea_level`, `located_in_time_zone`, `coat_of_arms`, `viaf_id`, `flag`, `area`, `amsterdam_code`, `located_in_the_administrative_territorial_entity`, `category_for_maps`, `worldcat_identities_id`, `rkd_thesaurus_id`, `inaturalist_place_id`, `email_address`, `kvk_company_id`, `local_dialing_code`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `cbs_municipality_code`, `commons_category`, `flag_image`, `coat_of_arms_image`, `local_dialing_code`, `locator_map_image`, `country`, `coordinate_location`, `instance_of`, `shares_border_with`, `freebase_id`, `geonames_id`, `contains_settlement`, `topics_main_category`, `image`, `official_website`, `population`, `number_of_households`, `located_in_time_zone`, `coat_of_arms`, `gnd_id`, `viaf_id`, `elevation_above_sea_level`, `flag`, `area`, `postal_code`, `amsterdam_code`, `located_in_the_administrative_territorial_entity`, `category_for_maps`, `worldcat_identities_id`, `rkd_thesaurus_id`, `inaturalist_place_id`, `email_address`, `kvk_company_id`, `telephone_number`]\n- Table: `depiction`, Columns: [`label`, `description`, `commons_category`, `image`]\n- Table: `coat_of_arms`, Columns: [`label`, `description`, `country`, `instance_of`, `image`, `applies_to_jurisdiction`, `depicts`, `significant_event`, `google_knowledge_graph_id`]\n- Table: `political_border`, Columns: [`label`, `description`, `cbs_municipality_code`, `commons_category`, `flag_image`, `coat_of_arms_image`, `postal_code`, `country`, `coordinate_location`, `instance_of`, `shares_border_with`, `freebase_id`, `geonames_id`, `contains_settlement`, `topics_main_category`, `image`, `locator_map_image`, `official_website`, `population`, `number_of_households`, `elevation_above_sea_level`, `located_in_time_zone`, `coat_of_arms`, `viaf_id`, `flag`, `area`, `amsterdam_code`, `located_in_the_administrative_territorial_entity`, `category_for_maps`, `worldcat_identities_id`, `rkd_thesaurus_id`, `inaturalist_place_id`, `email_address`, `kvk_company_id`, `local_dialing_code`, `musicbrainz_area_id`]",
        "Response": "Table: `a50_motorway`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)  VALUES (5, 'Veterenarian', 'Danny', replace('188 VonRueden Tunnel Suite 630\\nNorth Macibury, NV ','\\n',char(10)), 'New Laurytown', 'Hawaii', '84515', 'Considine', 'mekhi.little@example.org', '1-609-566-2752x25197', '011.193.9081x3186');\nDatabase State:\n- Table: Owners, Columns: [owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number]\n- Table: Treatment_Types, Columns: [treatment_type_code, treatment_type_description]\n- Table: Treatments, Columns: [treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment]\n- Table: Breeds, Columns: [breed_code, breed_name]\n- Table: Charges, Columns: [charge_id, charge_type, charge_amount]\n- Table: Dogs, Columns: [dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed]\n- Table: Professionals, Columns: [professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number]",
        "Response": "Table: Professionals"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `molecular_function` (`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`, `ec_enzyme_number`, `has_parts`)  VALUES ('lipopolysaccharide glucosyltransferase II activity', 'Catalysis of the reaction: lipopolysaccharide + UDP-D-glucose = D-glucosyl-lipopolysaccharide + UDP.', 'GO:0047270', 'UDP-glucosyltransferase activity', 'http://purl.obolibrary.org/obo/GO_0047270', 'molecular function', '2.4.1.73', 'nan');\nDatabase State:\n- Table: `udp_glucosyltransferase`, Columns: [`label`, `description`, `ec_enzyme_number`, `molecular_function`, `instance_of`, `subclass_of`, `freebase_id`]",
        "Response": "Table: `molecular_function`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `protein` (`common_name`, `protein_name`, `divergence_from_human_lineage`, `accession_number`, `sequence_length`, `sequence_identity_to_human_protein`, `Institution_id`)  VALUES ('body louse', 'Centromeric protein E, putative', 782.7000000000000454, 'XP_002429877.1', 2086.0, '30%', '5');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `protein`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SalesOrderDetail (SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate)  VALUES (49127, 26812, '01A1-43AB-A2', 2, 765, 1, 470.0, 0.0, 940.0, '3A5D1C4C-7F06-4B7B-8EF7-C64B3D84E440', '2012-12-31 00:00:00.0');\nDatabase State:\n- Table: ProductCategory, Columns: [ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: SpecialOfferProduct, Columns: [SpecialOfferID, ProductID, rowguid, ModifiedDate]\n- Table: CountryRegion, Columns: [CountryRegionCode, Name, ModifiedDate]\n- Table: SalesPerson, Columns: [BusinessEntityID, TerritoryID, SalesQuota, Bonus, CommissionPct, SalesYTD, SalesLastYear, rowguid, ModifiedDate]\n- Table: PurchaseOrderHeader, Columns: [PurchaseOrderID, RevisionNumber, Status, EmployeeID, VendorID, ShipMethodID, OrderDate, ShipDate, SubTotal, TaxAmt, Freight, TotalDue, ModifiedDate]\n- Table: `Document`, Columns: [DocumentNode, DocumentLevel, Title, Owner, FolderFlag, FileName, FileExtension, Revision, ChangeNumber, Status, DocumentSummary, Document, rowguid, ModifiedDate]\n- Table: `BusinessEntity`, Columns: [BusinessEntityID, rowguid, ModifiedDate]\n- Table: ProductPhoto, Columns: [ProductPhotoID, ThumbNailPhoto, ThumbnailPhotoFileName, LargePhoto, LargePhotoFileName, ModifiedDate]\n- Table: Store, Columns: [BusinessEntityID, Name, SalesPersonID, Demographics, rowguid, ModifiedDate]\n- Table: `PhoneNumberType`, Columns: [PhoneNumberTypeID, Name, ModifiedDate]\n- Table: SalesTaxRate, Columns: [SalesTaxRateID, StateProvinceID, TaxType, TaxRate, Name, rowguid, ModifiedDate]\n- Table: Vendor, Columns: [BusinessEntityID, AccountNumber, Name, CreditRating, PreferredVendorStatus, ActiveFlag, PurchasingWebServiceURL, ModifiedDate]\n- Table: Employee, Columns: [BusinessEntityID, NationalIDNumber, LoginID, OrganizationNode, OrganizationLevel, JobTitle, BirthDate, MaritalStatus, Gender, HireDate, SalariedFlag, VacationHours, SickLeaveHours, CurrentFlag, rowguid, ModifiedDate]\n- Table: `BillOfMaterials`, Columns: [BillOfMaterialsID, ProductAssemblyID, ComponentID, StartDate, EndDate, UnitMeasureCode, BOMLevel, PerAssemblyQty, ModifiedDate]\n- Table: Customer, Columns: [CustomerID, PersonID, StoreID, TerritoryID, AccountNumber, rowguid, ModifiedDate]\n- Table: PersonCreditCard, Columns: [BusinessEntityID, CreditCardID, ModifiedDate]\n- Table: ProductProductPhoto, Columns: [ProductID, ProductPhotoID, `Primary`, ModifiedDate]\n- Table: ProductVendor, Columns: [ProductID, BusinessEntityID, AverageLeadTime, StandardPrice, LastReceiptCost, LastReceiptDate, MinOrderQty, MaxOrderQty, OnOrderQty, UnitMeasureCode, ModifiedDate]\n- Table: ProductInventory, Columns: [ProductID, LocationID, Shelf, Bin, Quantity, rowguid, ModifiedDate]\n- Table: Password, Columns: [BusinessEntityID, PasswordHash, PasswordSalt, rowguid, ModifiedDate]\n- Table: CountryRegionCurrency, Columns: [CountryRegionCode, CurrencyCode, ModifiedDate]\n- Table: SalesTerritory, Columns: [TerritoryID, Name, CountryRegionCode, `Group`, SalesYTD, SalesLastYear, CostYTD, CostLastYear, rowguid, ModifiedDate]\n- Table: ProductModelProductDescriptionCulture, Columns: [ProductModelID, ProductDescriptionID, CultureID, ModifiedDate]\n- Table: SalesOrderDetail, Columns: [SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate]\n- Table: `AddressType`, Columns: [AddressTypeID, Name, rowguid, ModifiedDate]\n- Table: `EmployeeDepartmentHistory`, Columns: [BusinessEntityID, DepartmentID, ShiftID, StartDate, EndDate, ModifiedDate]\n- Table: `CurrencyRate`, Columns: [CurrencyRateID, CurrencyRateDate, FromCurrencyCode, ToCurrencyCode, AverageRate, EndOfDayRate, ModifiedDate]\n- Table: PurchaseOrderDetail, Columns: [PurchaseOrderID, PurchaseOrderDetailID, DueDate, OrderQty, ProductID, UnitPrice, LineTotal, ReceivedQty, RejectedQty, StockedQty, ModifiedDate]\n- Table: Person, Columns: [BusinessEntityID, PersonType, NameStyle, Title, FirstName, MiddleName, LastName, Suffix, EmailPromotion, AdditionalContactInfo, Demographics, rowguid, ModifiedDate]\n- Table: SalesOrderHeaderSalesReason, Columns: [SalesOrderID, SalesReasonID, ModifiedDate]\n- Table: ProductModel, Columns: [ProductModelID, Name, CatalogDescription, Instructions, rowguid, ModifiedDate]\n- Table: Culture, Columns: [CultureID, Name, ModifiedDate]\n- Table: SalesPersonQuotaHistory, Columns: [BusinessEntityID, QuotaDate, SalesQuota, rowguid, ModifiedDate]\n- Table: `CreditCard`, Columns: [CreditCardID, CardType, CardNumber, ExpMonth, ExpYear, ModifiedDate]\n- Table: WorkOrder, Columns: [WorkOrderID, ProductID, OrderQty, StockedQty, ScrappedQty, StartDate, EndDate, DueDate, ScrapReasonID, ModifiedDate]\n- Table: `Location`, Columns: [LocationID, Name, CostRate, Availability, ModifiedDate]\n- Table: ProductDescription, Columns: [ProductDescriptionID, Description, rowguid, ModifiedDate]\n- Table: ScrapReason, Columns: [ScrapReasonID, Name, ModifiedDate]\n- Table: `Department`, Columns: [DepartmentID, Name, GroupName, ModifiedDate]\n- Table: ShipMethod, Columns: [ShipMethodID, Name, ShipBase, ShipRate, rowguid, ModifiedDate]",
        "Response": "Table: SalesOrderDetail"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `refseq_protein_id`, `encoded_by`, `subclass_of`, `biological_process`, `molecular_function`, `has_parts`, `part_of`, `instance_of`)  VALUES ('(p)ppGpp synthetase I O3K_05590', 'microbial protein found in Escherichia coli O104:H4 str. 2011C-3493', 'A0A0E0XWK7', 'Escherichia coli O104:H4 str. 2011C-3493', 'YP_006777830', '(p)ppGpp synthetase I O3K_05590', 'protein', 'phosphorylation', 'GTP diphosphokinase activity', 'TGS', 'RelA/SpoT family', 'protein');\nDatabase State:\n- Table: `rela_tgs_domain_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `refseq_protein_id`, `encoded_by`, `subclass_of`, `biological_process`, `molecular_function`, `has_parts`, `part_of`, `instance_of`]",
        "Response": "Table: `rela_tgs_domain_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Translaldolase lmo0343', 'microbial protein found in Listeria monocytogenes EGD-e', 'Listeria monocytogenes EGD-e', 'protein', 'translaldolase lmo0343', 'P66957', 'pentose-phosphate shunt', 'catalytic activity', 'cytoplasm', 'Transaldolase, active site', 'protein', 'NP_463873', 'Transaldolase type 3B, putative');\nDatabase State:\n- Table: `transaldolase_type_3b_putative`, Columns: [`label`, `description`, `found_in_taxon`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `instance_of`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `encodes`, Columns: [`label`, `description`, `found_in_taxon`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `commune_of_benin` (`label`, `description`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `coordinate_location`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `elevation_above_sea_level`, `area`, `gadm_id`, `inaturalist_place_id`)  VALUES ('Allada', 'commune of Benin', 'Atlantique Department', 'Allada', 'Benin', '6.665', 'Category:Allada', 'commune of Benin', '/m/09ld29', '8260655.0', 77.0, 381.0, 'BEN.3.2_1', '15024.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `commune_of_benin`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Block (BlockFloor, BlockCode)  VALUES (4, 3);\nDatabase State:\n- Table: Room, Columns: [RoomNumber, RoomType, BlockFloor]",
        "Response": "Table: Block"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Teacher_ID`, `Name`, `Age`, `Hometown`)  VALUES (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough');\nDatabase State:\n- Table: `course`, Columns: [`Course_ID`, `Staring_Date`, `Course`]\n- Table: `teacher`, Columns: [`Teacher_ID`, `Name`, `Age`, `Hometown`]",
        "Response": "Table: `teacher`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Club (ClubID, ClubName, ClubDesc, ClubLocation)  VALUES (2, 'Hopkins Student Enterprises', 'Venture capital fund for student business.', 'AKW');\nDatabase State:\n- Table: Member_of_club, Columns: [StuID, ClubID, Position]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Club, Columns: [ClubID, ClubName, ClubDesc, ClubLocation]",
        "Response": "Table: Club"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (investor_id, Investor_details)  VALUES (8, 't');\nDatabase State:\n- Table: Transactions, Columns: [transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details]\n- Table: Transactions_Lots, Columns: [transaction_id, lot_id]\n- Table: Investors, Columns: [investor_id, Investor_details]\n- Table: Sales, Columns: [sales_transaction_id, sales_details]\n- Table: Lots, Columns: [lot_id, investor_id, lot_details]\n- Table: Purchases, Columns: [purchase_transaction_id, purchase_details]\n- Table: Ref_Transaction_Types, Columns: [transaction_type_code, transaction_type_description]",
        "Response": "Table: Investors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Catalog_Structure (catalog_level_number, catalog_id, catalog_level_name)  VALUES (8, 2, 'Sub-Category');\nDatabase State:\n- Table: Catalog_Contents_Additional_Attributes, Columns: [catalog_entry_id, catalog_level_number, attribute_id, attribute_value]\n- Table: Catalog_Contents, Columns: [catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]\n- Table: Attribute_Definitions, Columns: [attribute_id, attribute_name, attribute_data_type]\n- Table: Catalogs, Columns: [catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]",
        "Response": "Table: Catalog_Structure"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `paragraphs` (id, ParagraphNum, PlainText, character_id, chapter_id)  VALUES (662559, 591, replace('Why, boy, although our mother, unadvised,\\nGave you a dancing-rapier by your side,\\nAre you so desperate grown, to threat your friends?\\nGo to; have your lath glued within your sheath\\nTill you know better how to handle it.','\\n',char(10)), 305, 19574);\nDatabase State:\n- Table: `paragraphs`, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]\n- Table: `works`, Columns: [id, Title, LongTitle, Date, GenreType]",
        "Response": "Table: `paragraphs`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Catalog_Contents_Additional_Attributes (catalog_entry_id, catalog_level_number, attribute_id, attribute_value)  VALUES (5, 8, 4, '1');\nDatabase State:\n- Table: Catalog_Structure, Columns: [catalog_level_number, catalog_id, catalog_level_name]\n- Table: Catalog_Contents, Columns: [catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]\n- Table: Attribute_Definitions, Columns: [attribute_id, attribute_name, attribute_data_type]\n- Table: Catalogs, Columns: [catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]\n- Table: Catalog_Contents_Additional_Attributes, Columns: [catalog_entry_id, catalog_level_number, attribute_id, attribute_value]",
        "Response": "Table: Catalog_Contents_Additional_Attributes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `followed_by` (`label`, `description`, `instance_of`, `sport`, `country`, `point_in_time`, `follows`, `followed_by`, `competition_class`, `has_parts`, `on_focus_list_of_wikimedia_project`)  VALUES ('1967 South African Badminton Championships', 'badminton championships', 'South African Badminton Championships', 'badminton', 'South Africa', '+1967-00-00T00:00:00Z', '1966 South African Badminton Championships', '1968 South African Badminton Championships', 'national championship', '1967 South Africa Badminton Championships \u2013 men''s singles', 'WikiProject Badminton/tournament focus list');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO PROFESSOR (EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE)  VALUES (228, 'CIS', 'KLR 300', '3000', 'Ph.D.');\nDatabase State:\n- Table: EMPLOYEE, Columns: [EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB]\n- Table: ENROLL, Columns: [CLASS_CODE, STU_NUM, ENROLL_GRADE]\n- Table: CLASS, Columns: [CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]",
        "Response": "Table: PROFESSOR"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `natural_product` (`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Escherichia coli O157:H7 str. Sakai', 'bacterial strain', 'Escherichia coli O157:H7 str. Sakai', 'Escherichia coli', '386585', 'strain', 'Gram-negative bacteria', 'GCA_000008865.1');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO IMG_OBJ_ATT (IMG_ID, ATT_CLASS_ID, OBJ_SAMPLE_ID)  VALUES (712998, 692, 1);\nDatabase State:\n- Table: IMG_OBJ, Columns: [IMG_ID, OBJ_SAMPLE_ID, OBJ_CLASS_ID, X, Y, W, H]\n- Table: PRED_CLASSES, Columns: [PRED_CLASS_ID, PRED_CLASS]\n- Table: OBJ_CLASSES, Columns: [OBJ_CLASS_ID, OBJ_CLASS]\n- Table: ATT_CLASSES, Columns: [ATT_CLASS_ID, ATT_CLASS]\n- Table: IMG_OBJ_ATT, Columns: [IMG_ID, ATT_CLASS_ID, OBJ_SAMPLE_ID]",
        "Response": "Table: IMG_OBJ_ATT"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (playlist_id, track_id)  VALUES (8, 1872);\nDatabase State:\n- Table: invoices, Columns: [id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]\n- Table: employees, Columns: [id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]\n- Table: playlist_tracks, Columns: [playlist_id, track_id]\n- Table: tracks, Columns: [id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]\n- Table: albums, Columns: [id, title, artist_id]\n- Table: invoice_lines, Columns: [id, invoice_id, track_id, unit_price, quantity]\n- Table: media_types, Columns: [id, name]\n- Table: artists, Columns: [id, name]\n- Table: playlists, Columns: [id, name]",
        "Response": "Table: playlist_tracks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `manufacturer`, `category_for_pictures_taken_with_equipment`, `subclass_of`, `commons_category`)  VALUES ('Fujifilm XQ1', 'digital camera model', 'digital camera model', 'Fujifilm', 'Category:Taken with Fujifilm XQ1', 'compact digital camera', 'Fujifilm XQ1');\nDatabase State:\n- Table: `wikimedia_category`, Columns: [`label`, `description`, `instance_of`, `manufacturer`, `category_for_pictures_taken_with_equipment`, `subclass_of`, `commons_category`]\n- Table: `compact_digital_camera`, Columns: [`label`, `description`, `instance_of`, `manufacturer`, `category_for_pictures_taken_with_equipment`, `subclass_of`, `commons_category`]",
        "Response": "Table: `compact_digital_camera`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, Name, CountryCode, District, Population)  VALUES (3778, 'Nam Dinh', 'VNM', 'Nam Ha', 171699);\nDatabase State:\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]\n- Table: City, Columns: [ID, Name, CountryCode, District, Population]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `tmp21_related` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `ensembl_protein_id`, `cell_component`, `biological_process`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Toll like receptor adaptor molecule 2', 'mammalian protein found in Homo sapiens', 'TICAM2', 'Q86XR7', 'ENSP00000415139', 'cytoplasm', 'toll-like receptor 4 signaling pathway', 'Toll/interleukin-1 receptor homology (TIR) domain', 'Homo sapiens', 'NP_067681', 'protein', 'Toll/interleukin-1 receptor homology (TIR) domain superfamily');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `ensembl_transcript_id`, `refseq_rna_id`, `ortholog`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`]",
        "Response": "Table: `tmp21_related`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (region_id, game_platform_id, num_sales)  VALUES (1, 9589, 3.830000000000000071);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `car_names` (`MakeId`)  VALUES (245, 'chevrolet', 'chevrolet chevette');\nDatabase State:\n- Table: `cars_data`, Columns: [`Id`]\n- Table: `continents`, Columns: [`ContId`]\n- Table: `car_names`, Columns: [`MakeId`]",
        "Response": "Table: `car_names`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country)  VALUES (61, 'Que Del\u00edcia', 'Bernardo Batista', 'Rua da Panificadora, 12', 'Rio de Janeiro', '02389-673', 'Brazil');\nDatabase State:\n- Table: OrderDetails, Columns: [OrderDetailID, OrderID, ProductID, Quantity]\n- Table: Orders, Columns: [OrderID, CustomerID, EmployeeID, OrderDate, ShipperID]\n- Table: Customers, Columns: [CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country]\n- Table: Shippers, Columns: [ShipperID, ShipperName, Phone]\n- Table: Products, Columns: [ProductID, ProductName, SupplierID, CategoryID, Unit, Price]\n- Table: Suppliers, Columns: [SupplierID, SupplierName, ContactName, Address, City, PostalCode, Country, Phone]\n- Table: Categories, Columns: [CategoryID, CategoryName, Description]\n- Table: Employees, Columns: [EmployeeID, LastName, FirstName, BirthDate, Photo, Notes]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (2257, 178, 0.05000000000000000277, NULL, 'Remain in Light', 'American Pilsner', 12.0);\nDatabase State:\n- Table: `beers`, Columns: [id, brewery_id, abv, ibu, name, style, ounces]",
        "Response": "Table: `beers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `film` (`Film_ID`, `Title`, `Studio`, `Director`, `Gross_in_dollar`)  VALUES (2, 'Tootsie', 'Columbia', 'Sydney Pollack', 177200000);\nDatabase State:\n- Table: `market`, Columns: [`Market_ID`, `Country`, `Number_cities`]",
        "Response": "Table: `film`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Projects (Code, Name, Hours)  VALUES ('AeH6', 'Aerodynamics of Air Hockey', 89);\nDatabase State:\n- Table: Scientists, Columns: [SSN, Name]\n- Table: Projects, Columns: [Code, Name, Hours]\n- Table: AssignedTo, Columns: [Scientist, Project]",
        "Response": "Table: Projects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO advisor (s_ID, i_ID)  VALUES ('62754', '95030');\nDatabase State:\n- Table: course, Columns: [course_id, title, dept_name, credits]\n- Table: section, Columns: [course_id, sec_id, semester, year, building, room_number, time_slot_id]\n- Table: instructor, Columns: [ID, name, dept_name, salary]\n- Table: prereq, Columns: [course_id, prereq_id]\n- Table: classroom, Columns: [building, room_number, capacity]\n- Table: advisor, Columns: [s_ID, i_ID]\n- Table: department, Columns: [dept_name, building, budget]\n- Table: time_slot, Columns: [time_slot_id, day, start_hr, start_min, end_hr, end_min]\n- Table: student, Columns: [ID, name, dept_name, tot_cred]",
        "Response": "Table: advisor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `found_in_taxon`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('PTS system glucose-specific EIICB component ECL_02535', 'microbial gene found in Enterobacter cloacae subsp. cloacae ATCC 13047', '9125021', 'Enterobacter cloacae subsp. cloacae ATCC 13047', 'gene', 'PTS system glucose-specific EIICB component ECL_02535', 'ECL_02535', 'gene', '2585719', 'reverse strand', '2584286');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (university_id, ranking_criteria_id, year, score)  VALUES (106, 19, 2014, 310);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `capital_city` (`label`, `description`, `country`, `coordinate_location`, `commons_category`, `located_in_the_administrative_territorial_entity`, `image`, `geonames_id`, `instance_of`, `danish_urban_area_code`, `located_in_time_zone`, `capital_of`, `whos_on_first_id`, `den_store_danske_id`, `trap_danmark_id`)  VALUES ('Horslunde', 'town in Zealand, Denmark', 'Denmark', '54.9108', 'Horslunde', 'Lolland Municipality', 'Horslunde.jpg', '2619760', 'town', '10446', 'UTC+01:00', 'Ravnsborg Municipality', '1343922765', 'Horslunde', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `capital_city`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (groupName, totalSnatched, artist, groupYear, releaseType, groupId, id)  VALUES ('v', 26, 'sinitus tempo', 2016, 'album', 73189231, 71293);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `torrents`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`id`, `Vehicle_Flight_number`, `Date`, `Pilot`, `Velocity`, `Altitude`, `airport_id`, `company_id`)  VALUES (6, 'M2-F1 #21', 'January 29, 1964', 'Thompson', 240.0, 3650.0, 4, 6);\nDatabase State:\n- Table: `airport`, Columns: [`id`, `City`, `Country`, `IATA`, `ICAO`, `name`]",
        "Response": "Table: `flight`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `beers` (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (1588, 371, 0.05500000000000000027, 16.0, 'Sly Fox Christmas Ale 2013', 'Winter Warmer', 12.0);\nDatabase State:\n- Table: breweries, Columns: [id, name, city, state]",
        "Response": "Table: `beers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Publication_ID`, `Book_ID`, `Publisher`, `Publication_Date`, `Price`)  VALUES (7, 10, 'Bertelsmann', 'April 2007', 2000000.0);\nDatabase State:\n- Table: `book`, Columns: [`Book_ID`, `Title`, `Issues`, `Writer`]\n- Table: `publication`, Columns: [`Publication_ID`, `Book_ID`, `Publisher`, `Publication_Date`, `Price`]",
        "Response": "Table: `publication`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO user (UserID, Gender)  VALUES ('tw-328127508', 'Male');\nDatabase State:\n- Table: location, Columns: [LocationID, Country, State, StateCode, City]\n- Table: twitter, Columns: [TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, `text`, LocationID, UserID]\n- Table: user, Columns: [UserID, Gender]",
        "Response": "Table: user"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `found_in_taxon`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('DNA topoisomerase TopB HMPREF0351_10562', 'microbial gene found in Enterococcus faecium DO', '12999225.0', 'Enterococcus faecium DO', 'gene', 'DNA topoisomerase TopB HMPREF0351_10562', 'HMPREF0351_10562', 'gene', '561569', 'forward strand', '559551');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `country` (`label`, `description`, `great_russian_encyclopedia_online_id`, `coordinates_of_southernmost_point`, `new_york_times_topic_id`, `gnd_id`, `category_of_associated_people`, `emergency_phone_number`, `electrical_plug_type`, `licence_plate_code`, `hashtag`, `babelnet_id`, `office_held_by_head_of_government`, `curlie_id`, `native_label`, `musicbrainz_area_id`, `uic_alphabetical_country_code`, `comic_vine_id`, `insee_countries_and_foreign_territories_code`, `vat_rate`, `diplomatic_relation`, `flag_image`, `commons_gallery`, `viaf_id`, `history_of_topic`, `capital`, `subreddit`, `openstreetmap_relation_id`, `mobile_country_code`, `maritime_identification_digits`, `nkcr_aut_id`, `asc_leiden_thesaurus_id`, `marriageable_age`, `category_of_people_buried_here`, `motto_text`, `geoshape`, `coordinates_of_easternmost_point`, `le_monde_diplomatique_subject_id`, `marine_regions_geographic_id`, `member_of`, `unemployment_rate`, `railway_traffic_side`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `office_held_by_head_of_state`, `commons_category`, `shares_border_with`, `us_national_archives_identifier`, `nalt_id`, `treccani_id`, `iso_3166_1_numeric_code`, `coordinates_of_westernmost_point`, `country_calling_code`, `stw_thesaurus_for_economics_id`, `statoids_id`, `named_after`, `flag`, `fips_10_4_countries_and_regions`, `isni`, `nese_id`, `maintained_by_wikiproject`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `geonames_id`, `unicode_character`, `unesco_thesaurus_id`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `official_name`, `quora_topic_id`, `mesh_descriptor_id`, `guardian_topic_id`, `basic_form_of_government`, `coat_of_arms_image`, `ituisoiec_object_identifier`, `legislative_body`, `freebase_id`, `official_language`, `replaces`, `continent`, `coat_of_arms`, `age_of_majority`, `national_library_of_israel_id_old`, `on_focus_list_of_wikimedia_project`, `wipo_st3`, `coordinates_of_northernmost_point`, `has_quality`, `iso_3166_1_alpha_2_code`, `total_fertility_rate`, `area`, `store_norske_leksikon_id`, `topics_main_category`, `biblioth\u00e8que_nationale_de_france_id`, `locator_map_image`, `bbc_things_id`, `head_of_government`, `ioc_country_code`, `fast_id`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `page_banner`, `category_for_films_shot_at_this_location`, `mains_voltage`, `executive_body`, `anthem`, `highest_judicial_authority`, `life_expectancy`, `top_level_internet_domain`, `instance_of`, `highest_point`, `category_for_people_born_here`, `driving_side`, `uic_numerical_country_code`, `lowest_point`, `civicus_monitor_country_entry`, `pronunciation_audio`, `idref_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `library_of_congress_authority_id`, `coordinate_location`, `described_by_source`, `brockhaus_enzyklop\u00e4die_online_id`, `iab_code`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `language_used`, `dr_topic_id`, `world_encyclopedia_of_puppetry_arts_id`, `gran_enciclop\u00e8dia_catalana_id`, `whos_on_first_id`, `inaturalist_place_id`, `omegawiki_defined_meaning`, `hds_id`, `gs1_country_code`, `culture`, `geonlp_id`, `analysis_policy_observatory_term_id`, `category_for_maps`, `treccanis_dizionario_di_storia_id`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `larousse_id`, `worldcat_identities_id`, `fandom_article_id`, `eurovoc_id`, `part_of`, `open_data_portal`, `kbpedia_id`, `inception`, `rkd_thesaurus_id`, `pm20_geo_code`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `economy_of_topic`, `uk_parliament_thesaurus_id`, `tasteatlas_id`, `sapa_id`, `bhcl_uuid`, `github_topic`, `namuwiki_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `ysa_id`, `yle_topic_id`, `bbc_news_topic_id`, `joconde_location_id`, `armeniapedia_id`, `zhihu_topic_id`, `idaigazetteer_id`, `encyclopedia_of_the_history_of_ukraine_id`, `den_store_danske_id`, `krugosvet_article`, `schoenberg_database_of_manuscripts_place_id`, `colon_classification`, `national_library_of_israel_j9u_id`, `democracy_index`, `online_pwn_encyclopedia_id`, `postimees_topic_id`, `head_of_state`, `der_spiegel_topic_id`, `museum_digital_place_id`, `wikisimpsons_id`, `urban_electric_transit_country_id`, `m49_code`, `short_name`, `demonym`, `s\u00fcddeutsche_zeitung_topic_id`, `country`, `official_website`, `alltrails_trail_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `central_bank`, `gini_coefficient`, `obo_gazetteer_id`, `openstreetmap_element`, `happy_planet_index_score`, `dewey_decimal_classification`, `giant_bomb_id`, `number_of_out_of_school_children`, `the_top_tens_id`, `grove_art_online_id`, `the_world_factbook_country_id`)  VALUES ('France', 'country in Western Europe', '4721849', '41.33354648385013', 'destination/france', '4018145-5', 'Category:French people', '112', 'Europlug', 'F', 'France', '00036202n', 'Prime Minister of France', 'Regional/Europe/France/', 'R\u00e9publique fran\u00e7aise', '08310658-51eb-3801-80de-5a0739207115', 'F', '4020-55778', 'nan', 20.0, 'Albania', 'Flag of France (1794\u20131815, 1830\u20131974, 2020\u2013present).svg', 'France', '264091107', 'history of France', 'Paris', 'france', '2202162', '208', '226.0', 'ge129152', '294912452', 0.0, 'Category:Burials in France', 'Libert\u00e9, \u00e9galit\u00e9, fraternit\u00e9', 'Data:France.map', '42.282222222222', 'pays/france', '17.0', 'European Union', 10.0, 'left', 'UTC+01:00', 'Category:Deaths in France', '104968', 'President of the French Republic', 'France', 'Kingdom of the Netherlands', '10035788.0', '7039.0', 'nan', '250', '48.445833333333', '33', '17255-3', 'ufr', 'Franks', 'flag of France', 'FR', 'nan', 'frankrike', 'WikiProject France', 67749632.0, '1000070', 'Portal:France', 'outline of France', '563689', 'euro', '3017382', '\ud83c\uddeb\ud83c\uddf7', 'concept902', 'geography of France', 'FRA', 'Francouzsk\u00e1 republika', 'France', 'D005602', 'world/france', 'semi-presidential system', 'Armoiries r\u00e9publique fran\u00e7aise.svg', '2.16.250', 'French Parliament', '/m/0f8l9c', 'French', 'nan', 'Europe', 'coat of arms of France', 18.0, '974208.0', 'Wikipedia:List of articles all languages should have', 'FR', '51.089', 'free country', 'FR', 1.989999999999999992, 643801.0, 'Frankrike', 'Category:France', '152383070', 'EU-France (orthographic projection).svg', '61ef4416-de68-49ff-9c97-e0779dafd9d2', '\u00c9lisabeth Borne', 'FRA', '1204289.0', '619', '2984', 'place/France', 'Sainte-Enimie-Gorges du Tarn France banner.jpg', 'Category:Films shot in France', 230.0, 'Government of France', 'La Marseillaise', 'Court of Cassation', 82.27316999999999325, '.fr', 'country', 'Mont Blanc', 'Category:Births in France', 'right', '87.0', '\u00c9tang de Lavalduc', 'france', 'Hu-francia.ogg', '026378329', 'Clipperton Island', 'F', 'n79006404', '47.0', 'Catholic Encyclopedia', 'frankreich', '1295', 'Frankreich', 'countries/fr', 'standard French', 'frankrig', 'france', '27948', '85633147', '6753', '7955', '3354', '300-379', 'culture of France', 'JfFJmZ', '6592.0', 'Category:Maps of France', 'francia', 'France', 'France', 'Francia', 'pays/wd/120114', 'lccn-n79006404', 'france:France', '1085', 'Western Europe', 'data.gouv.fr', 'France', '+1792-00-00T00:00:00Z', '455.0', 'A28', 'i83644', '14344', 'economy of France', '10352', 'france', 'p/804af1fe-911d-449e-9a90-c127110acda5', '00e4cc53-5b5d-4636-a60e-addf9f452f94', 'france', '\ud504\ub791\uc2a4', '08949695-n', 'demographics of France', 'Y104968', '18-193871', 'c302m85qenyt', 'T84-742', '3938.0', '19552320.0', '2076466.0', 'Frantsiia', 'Frankrig', 'strany_mira/FRANTSIYA.html', '13.0', 'SG--53', '987007552533205171', 7.990000000000000213, '4169037.0', '2706', 'Emmanuel Macron', 'frankreich', '330.0', '16355.0', '29', '250.0', 'France', '\u0444\u0440\u0430\u043d\u0446\u0443\u0437', 'Frankreich', 'France', 'https://www.gouvernement.fr/', 'france', 0.9030000000000000248, 'geo/CF4D8D5F-9DE6-4C9C-9F25-F4B3BAC86493', 'Q20', 'Bank of France', 33.10000000000000142, '2940', 'node/291222598', 51.79999999999999716, '2--44', '3035-197', 29418.0, '49.0', 'T029314', 'france');\nDatabase State:\n- Table: `college_of_music`, Columns: [`label`, `description`, `instance_of`, `located_in_the_administrative_territorial_entity`, `country`, `inception`, `official_website`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `coordinate_location`, `locator_map_image`, `instance_of`, `located_in_the_administrative_territorial_entity`, `country`, `topics_main_category`, `commons_category`, `geonames_id`, `viaf_id`, `elevation_above_sea_level`, `population`, `located_in_or_next_to_body_of_water`, `archinform_location_id`, `area`, `gnd_id`, `postal_code`, `image`, `openstreetmap_relation_id`, `shares_border_with`, `flag_image`, `located_in_time_zone`, `official_website`, `page_banner`, `musicbrainz_area_id`, `freebase_id`, `category_for_people_born_here`, `category_for_people_who_died_here`, `category_of_associated_people`, `described_by_source`, `encyclop\u00e6dia_britannica_online_id`, `head_of_government`, `library_of_congress_authority_id`, `quora_topic_id`, `native_label`, `nkcr_aut_id`, `whos_on_first_id`, `category_for_maps`, `worldcat_identities_id`, `coat_of_arms_image`, `national_library_of_israel_j9u_id`, `online_pwn_encyclopedia_id`, `twinned_administrative_body`, `factgrid_item_id`]\n- Table: `head_of_state`, Columns: [`label`, `description`, `commons_category`, `viaf_id`, `isni`, `library_of_congress_authority_id`, `gnd_id`, `country_of_citizenship`, `image`, `place_of_birth`, `date_of_birth`, `occupation`, `position_held`, `educated_at`, `instance_of`, `freebase_id`, `munzinger_person_id`, `languages_spoken_written_or_signed`, `given_name`, `award_received`, `signature`, `spouse`, `name_in_native_language`, `religion_or_worldview`, `sex_or_gender`, `topics_main_category`, `worldcat_identities_id`, `store_norske_leksikon_id`, `opensanctions_id`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `country`, `commons_category`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `topics_main_category`, `freebase_id`, `instance_of`, `geonames_id`, `official_website`, `image`, `viaf_id`, `postal_code`]\n- Table: `country`, Columns: [`label`, `description`, `great_russian_encyclopedia_online_id`, `coordinates_of_southernmost_point`, `new_york_times_topic_id`, `gnd_id`, `category_of_associated_people`, `emergency_phone_number`, `electrical_plug_type`, `licence_plate_code`, `hashtag`, `babelnet_id`, `office_held_by_head_of_government`, `curlie_id`, `native_label`, `musicbrainz_area_id`, `uic_alphabetical_country_code`, `comic_vine_id`, `insee_countries_and_foreign_territories_code`, `vat_rate`, `diplomatic_relation`, `flag_image`, `commons_gallery`, `viaf_id`, `history_of_topic`, `capital`, `subreddit`, `openstreetmap_relation_id`, `mobile_country_code`, `maritime_identification_digits`, `nkcr_aut_id`, `asc_leiden_thesaurus_id`, `marriageable_age`, `category_of_people_buried_here`, `motto_text`, `geoshape`, `coordinates_of_easternmost_point`, `le_monde_diplomatique_subject_id`, `marine_regions_geographic_id`, `member_of`, `unemployment_rate`, `railway_traffic_side`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `office_held_by_head_of_state`, `commons_category`, `shares_border_with`, `us_national_archives_identifier`, `nalt_id`, `treccani_id`, `iso_3166_1_numeric_code`, `coordinates_of_westernmost_point`, `country_calling_code`, `stw_thesaurus_for_economics_id`, `statoids_id`, `named_after`, `flag`, `fips_10_4_countries_and_regions`, `isni`, `nese_id`, `maintained_by_wikiproject`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `geonames_id`, `unicode_character`, `unesco_thesaurus_id`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `official_name`, `quora_topic_id`, `mesh_descriptor_id`, `guardian_topic_id`, `basic_form_of_government`, `coat_of_arms_image`, `ituisoiec_object_identifier`, `legislative_body`, `freebase_id`, `official_language`, `replaces`, `continent`, `coat_of_arms`, `age_of_majority`, `national_library_of_israel_id_old`, `on_focus_list_of_wikimedia_project`, `wipo_st3`, `coordinates_of_northernmost_point`, `has_quality`, `iso_3166_1_alpha_2_code`, `total_fertility_rate`, `area`, `store_norske_leksikon_id`, `topics_main_category`, `biblioth\u00e8que_nationale_de_france_id`, `locator_map_image`, `bbc_things_id`, `head_of_government`, `ioc_country_code`, `fast_id`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `page_banner`, `category_for_films_shot_at_this_location`, `mains_voltage`, `executive_body`, `anthem`, `highest_judicial_authority`, `life_expectancy`, `top_level_internet_domain`, `instance_of`, `highest_point`, `category_for_people_born_here`, `driving_side`, `uic_numerical_country_code`, `lowest_point`, `civicus_monitor_country_entry`, `pronunciation_audio`, `idref_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `library_of_congress_authority_id`, `coordinate_location`, `described_by_source`, `brockhaus_enzyklop\u00e4die_online_id`, `iab_code`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `language_used`, `dr_topic_id`, `world_encyclopedia_of_puppetry_arts_id`, `gran_enciclop\u00e8dia_catalana_id`, `whos_on_first_id`, `inaturalist_place_id`, `omegawiki_defined_meaning`, `hds_id`, `gs1_country_code`, `culture`, `geonlp_id`, `analysis_policy_observatory_term_id`, `category_for_maps`, `treccanis_dizionario_di_storia_id`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `larousse_id`, `worldcat_identities_id`, `fandom_article_id`, `eurovoc_id`, `part_of`, `open_data_portal`, `kbpedia_id`, `inception`, `rkd_thesaurus_id`, `pm20_geo_code`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `economy_of_topic`, `uk_parliament_thesaurus_id`, `tasteatlas_id`, `sapa_id`, `bhcl_uuid`, `github_topic`, `namuwiki_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `ysa_id`, `yle_topic_id`, `bbc_news_topic_id`, `joconde_location_id`, `armeniapedia_id`, `zhihu_topic_id`, `idaigazetteer_id`, `encyclopedia_of_the_history_of_ukraine_id`, `den_store_danske_id`, `krugosvet_article`, `schoenberg_database_of_manuscripts_place_id`, `colon_classification`, `national_library_of_israel_j9u_id`, `democracy_index`, `online_pwn_encyclopedia_id`, `postimees_topic_id`, `head_of_state`, `der_spiegel_topic_id`, `museum_digital_place_id`, `wikisimpsons_id`, `urban_electric_transit_country_id`, `m49_code`, `short_name`, `demonym`, `s\u00fcddeutsche_zeitung_topic_id`, `country`, `official_website`, `alltrails_trail_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `central_bank`, `gini_coefficient`, `obo_gazetteer_id`, `openstreetmap_element`, `happy_planet_index_score`, `dewey_decimal_classification`, `giant_bomb_id`, `number_of_out_of_school_children`, `the_top_tens_id`, `grove_art_online_id`, `the_world_factbook_country_id`]\n- Table: `part`, Columns: [`label`, `description`, `commons_category`, `topics_main_category`, `freebase_id`, `viaf_id`, `instance_of`, `geonames_id`, `quora_topic_id`, `has_parts`, `nkcr_aut_id`, `worldcat_identities_id`, `coordinate_location`, `locator_map_image`, `part_of`, `store_norske_leksikon_id`]\n- Table: `source_of_information`, Columns: [`label`, `description`, `language_of_work_or_name`, `instance_of`]",
        "Response": "Table: `country`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `gram_staining`, `lpsn_url`)  VALUES ('Aliivibrio', 'genus of bacteria', 'Vibrionaceae', 'Aliivibrio', 'taxon', 'genus', '956670.0', '511678.0', '4901866.0', '1014721.0', 'Gram-negative bacteria', 'http://www.bacterio.net/aliivibrio.html');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Scoring (playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, `+/-`, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, `Post+/-`, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG)  VALUES ('spezzja01', 2007, 1, 'OTT', 'NHL', 'C', 76, 34, 58, 92, 66, '26', '11', '22', '0', '0', '6', NULL, '210', '4', '0', '1', '1', '0', '-4', '0', '0', '0', '0', '0', '10');\nDatabase State:\n- Table: AwardsPlayers, Columns: [playerID, award, year, lgID, note, pos]\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]\n- Table: TeamVsTeam, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]\n- Table: Coaches, Columns: [coachID, year, tmID, lgID, stint, notes, g, w, l, t, postg, postw, postl, postt]\n- Table: AwardsMisc, Columns: [name, ID, award, year, lgID, note]\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: CombinedShutouts, Columns: [year, month, date, tmID, oppID, `R/P`, IDgoalie1, IDgoalie2]\n- Table: ScoringShootout, Columns: [playerID, year, stint, tmID, S, G, GDG]\n- Table: GoaliesSC, Columns: [playerID, year, tmID, lgID, GP, Min, W, L, T, SHO, GA]\n- Table: Master, Columns: [playerID, coachID, hofID, firstName, lastName, nameNote, nameGiven, nameNick, height, weight, shootCatch, legendsID, ihdbID, hrefID, firstNHL, lastNHL, firstWHA, lastWHA, pos, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity, deathYear, deathMon, deathDay, deathCountry, deathState, deathCity]\n- Table: GoaliesShootout, Columns: [playerID, year, stint, tmID, W, L, SA, GA]\n- Table: TeamsPost, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]",
        "Response": "Table: Scoring"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`movie_id`, `Title`, `Year`, `Director`, `Budget_million`, `Gross_worldwide`)  VALUES (7, 'Get Carter', 2000, 'Stephen Kay', 63.60000000000000142, 19412993);\nDatabase State:\n- Table: `book_club`, Columns: [`book_club_id`, `Year`, `Author_or_Editor`, `Book_Title`, `Publisher`, `Category`, `Result`]",
        "Response": "Table: `movie`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `cellular_component` (`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`)  VALUES ('plasma membrane', 'biological membrane that separates the interior of a cell from its outside environment', 'GO:0005886', 'membrane', 'http://purl.obolibrary.org/obo/GO_0005886', 'cellular component');\nDatabase State:\n- Table: `cellular_component`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `part`, Columns: [`label`, `description`, `interpro_id`, `instance_of`]",
        "Response": "Table: `cellular_component`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (zip_code, area_code)  VALUES (25888, 681);\nDatabase State:\n- Table: area_code, Columns: [zip_code, area_code]\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]\n- Table: zip_data, Columns: [zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, `1st_quarter_payroll`, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA]\n- Table: state, Columns: [abbreviation, name]\n- Table: alias, Columns: [zip_code, alias]",
        "Response": "Table: area_code"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, `+/-`, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, `Post+/-`, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG)  VALUES ('binklle01', 1973, 1, 'TOT', 'WHA', 'G', 27, 0, 0, 0, 0, NULL, '0', NULL, '0', NULL, '0', NULL, NULL, '5', '0', '0', '0', '0', NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: SeriesPost, Columns: [year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L, T, GoalsWinner, GoalsLoser, note]\n- Table: HOF, Columns: [year, hofID, name, category]",
        "Response": "Table: Scoring"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO region_sales (region_id, game_platform_id, num_sales)  VALUES (3, 13793, 0.0);\nDatabase State:\n- Table: region, Columns: [id, region_name]\n- Table: genre, Columns: [id, genre_name]\n- Table: game, Columns: [id, genre_id, game_name]\n- Table: game_publisher, Columns: [id, game_id, publisher_id]",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`technician_id`, `repair_ID`, `Machine_ID`)  VALUES (1, 1, 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `repair_assignment`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ShipperID, ShipperName, Phone)  VALUES (1, 'Speedy Express', '(503) 555-9831');\nDatabase State:\n- Table: Employees, Columns: [EmployeeID, LastName, FirstName, BirthDate, Photo, Notes]\n- Table: Shippers, Columns: [ShipperID, ShipperName, Phone]\n- Table: Products, Columns: [ProductID, ProductName, SupplierID, CategoryID, Unit, Price]\n- Table: Customers, Columns: [CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country]",
        "Response": "Table: Shippers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (year, lgID, tmID, oppID, W, L, T, OTL)  VALUES (1977, 'NHL', 'PIT', 'NYR', 2, 0, 2, NULL);\nDatabase State:\n- Table: ScoringShootout, Columns: [playerID, year, stint, tmID, S, G, GDG]\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: GoaliesSC, Columns: [playerID, year, tmID, lgID, GP, Min, W, L, T, SHO, GA]\n- Table: TeamsPost, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: Goalies, Columns: [playerID, year, stint, tmID, lgID, GP, Min, W, L, `T/OL`, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA]\n- Table: CombinedShutouts, Columns: [year, month, date, tmID, oppID, `R/P`, IDgoalie1, IDgoalie2]\n- Table: TeamVsTeam, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]\n- Table: ScoringSC, Columns: [playerID, year, tmID, lgID, pos, GP, G, A, Pts, PIM]\n- Table: AwardsPlayers, Columns: [playerID, award, year, lgID, note, pos]\n- Table: abbrev, Columns: [Type, Code, Fullname]\n- Table: Master, Columns: [playerID, coachID, hofID, firstName, lastName, nameNote, nameGiven, nameNick, height, weight, shootCatch, legendsID, ihdbID, hrefID, firstNHL, lastNHL, firstWHA, lastWHA, pos, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity, deathYear, deathMon, deathDay, deathCountry, deathState, deathCity]\n- Table: Scoring, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, `+/-`, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, `Post+/-`, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]\n- Table: AwardsMisc, Columns: [name, ID, award, year, lgID, note]\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]\n- Table: ScoringSup, Columns: [playerID, year, PPA, SHA]\n- Table: SeriesPost, Columns: [year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L, T, GoalsWinner, GoalsLoser, note]\n- Table: Teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]",
        "Response": "Table: TeamVsTeam"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('Farsa', 'protein-coding gene in the species Rattus norvegicus', '288917.0', 'protein-coding gene', 'Phenylalanyl-tRNA synthetase subunit alpha', 'brown rat', 'forward strand', '25978776.0', '25969255.0', 'gene', 'nan');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `phenylalanyl_trna_synthetase_domain_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `subclass_of`, `country`, `applies_to_jurisdiction`, `organization_directed_by_the_office_or_position`, `part_of`, `female_form_of_label`)  VALUES ('Minister of Agriculture, Food and Environment', 'nan', 'public office', 'agriculture minister', 'Spain', 'Spain', 'Ministry of Agriculture, Food and Environment', 'Council of Ministers of Spain', 'ministra d''Agricultura, Alimentaci\u00f3 i Medi Ambient');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `organization_leader`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `order_history` (history_id, order_id, status_id, status_date)  VALUES (5454, 8445, 1, '2021-07-31 08:53:30');\nDatabase State:\n- Table: publisher, Columns: [publisher_id, publisher_name]\n- Table: country, Columns: [country_id, country_name]\n- Table: `order_line`, Columns: [line_id, order_id, book_id, price]\n- Table: `order_history`, Columns: [history_id, order_id, status_id, status_date]\n- Table: book, Columns: [book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id]\n- Table: author, Columns: [author_id, author_name]\n- Table: book_author, Columns: [book_id, author_id]\n- Table: customer, Columns: [customer_id, first_name, last_name, email]\n- Table: address_status, Columns: [status_id, address_status]\n- Table: book_language, Columns: [language_id, language_code, language_name]\n- Table: address, Columns: [address_id, street_number, street_name, city, country_id]\n- Table: shipping_method, Columns: [method_id, method_name, cost]\n- Table: order_status, Columns: [status_id, status_value]\n- Table: `cust_order`, Columns: [order_id, order_date, customer_id, shipping_method_id, dest_address_id]",
        "Response": "Table: `order_history`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO movies_total_gross (movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross)  VALUES ('Meet the Robinsons', 'Mar 30, 2007', 'Adventure', 'G', '$97,822,171', '$119,860,589');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: movies_total_gross"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('TRNA pseudouridine(38-40) synthase TruA MXAN_RS24855', 'microbial protein found in Myxococcus xanthus DK 1622', 'Q1D254', 'tRNA pseudouridine(38-40) synthase TruA MXAN_RS24855', 'pseudouridine synthesis', 'RNA binding', 'Pseudouridine synthase I, TruA, alpha/beta domain', 'Myxococcus xanthus DK 1622', 'WP_011555089', 'protein', 'Pseudouridine synthase I, TruA, C-terminal', 'protein');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Competition_ID`, `Club_ID_1`, `Club_ID_2`, `Score`)  VALUES (1, 1, 2, '11:10');\nDatabase State:\n- Table: `competition_result`, Columns: [`Competition_ID`, `Club_ID_1`, `Club_ID_2`, `Score`]\n- Table: `club`, Columns: [`Club_ID`, `name`, `Region`, `Start_year`]",
        "Response": "Table: `competition_result`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Policy_ID, policy_type_code, Customer_Phone)  VALUES (879, 'Mortgage Insurance', '1-381-132-0127x3801');\nDatabase State:\n- Table: Settlements, Columns: [Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount]",
        "Response": "Table: Available_Policies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name)  VALUES (71, 13.0, 8, 400.0, 190, 4422, 12.5, 72, 'chrysler newport royal');\nDatabase State:\n- Table: data, Columns: [ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name]\n- Table: country, Columns: [origin, country]\n- Table: price, Columns: [ID, price]\n- Table: production, Columns: [ID, model_year, country]",
        "Response": "Table: data"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION)  VALUES ('1993-09-14', NULL, 'a73cc65d-8e0f-4168-b0ee-0d2e446fb85b', '4d94bebc-94c2-42e5-9475-82fabeabd770', 230690007, 'Stroke');\nDatabase State:\n- Table: procedures, Columns: [DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: `claims`, Columns: [ID, PATIENT, BILLABLEPERIOD, ORGANIZATION, ENCOUNTER, DIAGNOSIS, TOTAL]",
        "Response": "Table: conditions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `catalogue_of_life_id`)  VALUES ('Homo', 'genus of mammals', 'Homininae', 'Homo', 'taxon', 'genus', '180091.0', '9605.0', '2436435.0', '636X2');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `catalogue_of_life_id`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `tags` (`index`, id, tag)  VALUES (160346, 75351, 'drum.and.bass');\nDatabase State:\n- Table: `torrents`, Columns: [groupName, totalSnatched, artist, groupYear, releaseType, groupId, id]\n- Table: `tags`, Columns: [`index`, id, tag]",
        "Response": "Table: `tags`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (area_code)  VALUES (314, 'MO');\nDatabase State:\n- Table: AREA_CODE_STATE, Columns: [area_code]\n- Table: CONTESTANTS, Columns: [contestant_number]",
        "Response": "Table: AREA_CODE_STATE"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `ensembl_transcript_id`, `homologene_id`, `refseq_rna_id`, `ortholog`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `expressed_in`)  VALUES ('rundc1', 'protein-coding gene in the species Danio rerio', '100537899', 'ENSDARG00000091962', 'ENSDART00000151501', '15095.0', 'XM_003198112', 'Rundc1', 'RUN domain containing 1', 'Danio rerio', 'reverse strand', '29910547.0', '29902221.0', 'Danio rerio chromosome 3', 'gene', 'swim bladder');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `ensembl_transcript_id`, `homologene_id`, `refseq_rna_id`, `ortholog`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `expressed_in`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`ranking_date`)  VALUES (20170320, 1065, 211956, 7, 4);\nDatabase State:\n- Table: rankings, Columns: [`ranking_date`]",
        "Response": "Table: rankings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `claims` (ID, PATIENT, BILLABLEPERIOD, ORGANIZATION, ENCOUNTER, DIAGNOSIS, TOTAL)  VALUES ('c4efd06c-c0af-4d10-bc6b-e65c845420cc', '7fc2a3ef-9093-4ebe-8607-ae8c0fb57f4e', '2008-05-03', 'temp organization', '7fc2a3ef-9093-4ebe-8607-ae8c0fb57f4e', NULL, 100);\nDatabase State:\n- Table: patients, Columns: [patient, birthdate, deathdate, ssn, drivers, passport, prefix, first, last, suffix, maiden, marital, race, ethnicity, gender, birthplace, address]\n- Table: conditions, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: `claims`, Columns: [ID, PATIENT, BILLABLEPERIOD, ORGANIZATION, ENCOUNTER, DIAGNOSIS, TOTAL]",
        "Response": "Table: `claims`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, ParagraphNum, PlainText, character_id, chapter_id)  VALUES (634690, 1365, 'You bring me out. Soft! comes he not here?', 233, 18798);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `paragraphs`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `station` (`Station_ID`, `Name`, `Annual_entry_exit`, `Annual_interchanges`, `Total_Passengers`, `Location`, `Main_Services`, `Number_of_Platforms`)  VALUES (4, 'London Liverpool Street', 57.10699999999999932, 2.353000000000000202, 59.46000000000000085, 'London', 'Great Eastern Main Line West Anglia Main Line', 18);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `station`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `cell_component`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Hypothetical protein BT_1436', 'microbial protein found in Bacteroides thetaiotaomicron VPI-5482', 'Q8A7T8', 'hypothetical protein BT_1436', 'Bacteroides thetaiotaomicron VPI-5482', 'membrane', 'protein', 'NP_810349', 'Transglycosylase-associated protein');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `transglycosylase_associated_protein`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `published_in`, `main_subject`)  VALUES ('William Grant Macpherson', 'death notice of a Scottish physician (1862-1916) who practiced in Bothwell, South Lanarkshire, Scotland from 1888 to 1916', 'scholarly article', 'Scottish Medical Journal', 'William Grant Macpherson');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `death_notice`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Document_Drafts (document_id, draft_number, draft_details)  VALUES (13, 4, 'w');\nDatabase State:\n- Table: Documents, Columns: [document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details]\n- Table: Draft_Copies, Columns: [document_id, draft_number, copy_number]",
        "Response": "Table: Document_Drafts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `shares_border_with`, `instance_of`, `cbs_municipality_code`, `commons_category`, `flag_image`, `coat_of_arms_image`, `postal_code`, `locator_map_image`, `coordinate_location`, `topics_main_category`, `freebase_id`, `geonames_id`, `contains_settlement`, `image`, `official_website`, `population`, `number_of_households`, `elevation_above_sea_level`, `located_in_time_zone`, `amsterdam_code`, `flag`, `located_in_the_administrative_territorial_entity`, `category_for_maps`, `inaturalist_place_id`, `rkd_thesaurus_id`, `kvk_company_id`, `area`, `coat_of_arms`)  VALUES ('Middelburg', 'municipality in the Netherlands', 'Netherlands', 'Noord-Beveland', 'municipality of the Netherlands', '687.0', 'Middelburg', 'Middelburg vlag.svg', 'Coat of arms of Middelburg.svg', '4330\u20134341', 'NL - locator map municipality code GM0687 (2016).png', '51.5', 'Category:Middelburg, Zeeland', 'nan', '2750894', 'Oudedorp', '20040103 Middelburg Stadhuis.jpg', 'http://www.middelburg.nl/', 48964.0, 22231.0, 3.0, 'UTC+01:00', '10122.0', 'flag of Middelburg', 'Zeeland', 'nan', '17434.0', '97547.0', '51041510.0', 53.0, 'coat of arms of Middelburg');\nDatabase State:\n- Table: `coat_of_arms`, Columns: [`label`, `description`, `country`, `instance_of`, `depicts`, `image`, `applies_to_jurisdiction`, `significant_event`]\n- Table: `human_settlement`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `instance_of`]\n- Table: `political_border`, Columns: [`label`, `description`, `geonames_id`, `viaf_id`, `country`, `instance_of`, `shares_border_with`, `flag_image`, `coat_of_arms_image`, `located_in_the_administrative_territorial_entity`, `commons_category`, `cbs_municipality_code`, `coat_of_arms`, `postal_code`, `image`, `locator_map_image`, `coordinate_location`, `topics_main_category`, `musicbrainz_area_id`, `freebase_id`, `population`, `contains_settlement`, `official_website`, `number_of_households`, `elevation_above_sea_level`, `area`, `located_in_time_zone`, `amsterdam_code`, `flag`, `category_for_maps`, `rkd_thesaurus_id`, `inaturalist_place_id`, `kvk_company_id`]\n- Table: `flag`, Columns: [`label`, `description`, `instance_of`, `image`, `applies_to_jurisdiction`, `country`, `google_knowledge_graph_id`]\n- Table: `jurisdiction`, Columns: [`label`, `description`, `geonames_id`, `viaf_id`, `country`, `instance_of`, `shares_border_with`, `flag_image`, `coat_of_arms_image`, `located_in_the_administrative_territorial_entity`, `commons_category`, `cbs_municipality_code`, `coat_of_arms`, `postal_code`, `image`, `locator_map_image`, `coordinate_location`, `topics_main_category`, `musicbrainz_area_id`, `freebase_id`, `population`, `contains_settlement`, `official_website`, `number_of_households`, `elevation_above_sea_level`, `area`, `located_in_time_zone`, `amsterdam_code`, `flag`, `category_for_maps`, `rkd_thesaurus_id`, `inaturalist_place_id`, `kvk_company_id`]\n- Table: `depiction`, Columns: [`label`, `description`, `commons_category`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `follows`, `followed_by`, `refseq_genome_id`, `found_in_taxon`, `instance_of`, `short_name`, `length`)  VALUES ('mouse chromosome 13', 'Mus musculus chromosome', 'autosome', 'mouse chromosome 12', 'mouse chromosome 14', 'NC_000079', 'house mouse', 'chromosome', '13', 120421639.0);\nDatabase State:\n- Table: `autosome`, Columns: [`label`, `description`, `subclass_of`, `follows`, `followed_by`, `refseq_genome_id`, `found_in_taxon`, `instance_of`, `short_name`, `length`]\n- Table: `follows`, Columns: [`label`, `description`, `subclass_of`, `follows`, `followed_by`, `refseq_genome_id`, `found_in_taxon`, `instance_of`, `short_name`, `length`]\n- Table: `followed_by`, Columns: [`label`, `description`, `follows`, `followed_by`, `refseq_genome_id`, `found_in_taxon`, `instance_of`, `short_name`, `length`, `subclass_of`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('ferrochelatase NRG857_02250', 'microbial gene found in Escherichia coli O83:H1 str. NRG 857C', '12874688', 'gene', 'Ferrochelatase NRG857_02250', 'Escherichia coli O83:H1 str. NRG 857C', 'forward strand', '498025', '497063', 'gene', 'NRG857_02250');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `saccharopine_dehydrogenase_c_terminal_domain_protein_family` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('Saccharopine dehydrogenase Mesci_0885', 'microbial protein found in Mesorhizobium ciceri biovar biserrulae WSM1271', 'saccharopine dehydrogenase Mesci_0885', 'E8TGW4', 'oxidoreductase activity', 'Saccharopine dehydrogenase, NADP binding domain', 'Mesorhizobium ciceri biovar biserrulae WSM1271', 'YP_004140100', 'protein', 'NAD(P)-binding domain superfamily', 'protein');\nDatabase State:\n- Table: `saccharopine_dehydrogenase_c_terminal_domain_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `saccharopine_dehydrogenase_c_terminal_domain_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `beers` (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (782, 504, 0.03500000000000000334, NULL, 'Carolina Blonde Light (2005)', 'American Blonde Ale', 12.0);\nDatabase State:\n- Table: `beers`, Columns: [id, brewery_id, abv, ibu, name, style, ounces]\n- Table: breweries, Columns: [id, name, city, state]",
        "Response": "Table: `beers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('2-oxoglutarate dehydrogenase E1 component Smed_2941', 'microbial protein found in Sinorhizobium medicae WSM419', 'A6UDP0', '2-oxoglutarate dehydrogenase E1 component Smed_2941', 'tricarboxylic acid cycle', 'oxoglutarate dehydrogenase (succinyl-transferring) activity', 'Multifunctional 2-oxoglutarate metabolism enzyme, C-terminal', 'Sinorhizobium medicae WSM419', 'YP_001328605', 'protein', 'Thiamin diphosphate-binding fold', 'protein');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `2_oxoglutarate_dehydrogenase_e1_component_n_terminal_domain_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO institution_grads (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (219806, 2007, 'B', 'H', '4y bach', '3', '1', '1', '33.3', '33.3');\nDatabase State:\n- Table: state_sector_grads, Columns: [stateid, state, state_abbr, control, level, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate, grad_cohort_ct]",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `biological_process`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('Threonine aldolase AMED_9075', 'microbial protein found in Amycolatopsis mediterranei U32', 'threonine aldolase AMED_9075', 'A0A0H3DM62', 'catalytic activity', 'cellular amino acid metabolic process', 'Aromatic amino acid beta-eliminating lyase/threonine aldolase', 'Amycolatopsis mediterranei U32', 'YP_003771166', 'protein', 'Pyridoxal phosphate-dependent transferase, major domain', 'protein');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `genbank_assembly_accession_number`, `gram_staining`]\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `biological_process`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `aromatic_amino_acid_beta_eliminating_lyase_threonine_aldolase_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `biological_process`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Customer_ID, Customer_Details)  VALUES (857, 'Mrs. Liza Heller V');\nDatabase State:\n- Table: Customers, Columns: [Customer_ID, Customer_Details]\n- Table: Staff, Columns: [Staff_ID, Staff_Details]\n- Table: Claims_Documents, Columns: [Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date]\n- Table: Claim_Headers, Columns: [Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (year, lgID, tmID, oppID, W, L, T, OTL)  VALUES (2002, 'NHL', 'TBL', 'STL', 0, 1, 0, '0');\nDatabase State:\n- Table: TeamsPost, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: Teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: CombinedShutouts, Columns: [year, month, date, tmID, oppID, `R/P`, IDgoalie1, IDgoalie2]\n- Table: Coaches, Columns: [coachID, year, tmID, lgID, stint, notes, g, w, l, t, postg, postw, postl, postt]\n- Table: GoaliesSC, Columns: [playerID, year, tmID, lgID, GP, Min, W, L, T, SHO, GA]\n- Table: SeriesPost, Columns: [year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L, T, GoalsWinner, GoalsLoser, note]\n- Table: ScoringSC, Columns: [playerID, year, tmID, lgID, pos, GP, G, A, Pts, PIM]\n- Table: AwardsMisc, Columns: [name, ID, award, year, lgID, note]\n- Table: HOF, Columns: [year, hofID, name, category]\n- Table: Goalies, Columns: [playerID, year, stint, tmID, lgID, GP, Min, W, L, `T/OL`, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA]\n- Table: Scoring, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, `+/-`, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, `Post+/-`, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]\n- Table: abbrev, Columns: [Type, Code, Fullname]",
        "Response": "Table: TeamVsTeam"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `instance_of`, `category_combines_topics`, `category_contains`)  VALUES ('Category:People from Bern, Switzerland', 'Wikimedia category', 'People of Bern', 'Wikimedia category', 'Bern', 'human');\nDatabase State:\n- Table: `wikimedia_category`, Columns: [`label`, `description`, `commons_category`, `instance_of`, `category_combines_topics`, `category_contains`]\n- Table: `archaeological_service`, Columns: [`label`, `description`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `instance_of`, `category_combines_topics`, `category_contains`]\n- Table: `political_border`, Columns: [`label`, `description`, `topics_main_category`, `commons_category`, `country`, `coat_of_arms_image`, `image`, `shares_border_with`, `coordinate_location`, `instance_of`, `freebase_id`, `located_in_the_administrative_territorial_entity`, `population`, `geonames_id`, `openstreetmap_relation_id`, `viaf_id`, `elevation_above_sea_level`, `official_website`, `area`, `gnd_id`, `worldcat_identities_id`, `locator_map_image`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `country`, `located_in_the_administrative_territorial_entity`, `commons_category`, `coat_of_arms_image`, `instance_of`, `shares_border_with`, `image`, `coordinate_location`, `page_banner`, `topics_main_category`, `musicbrainz_area_id`, `freebase_id`, `gnd_id`, `population`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `category_of_associated_people`, `viaf_id`, `official_name`, `official_website`, `area`, `library_of_congress_authority_id`, `described_by_source`, `encyclop\u00e6dia_universalis_id`, `archinform_location_id`, `nkcr_aut_id`, `category_for_maps`, `worldcat_identities_id`, `national_library_of_israel_j9u_id`, `store_norske_leksikon_id`, `museum_digital_place_id`, `idref_id`, `locator_map_image`]",
        "Response": "Table: `wikimedia_category`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Scoring (playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, `+/-`, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, `Post+/-`, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG)  VALUES ('beckebo01', 1956, 1, 'BOS', 'NHL', 'C', 18, 0, 3, 3, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: ScoringShootout, Columns: [playerID, year, stint, tmID, S, G, GDG]\n- Table: AwardsPlayers, Columns: [playerID, award, year, lgID, note, pos]\n- Table: TeamVsTeam, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]\n- Table: HOF, Columns: [year, hofID, name, category]",
        "Response": "Table: Scoring"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `beers` (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (2652, 5, 0.0970000000000000028, NULL, 'Boy King', 'American Double / Imperial IPA', 16.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `beers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1032, 'Brown', 'Eric', 20, 'M', 550, 8772, 'ATL');\nDatabase State:\n- Table: Allergy_Type, Columns: [Allergy, AllergyType]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Has_Allergy, Columns: [StuID, Allergy]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `commons_category`, `freebase_id`, `instance_of`, `topics_main_category`, `area`, `image`, `located_in_time_zone`)  VALUES ('Jingyang', 'nan', 'Jingde County', 'People''s Republic of China', '30.28941', 'nan', 'nan', 'township in China', 'nan', NULL, 'nan', 'UTC+08:00');\nDatabase State:\n- Table: `temple_of_confucius`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `commons_category`, `coordinate_location`, `instance_of`, `country`, `image`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `commons_category`, `freebase_id`, `instance_of`, `topics_main_category`, `area`, `image`, `located_in_time_zone`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Volume_ID`, `Volume_Issue`, `Issue_Date`, `Weeks_on_Top`, `Song`, `Artist_ID`)  VALUES (1, '45:14 \u00a7', '27 December 1986 - 10 January', 3.0, ' The Way', 1);\nDatabase State:\n- Table: `music_festival`, Columns: [`ID`, `Music_Festival`, `Date_of_ceremony`, `Category`, `Volume`, `Result`]\n- Table: `volume`, Columns: [`Volume_ID`, `Volume_Issue`, `Issue_Date`, `Weeks_on_Top`, `Song`, `Artist_ID`]\n- Table: `artist`, Columns: [`Artist_ID`, `Artist`, `Age`, `Famous_Title`, `Famous_Release_date`]",
        "Response": "Table: `volume`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `farm` (`Farm_ID`, `Year`, `Total_Horses`, `Working_Horses`, `Total_Cattle`, `Oxen`, `Bulls`, `Cows`, `Pigs`, `Sheep_and_Goats`)  VALUES (4, 1930, 5308.199999999999819, 3721.59999999999991, 6274.100000000000363, 254.8000000000000113, 49.60000000000000142, 3471.59999999999991, 3171.800000000000181, 4533.399999999999636);\nDatabase State:\n- Table: `competition_record`, Columns: [`Competition_ID`, `Farm_ID`, `Rank`]\n- Table: `city`, Columns: [`City_ID`, `Official_Name`, `Status`, `Area_km_2`, `Population`, `Census_Ranking`]\n- Table: `farm_competition`, Columns: [`Competition_ID`, `Year`, `Theme`, `Host_city_ID`, `Hosts`]",
        "Response": "Table: `farm`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO People (person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)  VALUES (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa');\nDatabase State:\n- Table: Courses, Columns: [course_id, course_name, course_description, other_details]",
        "Response": "Table: People"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `refseq_protein_id`, `found_in_taxon`, `encoded_by`, `part_of`, `instance_of`, `uniprot_protein_id`)  VALUES ('Hypothetical protein AMED_2228', 'microbial protein found in Amycolatopsis mediterranei U32', 'YP_003764430', 'Amycolatopsis mediterranei U32', 'hypothetical protein AMED_2228', 'Protein of unknown function DUF1023', 'protein', 'A0A0H3D086');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `refseq_protein_id`, `found_in_taxon`, `encoded_by`, `part_of`, `instance_of`, `uniprot_protein_id`]\n- Table: `protein_of_unknown_function_duf1023`, Columns: [`label`, `description`, `refseq_protein_id`, `found_in_taxon`, `encoded_by`, `part_of`, `instance_of`, `uniprot_protein_id`]",
        "Response": "Table: `protein_of_unknown_function_duf1023`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `immovable_monument` (`label`, `description`, `commons_category`, `instance_of`, `located_in_the_administrative_territorial_entity`, `image`, `country`, `heritage_designation`, `coordinate_location`, `polish_cultural_heritage_register_number`)  VALUES ('12-12a Jana Kochanowskiego Street in Katowice', 'nan', '12-12a Jana Kochanowskiego Street in Katowice', 'kamienica', 'Katowice', 'Katowice - Kochanowskiego 12-12a.JPG', 'Poland', 'immovable monument', '50.25521443299342', 'A/463/15');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `immovable_monument`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `gacha` (`label`, `description`, `china_administrative_division_code`, `country`, `located_in_the_administrative_territorial_entity`, `instance_of`, `official_name`, `located_in_time_zone`)  VALUES ('Bayanhushuo', 'gaqaa in Evenk Autonomous Banner, Hulunbuir', '15 07 24 211 202', 'People''s Republic of China', 'Xinihexi', 'gacha', '\u5df4\u5f66\u80e1\u7855\u560e\u67e5', 'UTC+08:00');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `china_administrative_division_code`, `country`, `located_in_the_administrative_territorial_entity`, `instance_of`, `official_name`, `located_in_time_zone`, `coordinate_location`]",
        "Response": "Table: `gacha`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `paragraphs` (id, ParagraphNum, PlainText, character_id, chapter_id)  VALUES (654219, 1941, 'By my sword, Beatrice, thou lovest me.', 160, 19237);\nDatabase State:\n- Table: `chapters`, Columns: [id, Act, Scene, Description, work_id]\n- Table: `characters`, Columns: [id, CharName, Abbrev, Description]",
        "Response": "Table: `paragraphs`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Country_ID`, `Name`, `Population`, `Area`, `Languages`)  VALUES (1, 'Austria', 8206524, 83871, 'German');\nDatabase State:\n- Table: `country`, Columns: [`Country_ID`, `Name`, `Population`, `Area`, `Languages`]",
        "Response": "Table: `country`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `train` (`id`, `train_number`, `name`, `origin`, `destination`, `time`, `interval`)  VALUES (2, 16127, 'Guruvayur Express', 'Chennai', 'Guruvayur', '22:10', 'Daily');\nDatabase State:\n- Table: `route`, Columns: [`train_id`, `station_id`]\n- Table: `weekly_weather`, Columns: [`station_id`, `day_of_week`, `high_temperature`, `low_temperature`, `precipitation`, `wind_speed_mph`]\n- Table: `station`, Columns: [`id`, `network_name`, `services`, `local_authority`]\n- Table: `train`, Columns: [`id`, `train_number`, `name`, `origin`, `destination`, `time`, `interval`]",
        "Response": "Table: `train`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`concert_ID`, `Singer_ID`)  VALUES (1, '5');\nDatabase State:\n- Table: `stadium`, Columns: [`Stadium_ID`, `Location`, `Name`, `Capacity`, `Highest`, `Lowest`, `Average`]\n- Table: `concert`, Columns: [`concert_ID`, `concert_Name`, `Theme`, `Stadium_ID`, `Year`]\n- Table: `singer_in_concert`, Columns: [`concert_ID`, `Singer_ID`]\n- Table: `singer`, Columns: [`Singer_ID`, `Name`, `Country`, `Song_Name`, `Song_release_year`, `Age`, `Is_male`]",
        "Response": "Table: `singer_in_concert`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`ID`, `Airport_ID`, `Aircraft_ID`)  VALUES (4, 9, 3);\nDatabase State:\n- Table: match, Columns: [`Round`, `Location`, `Country`, `Date`, `Fastest_Qualifying`, `Winning_Pilot`, `Winning_Aircraft`]",
        "Response": "Table: airport_aircraft"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Player_ID`, `Player`, `Team`, `Age`, `Position`, `School_ID`)  VALUES (2, 'Pedro \u00c1lvarez', 'Pittsburgh Pirates', 14, 'Third baseman', 2);\nDatabase State:\n- Table: `player`, Columns: [`Player_ID`, `Player`, `Team`, `Age`, `Position`, `School_ID`]\n- Table: `school`, Columns: [`School_ID`, `School`, `Location`, `Enrollment`, `Founded`, `Denomination`, `Boys_or_Girls`, `Day_or_Boarding`, `Year_Entered_Competition`, `School_Colors`]\n- Table: `school_details`, Columns: [`School_ID`, `Nickname`, `Colors`, `League`, `Class`, `Division`]",
        "Response": "Table: `player`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Campus`)  VALUES (19, 6, 2004, 834, 72);\nDatabase State:\n- Table: `degrees`, Columns: [`Year`, `Campus`]\n- Table: `csu_fees`, Columns: [`Campus`]\n- Table: `discipline_enrollments`, Columns: [`Campus`]\n- Table: `faculty`, Columns: [`Campus`]\n- Table: `Campuses`, Columns: [`Id`]",
        "Response": "Table: `discipline_enrollments`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update)  VALUES (5675, 209, 1, 8067, 4.990000000000000213, '2005-07-28 17:20:17.0', '2006-02-15 22:14:11.0');\nDatabase State:\n- Table: `staff`, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]\n- Table: `film`, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]\n- Table: `inventory`, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: `category`, Columns: [category_id, name, last_update]\n- Table: `rental`, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]\n- Table: film_text, Columns: [film_id, title, description]\n- Table: `city`, Columns: [city_id, city, country_id, last_update]\n- Table: `payment`, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: `film_actor`, Columns: [actor_id, film_id, last_update]\n- Table: `actor`, Columns: [actor_id, first_name, last_name, last_update]\n- Table: `store`, Columns: [store_id, manager_staff_id, address_id, last_update]\n- Table: `country`, Columns: [country_id, country, last_update]\n- Table: `film_category`, Columns: [film_id, category_id, last_update]\n- Table: `language`, Columns: [language_id, name, last_update]",
        "Response": "Table: `payment`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `head_of_state` (`label`, `description`, `sex_or_gender`, `place_of_birth`, `spouse`, `commons_category`, `library_of_congress_authority_id`, `gnd_id`, `award_received`, `date_of_birth`, `viaf_id`, `instance_of`, `freebase_id`, `country_of_citizenship`, `occupation`, `educated_at`, `given_name`, `munzinger_person_id`, `position_held`, `languages_spoken_written_or_signed`, `signature`, `worldcat_identities_id`, `isni`, `name_in_native_language`, `image`, `treccani_id`, `opensanctions_id`)  VALUES ('Luiz In\u00e1cio Lula da Silva', '35th & 39th president of Brazil', 'male', 'Caet\u00e9s', 'Maria de Lurdes da Silva', 'Luiz In\u00e1cio Lula da Silva', 'n82021520', '120309858', 'Jawaharlal Nehru Award for International Understanding', '+1945-10-27T00:00:00Z', '98020187', 'human', '/m/0pc9q', 'Brazil', 'trade unionist', 'nan', 'Luiz', '21165.0', 'President of Brazil', 'Portuguese', 'Signature of Luiz In\u00e1cio Lula da Silva.svg', 'lccn-n82021520', '0000 0001 2144 7694', 'Luiz In\u00e1cio da Silva', '04.01.2023 - Presidente da Rep\u00fablica (52651122880) (cropped).jpg', 'silva-luiz-inacio-da-detto-lula', 'Q37181');\nDatabase State:\n- Table: `head_of_state`, Columns: [`label`, `description`, `sex_or_gender`, `place_of_birth`, `spouse`, `commons_category`, `library_of_congress_authority_id`, `gnd_id`, `award_received`, `date_of_birth`, `viaf_id`, `instance_of`, `freebase_id`, `country_of_citizenship`, `occupation`, `educated_at`, `given_name`, `munzinger_person_id`, `position_held`, `languages_spoken_written_or_signed`, `signature`, `worldcat_identities_id`, `isni`, `name_in_native_language`, `image`, `treccani_id`, `opensanctions_id`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `image`, `country`, `located_in_the_administrative_territorial_entity`, `instance_of`, `commons_category`, `coordinate_location`, `topics_main_category`, `freebase_id`, `geonames_id`, `viaf_id`, `library_of_congress_authority_id`, `official_website`, `worldcat_identities_id`, `area`, `whos_on_first_id`]\n- Table: `street_circuit`, Columns: [`label`, `description`, `instance_of`, `coordinate_location`, `country`]\n- Table: `source_of_information`, Columns: [`label`, `description`, `instance_of`, `language_of_work_or_name`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `image`, `instance_of`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `topics_main_category`, `commons_category`, `freebase_id`, `geonames_id`, `official_website`, `locator_map_image`, `population`, `area`, `capital`]\n- Table: `capital_city`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `page_banner`, `commons_category`, `freebase_id`, `geonames_id`, `instance_of`, `topics_main_category`, `capital_of`, `described_by_source`, `postal_code`, `image`, `official_website`, `category_of_associated_people`, `encyclop\u00e6dia_universalis_id`, `archinform_location_id`, `library_of_congress_authority_id`, `viaf_id`, `worldcat_identities_id`, `nkcr_aut_id`, `national_library_of_israel_j9u_id`, `online_pwn_encyclopedia_id`, `twinned_administrative_body`, `gnd_id`, `located_in_time_zone`, `musicbrainz_area_id`, `population`, `category_for_people_who_died_here`, `elevation_above_sea_level`, `area`, `encyclop\u00e6dia_britannica_online_id`, `quora_topic_id`, `whos_on_first_id`]\n- Table: `place_of_death`, Columns: [`label`, `description`, `instance_of`, `category_combines_topics`, `category_contains`, `commons_category`]\n- Table: `country`, Columns: [`label`, `description`, `great_russian_encyclopedia_online_id`, `coordinates_of_southernmost_point`, `new_york_times_topic_id`, `gnd_id`, `category_of_associated_people`, `emergency_phone_number`, `electrical_plug_type`, `licence_plate_code`, `babelnet_id`, `office_held_by_head_of_government`, `gini_coefficient`, `native_label`, `musicbrainz_area_id`, `insee_countries_and_foreign_territories_code`, `diplomatic_relation`, `flag_image`, `commons_gallery`, `viaf_id`, `history_of_topic`, `biblioth\u00e8que_nationale_de_france_id`, `capital`, `official_website`, `subreddit`, `openstreetmap_relation_id`, `iab_code`, `mobile_country_code`, `m49_code`, `maritime_identification_digits`, `nkcr_aut_id`, `asc_leiden_thesaurus_id`, `category_of_people_buried_here`, `motto_text`, `geoshape`, `coordinates_of_easternmost_point`, `demonym`, `le_monde_diplomatique_subject_id`, `member_of`, `unemployment_rate`, `railway_traffic_side`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `office_held_by_head_of_state`, `commons_category`, `shares_border_with`, `vat_rate`, `us_national_archives_identifier`, `nalt_id`, `iso_3166_1_numeric_code`, `coordinates_of_westernmost_point`, `country_calling_code`, `stw_thesaurus_for_economics_id`, `statoids_id`, `curlie_id`, `flag`, `fips_10_4_countries_and_regions`, `isni`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `geonames_id`, `unicode_character`, `unesco_thesaurus_id`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `quora_topic_id`, `mesh_descriptor_id`, `basic_form_of_government`, `coat_of_arms_image`, `ituisoiec_object_identifier`, `legislative_body`, `freebase_id`, `official_language`, `continent`, `coat_of_arms`, `age_of_majority`, `national_library_of_israel_id_old`, `on_focus_list_of_wikimedia_project`, `wipo_st3`, `coordinates_of_northernmost_point`, `has_quality`, `total_fertility_rate`, `area`, `executive_body`, `central_bank`, `topics_main_category`, `locator_map_image`, `head_of_government`, `ioc_country_code`, `fast_id`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `described_by_source`, `gs1_country_code`, `page_banner`, `category_for_films_shot_at_this_location`, `mains_voltage`, `official_name`, `number_of_out_of_school_children`, `anthem`, `inception`, `life_expectancy`, `gran_enciclop\u00e8dia_catalana_id`, `top_level_internet_domain`, `instance_of`, `highest_point`, `category_for_people_born_here`, `short_name`, `driving_side`, `head_of_state`, `lowest_point`, `uk_parliament_thesaurus_id`, `civicus_monitor_country_entry`, `pronunciation_audio`, `idref_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `library_of_congress_authority_id`, `iso_3166_1_alpha_2_code`, `coordinate_location`, `language_used`, `brockhaus_enzyklop\u00e4die_online_id`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `world_encyclopedia_of_puppetry_arts_id`, `whos_on_first_id`, `dr_topic_id`, `omegawiki_defined_meaning`, `hds_id`, `culture`, `geonlp_id`, `part_of`, `analysis_policy_observatory_term_id`, `category_for_maps`, `treccanis_dizionario_di_storia_id`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `eurovoc_id`, `worldcat_identities_id`, `open_data_portal`, `kbpedia_id`, `grove_art_online_id`, `rkd_thesaurus_id`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `bbc_news_topic_id`, `inaturalist_place_id`, `economy_of_topic`, `tasteatlas_id`, `github_topic`, `namuwiki_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `yle_topic_id`, `ysa_id`, `joconde_location_id`, `zhihu_topic_id`, `store_norske_leksikon_id`, `krugosvet_article`, `schoenberg_database_of_manuscripts_place_id`, `country`, `the_world_factbook_country_id`, `national_library_of_israel_j9u_id`, `democracy_index`, `der_spiegel_topic_id`, `museum_digital_place_id`, `wikisimpsons_id`, `den_store_danske_id`, `urban_electric_transit_country_id`, `hashtag`, `postimees_topic_id`, `online_pwn_encyclopedia_id`, `alltrails_trail_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `openstreetmap_element`, `happy_planet_index_score`, `dewey_decimal_classification`, `bbc_things_id`, `comic_vine_id`, `obo_gazetteer_id`]\n- Table: `part`, Columns: [`label`, `description`, `freebase_id`, `instance_of`, `commons_category`, `has_parts`, `topics_main_category`, `coordinate_location`, `viaf_id`]",
        "Response": "Table: `head_of_state`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `governing_body` (`label`, `description`, `instance_of`, `country`, `has_parts`, `different_from`, `applies_to_jurisdiction`)  VALUES ('Bhubhaneshwar Municipal Corporation', 'nan', 'municipal corporation in India', 'India', 'corporator in Bhubhaneshwar Municipal Corporation', 'Bhubhaneshwar Municipal Corporation area', 'Bhubhaneshwar Municipal Corporation area');\nDatabase State:\n- Table: `political_border`, Columns: [`label`, `description`, `country`, `commons_category`, `iso_3166_2_code`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `locator_map_image`, `shares_border_with`, `official_website`, `topics_main_category`, `gnd_id`, `freebase_id`, `fips_10_4_countries_and_regions`, `musicbrainz_area_id`, `instance_of`, `geonames_id`, `page_banner`, `category_of_associated_people`, `getty_thesaurus_of_geographic_names_id`, `openstreetmap_relation_id`, `head_of_state`, `capital`, `encyclop\u00e6dia_britannica_online_id`, `curlie_id`, `inception`, `area`, `population`, `head_of_government`, `quora_topic_id`, `contains_the_administrative_territorial_entity`, `subreddit`, `indian_census_area_code_2001`, `gran_enciclop\u00e8dia_catalana_id`, `wikimedia_outline`, `legislative_body`, `office_held_by_head_of_government`, `executive_body`, `location_map`, `coextensive_with`, `different_from`, `viaf_id`, `male_population`, `female_population`, `urban_population`, `rural_population`, `mdws_place_id`, `library_of_congress_authority_id`, `native_label`, `literate_population`, `illiterate_population`, `language_used`, `image`, `whos_on_first_id`, `category_for_maps`, `geoshape`, `wolfram_language_entity_code`, `kbpedia_id`, `hasc`, `inaturalist_place_id`, `economy_of_topic`, `twitter_topic_id`, `store_norske_leksikon_id`, `den_store_danske_id`, `national_library_of_israel_j9u_id`, `online_pwn_encyclopedia_id`, `official_name`, `biblioth\u00e8que_nationale_de_france_id`, `nkcr_aut_id`]\n- Table: `governing_body`, Columns: [`label`, `description`, `instance_of`, `country`, `has_parts`, `different_from`, `applies_to_jurisdiction`]\n- Table: `jurisdiction`, Columns: [`label`, `description`, `page_banner`, `country`, `commons_category`, `iso_3166_2_code`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `locator_map_image`, `shares_border_with`, `official_website`, `topics_main_category`, `gnd_id`, `freebase_id`, `fips_10_4_countries_and_regions`, `instance_of`, `geonames_id`, `musicbrainz_area_id`, `openstreetmap_relation_id`, `inception`, `getty_thesaurus_of_geographic_names_id`, `curlie_id`, `capital`, `encyclop\u00e6dia_britannica_online_id`, `head_of_government`, `population`, `area`, `native_label`, `location_map`, `subreddit`, `quora_topic_id`, `indian_census_area_code_2001`, `image`, `wikimedia_outline`, `category_of_associated_people`, `office_held_by_head_of_government`, `legislative_body`, `executive_body`, `coextensive_with`, `different_from`, `viaf_id`, `male_population`, `female_population`, `urban_population`, `rural_population`, `mdws_place_id`, `library_of_congress_authority_id`, `literate_population`, `illiterate_population`, `language_used`, `whos_on_first_id`, `nkcr_aut_id`, `category_for_maps`, `geoshape`, `wolfram_language_entity_code`, `kbpedia_id`, `hasc`, `economy_of_topic`, `inaturalist_place_id`, `store_norske_leksikon_id`, `national_library_of_israel_j9u_id`, `den_store_danske_id`, `online_pwn_encyclopedia_id`, `gran_enciclop\u00e8dia_catalana_id`, `head_of_state`]",
        "Response": "Table: `governing_body`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (student_id)  VALUES (1501, 1934);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Friend"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, category, person, role, credited)  VALUES ('S20-E13', 'Produced by', 'Jaspreet Dhillon', 'animation associate producer', 'true');\nDatabase State:\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Character_Award, Columns: [award_id, character]\n- Table: `Episode`, Columns: [episode_id, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO review (a_id)  VALUES (6, 1, 3, 5, 5);\nDatabase State:\n- Table: review, Columns: [a_id]\n- Table: useracct, Columns: [u_id]",
        "Response": "Table: review"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional)  VALUES (5416, 1170, 2019, 1.0, 1.0, 'tablespoon(s)', NULL, 'FALSE');\nDatabase State:\n- Table: Nutrition, Columns: [recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories]\n- Table: Ingredient, Columns: [ingredient_id, category, name, plural]",
        "Response": "Table: Quantity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('elongation factor Tu XCC0893', 'microbial gene found in Xanthomonas campestris pv. campestris str. ATCC 33913', '1001458', 'gene', 'Elongation factor Tu XCC0893', 'Xanthomonas campestris pv. campestris str. ATCC 33913', 'forward strand', '1055123', '1053933', 'gene', 'XCC0893');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (cmi_cross_ref_id, master_customer_id, source_system_code)  VALUES (104, 2, 'Tax');\nDatabase State:\n- Table: Customer_Master_Index, Columns: [master_customer_id, cmi_details]\n- Table: Rent_Arrears, Columns: [council_tax_id, cmi_cross_ref_id]\n- Table: Parking_Fines, Columns: [council_tax_id, cmi_cross_ref_id]\n- Table: Business_Rates, Columns: [business_rates_id, cmi_cross_ref_id]\n- Table: CMI_Cross_References, Columns: [cmi_cross_ref_id, master_customer_id, source_system_code]\n- Table: Benefits_Overpayments, Columns: [council_tax_id, cmi_cross_ref_id]\n- Table: Council_Tax, Columns: [council_tax_id, cmi_cross_ref_id]",
        "Response": "Table: CMI_Cross_References"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (title_id, lorange, hirange, royalty)  VALUES ('PS2091', 1001, 5000, 12);\nDatabase State:\n- Table: sales, Columns: [stor_id, ord_num, ord_date, qty, payterms, title_id]\n- Table: stores, Columns: [stor_id, stor_name, stor_address, city, state, zip]\n- Table: pub_info, Columns: [pub_id, logo, pr_info]\n- Table: jobs, Columns: [job_id, job_desc, min_lvl, max_lvl]\n- Table: employee, Columns: [emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date]\n- Table: discounts, Columns: [discounttype, stor_id, lowqty, highqty, discount]\n- Table: publishers, Columns: [pub_id, pub_name, city, state, country]\n- Table: titleauthor, Columns: [au_id, title_id, au_ord, royaltyper]\n- Table: titles, Columns: [title_id, title, type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate]\n- Table: authors, Columns: [au_id, au_lname, au_fname, phone, address, city, state, zip, contract]",
        "Response": "Table: roysched"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `expressed_in` (`label`, `description`, `foundational_model_of_anatomy_id`, `described_by_source`, `uberon_id`, `subclass_of`, `instance_of`)  VALUES ('placenta', 'organ that connects the developing foetus to the uterine wall', 'nan', 'Ott\u016fv slovn\u00edk nau\u010dn\u00fd', '1987', 'particular anatomical entity', 'organ');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `expressed_in`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Products (product_id, product_name, product_details)  VALUES (13, 'phone', NULL);\nDatabase State:\n- Table: Order_Items, Columns: [order_item_id, product_id, order_id, order_item_status, order_item_details]\n- Table: Shipment_Items, Columns: [shipment_id, order_item_id]\n- Table: Shipments, Columns: [shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `office_held_by_head_of_government` (`label`, `description`, `instance_of`, `subclass_of`, `applies_to_jurisdiction`, `country`)  VALUES ('Governor of Central Sulawesi', 'head executive of Central Sulawesi Province, Indonesia', 'position', 'governor', 'Central Sulawesi', 'Indonesia');\nDatabase State:\n- Table: `office_held_by_head_of_government`, Columns: [`label`, `description`, `instance_of`, `subclass_of`, `applies_to_jurisdiction`, `country`]\n- Table: `jurisdiction`, Columns: [`label`, `description`, `instance_of`, `located_in_the_administrative_territorial_entity`, `capital`, `country`, `openstreetmap_relation_id`, `shares_border_with`, `locator_map_image`, `topics_main_category`, `coordinate_location`, `contains_the_administrative_territorial_entity`, `image`, `inception`, `office_held_by_head_of_government`, `administrative_code_of_indonesia`, `coat_of_arms_image`, `head_of_government`, `commons_category`, `flag_image`, `iso_3166_2_code`, `nkcr_aut_id`, `official_website`, `freebase_id`, `fips_10_4_countries_and_regions`, `dewey_decimal_classification`, `geonames_id`, `elevation_above_sea_level`, `population`, `area`, `postal_code`, `licence_plate_code`, `encyclop\u00e6dia_britannica_online_id`, `location_map`, `language_used`, `whos_on_first_id`, `category_for_maps`, `located_inon_physical_feature`, `motto_text`, `geoshape`, `inaturalist_place_id`, `getty_thesaurus_of_geographic_names_id`, `statistics_indonesia_area_code`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `dewey_decimal_classification`, `flag_image`, `commons_category`, `country`, `capital`, `iso_3166_2_code`, `coordinate_location`, `topics_main_category`, `instance_of`, `freebase_id`, `fips_10_4_countries_and_regions`, `geonames_id`, `located_in_the_administrative_territorial_entity`, `official_website`, `administrative_code_of_indonesia`, `contains_the_administrative_territorial_entity`, `area`, `locator_map_image`, `coat_of_arms_image`, `elevation_above_sea_level`, `located_inon_physical_feature`, `inception`, `nkcr_aut_id`, `language_used`, `whos_on_first_id`, `openstreetmap_relation_id`, `location_map`, `category_for_maps`, `motto_text`, `inaturalist_place_id`, `postal_code`, `statistics_indonesia_area_code`, `shares_border_with`, `office_held_by_head_of_government`, `population`, `image`, `encyclop\u00e6dia_britannica_online_id`]\n- Table: `national_park_of_indonesia`, Columns: [`label`, `description`, `commons_category`, `coordinate_location`, `instance_of`, `country`, `image`, `freebase_id`, `located_in_the_administrative_territorial_entity`, `wdpa_id`, `inception`, `area`, `iucn_protected_areas_category`]\n- Table: `political_border`, Columns: [`label`, `description`, `instance_of`, `located_in_the_administrative_territorial_entity`, `capital`, `country`, `openstreetmap_relation_id`, `shares_border_with`, `locator_map_image`, `topics_main_category`, `coordinate_location`, `contains_the_administrative_territorial_entity`, `image`, `inception`, `office_held_by_head_of_government`, `administrative_code_of_indonesia`, `coat_of_arms_image`, `freebase_id`, `geonames_id`, `elevation_above_sea_level`, `area`, `whos_on_first_id`, `inaturalist_place_id`, `statistics_indonesia_area_code`, `commons_category`, `head_of_government`, `flag_image`, `iso_3166_2_code`, `official_website`, `population`, `postal_code`, `location_map`, `language_used`, `motto_text`]\n- Table: `capital_city`, Columns: [`label`, `description`, `commons_category`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `instance_of`, `freebase_id`, `geonames_id`, `administrative_code_of_indonesia`, `image`, `topics_main_category`, `capital_of`, `statistics_indonesia_area_code`, `contains_the_administrative_territorial_entity`, `population`, `elevation_above_sea_level`, `musicbrainz_area_id`, `official_website`, `located_in_time_zone`, `quora_topic_id`, `locator_map_image`, `area`, `shares_border_with`, `whos_on_first_id`, `inception`, `viaf_id`, `dewey_decimal_classification`]",
        "Response": "Table: `office_held_by_head_of_government`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `field_of_work` (`label`, `description`, `openstreetmap_tag_or_key`, `topics_main_wikimedia_portal`, `commons_category`, `bncf_thesaurus_id`, `topics_main_category`, `ndl_authority_id`, `subclass_of`, `freebase_id`, `gnd_id`, `library_of_congress_authority_id`, `gran_enciclop\u00e8dia_catalana_id`, `psh_id`, `quora_topic_id`, `jstor_topic_id`, `us_national_archives_identifier`, `encyclop\u00e6dia_universalis_id`, `uses`, `practiced_by`, `different_from`, `encyclop\u00e6dia_britannica_online_id`, `icon`, `french_vikidia_id`, `enciclop\u00e8dia_de_lesport_catal\u00e0_id`, `yso_id`, `instance_of`, `kbpedia_id`, `image`, `wordnet_31_synset_id`, `zhihu_topic_id`, `national_library_of_israel_j9u_id`, `abc_news_topic_id`, `den_store_danske_id`, `nkcr_aut_id`, `on_focus_list_of_wikimedia_project`)  VALUES ('yachting', 'using water vessels, called yachts, for sporting purposes', 'nan', 'nan', 'Yachting', 'nan', 'Category:Yachting', 'nan', 'water sport', '/m/0884t', 'nan', 'nan', 'nan', '9986.0', 'Yachting', 'nan', '10641063.0', 'nan', 'nan', 'sailor', 'nan', 'topic/yachting', 'nan', 'nan', 'nan', 'nan', 'nan', 'Yachting', 'SUV LM06 5.jpg', '01949240-v', 'nan', 'nan', 'nan', 'nan', 'ph114810', 'nan');\nDatabase State:\n- Table: `use`, Columns: [`label`, `description`, `subclass_of`, `freebase_id`, `sport`, `commons_category`, `used_by`, `image`, `kbpedia_id`, `wordnet_31_synset_id`]\n- Table: `type_of_sport`, Columns: [`label`, `description`, `openstreetmap_tag_or_key`, `topics_main_wikimedia_portal`, `commons_category`, `bncf_thesaurus_id`, `topics_main_category`, `subclass_of`, `freebase_id`, `gnd_id`, `library_of_congress_authority_id`, `gran_enciclop\u00e8dia_catalana_id`, `described_by_source`, `quora_topic_id`, `encyclop\u00e6dia_universalis_id`, `great_russian_encyclopedia_online_id`, `uses`, `practiced_by`, `iptc_newscode`, `different_from`, `encyclop\u00e6dia_britannica_online_id`, `icon`, `australian_educational_vocabulary_id`, `french_vikidia_id`, `enciclop\u00e8dia_de_lesport_catal\u00e0_id`, `yso_id`, `instance_of`, `kbpedia_id`, `image`, `fandom_article_id`, `anidb_tag_id`, `national_library_of_israel_j9u_id`, `abc_news_topic_id`, `den_store_danske_id`, `nkcr_aut_id`, `krugosvet_article`, `on_focus_list_of_wikimedia_project`]\n- Table: `field_of_work`, Columns: [`label`, `description`, `openstreetmap_tag_or_key`, `topics_main_wikimedia_portal`, `commons_category`, `bncf_thesaurus_id`, `topics_main_category`, `ndl_authority_id`, `subclass_of`, `freebase_id`, `gnd_id`, `library_of_congress_authority_id`, `gran_enciclop\u00e8dia_catalana_id`, `psh_id`, `quora_topic_id`, `jstor_topic_id`, `us_national_archives_identifier`, `encyclop\u00e6dia_universalis_id`, `uses`, `practiced_by`, `different_from`, `encyclop\u00e6dia_britannica_online_id`, `icon`, `french_vikidia_id`, `enciclop\u00e8dia_de_lesport_catal\u00e0_id`, `yso_id`, `instance_of`, `kbpedia_id`, `image`, `wordnet_31_synset_id`, `zhihu_topic_id`, `national_library_of_israel_j9u_id`, `abc_news_topic_id`, `den_store_danske_id`, `nkcr_aut_id`, `on_focus_list_of_wikimedia_project`]\n- Table: `1975_mediterranean_games`, Columns: [`label`, `description`, `part_of`, `sport`, `instance_of`, `point_in_time`, `follows`]",
        "Response": "Table: `field_of_work`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Date received`, Product, `Sub-product`, Issue, `Sub-issue`, `Consumer complaint narrative`, Tags, `Consumer consent provided?`, `Submitted via`, `Date sent to company`, `Company response to consumer`, `Timely response?`, `Consumer disputed?`, `Complaint ID`, Client_ID)  VALUES ('2015-10-29', 'Credit card', NULL, 'Credit card protection / Debt protection', NULL, replace('I deposited {$2000.00} dollars with XXXX on XXXX/XXXX/2015 My account manager never had me fill out a Form DCF ( Document Confirmation Form ) which is part of XXXX Complaince Departments Protocol. My money was never used for trading and on XXXX XXXX was sent to XXXX XXXX ''s address in XXXX.. I received a phone call from XXXX a few weeks later from a XXXX XXXX, Senior Supervisor for XXXX. His phone number is XXXX XXXX XXXX XXXX. He told me my money was embezzled by XXXX XXXX and I should Contact my Bank Concerning this issue. My deposit was never used for trading and XXXX never told the Compliance Department about my Deposit. He concealed my money and the money of many of his other Clients taking over {$100000.00} and more. XXXX could not tell me how to get my money back, but did tell me I could dispute this transaction with my Bank. He could not give me more information because a Crime had been committed and this was reported to the XXXX XXXX Police Department. He refused to give me a case number for the Police Report Taken. Since my Money was never used for trading this was a breach in the XXXX contract I signed.. The DCF form was never filled out to show proof of my Deposit and XXXX concealed all of this from XXXX. I am sending you many documents and I hope someone at Eagle National Bank reads them that has a Brain. I received conflicting comments from several customer Care agents in The Eagle National Bank Dispute Department. The last woman I spoke to either did n''t know how to read or did n''t understand what a Contract was. The woman was XXXX or XXXX from her accent and was unable to answer any of my questions when she had the paperwork right in front of her. It was obvious she had not read the contract written by XXXX XXXX and only focused on the XXXX Contract for risks of losing money. My money was never used for trading and was embezzled by XXXX XXXX. There was a Crime committed and a breach in all of XXXX Contacts. \\n','\\n',char(10)), NULL, 'Consent provided', 'Web', '2015-10-29', 'Closed with monetary relief', 'Yes', 'No', 'CR1630630', 'C00000369');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`)  VALUES ('Thermus', 'genus of bacteria', 'Thermaceae', 'Thermus', 'taxon', 'genus', '958300.0', '/m/0n52_y_', '270.0', '3215704.0', '1297181.0', '646NT', 'Gram-negative bacteria', 'https://lpsn.dsmz.de/genus/thermus', '2776027139.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `topics_main_category`, `instance_of`, `country`, `sport`, `parent_club`, `official_website`, `category_for_members_of_a_team`, `part_of`, `twitter_username`, `facebook_id`, `inception`, `league`, `headquarters_location`)  VALUES ('Maryland Terrapins baseball', 'University of Maryland baseball team', 'Category:Maryland Terrapins baseball', 'baseball team', 'United States of America', 'baseball', 'Maryland Terrapins', 'https://umterps.com/sports/baseball', 'Category:Maryland Terrapins baseball players', 'Maryland Terrapins', 'TerpsBaseball', 'MarylandBaseball', '+1893-00-00T00:00:00Z', 'nan', 'nan');\nDatabase State:\n- Table: `maryland_terrapins`, Columns: [`label`, `description`, `topics_main_category`, `instance_of`, `country`, `sport`, `parent_club`, `official_website`, `category_for_members_of_a_team`, `part_of`, `twitter_username`, `facebook_id`, `inception`, `league`, `headquarters_location`]\n- Table: `wikimedia_category`, Columns: [`label`, `description`, `instance_of`, `category_combines_topics`, `category_contains`]",
        "Response": "Table: `maryland_terrapins`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO trains (id, direction)  VALUES (16, 'west');\nDatabase State:\n- Table: trains, Columns: [id, direction]",
        "Response": "Table: trains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr)  VALUES ('purcebl01', 1883, 1, 'PHI', 'NL', '3B', 46, '', '', 60, 111, 49, 7, '', '', '', '', '');\nDatabase State:\n- Table: college, Columns: [college_id, name_full, city, state, country]\n- Table: manager_award, Columns: [player_id, award_id, year, league_id, tie, notes]\n- Table: pitching_postseason, Columns: [player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]\n- Table: fielding_outfield, Columns: [player_id, year, stint, glf, gcf, grf]\n- Table: park, Columns: [park_id, park_name, park_alias, city, state, country]\n- Table: player_college, Columns: [player_id, college_id, year]\n- Table: team_franchise, Columns: [franchise_id, franchise_name, active, na_assoc]\n- Table: salary, Columns: [year, team_id, league_id, player_id, salary]\n- Table: player_award, Columns: [player_id, tie, notes]\n- Table: home_game, Columns: [year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]\n- Table: batting_postseason, Columns: [year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]",
        "Response": "Table: fielding"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, score, date, type)  VALUES (80243, NULL, '2016-04-04', 'Reinspection/Followup');\nDatabase State:\n- Table: violations, Columns: [business_id, date, violation_type_id, risk_category, description]\n- Table: businesses, Columns: [business_id, name, address, city, postal_code, latitude, longitude, phone_number, tax_code, business_certificate, application_date, owner_name, owner_address, owner_city, owner_state, owner_zip]\n- Table: inspections, Columns: [business_id, score, date, type]",
        "Response": "Table: inspections"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO male (`name`)  VALUES ('student439');\nDatabase State:\n- Table: no_payment_due, Columns: [`name`, bool]\n- Table: longest_absense_from_school, Columns: [`name`, `month`]",
        "Response": "Table: male"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `governing_body` (`label`, `description`, `official_website`, `instance_of`, `country`, `applies_to_jurisdiction`, `facebook_id`)  VALUES ('Invercargill City Council', 'territorial authority of New Zealand', 'https://icc.govt.nz', 'territorial authority of New Zealand', 'New Zealand', 'Invercargill City', 'nan');\nDatabase State:\n- Table: `governing_body`, Columns: [`label`, `description`, `official_website`, `instance_of`, `country`, `applies_to_jurisdiction`, `facebook_id`]\n- Table: `jurisdiction`, Columns: [`label`, `description`, `instance_of`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `new_zealand_gazetteer_place_id`, `authority`, `area`, `population`, `inaturalist_place_id`, `geonames_id`, `shares_border_with`, `commons_category`]",
        "Response": "Table: `governing_body`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Cartoon` (`id`, `Title`, `Directed_by`, `Written_by`, `Original_air_date`, `Production_code`, `Channel`)  VALUES (12.0, 'Deep Cover for Batman!', 'Michael Chang', 'Joseph Kuhr', 'February27,2009', 112.0, '707');\nDatabase State:\n- Table: `TV_Channel`, Columns: [`id`, `series_name`, `Country`, `Language`, `Content`, `Pixel_aspect_ratio_PAR`, `Hight_definition_TV`, `Pay_per_view_PPV`, `Package_Option`]\n- Table: `TV_series`, Columns: [`id`, `Episode`, `Air_Date`, `Rating`, `Share`, `18_49_Rating_Share`, `Viewers_m`, `Weekly_Rank`, `Channel`]\n- Table: `Cartoon`, Columns: [`id`, `Title`, `Directed_by`, `Written_by`, `Original_air_date`, `Production_code`, `Channel`]",
        "Response": "Table: `Cartoon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `taxon` (`label`, `description`, `taxon_name`, `taxon_rank`, `freebase_id`, `ncbi_taxonomy_id`, `parent_taxon`, `instance_of`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`, `catalogue_of_life_id`)  VALUES ('Burkholderia mallei', 'species of bacterium', 'Burkholderia mallei', 'species', '/m/09jc01', '13373.0', 'Burkholderia', 'taxon', '3219954.0', '960172.0', 'Gram-negative bacteria', '10031100.0', 'http://www.bacterio.net/burkholderia.html#mallei', '2776082943.0', 'NXHS');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Event_ID, Participant_ID)  VALUES (80, 36);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Participants_in_Events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `camera_lens` (`id`, `brand`, `name`, `focal_length_mm`, `max_aperture`)  VALUES (11, 'Sigma', 'Sigma 30mm f2.8 DN', 30.0, 2.799999999999999823);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `camera_lens`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `cospar_id`, `scn`, `utc_date_of_spacecraft_launch`, `space_launch_vehicle`, `instance_of`, `part_of`, `follows`, `followed_by`, `type_of_orbit`, `freebase_id`, `crew_members`, `vehicle`, `orbits_completed`, `utc_date_of_spacecraft_landing`, `orbital_inclination`, `orbital_period`, `apoapsis`, `periapsis`, `mass`, `duration`, `location_of_landing`, `operator`, `start_point`, `logo_image`, `country`, `significant_event`, `time_of_object_orbit_decay`, `commons_category`)  VALUES ('Soyuz TM-6', '1988 Soviet crewed spaceflight to Mir', '1988-075A', '19443.0', '+1988-08-29T00:00:00Z', 'Soyuz-U2', 'Soyuz-TM', 'Soyuz programme', 'Soyuz TM-5', 'Soyuz TM-7', 'low Earth orbit', '/m/03h1r_', 'Vladimir Lyakhov', 'Soyuz-TM', 1840.0, '+1988-12-21T00:00:00Z', 51.64000000000000056, 88.70000000000000284, 228.0, 195.0, 7070.0, 9869629.0, 'Kazakhstan', 'Soviet space program', 'Baikonur Cosmodrome', 'Soyuz TM-6 patch.svg', 'Soviet Union', 'rocket launch', '+1981-00-00T00:00:00Z', 'Soyuz TM-6');\nDatabase State:\n- Table: `spaceflight`, Columns: [`label`, `description`, `cospar_id`, `scn`, `space_launch_vehicle`, `utc_date_of_spacecraft_launch`, `instance_of`, `part_of`, `follows`, `followed_by`, `type_of_orbit`, `freebase_id`, `crew_members`, `vehicle`, `orbits_completed`, `utc_date_of_spacecraft_landing`, `orbital_inclination`, `orbital_period`, `duration`, `location_of_landing`, `operator`, `start_point`, `commons_category`, `country`, `significant_event`, `time_of_object_orbit_decay`, `wolfram_language_entity_code`, `apoapsis`, `periapsis`, `mass`, `logo_image`]\n- Table: `alma_mater`, Columns: [`label`, `description`, `instance_of`, `country`, `inception`, `commons_category`, `located_in_the_administrative_territorial_entity`, `award_received`, `google_knowledge_graph_id`]\n- Table: `crew_member`, Columns: [`label`, `description`, `given_name`, `instance_of`, `occupation`, `date_of_birth`, `place_of_birth`, `astronaut_mission`, `freebase_id`, `award_received`, `country_of_citizenship`, `time_in_space`, `warheroesru_id`, `educated_at`, `military_rank`, `image`, `sex_or_gender`, `commons_category`, `languages_spoken_written_or_signed`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `commons_category`, `country`, `coordinate_location`, `instance_of`, `population`, `postal_code`, `whos_on_first_id`]\n- Table: `followed_by`, Columns: [`label`, `description`, `cospar_id`, `scn`, `utc_date_of_spacecraft_launch`, `space_launch_vehicle`, `instance_of`, `part_of`, `follows`, `followed_by`, `type_of_orbit`, `freebase_id`, `crew_members`, `vehicle`, `orbits_completed`, `utc_date_of_spacecraft_landing`, `orbital_inclination`, `orbital_period`, `apoapsis`, `periapsis`, `mass`, `duration`, `location_of_landing`, `operator`, `start_point`, `logo_image`, `country`, `significant_event`, `time_of_object_orbit_decay`, `commons_category`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (224679, 2002, 'B', 'A', '2y all', '0', 'NULL', '0', 'NULL', 'NULL');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `subclass_of`, `entrez_gene_id`, `encodes`, `found_in_taxon`, `genomic_start`, `strand_orientation`, `genomic_end`, `instance_of`, `ncbi_locus_tag`)  VALUES ('methylated-DNA--protein-cysteine methyltransferase MSMEG_4316', 'microbial gene found in Mycolicibacterium smegmatis MC2 155', 'gene', '4535590.0', 'methylated-DNA--protein-cysteine methyltransferase    MSMEG_4316', 'Mycobacterium smegmatis str. MC2 155', '4403407', 'forward strand', '4403970', 'gene', 'MSMEG_4316');\nDatabase State:\n- Table: `methylated_dna_protein_cysteine_s_methyltransferase_active_site_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `entrez_gene_id`, `encodes`, `found_in_taxon`, `genomic_start`, `strand_orientation`, `genomic_end`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `location`, `instance_of`, `point_in_time`, `participant`, `winner`, `sport`, `country`)  VALUES ('2014 Solstice 50', 'sled dog race', 'Two Rivers', 'sled dog racing', '+2015-01-03T00:00:00Z', 'Aliy Zirkle', 'Aliy Zirkle', 'sled dog racing', 'United States of America');\nDatabase State:\n- Table: `family_name_identical_to_this_given_name`, Columns: [`label`, `description`, `instance_of`, `soundex`, `cologne_phonetics`, `caverphone`, `different_from`, `native_label`, `writing_system`, `commons_category`, `wolfram_language_entity_code`, `g\u00e9opatronyme_id`, `geneanet_family_name_id`]\n- Table: `sled_dog_racing`, Columns: [`label`, `description`, `location`, `instance_of`, `point_in_time`, `participant`, `winner`, `sport`, `country`]\n- Table: `given_name`, Columns: [`label`, `description`, `instance_of`, `different_from`, `language_of_work_or_name`, `said_to_be_the_same_as`, `native_label`, `writing_system`, `soundex`, `cologne_phonetics`, `caverphone`, `family_name_identical_to_this_given_name`, `commons_category`]\n- Table: `participant`, Columns: [`label`, `description`, `sex_or_gender`, `instance_of`, `occupation`, `given_name`, `sport`, `family_name`]",
        "Response": "Table: `sled_dog_racing`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO payment (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update)  VALUES (14864, 554, 1, 11873, 0.989999999999999992, '2005-08-17 14:14:39', '2006-02-15 22:21:51');\nDatabase State:\n- Table: payment, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]",
        "Response": "Table: payment"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (userid, movieid, rating)  VALUES (3364, 2423139, '5');\nDatabase State:\n- Table: `actors`, Columns: [actorid, a_gender, a_quality]\n- Table: `directors`, Columns: [directorid, d_quality, avg_revenue]\n- Table: users, Columns: [userid, age, u_gender, occupation]\n- Table: `movies2directors`, Columns: [movieid, directorid, genre]",
        "Response": "Table: `u2base`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, date, violation_type_id, risk_category, description)  VALUES (72002, '2016-05-25', '103119', 'Moderate Risk', 'Inadequate and inaccessible handwashing facilities');\nDatabase State:\n- Table: businesses, Columns: [business_id, name, address, city, postal_code, latitude, longitude, phone_number, tax_code, business_certificate, application_date, owner_name, owner_address, owner_city, owner_state, owner_zip]\n- Table: inspections, Columns: [business_id, score, date, type]\n- Table: violations, Columns: [business_id, date, violation_type_id, risk_category, description]",
        "Response": "Table: violations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `instance_of`, `commons_category`, `locator_map_image`, `image`, `postal_code`, `local_dialing_code`, `coordinate_location`, `swiss_municipality_code`, `coat_of_arms_image`, `official_website`, `topics_main_category`, `freebase_id`, `gnd_id`, `population`, `musicbrainz_area_id`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `list_of_monuments`, `category_of_associated_people`, `elevation_above_sea_level`, `viaf_id`, `official_name`, `external_data_available_at`, `area`, `openstreetmap_relation_id`, `biblioth\u00e8que_nationale_de_france_id`, `archinform_location_id`, `licence_plate_code`, `whos_on_first_id`, `described_by_source`, `hds_id`, `worldcat_identities_id`, `located_in_or_next_to_body_of_water`, `sapa_id`)  VALUES ('canton of Schwyz', 'canton of Switzerland', 'Switzerland', 'Switzerland', 'cantons of Switzerland', 'Canton of Schwyz', 'Karte Kanton Schwyz 2010.png', 'Ibergeregg sea of fog.jpg', 'nan', 'nan', '47.066666666667', 'nan', 'Wappen Schwyz matt.svg', 'https://www.sz.ch', 'Category:Canton of Schwyz', '/m/016tds', '4054019-4', 159165.0, '796fd82b-30f6-4568-822a-d002e1316354', 'Category:Births in the canton of Schwyz', 'Category:Deaths in the canton of Schwyz', '2658664.0', 'list of cultural properties in the Canton of Schwyz', 'nan', 516.0, '134271490', 'nan', 'nan', 907.8799999999999955, '1688583.0', '120709591', '2914.0', 'SZ', '85682305.0', 'Brockhaus and Efron Encyclopedic Dictionary', '7385.0', 'lccn-n80093609', 'nan', 'p/1ef0c0c3-c5a0-423f-b566-a95da5da2be0');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `instance_of`, `commons_category`, `locator_map_image`, `image`, `postal_code`, `local_dialing_code`, `coordinate_location`, `swiss_municipality_code`, `coat_of_arms_image`, `official_website`, `topics_main_category`, `freebase_id`, `gnd_id`, `population`, `musicbrainz_area_id`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `list_of_monuments`, `category_of_associated_people`, `elevation_above_sea_level`, `viaf_id`, `official_name`, `external_data_available_at`, `area`, `openstreetmap_relation_id`, `biblioth\u00e8que_nationale_de_france_id`, `archinform_location_id`, `licence_plate_code`, `whos_on_first_id`, `described_by_source`, `hds_id`, `worldcat_identities_id`, `located_in_or_next_to_body_of_water`, `sapa_id`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `instance_of`, `category_combines_topics`, `category_contains`]\n- Table: `wikimedia_category`, Columns: [`label`, `description`, `instance_of`, `commons_category`, `category_combines_topics`, `category_contains`]\n- Table: `body_of_water`, Columns: [`label`, `description`, `country`, `located_in_the_administrative_territorial_entity`, `commons_category`, `coordinate_location`, `image`, `instance_of`, `length`, `drainage_basin`, `watershed_area`, `geonames_id`, `gnd_id`, `freebase_id`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `torrents` (groupName, totalSnatched, artist, groupYear, releaseType, groupId, id)  VALUES ('4 elements', 118, 'chronic future', 2000, 'album', 397579, 11602);\nDatabase State:\n- Table: `torrents`, Columns: [groupName, totalSnatched, artist, groupYear, releaseType, groupId, id]\n- Table: `tags`, Columns: [`index`, id, tag]",
        "Response": "Table: `torrents`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`name`)  VALUES ('student63');\nDatabase State:\n- Table: male, Columns: [`name`]\n- Table: filed_for_bankrupcy, Columns: [`name`]\n- Table: disabled, Columns: [`name`]\n- Table: enrolled, Columns: [name, school, month]\n- Table: enlist, Columns: [`name`, organ]\n- Table: unemployed, Columns: [`name`]",
        "Response": "Table: person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score)  VALUES (503, 18, 2014, 450);\nDatabase State:\n- Table: country, Columns: [id, country_name]\n- Table: university_ranking_year, Columns: [university_id, ranking_criteria_id, year, score]\n- Table: university, Columns: [id, country_id, university_name]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`)  VALUES ('carbonic anhydrase BN112_1982', 'microbial gene found in Bordetella bronchiseptica 253', 'Bordetella bronchiseptica 253', '13979040', 'gene', 'Carbonic anhydrase BN112_1982', 'BN112_1982', '2138431', 'forward strand', 'gene', '2137691');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO competitor_event (event_id, competitor_id, medal_id)  VALUES (162, 173578, 4);\nDatabase State:\n- Table: games_city, Columns: [games_id, city_id]\n- Table: city, Columns: [id, city_name]",
        "Response": "Table: competitor_event"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Department_ID`, `Name`, `Creation`, `Ranking`, `Budget_in_Billions`, `Num_Employees`)  VALUES (7, 'Commerce', '1903', 7, 6.200000000000000177, 36000.0);\nDatabase State:\n- Table: `head`, Columns: [`head_ID`, `name`, `born_state`, `age`]",
        "Response": "Table: `department`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO institution_grads (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (214810, 2003, 'B', 'W', '4y bach', '173', '40', '89', '23.1', '51.4');\nDatabase State:\n- Table: state_sector_grads, Columns: [stateid, state, state_abbr, control, level, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate, grad_cohort_ct]\n- Table: `state_sector_details`, Columns: [stateid, state, state_post, level, control, schools_count, counted_pct, awards_per_state_value, awards_per_natl_value, exp_award_state_value, exp_award_natl_value, state_appr_value, state_appr_rank, grad_rate_rank, awards_per_rank]\n- Table: institution_details, Columns: [unitid, chronname, city, state, level, control, basic, hbcu, flagship, long_x, lat_y, site, student_count, awards_per_value, awards_per_state_value, awards_per_natl_value, exp_award_value, exp_award_state_value, exp_award_natl_value, exp_award_percentile, ft_pct, fte_value, fte_percentile, med_sat_value, med_sat_percentile, aid_value, aid_percentile, endow_value, endow_percentile, grad_100_value, grad_100_percentile, grad_150_value, grad_150_percentile, pell_value, pell_percentile, retain_value, retain_percentile, ft_fac_value, ft_fac_percentile, vsa_year, vsa_grad_after4_first, vsa_grad_elsewhere_after4_first, vsa_enroll_after4_first, vsa_enroll_elsewhere_after4_first, vsa_grad_after6_first, vsa_grad_elsewhere_after6_first, vsa_enroll_after6_first, vsa_enroll_elsewhere_after6_first, vsa_grad_after4_transfer, vsa_grad_elsewhere_after4_transfer, vsa_enroll_after4_transfer, vsa_enroll_elsewhere_after4_transfer, vsa_grad_after6_transfer, vsa_grad_elsewhere_after6_transfer, vsa_enroll_after6_transfer, vsa_enroll_elsewhere_after6_transfer, similar, state_sector_ct, carnegie_ct, counted_pct, nicknames, cohort_size]\n- Table: institution_grads, Columns: [unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate]",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (date, store_nbr, item_nbr, units)  VALUES ('2014-04-03', 3, 65, 0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `death` (`caused_by_ship_id`, `id`, `note`, `killed`, `injured`)  VALUES (1, 9, 'Dantewada, Chhattisgarh', 29, 0);\nDatabase State:\n- Table: `death`, Columns: [`caused_by_ship_id`, `id`, `note`, `killed`, `injured`]\n- Table: `battle`, Columns: [`id`, `name`, `date`, `bulgarian_commander`, `latin_commander`, `result`]",
        "Response": "Table: `death`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `category_combines_topics`, `commons_category`, `category_contains`)  VALUES ('Category:Births in Virginia', 'Wikimedia category', 'Wikimedia category', 'place of birth', 'Births in Virginia', 'human');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `place_of_birth`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Ball_by_Ball (Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler)  VALUES (419127, 14, 3, 2, 7, 1, 2, 133, 79, 84);\nDatabase State:\n- Table: Umpire, Columns: [Umpire_Id, Umpire_Name, Umpire_Country]\n- Table: Player_Match, Columns: [Match_Id, Player_Id, Role_Id, Team_Id]\n- Table: Win_By, Columns: [Win_Id, Win_Type]\n- Table: Extra_Type, Columns: [Extra_Id, Extra_Name]\n- Table: Country, Columns: [Country_Id, Country_Name]\n- Table: Out_Type, Columns: [Out_Id, Out_Name]\n- Table: Ball_by_Ball, Columns: [Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler]\n- Table: Rolee, Columns: [Role_Id, Role_Desc]\n- Table: Outcome, Columns: [Outcome_Id, Outcome_Type]\n- Table: Wicket_Taken, Columns: [Match_Id, Over_Id, Ball_Id, Player_Out, Kind_Out, Fielders, Innings_No]",
        "Response": "Table: Ball_by_Ball"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `azaphilone` (`label`, `description`, `chemical_formula`, `inchi`, `instance_of`, `mass`, `isomeric_smiles`, `canonical_smiles`, `pubchem_cid`, `inchikey`, `found_in_taxon`)  VALUES ('Falconensin D', 'bioactive natural product', 'C\u2082\u2085H\u2082\u2088Cl\u2082O\u2088', 'InChI=1S/C25H28Cl2O8/c1-7-8-15-9-14-10-17(29)25(4,23(34-13(3)28)16(14)11-33-15)35-24(30)18-12(2)19(26)22(32-6)20(27)21(18)31-5/h9-10,16,23H,7-8,11H2,1-6H3/t16-,23+,25+/m1/s1', 'chemical compound', 526.1161232160000054, 'CCCC1=CC2=CC(=O)[C@]([C@H]([C@@H]2CO1)OC(=O)C)(C)OC(=O)C3=C(C(=C(C(=C3OC)Cl)OC)Cl)C', 'O=C(OC1(C(=O)C=C2C=C(OCC2C1OC(=O)C)CCC)C)C=3C(OC)=C(Cl)C(OC)=C(Cl)C3C', '10369623', 'GJJRTDHSSQUZNO-OYMMJLNRSA-N', 'Aspergillus falconensis');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `instance_of`, `parent_taxon`, `ncbi_taxonomy_id`, `index_fungorum_id`, `mycobank_taxon_name_id`, `gbif_taxon_id`, `new_zealand_organisms_register_id`, `open_tree_of_life_id`, `catalogue_of_life_id`]\n- Table: `azaphilone`, Columns: [`label`, `description`, `chemical_formula`, `inchi`, `instance_of`, `mass`, `isomeric_smiles`, `canonical_smiles`, `pubchem_cid`, `inchikey`, `found_in_taxon`]\n- Table: `taxon`, Columns: [`label`, `description`, `commons_category`, `taxon_rank`, `taxon_name`, `image`, `parent_taxon`, `instance_of`, `topics_main_category`, `ncbi_taxonomy_id`, `encyclopedia_of_life_id`, `index_fungorum_id`, `mycobank_taxon_name_id`, `new_zealand_organisms_register_id`, `inaturalist_taxon_id`, `eppo_code`, `nederlands_soortenregister_id`, `dyntaxa_id`, `nbn_system_key`, `gbif_taxon_id`, `irmng_id`, `australian_fungi_id`, `open_tree_of_life_id`, `nbic_taxon_id`, `catalogue_of_life_id`]",
        "Response": "Table: `azaphilone`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, category, person, role, credited)  VALUES ('S20-E1', 'Music Department', 'Joe Zimmerman', 'music librarian', 'false');\nDatabase State:\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, person, role, episode_id, season, song, result]\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `political_border` (`label`, `description`, `locator_map_image`, `coordinate_location`, `instance_of`, `located_in_the_administrative_territorial_entity`, `shares_border_with`, `country`, `geonames_id`, `commons_category`, `freebase_id`, `gnd_id`, `topics_main_category`, `viaf_id`, `image`, `elevation_above_sea_level`, `openstreetmap_relation_id`, `area`, `population`, `whos_on_first_id`, `worldcat_identities_id`, `coat_of_arms_image`, `official_website`, `postal_code`, `located_in_time_zone`, `local_dialing_code`)  VALUES ('Papendrecht', 'municipality in the Netherlands', 'Map - NL - Municipality code 0590 (2009).svg', '51.833333333333', 'municipality of the Netherlands', 'South Holland', 'Alblasserdam', 'Netherlands', '2748728', 'Papendrecht', '/m/0wbtf', '7596068-0', 'Category:Papendrecht', '153662591', 'OphaalbruginPapendrecht.JPG', NULL, 'nan', 10.78999999999999914, 32171.0, '101754725.0', 'nan', 'Coat of arms of Papendrecht.svg', 'http://www.papendrecht.nl/', '3350\u20133356', 'UTC+01:00', 'nan');\nDatabase State:\n- Table: `source_of_information`, Columns: [`label`, `description`, `instance_of`, `language_of_work_or_name`]\n- Table: `political_border`, Columns: [`label`, `description`, `locator_map_image`, `coordinate_location`, `instance_of`, `located_in_the_administrative_territorial_entity`, `shares_border_with`, `country`, `geonames_id`, `commons_category`, `freebase_id`, `gnd_id`, `topics_main_category`, `viaf_id`, `image`, `elevation_above_sea_level`, `openstreetmap_relation_id`, `area`, `population`, `whos_on_first_id`, `worldcat_identities_id`, `coat_of_arms_image`, `official_website`, `postal_code`, `located_in_time_zone`, `local_dialing_code`]\n- Table: `head_of_government`, Columns: [`label`, `description`, `instance_of`, `sex_or_gender`, `country_of_citizenship`, `occupation`, `date_of_birth`, `position_held`, `member_of_political_party`, `image`, `languages_spoken_written_or_signed`, `place_of_birth`, `commons_category`, `family_name`, `given_name`]\n- Table: `given_name`, Columns: [`label`, `description`, `instance_of`, `native_label`, `writing_system`, `language_of_work_or_name`, `commons_category`, `said_to_be_the_same_as`, `soundex`, `cologne_phonetics`, `caverphone`, `family_name_identical_to_this_given_name`]\n- Table: `revival_house`, Columns: [`label`, `description`, `coordinate_location`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`, `street_address`]",
        "Response": "Table: `political_border`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `coordinate_location`, `country`, `openstreetmap_relation_id`, `instance_of`, `locator_map_image`, `flag_image`, `different_from`, `described_by_source`, `shares_border_with`, `vision_of_britain_place_id`, `population`, `flag`, `catalog_code`, `part_of`, `factgrid_item_id`, `commons_category`, `said_to_be_the_same_as`)  VALUES ('Westmorland', 'historic county of England', '54.5', 'United Kingdom', 'nan', 'historic county of England', 'Westmorland Brit Isles Sect 3.svg', 'Flag of Westmorland.svg', 'Westmorland', 'Brockhaus and Efron Encyclopedic Dictionary', 'Cumberland', '17480.0', 87661.0, 'flag of Westmorland', 'WML', 'nan', 'Q217759', 'Westmorland', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `historic_county`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, full_name, gender, height, weight)  VALUES (4261, 'Kang Keam \"Anthony\"\" Ang\"', 'M', 175, 70);\nDatabase State:\n- Table: event, Columns: [id, sport_id, event_name]\n- Table: competitor_event, Columns: [event_id, competitor_id, medal_id]\n- Table: medal, Columns: [id, medal_name]\n- Table: noc_region, Columns: [id, noc, region_name]\n- Table: person_region, Columns: [person_id, region_id]\n- Table: games_competitor, Columns: [id, games_id, person_id, age]\n- Table: city, Columns: [id, city_name]\n- Table: person, Columns: [id, full_name, gender, height, weight]\n- Table: sport, Columns: [id, sport_name]\n- Table: games, Columns: [id, games_year, games_name, season]\n- Table: games_city, Columns: [games_id, city_id]",
        "Response": "Table: person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (case_number, race, gender, last_name, first_name, full_name)  VALUES ('363184P', 'L', 'M', 'Garcia', 'David', 'Garcia, David');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: subjects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('E0', '2020-01-19', 'Liverpool', 'Man United', 2, 0, 'H', 2020);\nDatabase State:\n- Table: matchs, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]\n- Table: divisions, Columns: [division, name, country]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Train_ID`, `Train_Num`, `Name`, `From`, `Arrival`, `Railway_ID`)  VALUES (6, '16094', 'Lucknow-Chennai Exp', 'Lucknow', '13:04', 5);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `train`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO user (UserID, Gender)  VALUES ('tw-1400143141', 'Male');\nDatabase State:\n- Table: user, Columns: [UserID, Gender]",
        "Response": "Table: user"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `1560s_bc` (`label`, `description`, `point_in_time`, `instance_of`, `follows`, `followed_by`, `part_of`)  VALUES ('1565 BC', 'year of the pre-Julian Roman calendar', '-1565-01-01T00:00:00Z', 'year BC', '1566 BC', '1564 BC', '1560s BC');\nDatabase State:\n- Table: `1560s_bc`, Columns: [`label`, `description`, `point_in_time`, `instance_of`, `follows`, `followed_by`, `part_of`]",
        "Response": "Table: `1560s_bc`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`ID`, `Music_Festival`, `Date_of_ceremony`, `Category`, `Volume`, `Result`)  VALUES (6, '40th Japan Academy Prize', '18 February 2011', 'Best Song', 6, 'Nominated');\nDatabase State:\n- Table: `music_festival`, Columns: [`ID`, `Music_Festival`, `Date_of_ceremony`, `Category`, `Volume`, `Result`]\n- Table: `artist`, Columns: [`Artist_ID`, `Artist`, `Age`, `Famous_Title`, `Famous_Release_date`]\n- Table: `volume`, Columns: [`Volume_ID`, `Volume_Issue`, `Issue_Date`, `Weeks_on_Top`, `Song`, `Artist_ID`]",
        "Response": "Table: `music_festival`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `found_in_taxon`)  VALUES ('Pf3D7_10_v3', 'nan', 'chromosome', 'Plasmodium falciparum 3D7');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `instance_of`, `subclass_of`, `found_in_taxon`, `genedb_id`, `encoded_by`]\n- Table: `early_transcribed_membrane_protein_etramp`, Columns: [`label`, `description`, `instance_of`, `subclass_of`, `encoded_by`, `genedb_id`, `uniprot_protein_id`, `part_of`, `found_in_taxon`, `described_by_source`, `cell_component`]",
        "Response": "Table: `chromosome`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customers (customer_id, customer_name, customer_details)  VALUES (4, 'Leilani', 'sequi');\nDatabase State:\n- Table: Shipments, Columns: [shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details]\n- Table: Invoices, Columns: [invoice_number, invoice_date, invoice_details]\n- Table: Orders, Columns: [order_id, customer_id, order_status, date_order_placed, order_details]\n- Table: Products, Columns: [product_id, product_name, product_details]\n- Table: Customers, Columns: [customer_id, customer_name, customer_details]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name)  VALUES (83, 23.0, 4, 120.0, 97, 2506, 14.5, 72, 'toyouta corona mark ii (sw)');\nDatabase State:\n- Table: production, Columns: [ID, model_year, country]\n- Table: data, Columns: [ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name]\n- Table: price, Columns: [ID, price]",
        "Response": "Table: data"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `collection`, `image`, `location`, `inception`, `inventory_number`, `height`, `width`)  VALUES ('Kay Khusraw Captures the Demon-occupied Bahman Castle', 'Miniature from the \"Tahmasp Shahnameh\" in the David Collection, Copenhagen', 'manuscript illumination', 'David Collection', 'Kay Khusraw Captures the Demon-occupied Bahman Castle.jpg', 'Copenhagen', '+1550-00-00T00:00:00Z', '31/1988', 47.60000000000000142, 32.10000000000000142);\nDatabase State:\n- Table: `album_leaf`, Columns: [`label`, `description`, `instance_of`, `collection`, `image`, `location`, `inception`, `inventory_number`, `height`, `width`]\n- Table: `collection`, Columns: [`label`, `description`, `commons_category`, `coordinate_location`, `freebase_id`, `viaf_id`, `idref_id`, `isni`, `library_of_congress_authority_id`, `official_website`, `inception`, `image`, `located_in_the_administrative_territorial_entity`, `instance_of`, `commons_institution_page`, `country`, `biblioth\u00e8que_nationale_de_france_id`, `worldcat_identities_id`, `national_library_of_israel_j9u_id`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `twinned_administrative_body`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `freebase_id`, `instance_of`, `geonames_id`, `topics_main_category`, `commons_category`, `official_website`, `image`, `page_banner`, `population`, `area`, `locator_map_image`, `openstreetmap_relation_id`, `postal_code`, `whos_on_first_id`, `elevation_above_sea_level`, `gnd_id`, `musicbrainz_area_id`, `library_of_congress_authority_id`, `category_of_associated_people`, `inception`, `head_of_government`, `quora_topic_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `viaf_id`, `different_from`, `rkd_thesaurus_id`, `national_library_of_israel_j9u_id`, `worldcat_identities_id`]",
        "Response": "Table: `album_leaf`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Complaints (complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id)  VALUES (9, 117, 116, 'OK', 'New', 'Product Unusable', '2006-10-29 07:08:46', '1995-09-11 14:48:46', 120);\nDatabase State:\n- Table: Staff, Columns: [staff_id, gender, first_name, last_name, email_address, phone_number]",
        "Response": "Table: Complaints"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('recombination factor protein RarA Moth_1656', 'microbial gene found in Moorella thermoacetica ATCC 39073', '3830944', 'gene', 'Recombination factor protein RarA Moth_1656', 'Moorella thermoacetica ATCC 39073', 'forward strand', '1691422.0', '1690097.0', 'gene', 'Moth_1656');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `described_by_source`, `series_ordinal`, `short_name`)  VALUES ('host address', 'type of resource record in the Domain Name System (DNS)', 'resource record', 'RFC 1035: Domain names - implementation and specification', '1', 'A');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `resource_record`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `winner` (`label`, `description`, `sex_or_gender`, `date_of_birth`, `instance_of`, `occupation`, `freebase_id`, `image`, `place_of_birth`, `country_of_citizenship`, `participant_in`, `given_name`, `member_of_sports_team`, `sport`, `cycling_archives_cyclist_id`, `procyclingstats_cyclist_id`, `cyclebase_cyclist_id`, `m\u00e9moire_du_cyclisme_cyclist_id`)  VALUES ('John Degenkolb', 'German racing cyclist', 'male', '+1989-01-07T00:00:00Z', 'human', 'sport cyclist', '/m/0gg6b25', '20181003 M\u00fcnsterland Giro, John Degenkolb, Coesfeld (07691).jpg', 'Gera', 'Germany', '2014 Tour de France', 'John', 'HTC-Highroad', 'road bicycle racing', '22100.0', '140765.0', '28089.0', '4965.0');\nDatabase State:\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `sport`, `country`, `follows`, `followed_by`, `point_in_time`, `edition_number`, `winner`, `event_distance`, `google_knowledge_graph_id`]\n- Table: `gentwevelgem`, Columns: [`label`, `description`, `instance_of`, `sport`, `country`, `edition_number`, `point_in_time`, `follows`, `followed_by`, `winner`, `event_distance`]\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `sport`, `country`, `follows`, `followed_by`, `point_in_time`, `edition_number`, `winner`, `event_distance`]\n- Table: `winner`, Columns: [`label`, `description`, `sex_or_gender`, `date_of_birth`, `instance_of`, `occupation`, `freebase_id`, `image`, `place_of_birth`, `country_of_citizenship`, `participant_in`, `given_name`, `member_of_sports_team`, `sport`, `cycling_archives_cyclist_id`, `procyclingstats_cyclist_id`, `cyclebase_cyclist_id`, `m\u00e9moire_du_cyclisme_cyclist_id`]",
        "Response": "Table: `winner`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS)  VALUES (4198, '2001-2002', 'Austria', 'WC', 'Regular Season', 6, 1, 4, 5, 0, 1);\nDatabase State:\n- Table: height_info, Columns: [height_id, height_in_cm, height_in_inch]",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `recombination_promoting_nuclease_rpna` (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Transposase O3K_07970', 'microbial protein found in Escherichia coli O104:H4 str. 2011C-3493', 'A0A0E0XWT3', 'Escherichia coli O104:H4 str. 2011C-3493', 'protein', 'transposase O3K_07970', 'protein', 'YP_006778301', 'Recombination-promoting nuclease RpnA');\nDatabase State:\n- Table: `recombination_promoting_nuclease_rpna`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `genbank_assembly_accession_number`, `gram_staining`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `parent_taxon`, `instance_of`, `freebase_id`, `itis_tsn`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `gram_staining`, `jstor_topic_id`, `irmng_id`, `mesh_descriptor_id`, `lpsn_url`, `microsoft_academic_id`, `openalex_id`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `entrez_gene_id`, `found_in_taxon`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `recombination_promoting_nuclease_rpna`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate)  VALUES (56896, 60084, NULL, 1, 781, 1, 2320.0, 0.0, 2320.0, '32F00933-70C6-4A39-AF92-6745E9A7A092', '2013-09-27 00:00:00.0');\nDatabase State:\n- Table: SalesPerson, Columns: [BusinessEntityID, TerritoryID, SalesQuota, Bonus, CommissionPct, SalesYTD, SalesLastYear, rowguid, ModifiedDate]\n- Table: TransactionHistoryArchive, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: `AddressType`, Columns: [AddressTypeID, Name, rowguid, ModifiedDate]\n- Table: SalesOrderHeaderSalesReason, Columns: [SalesOrderID, SalesReasonID, ModifiedDate]\n- Table: `PhoneNumberType`, Columns: [PhoneNumberTypeID, Name, ModifiedDate]\n- Table: `StateProvince`, Columns: [StateProvinceID, StateProvinceCode, CountryRegionCode, IsOnlyStateProvinceFlag, Name, TerritoryID, rowguid, ModifiedDate]\n- Table: SpecialOfferProduct, Columns: [SpecialOfferID, ProductID, rowguid, ModifiedDate]\n- Table: `Location`, Columns: [LocationID, Name, CostRate, Availability, ModifiedDate]\n- Table: SalesTerritory, Columns: [TerritoryID, Name, CountryRegionCode, `Group`, SalesYTD, SalesLastYear, CostYTD, CostLastYear, rowguid, ModifiedDate]\n- Table: Customer, Columns: [CustomerID, PersonID, StoreID, TerritoryID, AccountNumber, rowguid, ModifiedDate]\n- Table: `SalesOrderHeader`, Columns: [SalesOrderID, RevisionNumber, OrderDate, DueDate, ShipDate, Status, OnlineOrderFlag, SalesOrderNumber, PurchaseOrderNumber, AccountNumber, CustomerID, SalesPersonID, TerritoryID, BillToAddressID, ShipToAddressID, ShipMethodID, CreditCardID, CreditCardApprovalCode, CurrencyRateID, SubTotal, TaxAmt, Freight, TotalDue, Comment, rowguid, ModifiedDate]\n- Table: Culture, Columns: [CultureID, Name, ModifiedDate]\n- Table: ProductProductPhoto, Columns: [ProductID, ProductPhotoID, `Primary`, ModifiedDate]\n- Table: ProductCategory, Columns: [ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: Currency, Columns: [CurrencyCode, Name, ModifiedDate]\n- Table: CountryRegionCurrency, Columns: [CountryRegionCode, CurrencyCode, ModifiedDate]\n- Table: `ContactType`, Columns: [ContactTypeID, Name, ModifiedDate]\n- Table: CountryRegion, Columns: [CountryRegionCode, Name, ModifiedDate]\n- Table: WorkOrderRouting, Columns: [WorkOrderID, ProductID, OperationSequence, LocationID, ScheduledStartDate, ScheduledEndDate, ActualStartDate, ActualEndDate, ActualResourceHrs, PlannedCost, ActualCost, ModifiedDate]\n- Table: SalesTerritoryHistory, Columns: [BusinessEntityID, TerritoryID, StartDate, EndDate, rowguid, ModifiedDate]\n- Table: Password, Columns: [BusinessEntityID, PasswordHash, PasswordSalt, rowguid, ModifiedDate]\n- Table: Vendor, Columns: [BusinessEntityID, AccountNumber, Name, CreditRating, PreferredVendorStatus, ActiveFlag, PurchasingWebServiceURL, ModifiedDate]\n- Table: ProductPhoto, Columns: [ProductPhotoID, ThumbNailPhoto, ThumbnailPhotoFileName, LargePhoto, LargePhotoFileName, ModifiedDate]\n- Table: SalesTaxRate, Columns: [SalesTaxRateID, StateProvinceID, TaxType, TaxRate, Name, rowguid, ModifiedDate]\n- Table: `Address`, Columns: [AddressID, AddressLine1, AddressLine2, City, StateProvinceID, PostalCode, SpatialLocation, rowguid, ModifiedDate]\n- Table: ProductVendor, Columns: [ProductID, BusinessEntityID, AverageLeadTime, StandardPrice, LastReceiptCost, LastReceiptDate, MinOrderQty, MaxOrderQty, OnOrderQty, UnitMeasureCode, ModifiedDate]\n- Table: `JobCandidate`, Columns: [JobCandidateID, BusinessEntityID, Resume, ModifiedDate]\n- Table: PersonCreditCard, Columns: [BusinessEntityID, CreditCardID, ModifiedDate]\n- Table: ProductDocument, Columns: [ProductID, DocumentNode, ModifiedDate]\n- Table: ShipMethod, Columns: [ShipMethodID, Name, ShipBase, ShipRate, rowguid, ModifiedDate]\n- Table: ProductModel, Columns: [ProductModelID, Name, CatalogDescription, Instructions, rowguid, ModifiedDate]\n- Table: ProductDescription, Columns: [ProductDescriptionID, Description, rowguid, ModifiedDate]\n- Table: BusinessEntityContact, Columns: [BusinessEntityID, PersonID, ContactTypeID, rowguid, ModifiedDate]\n- Table: ScrapReason, Columns: [ScrapReasonID, Name, ModifiedDate]\n- Table: `CreditCard`, Columns: [CreditCardID, CardType, CardNumber, ExpMonth, ExpYear, ModifiedDate]\n- Table: ShoppingCartItem, Columns: [ShoppingCartItemID, ShoppingCartID, Quantity, ProductID, DateCreated, ModifiedDate]\n- Table: WorkOrder, Columns: [WorkOrderID, ProductID, OrderQty, StockedQty, ScrappedQty, StartDate, EndDate, DueDate, ScrapReasonID, ModifiedDate]\n- Table: EmailAddress, Columns: [BusinessEntityID, EmailAddressID, EmailAddress, rowguid, ModifiedDate]\n- Table: `BusinessEntity`, Columns: [BusinessEntityID, rowguid, ModifiedDate]\n- Table: Shift, Columns: [ShiftID, Name, StartTime, EndTime, ModifiedDate]\n- Table: `Product`, Columns: [ProductID, Name, ProductNumber, MakeFlag, FinishedGoodsFlag, Color, SafetyStockLevel, ReorderPoint, StandardCost, ListPrice, Size, SizeUnitMeasureCode, WeightUnitMeasureCode, Weight, DaysToManufacture, ProductLine, Class, Style, ProductSubcategoryID, ProductModelID, SellStartDate, SellEndDate, DiscontinuedDate, rowguid, ModifiedDate]\n- Table: `EmployeePayHistory`, Columns: [BusinessEntityID, RateChangeDate, Rate, PayFrequency, ModifiedDate]\n- Table: ProductReview, Columns: [ProductReviewID, ProductID, ReviewerName, ReviewDate, EmailAddress, Rating, Comments, ModifiedDate]\n- Table: SalesPersonQuotaHistory, Columns: [BusinessEntityID, QuotaDate, SalesQuota, rowguid, ModifiedDate]\n- Table: TransactionHistory, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]",
        "Response": "Table: SalesOrderDetail"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `beers` (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (515, 533, 0.04200000000000000261, 13.0, 'Purple Haze', 'Fruit / Vegetable Beer', 12.0);\nDatabase State:\n- Table: `beers`, Columns: [id, brewery_id, abv, ibu, name, style, ounces]\n- Table: breweries, Columns: [id, name, city, state]",
        "Response": "Table: `beers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`id`, `series_name`, `Country`, `Language`, `Content`, `Pixel_aspect_ratio_PAR`, `Hight_definition_TV`, `Pay_per_view_PPV`, `Package_Option`)  VALUES ('700', 'Sky Radio', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `TV_Channel`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION)  VALUES ('2012-08-29', '6ac5602a-cf18-4e55-8bbb-a6cde2451945', '4efde946-4c84-47fe-8833-3a22157b514a', 140, 'Influenza  seasonal  injectable  preservative free');\nDatabase State:\n- Table: allergies, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: observations, Columns: [DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, VALUE, UNITS]\n- Table: immunizations, Columns: [DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: medications, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: patients, Columns: [patient, birthdate, deathdate, ssn, drivers, passport, prefix, first, last, suffix, maiden, marital, race, ethnicity, gender, birthplace, address]\n- Table: encounters, Columns: [ID, DATE, PATIENT, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: `claims`, Columns: [ID, PATIENT, BILLABLEPERIOD, ORGANIZATION, ENCOUNTER, DIAGNOSIS, TOTAL]\n- Table: all_prevalences, Columns: [ITEM, `POPULATION TYPE`, OCCURRENCES, `POPULATION COUNT`, `PREVALENCE RATE`, `PREVALENCE PERCENTAGE`]\n- Table: conditions, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: procedures, Columns: [DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: careplans, Columns: [ID, START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]",
        "Response": "Table: immunizations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id_restaurant, street_num, street_name, city)  VALUES (9424, 2456, 'el camino real', 'san mateo');\nDatabase State:\n- Table: location, Columns: [id_restaurant, street_num, street_name, city]\n- Table: generalinfo, Columns: [id_restaurant, label, food_type, city, review]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (CountryCode, Language, IsOfficial, Percentage)  VALUES ('ISL', 'Icelandic', 'T', 95.7000000000000028);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: CountryLanguage"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (date, store_nbr, item_nbr, units)  VALUES ('2013-11-19', 14, 25, 17);\nDatabase State:\n- Table: relation, Columns: [store_nbr, station_nbr]\n- Table: sales_in_weather, Columns: [date, store_nbr, item_nbr, units]\n- Table: weather, Columns: [station_nbr, date, tmax, tmin, tavg, depart, dewpoint, wetbulb, heat, cool, sunrise, sunset, codesum, snowfall, preciptotal, stnpressure, sealevel, resultspeed, resultdir, avgspeed]",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO callcenterlogs (`Date received`, `Complaint ID`, `rand client`, phonefinal, `vru+line`, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time)  VALUES ('2013-09-06', NULL, NULL, '312-484-5399', NULL, NULL, NULL, NULL, NULL, NULL, '14:27:19', '14:27:29', '00:00:10');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: callcenterlogs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `regulates_molecular_biology` (`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`, `has_parts`)  VALUES ('thiamine biosynthetic process', 'The chemical reactions and pathways resulting in the formation of thiamine (vitamin B1), a water soluble vitamin present in fresh vegetables and meats, especially liver.', 'GO:0009228', 'thiamine metabolic process', 'http://purl.obolibrary.org/obo/GO_0009228', 'biological process', 'thiamine(1+) ion');\nDatabase State:\n- Table: `positive_regulation_of_alcohol_biosynthetic_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `regulates_molecular_biology`, `exact_match`, `instance_of`]\n- Table: `regulates_molecular_biology`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`, `has_parts`]",
        "Response": "Table: `regulates_molecular_biology`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `war_in_popular_culture` (`label`, `description`, `instance_of`, `main_subject`, `subclass_of`)  VALUES ('World War III in popular culture', 'Films and plays with predictions of WWIII.', 'cultural depiction', 'World War III', 'war in popular culture');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `war_in_popular_culture`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Person (name, age, city, gender, job)  VALUES ('Bob', 35, 'salt lake city', 'male', 'engineer');\nDatabase State:\n- Table: Person, Columns: [name, age, city, gender, job]",
        "Response": "Table: Person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `paragraphs` (id, ParagraphNum, PlainText, character_id, chapter_id)  VALUES (650215, 604, 'Well, sir; what did this gentleman to her?', 385, 19161);\nDatabase State:\n- Table: `paragraphs`, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]",
        "Response": "Table: `paragraphs`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Train_ID`, `Station_ID`)  VALUES (11, 10);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `train_station`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (171, 284, 0.05099999999999999673, 24.0, 'Louie\u2019s Demise Immort-Ale (2010)', 'American Amber / Red Ale', 16.0);\nDatabase State:\n- Table: breweries, Columns: [id, name, city, state]",
        "Response": "Table: `beers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (title_id, lorange, hirange, royalty)  VALUES ('PS7777', 0, 5000, 10);\nDatabase State:\n- Table: titles, Columns: [title_id, title, type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate]\n- Table: roysched, Columns: [title_id, lorange, hirange, royalty]",
        "Response": "Table: roysched"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION)  VALUES ('c0ee5253-464e-40b4-9b47-3c968e2f55ae', '2011-01-06', '2011-01-13', 'de9c2eb4-762b-420f-b8ca-fbe271a4e709', '745498de-4801-4ea3-9a2b-24144c9c5be1', 223472008.0, 'Discussion about hygiene', 38822007, 'Cystitis');\nDatabase State:\n- Table: `claims`, Columns: [ID, PATIENT, BILLABLEPERIOD, ORGANIZATION, ENCOUNTER, DIAGNOSIS, TOTAL]\n- Table: medications, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: immunizations, Columns: [DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: allergies, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: all_prevalences, Columns: [ITEM, `POPULATION TYPE`, OCCURRENCES, `POPULATION COUNT`, `PREVALENCE RATE`, `PREVALENCE PERCENTAGE`]",
        "Response": "Table: careplans"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO airport_aircraft (`ID`, `Airport_ID`, `Aircraft_ID`)  VALUES (3, 1, 2);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: airport_aircraft"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (positionID, positiontitle, educationrequired, minsalary, maxsalary)  VALUES (4, 'Regional Manager', '6 year degree', 'US$100,000.00', 'US$250,000.00');\nDatabase State:\n- Table: location, Columns: [locationID, locationcity, address, state, zipcode, officephone]\n- Table: position, Columns: [positionID, positiontitle, educationrequired, minsalary, maxsalary]\n- Table: employee, Columns: [ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID]",
        "Response": "Table: position"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `playstore` (App, Category, Rating, Reviews, Size, Installs, Type, Price, `Content Rating`, Genres)  VALUES ('Equestria Girl Snapchat Addict', 'FAMILY', NULL, 20, '31M', '1,000+', 'Free', '0', 'Everyone', 'Educational');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `playstore`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO film_actor (actor_id, film_id, last_update)  VALUES (22, 430, '2006-02-15 05:05:03');\nDatabase State:\n- Table: payment, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: language, Columns: [language_id, name, last_update]\n- Table: film, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]\n- Table: film_category, Columns: [film_id, category_id, last_update]\n- Table: country, Columns: [country_id, country, last_update]",
        "Response": "Table: film_actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO data (ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name)  VALUES (48, 19.0, 6, 250.0, 100, 3282, 15.0, 71, 'pontiac firebird');\nDatabase State:\n- Table: country, Columns: [origin, country]\n- Table: production, Columns: [ID, model_year, country]\n- Table: data, Columns: [ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name]\n- Table: price, Columns: [ID, price]",
        "Response": "Table: data"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (order_item_id, order_id, product_id, order_quantity)  VALUES (6, 3, 6, '4');\nDatabase State:\n- Table: Contacts, Columns: [contact_id, customer_id, gender, first_name, last_name, contact_phone]\n- Table: Addresses, Columns: [address_id, line_1_number_building, city, zip_postcode, state_province_county, country]\n- Table: Customers, Columns: [customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email]\n- Table: Products, Columns: [product_id, product_type_code, product_name, product_price]\n- Table: Order_Items, Columns: [order_item_id, order_id, product_id, order_quantity]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_date, order_status_code]\n- Table: Customer_Address_History, Columns: [customer_id, address_id, date_from, date_to]",
        "Response": "Table: Order_Items"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `encodes`, `found_in_taxon`, `strand_orientation`, `instance_of`, `genomic_end`, `genomic_start`)  VALUES ('Fshr', 'protein-coding gene in the species Rattus norvegicus', '25449', 'Follicle stimulating hormone receptor', 'brown rat', 'forward strand', 'gene', '5406785.0', '5198825.0');\nDatabase State:\n- Table: `bspa_type_leucine_rich_repeat_region_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `encodes`, `found_in_taxon`, `strand_orientation`, `instance_of`, `genomic_end`, `genomic_start`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (product_id, product_name, product_details)  VALUES (2, 'yellow', 'q');\nDatabase State:\n- Table: Problems, Columns: [problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details]\n- Table: Problem_Log, Columns: [problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details]",
        "Response": "Table: Product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO director (name, director)  VALUES ('The Three Caballeros', 'Norman Ferguson');\nDatabase State:\n- Table: `voice-actors`, Columns: [character, `voice-actor`, movie]\n- Table: director, Columns: [name, director]\n- Table: movies_total_gross, Columns: [movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross]\n- Table: characters, Columns: [movie_title, release_date, hero, villian, song]",
        "Response": "Table: director"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`constructorResultsId`, `raceId`, `constructorId`, `points`, `status`)  VALUES (246, 41, 7, 1.0, 'NULL');\nDatabase State:\n- Table: `pitStops`, Columns: [`raceId`, `driverId`, `stop`, `lap`, `time`, `duration`, `milliseconds`]\n- Table: `circuits`, Columns: [`circuitId`, `circuitRef`, `name`, `location`, `country`, `lat`, `lng`, `alt`, `url`]\n- Table: `lapTimes`, Columns: [`raceId`, `driverId`, `lap`, `position`, `time`, `milliseconds`]\n- Table: `qualifying`, Columns: [`qualifyId`, `raceId`, `driverId`, `constructorId`, `number`, `position`, `q1`, `q2`, `q3`]\n- Table: `driverStandings`, Columns: [`driverStandingsId`, `raceId`, `driverId`, `points`, `position`, `positionText`, `wins`]",
        "Response": "Table: `constructorResults`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `commons_category`, `country`, `postal_code`, `located_in_time_zone`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `instance_of`, `freebase_id`, `musicbrainz_area_id`, `geonames_id`, `image`, `official_website`, `coat_of_arms_image`, `area`, `population`, `topics_main_category`, `twinned_administrative_body`, `elevation_above_sea_level`, `whos_on_first_id`, `head_of_government`, `page_banner`, `local_dialing_code`, `viaf_id`, `category_for_maps`, `nkcr_aut_id`)  VALUES ('Baku', 'capital of Azerbaijan', 'Baku', 'Azerbaijan', 'AZ1000', 'UTC+04:00', 'Azerbaijan', '40.366655555556', 'capital city', '/m/01gf5', 'aa1bf92c-0274-4a39-91d4-a450f2f5a54a', '587081.0', 'Montage of Baku 2019.jpg', 'http://www.baku-ih.gov.az/', 'Coat of arms of Baku.svg', 2140.0, 2300500.0, 'Category:Baku', 'Stavanger', -28.0, '85668249.0', 'Eldar Azizov', 'Baku banner.jpg', '12', '122420271', 'Category:Maps of Baku', 'ge340745');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `commons_category`, `country`, `postal_code`, `located_in_time_zone`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `instance_of`, `freebase_id`, `musicbrainz_area_id`, `geonames_id`, `image`, `official_website`, `coat_of_arms_image`, `area`, `population`, `topics_main_category`, `twinned_administrative_body`, `elevation_above_sea_level`, `whos_on_first_id`, `head_of_government`, `page_banner`, `local_dialing_code`, `viaf_id`, `category_for_maps`, `nkcr_aut_id`]\n- Table: `part`, Columns: [`label`, `description`, `sport`, `country`, `point_in_time`, `sports_season_of_league_or_competition`, `instance_of`, `number_of_participants`, `end_time`, `location`, `organizer`, `ijf_competition_id`, `judoinside_competition_id`, `eju_competition_id`, `start_time`, `short_name`, `followed_by`, `follows`, `topics_main_template`, `topics_main_category`]\n- Table: `european_judo_team_championships`, Columns: [`label`, `description`, `part_of`, `instance_of`, `followed_by`, `short_name`, `country`, `sport`, `judoinside_competition_id`, `point_in_time`, `location`, `follows`]\n- Table: `physical_location`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `occupant`, `located_in_the_administrative_territorial_entity`, `maximum_capacity`, `image`, `commons_category`, `date_of_official_opening`, `freebase_id`]\n- Table: `followed_by`, Columns: [`label`, `description`, `followed_by`, `instance_of`, `location`, `sport`, `short_name`, `country`, `point_in_time`, `judoinside_competition_id`, `follows`, `part_of`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `part_of`, `followed_by`, `short_name`, `country`, `location`, `sport`, `point_in_time`, `judoinside_competition_id`, `follows`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `language_of_work_or_name`, `publication_date`, `title`, `part_of`, `publisher`, `place_of_publication`, `commons_category`, `subtitle`, `editor`, `volume`)  VALUES ('St. Nicholas, Vol. 32, No. 6', 'April 1905 issue', 'volume', 'English', '+1905-04-00T00:00:00Z', 'St. Nicholas', 'St. Nicholas, Vol. 32', 'The Century Company', 'New York City', 'St. Nicholas (magazine)/Volume 32/Number 6', 'An Illustrated Magazine', 'Mary Mapes Dodge', 'XXXII');\nDatabase State:\n- Table: `part`, Columns: [`label`, `description`, `instance_of`, `language_of_work_or_name`, `title`, `publication_date`, `has_parts`, `commons_category`, `publisher`, `subtitle`, `editor`, `place_of_publication`, `part_of`, `volume`, `followed_by`]",
        "Response": "Table: `magazine`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `followed_by`, `follows`, `sport`, `country`, `point_in_time`, `has_parts`, `competition_class`, `location`, `on_focus_list_of_wikimedia_project`, `google_knowledge_graph_id`, `babelnet_id`)  VALUES ('1935 Mexican Badminton Championships', 'badminton championships', 'Mexican Badminton Championships', '1936 Mexican Badminton Championships', '1934 Mexican Badminton Championships', 'badminton', 'Mexico', '+1935-00-00T00:00:00Z', '1935 Mexican Badminton Championships \u2013 men''s singles', 'national championship', 'Mexico City', 'WikiProject Badminton/tournament focus list', '/g/11_ylswlm', '15801763n');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `followed_by`, `follows`, `sport`, `country`, `point_in_time`, `has_parts`, `competition_class`, `location`, `on_focus_list_of_wikimedia_project`, `google_knowledge_graph_id`, `babelnet_id`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `followed_by`, `follows`, `sport`, `country`, `point_in_time`, `has_parts`, `competition_class`, `location`, `on_focus_list_of_wikimedia_project`, `google_knowledge_graph_id`, `babelnet_id`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `country`)  VALUES ('Coalition for Peace Action', 'peace group in the US', 'peace organization', 'United States of America');\nDatabase State:\n- Table: `capital_city`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `page_banner`, `commons_category`, `freebase_id`, `geonames_id`, `instance_of`, `topics_main_category`, `capital_of`, `described_by_source`, `image`, `official_website`, `category_of_associated_people`, `commons_gallery`, `encyclop\u00e6dia_universalis_id`, `archinform_location_id`, `library_of_congress_authority_id`, `viaf_id`, `worldcat_identities_id`, `national_library_of_israel_j9u_id`, `den_store_danske_id`, `online_pwn_encyclopedia_id`, `factgrid_item_id`, `whos_on_first_id`, `population`, `located_in_time_zone`, `gnd_id`, `great_russian_encyclopedia_online_id`, `native_label`, `area`, `quora_topic_id`, `encyclop\u00e6dia_britannica_online_id`, `store_norske_leksikon_id`]\n- Table: `given_name`, Columns: [`label`, `description`, `language_of_work_or_name`, `instance_of`, `said_to_be_the_same_as`, `different_from`, `native_label`, `writing_system`, `soundex`, `cologne_phonetics`, `caverphone`, `commons_category`]\n- Table: `peace_organization`, Columns: [`label`, `description`, `instance_of`, `country`]\n- Table: `head_of_state`, Columns: [`label`, `description`, `sex_or_gender`, `place_of_birth`, `spouse`, `commons_category`, `library_of_congress_authority_id`, `gnd_id`, `award_received`, `date_of_birth`, `viaf_id`, `instance_of`, `freebase_id`, `religion_or_worldview`, `country_of_citizenship`, `occupation`, `educated_at`, `given_name`, `munzinger_person_id`, `position_held`, `languages_spoken_written_or_signed`, `encyclop\u00e6dia_britannica_online_id`, `worldcat_identities_id`, `isni`, `name_in_native_language`, `image`, `opensanctions_id`]\n- Table: `part`, Columns: [`label`, `description`, `commons_category`, `topics_main_category`, `instance_of`, `freebase_id`, `gnd_id`, `quora_topic_id`, `locator_map_image`, `viaf_id`, `has_parts`, `coordinate_location`, `part_of`]",
        "Response": "Table: `peace_organization`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (FacID, actid)  VALUES (8721, 770);\nDatabase State:\n- Table: Faculty, Columns: [FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]\n- Table: Activity, Columns: [actid, activity_name]\n- Table: Faculty_Participates_in, Columns: [FacID, actid]\n- Table: Participates_in, Columns: [stuid, actid]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Faculty_Participates_in"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity)  VALUES ('Branch', 'Branch loan helps time difficulties.. My friends join loan see eyes.', 'Neutral', '0.0', '0.0');\nDatabase State:\n- Table: `user_reviews`, Columns: [App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity]",
        "Response": "Table: `user_reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Party_Forms (party_id, form_id, date_completion_started, form_status_code, date_fully_completed)  VALUES (2, 5, '2017-11-26 09:09:29', 'Not Started', '2018-02-09 09:49:09');\nDatabase State:\n- Table: Organization_Contact_Individuals, Columns: [individual_id, organization_id, date_contact_from, date_contact_to]\n- Table: Party_Services, Columns: [booking_id, customer_id, service_id, service_datetime, booking_made_date]\n- Table: Addresses, Columns: [address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country]\n- Table: Individuals, Columns: [individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name]\n- Table: Services, Columns: [service_id, service_type_code, service_name, service_descriptio]\n- Table: Party_Forms, Columns: [party_id, form_id, date_completion_started, form_status_code, date_fully_completed]\n- Table: Forms, Columns: [form_id, form_type_code, service_id, form_number, form_name, form_description]\n- Table: Party_Addresses, Columns: [party_id, address_id, date_address_from, address_type_code, date_address_to]",
        "Response": "Table: Party_Forms"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Customer_Event_Note_ID, Customer_Event_ID, service_type_code, resident_id, property_id, date_moved_in)  VALUES (75, 70, 'Check', 43, 120, '2016-10-28 01:43:42');\nDatabase State:\n- Table: Timed_Status_of_Things, Columns: [thing_id, Date_and_Date, Status_of_Thing_Code]\n- Table: Residents_Services, Columns: [resident_id, service_id, date_moved_in, property_id, date_requested, date_provided, other_details]",
        "Response": "Table: Customer_Event_Notes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `sport`, `instance_of`, `point_in_time`, `has_parts`, `official_website`, `followed_by`, `country`, `located_in_the_administrative_territorial_entity`, `follows`, `edition_number`)  VALUES ('2016 Ricoh Open', 'combined WTA/ATP tournament', 'tennis', 'Rosmalen Grass Court Championships', '+2016-00-00T00:00:00Z', '2016 Ricoh Open (women)', 'http://libema-open.nl/en/', '2017 Ricoh Open', 'Netherlands', 'Rosmalen', '2015 Topshelf Open', '27.0');\nDatabase State:\n- Table: `rosmalen_grass_court_championships_women`, Columns: [`label`, `description`, `sport`, `instance_of`, `point_in_time`, `edition_number`, `start_time`, `end_time`, `part_of`, `google_knowledge_graph_id`]\n- Table: `part`, Columns: [`label`, `description`, `sport`, `instance_of`, `point_in_time`, `has_parts`, `official_website`, `followed_by`, `country`, `located_in_the_administrative_territorial_entity`, `follows`, `edition_number`]",
        "Response": "Table: `part`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1019, 'Pang', 'Arthur', 18, 'M', 600, 2192, 'WAS');\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (2272, 174, 0.05000000000000000277, NULL, 'Rebirth Pale Ale', 'American Pale Ale (APA)', 12.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `beers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Elimination_ID`, `Wrestler_ID`, `Team`, `Eliminated_By`, `Elimination_Move`, `Time`)  VALUES ('3', '4', 'Team Batista', 'Orton', 'Rope hung DDT', '10:45');\nDatabase State:\n- Table: `Elimination`, Columns: [`Elimination_ID`, `Wrestler_ID`, `Team`, `Eliminated_By`, `Elimination_Move`, `Time`]",
        "Response": "Table: `Elimination`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `beers` (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (526, 25, 0.05500000000000000027, 23.0, 'Sun King Oktoberfest (2011)', 'M\u00e4rzen / Oktoberfest', 16.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `beers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `given_name` (`label`, `description`, `family_name_identical_to_this_given_name`, `said_to_be_the_same_as`, `instance_of`, `language_of_work_or_name`, `different_from`, `native_label`, `soundex`, `cologne_phonetics`, `caverphone`, `writing_system`, `commons_category`)  VALUES ('Lorenzo', 'male given name', 'Lorenzo', 'Laurent', 'male given name', 'Spanish', 'Lorenzo', 'Lorenzo', 'L652', '5768.0', 'LRNS11', 'Latin script', 'Lorenzo (given name)');\nDatabase State:\n- Table: `family_name_identical_to_this_given_name`, Columns: [`label`, `description`, `instance_of`, `said_to_be_the_same_as`, `different_from`, `writing_system`, `native_label`, `commons_category`, `soundex`, `wolfram_language_entity_code`, `g\u00e9opatronyme_id`, `geneanet_family_name_id`]",
        "Response": "Table: `given_name`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `cell_component`, `subclass_of`)  VALUES ('Translation initiation factor IF-1 SRU_1056', 'microbial protein found in Salinibacter ruber DSM 13855', 'Q2S3P3', 'translation initiation factor IF-1 SRU_1056', 'protein biosynthesis', 'translation initiation factor activity', 'RNA-binding domain, S1, IF1 type', 'Salinibacter ruber DSM 13855', 'YP_445188', 'protein', 'Nucleic acid-binding, OB-fold', 'cytoplasm', 'protein');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `instance_of`, `genomic_end`, `genomic_start`, `ncbi_locus_tag`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO movies_total_gross (movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross)  VALUES ('Cold Creek Manor', 'Sep 19, 2003', 'Thriller/Suspense', 'R', '$21,384,035', '$29,895,090');\nDatabase State:\n- Table: director, Columns: [name, director]",
        "Response": "Table: movies_total_gross"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, category, person, role, credited)  VALUES ('S20-E13', 'Animation Department', 'Anne Legge', 'color designer', 'true');\nDatabase State:\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (zip_code, area_code)  VALUES (37771, 865);\nDatabase State:\n- Table: country, Columns: [zip_code, county, state]\n- Table: avoid, Columns: [zip_code, bad_alias]\n- Table: zip_data, Columns: [zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, `1st_quarter_payroll`, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA]\n- Table: state, Columns: [abbreviation, name]\n- Table: area_code, Columns: [zip_code, area_code]\n- Table: zip_congress, Columns: [zip_code, district]",
        "Response": "Table: area_code"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `book` (`Book_ID`, `Title`, `Issues`, `Writer`)  VALUES (5, 'Cyberella', 12.0, 'Howard Chaykin');\nDatabase State:\n- Table: `publication`, Columns: [`Publication_ID`, `Book_ID`, `Publisher`, `Publication_Date`, `Price`]\n- Table: `book`, Columns: [`Book_ID`, `Title`, `Issues`, `Writer`]",
        "Response": "Table: `book`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO product (`Product ID`, `Product Name`, Category, `Sub-Category`, Region)  VALUES ('OFF-PA-10003936', 'Xerox 1994', 'Office Supplies', 'Paper', 'South');\nDatabase State:\n- Table: west_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]\n- Table: central_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]",
        "Response": "Table: product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, p_id)  VALUES (160, 331);\nDatabase State:\n- Table: taughtBy, Columns: [course_id, p_id]\n- Table: person, Columns: [p_id, professor, student, hasPosition, inPhase, yearsInProgram]\n- Table: `advisedBy`, Columns: [p_id, p_id_dummy]\n- Table: course, Columns: [course_id, courseLevel]",
        "Response": "Table: taughtBy"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO rankings (`ranking_date`)  VALUES (20110905, 335, 202639, 146, 25);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: rankings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `topics_main_category`, `viaf_id`, `ndl_authority_id`, `instance_of`, `headquarters_location`, `inception`, `library_of_congress_authority_id`, `official_website`, `isbn_publisher_prefix`, `country`, `corporate_number_japan`, `japan_search_name_id`, `worldcat_identities_id`, `media_arts_database_id`)  VALUES ('Chuokoron-Shinsha', 'Japanese publisher', 'nan', '159783034', '839832.0', 'publisher', 'Tokyo', '+1886-01-01T00:00:00Z', 'no2002085052', 'http://www.chuko.co.jp/', '978-4-12', 'Japan', '9010001031729.0', '\u4e2d\u592e\u516c\u8ad6\u65b0\u793e', 'lccn-no2002085052', 'C61739');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `publisher`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO person (p_id, professor, student, hasPosition, inPhase, yearsInProgram)  VALUES (222, 0, 1, '0', 'Pre_Quals', 'Year_1');\nDatabase State:\n- Table: taughtBy, Columns: [course_id, p_id]",
        "Response": "Table: person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`)  VALUES ('apolipoprotein N-acyltransferase BDGL_003283', 'microbial gene found in Acinetobacter pittii PHEA-2', 'Acinetobacter pittii PHEA-2', '11637946', 'gene', 'Apolipoprotein N-acyltransferase BDGL_003283', 'BDGL_003283', '3530967', 'reverse strand', 'gene', '3529408');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `refseq_protein_id`, `encoded_by`, `cell_component`, `has_parts`, `part_of`, `instance_of`)  VALUES ('Hypothetical protein Rru_A3291', 'microbial protein found in Rhodospirillum rubrum ATCC 11170', 'Q2RP59', 'Rhodospirillum rubrum ATCC 11170', 'YP_428373', 'hypothetical protein Rru_A3291', 'membrane', 'Cardiolipin synthase N-terminal', 'membrane proteins', 'protein');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `refseq_protein_id`, `encoded_by`, `cell_component`, `has_parts`, `part_of`, `instance_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`]\n- Table: `cardiolipin_synthase_n_terminal_domain_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `refseq_protein_id`, `encoded_by`, `cell_component`, `has_parts`, `part_of`, `instance_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `freebase_id`, `ncbi_taxonomy_id`, `parent_taxon`, `instance_of`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `mesh_descriptor_id`, `microsoft_academic_id`, `catalogue_of_life_id`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Person (person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname)  VALUES ('nm0610611', 'Nadine Mozon', NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Person, Columns: [person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Episode, Columns: [episode_id, series, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Credit, Columns: [episode_id, person_id, category, role, credited]",
        "Response": "Table: Person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `nucleotide_sugar_transporter` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `ensembl_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Solute carrier family 35 member A3a', 'Protein found in Danio rerio', 'slc35a3a', 'B0V2R5', 'ENSDARP00000020455', 'pyrimidine nucleotide-sugar transmembrane transport', 'pyrimidine nucleotide-sugar transmembrane transporter activity', 'Golgi membrane', 'Danio rerio', 'NP_001116721', 'protein', 'Nucleotide-sugar transporter');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `ensembl_protein_id`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `refseq_protein_id`, `biological_process`, `cell_component`, `instance_of`, `part_of`, `molecular_function`]\n- Table: `nucleotide_sugar_transporter`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `ensembl_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `orthology`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `genomic_start`, `chromosome`, `ensembl_gene_id`, `strand_orientation`, `refseq_rna_id`, `homologene_id`, `instance_of`, `ortholog`, `genomic_end`, `ensembl_transcript_id`, `expressed_in`, `encodes`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `ensembl_transcript_id`, `homologene_id`, `refseq_rna_id`, `encodes`, `found_in_taxon`, `instance_of`, `strand_orientation`, `chromosome`, `genomic_start`, `genomic_end`, `ortholog`, `expressed_in`]\n- Table: `chromosome`, Columns: [`label`, `description`, `instance_of`, `refseq_genome_id`, `found_in_taxon`]\n- Table: `expressed_in`, Columns: [`label`, `description`, `uberon_id`, `instance_of`, `subclass_of`]",
        "Response": "Table: `nucleotide_sugar_transporter`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `match_season` (`Season`, `Player`, `Position`, `Country`, `Team`, `Draft_Pick_Number`, `Draft_Class`, `College`)  VALUES (2004.0, 'Clint Dempsey Category:Articles with hCards', 'Midfielder', 6, 3, 8, '2004 MLS SuperDraft', 'Furman');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `match_season`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `ab_hydrolase_4_family` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Hypothetical protein BN117_1111', 'microbial protein found in Bordetella parapertussis Bpp5', 'hypothetical protein BN117_1111', 'K0M8G6', 'Serine aminopeptidase, S33', 'Bordetella parapertussis Bpp5', 'YP_006895115', 'protein', 'AB hydrolase 4 family');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `ab_hydrolase_4_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('flagellin FljN CC_0793', 'microbial gene found in Caulobacter vibrioides CB15', 'Caulobacter crescentus CB15', '941347', 'gene', 'Flagellin FljN CC_0793', 'CC_0793', 'gene', '875823', 'forward strand', '875002');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `ensembl_protein_id`, `cell_component`, `biological_process`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Real-time Dmel_CG9528', 'Protein found in Drosophila melanogaster', 'retm', 'Q9VMD6', 'FBpp0302983', 'mitochondrion', 'biological process', 'GOLD domain', 'Drosophila melanogaster', 'NP_001260132', 'protein', 'GOLD domain superfamily');\nDatabase State:\n- Table: `orthology`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `homologene_id`, `found_in_taxon`, `refseq_rna_id`, `encodes`, `ortholog`, `instance_of`, `cytogenetic_location`, `ensembl_gene_id`, `chromosome`, `ensembl_transcript_id`, `exact_match`, `strand_orientation`, `genomic_start`, `genomic_end`, `expressed_in`]\n- Table: `cellular_component`, Columns: [`label`, `description`, `gene_ontology_id`, `exact_match`, `instance_of`, `subclass_of`]\n- Table: `molecular_function`, Columns: [`label`, `description`, `subclass_of`, `gene_ontology_id`, `exact_match`, `instance_of`]",
        "Response": "Table: `gold_domain_superfamily`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Pets (PetID, PetType, pet_age, weight)  VALUES (2003, 'dog', 1, 9.30000000000000072);\nDatabase State:\n- Table: Pets, Columns: [PetID, PetType, pet_age, weight]",
        "Response": "Table: Pets"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `women_and_geology_who_are_we_where_have_we_come_from_and_where_are_we_going` (`label`, `description`, `doi`, `instance_of`, `title`, `published_in`, `followed_by`, `publication_date`, `volume`, `part_of`, `main_subject`, `follows`, `author_name_string`)  VALUES ('Hollywood representations of women in geology: Women geoscientists in film (1986\u20132016)', 'scholarly article by Beth A. Johnson published in August 2018', '10.1130/2018.1214(07)', 'scholarly article', 'Hollywood representations of women in geology: Women geoscientists in film (1986\u20132016)', 'Memoir / Geological Society of America', 'How we look and what we see: Twenty years of women in GSA Today', '+2018-08-07T00:00:00Z', '214', 'Women and Geology: Who Are We, Where Have We Come From, and Where Are We Going?', 'geology', 'Reflections on an interdisciplinary geoscience career', 'Beth A. Johnson');\nDatabase State:\n- Table: `follows`, Columns: [`label`, `description`, `doi`, `instance_of`, `title`, `published_in`, `followed_by`, `publication_date`, `volume`, `part_of`, `follows`, `author_name_string`]",
        "Response": "Table: `women_and_geology_who_are_we_where_have_we_come_from_and_where_are_we_going`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (year, lgID, tmID, oppID, W, L, T, OTL)  VALUES (2005, 'NHL', 'CAR', 'PIT', 3, 1, NULL, '0');\nDatabase State:\n- Table: Goalies, Columns: [playerID, year, stint, tmID, lgID, GP, Min, W, L, `T/OL`, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA]\n- Table: Coaches, Columns: [coachID, year, tmID, lgID, stint, notes, g, w, l, t, postg, postw, postl, postt]\n- Table: ScoringSup, Columns: [playerID, year, PPA, SHA]\n- Table: TeamsHalf, Columns: [year, lgID, tmID, half, rank, G, W, L, T, GF, GA]\n- Table: ScoringSC, Columns: [playerID, year, tmID, lgID, pos, GP, G, A, Pts, PIM]\n- Table: Teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: TeamsSC, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM]\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]\n- Table: AwardsMisc, Columns: [name, ID, award, year, lgID, note]\n- Table: TeamVsTeam, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: GoaliesSC, Columns: [playerID, year, tmID, lgID, GP, Min, W, L, T, SHO, GA]\n- Table: SeriesPost, Columns: [year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L, T, GoalsWinner, GoalsLoser, note]\n- Table: TeamsPost, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: ScoringShootout, Columns: [playerID, year, stint, tmID, S, G, GDG]\n- Table: abbrev, Columns: [Type, Code, Fullname]\n- Table: HOF, Columns: [year, hofID, name, category]",
        "Response": "Table: TeamVsTeam"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Sales Orders` (OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`)  VALUES ('SO - 0003637', 'Online', 'WARE-XYS1001', '2/4/19', '7/21/19', '7/28/19', '8/3/19', 'USD', 19, 33, 6, 46, 5, 0.05000000000000000277, '737.00', '302.17');\nDatabase State:\n- Table: Regions, Columns: [StateCode, State, Region]\n- Table: `Sales Team`, Columns: [SalesTeamID, `Sales Team`, Region]\n- Table: Customers, Columns: [CustomerID, `Customer Names`]\n- Table: `Sales Orders`, Columns: [OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`]\n- Table: `Store Locations`, Columns: [StoreID, `City Name`, County, StateCode, State, Type, Latitude, Longitude, AreaCode, Population, `Household Income`, `Median Income`, `Land Area`, `Water Area`, `Time Zone`]",
        "Response": "Table: `Sales Orders`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Product ID`, `Product Name`, Category, `Sub-Category`, Region)  VALUES ('TEC-AC-10001432', 'Enermax Aurora Lite Keyboard', 'Technology', 'Accessories', 'East');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Person (name, age, city, gender, job)  VALUES ('Zach', 45, 'austin', 'male', 'doctor');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('Elongation factor Tu XCC0880', 'microbial protein found in Xanthomonas campestris pv. campestris str. ATCC 33913', 'elongation factor Tu XCC0880', 'Q8PC59', 'protein biosynthesis', 'nucleotide binding', 'cytoplasm', 'Small GTP-binding protein domain', 'Xanthomonas campestris pv. campestris str. ATCC 33913', 'NP_636267', 'protein', 'Translation protein, beta-barrel domain superfamily', 'protein');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `translation_elongation_factor_eftu_ef1a_bacterial_organelle`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]",
        "Response": "Table: `translation_elongation_factor_eftu_ef1a_bacterial_organelle`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `instance_of`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `ncbi_locus_tag`)  VALUES ('formamidopyrimidine-DNA glycosylase NGO0610', 'microbial gene found in Neisseria gonorrhoeae FA 1090', '3281724', 'gene', 'Formamidopyrimidine-DNA glycosylase NGO0610', 'gene', 'Neisseria gonorrhoeae FA 1090', 'forward strand', '598351.0', '597524.0', 'NGO0610');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (1093170, 1, 8320, 481, 481);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Project_ID, Project_Details)  VALUES (195, 'Population Research project');\nDatabase State:\n- Table: Documents, Columns: [Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details]\n- Table: Ref_Budget_Codes, Columns: [Budget_Type_Code, Budget_Type_Description]\n- Table: Accounts, Columns: [Account_ID, Statement_ID, Account_Details]\n- Table: Statements, Columns: [Statement_ID, Statement_Details]",
        "Response": "Table: Projects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `dewey_decimal_classification`, `country`, `located_in_the_administrative_territorial_entity`, `coat_of_arms_image`, `head_of_government`, `instance_of`, `shares_border_with`, `commons_category`, `german_municipality_key`, `twinned_administrative_body`, `local_dialing_code`, `locator_map_image`, `located_in_time_zone`, `postal_code`, `image`, `openstreetmap_relation_id`, `coordinate_location`, `gnd_id`, `topics_main_category`, `freebase_id`, `licence_plate_code`, `musicbrainz_area_id`, `geonames_id`, `category_for_people_who_died_here`, `category_of_associated_people`, `official_website`, `population`, `capital_of`, `commons_gallery`, `elevation_above_sea_level`, `page_banner`, `short_name`, `area`, `archinform_location_id`, `flag_image`, `viaf_id`, `member_of`, `nkcr_aut_id`, `whos_on_first_id`, `described_by_source`, `worldcat_identities_id`, `factgrid_item_id`, `national_library_of_israel_j9u_id`, `museum_digital_place_id`, `sbn_place_id`, `library_of_congress_authority_id`, `online_pwn_encyclopedia_id`)  VALUES ('Hamm', 'town in North Rhine-Westphalia, Germany', '2--435639', 'Germany', 'Arnsberg Government Region', 'DEU Hamm COA.svg', 'Thomas Hunsteger-Petermann', 'big city', 'Coesfeld', 'Hamm', '5915000.0', 'Oranienburg', '2307.0', 'North rhine w HAM.svg', 'UTC+01:00', '59001\u201359077', 'Hamm Luftbild Innenstadt 2007.jpg', '62499.0', '51.666666666667', '4023168-9', 'Category:Hamm', '/m/018frs', 'HAM', '8345e11a-79f3-41f9-994a-852178b12fac', '3221111.0', 'Category:Deaths in Hamm', 'Category:People from Hamm', 'https://www.hamm.de/', 179238.0, 'County of Mark', 'Hamm', 63.0, 'Hamm Wikivoyage banner.jpg', 'Hmm', 226.4300000000000068, '372.0', 'Flagge der Stadt Hamm.svg', '312803377', 'association for pedestrian and bicycle-friendly cities, townships and districts in North Rhine Westphalia', 'xx0116105', '101748739.0', 'Brockhaus and Efron Encyclopedic Dictionary', 'nan', 'Q22037', '9.870075595965053e+17', '1003.0', 'RMSL001355', 'n81125000', '3909802.0');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `dewey_decimal_classification`, `country`, `located_in_the_administrative_territorial_entity`, `coat_of_arms_image`, `head_of_government`, `instance_of`, `shares_border_with`, `commons_category`, `german_municipality_key`, `twinned_administrative_body`, `local_dialing_code`, `locator_map_image`, `located_in_time_zone`, `postal_code`, `image`, `openstreetmap_relation_id`, `coordinate_location`, `gnd_id`, `topics_main_category`, `freebase_id`, `licence_plate_code`, `musicbrainz_area_id`, `geonames_id`, `category_for_people_who_died_here`, `category_of_associated_people`, `official_website`, `population`, `capital_of`, `commons_gallery`, `elevation_above_sea_level`, `page_banner`, `short_name`, `area`, `archinform_location_id`, `flag_image`, `viaf_id`, `member_of`, `nkcr_aut_id`, `whos_on_first_id`, `described_by_source`, `worldcat_identities_id`, `factgrid_item_id`, `national_library_of_israel_j9u_id`, `museum_digital_place_id`, `sbn_place_id`, `library_of_congress_authority_id`, `online_pwn_encyclopedia_id`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Id`)  VALUES (142, '16', 6, 258.0, '110', 3632, 18.0, 1974);\nDatabase State:\n- Table: `model_list`, Columns: [`ModelId`]\n- Table: `cars_data`, Columns: [`Id`]\n- Table: `car_makers`, Columns: [`Id`]",
        "Response": "Table: `cars_data`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `coordinate_location`, `china_administrative_division_code`, `country`, `located_in_the_administrative_territorial_entity`, `freebase_id`, `instance_of`, `geonames_id`, `official_name`, `located_in_time_zone`, `postal_code`, `population`, `local_dialing_code`, `licence_plate_code`, `locator_map_image`, `official_website`, `image`, `area`)  VALUES ('Qilian County', 'county', '38.17567', '63 22 22', 'People''s Republic of China', 'Haibei Tibetan Autonomous Prefecture', '/m/076y3s5', 'county of China', '1798012.0', '\u7941\u8fde\u53bf', 'UTC+08:00', '810400.0', 46473.0, '970', '\u9752C', 'Location of Qilian within Qinghai (China).png', 'http://www.qhql.gov.cn/', 'Qilian1.jpg', 13919.79000000000087);\nDatabase State:\n- Table: `sports_team`, Columns: [`label`, `description`, `instance_of`, `sport`, `country`, `inception`, `uci_code_of_cycling_team`, `official_name`, `has_parts`, `official_website`]\n- Table: `stage_classification`, Columns: [`label`, `description`, `sex_or_gender`, `country_of_citizenship`, `occupation`, `instance_of`, `date_of_birth`, `given_name`, `sport`, `cq_ranking_male_cyclist_id`, `cycling_archives_cyclist_id`, `place_of_birth`, `member_of_sports_team`, `procyclingstats_cyclist_id`, `participant_in`, `firstcycling_rider_id`, `uci_rider_id`]\n- Table: `beginning`, Columns: [`label`, `description`, `coordinate_location`, `china_administrative_division_code`, `country`, `located_in_the_administrative_territorial_entity`, `freebase_id`, `instance_of`, `geonames_id`, `official_name`, `located_in_time_zone`, `postal_code`, `population`, `local_dialing_code`, `licence_plate_code`, `locator_map_image`, `official_website`, `image`, `area`]\n- Table: `given_name`, Columns: [`label`, `description`, `instance_of`, `said_to_be_the_same_as`, `different_from`, `native_label`, `writing_system`, `caverphone`, `commons_category`, `language_of_work_or_name`]\n- Table: `location_or_destination_point`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `coordinate_location`, `china_administrative_division_code`, `instance_of`, `freebase_id`, `geonames_id`, `official_name`, `image`, `located_in_time_zone`, `locator_map_image`, `population`, `local_dialing_code`, `area`]\n- Table: `followed_by`, Columns: [`label`, `description`, `part_of`, `country`, `follows`, `followed_by`, `sport`, `series_ordinal`, `point_in_time`, `start_point`, `destination_point`, `event_distance`, `instance_of`, `procyclingstats_race_id`, `winner`, `stage_classification`, `general_classification_of_race_participants`]\n- Table: `follows`, Columns: [`label`, `description`, `part_of`, `country`, `followed_by`, `sport`, `series_ordinal`, `point_in_time`, `start_point`, `destination_point`, `event_distance`, `instance_of`, `procyclingstats_race_id`, `winner`, `stage_classification`, `general_classification_of_race_participants`, `follows`]\n- Table: `winner`, Columns: [`label`, `description`, `sex_or_gender`, `country_of_citizenship`, `occupation`, `instance_of`, `date_of_birth`, `given_name`, `sport`, `cq_ranking_male_cyclist_id`, `cycling_archives_cyclist_id`, `place_of_birth`, `member_of_sports_team`, `procyclingstats_cyclist_id`, `participant_in`, `firstcycling_rider_id`, `uci_rider_id`]\n- Table: `2018_tour_of_qinghai_lake`, Columns: [`label`, `description`, `part_of`, `country`, `followed_by`, `sport`, `series_ordinal`, `point_in_time`, `start_point`, `destination_point`, `event_distance`, `instance_of`, `procyclingstats_race_id`, `winner`, `stage_classification`, `general_classification_of_race_participants`, `follows`]",
        "Response": "Table: `beginning`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, game_publisher_id, platform_id, release_year)  VALUES (1735, 7996, 4, 2008);\nDatabase State:\n- Table: region_sales, Columns: [region_id, game_platform_id, num_sales]\n- Table: game_publisher, Columns: [id, game_id, publisher_id]\n- Table: publisher, Columns: [id, publisher_name]\n- Table: region, Columns: [id, region_name]\n- Table: game, Columns: [id, genre_id, game_name]",
        "Response": "Table: game_platform"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `shares_border_with`, `official_website`, `capital`, `locator_map_image`, `area`, `indian_census_area_code_2011`, `population`, `male_population`, `female_population`, `number_of_households`, `urban_population`, `rural_population`, `literate_population`, `illiterate_population`, `geoshape`, `wolfram_language_entity_code`, `inaturalist_place_id`, `located_in_time_zone`)  VALUES ('Burhanpur district', 'district of Madhya Pradesh, India', 'Burhanpur district', 'India', '21.31', 'Indore division', 'Category:Burhanpur district', 'district of India', '/m/08_qnr', '8740089.0', 'Jalgaon district', 'http://www.burhanpur.nic.in/', 'Burhanpur', 'MP Burhanpur district map.svg', NULL, '467.0', 757847.0, 388504.0, 369343.0, 146341.0, 260287.0, 497560.0, 408679.0, 349168.0, 'Data:India/Madhya Pradesh/Burhanpur.map', 'nan', '32285', 'UTC+05:30');\nDatabase State:\n- Table: `tjsb_sahakari_bank_branch`, Columns: [`label`, `description`, `operator`, `country`, `located_in_the_administrative_territorial_entity`, `indian_financial_system_code`, `instance_of`]\n- Table: `capital_city`, Columns: [`label`, `description`, `country`, `located_in_the_administrative_territorial_entity`, `commons_category`, `instance_of`, `located_in_time_zone`, `coordinate_location`, `freebase_id`, `geonames_id`, `elevation_above_sea_level`, `image`, `postal_code`, `local_dialing_code`, `capital_of`, `quora_topic_id`, `whos_on_first_id`, `area`]",
        "Response": "Table: `political_border`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('E1', '2008-10-25', 'Blackpool', 'Crystal Palace', 2, 2, 'D', 2009);\nDatabase State:\n- Table: divisions, Columns: [division, name, country]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `commons_category`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `freebase_id`, `bag_residence_id`, `geonames_id`, `located_in_time_zone`, `locator_map_image`, `image`, `whos_on_first_id`, `rkd_thesaurus_id`)  VALUES ('Sneek', 'city in Friesland, the Netherlands', 'city', 'Sneek', 'Netherlands', 'S\u00fadwest-Frysl\u00e2n', '53.0325', '/m/0vhyp', '3504.0', '2747063.0', 'UTC+01:00', 'LocatieSneek.png', 'Sneek-waterpoort-1.JPG', '101837971.0', '362.0');\nDatabase State:\n- Table: `a32_motorway`, Columns: [`label`, `description`, `named_after`, `instance_of`, `coordinate_location`, `country`, `part_of`, `located_in_the_administrative_territorial_entity`, `described_at_url`, `series_ordinal`, `connects_with`]",
        "Response": "Table: `eponym`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`)  VALUES ('Thbs1', 'protein-coding gene in the species Rattus norvegicus', '445442', 'protein-coding gene', 'Thrombospondin 1', 'brown rat', 'forward strand', '109873466.0', '109862117.0', 'gene');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Date received`, Product, `Sub-product`, Issue, `Sub-issue`, `Consumer complaint narrative`, Tags, `Consumer consent provided?`, `Submitted via`, `Date sent to company`, `Company response to consumer`, `Timely response?`, `Consumer disputed?`, `Complaint ID`, Client_ID)  VALUES ('2014-06-11', 'Bank account or service', 'Checking account', 'Deposits and withdrawals', NULL, NULL, NULL, 'N/A', 'Web', '2014-06-11', 'Closed with monetary relief', 'Yes', 'No', 'CR0890664', 'C00003292');\nDatabase State:\n- Table: callcenterlogs, Columns: [`Date received`, `Complaint ID`, `rand client`, phonefinal, `vru+line`, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time]\n- Table: district, Columns: [district_id, city, state_abbrev, division]\n- Table: events, Columns: [`Date received`, Product, `Sub-product`, Issue, `Sub-issue`, `Consumer complaint narrative`, Tags, `Consumer consent provided?`, `Submitted via`, `Date sent to company`, `Company response to consumer`, `Timely response?`, `Consumer disputed?`, `Complaint ID`, Client_ID]\n- Table: client, Columns: [client_id, sex, day, month, year, age, social, first, middle, last, phone, email, address_1, address_2, city, state, zipcode, district_id]\n- Table: reviews, Columns: [`Date`, Stars, Reviews, Product, district_id]",
        "Response": "Table: events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details)  VALUES (111, 38, 173, '1972-03-31 09:47:22', '2009-08-18 03:29:08', NULL);\nDatabase State:\n- Table: Document_Locations, Columns: [Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]\n- Table: All_Documents, Columns: [Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details]\n- Table: Ref_Document_Types, Columns: [Document_Type_Code, Document_Type_Name, Document_Type_Description]\n- Table: Ref_Locations, Columns: [Location_Code, Location_Name, Location_Description]\n- Table: Ref_Calendar, Columns: [Calendar_Date, Day_Number]\n- Table: Employees, Columns: [Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details]",
        "Response": "Table: Documents_to_be_Destroyed"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers)  VALUES ('32587A', '2013/2/8', '6500 Skillman Street', 'Deceased', 'Shotgun', 'Stoney, Rawlison W/M', 1, 'Womack, Darryl W/M; Russell, Daniel W/M; Hurst, Glen W/M; Hales, Ryan W/M; McCluskey, William W/M');\nDatabase State:\n- Table: incidents, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]",
        "Response": "Table: incidents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details)  VALUES (10, 495, 5, 7, 'Payment', '2018-03-24 05:45:57', 1795.660000000000081, NULL, NULL);\nDatabase State:\n- Table: Financial_Transactions, Columns: [transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details]\n- Table: Customers, Columns: [customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details]",
        "Response": "Table: Financial_Transactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Reviews` (business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length)  VALUES (13787, 48104, 4, 'None', 'Low', 'None', 'Medium');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `commons_category`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `instance_of`, `freebase_id`, `geonames_id`, `image`, `whos_on_first_id`, `openstreetmap_relation_id`)  VALUES ('Essing', 'market municipality in south east Germany', 'Germany', 'Essing', 'Kelheim', '48.934444444444', 'market municipality of Germany', '/m/02q3rm8', '6547485.0', 'Essing Ansicht Br\u00fccke.JPG', '101905841.0', '956662.0');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `country`, `commons_category`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `instance_of`, `freebase_id`, `geonames_id`, `image`, `whos_on_first_id`, `openstreetmap_relation_id`]\n- Table: `earthwork`, Columns: [`label`, `description`, `coordinate_location`, `instance_of`, `located_in_the_administrative_territorial_entity`, `country`, `heritage_designation`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `taxon` (`label`, `description`, `taxon_name`, `image`, `taxon_rank`, `parent_taxon`, `instance_of`, `freebase_id`, `itis_tsn`, `ncbi_taxonomy_id`, `encyclopedia_of_life_id`, `gbif_taxon_id`, `new_zealand_organisms_register_id`, `bacdive_id`, `gram_staining`, `jstor_topic_id`, `irmng_id`, `mesh_descriptor_id`, `lpsn_url`, `microsoft_academic_id`, `openalex_id`, `catalogue_of_life_id`)  VALUES ('Shewanella oneidensis', 'species of bacterium', 'Shewanella oneidensis', 'Shewanella oneidensis.png', 'species', 'Shewanella', 'taxon', '/m/03wgb7d', '965992.0', '70863', '972511.0', '3222823.0', 'nan', '136795.0', 'Gram-negative bacteria', 'nan', '11215115.0', 'nan', 'http://www.bacterio.net/shewanella.html#oneidensis', '2781170380.0', 'C2781170380', '4X4JS');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `image`, `taxon_rank`, `parent_taxon`, `instance_of`, `freebase_id`, `itis_tsn`, `ncbi_taxonomy_id`, `encyclopedia_of_life_id`, `gbif_taxon_id`, `new_zealand_organisms_register_id`, `bacdive_id`, `gram_staining`, `jstor_topic_id`, `irmng_id`, `mesh_descriptor_id`, `lpsn_url`, `microsoft_academic_id`, `openalex_id`, `catalogue_of_life_id`]\n- Table: `encodes`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `form_of_creative_work`, `composer`, `genre`, `part_of`, `lyrics_by`, `language_of_work_or_name`, `copyright_status`, `publication_date`, `inception`, `musicbrainz_work_id`, `title`, `imslp_id`, `tonality`, `image`, `catalog_code`, `opus_number`, `instrumentation`, `has_lyrics`)  VALUES ('Der greise Kopf', 'Lied by Franz Schubert', 'musical work/composition', 'Lied', 'Franz Schubert', 'Romantic music', 'Winterreise', 'Wilhelm M\u00fcller', 'German', 'public domain', '+1828-00-00T00:00:00Z', '+1827-00-00T00:00:00Z', '3d260810-bbd1-3b9a-b317-22ccc010efb9', 'Der greise Kopf', 'Winterreise,_D.911_(Schubert,_Franz)', 'C minor', 'Der greise Kopf manuscript.jpg', '911, n. 14', '89, No. 14', 'voice', 'Der greise Kopf');\nDatabase State:\n- Table: `derivative_work`, Columns: [`label`, `description`, `instance_of`, `form_of_creative_work`, `composer`, `genre`, `part_of`, `lyrics_by`, `language_of_work_or_name`, `copyright_status`, `publication_date`, `inception`, `musicbrainz_work_id`, `title`, `imslp_id`, `tonality`, `image`, `catalog_code`, `opus_number`, `instrumentation`, `has_lyrics`]\n- Table: `key`, Columns: [`label`, `description`, `commons_category`, `freebase_id`, `image`, `imslp_id`, `follows`, `followed_by`, `related_category`, `ifla_value_vocabularies_id`, `instance_of`]\n- Table: `lyrics`, Columns: [`label`, `description`, `instance_of`, `form_of_creative_work`, `author`, `copyright_status`, `language_of_work_or_name`, `liedernet_text_id`, `first_line`, `publication_date`, `derivative_work`]\n- Table: `wikimedia_category`, Columns: [`label`, `description`, `instance_of`, `category_combines_topics`, `category_contains`, `commons_category`]",
        "Response": "Table: `winterreise`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, `text`, LocationID, UserID)  VALUES ('tw-713447015200329728', 'Friday', 13, 25, 'en', 'FALSE', 10, 0, 0, 12, 0.0, 'JOB \ufffd#hiring #ITJob #Job #Seattle - Systems Development Engineer- AWS EC2 Networking http://www.itjobpro.com/en/search/jobhighlights.aspx?JobID=254ed5ab-9e70-499d-b1fc-ba690dadbca5&origin=rss&provider=j&utm_source=dlvr.it&utm_medium=twitter \ufffdview details #jobs', 3751, 'tw-2647698344');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: twitter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `biological_process` (`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`)  VALUES ('receptor-mediated endocytosis', 'An endocytosis process in which cell surface receptors ensure specificity of transport. A specific receptor on the cell surface binds tightly to the extracellular macromolecule (the ligand) that it recognizes; the plasma-membrane region containing th', 'GO:0006898', 'endocytosis', 'http://purl.obolibrary.org/obo/GO_0006898', 'biological process');\nDatabase State:\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]",
        "Response": "Table: `biological_process`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Pilot_ID`, `Pilot_name`, `Rank`, `Age`, `Nationality`, `Position`, `Join_Year`, `Team`)  VALUES (1, 'Patrick O''Bryant', 13, 33, 'United States', 'Center Team', 2009, 'Bradley');\nDatabase State:\n- Table: `aircraft`, Columns: [`Aircraft_ID`, `Order_Year`, `Manufacturer`, `Model`, `Fleet_Series`, `Powertrain`, `Fuel_Propulsion`]",
        "Response": "Table: `pilot`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Aircraft_ID`, `Order_Year`, `Manufacturer`, `Model`, `Fleet_Series`, `Powertrain`, `Fuel_Propulsion`)  VALUES (4, 2000, 'Gillig', 'Advantage (Low Floor)', '474-481 (8)', 'Cummins ISC Allison WB-400R', 'Diesel');\nDatabase State:\n- Table: `aircraft`, Columns: [`Aircraft_ID`, `Order_Year`, `Manufacturer`, `Model`, `Fleet_Series`, `Powertrain`, `Fuel_Propulsion`]\n- Table: `pilot_record`, Columns: [`Record_ID`, `Pilot_ID`, `Aircraft_ID`, `Date`]\n- Table: `pilot`, Columns: [`Pilot_ID`, `Pilot_name`, `Rank`, `Age`, `Nationality`, `Position`, `Join_Year`, `Team`]",
        "Response": "Table: `aircraft`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `follows` (`label`, `description`, `point_in_time`, `candidate`, `number_of_seats_in_legislature`, `office_contested`, `instance_of`, `eligible_voters`, `country`, `part_of`, `followed_by`)  VALUES ('2011 legislative election in Larache constituency', 'nan', '+2011-11-25T00:00:00Z', 'Al Ahd', 4.0, 'Member of the House of Representatives of Morocco', 'Moroccan parliamentary election', 185222.0, 'Morocco', '2011 Moroccan general election', '2016 legislative election in Larache constituency');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `country`, `office_contested`, `point_in_time`, `part_of`, `number_of_seats_in_legislature`, `candidate`, `follows`, `applies_to_jurisdiction`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `dna_directed_dna_polymerase_family_a_palm_domain_protein_family` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('DNA polymerase I GSU0541', 'microbial protein found in Geobacter sulfurreducens PCA', 'DNA polymerase I GSU0541', 'Q74FR5', 'nucleobase-containing compound metabolic process', 'nucleic acid binding', 'DNA-directed DNA polymerase, family A, conserved site', 'Geobacter sulfurreducens PCA', 'NP_951599', 'protein', 'Ribonuclease H superfamily', 'protein');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `dna_directed_dna_polymerase_family_a_palm_domain_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (student_id)  VALUES (1316, 1304);\nDatabase State:\n- Table: Highschooler, Columns: [ID]",
        "Response": "Table: Likes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Hypothetical protein Mesci_1961', 'microbial protein found in Mesorhizobium ciceri biovar biserrulae WSM1271', 'nan', 'Mesorhizobium ciceri biovar biserrulae WSM1271', 'E8TFX2', 'hypothetical protein Mesci_1961', 'protein', 'YP_004141164', 'Protein of unknown function DUF1217');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `agr_c_984p_like_superfamily`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `genbank_assembly_accession_number`, `gram_staining`)  VALUES ('Caulobacter crescentus NA1000', 'bacterial stain', 'Caulobacter crescentus NA1000', 'Caulobacter crescentus', '565050', 'taxon', 'GCA_000022005.1', 'Gram-negative bacteria');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `ncbi_locus_tag`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `protein_of_unknown_function_duf1131`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `country`, `sport`, `competition_class`, `on_focus_list_of_wikimedia_project`, `participating_team`, `followed_by`, `time_period`, `follows`)  VALUES ('1989 Indian Women''s Team Badminton Championships', 'badminton championships', 'Indian Women''s Team Badminton Championships', 'India', 'badminton', 'women''s team', 'WikiProject Badminton/tournament focus list', 'Maharashtra', '1990 Indian Women''s Team Badminton Championships', '1988-1989 one-year-period', '1988 Indian Women''s Team Badminton Championships');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `country`, `sport`, `competition_class`, `on_focus_list_of_wikimedia_project`, `participating_team`, `follows`, `followed_by`, `time_period`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Sales` (EVENTID, REFID, EVENT_DATE, AMOUNT)  VALUES (2764569, 290878, '2007-06-03 12:00:00.0', 10.42999999999999972);\nDatabase State:\n- Table: `Customers`, Columns: [ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age]\n- Table: `Sales`, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]\n- Table: mailings3, Columns: [REFID, REF_DATE, RESPONSE]\n- Table: `Mailings1_2`, Columns: [REFID, REF_DATE, RESPONSE]",
        "Response": "Table: `Sales`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1004, 'Kumar', 'Dinesh', 20, 'M', 600, 8423, 'CHI');\nDatabase State:\n- Table: Restaurant, Columns: [ResID, ResName, Address, Rating]\n- Table: Type_Of_Restaurant, Columns: [ResID, ResTypeID]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `taxon` (`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`)  VALUES ('Yersinia enterocolitica', 'species of bacterium', 'Yersinia', 'Yersinia enterocolitica', 'taxon', 'species', '958655.0', '/m/058ytg', '630.0', '5427626.0', '10032888.0', '5CRHY', 'Gram-negative bacteria', 'http://www.bacterio.net/yersinia.html#enterocolitica', '2776234502.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (userid, movieid, rating)  VALUES (3698, 2427355, '5');\nDatabase State:\n- Table: users, Columns: [userid, age, u_gender, occupation]\n- Table: `directors`, Columns: [directorid, d_quality, avg_revenue]\n- Table: `u2base`, Columns: [userid, movieid, rating]\n- Table: `movies2actors`, Columns: [movieid, actorid, cast_num]\n- Table: `actors`, Columns: [actorid, a_gender, a_quality]",
        "Response": "Table: `u2base`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num)  VALUES (39, 12, 1, 'rectangle', 'long', 'not_double', 'jagged', 2, 'circle', 0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO customer_address (customer_id, address_id, status_id)  VALUES (549, 485, 1);\nDatabase State:\n- Table: `cust_order`, Columns: [order_id, order_date, customer_id, shipping_method_id, dest_address_id]\n- Table: author, Columns: [author_id, author_name]\n- Table: book_language, Columns: [language_id, language_code, language_name]\n- Table: book, Columns: [book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id]\n- Table: country, Columns: [country_id, country_name]\n- Table: book_author, Columns: [book_id, author_id]\n- Table: `order_line`, Columns: [line_id, order_id, book_id, price]\n- Table: `order_history`, Columns: [history_id, order_id, status_id, status_date]\n- Table: customer_address, Columns: [customer_id, address_id, status_id]",
        "Response": "Table: customer_address"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (IMG_ID, PRED_CLASS_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID)  VALUES (2325214, 64, 6, 1);\nDatabase State:\n- Table: IMG_REL, Columns: [IMG_ID, PRED_CLASS_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID]\n- Table: IMG_OBJ, Columns: [IMG_ID, OBJ_SAMPLE_ID, OBJ_CLASS_ID, X, Y, W, H]\n- Table: ATT_CLASSES, Columns: [ATT_CLASS_ID, ATT_CLASS]\n- Table: PRED_CLASSES, Columns: [PRED_CLASS_ID, PRED_CLASS]",
        "Response": "Table: IMG_REL"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `taxon` (`label`, `description`, `taxon_name`, `taxon_rank`, `instance_of`, `topics_main_category`, `parent_taxon`, `gbif_taxon_id`, `new_zealand_organisms_register_id`, `inaturalist_taxon_id`, `nbn_system_key`, `irmng_id`, `ncbi_taxonomy_id`, `catalogue_of_life_id`, `commons_category`, `image`, `encyclopedia_of_life_id`, `worms_id_for_taxa`, `dyntaxa_id`)  VALUES ('Leptosphaeriaceae', 'family of fungi', 'Leptosphaeriaceae', 'family', 'taxon', 'Category:Leptosphaeriaceae', 'Pleosporales', '8307', '3be17655-e304-406f-a4b6-df8338c40ac1', '327992.0', 'NHMSYS0020535626', '117744.0', '34374.0', 'BYF', 'Leptosphaeriaceae', '2013-05-05 Leptosphaeria acuta (Moug. & Nestl.) P. Karst 342564.jpg', '6061.0', '100037.0', '6011061.0');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `instance_of`, `topics_main_category`, `parent_taxon`, `gbif_taxon_id`, `new_zealand_organisms_register_id`, `inaturalist_taxon_id`, `nbn_system_key`, `irmng_id`, `ncbi_taxonomy_id`, `catalogue_of_life_id`, `commons_category`, `image`, `encyclopedia_of_life_id`, `worms_id_for_taxa`, `dyntaxa_id`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`index`, id, tag)  VALUES (157324, 73810, 'ambient');\nDatabase State:\n- Table: `torrents`, Columns: [groupName, totalSnatched, artist, groupYear, releaseType, groupId, id]",
        "Response": "Table: `tags`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `computing_platform` (`label`, `description`, `commons_category`, `freebase_id`, `follows`, `followed_by`, `instance_of`)  VALUES ('Super Nintendo Entertainment System', 'fourth-generation home video game console by Nintendo', 'Super Famicom and variants', '/m/070c4', 'Nintendo Entertainment System', 'Nintendo 64', 'product model');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `freebase_id`, `followed_by`, `follows`, `instance_of`, `image`, `subclass_of`, `commons_category`]",
        "Response": "Table: `computing_platform`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO east_superstore (`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit)  VALUES (6921, 'US-2014-105046', '2016-07-17', '2016-07-23', 'Standard Class', 'BE-11335', 'East', 'FUR-FU-10004848', 39.0799999999999983, 4, 0.0, 14.4596);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: east_superstore"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Festival_ID`, `Festival_Name`, `Chair_Name`, `Location`, `Year`, `Num_of_Audience`)  VALUES (1, 'Panasonic Awards', 'Raymond Floyd', 'United States', 2006, 152);\nDatabase State:\n- Table: `festival_detail`, Columns: [`Festival_ID`, `Festival_Name`, `Chair_Name`, `Location`, `Year`, `Num_of_Audience`]\n- Table: artwork, Columns: [`Artwork_ID`, `Type`, `Name`]\n- Table: nomination, Columns: [`Artwork_ID`, `Festival_ID`, `Result`]",
        "Response": "Table: `festival_detail`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`People_ID`, `Name`, `Country`, `Is_Male`, `Age`)  VALUES (6, 'Annie Mediate', 'United States', 'F', 26);\nDatabase State:\n- Table: `people`, Columns: [`People_ID`, `Name`, `Country`, `Is_Male`, `Age`]\n- Table: `wedding`, Columns: [`Church_ID`, `Male_ID`, `Female_ID`, `Year`]\n- Table: `church`, Columns: [`Church_ID`, `Name`, `Organized_by`, `Open_Date`, `Continuation_of`]",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Editor_ID`, `Journal_ID`, `Work_Type`)  VALUES (8, 17, 'Article');\nDatabase State:\n- Table: `editor`, Columns: [`Editor_ID`, `Name`, `Age`]",
        "Response": "Table: `journal_committee`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `field_of_this_occupation`, `instance_of`)  VALUES ('pallapugno player', 'sportsperson who plays pallapugno', 'competitive player', 'pallapugno', 'occupation');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `intentional_human_activity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1031, 'Smith', 'Sarah', 20, 'F', 550, 8772, 'PHL');\nDatabase State:\n- Table: Dorm_amenity, Columns: [amenid, amenity_name]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Dorm, Columns: [dormid, dorm_name, student_capacity, gender]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `election` (`Election_ID`, `Representative_ID`, `Date`, `Votes`, `Vote_Percent`, `Seats`, `Place`)  VALUES (5, 7, '1953', 12422.0, 16.0, 7.0, 3.0);\nDatabase State:\n- Table: `representative`, Columns: [`Representative_ID`, `Name`, `State`, `Party`, `Lifespan`]\n- Table: `election`, Columns: [`Election_ID`, `Representative_ID`, `Date`, `Votes`, `Vote_Percent`, `Seats`, `Place`]",
        "Response": "Table: `election`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `country`, `commons_category`, `instance_of`, `image`, `postal_code`, `shares_border_with`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `freebase_id`, `population`, `geonames_id`, `openstreetmap_relation_id`, `elevation_above_sea_level`, `area`, `whos_on_first_id`)  VALUES ('Les Pujols', 'commune in Ari\u00e8ge, France', 'France', 'Les Pujols', 'commune of France', 'Eglise St Blaise Les Pujols Ari\u00e8ge avec contreforts.jpg', '09100', 'Arvigna', '43.088333333333', 'canton of Pamiers-Est', '/m/03m8ns0', 831.0, '6455503.0', 'nan', 255.0, 13.17999999999999972, '1125777793.0');\nDatabase State:\n- Table: `abreuvoir`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO employee (ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID)  VALUES ('222-23-2222', 'Marlin', 'Bill', '3/28/77', 'US$125,000.00', 'M', NULL, 2, 4);\nDatabase State:\n- Table: employee, Columns: [ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO competitor_event (event_id, competitor_id, medal_id)  VALUES (14, 134280, 4);\nDatabase State:\n- Table: person, Columns: [id, full_name, gender, height, weight]\n- Table: competitor_event, Columns: [event_id, competitor_id, medal_id]\n- Table: sport, Columns: [id, sport_name]\n- Table: event, Columns: [id, sport_id, event_name]\n- Table: noc_region, Columns: [id, noc, region_name]\n- Table: games, Columns: [id, games_year, games_name, season]\n- Table: person_region, Columns: [person_id, region_id]\n- Table: city, Columns: [id, city_name]\n- Table: games_competitor, Columns: [id, games_id, person_id, age]\n- Table: medal, Columns: [id, medal_name]\n- Table: games_city, Columns: [games_id, city_id]",
        "Response": "Table: competitor_event"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `source_of_information` (`label`, `description`, `instance_of`, `publication_date`)  VALUES ('Flora Reipublicae Popularis Sinicae, volume 55(1)', 'nan', 'volume', '+1979-10-00T00:00:00Z');\nDatabase State:\n- Table: `source_of_information`, Columns: [`label`, `description`, `instance_of`, `publication_date`]\n- Table: `sokeikakketsuto`, Columns: [`label`, `description`, `instance_of`, `natural_product_of_taxon`, `kegg_id`, `pubchem_substance_id_sid`, `subclass_of`, `part_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `natural_product_of_taxon`, `kegg_id`, `pubchem_substance_id_sid`, `subclass_of`, `part_of`]\n- Table: `part`, Columns: [`label`, `description`, `instance_of`, `kegg_id`, `pubchem_substance_id_sid`, `has_parts`]\n- Table: `taxon`, Columns: [`label`, `description`, `commons_category`, `image`, `taxon_name`, `taxon_rank`, `freebase_id`, `tropicos_id`, `ipni_plant_id`, `parent_taxon`, `instance_of`, `ncbi_taxonomy_id`, `flora_of_china_id`, `grin_url`, `gbif_taxon_id`, `taxon_common_name`, `plants_of_the_world_online_id`, `irmng_id`, `topics_main_category`, `inaturalist_taxon_id`, `encyclopedia_of_life_id`, `described_by_source`, `world_flora_online_id`, `open_tree_of_life_id`, `catalogue_of_life_id`]\n- Table: `secretion_or_excretion`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `taxon_rank`, `parent_taxon`, `this_taxon_is_source_of`, `image`, `freebase_id`, `plantlist_id`, `ncbi_taxonomy_id`, `ipni_plant_id`, `tropicos_id`, `grin_url`, `gbif_taxon_id`, `plants_of_the_world_online_id`, `world_flora_online_id`, `unii`, `open_tree_of_life_id`, `inaturalist_taxon_id`, `catalogue_of_life_id`, `taxon_common_name`, `described_by_source`, `has_use`]",
        "Response": "Table: `source_of_information`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO person_region (person_id, region_id)  VALUES (43640, 177);\nDatabase State:\n- Table: medal, Columns: [id, medal_name]\n- Table: noc_region, Columns: [id, noc, region_name]",
        "Response": "Table: person_region"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `followed_by` (`label`, `description`, `sport`, `instance_of`, `point_in_time`, `country`, `series_ordinal`, `winner`, `follows`, `followed_by`, `edition_number`)  VALUES ('1999 Trofeo Matteotti', 'nan', 'road bicycle racing', 'Trofeo Matteotti', '+1999-08-01T00:00:00Z', 'Italy', '54.0', 'Francesco Casagrande', '1998 Trofeo Matteotti', '2000 Trofeo Matteotti', '54');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Conductor_ID`, `Name`, `Age`, `Nationality`, `Year_of_Work`)  VALUES (3, 'Colin Davis', 42, 'USA', 6);\nDatabase State:\n- Table: `performance`, Columns: [`Performance_ID`, `Orchestra_ID`, `Type`, `Date`, `Official_ratings_(millions)`, `Weekly_rank`, `Share`]\n- Table: `show`, Columns: [`Show_ID`, `Performance_ID`, `If_first_show`, `Result`, `Attendance`]",
        "Response": "Table: `conductor`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (IMG_ID, PRED_CLASS_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID)  VALUES (2319188, 149, 3, 10);\nDatabase State:\n- Table: ATT_CLASSES, Columns: [ATT_CLASS_ID, ATT_CLASS]\n- Table: IMG_REL, Columns: [IMG_ID, PRED_CLASS_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID]\n- Table: IMG_OBJ, Columns: [IMG_ID, OBJ_SAMPLE_ID, OBJ_CLASS_ID, X, Y, W, H]\n- Table: OBJ_CLASSES, Columns: [OBJ_CLASS_ID, OBJ_CLASS]\n- Table: PRED_CLASSES, Columns: [PRED_CLASS_ID, PRED_CLASS]",
        "Response": "Table: IMG_REL"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `point_in_time`, `follows`, `followed_by`, `part_of`)  VALUES ('2163 BC', 'year', 'year BC', '-2163-01-01T00:00:00Z', '2164 BC', '2162 BC', '2160s BCE');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `point_in_time`, `follows`, `followed_by`, `part_of`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `product` (`label`, `description`, `natural_product_of_taxon`, `image`, `subclass_of`)  VALUES ('flaxseed', 'seed of the flax plant', 'Linum usitatissimum', 'Jardim de Plantas Medicinais Jani Pereira (12).jpg', 'oil seed');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `subclass_of`, `natural_product_of_taxon`, `image`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `commons_category`, `image`, `parent_taxon`, `ncbi_taxonomy_id`, `itis_tsn`, `instance_of`, `freebase_id`, `tropicos_id`, `ipni_plant_id`, `grin_url`, `usda_plants_id`, `flora_of_china_id`, `dyntaxa_id`, `african_plant_database_id`, `topics_main_category`, `gbif_taxon_id`, `new_zealand_organisms_register_id`, `taxon_common_name`, `eppo_code`, `nbn_system_key`, `plants_of_the_world_online_id`, `irmng_id`, `inaturalist_taxon_id`, `apni_id`, `world_flora_online_id`, `open_tree_of_life_id`, `tela_botanica_id`, `catalogue_of_life_id`, `described_by_source`]",
        "Response": "Table: `product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `coordinate_location`, `freebase_id`, `instance_of`, `image`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `topics_main_category`, `area`)  VALUES ('Acre Subdistrict', 'subdistrict of Mandatory Palestine', '32.928098', '/m/0vpk1n7', 'subdistrict of Mandatory Palestine', 'nan', 'Mandatory Palestine', 'nan', 'Mandatory Palestine', 'Category:District of Acre', 799.6630000000000109);\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `coordinate_location`, `freebase_id`, `instance_of`, `image`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `topics_main_category`, `area`]\n- Table: `national_parks_of_israel`, Columns: [`label`, `description`, `instance_of`, `commons_category`, `coordinate_location`, `image`, `located_in_the_administrative_territorial_entity`, `geonames_id`, `country`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Answer` (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('36', 2016, 2294, 1);\nDatabase State:\n- Table: `Answer`, Columns: [AnswerText, SurveyID, UserID, QuestionID]\n- Table: Question, Columns: [questiontext, questionid]",
        "Response": "Table: `Answer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`People_ID`, `District`, `Name`, `Party`, `Age`)  VALUES (3, 'New York 3', 'Daniel Sickles', 'Democratic', 46);\nDatabase State:\n- Table: `debate_people`, Columns: [`Debate_ID`, `Affirmative`, `Negative`, `If_Affirmative_Win`]\n- Table: `people`, Columns: [`People_ID`, `District`, `Name`, `Party`, `Age`]\n- Table: `debate`, Columns: [`Debate_ID`, `Date`, `Venue`, `Num_of_Audience`]",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Finance_ID, Other_Details)  VALUES (6, 'Good');\nDatabase State:\n- Table: Agreements, Columns: [Document_ID, Event_ID]",
        "Response": "Table: Finances"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `subclass_of`, `has_parts`, `cell_component`, `molecular_function`, `biological_process`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('50S ribosomal protein L9 HMPREF0421_21156', 'microbial protein found in Gardnerella vaginalis ATCC 14019', 'E3D768', 'Gardnerella vaginalis ATCC 14019', '50S ribosomal protein L9 HMPREF0421_21156', 'protein', 'Ribosomal protein L9, C-terminal', 'intracellular anatomical structure', 'RNA binding', 'protein biosynthesis', 'protein', 'YP_003986261', 'Ribosomal protein L9/RNase H1, N-terminal');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `ribosomal_protein_l9_c_terminal_domain_superfamily`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `subclass_of`, `has_parts`, `cell_component`, `molecular_function`, `biological_process`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `ribosomal_protein_l9_c_terminal_domain_superfamily`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `instance_of`, `strand_orientation`, `genomic_start`, `genomic_end`, `ncbi_locus_tag`)  VALUES ('DMC1', 'protein-coding gene in the species Homo sapiens', '11144', 'protein-coding gene', 'DNA meiotic recombinase 1', 'Homo sapiens', 'gene', 'reverse strand', '38914954.0', '38966291.0', 'nan');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `instance_of`, `strand_orientation`, `genomic_start`, `genomic_end`, `ncbi_locus_tag`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `commons_category`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `image`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `mesh_descriptor_id`, `microsoft_academic_id`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO nomination (`Artwork_ID`, `Festival_ID`, `Result`)  VALUES (4, 1, 'Won');\nDatabase State:\n- Table: artwork, Columns: [`Artwork_ID`, `Type`, `Name`]",
        "Response": "Table: nomination"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, model_year, country)  VALUES (267, 1978, 1);\nDatabase State:\n- Table: data, Columns: [ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name]\n- Table: country, Columns: [origin, country]\n- Table: production, Columns: [ID, model_year, country]\n- Table: price, Columns: [ID, price]",
        "Response": "Table: production"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Nuclease AHA_2180', 'microbial protein found in Aeromonas hydrophila subsp. hydrophila ATCC 7966', 'nuclease AHA_2180', 'A0KKA3', 'cell communication', 'integral component of membrane', 'Na-Ca exchanger/integrin-beta4', 'Aeromonas hydrophila subsp. hydrophila ATCC 7966', 'YP_856704', 'protein', 'Endonuclease/exonuclease/phosphatase superfamily');\nDatabase State:\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `taxon` (`label`, `description`, `taxon_rank`, `parent_taxon`, `taxon_name`, `instance_of`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `mesh_descriptor_id`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`, `catalogue_of_life_id`)  VALUES ('Acinetobacter calcoaceticus', 'species of bacterium', 'species', 'Acinetobacter', 'Acinetobacter calcoaceticus', 'taxon', '/m/0bm9ywc', '471.0', '3223271.0', '958785.0', 'Gram-negative bacteria', 'D016954', '10962760.0', 'http://www.bacterio.net/acinetobacter.html#calcoaceticus', '2775859738.0', '9B63');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `instance_of`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_rank`, `parent_taxon`, `taxon_name`, `instance_of`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `mesh_descriptor_id`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`, `catalogue_of_life_id`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, p_id)  VALUES (144, 278);\nDatabase State:\n- Table: taughtBy, Columns: [course_id, p_id]\n- Table: `advisedBy`, Columns: [p_id, p_id_dummy]\n- Table: course, Columns: [course_id, courseLevel]",
        "Response": "Table: taughtBy"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `taxon_name`, `taxon_rank`, `commons_category`, `parent_taxon`, `itis_tsn`, `instance_of`, `tropicos_id`, `image`, `ipni_plant_id`, `plantlist_id`, `ncbi_taxonomy_id`, `grin_url`, `usda_plants_id`, `encyclopedia_of_life_id`, `gbif_taxon_id`, `commons_gallery`, `taxon_common_name`, `inaturalist_taxon_id`, `plants_of_the_world_online_id`, `open_tree_of_life_id`, `topics_main_category`, `catalogue_of_life_id`, `world_flora_online_id`, `freebase_id`)  VALUES ('Iris missouriensis', 'species of plant', 'Iris missouriensis', 'species', 'Iris missouriensis', 'Iris', '43221.0', 'taxon', '16600527', 'Iris missouriensis 9423.JPG', '438880-1', 'kew-322138', '207932.0', 'https://npgsweb.ars-grin.gov/gringlobal/taxonomydetail.aspx?id=20363', 'IRMI', '490955.0', '5298923.0', 'Iris missouriensis', 'Rocky Mountain iris', '57730.0', 'urn:lsid:ipni.org:names:438880-1', '74513.0', 'nan', '3PZWC', 'wfo-0000783633', '/m/02vvf3v');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `sport`, `instance_of`, `part_of`, `country`, `follows`, `followed_by`, `point_in_time`, `event_distance`, `winner`, `organizer`, `freebase_id`, `edition_number`, `start_point`, `destination_point`)  VALUES ('2015 UCI Road World Championships \u2013 Women''s team time trial', 'cycling race', 'road bicycle racing', 'UCI Road World Championships \u2013 Women''s team time trial', '2015 UCI Road World Championships', 'United States of America', '2014 UCI Road World Championships \u2013 Women''s team time trial', '2016 UCI Road World Championships \u2013 Women''s team time trial', '+2015-00-00T00:00:00Z', 38.60000000000000142, 'Canyon//SRAM Racing', 'Union Cycliste Internationale', 'nan', '12', 'Richmond', 'Richmond');\nDatabase State:\n- Table: `2013_uci_road_world_championships`, Columns: [`label`, `description`, `commons_category`, `freebase_id`, `sport`, `instance_of`, `part_of`, `point_in_time`, `destination_point`, `follows`, `followed_by`, `event_distance`, `country`, `winner`, `edition_number`, `organizer`]\n- Table: `winner`, Columns: [`label`, `description`, `sex_or_gender`, `commons_category`, `instance_of`, `occupation`, `date_of_birth`, `place_of_birth`, `country_of_citizenship`, `freebase_id`, `image`, `participant_in`, `sport`, `procyclingstats_cyclist_id`, `cycling_archives_cyclist_id`, `given_name`, `member_of_sports_team`, `twitter_username`, `family_name`, `firstcycling_rider_id`, `uci_rider_id`]\n- Table: `follows`, Columns: [`label`, `description`, `freebase_id`, `sport`, `instance_of`, `part_of`, `followed_by`, `follows`, `point_in_time`, `event_distance`, `winner`, `organizer`, `edition_number`, `destination_point`]\n- Table: `given_name`, Columns: [`label`, `description`, `instance_of`, `said_to_be_the_same_as`, `different_from`, `native_label`, `writing_system`, `soundex`, `cologne_phonetics`, `caverphone`, `language_of_work_or_name`, `commons_category`]\n- Table: `followed_by`, Columns: [`label`, `description`, `sport`, `instance_of`, `part_of`, `country`, `follows`, `followed_by`, `point_in_time`, `event_distance`, `winner`, `organizer`, `freebase_id`, `edition_number`, `start_point`, `destination_point`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `commons_category`, `flag_image`, `coat_of_arms_image`, `country`, `coordinate_location`, `topics_main_category`, `instance_of`, `geonames_id`, `viaf_id`, `image`, `official_website`, `postal_code`, `quora_topic_id`, `musicbrainz_area_id`, `area`, `population`, `located_in_time_zone`, `whos_on_first_id`, `freebase_id`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`)  VALUES ('protein localization to membrane', 'A process in which a protein is transported to, or maintained in, a specific location in a membrane.', 'GO:0072657', 'localization within membrane', 'http://purl.obolibrary.org/obo/GO_0072657', 'biological process');\nDatabase State:\n- Table: `regulates_molecular_biology`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]",
        "Response": "Table: `regulates_molecular_biology`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `wikimedia_category` (`label`, `description`, `great_russian_encyclopedia_online_id`, `glottolog_code`, `art_architecture_thesaurus_id`, `iso_639_2_code`, `topics_main_category`, `ndl_authority_id`, `dewey_decimal_classification`, `gnd_id`, `linguistic_typology`, `language_regulatory_body`, `babelnet_id`, `ietf_language_tag`, `encyclop\u00e6dia_britannica_online_id`, `category_for_films_in_this_language`, `page_banner`, `iso_639_3_code`, `quora_topic_id`, `omegawiki_defined_meaning`, `country`, `native_label`, `iso_639_1_code`, `wals_lect_code`, `commons_category`, `gost_77597_code`, `instance_of`, `has_grammatical_mood`, `short_name`, `writing_system`, `has_tense`, `freebase_id`, `subclass_of`, `library_of_congress_authority_id`, `distribution_map`, `wikimedia_language_code`, `iab_code`, `ethnologuecom_language_code`, `bncf_thesaurus_id`, `loc_and_marc_vocabularies_id`, `ethnologue_language_status`, `abs_ascl_2011_code`, `indigenous_to`, `linguasphere_code`, `exact_match`, `described_by_source`, `related_category`, `french_vikidia_id`, `unesco_thesaurus_id`, `yso_id`, `kbpedia_id`, `biblioth\u00e8que_nationale_de_france_id`, `posix_locale_identifier`, `krugosvet_article`, `national_library_of_israel_j9u_id`, `open_library_subject_id`, `lingua_libre_id`, `number_of_speakers_writers_or_signers`, `nkcr_aut_id`, `online_pwn_encyclopedia_id`, `uk_archival_thesaurus_id`, `eu_knowledge_graph_item_id`, `wordnet_31_synset_id`)  VALUES ('Category:Finnish pronunciation', 'Wikimedia category', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'Finnish pronunciation', 'nan', 'Wikimedia category', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', NULL, 'nan', 'nan', 'nan', 'nan', 'nan');\nDatabase State:\n- Table: `language`, Columns: [`label`, `description`, `great_russian_encyclopedia_online_id`, `glottolog_code`, `art_architecture_thesaurus_id`, `iso_639_2_code`, `topics_main_category`, `ndl_authority_id`, `dewey_decimal_classification`, `gnd_id`, `linguistic_typology`, `language_regulatory_body`, `babelnet_id`, `ietf_language_tag`, `encyclop\u00e6dia_britannica_online_id`, `category_for_films_in_this_language`, `page_banner`, `iso_639_3_code`, `quora_topic_id`, `omegawiki_defined_meaning`, `country`, `native_label`, `iso_639_1_code`, `wals_lect_code`, `commons_category`, `gost_77597_code`, `instance_of`, `has_grammatical_mood`, `short_name`, `writing_system`, `has_tense`, `freebase_id`, `subclass_of`, `library_of_congress_authority_id`, `distribution_map`, `wikimedia_language_code`, `iab_code`, `ethnologuecom_language_code`, `bncf_thesaurus_id`, `loc_and_marc_vocabularies_id`, `ethnologue_language_status`, `abs_ascl_2011_code`, `indigenous_to`, `linguasphere_code`, `exact_match`, `described_by_source`, `related_category`, `french_vikidia_id`, `unesco_thesaurus_id`, `yso_id`, `kbpedia_id`, `biblioth\u00e8que_nationale_de_france_id`, `posix_locale_identifier`, `krugosvet_article`, `national_library_of_israel_j9u_id`, `open_library_subject_id`, `lingua_libre_id`, `number_of_speakers_writers_or_signers`, `nkcr_aut_id`, `online_pwn_encyclopedia_id`, `uk_archival_thesaurus_id`, `eu_knowledge_graph_item_id`, `wordnet_31_synset_id`]\n- Table: `author`, Columns: [`label`, `description`, `viaf_id`, `library_of_congress_authority_id`, `occupation`, `isni`, `country_of_citizenship`, `date_of_birth`, `instance_of`, `idref_id`, `given_name`, `languages_spoken_written_or_signed`, `sex_or_gender`, `worldcat_identities_id`]\n- Table: `category_for_films_in_this_language`, Columns: [`label`, `description`, `category_combines_topics`, `category_contains`, `commons_category`, `instance_of`]\n- Table: `indigenous_people`, Columns: [`label`, `description`, `locator_map_image`, `instance_of`, `official_language`, `capital`, `legislative_body`, `shares_border_with`, `country`, `contains_the_administrative_territorial_entity`, `located_in_time_zone`, `coordinate_location`, `openstreetmap_relation_id`, `page_banner`, `musicbrainz_area_id`, `population`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `commons_category`, `category_of_associated_people`, `described_by_source`, `freebase_id`, `image`, `commons_gallery`, `demonym`, `office_held_by_head_of_government`, `part_of`, `library_of_congress_authority_id`, `biblioth\u00e8que_nationale_de_france_id`, `gnd_id`, `area`, `coat_of_arms_image`, `quora_topic_id`, `encyclop\u00e6dia_britannica_online_id`, `babelnet_id`, `topics_main_category`, `archinform_location_id`, `flag_image`, `geoshape`, `native_label`, `official_name`, `language_used`, `whos_on_first_id`, `viaf_id`, `french_vikidia_id`, `worldcat_identities_id`, `inaturalist_place_id`, `national_library_of_israel_j9u_id`, `museum_digital_place_id`, `eu_knowledge_graph_item_id`, `pronunciation_audio`, `topics_main_wikimedia_portal`, `nkcr_aut_id`, `gran_enciclop\u00e8dia_catalana_id`, `store_norske_leksikon_id`, `rkd_thesaurus_id`, `den_store_danske_id`, `online_pwn_encyclopedia_id`]",
        "Response": "Table: `wikimedia_category`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Market_ID`, `District`, `Num_of_employees`, `Num_of_shops`, `Ranking`)  VALUES (4, 'Nova Scotia', 1968, 32.0, 5);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `market`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `biological_process`, `molecular_function`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Chemotaxis methyltransferase SM_b20515', 'microbial protein found in Sinorhizobium meliloti 1021', 'Q92W49', 'Sinorhizobium meliloti 1021', 'chemotaxis methyltransferase SM_b20515', 'Chemotaxis receptor methyltransferase CheR, N-terminal', 'phosphorelay signal transduction system', 'phosphorelay sensor kinase activity', 'protein', 'NP_437036', 'Methylesterase CheB, C-terminal');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `signal_transduction_histidine_kinase_hwe_region_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (userid, movieid, rating)  VALUES (2800, 2477653, '4');\nDatabase State:\n- Table: `movies2directors`, Columns: [movieid, directorid, genre]",
        "Response": "Table: `u2base`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `instance_of`, `atomic_number`, `neutron_number`, `spin_quantum_number`, `parity_quantum_number`, `mass`, `mass_excess`, `binding_energy`, `wolfram_language_entity_code`, `decays_to`, `half_life`)  VALUES ('manganese-58', 'isotope of manganese', 'manganese', 'isotope of manganese', 25.0, 33.0, 1.0, 1.0, 57.94006664599999822, -55827.55999999999768, 504405.2939999999945, 'Entity[\"Isotope\", \"Manganese58\"]', 'iron-58', 3.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `decays_to`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (4591187, 1, 3680, 360, 360);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `follows`, `followed_by`, `edition_number`, `sport`, `start_point`, `destination_point`, `winner`, `country`, `general_classification_of_race_participants`, `part_of`, `event_distance`, `point_in_time`)  VALUES ('1955 Paris-Tours', '1955 edition of the Paris-Tours, cycling road race in France', 'Paris\u2013Tours', '1954 Paris-Tours', '1956 Paris-Tours', '49', 'road bicycle racing', 'Paris', 'Tours', 'Jacques Dupont', 'France', 'Jacques Dupont', '1955 Challenge Desgrange-Colombo', 253.0, '+1955-10-09T00:00:00Z');\nDatabase State:\n- Table: `1956_challenge_desgrange_colombo`, Columns: [`label`, `description`, `instance_of`, `follows`, `followed_by`, `edition_number`, `sport`, `start_point`, `destination_point`, `winner`, `country`, `general_classification_of_race_participants`, `part_of`, `event_distance`, `point_in_time`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `follows`, `followed_by`, `edition_number`, `sport`, `start_point`, `destination_point`, `winner`, `country`, `general_classification_of_race_participants`, `part_of`, `event_distance`, `point_in_time`]\n- Table: `given_name`, Columns: [`label`, `description`, `said_to_be_the_same_as`, `instance_of`, `commons_category`, `language_of_work_or_name`, `different_from`, `family_name_identical_to_this_given_name`, `native_label`, `writing_system`, `soundex`, `cologne_phonetics`, `caverphone`, `attested_in`, `pronunciation_audio`, `store_norske_leksikon_id`, `nederlandse_voornamenbank_id`, `factgrid_item_id`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `commons_category`, `country`, `image`, `postal_code`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `instance_of`, `freebase_id`, `shares_border_with`, `geonames_id`, `area`, `population`, `whos_on_first_id`, `locator_map_image`]\n- Table: `winner`, Columns: [`label`, `description`, `sex_or_gender`, `place_of_birth`, `occupation`, `freebase_id`, `instance_of`, `date_of_birth`, `country_of_citizenship`, `image`, `given_name`, `participant_in`, `sport`, `commons_category`, `cycling_archives_cyclist_id`, `procyclingstats_cyclist_id`, `cyclebase_cyclist_id`, `m\u00e9moire_du_cyclisme_cyclist_id`, `family_name`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (product_id, product_type_code, product_name, product_price)  VALUES (9, 'Clothes', 'jcrew', 622.7927598449399512);\nDatabase State:\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_date, order_status_code]\n- Table: Products, Columns: [product_id, product_type_code, product_name, product_price]\n- Table: Order_Items, Columns: [order_item_id, order_id, product_id, order_quantity]\n- Table: Customer_Address_History, Columns: [customer_id, address_id, date_from, date_to]\n- Table: Customers, Columns: [customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details)  VALUES ('229', 266, 'CA', 'Rob Dinning', '1-327-185-9368', 'rborer@example.org', '5 stars');\nDatabase State:\n- Table: Stores, Columns: [Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details]\n- Table: Ref_Payment_Methods, Columns: [payment_method_code, payment_method_description]\n- Table: Invoices, Columns: [Invoice_ID, Order_ID, payment_method_code, Product_ID, Order_Quantity, Other_Item_Details, Order_Item_ID]",
        "Response": "Table: Stores"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `sport`, `official_website`, `edition_number`, `follows`, `followed_by`, `point_in_time`, `country`, `start_point`, `destination_point`, `part_of`, `winner`, `general_classification_of_race_participants`, `event_distance`, `participating_team`, `procyclingstats_race_id`)  VALUES ('2012 Grand Prix Cycliste de Qu\u00e9bec', 'cycling race', 'Grand Prix Cycliste de Qu\u00e9bec', 'road bicycle racing', 'http://gpcqm.ca/fr/accueil/', '3', '2011 Grand Prix Cycliste de Qu\u00e9bec', '2013 Grand Prix Cycliste de Qu\u00e9bec', '+2012-09-07T00:00:00Z', 'Canada', 'Quebec', 'Quebec', '2012 UCI World Tour', 'Simon Gerrans', 'Simon Gerrans', 201.5999999999999944, '2012 AG2R La Mondiale', '113420.0');\nDatabase State:\n- Table: `event`, Columns: [`label`, `description`, `topics_main_category`, `winner`, `instance_of`, `sport`, `point_in_time`, `has_parts`, `edition_number`, `followed_by`, `organizer`, `follows`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, author_id, subject_id, course_name, course_description)  VALUES (5, 11, 1, 'data structure', 'data structure');\nDatabase State:\n- Table: Subjects, Columns: [subject_id, subject_name]\n- Table: Courses, Columns: [course_id, author_id, subject_id, course_name, course_description]\n- Table: Student_Course_Enrolment, Columns: [registration_id, student_id, course_id, date_of_enrolment, date_of_completion]\n- Table: Student_Tests_Taken, Columns: [registration_id, date_test_taken, test_result]\n- Table: Students, Columns: [student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name]\n- Table: Course_Authors_and_Tutors, Columns: [author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1]",
        "Response": "Table: Courses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`)  VALUES ('4-alpha-glucanotransferase gll3316', 'microbial gene found in Gloeobacter violaceus PCC 7421', 'Gloeobacter violaceus PCC 7421', '2601718', 'gene', '4-alpha-glucanotransferase gll3316', 'gll3316', '3515800', 'reverse strand', 'gene', '3514286');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `biological_process`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Bll4278', 'microbial protein found in Bradyrhizobium diazoefficiens USDA 110', 'Q89MB5', 'Bradyrhizobium japonicum USDA 110', 'pathogenesis', 'bll4278 bll4278', 'protein', 'NP_770918', 'BA14k family');\nDatabase State:\n- Table: `ba14k_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `biological_process`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `ncbi_locus_tag`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `biological_process`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `singer` (`Singer_ID`, `Name`, `Birth_Year`, `Net_Worth_Millions`, `Citizenship`)  VALUES (3, 'Alice Walton', 1949.0, 26.30000000000000071, 'United States');\nDatabase State:\n- Table: `song`, Columns: [`Song_ID`, `Title`, `Singer_ID`, `Sales`, `Highest_Position`]\n- Table: `singer`, Columns: [`Singer_ID`, `Name`, `Birth_Year`, `Net_Worth_Millions`, `Citizenship`]",
        "Response": "Table: `singer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `book_of_the_bible` (`label`, `description`, `instance_of`, `part_of`, `commons_category`, `topics_main_category`, `freebase_id`, `described_by_source`, `title`, `has_parts`, `interlingual_index_id`, `wordnet_31_synset_id`, `viaf_id`, `gnd_id`, `entry_in_abbreviations_table`, `short_name`)  VALUES ('Exodus', 'second book of the Bible', 'literary work', 'Old Testament', 'Book of Exodus', 'Category:Book of Exodus', '/m/02mr5', 'Jewish Encyclopedia of Brockhaus and Efron', '\u05e9\u05b0\u05c1\u05de\u05d5\u05b9\u05ea', 'Exodus 10', 'i70295', '06444385-n', '265859281', 'nan', 'Exodus', 'Ex');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `book_of_the_bible`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO subjects (case_number, race, gender, last_name, first_name, full_name)  VALUES ('155466-2015', 'W', 'M', 'Cody', 'Joe', 'Cody, Joe');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: subjects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Company_ID`, `Name`, `Headquarters`, `Industry`, `Sales_in_Billion`, `Profits_in_Billion`, `Assets_in_Billion`, `Market_Value_in_Billion`)  VALUES (12.0, 'Chevron', 'USA', 'Oil and gas', 236.3000000000000113, 26.89999999999999858, 209.5, 218.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `company`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `museum` (`Museum_ID`, `Name`, `Num_of_Staff`, `Open_Year`)  VALUES (2, 'Capital Plaza Museum', 25, '2012');\nDatabase State:\n- Table: `visit`, Columns: [`Museum_ID`, `visitor_ID`, `Num_of_Ticket`, `Total_spent`]",
        "Response": "Table: `museum`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `commons_category`, `licence_plate_code`, `coordinate_location`, `topics_main_category`, `curlie_id`, `locator_map_image`, `instance_of`, `freebase_id`, `fips_6_4`, `gnis_id`, `population`, `geonames_id`, `shares_border_with`, `official_website`, `viaf_id`, `coat_of_arms_image`, `image`, `area`, `inception`, `capital`, `category_of_associated_people`, `archinform_location_id`, `named_after`, `seal_image`, `library_of_congress_authority_id`, `whos_on_first_id`, `list_of_monuments`, `category_for_maps`, `water_as_percent_of_area`, `native_label`, `wolfram_language_entity_code`, `worldcat_identities_id`, `hasc`, `openstreetmap_relation_id`, `ballotpedia_id`, `getty_thesaurus_of_geographic_names_id`, `inaturalist_place_id`, `odot_county_code`, `per_capita_income`, `number_of_households`, `national_library_of_israel_j9u_id`)  VALUES ('Morrow County', 'county in Ohio, United States', 'Ohio', 'United States of America', 'Morrow County, Ohio', '59.0', '40.53', 'Category:Morrow County, Ohio', 'Regional/North_America/United_States/Ohio/Counties/Morrow/', 'Map of Ohio highlighting Morrow County.svg', 'county of Ohio', '/m/0n1_g', '39117.0', '1074071', 34950.0, '5163509', 'Crawford County', 'http://www.morrowcountyohio.gov', '150111298', 'Seal of Morrow County Ohio.svg', 'Mount-gilead-ohio-courthouse.jpg', 1055.0, '+1848-02-24T00:00:00Z', 'Mount Gilead', 'Category:People from Morrow County, Ohio', '20220', 'Jeremiah Morrow', 'Seal of Morrow County Ohio.svg', 'n81131961', '102083749', 'National Register of Historic Places listings in Morrow County, Ohio', 'Category:Maps of Morrow County, Ohio', 0.2999999999999999889, 'Morrow County', 'Entity[\"AdministrativeDivision\", {\"MorrowCounty\", \"Ohio\", \"UnitedStates\"}]', 'lccn-n81131961', 'US.OH.MW', '185762', 'Morrow_County,_Ohio', '1002697', '708', 'MRW', 30098.0, 13064.0, '987007562014605171');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `department` (`Department_ID`, `Name`, `Creation`, `Ranking`, `Budget_in_Billions`, `Num_Employees`)  VALUES (1, 'State', '1789', 1, 9.96000000000000086, 30266.0);\nDatabase State:\n- Table: `head`, Columns: [`head_ID`, `name`, `born_state`, `age`]\n- Table: `department`, Columns: [`Department_ID`, `Name`, `Creation`, `Ranking`, `Budget_in_Billions`, `Num_Employees`]",
        "Response": "Table: `department`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violation (inspection_id, point_id, fine, inspector_comment)  VALUES (1631437, 35, 100, 'OBSERVED MISSING AND BROKEN CEILING TILES IN THE REAR PREP. ALSO, HANGING CEILING TILES IN THE DINNING AND REAR STORAGE AREAS. INSTRUCTED TO REPAIR AND MAINTAIN.');\nDatabase State:\n- Table: inspection, Columns: [inspection_id, inspection_date, inspection_type, results, employee_id, license_no, followup_to]\n- Table: violation, Columns: [inspection_id, point_id, fine, inspector_comment]",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violation (inspection_id, point_id, fine, inspector_comment)  VALUES (517663, 32, 100, 'All food and non-food contact equipment and utensils shall be smooth, easily cleanable, and durable, and shall be in good repair. INSTRUCTED TO REPAIR RUST ON WALK IN COOLER DOOR INSIDE');\nDatabase State:\n- Table: inspection, Columns: [inspection_id, inspection_date, inspection_type, results, employee_id, license_no, followup_to]\n- Table: violation, Columns: [inspection_id, point_id, fine, inspector_comment]\n- Table: inspection_point, Columns: [point_id, Description, category, code, fine, point_level]\n- Table: establishment, Columns: [license_no, dba_name, aka_name, facility_type, risk_level, address, city, state, zip, latitude, longitude, ward]\n- Table: employee, Columns: [employee_id, first_name, last_name, address, city, state, zip, phone, title, salary, supervisor]",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `natural_product` (`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Streptomyces coelicolor A3(2)', 'bacterial strain', 'Streptomyces coelicolor A', 'Streptomyces coelicolor', '100226', 'strain', 'gram-positive bacteria', 'GCA_000203835.1');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `ybhb_ybcl`, Columns: [`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `subclass_of`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `shares_border_with`, `coordinate_location`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `openstreetmap_relation_id`, `official_website`, `population`, `locator_map_image`, `area`, `viaf_id`, `inaturalist_place_id`, `capital`, `whos_on_first_id`)  VALUES ('Castile-La Mancha', 'autonomous community of Spain', 'Spain', 'Castile-La Mancha', 'Spain', 'Land of Valencia', '39.500011111111', 'Category:Castilla\u2013La Mancha', 'autonomous community of Spain', '/m/0jp17', '2593111', '349052.0', 'http://www.castillalamancha.es/', 2106331.0, 'Localizaci\u00f3n de Castilla-La Mancha.svg', 79463.0, 'nan', '10541.0', 'Toledo', '85682863.0');\nDatabase State:\n- Table: `place_of_birth`, Columns: [`label`, `description`, `image`, `country`, `located_in_the_administrative_territorial_entity`, `instance_of`, `commons_category`, `coordinate_location`, `freebase_id`, `geonames_id`]\n- Table: `political_border`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `shares_border_with`, `coordinate_location`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `openstreetmap_relation_id`, `official_website`, `population`, `locator_map_image`, `area`, `viaf_id`, `inaturalist_place_id`, `capital`, `whos_on_first_id`]\n- Table: `country`, Columns: [`label`, `description`, `great_russian_encyclopedia_online_id`, `coordinates_of_southernmost_point`, `category_for_films_shot_at_this_location`, `gnd_id`, `category_of_associated_people`, `emergency_phone_number`, `electrical_plug_type`, `licence_plate_code`, `babelnet_id`, `office_held_by_head_of_government`, `gini_coefficient`, `curlie_id`, `native_label`, `musicbrainz_area_id`, `insee_countries_and_foreign_territories_code`, `diplomatic_relation`, `flag_image`, `commons_gallery`, `civicus_monitor_country_entry`, `history_of_topic`, `capital`, `subreddit`, `openstreetmap_relation_id`, `mobile_country_code`, `nkcr_aut_id`, `category_of_people_buried_here`, `geoshape`, `coordinates_of_easternmost_point`, `demonym`, `le_monde_diplomatique_subject_id`, `fast_id`, `life_expectancy`, `member_of`, `unemployment_rate`, `viaf_id`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `office_held_by_head_of_state`, `commons_category`, `shares_border_with`, `nalt_id`, `iso_3166_1_numeric_code`, `coordinates_of_westernmost_point`, `country_calling_code`, `stw_thesaurus_for_economics_id`, `statoids_id`, `driving_side`, `flag`, `fips_10_4_countries_and_regions`, `isni`, `nese_id`, `maritime_identification_digits`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `geonames_id`, `unicode_character`, `unesco_thesaurus_id`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `quora_topic_id`, `country`, `mesh_descriptor_id`, `basic_form_of_government`, `ituisoiec_object_identifier`, `legislative_body`, `freebase_id`, `official_language`, `continent`, `coat_of_arms`, `age_of_majority`, `national_library_of_israel_id_old`, `on_focus_list_of_wikimedia_project`, `wipo_st3`, `coordinates_of_northernmost_point`, `has_quality`, `iso_3166_1_alpha_2_code`, `total_fertility_rate`, `area`, `central_bank`, `topics_main_category`, `biblioth\u00e8que_nationale_de_france_id`, `locator_map_image`, `bbc_things_id`, `head_of_government`, `ioc_country_code`, `official_name`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `page_banner`, `m49_code`, `mains_voltage`, `executive_body`, `number_of_out_of_school_children`, `anthem`, `inception`, `top_level_internet_domain`, `instance_of`, `highest_point`, `category_for_people_born_here`, `short_name`, `lowest_point`, `idref_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `library_of_congress_authority_id`, `coordinate_location`, `language_used`, `described_by_source`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `world_encyclopedia_of_puppetry_arts_id`, `iab_code`, `whos_on_first_id`, `dr_topic_id`, `treccanis_dizionario_di_storia_id`, `part_of`, `inaturalist_place_id`, `omegawiki_defined_meaning`, `hds_id`, `gs1_country_code`, `culture`, `geonlp_id`, `category_for_maps`, `analysis_policy_observatory_term_id`, `vat_rate`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `pronunciation_audio`, `eurovoc_id`, `worldcat_identities_id`, `open_data_portal`, `kbpedia_id`, `grove_art_online_id`, `rkd_thesaurus_id`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `economy_of_topic`, `bhcl_uuid`, `tasteatlas_id`, `github_topic`, `uk_parliament_thesaurus_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `zhihu_topic_id`, `joconde_location_id`, `idaigazetteer_id`, `ysa_id`, `obo_gazetteer_id`, `krugosvet_article`, `store_norske_leksikon_id`, `den_store_danske_id`, `gran_enciclop\u00e8dia_catalana_id`, `treccani_id`, `schoenberg_database_of_manuscripts_place_id`, `dewey_decimal_classification`, `official_website`, `the_world_factbook_country_id`, `national_library_of_israel_j9u_id`, `democracy_index`, `online_pwn_encyclopedia_id`, `namuwiki_id`, `der_spiegel_topic_id`, `yle_topic_id`, `wikisimpsons_id`, `urban_electric_transit_country_id`, `coat_of_arms_image`, `postimees_topic_id`, `head_of_state`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `hashtag`, `pm20_geo_code`, `openstreetmap_element`, `happy_planet_index_score`, `new_york_times_topic_id`, `comic_vine_id`, `marriageable_age`, `motto_text`, `us_national_archives_identifier`, `brockhaus_enzyklop\u00e4die_online_id`, `bbc_news_topic_id`, `armeniapedia_id`, `colon_classification`, `museum_digital_place_id`, `alltrails_trail_id`]\n- Table: `head_of_state`, Columns: [`label`, `description`, `sex_or_gender`, `place_of_birth`, `spouse`, `commons_category`, `library_of_congress_authority_id`, `gnd_id`, `award_received`, `date_of_birth`, `viaf_id`, `instance_of`, `freebase_id`, `country_of_citizenship`, `occupation`, `educated_at`, `given_name`, `munzinger_person_id`, `position_held`, `languages_spoken_written_or_signed`, `worldcat_identities_id`, `isni`, `name_in_native_language`, `image`, `opensanctions_id`]",
        "Response": "Table: `political_border`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Farm_ID`, `Year`, `Total_Horses`, `Working_Horses`, `Total_Cattle`, `Oxen`, `Bulls`, `Cows`, `Pigs`, `Sheep_and_Goats`)  VALUES (2, 1928, 5486.899999999999637, 4090.5, 8604.799999999999272, 895.2999999999999546, 32.79999999999999715, 3987.0, 6962.899999999999637, 8112.199999999999819);\nDatabase State:\n- Table: `farm`, Columns: [`Farm_ID`, `Year`, `Total_Horses`, `Working_Horses`, `Total_Cattle`, `Oxen`, `Bulls`, `Cows`, `Pigs`, `Sheep_and_Goats`]",
        "Response": "Table: `farm`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score)  VALUES (600, 18, 2015, 937);\nDatabase State:\n- Table: ranking_system, Columns: [id, system_name]\n- Table: university, Columns: [id, country_id, university_name]\n- Table: university_ranking_year, Columns: [university_id, ranking_criteria_id, year, score]\n- Table: ranking_criteria, Columns: [id, ranking_system_id, criteria_name]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `u2base` (userid, movieid, rating)  VALUES (5948, 2503810, '3');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `u2base`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `list` (`LastName`)  VALUES ('LARKINS', ' GAYLE', 4, 110);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `list`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO events (`Date received`, Product, `Sub-product`, Issue, `Sub-issue`, `Consumer complaint narrative`, Tags, `Consumer consent provided?`, `Submitted via`, `Date sent to company`, `Company response to consumer`, `Timely response?`, `Consumer disputed?`, `Complaint ID`, Client_ID)  VALUES ('2012-01-18', 'Credit card', NULL, 'Identity theft / Fraud / Embezzlement', NULL, NULL, NULL, 'N/A', 'Referral', '2013-02-14', 'Closed with explanation', 'Yes', 'No', 'CR0014696', 'C00002075');\nDatabase State:\n- Table: client, Columns: [client_id, sex, day, month, year, age, social, first, middle, last, phone, email, address_1, address_2, city, state, zipcode, district_id]\n- Table: events, Columns: [`Date received`, Product, `Sub-product`, Issue, `Sub-issue`, `Consumer complaint narrative`, Tags, `Consumer consent provided?`, `Submitted via`, `Date sent to company`, `Company response to consumer`, `Timely response?`, `Consumer disputed?`, `Complaint ID`, Client_ID]",
        "Response": "Table: events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Film_ID`, `Title`, `Studio`, `Director`, `Gross_in_dollar`)  VALUES (10, 'Annie', 'Columbia / Rastar', 'John Huston', 57059003);\nDatabase State:\n- Table: `market`, Columns: [`Market_ID`, `Country`, `Number_cities`]",
        "Response": "Table: `film`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `follows` (`label`, `description`, `instance_of`, `competition_class`, `part_of`, `described_at_url`, `location`, `event_distance`, `follows`, `followed_by`, `point_in_time`, `sport`)  VALUES ('1995 Nations Cup \u2013 U23 men''s coxless four', 'rowing event', 'rowing event', 'U23 men''s coxless four', '1995 Nations Cup', 'http://www.worldrowing.com/events/1995-nations-cup/u23-mens-four/', 'KPN Watersportbaan', 2000.0, '1994 Nations Cup \u2013 U23 men''s coxless four', '1996 Nations Cup \u2013 U23 men''s coxless four', '+1995-00-00T00:00:00Z', 'rowing');\nDatabase State:\n- Table: `1996_nations_cup`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `part_of`, `described_at_url`, `location`, `event_distance`, `follows`, `followed_by`, `point_in_time`, `sport`]\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `part_of`, `described_at_url`, `location`, `event_distance`, `follows`, `followed_by`, `point_in_time`, `sport`]\n- Table: `competition_class`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `short_name`, `sport`, `catalog_code`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `part_of`, `described_at_url`, `location`, `event_distance`, `follows`, `followed_by`, `point_in_time`, `sport`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO CountryLanguage (CountryCode, Language, IsOfficial, Percentage)  VALUES ('LBN', 'Arabic', 'T', 93.0);\nDatabase State:\n- Table: City, Columns: [ID, Name, CountryCode, District, Population]",
        "Response": "Table: CountryLanguage"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `country` (`label`, `description`, `commons_category`, `coordinate_location`, `topics_main_category`, `freebase_id`, `inception`, `locator_map_image`, `anthem`, `capital`, `legislative_body`, `currency`, `coat_of_arms_image`, `flag_image`, `instance_of`, `country`, `quora_topic_id`, `replaces`, `flag`, `coat_of_arms`, `continent`, `demonym`, `official_language`, `language_used`, `office_held_by_head_of_state`, `nkcr_aut_id`, `bhcl_uuid`, `native_label`, `described_by_source`, `shares_border_with`, `on_focus_list_of_wikimedia_project`, `great_russian_encyclopedia_online_id`, `coordinates_of_southernmost_point`, `new_york_times_topic_id`, `gnd_id`, `category_of_associated_people`, `emergency_phone_number`, `electrical_plug_type`, `licence_plate_code`, `babelnet_id`, `office_held_by_head_of_government`, `gini_coefficient`, `musicbrainz_area_id`, `diplomatic_relation`, `commons_gallery`, `viaf_id`, `history_of_topic`, `subreddit`, `openstreetmap_relation_id`, `iab_code`, `curlie_id`, `maritime_identification_digits`, `us_national_archives_identifier`, `category_of_people_buried_here`, `motto_text`, `geoshape`, `dewey_decimal_classification`, `coordinates_of_easternmost_point`, `le_monde_diplomatique_subject_id`, `member_of`, `unemployment_rate`, `railway_traffic_side`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `iso_3166_1_numeric_code`, `coordinates_of_westernmost_point`, `country_calling_code`, `stw_thesaurus_for_economics_id`, `statoids_id`, `mobile_country_code`, `fips_10_4_countries_and_regions`, `nese_id`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `wikimedia_outline`, `ndl_authority_id`, `geonames_id`, `unicode_character`, `unesco_thesaurus_id`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `mesh_descriptor_id`, `basic_form_of_government`, `highest_judicial_authority`, `ituisoiec_object_identifier`, `age_of_majority`, `asc_leiden_thesaurus_id`, `wipo_st3`, `coordinates_of_northernmost_point`, `has_quality`, `total_fertility_rate`, `area`, `store_norske_leksikon_id`, `executive_body`, `compulsory_education_minimum_age`, `biblioth\u00e8que_nationale_de_france_id`, `head_of_government`, `ioc_country_code`, `official_name`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `gs1_country_code`, `page_banner`, `category_for_films_shot_at_this_location`, `mains_voltage`, `fast_id`, `life_expectancy`, `top_level_internet_domain`, `highest_point`, `category_for_people_born_here`, `short_name`, `driving_side`, `head_of_state`, `lowest_point`, `brockhaus_enzyklop\u00e4die_online_id`, `civicus_monitor_country_entry`, `pronunciation_audio`, `idref_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `library_of_congress_authority_id`, `iso_3166_1_alpha_2_code`, `uk_parliament_thesaurus_id`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `located_in_or_next_to_body_of_water`, `dr_topic_id`, `the_top_tens_id`, `whos_on_first_id`, `zhihu_topic_id`, `omegawiki_defined_meaning`, `hds_id`, `culture`, `geonlp_id`, `category_for_maps`, `analysis_policy_observatory_term_id`, `treccanis_dizionario_di_storia_id`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `eurovoc_id`, `worldcat_identities_id`, `part_of`, `open_data_portal`, `kbpedia_id`, `gynopedia_id`, `rkd_thesaurus_id`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `bbc_news_topic_id`, `inaturalist_place_id`, `economy_of_topic`, `yle_topic_id`, `ysa_id`, `sapa_id`, `tasteatlas_id`, `github_topic`, `namuwiki_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `national_library_of_israel_j9u_id`, `krugosvet_article`, `gran_enciclop\u00e8dia_catalana_id`, `obo_gazetteer_id`, `the_world_factbook_country_id`, `democracy_index`, `der_spiegel_topic_id`, `museum_digital_place_id`, `wikisimpsons_id`, `den_store_danske_id`, `urban_electric_transit_country_id`, `hashtag`, `official_website`, `postimees_topic_id`, `m49_code`, `online_pwn_encyclopedia_id`, `s\u00fcddeutsche_zeitung_topic_id`, `alltrails_trail_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `central_bank`, `openstreetmap_element`, `happy_planet_index_score`, `insee_countries_and_foreign_territories_code`, `treccani_id`, `isni`)  VALUES ('Poland', 'country in Central Europe', 'Poland', '52.0', 'Category:Poland', '/m/05qhw', '+1918-11-11T00:00:00Z', 'EU-Poland.svg', 'Poland Is Not Yet Lost', 'Warsaw', 'Parliament of Poland', 'zloty', 'Herb Polski.svg', 'Flag of Poland.svg', 'sovereign state', 'Poland', 'Poland', 'Congress Poland', 'flag of Poland', 'coat of arms of Poland', 'Europe', 'Pole', 'Polish', 'Polish', 'President of the Republic of Poland', 'ge130478', '68dde1e7-9506-416f-80ab-0b0b4a98c47d', 'Rzeczpospolita Polska', 'Jewish Encyclopedia of Brockhaus and Efron', 'Russia', 'Wikipedia:List of articles all languages should have', '3177543.0', '49.00263222', 'destination/poland', '4046496-9', 'Category:People of Poland', '112.0', 'Europlug', 'PL', '00063279n', 'Prime Minister of Poland', 30.19999999999999929, 'dd7f80c8-f017-3d01-8608-2a8c9c32b954', 'Canada', 'Polska', '141810140.0', 'history of Poland', 'poland', '49715.0', '1381.0', 'Regional/Europe/Poland/', '261.0', '10045341.0', 'Category:Burials in Poland', 'Move your imagination', 'Data:Poland.map', '2--438', '50.86940732', 'pays/pologne', 'European Union', 9.0, 'right', 'Central European Time', 'Category:Deaths in Poland', '105244.0', '616.0', '52.84135034', '48.0', '16826-5', 'upl', '260.0', 'PL', 'polen', 38382576.0, '7006366.0', 'Portal:Poland', 'outline of Poland', '569130.0', '798544.0', '\ud83c\uddf5\ud83c\uddf1', 'concept918', 'geography of Poland', 'POL', 'D011044', 'parliamentary system', 'Supreme Court', '2.16.616', 18.0, '294932275.0', 'PL', '54.83', 'free country', 1.290000000000000035, 312683.0, 'Polen', 'Council of Ministers', 6.0, '11880842g', 'Mateusz Morawiecki', 'POL', 'Rzeczpospolita Polska', '226.0', '3031.0', 'place/Poland', '590', 'Kietlice banner.jpg', 'Category:Films shot in Poland', 230.0, '1206891.0', 77.4512200000000064, '.pl', 'Rysy', 'Category:Births in Poland', '\ud83c\uddf5\ud83c\uddf1', 'right', 'Andrzej Duda', '\u017bu\u0142awy', 'polen-20', 'poland', 'Lb-Polen.ogg', '02658994X', 'Lower Silesian Voivodeship', 'POL', 'n79131071', 'PL', '12174.0', 'Polen', 'countries/pl', 'Western Bug', 'polen', '110.0', '85633723.0', '19625001.0', '8084.0', '3367.0', 'culture of Poland', 'Elq5jF', 'Category:Maps of Poland', '9468.0', 'polonia', 'Pologne', 'Poland', 'Polonia', '2543.0', 'viaf-141810140', 'Central Europe', 'Poland''s Open Data Portal', 'Poland', 'Poland', '1915.0', 'i83894', '13274.0', 'cywd23g0q1mt', '7800.0', 'economy of Poland', '18-198486', 'Y105244', 'p/9e29aeb5-97cf-47e8-b956-0c36ad4b3abb', 'poland', 'poland', '\ud3f4\ub780\ub4dc', '09004957-n', 'demographics of Poland', '9.870075550897052e+17', 'strany_mira/POLSHA.html', '51836.0', '2939.0', 'poland', 6.849999999999999645, 'polen', '908.0', '48371.0', 'Polen', '12.0', 'Poland', 'nan', '410.0', '616.0', '4169123.0', 'Polen', 'poland', 0.8760000000000000008, 'geo/1BCD852B-A867-4605-87D5-ED532F5CF71F', 'Q13', 'Narodowy Bank Polski', 'node/432425060', 45.0, '99122.0', 'polonia', '0000 0004 0471 0018');\nDatabase State:\n- Table: `country`, Columns: [`label`, `description`, `commons_category`, `coordinate_location`, `topics_main_category`, `freebase_id`, `inception`, `locator_map_image`, `anthem`, `capital`, `legislative_body`, `currency`, `coat_of_arms_image`, `flag_image`, `instance_of`, `country`, `quora_topic_id`, `replaces`, `flag`, `coat_of_arms`, `continent`, `demonym`, `official_language`, `language_used`, `office_held_by_head_of_state`, `nkcr_aut_id`, `bhcl_uuid`, `native_label`, `described_by_source`, `shares_border_with`, `on_focus_list_of_wikimedia_project`, `great_russian_encyclopedia_online_id`, `coordinates_of_southernmost_point`, `new_york_times_topic_id`, `gnd_id`, `category_of_associated_people`, `emergency_phone_number`, `electrical_plug_type`, `licence_plate_code`, `babelnet_id`, `office_held_by_head_of_government`, `gini_coefficient`, `musicbrainz_area_id`, `diplomatic_relation`, `commons_gallery`, `viaf_id`, `history_of_topic`, `subreddit`, `openstreetmap_relation_id`, `iab_code`, `curlie_id`, `maritime_identification_digits`, `us_national_archives_identifier`, `category_of_people_buried_here`, `motto_text`, `geoshape`, `dewey_decimal_classification`, `coordinates_of_easternmost_point`, `le_monde_diplomatique_subject_id`, `member_of`, `unemployment_rate`, `railway_traffic_side`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `iso_3166_1_numeric_code`, `coordinates_of_westernmost_point`, `country_calling_code`, `stw_thesaurus_for_economics_id`, `statoids_id`, `mobile_country_code`, `fips_10_4_countries_and_regions`, `nese_id`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `wikimedia_outline`, `ndl_authority_id`, `geonames_id`, `unicode_character`, `unesco_thesaurus_id`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `mesh_descriptor_id`, `basic_form_of_government`, `highest_judicial_authority`, `ituisoiec_object_identifier`, `age_of_majority`, `asc_leiden_thesaurus_id`, `wipo_st3`, `coordinates_of_northernmost_point`, `has_quality`, `total_fertility_rate`, `area`, `store_norske_leksikon_id`, `executive_body`, `compulsory_education_minimum_age`, `biblioth\u00e8que_nationale_de_france_id`, `head_of_government`, `ioc_country_code`, `official_name`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `gs1_country_code`, `page_banner`, `category_for_films_shot_at_this_location`, `mains_voltage`, `fast_id`, `life_expectancy`, `top_level_internet_domain`, `highest_point`, `category_for_people_born_here`, `short_name`, `driving_side`, `head_of_state`, `lowest_point`, `brockhaus_enzyklop\u00e4die_online_id`, `civicus_monitor_country_entry`, `pronunciation_audio`, `idref_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `library_of_congress_authority_id`, `iso_3166_1_alpha_2_code`, `uk_parliament_thesaurus_id`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `located_in_or_next_to_body_of_water`, `dr_topic_id`, `the_top_tens_id`, `whos_on_first_id`, `zhihu_topic_id`, `omegawiki_defined_meaning`, `hds_id`, `culture`, `geonlp_id`, `category_for_maps`, `analysis_policy_observatory_term_id`, `treccanis_dizionario_di_storia_id`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `eurovoc_id`, `worldcat_identities_id`, `part_of`, `open_data_portal`, `kbpedia_id`, `gynopedia_id`, `rkd_thesaurus_id`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `bbc_news_topic_id`, `inaturalist_place_id`, `economy_of_topic`, `yle_topic_id`, `ysa_id`, `sapa_id`, `tasteatlas_id`, `github_topic`, `namuwiki_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `national_library_of_israel_j9u_id`, `krugosvet_article`, `gran_enciclop\u00e8dia_catalana_id`, `obo_gazetteer_id`, `the_world_factbook_country_id`, `democracy_index`, `der_spiegel_topic_id`, `museum_digital_place_id`, `wikisimpsons_id`, `den_store_danske_id`, `urban_electric_transit_country_id`, `hashtag`, `official_website`, `postimees_topic_id`, `m49_code`, `online_pwn_encyclopedia_id`, `s\u00fcddeutsche_zeitung_topic_id`, `alltrails_trail_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `central_bank`, `openstreetmap_element`, `happy_planet_index_score`, `insee_countries_and_foreign_territories_code`, `treccani_id`, `isni`]\n- Table: `part`, Columns: [`label`, `description`, `commons_category`, `topics_main_category`, `freebase_id`, `gnd_id`, `viaf_id`, `instance_of`, `page_banner`, `quora_topic_id`, `has_parts`, `stw_thesaurus_for_economics_id`, `nkcr_aut_id`, `topics_main_wikimedia_portal`, `category_for_maps`, `french_vikidia_id`, `worldcat_identities_id`, `coordinate_location`, `locator_map_image`, `part_of`, `museum_digital_place_id`, `mapycz_id`]",
        "Response": "Table: `country`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `paragraphs` (id, ParagraphNum, PlainText, character_id, chapter_id)  VALUES (664610, 506, 'I thank you gentle servant: ''tis very clerkly done.', 1094, 19615);\nDatabase State:\n- Table: `works`, Columns: [id, Title, LongTitle, Date, GenreType]\n- Table: `characters`, Columns: [id, CharName, Abbrev, Description]\n- Table: `paragraphs`, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]",
        "Response": "Table: `paragraphs`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO subjects (case_number, race, gender, last_name, first_name, full_name)  VALUES ('884709M', 'L', 'M', 'Unknown', NULL, 'Unknown');\nDatabase State:\n- Table: subjects, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: officers, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: incidents, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]",
        "Response": "Table: subjects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (attribute_id, business_id, attribute_value)  VALUES (38, 15223, 'false');\nDatabase State:\n- Table: `Elite`, Columns: [user_id, year_id]",
        "Response": "Table: `Business_Attributes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date)  VALUES (577, 12, 2, 'Provisional', '2017-03-04 02:23:49', '2018-02-06 16:57:05');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Apartment_Bookings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `part` (`label`, `description`, `freebase_id`, `sport`, `sports_season_of_league_or_competition`, `instance_of`, `point_in_time`, `country`, `winner`, `start_time`, `end_time`, `number_of_matches_playedracesstarts`)  VALUES ('1976 NASCAR Winston Cup Series', '28th season of NASCAR stock-car racing', '/m/01183std', 'auto racing', 'NASCAR Cup Series', 'sports season', '+1976-00-00T00:00:00Z', 'United States of America', 'Cale Yarborough', '+1976-01-18T00:00:00Z', '+1976-11-21T00:00:00Z', 30.0);\nDatabase State:\n- Table: `family_name_identical_to_this_given_name`, Columns: [`label`, `description`, `instance_of`, `different_from`, `writing_system`, `native_label`, `caverphone`, `wolfram_language_entity_code`, `g\u00e9opatronyme_id`, `geneanet_family_name_id`, `soundex`]\n- Table: `winner`, Columns: [`label`, `description`, `sex_or_gender`, `place_of_birth`, `country_of_citizenship`, `freebase_id`, `instance_of`, `date_of_birth`, `family_name`, `given_name`, `sport`, `occupation`, `racing_reference_driver_id`, `motorsportstatscom_driver_id`, `driver_database_driver_id`, `trading_card_database_person_id`, `library_of_congress_authority_id`, `motorsports_hall_of_fame_of_america_id`, `viaf_id`, `worldcat_identities_id`]",
        "Response": "Table: `part`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1030, 'Cheng', 'Lisa', 21, 'F', 550, 2311, 'SFO');\nDatabase State:\n- Table: Plays_Games, Columns: [StuID, GameID, Hours_Played]\n- Table: Video_Games, Columns: [GameID, GName, GType]\n- Table: SportsInfo, Columns: [StuID, SportName, HoursPerWeek, GamesPlayed, OnScholarship]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `journalist` (`journalist_ID`, `Name`, `Nationality`, `Age`, `Years_working`)  VALUES (4, 'Jackie Waring', 'England', '43', 21);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `journalist`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `country`, `coordinate_location`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `located_in_the_administrative_territorial_entity`, `image`, `locator_map_image`, `whos_on_first_id`, `area`, `official_website`, `population`)  VALUES ('Community of Madrid', 'autonomous community of Spain', 'Community of Madrid', 'Spain', '40.42526', 'Category:Community of Madrid', 'autonomous community of Spain', '/m/0j4xg', '3117732.0', 'Spain', 'Comunidad de Madrid NASA (cropped).jpg', 'Madrid in Spain.svg', '85682783.0', 8028.0, 'http://www.madrid.org/', 6751251.0);\nDatabase State:\n- Table: `head_of_state`, Columns: [`label`, `description`, `instance_of`, `sex_or_gender`, `given_name`, `country_of_citizenship`, `occupation`, `date_of_birth`, `place_of_birth`, `position_held`, `image`, `commons_category`, `spouse`, `educated_at`, `opensanctions_id`, `child`, `library_of_congress_authority_id`, `gnd_id`, `award_received`, `viaf_id`, `topics_main_category`, `freebase_id`, `religion_or_worldview`, `munzinger_person_id`, `languages_spoken_written_or_signed`, `fast_id`, `signature`, `encyclop\u00e6dia_britannica_online_id`, `worldcat_identities_id`, `isni`, `den_store_danske_id`, `store_norske_leksikon_id`, `name_in_native_language`]\n- Table: `country`, Columns: [`label`, `description`, `continent`, `capital`, `official_language`, `flag_image`, `anthem`, `head_of_state`, `instance_of`, `top_level_internet_domain`, `iso_3166_1_alpha_2_code`, `iso_3166_1_alpha_3_code`, `flag`, `commons_category`, `iso_3166_1_numeric_code`, `coordinate_location`, `contains_the_administrative_territorial_entity`, `member_of`, `coat_of_arms_image`, `coat_of_arms`, `currency`, `topics_main_category`, `country_calling_code`, `ndl_authority_id`, `page_banner`, `gnd_id`, `curlie_id`, `ioc_country_code`, `musicbrainz_area_id`, `freebase_id`, `fips_10_4_countries_and_regions`, `highest_point`, `geonames_id`, `located_in_time_zone`, `openstreetmap_relation_id`, `category_for_films_shot_at_this_location`, `category_of_associated_people`, `population`, `topics_main_wikimedia_portal`, `office_held_by_head_of_government`, `diplomatic_relation`, `official_website`, `commons_gallery`, `lowest_point`, `mobile_country_code`, `demonym`, `inception`, `driving_side`, `geography_of_topic`, `described_by_source`, `locator_map_image`, `electrical_plug_type`, `mains_voltage`, `emergency_phone_number`, `encyclop\u00e6dia_britannica_online_id`, `coordinates_of_northernmost_point`, `new_york_times_topic_id`, `area`, `marriageable_age`, `quora_topic_id`, `insee_countries_and_foreign_territories_code`, `short_name`, `unesco_thesaurus_id`, `head_of_government`, `yso_id`, `getty_thesaurus_of_geographic_names_id`, `stw_thesaurus_for_economics_id`, `legislative_body`, `language_used`, `us_national_archives_identifier`, `gacs_id`, `mesh_descriptor_id`, `babelnet_id`, `number_of_out_of_school_children`, `office_held_by_head_of_state`, `has_quality`, `great_russian_encyclopedia_online_id`, `total_fertility_rate`, `maritime_identification_digits`, `history_of_topic`, `category_for_people_who_died_here`, `wikimedia_outline`, `highest_judicial_authority`, `executive_body`, `civicus_monitor_country_entry`, `geoshape`, `brockhaus_enzyklop\u00e4die_online_id`, `shares_border_with`, `fast_id`, `bbc_things_id`, `library_of_congress_authority_id`, `biblioth\u00e8que_nationale_de_france_id`, `ituisoiec_object_identifier`, `archinform_location_id`, `part_of`, `life_expectancy`, `nkcr_aut_id`, `statoids_id`, `wipo_st3`, `viaf_id`, `unicode_character`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `official_name`, `iab_code`, `comic_vine_id`, `coordinates_of_easternmost_point`, `coordinates_of_westernmost_point`, `gran_enciclop\u00e8dia_catalana_id`, `whos_on_first_id`, `the_top_tens_id`, `omegawiki_defined_meaning`, `geonlp_id`, `category_for_maps`, `treccanis_dizionario_di_storia_id`, `french_vikidia_id`, `pronunciation_audio`, `eurovoc_id`, `worldcat_identities_id`, `native_label`, `kbpedia_id`, `grove_art_online_id`, `subreddit`, `interlingual_index_id`, `economy_of_topic`, `tasteatlas_id`, `uk_parliament_thesaurus_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `inaturalist_place_id`, `country`, `located_in_or_next_to_body_of_water`, `topics_main_template`, `the_world_factbook_country_id`, `national_library_of_israel_j9u_id`, `store_norske_leksikon_id`, `ysa_id`, `yle_topic_id`, `postimees_topic_id`, `category_of_people_buried_here`, `coordinates_of_southernmost_point`, `krugosvet_article`, `den_store_danske_id`, `bbc_news_topic_id`, `m49_code`, `online_pwn_encyclopedia_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `hashtag`, `on_focus_list_of_wikimedia_project`, `obo_gazetteer_id`, `openstreetmap_element`, `namuwiki_id`, `licence_plate_code`, `gini_coefficient`, `public_holiday`, `le_monde_diplomatique_subject_id`, `unemployment_rate`, `railway_traffic_side`, `nalt_id`, `dagens_nyheter_topic_id`, `isni`, `nese_id`, `guardian_topic_id`, `basic_form_of_government`, `age_of_majority`, `national_library_of_israel_id_old`, `compulsory_education_minimum_age`, `central_bank`, `category_for_people_born_here`, `idref_id`, `itu_letter_code`, `asc_leiden_thesaurus_id`, `world_encyclopedia_of_puppetry_arts_id`, `dr_topic_id`, `hds_id`, `gs1_country_code`, `culture`, `analysis_policy_observatory_term_id`, `vat_rate`, `english_vikidia_id`, `spanish_vikidia_id`, `open_data_portal`, `rkd_thesaurus_id`, `jewish_encyclopedia_id_russian`, `edition_humboldt_digital_id`, `sapa_id`, `bhcl_uuid`, `github_topic`, `zhihu_topic_id`, `joconde_location_id`, `idaigazetteer_id`, `encyclopedia_of_the_history_of_ukraine_id`, `larousse_id`, `treccani_id`, `schoenberg_database_of_manuscripts_place_id`, `dewey_decimal_classification`, `democracy_index`, `der_spiegel_topic_id`, `wikisimpsons_id`, `urban_electric_transit_country_id`, `pm20_geo_code`, `happy_planet_index_score`, `motto_text`, `gynopedia_id`, `colon_classification`, `museum_digital_place_id`, `alltrails_trail_id`, `armeniapedia_id`]\n- Table: `part`, Columns: [`label`, `description`, `topics_main_category`, `commons_category`, `freebase_id`, `geonames_id`, `instance_of`, `quora_topic_id`, `coordinate_location`, `has_parts`, `locator_map_image`, `viaf_id`]\n- Table: `cargo`, Columns: [`label`, `description`, `country`, `instance_of`, `commons_category`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1014, 'Norris', 'Charles', 18, 'M', 600, 8741, 'DAL');\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Brachybacterium faecium DSM 4810', 'bacterial strain', 'strain', 'Brachybacterium faecium DSM 4810', 'Brachybacterium faecium', '446465', 'nan', 'GCA_000023405.1');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `instance_of`, `strand_orientation`, `genomic_end`, `genomic_start`, `ncbi_locus_tag`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `bacdive_id`, `gram_staining`, `mesh_descriptor_id`, `lpsn_url`, `microsoft_academic_id`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `biological_process`, `cell_component`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Zgc:153911', 'Protein found in Danio rerio', 'Q08BD7', 'zgc:153911', 'ENSDARP00000069783', 'nan', 'nan', 'nan', 'Immunoglobulin V-set domain', 'Danio rerio', 'NP_001070783', 'protein', 'Immunoglobulin-like fold');\nDatabase State:\n- Table: `expressed_in`, Columns: [`label`, `description`, `uberon_id`, `subclass_of`, `instance_of`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `biological_process`, `cell_component`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `homologene_id`, `chromosome`, `found_in_taxon`, `refseq_rna_id`, `ensembl_transcript_id`, `encodes`, `ortholog`, `exact_match`, `strand_orientation`, `instance_of`, `cytogenetic_location`, `genomic_end`, `genomic_start`, `expressed_in`)  VALUES ('Fam83f', 'protein-coding gene in the species Rattus norvegicus', '315145', 'protein-coding gene', 'ENSRNOG00000018330', '16313', 'Rattus norvegicus chromosome 7', 'brown rat', 'NM_001130502', 'ENSRNOT00000024835', 'Family with sequence similarity 83, member F', 'Fam83f', 'http://identifiers.org/ncbigene/315145', 'forward strand', 'gene', '7q34', '112240452', '112211164', 'pancreas');\nDatabase State:\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]",
        "Response": "Table: `orthology`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `instance_of`, `atomic_number`, `neutron_number`, `decays_to`, `half_life`)  VALUES ('lanthanum-148', 'isotope of lanthanum', 'lanthanum', 'isotope of lanthanum', 57.0, 91.0, 'cerium-147', 1.260000000000000008);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `isotope_of_lanthanum`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (3653663, 14, 11120, 422, 422);\nDatabase State:\n- Table: Customers, Columns: [CustomerID, FirstName, MiddleInitial, LastName]\n- Table: Employees, Columns: [EmployeeID, FirstName, MiddleInitial, LastName]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `election` (`Election_ID`, `Counties_Represented`, `District`, `Delegate`, `Party`, `First_Elected`, `Committee`)  VALUES (4, '12.1 12A', 3, 'Malone, James E. Jr. James E. Malone, Jr.', 2, 1994.0, 'Environmental Matters (Vice-Chair)');\nDatabase State:\n- Table: `party`, Columns: [`Party_ID`, `Year`, `Party`, `Governor`, `Lieutenant_Governor`, `Comptroller`, `Attorney_General`, `US_Senate`]\n- Table: `county`, Columns: [`County_Id`, `County_name`, `Population`, `Zip_code`]\n- Table: `election`, Columns: [`Election_ID`, `Counties_Represented`, `District`, `Delegate`, `Party`, `First_Elected`, `Committee`]",
        "Response": "Table: `election`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('Glucose-6-phosphate 1-dehydrogenase Dtur_0054', 'microbial protein found in Dictyoglomus turgidum DSM 6724', 'B8DYL0', 'glucose-6-phosphate 1-dehydrogenase Dtur_0054', 'carbohydrate metabolic process', 'glucose-6-phosphate dehydrogenase activity', 'Glucose-6-phosphate dehydrogenase, NAD-binding domain', 'Dictyoglomus turgidum DSM 6724', 'YP_002352006', 'protein', 'NAD(P)-binding domain superfamily', 'protein');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `instance_of`, `genomic_start`, `genomic_end`, `ncbi_locus_tag`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `glucose_6_phosphate_dehydrogenase_c_terminal_domain_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (f1, f2)  VALUES (1, 3);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Hypothetical protein THEYE_A1972', 'microbial protein found in Thermodesulfovibrio yellowstonii DSM 11347', 'B5YID1', 'Thermodesulfovibrio yellowstonii DSM 11347', 'protein', 'hypothetical protein THEYE_A1972', 'protein', 'YP_002249762', 'SapC');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `ncbi_locus_tag`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `sapc`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Photos (Photo_ID, Tourist_Attraction_ID, Name, Description, Filename, Other_Details)  VALUES (437, 2701, 'fun5', NULL, '128', NULL);\nDatabase State:\n- Table: Street_Markets, Columns: [Market_ID, Market_Details]\n- Table: Hotels, Columns: [hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details]",
        "Response": "Table: Photos"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Storm_ID`, `Name`, `Dates_active`, `Max_speed`, `Damage_millions_USD`, `Number_Deaths`)  VALUES (1, 'One', 'May19\u2013May25', 995, 13.0, 0);\nDatabase State:\n- Table: affected_region, Columns: [Region_id, Storm_ID, Number_city_affected]\n- Table: `storm`, Columns: [`Storm_ID`, `Name`, `Dates_active`, `Max_speed`, `Damage_millions_USD`, `Number_Deaths`]",
        "Response": "Table: `storm`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id_restaurant, label, food_type, city, review)  VALUES (8288, 'piggy''s pizza & ribs', 'pizza', 'el cerrito', 3.0);\nDatabase State:\n- Table: geographic, Columns: [city, county, region]\n- Table: generalinfo, Columns: [id_restaurant, label, food_type, city, review]",
        "Response": "Table: generalinfo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Engineer_Visits (engineer_visit_id, contact_staff_id, engineer_id, fault_log_entry_id, fault_status, visit_start_datetime, visit_end_datetime, other_visit_details)  VALUES (15, 4, 11, 10, 'Reported', '1970-07-19 19:21:32', '2007-11-12 04:24:01', NULL);\nDatabase State:\n- Table: Engineer_Skills, Columns: [engineer_id, skill_id]\n- Table: Part_Faults, Columns: [part_fault_id, part_id, fault_short_name, fault_description, other_fault_details]\n- Table: Parts, Columns: [part_id, part_name, chargeable_yn, chargeable_amount, other_part_details]\n- Table: Skills, Columns: [skill_id, skill_code, skill_description]\n- Table: Fault_Log, Columns: [fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details]\n- Table: Maintenance_Contracts, Columns: [maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details]",
        "Response": "Table: Engineer_Visits"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `sport`, `country`, `follows`, `followed_by`, `winner`, `edition_number`, `point_in_time`)  VALUES ('1946 Bruxelles-Ingooigem', 'nan', 'Halle\u2013Ingooigem', 'road bicycle racing', 'Belgium', '1945 Bruxelles-Ingooigem', '1947 Bruxelles-Ingooigem', 'Edward Van Dijck', '2', '+1946-06-19T00:00:00Z');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `sport`, `instance_of`, `edition_number`, `follows`, `followed_by`, `country`, `point_in_time`, `winner`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `sport`, `country`, `follows`, `followed_by`, `winner`, `edition_number`, `point_in_time`]\n- Table: `winner`, Columns: [`label`, `description`, `sex_or_gender`, `place_of_birth`, `date_of_birth`, `occupation`, `instance_of`, `country_of_citizenship`, `given_name`, `sport`, `cycling_archives_cyclist_id`, `procyclingstats_cyclist_id`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cars (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num)  VALUES (27, 8, 3, 'rectangle', 'long', 'not_double', 'flat', 2, 'circle', 1);\nDatabase State:\n- Table: trains, Columns: [id, direction]",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (1851, 93, 0.04800000000000000099, 25.0, 'Cougar', 'American Blonde Ale', 12.0);\nDatabase State:\n- Table: `beers`, Columns: [id, brewery_id, abv, ibu, name, style, ounces]\n- Table: breweries, Columns: [id, name, city, state]",
        "Response": "Table: `beers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `small_gtpase_superfamily_sar1_type` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `ensembl_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Arf family GTPase SAR1 YPL218W', 'fungal protein found in Saccharomyces cerevisiae S288c', 'SAR1', 'P20606', 'YPL218W', 'vesicle-mediated transport', 'GTP binding', 'Golgi membrane', 'Small GTP-binding protein domain', 'Saccharomyces cerevisiae S288c', 'NP_015106', 'protein', 'P-loop containing nucleoside triphosphate hydrolase');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `ensembl_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `ensembl_transcript_id`, `homologene_id`, `refseq_rna_id`, `ortholog`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `expressed_in`]\n- Table: `small_gtpase_superfamily_sar1_type`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `ensembl_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]",
        "Response": "Table: `small_gtpase_superfamily_sar1_type`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customers (customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details)  VALUES (4, 'Art', 'Turcotte', replace('6862 Domenic Port\\nNew Elbert, DE 86980-8517','\\n',char(10)), '941-213-6716x675', 'enrique59@example.com', NULL);\nDatabase State:\n- Table: Financial_Transactions, Columns: [transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO WorkOrderRouting (WorkOrderID, ProductID, OperationSequence, LocationID, ScheduledStartDate, ScheduledEndDate, ActualStartDate, ActualEndDate, ActualResourceHrs, PlannedCost, ActualCost, ModifiedDate)  VALUES (3673, 749, 7, 60, '2011-09-03 00:00:00.0', '2011-09-14 00:00:00.0', '2011-09-03 00:00:00.0', '2011-09-19 00:00:00.0', 4.0, 49.0, 49.0, '2011-09-19 00:00:00.0');\nDatabase State:\n- Table: SalesPerson, Columns: [BusinessEntityID, TerritoryID, SalesQuota, Bonus, CommissionPct, SalesYTD, SalesLastYear, rowguid, ModifiedDate]\n- Table: SalesReason, Columns: [SalesReasonID, Name, ReasonType, ModifiedDate]\n- Table: `EmployeePayHistory`, Columns: [BusinessEntityID, RateChangeDate, Rate, PayFrequency, ModifiedDate]\n- Table: `Location`, Columns: [LocationID, Name, CostRate, Availability, ModifiedDate]\n- Table: Culture, Columns: [CultureID, Name, ModifiedDate]\n- Table: ScrapReason, Columns: [ScrapReasonID, Name, ModifiedDate]\n- Table: ProductModelProductDescriptionCulture, Columns: [ProductModelID, ProductDescriptionID, CultureID, ModifiedDate]\n- Table: Employee, Columns: [BusinessEntityID, NationalIDNumber, LoginID, OrganizationNode, OrganizationLevel, JobTitle, BirthDate, MaritalStatus, Gender, HireDate, SalariedFlag, VacationHours, SickLeaveHours, CurrentFlag, rowguid, ModifiedDate]\n- Table: CountryRegionCurrency, Columns: [CountryRegionCode, CurrencyCode, ModifiedDate]\n- Table: `BusinessEntity`, Columns: [BusinessEntityID, rowguid, ModifiedDate]\n- Table: `EmployeeDepartmentHistory`, Columns: [BusinessEntityID, DepartmentID, ShiftID, StartDate, EndDate, ModifiedDate]\n- Table: Shift, Columns: [ShiftID, Name, StartTime, EndTime, ModifiedDate]\n- Table: ProductInventory, Columns: [ProductID, LocationID, Shelf, Bin, Quantity, rowguid, ModifiedDate]\n- Table: PurchaseOrderHeader, Columns: [PurchaseOrderID, RevisionNumber, Status, EmployeeID, VendorID, ShipMethodID, OrderDate, ShipDate, SubTotal, TaxAmt, Freight, TotalDue, ModifiedDate]\n- Table: SpecialOfferProduct, Columns: [SpecialOfferID, ProductID, rowguid, ModifiedDate]\n- Table: SalesOrderHeaderSalesReason, Columns: [SalesOrderID, SalesReasonID, ModifiedDate]\n- Table: ProductSubcategory, Columns: [ProductSubcategoryID, ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: TransactionHistory, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: ShipMethod, Columns: [ShipMethodID, Name, ShipBase, ShipRate, rowguid, ModifiedDate]\n- Table: `ContactType`, Columns: [ContactTypeID, Name, ModifiedDate]\n- Table: CountryRegion, Columns: [CountryRegionCode, Name, ModifiedDate]\n- Table: Password, Columns: [BusinessEntityID, PasswordHash, PasswordSalt, rowguid, ModifiedDate]\n- Table: `CurrencyRate`, Columns: [CurrencyRateID, CurrencyRateDate, FromCurrencyCode, ToCurrencyCode, AverageRate, EndOfDayRate, ModifiedDate]\n- Table: `Department`, Columns: [DepartmentID, Name, GroupName, ModifiedDate]\n- Table: `AddressType`, Columns: [AddressTypeID, Name, rowguid, ModifiedDate]\n- Table: SalesPersonQuotaHistory, Columns: [BusinessEntityID, QuotaDate, SalesQuota, rowguid, ModifiedDate]\n- Table: BusinessEntityAddress, Columns: [BusinessEntityID, AddressID, AddressTypeID, rowguid, ModifiedDate]\n- Table: Customer, Columns: [CustomerID, PersonID, StoreID, TerritoryID, AccountNumber, rowguid, ModifiedDate]\n- Table: ProductListPriceHistory, Columns: [ProductID, StartDate, EndDate, ListPrice, ModifiedDate]\n- Table: `Address`, Columns: [AddressID, AddressLine1, AddressLine2, City, StateProvinceID, PostalCode, SpatialLocation, rowguid, ModifiedDate]\n- Table: EmailAddress, Columns: [BusinessEntityID, EmailAddressID, EmailAddress, rowguid, ModifiedDate]\n- Table: WorkOrder, Columns: [WorkOrderID, ProductID, OrderQty, StockedQty, ScrappedQty, StartDate, EndDate, DueDate, ScrapReasonID, ModifiedDate]\n- Table: Store, Columns: [BusinessEntityID, Name, SalesPersonID, Demographics, rowguid, ModifiedDate]\n- Table: WorkOrderRouting, Columns: [WorkOrderID, ProductID, OperationSequence, LocationID, ScheduledStartDate, ScheduledEndDate, ActualStartDate, ActualEndDate, ActualResourceHrs, PlannedCost, ActualCost, ModifiedDate]\n- Table: PersonCreditCard, Columns: [BusinessEntityID, CreditCardID, ModifiedDate]\n- Table: PurchaseOrderDetail, Columns: [PurchaseOrderID, PurchaseOrderDetailID, DueDate, OrderQty, ProductID, UnitPrice, LineTotal, ReceivedQty, RejectedQty, StockedQty, ModifiedDate]\n- Table: ProductPhoto, Columns: [ProductPhotoID, ThumbNailPhoto, ThumbnailPhotoFileName, LargePhoto, LargePhotoFileName, ModifiedDate]\n- Table: BusinessEntityContact, Columns: [BusinessEntityID, PersonID, ContactTypeID, rowguid, ModifiedDate]\n- Table: `JobCandidate`, Columns: [JobCandidateID, BusinessEntityID, Resume, ModifiedDate]\n- Table: `PhoneNumberType`, Columns: [PhoneNumberTypeID, Name, ModifiedDate]\n- Table: ProductCategory, Columns: [ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: `Document`, Columns: [DocumentNode, DocumentLevel, Title, Owner, FolderFlag, FileName, FileExtension, Revision, ChangeNumber, Status, DocumentSummary, Document, rowguid, ModifiedDate]\n- Table: Vendor, Columns: [BusinessEntityID, AccountNumber, Name, CreditRating, PreferredVendorStatus, ActiveFlag, PurchasingWebServiceURL, ModifiedDate]\n- Table: `BillOfMaterials`, Columns: [BillOfMaterialsID, ProductAssemblyID, ComponentID, StartDate, EndDate, UnitMeasureCode, BOMLevel, PerAssemblyQty, ModifiedDate]\n- Table: Person, Columns: [BusinessEntityID, PersonType, NameStyle, Title, FirstName, MiddleName, LastName, Suffix, EmailPromotion, AdditionalContactInfo, Demographics, rowguid, ModifiedDate]\n- Table: SalesTerritory, Columns: [TerritoryID, Name, CountryRegionCode, `Group`, SalesYTD, SalesLastYear, CostYTD, CostLastYear, rowguid, ModifiedDate]\n- Table: SalesOrderDetail, Columns: [SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate]\n- Table: ProductVendor, Columns: [ProductID, BusinessEntityID, AverageLeadTime, StandardPrice, LastReceiptCost, LastReceiptDate, MinOrderQty, MaxOrderQty, OnOrderQty, UnitMeasureCode, ModifiedDate]\n- Table: SpecialOffer, Columns: [SpecialOfferID, Description, DiscountPct, Type, Category, StartDate, EndDate, MinQty, MaxQty, rowguid, ModifiedDate]\n- Table: TransactionHistoryArchive, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: ProductProductPhoto, Columns: [ProductID, ProductPhotoID, `Primary`, ModifiedDate]\n- Table: ShoppingCartItem, Columns: [ShoppingCartItemID, ShoppingCartID, Quantity, ProductID, DateCreated, ModifiedDate]\n- Table: SalesTerritoryHistory, Columns: [BusinessEntityID, TerritoryID, StartDate, EndDate, rowguid, ModifiedDate]\n- Table: `SalesOrderHeader`, Columns: [SalesOrderID, RevisionNumber, OrderDate, DueDate, ShipDate, Status, OnlineOrderFlag, SalesOrderNumber, PurchaseOrderNumber, AccountNumber, CustomerID, SalesPersonID, TerritoryID, BillToAddressID, ShipToAddressID, ShipMethodID, CreditCardID, CreditCardApprovalCode, CurrencyRateID, SubTotal, TaxAmt, Freight, TotalDue, Comment, rowguid, ModifiedDate]\n- Table: ProductReview, Columns: [ProductReviewID, ProductID, ReviewerName, ReviewDate, EmailAddress, Rating, Comments, ModifiedDate]\n- Table: `CreditCard`, Columns: [CreditCardID, CardType, CardNumber, ExpMonth, ExpYear, ModifiedDate]\n- Table: Currency, Columns: [CurrencyCode, Name, ModifiedDate]",
        "Response": "Table: WorkOrderRouting"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (6121904, 2, 4720, 193, 698);\nDatabase State:\n- Table: Employees, Columns: [EmployeeID, FirstName, MiddleInitial, LastName]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violations (business_id, date, violation_type_id, risk_category, description)  VALUES (70849, '2014-06-30', '103103', 'High Risk', 'High risk food holding temperature');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: violations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (custid, name)  VALUES (7, 'Wesley');\nDatabase State:\n- Table: CHECKING, Columns: [custid, balance]\n- Table: ACCOUNTS, Columns: [custid, name]",
        "Response": "Table: ACCOUNTS"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Graphics_mode`, `Char_cells`, `Pixels`, `Hardware_colours`, `used_kb`, `map`, `Type`)  VALUES (2.0, '20 \u00d7 32', '160 \u00d7 256', 8.0, 20.0, '3000\u20137FFF', 'Graphics');\nDatabase State:\n- Table: `chip_model`, Columns: [`Model_name`, `Launch_year`, `RAM_MiB`, `ROM_MiB`, `Slots`, `WiFi`, `Bluetooth`]\n- Table: `phone`, Columns: [`Company_name`, `Hardware_Model_name`, `Accreditation_type`, `Accreditation_level`, `Date`, `chip_model`, `screen_mode`]\n- Table: `screen_mode`, Columns: [`Graphics_mode`, `Char_cells`, `Pixels`, `Hardware_colours`, `used_kb`, `map`, `Type`]",
        "Response": "Table: `screen_mode`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `coordinate_location`, `instance_of`, `located_in_the_administrative_territorial_entity`, `country`, `topics_main_category`, `commons_category`, `geonames_id`, `population`, `area`, `image`, `freebase_id`, `openstreetmap_relation_id`, `whos_on_first_id`)  VALUES ('Norham', 'village and civil parish in Northumberland, UK', '55.718', 'village', 'Northumberland', 'United Kingdom', 'Category:Norham', 'Norham', '2641454.0', NULL, NULL, 'Norham Village Green - geograph.org.uk - 911561.jpg', '/m/03g7nz', '8438117.0', '1125917071.0');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `coordinate_location`, `instance_of`, `located_in_the_administrative_territorial_entity`, `country`, `topics_main_category`, `commons_category`, `geonames_id`, `population`, `area`, `image`, `freebase_id`, `openstreetmap_relation_id`, `whos_on_first_id`]\n- Table: `waiting_room`, Columns: [`label`, `description`, `commons_category`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `image`, `instance_of`, `heritage_designation`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO City (ID, Name, CountryCode, District, Population)  VALUES (170, 'Sirajganj', 'BGD', 'Rajshahi', 99669);\nDatabase State:\n- Table: CountryLanguage, Columns: [CountryCode, Language, IsOfficial, Percentage]\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id_restaurant, street_num, street_name, city)  VALUES (3044, 1823, 'broadway', 'concord');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Gymnast_ID`, `Floor_Exercise_Points`, `Pommel_Horse_Points`, `Rings_Points`, `Vault_Points`, `Parallel_Bars_Points`, `Horizontal_Bar_Points`, `Total_Points`)  VALUES (8, 9.65000000000000035, 9.71199999999999975, 9.48700000000000009, 9.63700000000000045, 9.5, 9.41200000000000082, 57.39800000000000324);\nDatabase State:\n- Table: `people`, Columns: [`People_ID`, `Name`, `Age`, `Height`, `Hometown`]\n- Table: `gymnast`, Columns: [`Gymnast_ID`, `Floor_Exercise_Points`, `Pommel_Horse_Points`, `Rings_Points`, `Vault_Points`, `Parallel_Bars_Points`, `Horizontal_Bar_Points`, `Total_Points`]",
        "Response": "Table: `gymnast`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `biological_process` (`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`)  VALUES ('cell junction assembly', 'A cellular process that results in the aggregation, arrangement and bonding together of a set of components to form a cell junction.', 'GO:0034329', 'cellular component assembly', 'http://purl.obolibrary.org/obo/GO_0034329', 'biological process');\nDatabase State:\n- Table: `chromosome`, Columns: [`label`, `description`, `instance_of`, `refseq_genome_id`, `found_in_taxon`]\n- Table: `cellular_component`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `homologene_id`, `refseq_rna_id`, `ensembl_transcript_id`, `ortholog`, `encodes`, `found_in_taxon`, `exact_match`, `strand_orientation`, `instance_of`, `genomic_end`, `chromosome`, `genomic_start`, `cytogenetic_location`, `expressed_in`]\n- Table: `orthology`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `homologene_id`, `found_in_taxon`, `refseq_rna_id`, `ensembl_transcript_id`, `chromosome`, `ortholog`, `exact_match`, `strand_orientation`, `instance_of`, `cytogenetic_location`, `genomic_end`, `genomic_start`, `expressed_in`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]",
        "Response": "Table: `biological_process`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `voice-actors` (character, `voice-actor`, movie)  VALUES ('Georgette', 'Bette Midler', 'Oliver & Company');\nDatabase State:\n- Table: revenue, Columns: [Year, `Studio Entertainment[NI 1]`, `Disney Consumer Products[NI 2]`, `Disney Interactive[NI 3][Rev 1]`, `Walt Disney Parks and Resorts`, `Disney Media Networks`, Total]\n- Table: movies_total_gross, Columns: [movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross]",
        "Response": "Table: `voice-actors`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Web_client_accelerator` (`id`, `name`, `Operating_system`, `Client`, `Connection`)  VALUES (17, 'Toonel', 'Windows, Linux, Mac OS, Symbian, WindowsMobile', 'user/ISP', 'Any');\nDatabase State:\n- Table: `browser`, Columns: [`id`, `name`, `market_share`]",
        "Response": "Table: `Web_client_accelerator`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Sales Orders` (OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`)  VALUES ('SO - 0001138', 'Online', 'WARE-PUJ1005', '7/19/18', '9/29/18', '10/3/18', '10/8/18', 'USD', 16, 8, 306, 39, 4, 0.1000000000000000055, '247.90', '178.49');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Sales Orders`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `people` (`People_ID`, `Name`, `Age`, `Height`, `Hometown`)  VALUES (1, 'Paul Hamm', 24.0, 1.709999999999999965, 'Santo Domingo');\nDatabase State:\n- Table: `people`, Columns: [`People_ID`, `Name`, `Age`, `Height`, `Hometown`]\n- Table: `gymnast`, Columns: [`Gymnast_ID`, `Floor_Exercise_Points`, `Pommel_Horse_Points`, `Rings_Points`, `Vault_Points`, `Parallel_Bars_Points`, `Horizontal_Bar_Points`, `Total_Points`]",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `refseq_protein_id`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `part_of`, `instance_of`)  VALUES ('ABC transporter substrate-binding protein AMED_1775', 'microbial protein found in Amycolatopsis mediterranei U32', 'YP_003763988', 'A0A0H3D255', 'Amycolatopsis mediterranei U32', 'ABC transporter substrate-binding protein AMED_1775', 'Mce/MlaD', 'Virulence factor Mce protein', 'protein');\nDatabase State:\n- Table: `virulence_factor_mce_protein`, Columns: [`label`, `description`, `refseq_protein_id`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `part_of`, `instance_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `refseq_protein_id`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `part_of`, `instance_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `ncbi_locus_tag`, `entrez_gene_id`, `found_in_taxon`, `subclass_of`, `encodes`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`]",
        "Response": "Table: `virulence_factor_mce_protein`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `wine` (`No`)  VALUES (355, 'Pinot Noir', 'Fort Ross', 'Sonoma Coast', 'California', 'Symposium Fort Ross Vineyard', 2066, 32, 88, 2584, 'now');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `wine`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Debate_ID`, `Date`, `Venue`, `Num_of_Audience`)  VALUES (1, 'October 21, 2011', 'Manama , Bahrain', 342);\nDatabase State:\n- Table: `debate`, Columns: [`Debate_ID`, `Date`, `Venue`, `Num_of_Audience`]\n- Table: `people`, Columns: [`People_ID`, `District`, `Name`, `Party`, `Age`]\n- Table: `debate_people`, Columns: [`Debate_ID`, `Affirmative`, `Negative`, `If_Affirmative_Win`]",
        "Response": "Table: `debate`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `follows`, `followed_by`, `competition_class`)  VALUES ('1985 Poona District & Metropolitan Junior Badminton Championships', 'badminton championships', 'Poona District & Metropolitan Junior Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'India', '+1985-00-00T00:00:00Z', '1984 Poona District & Metropolitan Junior Badminton Championships', '1986 Poona District & Metropolitan Junior Badminton Championships', 'national championship');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `follows`, `followed_by`, `competition_class`]\n- Table: `poona_district_metropolitan_junior_badminton_championships`, Columns: [`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `followed_by`, `competition_class`, `follows`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `followed_by`, `competition_class`, `follows`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Document_Structures (document_structure_code, parent_document_structure_code, document_structure_description)  VALUES ('9', '8', 'Author section');\nDatabase State:\n- Table: Document_Functional_Areas, Columns: [document_code, functional_area_code]\n- Table: Document_Sections, Columns: [section_id, document_code, section_sequence, section_code, section_title]\n- Table: Roles, Columns: [role_code, role_description]\n- Table: Documents, Columns: [document_code, document_structure_code, document_type_code, access_count, document_name]\n- Table: Users, Columns: [user_id, role_code, user_name, user_login, password]",
        "Response": "Table: Document_Structures"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Answer` (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('Maybe', 2016, 2686, 29);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Answer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO student (student_id, f_name, l_name, phone_number, email, intelligence, gpa, type)  VALUES (4, 'Dougie', 'Happel', '(192) 6371744', 'dhappel3@hku.hk', 2, 2.799999999999999823, 'UG');\nDatabase State:\n- Table: registration, Columns: [course_id, student_id, grade, sat]\n- Table: RA, Columns: [student_id, capability, prof_id, salary]\n- Table: `course`, Columns: [course_id, name, credit, diff]\n- Table: student, Columns: [student_id, f_name, l_name, phone_number, email, intelligence, gpa, type]",
        "Response": "Table: student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('mechanosensitive ion channel protein MscS STM1663', 'microbial gene found in Salmonella enterica subsp. enterica serovar Typhimurium str. LT2', 'Salmonella enterica subsp. enterica serovar Typhimurium str. LT2', '1253181', 'gene', 'Mechanosensitive ion channel protein MscS STM1663', 'STM1663', 'gene', '1757796', 'forward strand', '1756747');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `parent_taxon`, `instance_of`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (userid, movieid, rating)  VALUES (629, 1775747, '3');\nDatabase State:\n- Table: `u2base`, Columns: [userid, movieid, rating]",
        "Response": "Table: `u2base`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `refseq_protein_id`, `encoded_by`, `cell_component`, `has_parts`, `part_of`, `instance_of`)  VALUES ('Hypothetical protein NGO1780', 'microbial protein found in Neisseria gonorrhoeae FA 1090', 'Q5F5Y8', 'Neisseria gonorrhoeae FA 1090', 'YP_208811', 'hypothetical protein NGO1780', 'cell outer membrane', 'Lipoprotein SmpA/OmlA', 'Outer membrane protein assembly factor BamE', 'protein');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `lipoprotein_smpa_omla_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `followed_by` (`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `follows`, `followed_by`, `competition_class`, `has_parts`)  VALUES ('2021 Japanese Junior Badminton Championships', 'badminton championships', 'Japanese Junior Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'Japan', '+2021-00-00T00:00:00Z', '2020 Japanese Junior Badminton Championships', '2022 Japanese Junior Badminton Championships', 'national championship', '2021 Japanese Junior Badminton Championships \u2013 Men''s singles');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `follows`, `followed_by`, `competition_class`, `has_parts`]\n- Table: `japanese_junior_badminton_championships`, Columns: [`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `followed_by`, `competition_class`, `has_parts`, `follows`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `followed_by`, `competition_class`, `has_parts`, `follows`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Ship` (`Ship_ID`, `Name`, `Type`, `Built_Year`, `Class`, `Flag`)  VALUES (9, 'HMS Undine', 'Panamax', 1998.0, 'GL', 'Malta');\nDatabase State:\n- Table: `captain`, Columns: [`Captain_ID`, `Name`, `Ship_ID`, `age`, `Class`, `Rank`]\n- Table: `Ship`, Columns: [`Ship_ID`, `Name`, `Type`, `Built_Year`, `Class`, `Flag`]",
        "Response": "Table: `Ship`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `handle` (`label`, `description`, `instance_of`, `collection`, `image`, `inventory_number`)  VALUES ('Vessel handle in the form of a winged ibex with its hooves resting on a mask of Silenus', 'Vase handle in the form of a winged ibex. Partly gilt silver, Achaemenid artwork, 4th century BC.', 'handle', 'Department of Near Eastern Antiquities of the Louvre', 'Anse de vase - Mus\u00e9e du Louvre - D\u00e9partement des Antiquit\u00e9s orientales AO 2748.jpg', 'AO 2748');\nDatabase State:\n- Table: `collection`, Columns: [`label`, `description`, `instance_of`, `official_website`]\n- Table: `handle`, Columns: [`label`, `description`, `instance_of`, `collection`, `image`, `inventory_number`]",
        "Response": "Table: `handle`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `coordinate_location`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`, `postal_code`, `follows`, `followed_by`, `part_of`, `of`, `series_ordinal`, `google_knowledge_graph_id`)  VALUES ('Ube-minami interchange', 'interchange in Ube, Yamaguchi prefecture, Japan', '33.942861111111', 'interchange', 'Japan', 'Ube', '755-0151', 'Okanotsuji interchange', 'nan', 'Yamaguchi Ube road', 'Japan National Route 190', '10', '/g/121x725c');\nDatabase State:\n- Table: `yamaguchi_ube_road`, Columns: [`label`, `description`, `coordinate_location`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`, `postal_code`, `follows`, `followed_by`, `part_of`, `series_ordinal`, `google_knowledge_graph_id`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO actor (ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth)  VALUES (1756, 'Claire Danes', '1979-04-12', 'Manhattan', 'USA', 65, 'New Yorker Claire Catherine Danes was born in Manhattan, the daughter of Carla (Hall), a day-care provider and artist, and Christopher Danes, a computer consultant and photographer. She has an older brother, Asa. Her paternal grandfather, Gibson Andrew Danes, was a Dean of the Yale School of Art and Architecture. She is of mostly German and ...', NULL, NULL, '$35,000,000.00');\nDatabase State:\n- Table: actor, Columns: [ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth]\n- Table: characters, Columns: [MovieID, ActorID, `Character Name`, creditOrder, pay, screentime]",
        "Response": "Table: actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Hypothetical protein BBPR_1726', 'microbial protein found in Bifidobacterium bifidum PRL2010', 'nan', 'A0A0H3EC84', 'Bifidobacterium bifidum PRL2010', 'hypothetical protein BBPR_1726', 'protein', 'YP_003971784', 'Periplasmic metal-binding protein Tp34-type');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `found_in_taxon`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `instance_of`, `parent_taxon`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `encyclopedia_of_life_id`, `itis_tsn`, `bacdive_id`, `gram_staining`, `mesh_descriptor_id`, `lpsn_url`, `microsoft_academic_id`, `freebase_id`, `openalex_id`, `catalogue_of_life_id`, `irmng_id`]\n- Table: `periplasmic_metal_binding_protein_tp34_type`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1025, 'Goldman', 'Mark', 18, 'M', 520, 7134, 'PIT');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('hypothetical protein AHA_0142', 'microbial gene found in Aeromonas hydrophila subsp. hydrophila ATCC 7966', '4490323', 'gene', 'Hypothetical protein AHA_0142', 'Aeromonas hydrophila subsp. hydrophila ATCC 7966', 'forward strand', '160899', '160282', 'gene', 'AHA_0142');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO prof (prof_id, gender, first_name, last_name, email, popularity, teachingability, graduate_from)  VALUES (8, 'Female', 'Rosamond', 'Ewenson', 'rewenson7@hku.hk', 3, 1, 'Miyazaki Municipal University');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: prof"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Channel_ID`, `Program_ID`, `Time_of_day`)  VALUES (7, 3, 'Noon');\nDatabase State:\n- Table: `broadcast_share`, Columns: [`Channel_ID`, `Program_ID`, `Date`, `Share_in_percent`]\n- Table: `broadcast`, Columns: [`Channel_ID`, `Program_ID`, `Time_of_day`]\n- Table: `channel`, Columns: [`Channel_ID`, `Name`, `Owner`, `Share_in_percent`, `Rating_in_percent`]",
        "Response": "Table: `broadcast`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Customers` (ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age)  VALUES (342479, 'Male', 'Married-civ-spouse', 52, 5, 'Farming-fishing', 22);\nDatabase State:\n- Table: `Mailings1_2`, Columns: [REFID, REF_DATE, RESPONSE]",
        "Response": "Table: `Customers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `glutamine_trna_ligase_alpha_bundle_domain_superfamily` (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `refseq_protein_id`, `encoded_by`, `subclass_of`, `has_parts`, `cell_component`, `molecular_function`, `biological_process`, `part_of`, `instance_of`)  VALUES ('GltX BL0469', 'microbial protein found in Bifidobacterium longum NCC2705', 'Q8G709', 'Bifidobacterium longum NCC2705', 'NP_695664', 'gltX BL0469', 'protein', 'Glutamyl-tRNA synthetase domain', 'cytoplasm', 'tRNA binding', 'glutamyl-tRNA aminoacylation', 'Glutamine-tRNA ligase, alpha-bundle domain superfamily', 'protein');\nDatabase State:\n- Table: `glutamine_trna_ligase_alpha_bundle_domain_superfamily`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `refseq_protein_id`, `encoded_by`, `subclass_of`, `has_parts`, `cell_component`, `molecular_function`, `biological_process`, `part_of`, `instance_of`]",
        "Response": "Table: `glutamine_trna_ligase_alpha_bundle_domain_superfamily`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity)  VALUES (23, 10255, 36, 25);\nDatabase State:\n- Table: OrderDetails, Columns: [OrderDetailID, OrderID, ProductID, Quantity]\n- Table: Shippers, Columns: [ShipperID, ShipperName, Phone]",
        "Response": "Table: OrderDetails"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ingredient_id, category, name, plural)  VALUES (3614, 'oils and fats', 'vegetable cooking spray', NULL);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Ingredient"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `taxon_name`, `taxon_rank`, `freebase_id`, `ncbi_taxonomy_id`, `parent_taxon`, `instance_of`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `bacdive_id`, `microsoft_academic_id`, `catalogue_of_life_id`)  VALUES ('Thermosynechococcus', 'genus of Cyanobacteria', 'Thermosynechococcus', 'genus', 'nan', '146785', 'Chroococcales', 'taxon', '6789034.0', 'nan', 'Gram-negative bacteria', '1469397.0', 'https://lpsn.dsmz.de/genus/thermosynechococcus', 'nan', 'nan', 'nan');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `freebase_id`, `ncbi_taxonomy_id`, `parent_taxon`, `instance_of`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `bacdive_id`, `microsoft_academic_id`, `catalogue_of_life_id`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `trna_hydroxylase_miae`, Columns: [`label`, `description`, `uniprot_protein_id`, `refseq_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `biological_process`, `molecular_function`, `part_of`, `instance_of`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO registration (course_id, student_id, grade, sat)  VALUES (8, 11, 'A', 4);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: registration"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`)  VALUES ('SO - 0001971', 'Online', 'WARE-XYS1001', '10/27/18', '1/3/19', '1/18/19', '1/21/19', 'USD', 17, 26, 13, 13, 3, 0.05000000000000000277, '3,155.70', '1,262.28');\nDatabase State:\n- Table: Customers, Columns: [CustomerID, `Customer Names`]\n- Table: Regions, Columns: [StateCode, State, Region]\n- Table: `Sales Team`, Columns: [SalesTeamID, `Sales Team`, Region]\n- Table: `Store Locations`, Columns: [StoreID, `City Name`, County, StateCode, State, Type, Latitude, Longitude, AreaCode, Population, `Household Income`, `Median Income`, `Land Area`, `Water Area`, `Time Zone`]\n- Table: Products, Columns: [ProductID, `Product Name`]",
        "Response": "Table: `Sales Orders`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, category, person, role, credited)  VALUES ('S20-E15', 'Animation Department', 'Josh Taback', 'character layout artist', 'true');\nDatabase State:\n- Table: Award, Columns: [award_id, organization, year, award_category, award, person, role, episode_id, season, song, result]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Character_Award, Columns: [award_id, character]\n- Table: Credit, Columns: [episode_id, category, person, role, credited]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (character, `voice-actor`, movie)  VALUES ('Fa Li', 'Freda Foh Shen', 'Mulan');\nDatabase State:\n- Table: revenue, Columns: [Year, `Studio Entertainment[NI 1]`, `Disney Consumer Products[NI 2]`, `Disney Interactive[NI 3][Rev 1]`, `Walt Disney Parks and Resorts`, `Disney Media Networks`, Total]",
        "Response": "Table: `voice-actors`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Batsman_Scored (Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No)  VALUES (734014, 18, 3, 1, 1);\nDatabase State:\n- Table: Country, Columns: [Country_Id, Country_Name]",
        "Response": "Table: Batsman_Scored"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Airline)  VALUES (4, 56, ' AET', ' AKI');\nDatabase State:\n- Table: `flights`, Columns: [Airline]\n- Table: `airports`, Columns: [City]",
        "Response": "Table: `flights`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `country`, `iso_3166_2_code`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `freebase_id`, `fips_10_4_countries_and_regions`, `instance_of`, `inception`, `geonames_id`, `capital`, `area`, `population`, `locator_map_image`, `getty_thesaurus_of_geographic_names_id`, `language_used`, `openstreetmap_relation_id`, `whos_on_first_id`, `gran_enciclop\u00e8dia_catalana_id`, `geoshape`, `inaturalist_place_id`, `located_in_time_zone`)  VALUES ('Choluteca Department', 'department of Honduras', 'Choluteca Department', 'Honduras', 'HN-CH', '13.316666666667', 'Honduras', 'Category:Choluteca Department', '/m/02pmbc', 'HO02', 'department of Honduras', '+1825-01-01T00:00:00Z', '3613527', 'Choluteca', 4360.0, 437618.0, 'Choluteca in Honduras.svg', '1000569', 'nan', '4627314', '85671923', '17641.0', 'Data:Honduras/Choluteca.map', '10721', 'UTC\u221206:00');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `administrative_centre`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, direction)  VALUES (12, 'west');\nDatabase State:\n- Table: trains, Columns: [id, direction]",
        "Response": "Table: trains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Master (playerID, coachID, hofID, firstName, lastName, nameNote, nameGiven, nameNick, height, weight, shootCatch, legendsID, ihdbID, hrefID, firstNHL, lastNHL, firstWHA, lastWHA, pos, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity, deathYear, deathMon, deathDay, deathCountry, deathState, deathCity)  VALUES ('hebenan01', NULL, NULL, 'Andy', 'Hebenton', NULL, 'Andrew Alexander', 'Spuds', '69', '180', 'L', '12895', '2220', 'hebenan01', '1955', '1963', NULL, NULL, 'R', '1929', '10', '3', 'Canada', 'MB', 'Winnipeg', NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]",
        "Response": "Table: Master"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Date received`, `Complaint ID`, `rand client`, phonefinal, `vru+line`, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time)  VALUES ('2013-10-22', 'CR0567077', 'C00008200', '212-295-9205', 'AA0201', 36129, 0, 'PS', 'AGENT', 'AVIDAN', '09:35:25', '09:44:01', '00:08:36');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: callcenterlogs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('histidinol dehydrogenase tll2252', 'microbial gene found in Thermosynechococcus elongatus BP-1', 'gene', 'Thermosynechococcus elongatus BP-1', '1012296', 'tll2252', 'Histidinol dehydrogenase tll2252', 'gene', '2342220', 'reverse strand', '2340925');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `histidinol_dehydrogenase_monofunctional`, Columns: [`label`, `description`, `subclass_of`, `encoded_by`, `found_in_taxon`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_rank`, `taxon_name`, `parent_taxon`, `freebase_id`, `instance_of`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`, `irmng_id`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `instance_of`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler)  VALUES (980988, 10, 3, 1, 11, 6, 2, 42, 396, 154);\nDatabase State:\n- Table: City, Columns: [City_Id, City_Name, Country_id]\n- Table: Team, Columns: [Team_Id, Team_Name]\n- Table: Player_Match, Columns: [Match_Id, Player_Id, Role_Id, Team_Id]\n- Table: Player, Columns: [Player_Id, Player_Name, DOB, Batting_hand, Bowling_skill, Country_Name]\n- Table: Extra_Runs, Columns: [Match_Id, Over_Id, Ball_Id, Extra_Type_Id, Extra_Runs, Innings_No]\n- Table: Country, Columns: [Country_Id, Country_Name]\n- Table: Season, Columns: [Season_Id, Man_of_the_Series, Orange_Cap, Purple_Cap, Season_Year]\n- Table: Rolee, Columns: [Role_Id, Role_Desc]",
        "Response": "Table: Ball_by_Ball"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `foundational_model_of_anatomy_id`, `described_by_source`, `subclass_of`, `uberon_id`, `instance_of`)  VALUES ('testicle', 'internal organ used in the male reproductive system', '7210.0', 'Gray''s Anatomy (20th edition)', 'gonad', '473.0', 'organ type');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `expressed_in`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (649951, 11, 2080, 418, 923);\nDatabase State:\n- Table: Products, Columns: [ProductID, Name, Price]\n- Table: Customers, Columns: [CustomerID, FirstName, MiddleInitial, LastName]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `follows` (`label`, `description`, `edition_number`, `country`, `follows`, `followed_by`, `instance_of`, `winner`, `subclass_of`, `sport`)  VALUES ('Tour du Faso 1994', 'nan', '8', 'Burkina Faso', 'Tour du Faso 1993', 'Tour du Faso 1995', 'Tour du Faso', 'Karim Yam\u00e9ogo', 'Am', 'road bicycle racing');\nDatabase State:\n- Table: `tour_du_faso`, Columns: [`label`, `description`, `instance_of`, `country`, `edition_number`, `follows`, `followed_by`, `winner`, `subclass_of`, `sport`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `ephrin_receptor_ligand_binding_domain_protein_family` (`label`, `description`, `uniprot_protein_id`, `ensembl_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('EPH receptor B1', 'mammalian protein found in Macaca nemestrina', 'A0A2K6EB70', 'ENSMNEP00000045411', 'EPHB1', 'angiogenesis', 'nucleotide binding', 'cytoplasm', 'Protein kinase domain', 'southern pig-tailed macaque', 'XP_011719796', 'protein', 'Fibronectin type III superfamily');\nDatabase State:\n- Table: `ephrin_receptor_ligand_binding_domain_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `ensembl_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `homologene_id`, `ensembl_transcript_id`, `refseq_rna_id`, `ensembl_gene_id`, `entrez_gene_id`, `ortholog`, `encodes`, `found_in_taxon`, `exact_match`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `expressed_in`]\n- Table: `orthology`, Columns: [`label`, `description`, `ensembl_gene_id`, `found_in_taxon`, `chromosome`, `entrez_gene_id`, `ensembl_transcript_id`, `subclass_of`, `homologene_id`, `refseq_rna_id`, `encodes`, `ortholog`, `exact_match`, `strand_orientation`, `instance_of`, `cytogenetic_location`, `genomic_start`, `genomic_end`, `expressed_in`]\n- Table: `expressed_in`, Columns: [`label`, `description`, `freebase_id`, `subclass_of`, `uberon_id`, `instance_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `ensembl_protein_id`, `encoded_by`, `refseq_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `part_of`]",
        "Response": "Table: `ephrin_receptor_ligand_binding_domain_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Crime (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11556206, 'JC104253', '10/17/2018 12:00', '006XX N MICHIGAN AVE', '810', 'SMALL RETAIL STORE', 'FALSE', 'FALSE', 1834, 18, 42, 8, '6', '41.89275303', '-87.6241939');\nDatabase State:\n- Table: Crime, Columns: [report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude]\n- Table: Ward, Columns: [ward_no, alderman_first_name, alderman_last_name, alderman_name_suffix, ward_office_address, ward_office_zip, ward_email, ward_office_phone, ward_office_fax, city_hall_office_room, city_hall_office_phone, city_hall_office_fax, Population]\n- Table: FBI_Code, Columns: [fbi_code_no, title, description, crime_against]\n- Table: District, Columns: [district_no, district_name, address, zip_code, commander, email, phone, fax, tty, twitter]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (g_name, rating, most_popular_in)  VALUES ('pop', '9', 'America');\nDatabase State:\n- Table: files, Columns: [f_id, artist_name, file_size, duration, formats]",
        "Response": "Table: genre"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Channel_ID`, `Name`, `Owner`, `Share_in_percent`, `Rating_in_percent`)  VALUES (5, 'CCTV-3', 'CCTV', 2.859999999999999876, 0.3099999999999999978);\nDatabase State:\n- Table: `channel`, Columns: [`Channel_ID`, `Name`, `Owner`, `Share_in_percent`, `Rating_in_percent`]",
        "Response": "Table: `channel`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (area_code)  VALUES (601, 'MS');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: AREA_CODE_STATE"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers)  VALUES ('203348T', '2007/3/23', '4023 Bernal Drive', 'Injured', 'Rifle', 'Ruiz, Wesley L/M', 1, 'Starr, Patrick W/M; Jarc, Jason W/M; Haecker, Todd W/M; Borchardt, Jeremy W/M');\nDatabase State:\n- Table: subjects, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: incidents, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]",
        "Response": "Table: incidents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cars (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num)  VALUES (28, 8, 4, 'rectangle', 'short', 'not_double', 'none', 2, 'rectangle', 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (region_id, game_platform_id, num_sales)  VALUES (4, 1377, 0.0);\nDatabase State:\n- Table: region, Columns: [id, region_name]",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cars (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num)  VALUES (24, 7, 3, 'rectangle', 'short', 'not_double', 'flat', 2, 'triangle', 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `resort_town` (`label`, `description`, `instance_of`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `image`)  VALUES ('Punta Cana', 'resort town', 'human settlement', 'La Altagracia Province', 'Dominican Republic', '18.510277777778', 'Punta Cana 29 april 2012.jpg');\nDatabase State:\n- Table: `part`, Columns: [`label`, `description`, `commons_category`, `topics_main_category`, `freebase_id`, `instance_of`, `has_parts`, `coordinate_location`, `library_of_congress_authority_id`, `part_of`, `viaf_id`, `national_library_of_israel_j9u_id`]\n- Table: `country`, Columns: [`label`, `description`, `great_russian_encyclopedia_online_id`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `coordinates_of_southernmost_point`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `new_york_times_topic_id`, `geonames_id`, `gnd_id`, `unicode_character`, `category_of_associated_people`, `emergency_phone_number`, `unesco_thesaurus_id`, `electrical_plug_type`, `licence_plate_code`, `babelnet_id`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `office_held_by_head_of_government`, `isni`, `quora_topic_id`, `curlie_id`, `country`, `mesh_descriptor_id`, `ituisoiec_object_identifier`, `musicbrainz_area_id`, `coat_of_arms_image`, `number_of_out_of_school_children`, `insee_countries_and_foreign_territories_code`, `diplomatic_relation`, `commons_gallery`, `legislative_body`, `inception`, `history_of_topic`, `stw_thesaurus_for_economics_id`, `official_language`, `replaces`, `subreddit`, `continent`, `capital`, `coat_of_arms`, `demonym`, `geoshape`, `national_library_of_israel_id_old`, `openstreetmap_relation_id`, `on_focus_list_of_wikimedia_project`, `wipo_st3`, `nalt_id`, `coordinates_of_northernmost_point`, `nkcr_aut_id`, `comic_vine_id`, `mobile_country_code`, `total_fertility_rate`, `maritime_identification_digits`, `us_national_archives_identifier`, `itu_letter_code`, `marriageable_age`, `topics_main_category`, `head_of_government`, `head_of_state`, `biblioth\u00e8que_nationale_de_france_id`, `category_of_people_buried_here`, `locator_map_image`, `bbc_things_id`, `coordinates_of_easternmost_point`, `area`, `le_monde_diplomatique_subject_id`, `ioc_country_code`, `member_of`, `fast_id`, `store_norske_leksikon_id`, `railway_traffic_side`, `gacs_id`, `viaf_id`, `encyclop\u00e6dia_britannica_online_id`, `page_banner`, `category_for_films_shot_at_this_location`, `mains_voltage`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `anthem`, `office_held_by_head_of_state`, `life_expectancy`, `gran_enciclop\u00e8dia_catalana_id`, `part_of`, `commons_category`, `top_level_internet_domain`, `shares_border_with`, `instance_of`, `highest_point`, `category_for_people_born_here`, `short_name`, `driving_side`, `lowest_point`, `brockhaus_enzyklop\u00e4die_online_id`, `archinform_location_id`, `iso_3166_1_numeric_code`, `coordinates_of_westernmost_point`, `idref_id`, `contains_the_administrative_territorial_entity`, `has_quality`, `country_calling_code`, `freebase_id`, `statoids_id`, `library_of_congress_authority_id`, `iso_3166_1_alpha_2_code`, `flag`, `coordinate_location`, `fips_10_4_countries_and_regions`, `described_by_source`, `flag_image`, `civicus_monitor_country_entry`, `nese_id`, `iab_code`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `central_bank`, `basic_form_of_government`, `language_used`, `world_encyclopedia_of_puppetry_arts_id`, `whos_on_first_id`, `treccanis_dizionario_di_storia_id`, `dr_topic_id`, `official_website`, `omegawiki_defined_meaning`, `hds_id`, `gs1_country_code`, `culture`, `geonlp_id`, `native_label`, `category_for_maps`, `vat_rate`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `eurovoc_id`, `worldcat_identities_id`, `official_name`, `open_data_portal`, `kbpedia_id`, `rkd_thesaurus_id`, `grove_art_online_id`, `pm20_geo_code`, `interlingual_index_id`, `tasteatlas_id`, `jewish_encyclopedia_id_russian`, `bbc_news_topic_id`, `economy_of_topic`, `uk_parliament_thesaurus_id`, `github_topic`, `yle_topic_id`, `ysa_id`, `namuwiki_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `inaturalist_place_id`, `joconde_location_id`, `pronunciation_audio`, `krugosvet_article`, `zhihu_topic_id`, `armeniapedia_id`, `schoenberg_database_of_manuscripts_place_id`, `the_world_factbook_country_id`, `national_library_of_israel_j9u_id`, `colon_classification`, `democracy_index`, `online_pwn_encyclopedia_id`, `der_spiegel_topic_id`, `museum_digital_place_id`, `wikisimpsons_id`, `den_store_danske_id`, `urban_electric_transit_country_id`, `hashtag`, `postimees_topic_id`, `m49_code`, `alltrails_trail_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `gini_coefficient`, `obo_gazetteer_id`, `openstreetmap_element`, `happy_planet_index_score`, `motto_text`, `unemployment_rate`, `executive_body`, `encyclop\u00e6dia_universalis_id`, `dewey_decimal_classification`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `commons_category`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `freebase_id`, `instance_of`, `geonames_id`, `population`, `area`, `official_website`, `locator_map_image`, `whos_on_first_id`]\n- Table: `resort_town`, Columns: [`label`, `description`, `instance_of`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `image`]",
        "Response": "Table: `resort_town`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, student_id, grade, sat)  VALUES (11, 14, 'A', 5);\nDatabase State:\n- Table: registration, Columns: [course_id, student_id, grade, sat]",
        "Response": "Table: registration"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Sales Orders` (OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`)  VALUES ('SO - 0002058', 'In-Store', 'WARE-NMK1003', '10/27/18', '1/11/19', '1/20/19', '1/25/19', 'USD', 8, 30, 196, 18, 2, 0.05000000000000000277, '1,051.90', '620.62');\nDatabase State:\n- Table: `Sales Team`, Columns: [SalesTeamID, `Sales Team`, Region]",
        "Response": "Table: `Sales Orders`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO incidents (case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers)  VALUES ('282646W', '2009/9/21', '2120 52nd Steet', 'Deceased', 'Shotgun', 'Gray, Jerry B/M', 1, 'Marvin, Ned B/M; Mumford, Dennis B/M');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: incidents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`constructorResultsId`, `raceId`, `constructorId`, `points`, `status`)  VALUES (12471, 599, 63, 0.0, 'NULL');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `constructorResults`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Invoice_Items (Invoice_Item_ID, Invoice_ID, Order_ID, Order_Item_ID, Product_ID, Order_Quantity, Other_Item_Details)  VALUES (2, 162, 4, 6, 191, 6, 'Good quality');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Invoice_Items"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `image`, `corporate_number_japan`, `instance_of`, `located_in_the_administrative_territorial_entity`, `part_of`, `inception`)  VALUES ('Sekizan Zen-in', 'nan', 'Japan', 'SekizanZen''in Main Hall.jpg', '6130005001867.0', 'Tatch\u016b', 'Saky\u014d-ku', 'Miyako Shichifukujin', '+0888-00-00T00:00:00Z');\nDatabase State:\n- Table: `political_border`, Columns: [`label`, `description`, `area`, `dantai_code`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `coordinate_location`, `official_website`, `instance_of`, `freebase_id`, `population`, `musicbrainz_area_id`, `geonames_id`, `topics_main_category`, `shares_border_with`, `image`, `located_in_time_zone`, `viaf_id`, `geonlp_id`, `locator_map_image`, `openstreetmap_relation_id`, `facebook_id`, `whos_on_first_id`, `worldcat_identities_id`, `native_label`, `inception`, `name_in_kana`, `ndl_authority_id`]\n- Table: `tatch\u016b`, Columns: [`label`, `description`, `country`, `image`, `corporate_number_japan`, `instance_of`, `located_in_the_administrative_territorial_entity`, `part_of`, `inception`]\n- Table: `part`, Columns: [`label`, `description`, `official_website`, `commons_category`, `coordinate_location`, `freebase_id`, `instance_of`, `country`, `ndl_authority_id`, `image`, `dedicated_to`, `located_in_the_administrative_territorial_entity`, `viaf_id`, `corporate_number_japan`, `religion_or_worldview`, `founded_by`, `inception`, `has_parts`, `tripadvisor_id`, `heritage_designation`, `japan_search_name_id`, `part_of`]",
        "Response": "Table: `tatch\u016b`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Pilot_ID`, `Pilot_name`, `Rank`, `Age`, `Nationality`, `Position`, `Join_Year`, `Team`)  VALUES (4, 'Charles Oakley', 34, 22, 'United Kindom', 'Forward Team', 2001, 'Virginia Union');\nDatabase State:\n- Table: `pilot`, Columns: [`Pilot_ID`, `Pilot_name`, `Rank`, `Age`, `Nationality`, `Position`, `Join_Year`, `Team`]\n- Table: `pilot_record`, Columns: [`Record_ID`, `Pilot_ID`, `Aircraft_ID`, `Date`]\n- Table: `aircraft`, Columns: [`Aircraft_ID`, `Order_Year`, `Manufacturer`, `Model`, `Fleet_Series`, `Powertrain`, `Fuel_Propulsion`]",
        "Response": "Table: `pilot`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, category, person, role, credited)  VALUES ('S20-E3', 'Animation Department', 'Dean Scammahorn', 'background designer', 'true');\nDatabase State:\n- Table: Character_Award, Columns: [award_id, character]\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (userid, movieid, rating)  VALUES (1624, 2496353, '4');\nDatabase State:\n- Table: `movies2actors`, Columns: [movieid, actorid, cast_num]\n- Table: users, Columns: [userid, age, u_gender, occupation]\n- Table: `actors`, Columns: [actorid, a_gender, a_quality]\n- Table: `directors`, Columns: [directorid, d_quality, avg_revenue]\n- Table: `movies`, Columns: [movieid, year, isEnglish, country, runningtime]\n- Table: `movies2directors`, Columns: [movieid, directorid, genre]",
        "Response": "Table: `u2base`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Products_in_Events (Product_in_Event_ID, Event_ID, Product_ID)  VALUES (64, 15, 6);\nDatabase State:\n- Table: Agreements, Columns: [Document_ID, Event_ID]\n- Table: Channels, Columns: [Channel_ID, Other_Details]\n- Table: Finances, Columns: [Finance_ID, Other_Details]\n- Table: Products_in_Events, Columns: [Product_in_Event_ID, Event_ID, Product_ID]\n- Table: Products, Columns: [Product_ID, Product_Type_Code, Product_Name, Product_Price]",
        "Response": "Table: Products_in_Events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Appointment (AppointmentID, Patient, Physician, Start, End, ExaminationRoom)  VALUES (76983231, 100000001, NULL, 3, '2008-04-26 12:00', '2008-04-26 13:00', 'C');\nDatabase State:\n- Table: Physician, Columns: [EmployeeID, Name, Position, SSN]\n- Table: Trained_In, Columns: [Physician, Treatment, CertificationDate, CertificationExpires]\n- Table: Medication, Columns: [Code, Name, Brand, Description]\n- Table: Nurse, Columns: [EmployeeID, Name, Position, Registered, SSN]",
        "Response": "Table: Appointment"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `local_dialing_code`, `commons_category`, `country`, `iso_3166_2_code`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `contains_the_administrative_territorial_entity`, `capital`, `locator_map_image`, `topics_main_category`, `instance_of`, `freebase_id`, `fips_10_4_countries_and_regions`, `population`, `geonames_id`, `shares_border_with`, `image`, `area`, `inception`, `whos_on_first_id`, `openstreetmap_relation_id`, `geoshape`, `inaturalist_place_id`)  VALUES ('Kam', 'Province of Cambodia', '25.0', 'Kampong Speu Province', 'Cambodia', 'KH-5', '11.45', 'Cambodia', 'Basedth District', 'Kam', 'Cambodia Kampong Speu locator map.svg', 'Category:Kampong Speu province', 'province of Cambodia', '/m/02h245', 'CB04', 716517.0, '1831132', 'Kampong Chhnang Province', 'Kampong Speu.jpg', 7017.0, '+1907-00-00T00:00:00Z', '85673053.0', '2215016.0', 'Data:Cambodia/K\u00e2mp\u00f3ng Sp\u0153.map', '96970');\nDatabase State:\n- Table: `capital_city`, Columns: [`label`, `description`, `country`, `coordinate_location`, `freebase_id`, `located_in_the_administrative_territorial_entity`, `instance_of`, `geonames_id`, `capital_of`, `image`, `whos_on_first_id`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `country`, `located_in_the_administrative_territorial_entity`, `instance_of`, `coordinate_location`, `geonames_id`, `locator_map_image`, `freebase_id`, `inaturalist_place_id`]\n- Table: `political_border`, Columns: [`label`, `description`, `population`, `country`, `iso_3166_2_code`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `contains_the_administrative_territorial_entity`, `locator_map_image`, `capital`, `topics_main_category`, `instance_of`, `freebase_id`, `fips_10_4_countries_and_regions`, `shares_border_with`, `local_dialing_code`, `geonames_id`, `commons_category`, `image`, `area`, `whos_on_first_id`, `category_for_maps`, `openstreetmap_relation_id`, `geoshape`, `inaturalist_place_id`]\n- Table: `administrative_centre`, Columns: [`label`, `description`, `local_dialing_code`, `commons_category`, `country`, `iso_3166_2_code`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `contains_the_administrative_territorial_entity`, `capital`, `locator_map_image`, `topics_main_category`, `instance_of`, `freebase_id`, `fips_10_4_countries_and_regions`, `population`, `geonames_id`, `shares_border_with`, `image`, `area`, `inception`, `whos_on_first_id`, `openstreetmap_relation_id`, `geoshape`, `inaturalist_place_id`]\n- Table: `province_of_cambodia`, Columns: [`label`, `description`, `local_dialing_code`, `commons_category`, `country`, `iso_3166_2_code`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `contains_the_administrative_territorial_entity`, `capital`, `locator_map_image`, `topics_main_category`, `instance_of`, `freebase_id`, `fips_10_4_countries_and_regions`, `population`, `geonames_id`, `shares_border_with`, `image`, `area`, `inception`, `whos_on_first_id`, `openstreetmap_relation_id`, `geoshape`, `inaturalist_place_id`, `located_in_time_zone`, `category_for_maps`]",
        "Response": "Table: `administrative_centre`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('putative flagellar motor switch protein FliG RSP_0054', 'microbial gene found in Rhodobacter sphaeroides 2.4.1', 'Rhodobacter sphaeroides 2.4.1', '3719961', 'gene', 'Putative flagellar motor switch protein FliG RSP_0054', 'RSP_0054', 'gene', '1762277', 'forward strand', '1761255');\nDatabase State:\n- Table: `flagellar_motor_switch_protein_flig_c_terminal_domain_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `parent_taxon`, `instance_of`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `membership_register_branch` (`Member_ID`, `Branch_ID`, `Register_Year`)  VALUES (5, '5', '2016');\nDatabase State:\n- Table: `branch`, Columns: [`Branch_ID`, `Name`, `Open_year`, `Address_road`, `City`, `membership_amount`]\n- Table: `member`, Columns: [`Member_ID`, `Card_Number`, `Name`, `Hometown`, `Level`]\n- Table: `membership_register_branch`, Columns: [`Member_ID`, `Branch_ID`, `Register_Year`]\n- Table: `purchase`, Columns: [`Member_ID`, `Branch_ID`, `Year`, `Total_pounds`]",
        "Response": "Table: `membership_register_branch`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO takes (ID, course_id, sec_id, semester, year, grade)  VALUES ('85366', '747', '1', 'Spring', 2004, 'C ');\nDatabase State:\n- Table: takes, Columns: [ID, course_id, sec_id, semester, year, grade]\n- Table: course, Columns: [course_id, title, dept_name, credits]\n- Table: instructor, Columns: [ID, name, dept_name, salary]",
        "Response": "Table: takes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `subclass_of`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Replicative DNA helicase, intein-containing SRU_0026', 'microbial protein found in Salinibacter ruber DSM 13855', 'Q2S6J9', 'Salinibacter ruber DSM 13855', 'replicative DNA helicase, intein-containing SRU_0026', 'protein', 'DNA replication', 'nucleotide binding', 'primosome complex', 'Hom-end-associated Hint', 'protein', 'YP_444182', 'DNA helicase, DnaB type');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `dna_helicase_dnab_like_n_terminal_domain_superfamily`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `coordinate_location`, `country`, `instance_of`, `shares_border_with`, `vision_of_britain_place_id`, `locator_map_image`, `population`, `catalog_code`, `factgrid_item_id`, `part_of`, `different_from`, `flag_image`, `flag`)  VALUES ('Pembrokeshire', 'historic county', '51.83333333333334', 'United Kingdom', 'historic county of the United Kingdom', 'Cardiganshire', '17278.0', 'Pembrokeshire Brit Isles Sect 6.svg', 122436.0, 'PMB', 'Q217740', 'Wales', 'Pembrokeshire', 'Flag of Pembrokeshire.svg', 'flag of Pembrokeshire');\nDatabase State:\n- Table: `flag`, Columns: [`label`, `description`, `instance_of`, `image`, `applies_to_jurisdiction`, `country`, `color`, `freebase_id`]\n- Table: `jurisdiction`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `locator_map_image`, `flag_image`, `different_from`, `shares_border_with`, `population`, `flag`, `catalog_code`, `part_of`, `factgrid_item_id`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `commons_category`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `topics_main_category`, `freebase_id`, `instance_of`, `geonames_id`, `gss_code_2011`, `openstreetmap_relation_id`, `toid`, `historic_county`]\n- Table: `political_border`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `shares_border_with`, `vision_of_britain_place_id`, `population`, `catalog_code`, `locator_map_image`, `factgrid_item_id`]",
        "Response": "Table: `historic_county`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Invoice_Line_Items (order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost)  VALUES (4, 10, 15, 'prod_name', '8', 943.07000000000005, 73.14000000000000056, NULL, 59.92999999999999972);\nDatabase State:\n- Table: Product_Categories, Columns: [production_type_code, product_type_description, vat_rating]\n- Table: Accounts, Columns: [account_id, customer_id, date_account_opened, account_name, other_account_details]\n- Table: Customers, Columns: [customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city, state_county_province, country]\n- Table: Order_Items, Columns: [order_item_id, order_id, product_id, product_quantity, other_order_item_details]\n- Table: Financial_Transactions, Columns: [transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details]",
        "Response": "Table: Invoice_Line_Items"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `instance_of`)  VALUES ('Nij\u016bsanya-t\u014d (\u014cmori, Inzai)', 'nan', '35.827265', 'Japan', 'Inzai', 'Tukimachi-t\u014d');\nDatabase State:\n- Table: `signpost`, Columns: [`label`, `description`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `instance_of`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `commons_category`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `instance_of`, `freebase_id`, `geonames_id`, `image`, `whos_on_first_id`, `openstreetmap_relation_id`]",
        "Response": "Table: `signpost`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `biological_variant_of`, `civic_variant_id`, `chromosome`, `genomic_start`, `genomic_end`, `instance_of`, `hgvs_nomenclature`)  VALUES ('VHL L135fs (c.404del)', 'genetic variant', 'VHL', '1906', 'human chromosome 3', '10188260.0', '10188260.0', 'Frameshift Truncation', 'NC_000003.11:g.10188261del');\nDatabase State:\n- Table: `chromosome`, Columns: [`label`, `description`, `subclass_of`, `part_of`, `follows`, `followed_by`, `freebase_id`, `commons_category`, `refseq_genome_id`, `found_in_taxon`, `instance_of`, `short_name`, `length`, `topics_main_category`, `mesh_descriptor_id`, `mesh_tree_code`, `microsoft_academic_id`, `openalex_id`]",
        "Response": "Table: `frameshift_truncation`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (inspection_id, point_id, fine, inspector_comment)  VALUES (1134749, 38, 100, 'CORRECTED');\nDatabase State:\n- Table: establishment, Columns: [license_no, dba_name, aka_name, facility_type, risk_level, address, city, state, zip, latitude, longitude, ward]\n- Table: violation, Columns: [inspection_id, point_id, fine, inspector_comment]\n- Table: employee, Columns: [employee_id, first_name, last_name, address, city, state, zip, phone, title, salary, supervisor]",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `user_reviews` (App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity)  VALUES ('Find Dining Restaurant Finder', 'nan', 'nan', 'nan', 'nan');\nDatabase State:\n- Table: `user_reviews`, Columns: [App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity]\n- Table: `playstore`, Columns: [App, Category, Rating, Reviews, Size, Installs, Type, Price, `Content Rating`, Genres]",
        "Response": "Table: `user_reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`architect_id`, `id`, `name`, `location`, `length_meters`, `length_feet`)  VALUES (5, 6, 'Rainbow Bridge', 'Glen Canyon National Recreation Area , Utah , USA', 71.0, 234.0);\nDatabase State:\n- Table: `mill`, Columns: [`architect_id`, `id`, `location`, `name`, `type`, `built_year`, `notes`]\n- Table: `architect`, Columns: [`id`, `name`, `nationality`, `gender`]\n- Table: `bridge`, Columns: [`architect_id`, `id`, `name`, `location`, `length_meters`, `length_feet`]",
        "Response": "Table: `bridge`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO incidents (case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers)  VALUES ('167911V', '2008/6/6', '1521 N. Cockrell Hill Road', 'Deceased', 'Box Cutter', 'Lemoine, Dale W/M', 1, 'Yzaguirre, David L/M');\nDatabase State:\n- Table: incidents, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]\n- Table: officers, Columns: [case_number, race, gender, last_name, first_name, full_name]",
        "Response": "Table: incidents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `coordinate_location`, `country`, `simc_place_id`, `located_in_the_administrative_territorial_entity`, `instance_of`)  VALUES ('Helenin', 'hamlet in Poland', '51.4333', 'Poland', '108520.0', 'Dominiczyn', 'colony');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `instance_of`, `freebase_id`, `topics_main_category`, `terc_municipality_code`, `official_website`, `coat_of_arms_image`, `licence_plate_code`, `area`]\n- Table: `colony`, Columns: [`label`, `description`, `coordinate_location`, `country`, `simc_place_id`, `located_in_the_administrative_territorial_entity`, `instance_of`]",
        "Response": "Table: `colony`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Problem_Log (problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details)  VALUES (8, 4, 15, 'Datatabase', 'Solved', '1999-08-17 00:00:18', 'j', 'h', 'j');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Problem_Log"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`name`, `month`)  VALUES ('student704', 3);\nDatabase State:\n- Table: enlist, Columns: [`name`, organ]\n- Table: enrolled, Columns: [name, school, month]",
        "Response": "Table: longest_absense_from_school"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (MovieID, ActorID, `Character Name`, creditOrder, pay, screentime)  VALUES (483, 657, 'Mission Control', 3, NULL, NULL);\nDatabase State:\n- Table: characters, Columns: [MovieID, ActorID, `Character Name`, creditOrder, pay, screentime]",
        "Response": "Table: characters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, person_id, category, role, credited)  VALUES ('tt0629204', 'nm0752861', 'General', 'Casting By', 'true');\nDatabase State:\n- Table: Keyword, Columns: [episode_id, keyword]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `follows` (`label`, `description`, `follows`, `followed_by`, `performer`, `musicbrainz_release_group_id`, `discogs_master_id`, `genre`, `publication_date`, `part_of`, `youtube_playlist_id`, `form_of_creative_work`, `instance_of`)  VALUES ('Every Woman in Me', '2009 album by Lara Fabian', 'Toutes les femmes en moi', 'Mademoiselle Zhivago', 'Lara Fabian', 'fd3b35e3-c0c2-4ee5-b99c-989af5d28f27', 'nan', 'chanson', '+2009-00-00T00:00:00Z', 'Lara Fabian discography', 'OLAK5uy_nysBxNvc5Kuz0kRx8N8WdjTJPuixfVrRk', 'studio album', 'album');\nDatabase State:\n- Table: `lara_fabian_discography`, Columns: [`label`, `description`, `follows`, `followed_by`, `performer`, `musicbrainz_release_group_id`, `discogs_master_id`, `genre`, `publication_date`, `part_of`, `youtube_playlist_id`, `form_of_creative_work`, `instance_of`]\n- Table: `follows`, Columns: [`label`, `description`, `follows`, `followed_by`, `performer`, `musicbrainz_release_group_id`, `discogs_master_id`, `genre`, `publication_date`, `part_of`, `youtube_playlist_id`, `form_of_creative_work`, `instance_of`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO IMG_OBJ (IMG_ID, OBJ_SAMPLE_ID, OBJ_CLASS_ID, X, Y, W, H)  VALUES (2325358, 10, 104, 91, 43, 186, 457);\nDatabase State:\n- Table: IMG_REL, Columns: [IMG_ID, PRED_CLASS_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID]\n- Table: IMG_OBJ_ATT, Columns: [IMG_ID, ATT_CLASS_ID, OBJ_SAMPLE_ID]",
        "Response": "Table: IMG_OBJ"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`)  VALUES ('ribosomal protein L11 methyltransferase DR_1521', 'microbial gene found in Deinococcus radiodurans R1', 'Deinococcus radiodurans R1', '1797864', 'gene', 'Ribosomal protein L11 methyltransferase DR_1521', 'DR_1521', '1537091', 'reverse strand', 'gene', '1536270');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score)  VALUES (68, 2, 2016, 44);\nDatabase State:\n- Table: country, Columns: [id, country_name]\n- Table: university, Columns: [id, country_id, university_name]\n- Table: university_year, Columns: [university_id, year, num_students, student_staff_ratio, pct_international_students, pct_female_students]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EVENTID, REFID, EVENT_DATE, AMOUNT)  VALUES (448795, 47228, '2006-12-12 12:00:00.0', 15.76600000000000001);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Sales`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `part_of`, `follows`, `followed_by`, `freebase_id`, `commons_category`, `refseq_genome_id`, `found_in_taxon`, `instance_of`, `short_name`, `length`, `mesh_descriptor_id`, `mesh_tree_code`, `topics_main_category`)  VALUES ('human chromosome 14', 'human chromosome', 'acrocentric chromosome', 'human genome', 'human chromosome 13', 'human chromosome 15', '/m/099xng', 'Human chromosome 14', 'NC_000014.9', 'Homo sapiens', 'chromosome', '14', 107043718.0, 'D002883', 'A11.284.187.520.300.370.380', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Course (CID, CName, Credits, Instructor, Days, Hours, DNO)  VALUES ('520.213', 'CIRCUITS', 4, 9210, 'MTW', '2', 520);\nDatabase State:\n- Table: Faculty, Columns: [FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]\n- Table: Minor_in, Columns: [StuID, DNO]\n- Table: Gradeconversion, Columns: [lettergrade, gradepoint]",
        "Response": "Table: Course"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, person_id, category, role, credited)  VALUES ('tt0629394', 'nm1568876', 'Location Management', 'location coordinator', 'true');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `part` (`label`, `description`, `instance_of`, `part_of`, `point_in_time`, `topics_main_category`, `has_parts`)  VALUES ('January 2021', 'month of 2021', 'calendar month of a given year', '2021', '+2021-01-00T00:00:00Z', 'Category:January 2021 events', 'January 1, 2021');\nDatabase State:\n- Table: `second_monday_in_january`, Columns: [`label`, `description`, `instance_of`, `point_in_time`, `day_of_week`, `part_of`]",
        "Response": "Table: `part`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, Name, CountryCode, District, Population)  VALUES (1860, 'Almaty', 'KAZ', 'Almaty Qalasy', 1129400);\nDatabase State:\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]\n- Table: CountryLanguage, Columns: [CountryCode, Language, IsOfficial, Percentage]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Race_ID`, `Name`, `Class`, `Date`, `Track_ID`)  VALUES (6, 'Lime Rock GT Classic 250', 'GT', 'May 26', '6');\nDatabase State:\n- Table: `track`, Columns: [`Track_ID`, `Name`, `Location`, `Seating`, `Year_Opened`]\n- Table: `race`, Columns: [`Race_ID`, `Name`, `Class`, `Date`, `Track_ID`]",
        "Response": "Table: `race`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Date received`, Product, `Sub-product`, Issue, `Sub-issue`, `Consumer complaint narrative`, Tags, `Consumer consent provided?`, `Submitted via`, `Date sent to company`, `Company response to consumer`, `Timely response?`, `Consumer disputed?`, `Complaint ID`, Client_ID)  VALUES ('2017-01-24', 'Credit card', NULL, 'Delinquent account', NULL, NULL, NULL, 'Consent not provided', 'Web', '2017-01-24', 'Closed with explanation', 'Yes', NULL, 'CR2306136', 'C00001117');\nDatabase State:\n- Table: state, Columns: [StateCode, State, Region]",
        "Response": "Table: events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `biological_process`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('50S ribosomal protein L11 SMU_1627', 'microbial protein found in Streptococcus mutans UA159', '50S ribosomal protein L11 SMU_1627', 'Q8DSX9', 'structural constituent of ribosome', 'protein biosynthesis', 'ribosome', 'Ribosomal protein L11, conserved site', 'Streptococcus mutans UA159', 'NP_721962', 'protein', 'Ribosomal protein L11/L12, N-terminal domain superfamily', 'protein');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `ribosomal_protein_l11_conserved_site_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `competition_class`, `short_name`, `sport`, `catalog_code`)  VALUES ('lightweight men''s coxless four', 'competition class in rowing', 'competition class', 'open', 'LM4-', 'rowing', '4f77e783-c93e-4692-9e52-0ece558a898e');\nDatabase State:\n- Table: `competition_class`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `short_name`, `sport`, `catalog_code`]\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `part_of`, `event_distance`, `competition_class`, `point_in_time`, `sport`, `follows`, `location`, `freebase_id`, `followed_by`]",
        "Response": "Table: `competition_class`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderDetailID, OrderID, ProductID, Quantity)  VALUES (148, 10303, 40, 40);\nDatabase State:\n- Table: Employees, Columns: [EmployeeID, LastName, FirstName, BirthDate, Photo, Notes]\n- Table: Customers, Columns: [CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country]\n- Table: Suppliers, Columns: [SupplierID, SupplierName, ContactName, Address, City, PostalCode, Country, Phone]",
        "Response": "Table: OrderDetails"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO registration (course_id, student_id, grade, sat)  VALUES (6, 30, 'A', 4);\nDatabase State:\n- Table: prof, Columns: [prof_id, gender, first_name, last_name, email, popularity, teachingability, graduate_from]",
        "Response": "Table: registration"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO region_sales (region_id, game_platform_id, num_sales)  VALUES (3, 14999, 0.0);\nDatabase State:\n- Table: game_publisher, Columns: [id, game_id, publisher_id]\n- Table: game, Columns: [id, genre_id, game_name]\n- Table: region, Columns: [id, region_name]\n- Table: publisher, Columns: [id, publisher_name]\n- Table: game_platform, Columns: [id, game_publisher_id, platform_id, release_year]\n- Table: genre, Columns: [id, genre_name]\n- Table: platform, Columns: [id, platform_name]\n- Table: region_sales, Columns: [region_id, game_platform_id, num_sales]",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SeasonStatus (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS)  VALUES (14873, '2004-2005', 'Sioux City Musketeers', 'USHL', 'Playoffs', 7, 1, 1, 2, 6, 5);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1026, 'Pang', 'Eric', 19, 'M', 520, 7134, 'HKG');\nDatabase State:\n- Table: Has_Allergy, Columns: [StuID, Allergy]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Allergy_Type, Columns: [Allergy, AllergyType]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Parties_in_Events (Party_ID, Event_ID, Role_Code)  VALUES (5, 15, 'Organizer');\nDatabase State:\n- Table: Assets, Columns: [Asset_ID, Other_Details]\n- Table: Agreements, Columns: [Document_ID, Event_ID]\n- Table: Parties_in_Events, Columns: [Party_ID, Event_ID, Role_Code]\n- Table: Finances, Columns: [Finance_ID, Other_Details]\n- Table: Channels, Columns: [Channel_ID, Other_Details]\n- Table: Assets_in_Events, Columns: [Asset_ID, Event_ID]\n- Table: Parties, Columns: [Party_ID, Party_Details]\n- Table: Locations, Columns: [Location_ID, Other_Details]\n- Table: Products, Columns: [Product_ID, Product_Type_Code, Product_Name, Product_Price]",
        "Response": "Table: Parties_in_Events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (property_id, feature_id, property_feature_description)  VALUES (9, 3, 'quo');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Other_Property_Features"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `record_label` (`label`, `description`, `instance_of`, `discogs_label_id`, `inception`, `musicbrainz_label_id`)  VALUES ('RCA Victor', 'US international record label', 'record label', '11358.0', '+1945-00-00T00:00:00Z', 'b3f4e6a5-ece0-43be-a530-68ad0d49fee8');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `record_label`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Sales Orders` (OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`)  VALUES ('SO - 0002020', 'Wholesale', 'WARE-UHY1004', '10/27/18', '1/8/19', '1/12/19', '1/14/19', 'USD', 26, 18, 207, 19, 8, 0.1000000000000000055, '2,572.80', '1,852.42');\nDatabase State:\n- Table: `Sales Orders`, Columns: [OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`]\n- Table: Regions, Columns: [StateCode, State, Region]\n- Table: Products, Columns: [ProductID, `Product Name`]\n- Table: `Sales Team`, Columns: [SalesTeamID, `Sales Team`, Region]\n- Table: `Store Locations`, Columns: [StoreID, `City Name`, County, StateCode, State, Type, Latitude, Longitude, AreaCode, Population, `Household Income`, `Median Income`, `Land Area`, `Water Area`, `Time Zone`]",
        "Response": "Table: `Sales Orders`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `encoded_by`, `subclass_of`, `found_in_taxon`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Hypothetical protein TDE1341', 'microbial protein found in Treponema denticola ATCC 35405', 'hypothetical protein TDE1341', 'protein', 'Treponema denticola ATCC 35405', 'Q73N15', 'tRNA processing', 'nucleotide binding', 'cytoplasm', 'Lysidine-tRNA(Ile) synthetase, C-terminal', 'protein', 'NP_971947', 'Rossmann fold');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `trnaile_lysidine_synthase_n_terminal_domain_protein_family`, Columns: [`label`, `description`, `encoded_by`, `subclass_of`, `found_in_taxon`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]",
        "Response": "Table: `trnaile_lysidine_synthase_n_terminal_domain_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (UserID, Gender)  VALUES ('tw-2974861813', 'Unknown');\nDatabase State:\n- Table: twitter, Columns: [TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, `text`, LocationID, UserID]\n- Table: user, Columns: [UserID, Gender]",
        "Response": "Table: user"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details)  VALUES (331, '1', '1', '', NULL);\nDatabase State:\n- Table: Visits, Columns: [Visit_ID, Tourist_Attraction_ID, Tourist_ID, Visit_Date, Visit_Details]\n- Table: Royal_Family, Columns: [Royal_Family_ID, Royal_Family_Details]\n- Table: Ref_Attraction_Types, Columns: [Attraction_Type_Code, Attraction_Type_Description]\n- Table: Photos, Columns: [Photo_ID, Tourist_Attraction_ID, Name, Description, Filename, Other_Details]\n- Table: Street_Markets, Columns: [Market_ID, Market_Details]\n- Table: Locations, Columns: [Location_ID, Location_Name, Address, Other_Details]",
        "Response": "Table: Hotels"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (source_u_id)  VALUES (3, 6, 10);\nDatabase State:\n- Table: `trust`, Columns: [source_u_id]\n- Table: useracct, Columns: [u_id]\n- Table: item, Columns: [i_id]\n- Table: review, Columns: [a_id]",
        "Response": "Table: `trust`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO location (id_restaurant, street_num, street_name, city)  VALUES (8582, 2285, 'n texas st', 'fairfield');\nDatabase State:\n- Table: generalinfo, Columns: [id_restaurant, label, food_type, city, review]\n- Table: location, Columns: [id_restaurant, street_num, street_name, city]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `ncbi_locus_tag`, `wormbase_gene_id`, `entrez_gene_id`, `genomic_end`, `genomic_start`, `chromosome`, `ensembl_gene_id`, `strand_orientation`, `refseq_rna_id`, `instance_of`, `encodes`, `ensembl_transcript_id`)  VALUES ('sre-14', 'protein-coding gene in the species Caenorhabditis elegans', 'Caenorhabditis elegans', 'CELE_C42C1.1', 'WBGene00016579', '183397', '12261449', '12259797', 'Caenorhabditis elegans chromosome IV', 'WBGene00016579', 'reverse strand', 'NM_069927', 'gene', 'Serpentine Receptor, class E (epsilon) CELE_C42C1.1', 'C42C1.1.1');\nDatabase State:\n- Table: `7tm_gpcr_serpentine_receptor_class_e_sre`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `biological_process`, `cell_component`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `ncbi_locus_tag`, `wormbase_gene_id`, `entrez_gene_id`, `genomic_end`, `genomic_start`, `chromosome`, `ensembl_gene_id`, `strand_orientation`, `refseq_rna_id`, `instance_of`, `encodes`, `ensembl_transcript_id`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `biological_process`, `cell_component`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`ID`, `Name`, `Level_of_membership`, `Age`)  VALUES (2, 'Guti Midfielder', 5, 28);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `visitor`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`)  VALUES ('fumarate hydratase Class I anaerobic STM0761', 'microbial gene found in Salmonella enterica subsp. enterica serovar Typhimurium str. LT2', 'Salmonella enterica subsp. enterica serovar Typhimurium str. LT2', '1252281', 'gene', 'Fumarate hydratase Class I anaerobic STM0761', 'STM0761', '825472', 'reverse strand', 'gene', '824920');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO takes (ID, course_id, sec_id, semester, year, grade)  VALUES ('64169', '486', '1', 'Fall', 2009, 'C+');\nDatabase State:\n- Table: time_slot, Columns: [time_slot_id, day, start_hr, start_min, end_hr, end_min]\n- Table: student, Columns: [ID, name, dept_name, tot_cred]\n- Table: course, Columns: [course_id, title, dept_name, credits]\n- Table: section, Columns: [course_id, sec_id, semester, year, building, room_number, time_slot_id]\n- Table: advisor, Columns: [s_ID, i_ID]\n- Table: classroom, Columns: [building, room_number, capacity]\n- Table: instructor, Columns: [ID, name, dept_name, salary]\n- Table: prereq, Columns: [course_id, prereq_id]",
        "Response": "Table: takes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `atp_synthase_f1_complex_gamma_subunit_conserved_site_protein_family` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('ATP synthase subunit C RSP_2298', 'microbial protein found in Rhodobacter sphaeroides 2.4.1', 'ATP synthase subunit C RSP_2298', 'Q3J432', 'ATP biosynthetic process', 'proton-transporting ATP synthase activity, rotational mechanism', 'plasma membrane', 'ATP synthase, F1 complex, gamma subunit conserved site', 'Rhodobacter sphaeroides 2.4.1', 'YP_352353', 'protein', 'ATP synthase, F1 complex, gamma subunit superfamily');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `atp_synthase_f1_complex_gamma_subunit_conserved_site_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `atp_synthase_f1_complex_gamma_subunit_conserved_site_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO price (ID, price)  VALUES (252, 34088.83024000000296);\nDatabase State:\n- Table: price, Columns: [ID, price]\n- Table: production, Columns: [ID, model_year, country]\n- Table: country, Columns: [origin, country]",
        "Response": "Table: price"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB)  VALUES (301, 'Osaki', 'Ismael', 'K', 'PROF', '1989-8-1', '1952-5-25');\nDatabase State:\n- Table: PROFESSOR, Columns: [EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]\n- Table: DEPARTMENT, Columns: [DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]\n- Table: CLASS, Columns: [CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]",
        "Response": "Table: EMPLOYEE"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`game_id`, `id`, `Player`, `Injury`, `Number_of_matches`, `Source`)  VALUES (6, 9, 'Goran Pandev', 'Ankle problem', '3', 'inter.it');\nDatabase State:\n- Table: `stadium`, Columns: [`id`, `name`, `Home_Games`, `Average_Attendance`, `Total_Attendance`, `Capacity_Percentage`]\n- Table: `injury_accident`, Columns: [`game_id`, `id`, `Player`, `Injury`, `Number_of_matches`, `Source`]",
        "Response": "Table: `injury_accident`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Batsman_Scored (Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No)  VALUES (598060, 15, 1, 1, 1);\nDatabase State:\n- Table: Team, Columns: [Team_Id, Team_Name]",
        "Response": "Table: Batsman_Scored"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('elongation factor P SSA_0450', 'microbial gene found in Streptococcus sanguinis SK36', 'Streptococcus sanguinis SK36', '4807787', 'gene', 'SSA_0450', 'Elongation factor P SSA_0450', 'gene', '451286', 'forward strand', '450726');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth)  VALUES (1567, 'Reese Witherspoon', '1976-03-22', 'New Orleans', 'USA', 61, 'Laura Jeanne Reese Witherspoon was born on March 22, 1976 at Southern Baptist Hospital (now Memorial Medical Center) in New Orleans, Louisiana. She is the second child of Mary Elizabeth \"Betty\" (Reese) and Dr. John Draper Witherspoon, Sr. Her father was a military surgeon specializing in ear, nose and throat. Her mother was a Registered Nurse who ...', NULL, NULL, '$300,000,000.00');\nDatabase State:\n- Table: actor, Columns: [ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth]\n- Table: movie, Columns: [MovieID, Title, `MPAA Rating`, Budget, Gross, `Release Date`, Genre, Runtime, Rating, `Rating Count`, Summary]\n- Table: characters, Columns: [MovieID, ActorID, `Character Name`, creditOrder, pay, screentime]",
        "Response": "Table: actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `located_in_the_administrative_territorial_entity`, `commons_category`, `coordinate_location`, `freebase_id`, `gnd_id`, `coat_of_arms_image`, `geonames_id`, `topics_main_category`, `official_website`, `viaf_id`, `postal_code`, `locator_map_image`, `image`, `elevation_above_sea_level`, `local_dialing_code`, `located_in_time_zone`, `openstreetmap_relation_id`, `area`, `population`, `whos_on_first_id`, `worldcat_identities_id`, `factgrid_item_id`, `instance_of`)  VALUES ('H\u00f6xter', 'town in North Rhine-Westphalia, Germany, seat of the district of H\u00f6xter', 'Germany', 'H\u00f6xter', 'H\u00f6xter', '51.766666666666666', '/m/04qh9j', '4025451-3', 'DEU H\u00f6xter COA.svg', '2898321.0', 'Category:H\u00f6xter', 'https://www.hoexter.de/', '139573101.0', '37671.0', 'H\u00f6xter in HX.svg', 'Bushaltestelle Stadthaus, 1, H\u00f6xter, Landkreis H\u00f6xter.jpg', 96.0, '5271.0', 'UTC+01:00', '148593.0', 158.1599999999999966, 28467.0, '101808955.0', 'lccn-n82036175', 'Q21589', 'medium-sized district town');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, Name, CountryCode, District, Population)  VALUES (1341, 'Godhra', 'IND', 'Gujarat', 96813);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler)  VALUES (598039, 1, 3, 2, 1, 3, 1, 214, 40, 223);\nDatabase State:\n- Table: Rolee, Columns: [Role_Id, Role_Desc]",
        "Response": "Table: Ball_by_Ball"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `population`, `geonames_id`, `gnd_id`, `licence_plate_code`, `country`, `bavarikon_id`, `coat_of_arms_image`, `german_municipality_key`, `viaf_id`, `freebase_id`, `official_website`, `openstreetmap_relation_id`, `topics_main_category`, `locator_map_image`, `area`, `archinform_location_id`, `local_dialing_code`, `commons_category`, `elevation_above_sea_level`, `instance_of`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `postal_code`, `image`, `whos_on_first_id`, `factgrid_item_id`, `located_in_time_zone`, `german_regional_key`, `part_of`)  VALUES ('V\u00f6ls', 'municipality in Innsbruck-Land District, Tyrol, Austria', 6938.0, '7873627', '4337496-7', 'IL', 'Austria', 'nan', 'Wappen at voels.png', 'nan', '236981340.0', '/m/02w05f9', 'http://www.voels.at', 'nan', 'Category:V\u00f6ls, Tirol', 'nan', 5.620000000000000106, '9958.0', '512.0', 'V\u00f6ls, Tirol', 574.0, 'market municipality', '47.25', 'Innsbruck-Land District', '6176', 'V\u00f6ls, Tirol1.jpg', '101853443', 'nan', 'UTC+01:00', 'nan', 'nan');\nDatabase State:\n- Table: `part`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `population`, `geonames_id`, `gnd_id`, `licence_plate_code`, `country`, `bavarikon_id`, `coat_of_arms_image`, `german_municipality_key`, `viaf_id`, `freebase_id`, `official_website`, `openstreetmap_relation_id`, `topics_main_category`, `locator_map_image`, `area`, `archinform_location_id`, `local_dialing_code`, `commons_category`, `elevation_above_sea_level`, `instance_of`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `postal_code`, `image`, `whos_on_first_id`, `factgrid_item_id`, `located_in_time_zone`, `german_regional_key`, `part_of`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Participates_in (stuid, actid)  VALUES (1030, 780);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Participates_in"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate)  VALUES (51089, 35760, 'A635-4BAF-BC', 4, 985, 1, 339.0, 0.0, 1356.0, 'C598C427-21A1-4F3E-B5D0-EB787CE9E525', '2013-05-30 00:00:00.0');\nDatabase State:\n- Table: PurchaseOrderDetail, Columns: [PurchaseOrderID, PurchaseOrderDetailID, DueDate, OrderQty, ProductID, UnitPrice, LineTotal, ReceivedQty, RejectedQty, StockedQty, ModifiedDate]\n- Table: UnitMeasure, Columns: [UnitMeasureCode, Name, ModifiedDate]\n- Table: TransactionHistory, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: SalesPerson, Columns: [BusinessEntityID, TerritoryID, SalesQuota, Bonus, CommissionPct, SalesYTD, SalesLastYear, rowguid, ModifiedDate]\n- Table: `BillOfMaterials`, Columns: [BillOfMaterialsID, ProductAssemblyID, ComponentID, StartDate, EndDate, UnitMeasureCode, BOMLevel, PerAssemblyQty, ModifiedDate]\n- Table: Employee, Columns: [BusinessEntityID, NationalIDNumber, LoginID, OrganizationNode, OrganizationLevel, JobTitle, BirthDate, MaritalStatus, Gender, HireDate, SalariedFlag, VacationHours, SickLeaveHours, CurrentFlag, rowguid, ModifiedDate]\n- Table: PurchaseOrderHeader, Columns: [PurchaseOrderID, RevisionNumber, Status, EmployeeID, VendorID, ShipMethodID, OrderDate, ShipDate, SubTotal, TaxAmt, Freight, TotalDue, ModifiedDate]\n- Table: Currency, Columns: [CurrencyCode, Name, ModifiedDate]\n- Table: ProductSubcategory, Columns: [ProductSubcategoryID, ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: SpecialOfferProduct, Columns: [SpecialOfferID, ProductID, rowguid, ModifiedDate]\n- Table: Store, Columns: [BusinessEntityID, Name, SalesPersonID, Demographics, rowguid, ModifiedDate]\n- Table: `StateProvince`, Columns: [StateProvinceID, StateProvinceCode, CountryRegionCode, IsOnlyStateProvinceFlag, Name, TerritoryID, rowguid, ModifiedDate]\n- Table: ProductProductPhoto, Columns: [ProductID, ProductPhotoID, `Primary`, ModifiedDate]\n- Table: `SalesOrderHeader`, Columns: [SalesOrderID, RevisionNumber, OrderDate, DueDate, ShipDate, Status, OnlineOrderFlag, SalesOrderNumber, PurchaseOrderNumber, AccountNumber, CustomerID, SalesPersonID, TerritoryID, BillToAddressID, ShipToAddressID, ShipMethodID, CreditCardID, CreditCardApprovalCode, CurrencyRateID, SubTotal, TaxAmt, Freight, TotalDue, Comment, rowguid, ModifiedDate]\n- Table: Password, Columns: [BusinessEntityID, PasswordHash, PasswordSalt, rowguid, ModifiedDate]\n- Table: EmailAddress, Columns: [BusinessEntityID, EmailAddressID, EmailAddress, rowguid, ModifiedDate]\n- Table: SalesOrderDetail, Columns: [SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate]\n- Table: ProductPhoto, Columns: [ProductPhotoID, ThumbNailPhoto, ThumbnailPhotoFileName, LargePhoto, LargePhotoFileName, ModifiedDate]\n- Table: SalesTaxRate, Columns: [SalesTaxRateID, StateProvinceID, TaxType, TaxRate, Name, rowguid, ModifiedDate]",
        "Response": "Table: SalesOrderDetail"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, course_id, sec_id, semester, year, grade)  VALUES ('78581', '270', '1', 'Spring', 2010, 'C-');\nDatabase State:\n- Table: instructor, Columns: [ID, name, dept_name, salary]\n- Table: classroom, Columns: [building, room_number, capacity]\n- Table: section, Columns: [course_id, sec_id, semester, year, building, room_number, time_slot_id]\n- Table: student, Columns: [ID, name, dept_name, tot_cred]\n- Table: prereq, Columns: [course_id, prereq_id]\n- Table: teaches, Columns: [ID, course_id, sec_id, semester, year]",
        "Response": "Table: takes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `subclass_of`, `molecular_function`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Pyruvate flavodoxin/ferrodoxin oxidoreductase CT1628', 'microbial protein found in Chlorobaculum tepidum TLS', 'Chlorobium tepidum TLS', 'Q8KC02', 'pyruvate flavodoxin/ferrodoxin oxidoreductase CT1628', 'protein', 'thiamine pyrophosphate binding', '4Fe-4S ferredoxin, iron-sulphur binding, conserved site', 'protein', 'NP_662511', 'Thiamin diphosphate-binding fold');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `chorismate_mutase_type_ii_superfamily` (`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `refseq_protein_id`, `subclass_of`, `has_parts`, `biological_process`, `part_of`, `instance_of`)  VALUES ('Bifunctional chorismate mutase P/prephenate dehydratase ECUMN_2924', 'microbial protein found in Escherichia coli UMN026', 'Escherichia coli UMN026', 'B7N6I5', 'bifunctional chorismate mutase P/prephenate dehydratase ECUMN_2924', 'YP_002413619', 'protein', 'Chorismate mutase II, prokaryotic-type', 'chorismate metabolic process', 'Chorismate mutase domain superfamily', 'protein');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `freebase_id`, `ncbi_taxonomy_id`, `parent_taxon`, `instance_of`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `mesh_descriptor_id`, `microsoft_academic_id`, `catalogue_of_life_id`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `chorismate_mutase_type_ii_superfamily`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Mission_ID`, `Ship_ID`, `Code`, `Launched_Year`, `Location`, `Speed_knots`, `Fate`)  VALUES (7, 8, 'VMV-7', 1932, 'Turku , Finland', 23, 'Lost (burned and sunk) 1933');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `mission`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violations (business_id, date, violation_type_id, risk_category, description)  VALUES (27793, '2016-03-23', '103154', 'Low Risk', 'Unclean or degraded floors walls or ceilings');\nDatabase State:\n- Table: violations, Columns: [business_id, date, violation_type_id, risk_category, description]\n- Table: inspections, Columns: [business_id, score, date, type]\n- Table: businesses, Columns: [business_id, name, address, city, postal_code, latitude, longitude, phone_number, tax_code, business_certificate, application_date, owner_name, owner_address, owner_city, owner_state, owner_zip]",
        "Response": "Table: violations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (eid, name, salary)  VALUES (574489457, 'Milo Brooks', 20);\nDatabase State:\n- Table: flight, Columns: [flno, origin, destination, distance, departure_date, arrival_date, price, aid]\n- Table: employee, Columns: [eid, name, salary]\n- Table: certificate, Columns: [eid, aid]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_centre` (`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `instance_of`, `freebase_id`, `geonames_id`, `locator_map_image`, `official_website`, `capital`, `openstreetmap_relation_id`, `commons_category`)  VALUES ('Lamia Municipality', 'municipality in Greece', 'Central Greece Region', 'Greece', 'nan', 'municipality of Greece', 'nan', '8133738.0', '2011 Dimos Lamieon.png', 'https://www.lamia.gr/', 'Lamia', '1901727.0', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `administrative_centre`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, ParagraphNum, PlainText, character_id, chapter_id)  VALUES (663304, 720, replace('Speak frankly as the wind;\\nIt is not Agamemnon''s sleeping hour:\\nThat thou shalt know. Trojan, he is awake,\\nHe tells thee so himself.','\\n',char(10)), 58, 19590);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `paragraphs`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `competition_class`, `part_of`, `described_at_url`, `follows`, `followed_by`, `point_in_time`, `sport`)  VALUES ('1973 European Rowing Championships \u2013 men''s single scull', 'rowing event', 'rowing event', 'men''s single scull', '1973 European Rowing Championships', 'http://www.worldrowing.com/events/1973-european-championships/mens-single-sculls/', '1971 European Rowing Championships \u2013 men''s single scull', '2007 European Rowing Championships \u2013 men''s single sculls', '+1973-00-00T00:00:00Z', 'rowing');\nDatabase State:\n- Table: `1971_european_rowing_championships`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `part_of`, `described_at_url`, `follows`, `followed_by`, `point_in_time`, `sport`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Airline)  VALUES (6, 369, ' NAB', ' JLH');\nDatabase State:\n- Table: `airports`, Columns: [City]\n- Table: `airlines`, Columns: [uid]\n- Table: `flights`, Columns: [Airline]",
        "Response": "Table: `flights`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11535515, 'JB553398', '12/14/2018 15:15', '035XX W 55TH ST', '484', 'SCHOOL, PUBLIC, BUILDING', 'FALSE', 'FALSE', 822, 8, 14, 63, '08B', '41.79339092', '-87.7117283');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `poker_player` (`Poker_Player_ID`, `People_ID`, `Final_Table_Made`, `Best_Finish`, `Money_Rank`, `Earnings`)  VALUES (3, 5, 21.0, 1.0, 166.0, 104871.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `poker_player`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `said_to_be_the_same_as`, `different_from`, `native_label`, `writing_system`, `soundex`, `cologne_phonetics`, `caverphone`, `commons_category`, `language_of_work_or_name`)  VALUES ('Margrethe', 'female given name', 'female given name', 'Margrete', 'Margrethe', 'Margrethe', 'Latin script', 'M626', '67472', 'MKRT11', 'Margrethe (given name)', 'nan');\nDatabase State:\n- Table: `danish_royal_family`, Columns: [`label`, `description`, `sex_or_gender`, `father`, `mother`, `commons_category`, `date_of_birth`, `place_of_birth`, `instance_of`, `image`, `freebase_id`, `family`, `religion_or_worldview`, `country_of_citizenship`, `given_name`, `languages_spoken_written_or_signed`, `residence`, `sibling`, `occupation`, `noble_title`, `honorific_prefix`, `part_of`, `the_peerage_person_id`, `den_store_danske_id`, `rodovid_id`]\n- Table: `sibling`, Columns: [`label`, `description`, `sex_or_gender`, `father`, `mother`, `date_of_birth`, `commons_category`, `instance_of`, `image`, `freebase_id`, `family`, `place_of_birth`, `country_of_citizenship`, `given_name`, `sibling`, `occupation`, `languages_spoken_written_or_signed`, `religion_or_worldview`, `noble_title`, `part_of`, `the_peerage_person_id`, `godparent`, `date_of_baptism_in_early_childhood`, `den_store_danske_id`, `social_classification`, `rodovid_id`, `residence`, `honorific_prefix`]",
        "Response": "Table: `given_name`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `taxon` (`label`, `description`, `taxon_name`, `taxon_rank`, `freebase_id`, `ncbi_taxonomy_id`, `parent_taxon`, `instance_of`, `gbif_taxon_id`, `encyclopedia_of_life_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `mesh_descriptor_id`, `bacdive_id`, `microsoft_academic_id`, `openalex_id`, `catalogue_of_life_id`)  VALUES ('Mycobacterium smegmatis', 'species of bacterium', 'Mycobacterium smegmatis', 'species', '/m/05dn7w', '1772.0', 'Mycobacterium', 'taxon', '3225145.0', '971546.0', '963828.0', 'gram-positive bacteria', '10033265.0', 'http://www.bacterio.net/mycobacterium.html#smegmatis', 'D020102', '8324.0', '2777204207.0', 'C2777204207', '44W6S');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (5824775, 21, 1680, 261, 261);\nDatabase State:\n- Table: Sales, Columns: [SalesID, SalesPersonID, CustomerID, ProductID, Quantity]\n- Table: Customers, Columns: [CustomerID, FirstName, MiddleInitial, LastName]\n- Table: Products, Columns: [ProductID, Name, Price]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (f1, f2)  VALUES (1, 2);\nDatabase State:\n- Table: tweets, Columns: [id, uid, text, createdate]\n- Table: `user_profiles`, Columns: [uid]\n- Table: follows, Columns: [f1, f2]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (university_id, ranking_criteria_id, year, score)  VALUES (60, 5, 2014, 43);\nDatabase State:\n- Table: ranking_criteria, Columns: [id, ranking_system_id, criteria_name]\n- Table: university_ranking_year, Columns: [university_id, ranking_criteria_id, year, score]\n- Table: university_year, Columns: [university_id, year, num_students, student_staff_ratio, pct_international_students, pct_female_students]\n- Table: university, Columns: [id, country_id, university_name]\n- Table: ranking_system, Columns: [id, system_name]\n- Table: country, Columns: [id, country_name]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (document_code, functional_area_code)  VALUES ('675', '9');\nDatabase State:\n- Table: Documents, Columns: [document_code, document_structure_code, document_type_code, access_count, document_name]\n- Table: Users, Columns: [user_id, role_code, user_name, user_login, password]\n- Table: Roles, Columns: [role_code, role_description]\n- Table: Document_Functional_Areas, Columns: [document_code, functional_area_code]",
        "Response": "Table: Document_Functional_Areas"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Dnumber, Dlocation)  VALUES (1, 'Houston');\nDatabase State:\n- Table: works_on, Columns: [Essn, Pno, Hours]\n- Table: dept_locations, Columns: [Dnumber, Dlocation]\n- Table: project, Columns: [Pname, Pnumber, Plocation, Dnum]\n- Table: department, Columns: [Dname, Dnumber, Mgr_ssn, Mgr_start_date]\n- Table: employee, Columns: [Fname, Minit, Lname, Ssn, Bdate, Address, Sex, Salary, Super_ssn]",
        "Response": "Table: dept_locations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Cartoon` (`id`, `Title`, `Directed_by`, `Written_by`, `Original_air_date`, `Production_code`, `Channel`)  VALUES (8.0, 'Fall of the Blue Beetle!', 'Brandon Vietti', 'James Krieg', 'January23,2009', 108.0, '708');\nDatabase State:\n- Table: `Cartoon`, Columns: [`id`, `Title`, `Directed_by`, `Written_by`, `Original_air_date`, `Production_code`, `Channel`]\n- Table: `TV_Channel`, Columns: [`id`, `series_name`, `Country`, `Language`, `Content`, `Pixel_aspect_ratio_PAR`, `Hight_definition_TV`, `Pay_per_view_PPV`, `Package_Option`]",
        "Response": "Table: `Cartoon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `contains_the_administrative_territorial_entity`, `country`, `instance_of`, `area`, `locator_map_image`, `freebase_id`)  VALUES ('canton of Lun\u00e9ville-Nord', 'canton of France (until March 2015)', '48.64445587', 'arrondissement of Lun\u00e9ville', 'Anthelupt', 'France', 'canton of France (until 2015)', NULL, 'nan', 'nan');\nDatabase State:\n- Table: `follows`, Columns: [`label`, `description`, `sport`, `instance_of`, `country`, `point_in_time`, `series_ordinal`, `winner`, `followed_by`, `follows`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `contains_the_administrative_territorial_entity`, `country`, `instance_of`, `area`, `locator_map_image`, `freebase_id`]\n- Table: `crit\u00e9rium_des_as`, Columns: [`label`, `description`, `sport`, `instance_of`, `country`, `point_in_time`, `series_ordinal`, `winner`, `followed_by`, `follows`]\n- Table: `political_border`, Columns: [`label`, `description`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`, `commons_category`, `locator_map_image`, `coordinate_location`, `official_website`, `topics_main_category`, `shares_border_with`, `geonames_id`, `image`, `population`, `postal_code`, `area`, `whos_on_first_id`, `freebase_id`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Id`)  VALUES (270, '19.2', 8, 305.0, '145', 3425, 13.19999999999999929, 1978);\nDatabase State:\n- Table: `model_list`, Columns: [`ModelId`]\n- Table: `car_makers`, Columns: [`Id`]\n- Table: `car_names`, Columns: [`MakeId`]\n- Table: `countries`, Columns: [`CountryId`]\n- Table: `continents`, Columns: [`ContId`]\n- Table: `cars_data`, Columns: [`Id`]",
        "Response": "Table: `cars_data`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `capital`, `viaf_id`, `commons_category`, `contains_the_administrative_territorial_entity`, `head_of_government`, `instance_of`, `located_in_time_zone`, `image`, `locator_map_image`, `coordinate_location`, `topics_main_category`, `musicbrainz_area_id`, `geonames_id`, `category_of_associated_people`, `freebase_id`, `official_website`, `shares_border_with`, `area`, `openstreetmap_relation_id`, `population`, `whos_on_first_id`, `inaturalist_place_id`, `country`, `located_in_the_administrative_territorial_entity`)  VALUES ('South Korea', 'country in East Asia', 'Seoul', '132441370.0', 'South Korea', 'Seoul', 'Yoon Suk-yeol', 'sovereign state', 'Asia/Seoul', 'Seoul (175734251).jpeg', 'South Korea (orthographic projection).svg', '36.0', 'Category:South Korea', 'b9f7d640-46e8-313e-b158-ded6d18593b3', '1835841.0', 'Category:South Korean people', '/m/06qd3', 'http://www.korea.go.kr/main', 'North Korea', 100295.0, '307756.0', 51466201.0, '85632231.0', '6891.0', 'South Korea', 'nan');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `capital`, `viaf_id`, `commons_category`, `contains_the_administrative_territorial_entity`, `head_of_government`, `instance_of`, `located_in_time_zone`, `image`, `locator_map_image`, `coordinate_location`, `topics_main_category`, `musicbrainz_area_id`, `geonames_id`, `category_of_associated_people`, `freebase_id`, `official_website`, `shares_border_with`, `area`, `openstreetmap_relation_id`, `population`, `whos_on_first_id`, `inaturalist_place_id`, `country`, `located_in_the_administrative_territorial_entity`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`)  VALUES ('SO - 0007753', 'Distributor', 'WARE-PUJ1005', '9/26/20', '11/19/20', '12/2/20', '12/7/20', 'USD', 22, 48, 316, 33, 3, 0.2000000000000000111, '221.10', '106.13');\nDatabase State:\n- Table: Customers, Columns: [CustomerID, `Customer Names`]\n- Table: `Store Locations`, Columns: [StoreID, `City Name`, County, StateCode, State, Type, Latitude, Longitude, AreaCode, Population, `Household Income`, `Median Income`, `Land Area`, `Water Area`, `Time Zone`]\n- Table: `Sales Orders`, Columns: [OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`]",
        "Response": "Table: `Sales Orders`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('Mrm1p YOR201C', 'fungal protein found in Saccharomyces cerevisiae S288c', 'MRM1', 'P25270', 'rRNA processing', 'rRNA (guanine-N1-)-methyltransferase activity', 'tRNA/rRNA methyltransferase, SpoU type', 'Saccharomyces cerevisiae S288c', 'NP_014844', 'protein', 'tRNA (guanine-N1-)-methyltransferase, N-terminal', 'protein');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `instance_of`, `strand_orientation`, `genomic_start`, `genomic_end`, `ncbi_locus_tag`]",
        "Response": "Table: `rna_methyltransferase_trmh_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `broadcast` (`Channel_ID`, `Program_ID`, `Time_of_day`)  VALUES (3, 2, 'Morning');\nDatabase State:\n- Table: `broadcast`, Columns: [`Channel_ID`, `Program_ID`, `Time_of_day`]\n- Table: `channel`, Columns: [`Channel_ID`, `Name`, `Owner`, `Share_in_percent`, `Rating_in_percent`]\n- Table: `program`, Columns: [`Program_ID`, `Name`, `Origin`, `Launch`, `Owner`]",
        "Response": "Table: `broadcast`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (name, age, city, gender, job)  VALUES ('Dan', 26, 'chicago', 'female', 'student');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `ensembl_protein_id`, `refseq_protein_id`, `biological_process`, `cell_component`, `molecular_function`, `instance_of`, `part_of`)  VALUES ('Phosphatidylinositol transfer protein membrane associated 1', 'mammalian protein found in Homo sapiens', 'O00562', 'Homo sapiens', 'PITPNM1', 'ENSP00000348772', 'NP_001124320', 'protein transport', 'Golgi cisterna membrane', 'protein binding', 'protein', 'HAD-like superfamily');\nDatabase State:\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `homologene_id`, `refseq_rna_id`, `ensembl_transcript_id`, `ortholog`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `expressed_in`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Claims_Processing_Stages (Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description)  VALUES (1, 1, 'Open', 'Open a new claim');\nDatabase State:\n- Table: Claims_Processing, Columns: [Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID]\n- Table: Claims_Documents, Columns: [Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date]\n- Table: Claims_Processing_Stages, Columns: [Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description]\n- Table: Staff, Columns: [Staff_ID, Staff_Details]",
        "Response": "Table: Claims_Processing_Stages"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details)  VALUES (10, 14, 15, '0182', '1973-06-20 14:26:43', NULL);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Shipments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `acupuncture_point` (`label`, `description`, `instance_of`, `part_of`)  VALUES ('ST-27', 'nan', 'acupuncture point', 'Stomach channel');\nDatabase State:\n- Table: `acupuncture_point`, Columns: [`label`, `description`, `instance_of`, `part_of`]",
        "Response": "Table: `acupuncture_point`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `user_reviews` (App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity)  VALUES ('ASUS SuperNote', 'I like flaw I like limited page size, I''d like option text page endless text. This makes easier copy paste large groups text.', 'Positive', '0.0059523809523809494', '0.44047619047619047');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `user_reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `pyrimidine_nucleoside_phosphorylase_like_c_terminal_domain_superfamily` (`label`, `description`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Pyrimidine-nucleoside phosphorylase SAOUHSC_02377', 'microbial protein found in Staphylococcus aureus subsp. aureus NCTC 8325', 'protein', 'pyrimidine-nucleoside phosphorylase SAOUHSC_02377', 'Q2FWC1', 'pyrimidine nucleoside metabolic process', 'thymidine phosphorylase activity', 'Pyrimidine nucleoside phosphorylase, C-terminal', 'Staphylococcus aureus subsp. aureus NCTC 8325', 'YP_500854', 'protein', 'Pyrimidine-nucleoside phosphorylase, bacterial/eukaryotic');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `pyrimidine_nucleoside_phosphorylase_like_c_terminal_domain_superfamily`, Columns: [`label`, `description`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `pyrimidine_nucleoside_phosphorylase_like_c_terminal_domain_superfamily`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Visits (Visit_ID, Tourist_Attraction_ID, Tourist_ID, Visit_Date, Visit_Details)  VALUES (866, 8429, 545, '1971-12-16 06:41:26', '');\nDatabase State:\n- Table: Locations, Columns: [Location_ID, Location_Name, Address, Other_Details]\n- Table: Royal_Family, Columns: [Royal_Family_ID, Royal_Family_Details]\n- Table: Visitors, Columns: [Tourist_ID, Tourist_Details]\n- Table: Features, Columns: [Feature_ID, Feature_Details]\n- Table: Ref_Attraction_Types, Columns: [Attraction_Type_Code, Attraction_Type_Description]\n- Table: Museums, Columns: [Museum_ID, Museum_Details]\n- Table: Visits, Columns: [Visit_ID, Tourist_Attraction_ID, Tourist_ID, Visit_Date, Visit_Details]\n- Table: Hotels, Columns: [hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details]\n- Table: Theme_Parks, Columns: [Theme_Park_ID, Theme_Park_Details]\n- Table: Ref_Hotel_Star_Ratings, Columns: [star_rating_code, star_rating_description]\n- Table: Tourist_Attraction_Features, Columns: [Tourist_Attraction_ID, Feature_ID]\n- Table: Photos, Columns: [Photo_ID, Tourist_Attraction_ID, Name, Description, Filename, Other_Details]\n- Table: Staff, Columns: [Staff_ID, Tourist_Attraction_ID, Name, Other_Details]\n- Table: Tourist_Attractions, Columns: [Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details]\n- Table: Shops, Columns: [Shop_ID, Shop_Details]",
        "Response": "Table: Visits"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional)  VALUES (1224, 466, 1339, 1.0, 1.0, 'dash(es)', NULL, 'FALSE');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Quantity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `organization` (`label`, `description`, `viaf_id`, `commons_category`, `topics_main_category`, `freebase_id`, `library_of_congress_authority_id`, `gnd_id`, `has_parts`, `described_by_source`, `office_held_by_head_of_the_organization`, `instance_of`, `has_parts_of_the_class`, `catholic_encyclopedia_id`, `great_russian_encyclopedia_online_id`, `coat_of_arms_image`, `encyclop\u00e6dia_britannica_online_id`, `isni`, `nkcr_aut_id`, `biblioth\u00e8que_nationale_de_france_id`, `worldcat_identities_id`, `official_website`, `hill_museum_manuscript_library_id`, `inception`, `founded_by`, `encyclop\u00e6dia_universalis_id`)  VALUES ('Order of the Blessed Virgin Mary of Mercy', 'Roman Catholic religious mendicant order', '55150565556406250709', 'Order of the Blessed Virgin Mary of Mercy', 'Category:Order of the Blessed Virgin Mary of Mercy', '/m/0bcm4z', 'n82075577', '4223939-4', 'mercedarian friar', 'nan', 'Master General of Order of Our Lady of Mercy', 'mendicant order', 'nan', '10197b', '2206050.0', 'Coat of Arms of the Mercedarians.svg', 'topic/Mercedarian-order', '0000 0001 1512 2076', 'nan', 'nan', 'viaf-130050630', 'http://orderofmercy.org/', 'organization/782879874796', '+1218-00-00T00:00:00Z', 'Peter Nolasco', 'mercedaires');\nDatabase State:\n- Table: `organization_leader`, Columns: [`label`, `description`, `subclass_of`, `instance_of`, `has_list`, `organization_directed_by_the_office_or_position`]",
        "Response": "Table: `organization`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`stadium_id`, `id`, `Season`, `Date`, `Home_team`, `Away_team`, `Score`, `Competition`)  VALUES (2, 14, 2012, '11 March 2012', 'Bunyodkor', 'Pakhtakor', '\u2013', 'Supercup');\nDatabase State:\n- Table: `injury_accident`, Columns: [`game_id`, `id`, `Player`, `Injury`, `Number_of_matches`, `Source`]",
        "Response": "Table: `game`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `gas_station` (`Station_ID`, `Open_Year`, `Location`, `Manager_Name`, `Vice_Manager_Name`, `Representative_Name`)  VALUES (6, 2004, 'Herne Ave', 'Tom Whit', 'Simon Gaywood', 'Tony Gibb');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `gas_station`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO CHECKING (custid, balance)  VALUES (1, 10000.0);\nDatabase State:\n- Table: ACCOUNTS, Columns: [custid, name]\n- Table: SAVINGS, Columns: [custid, balance]",
        "Response": "Table: CHECKING"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity)  VALUES ('Alto''s Adventure', 'Just beautiful game, fun gameplay, overall second favorite app. My problem, takes long time get new characters.', 'Positive', '0.16704545454545455', '0.43181818181818177');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `user_reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO breweries (id, name, city, state)  VALUES (30, 'SanTan Brewing Company', 'Chandler', 'AZ');\nDatabase State:\n- Table: breweries, Columns: [id, name, city, state]",
        "Response": "Table: breweries"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO matchs (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('EC', '2008-08-30', 'Kettering Town', 'Woking', 1, 0, 'H', 2009);\nDatabase State:\n- Table: divisions, Columns: [division, name, country]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Sales Orders` (OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`)  VALUES ('SO - 0001864', 'In-Store', 'WARE-NBV1002', '7/19/18', '12/25/18', '1/1/19', '1/7/19', 'USD', 4, 36, 67, 3, 3, 0.05000000000000000277, '1,855.90', '1,132.10');\nDatabase State:\n- Table: `Sales Orders`, Columns: [OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`]\n- Table: `Store Locations`, Columns: [StoreID, `City Name`, County, StateCode, State, Type, Latitude, Longitude, AreaCode, Population, `Household Income`, `Median Income`, `Land Area`, `Water Area`, `Time Zone`]\n- Table: Customers, Columns: [CustomerID, `Customer Names`]\n- Table: Regions, Columns: [StateCode, State, Region]\n- Table: Products, Columns: [ProductID, `Product Name`]",
        "Response": "Table: `Sales Orders`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `coordinate_location`, `country`, `instance_of`, `locator_map_image`, `located_in_the_administrative_territorial_entity`, `located_in_time_zone`, `population`, `geonames_id`, `whos_on_first_id`, `openstreetmap_relation_id`)  VALUES ('Municipality of Messene', 'municipality of Greece', '37.0539', 'Greece', 'municipality of Greece', '2011 Dimos Messinis.png', 'Peloponnese Region', 'UTC+02:00', 23482.0, '8133986.0', '1125327829.0', '2171630.0');\nDatabase State:\n- Table: `greek_theatre`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `image`, `located_in_the_administrative_territorial_entity`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `locator_map_image`, `located_in_the_administrative_territorial_entity`, `located_in_time_zone`, `population`, `geonames_id`, `whos_on_first_id`, `openstreetmap_relation_id`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Bacterial transglutaminase domain family protein KVU_0090', 'microbial protein found in Ketogulonicigenium vulgare WSH-001', 'protein', 'F9Y7W2', 'bacterial transglutaminase domain family protein KVU_0090', 'Ketogulonicigenium vulgare WSH-001', 'Bacterial transglutaminase-like, N-terminal', 'protein', 'YP_005793924', 'Papain-like cysteine peptidase superfamily');\nDatabase State:\n- Table: `bacterial_transglutaminase_like_n_terminal_domain_protein_family`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_rank`, `parent_taxon`, `taxon_name`, `instance_of`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `catalogue_of_life_id`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID)  VALUES ('555-22-3333', 'Rubin', 'Patricia', '7/25/03', 'US$45,000.00', 'F', 'Average', 1, 2);\nDatabase State:\n- Table: location, Columns: [locationID, locationcity, address, state, zipcode, officephone]\n- Table: employee, Columns: [ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID]\n- Table: position, Columns: [positionID, positiontitle, educationrequired, minsalary, maxsalary]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Business_Hours` (business_id, day_id, opening_time, closing_time)  VALUES (568, 6, '10AM', '7PM');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Business_Hours`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `ribosomal_protein_l36_superfamily` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('50S ribosomal protein L36 SMc04003', 'microbial protein found in Sinorhizobium meliloti 1021', '50S ribosomal protein L36 SMc04003', 'Q92M65', 'protein biosynthesis', 'structural constituent of ribosome', 'intracellular anatomical structure', 'Sinorhizobium meliloti 1021', 'NP_386893', 'protein', 'Ribosomal protein L36', 'protein');\nDatabase State:\n- Table: `ribosomal_protein_l36_superfamily`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]",
        "Response": "Table: `ribosomal_protein_l36_superfamily`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Airlines (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  VALUES ('2018/8/9', 20237, 'N616AE', 4271, 12323, 1232305, 32323, 'ILM', 11278, 1127805, 30852, 'DCA', 932, NULL, NULL, NULL, NULL, NULL, NULL, 1, 'A', 87, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: `Air Carriers`, Columns: [Code, Description]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO sales_in_weather (date, store_nbr, item_nbr, units)  VALUES ('2012-02-19', 28, 91, 0);\nDatabase State:\n- Table: weather, Columns: [station_nbr, date, tmax, tmin, tavg, depart, dewpoint, wetbulb, heat, cool, sunrise, sunset, codesum, snowfall, preciptotal, stnpressure, sealevel, resultspeed, resultdir, avgspeed]\n- Table: sales_in_weather, Columns: [date, store_nbr, item_nbr, units]\n- Table: relation, Columns: [store_nbr, station_nbr]",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `beers` (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (1764, 43, 0.08100000000000000255, NULL, 'Rudolph''s Red', 'American Amber / Red Ale', 12.0);\nDatabase State:\n- Table: breweries, Columns: [id, name, city, state]",
        "Response": "Table: `beers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `commons_category`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `inception`, `heritage_designation`, `image`, `street_address`, `lfds_object_id`)  VALUES ('Sachgesamtheit Kirchberg 2-4 Chemnitz Gl\u00f6sa/Draisdorf', 'nan', 'asset group', 'Sachgesamtheit Kirchberg 2-4, Chemnitz-Gl\u00f6sa-Draisdorf', 'Germany', '50.868', 'Gl\u00f6sa-Draisdorf', 'nan', 'cultural heritage monument in Germany', 'Kirchberg Chemnitz.JPG', 'Kirchberg 2; 3; 4', '9302691.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `asset_group`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid)  VALUES (15, 4, 12, 'Credit Card', '1', '2018-03-17 03:07:45', 631.92999999999995, 334.1999999999999887);\nDatabase State:\n- Table: Bookings, Columns: [booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding, amount_of_refund]\n- Table: Payments, Columns: [payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid]",
        "Response": "Table: Payments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO bank (branch_ID, bname, no_of_customers, city, state)  VALUES (4, 'high', 367, 'Austin', 'Texas');\nDatabase State:\n- Table: bank, Columns: [branch_ID, bname, no_of_customers, city, state]",
        "Response": "Table: bank"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, date, violation_type_id, risk_category, description)  VALUES (1122, '2016-03-29', '103145', 'Low Risk', 'Improper storage of equipment utensils or linens');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: violations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Flocculin FLO9 YAL063C', 'fungal protein found in Saccharomyces cerevisiae S288c', 'FLO9', 'P39712', 'mannose binding', 'Flocculin type 3 repeat', 'Saccharomyces cerevisiae S288c', 'NP_009338', 'protein', 'membrane proteins');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `molecular_function`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `pa14_domain_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`]\n- Table: `part`, Columns: [`label`, `description`, `interpro_id`, `instance_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`)  VALUES ('hypothetical protein smi_0296', 'microbial gene found in Streptococcus mitis B6', 'Streptococcus mitis B6', '8799015', 'gene', 'Hypothetical protein smi_0296', 'smi_0296', '293080', 'forward strand', 'gene', '292202');\nDatabase State:\n- Table: `ribosome_biogenesis_gtpase_rsga`, Columns: [`label`, `description`, `uniprot_protein_id`, `refseq_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `has_parts`, `molecular_function`, `biological_process`, `cell_component`, `part_of`, `instance_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (document_id, draft_number, draft_details)  VALUES (12, 12, 'r');\nDatabase State:\n- Table: Documents, Columns: [document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details]\n- Table: Draft_Copies, Columns: [document_id, draft_number, copy_number]\n- Table: Documents_Mailed, Columns: [document_id, mailed_to_address_id, mailing_date]\n- Table: Ref_Document_Status, Columns: [document_status_code, document_status_description]\n- Table: Addresses, Columns: [address_id, address_details]\n- Table: Ref_Document_Types, Columns: [document_type_code, document_type_description]\n- Table: Circulation_History, Columns: [document_id, draft_number, copy_number, employee_id]\n- Table: Roles, Columns: [role_code, role_description]\n- Table: Employees, Columns: [employee_id, role_code, employee_name, other_details]",
        "Response": "Table: Document_Drafts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `u2base` (userid, movieid, rating)  VALUES (2718, 1847080, '5');\nDatabase State:\n- Table: `movies2actors`, Columns: [movieid, actorid, cast_num]\n- Table: `u2base`, Columns: [userid, movieid, rating]\n- Table: `actors`, Columns: [actorid, a_gender, a_quality]",
        "Response": "Table: `u2base`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `taxon_name`, `taxon_rank`, `freebase_id`, `ncbi_taxonomy_id`, `parent_taxon`, `instance_of`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`, `catalogue_of_life_id`)  VALUES ('Mycobacterium', 'genus of bacteria', 'Mycobacterium', 'genus', '/m/0238wp', '1763.0', 'Mycobacteriaceae', 'taxon', '3225061.0', '189415.0', 'gram-positive bacteria', '1115466.0', 'https://lpsn.dsmz.de/genus/mycobacterium', '2780374374.0', '63CRH');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `refseq_protein_id`, `uniprot_protein_id`, `found_in_taxon`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `encoded_by`, `part_of`, `instance_of`, `subclass_of`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `area`, `dantai_code`, `commons_category`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `topics_main_category`, `instance_of`, `freebase_id`, `population`, `geonames_id`, `image`, `official_website`, `corporate_number_japan`, `located_in_time_zone`, `name_in_kana`, `opencorporates_id`, `geonlp_id`, `shares_border_with`, `inception`, `replaces`, `inaturalist_place_id`)  VALUES ('Shikokuch\u016b\u014d', 'city in Ehime prefecture, Japan', 421.240000000000009, '382132', 'Shikokuchuo, Ehime', 'Japan', 'Ehime Prefecture', '33.98072222222222', 'Category:Shikokuch\u016b\u014d', 'city of Japan', '/m/039ycz', 82320.0, '7406319', 'Front of Iyodoi Station 4888.JPG', 'https://www.city.shikokuchuo.ehime.jp/', '5000020382132', 'UTC+09:00', '\u3057\u3053\u304f\u3061\u3085\u3046\u304a\u3046\u3057', 'jp/5000020382132', 'dAsiFq', 'Niihama', '+2004-04-01T00:00:00Z', 'Kawanoe', '100821');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO region_sales (region_id, game_platform_id, num_sales)  VALUES (3, 5777, 0.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Crime (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11443308, 'JB430612', '9/10/2018 20:24', '006XX W JACKSON BLVD', '860', 'SMALL RETAIL STORE', 'FALSE', 'FALSE', 121, 1, 2, 28, '6', '41.87799992', '-87.64309875');\nDatabase State:\n- Table: Neighborhood, Columns: [neighborhood_name, community_area_no]\n- Table: Community_Area, Columns: [community_area_no, community_area_name, side, population]\n- Table: FBI_Code, Columns: [fbi_code_no, title, description, crime_against]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `natural_product` (`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Caenorhabditis elegans', 'free-living species of nematode', 'taxon', 'Caenorhabditis elegans', 'Caenorhabditis', '6239', 'nan', 'nan');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `asparagine_trna_ligase`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO longest_absense_from_school (`name`, `month`)  VALUES ('student953', 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: longest_absense_from_school"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `limassol_municipality` (`label`, `description`, `commons_category`, `located_in_the_administrative_territorial_entity`, `instance_of`, `country`, `coordinate_location`, `located_in_time_zone`, `local_dialing_code`, `official_name`, `native_label`, `shares_border_with`, `population`, `part_of`, `geonames_id`, `coordinates_of_northernmost_point`, `coordinates_of_easternmost_point`, `coordinates_of_southernmost_point`, `coordinates_of_westernmost_point`, `locator_map_image`, `statistical_service_of_cyprus_geocode`, `google_knowledge_graph_id`)  VALUES ('Agios Spiridonas', 'quarter of Limassol Municipality', 'Saint Spyridon, Limassol', 'Limassol Municipality', 'Quarter of Limassol Municipality', 'Cyprus', '34.67274221', 'UTC+02:00', '357 25', '\u0386\u03b3\u03b9\u03bf\u03c2 \u03a3\u03c0\u03c5\u03c1\u03af\u03b4\u03c9\u03bd\u03b1\u03c2', '\u0386\u03b3\u03b9\u03bf\u03c2 \u03a3\u03c0\u03c5\u03c1\u03af\u03b4\u03c9\u03bd\u03b1\u03c2', 'Zakaki', 9439.0, 'Limassol Municipality', '11887986.0', '34.67598921', '34.66292984', '34.66081191', '34.67274221', 'LimassolSaint Spyridonas.png', '5000-20', '/g/120t3s5l');\nDatabase State:\n- Table: `limassol_municipality`, Columns: [`label`, `description`, `commons_category`, `located_in_the_administrative_territorial_entity`, `instance_of`, `country`, `coordinate_location`, `located_in_time_zone`, `local_dialing_code`, `official_name`, `native_label`, `shares_border_with`, `population`, `part_of`, `geonames_id`, `coordinates_of_northernmost_point`, `coordinates_of_easternmost_point`, `coordinates_of_southernmost_point`, `coordinates_of_westernmost_point`, `locator_map_image`, `statistical_service_of_cyprus_geocode`, `google_knowledge_graph_id`]",
        "Response": "Table: `limassol_municipality`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (council_tax_id, cmi_cross_ref_id)  VALUES (6, 41);\nDatabase State:\n- Table: Parking_Fines, Columns: [council_tax_id, cmi_cross_ref_id]\n- Table: Electoral_Register, Columns: [electoral_register_id, cmi_cross_ref_id]",
        "Response": "Table: Benefits_Overpayments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID)  VALUES (1315, 'Beawar', 'IND', 'Rajasthan', 105363);\nDatabase State:\n- Table: country, Columns: [Code]\n- Table: countrylanguage, Columns: [CountryCode]",
        "Response": "Table: city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('oxidoreductase, GMC family CCNA_00994', 'microbial gene found in Caulobacter vibrioides NA1000', '7333126', 'protein-coding gene', 'Oxidoreductase, GMC family CCNA_00994', 'Caulobacter crescentus NA1000', 'reverse strand', '1077075.0', '1075408.0', 'gene', 'CCNA_00994');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `glucose_oxidase_domain_2`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `evaluation` (`Employee_ID`, `Year_awarded`, `Bonus`)  VALUES ('10', '2016', 4000.0);\nDatabase State:\n- Table: `evaluation`, Columns: [`Employee_ID`, `Year_awarded`, `Bonus`]\n- Table: `hiring`, Columns: [`Shop_ID`, `Employee_ID`, `Start_from`, `Is_full_time`]",
        "Response": "Table: `evaluation`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `country` (`label`, `description`, `great_russian_encyclopedia_online_id`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `coordinates_of_southernmost_point`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `new_york_times_topic_id`, `babelnet_id`, `geonames_id`, `gnd_id`, `unicode_character`, `category_of_associated_people`, `emergency_phone_number`, `unesco_thesaurus_id`, `electrical_plug_type`, `coordinates_of_westernmost_point`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `official_name`, `office_held_by_head_of_government`, `isni`, `quora_topic_id`, `country`, `native_label`, `basic_form_of_government`, `musicbrainz_area_id`, `has_quality`, `coat_of_arms_image`, `mesh_descriptor_id`, `insee_countries_and_foreign_territories_code`, `diplomatic_relation`, `ituisoiec_object_identifier`, `commons_gallery`, `legislative_body`, `inception`, `civicus_monitor_country_entry`, `history_of_topic`, `gran_enciclop\u00e8dia_catalana_id`, `biblioth\u00e8que_nationale_de_france_id`, `stw_thesaurus_for_economics_id`, `replaces`, `viaf_id`, `continent`, `capital`, `official_website`, `coat_of_arms`, `demonym`, `geoshape`, `on_focus_list_of_wikimedia_project`, `wipo_st3`, `national_library_of_israel_id_old`, `coordinates_of_northernmost_point`, `nkcr_aut_id`, `comic_vine_id`, `mobile_country_code`, `total_fertility_rate`, `maritime_identification_digits`, `us_national_archives_identifier`, `shares_border_with`, `openstreetmap_relation_id`, `topics_main_category`, `le_monde_diplomatique_subject_id`, `head_of_state`, `central_bank`, `locator_map_image`, `coordinates_of_easternmost_point`, `area`, `head_of_government`, `ioc_country_code`, `member_of`, `fast_id`, `store_norske_leksikon_id`, `unemployment_rate`, `licence_plate_code`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `page_banner`, `category_for_films_shot_at_this_location`, `mains_voltage`, `executive_body`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `anthem`, `office_held_by_head_of_state`, `life_expectancy`, `commons_category`, `top_level_internet_domain`, `instance_of`, `highest_point`, `hds_id`, `short_name`, `number_of_out_of_school_children`, `driving_side`, `gacs_id`, `lowest_point`, `brockhaus_enzyklop\u00e4die_online_id`, `iso_3166_1_numeric_code`, `official_language`, `idref_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `country_calling_code`, `freebase_id`, `statoids_id`, `library_of_congress_authority_id`, `iso_3166_1_alpha_2_code`, `motto_text`, `flag`, `coordinate_location`, `fips_10_4_countries_and_regions`, `language_used`, `described_by_source`, `flag_image`, `iab_code`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `whos_on_first_id`, `the_top_tens_id`, `world_encyclopedia_of_puppetry_arts_id`, `dr_topic_id`, `omegawiki_defined_meaning`, `culture`, `geonlp_id`, `analysis_policy_observatory_term_id`, `treccanis_dizionario_di_storia_id`, `category_for_maps`, `vat_rate`, `french_vikidia_id`, `spanish_vikidia_id`, `pronunciation_audio`, `worldcat_identities_id`, `eurovoc_id`, `kbpedia_id`, `grove_art_online_id`, `bti_status_index`, `bti_governance_index`, `gynopedia_id`, `rkd_thesaurus_id`, `subreddit`, `interlingual_index_id`, `bbc_news_topic_id`, `tasteatlas_id`, `economy_of_topic`, `github_topic`, `uk_parliament_thesaurus_id`, `wordnet_31_synset_id`, `namuwiki_id`, `demographics_of_topic`, `inaturalist_place_id`, `joconde_location_id`, `zhihu_topic_id`, `ysa_id`, `yle_topic_id`, `krugosvet_article`, `online_pwn_encyclopedia_id`, `the_world_factbook_country_id`, `democracy_index`, `museum_digital_place_id`, `wikisimpsons_id`, `den_store_danske_id`, `urban_electric_transit_country_id`, `hashtag`, `postimees_topic_id`, `m49_code`, `alltrails_trail_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `image`, `gini_coefficient`, `obo_gazetteer_id`, `openstreetmap_element`, `happy_planet_index_score`, `dewey_decimal_classification`, `curlie_id`, `cna_topic_id`, `national_library_of_israel_j9u_id`)  VALUES ('Indonesia', 'country in Southeast Asia and Oceania', '2010387', 275439000.0, '1000116.0', 'Portal:Indonesia', '-11.0075579', 'outline of Indonesia', '871922', 'rupiah', 'destination/indonesia', '00029223n', '1643084', '4026761-1', '\ud83c\uddee\ud83c\udde9', 'Category:Indonesian people', '112', 'concept830', 'Europlug', '5.72395034', 'geography of Indonesia', 'IDN', 'Republik Indonesia', 'President of Indonesia', '0000 0004 0392 1382', 'Indonesia', 'Indonesia', 'Republik Indonesia', 'republic', 'd3a68bd0-7419-3f99-a5bd-204d6e057089', 'partly free country', 'National emblem of Indonesia Garuda Pancasila.svg', 'D007214', '99231.0', 'Canada', '2.16.360', 'Indonesia', 'People''s Consultative Assembly', '+1945-08-17T00:00:00Z', 'indonesia', 'History of Indonesia', '33596', '15323043s', '17578-0', 'Dutch East Indies', '125405737', 'Asia', 'Jakarta', 'https://indonesia.go.id', 'National emblem of Indonesia', 'Indonesian', 'Data:Indonesia.map', 'Wikipedia:List of articles all languages should have', 'ID', '980148.0', '5.9', 'ge129385', '4020-56519', '510.0', 2.040000000000000035, '525.0', '10035695.0', 'East Timor', '304751.0', 'Category:Indonesia', 'pays/indonesie', 'Joko Widodo', 'Bank Indonesia', 'Indonesia (orthographic projection).svg', '-9.12690641', 1904570.0, 'Joko Widodo', 'INA', 'ASEAN', '1209242.0', 'Indonesia', 6.0, 'RI', '2990.0', 'place/Indonesia', 'Bali banner Sunset.jpg', 'Category:Films shot in Indonesia', 127.0, 'Government of Indonesia', 'Indonesia Western Standard Time', 'Category:Deaths in Indonesia', '105242.0', 'Indonesia Raya', 'President of Indonesia', 69.1910000000000025, 'Indonesia', '.id', 'country', 'Puncak Jaya', '3408.0', '\ud83c\uddee\ud83c\udde9', 8523872.0, 'left', '199.0', 'Indian Ocean', 'indonesien', '360.0', 'Indonesian', '026385864', 'Bali', 'INS', '62.0', '/m/03ryn', 'uid', 'n80083633', 'ID', 'Bhinneka Tunggal Ika', 'flag of Indonesia', '-2.0', 'ID', 'Jambi Malay', 'TASS Encyclopedia', 'Flag of Indonesia.svg', '1320.0', 'Indonesien', 'countries/io', '85632203.0', '61.0', 'indonesia', 'indonesien', '5739.0', 'Culture of Indonesia', 'RhUjgZ', '2995.0', 'indonesia', 'Category:Maps of Indonesia', 10.0, 'Indon\u00e9sie', 'Indonesia', 'Lb-Indonesien.ogg', 'lccn-n80083633', '1355.0', 'Indonesia-TheNation', 'T041100', 6.040000000000000035, 4.839999999999999858, 'Indonesia', '39.0', 'indonesia', 'i83552', 'cmj34zmw7vmt', 'indonesia', 'economy of Indonesia', 'indonesia', '10891.0', '08927379-n', '\uc778\ub3c4\ub124\uc2dc\uc544', 'demographics of Indonesia', '6966.0', 'T84-297', '19663445.0', 'Y105242', '18-174549', 'strany_mira/INDONEZIYA.html', '4169054', 'indonesia', 6.299999999999999823, 'nan', '48778.0', 'Indonesien', '105.0', 'Indonesia', '2136.0', '360.0', 'indonesia', 0.7049999999999999601, 'geo/C3B76495-046A-4E75-9039-F3CFF52F77B5', 'Q388', 'Indonesia provinces english.png', 37.89999999999999858, '3727.0', 'node/6677037562', 49.60000000000000142, '2--598', 'Regional/Asia/Indonesia/', 'indonesia', '9.870075525048051e+17');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `country`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `country`, `coordinate_location`, `instance_of`, `freebase_id`, `located_in_the_administrative_territorial_entity`, `vision_of_britain_place_id`, `geonames_id`, `whos_on_first_id`, `image`, `openstreetmap_relation_id`, `historic_county`, `gss_code_2011`, `toid`, `vision_of_britain_unit_id`, `factgrid_item_id`)  VALUES ('Addington', 'village and civil parish in Tonbridge and Malling in Kent, England, UK', 'Addington, Kent', 'United Kingdom', '51.298', 'village', '/m/07rmrx', 'Tonbridge and Malling', '4407.0', '7295909.0', '1343297417.0', 'Addington Long Barrow, north side of road 04.jpg', '2328817', 'Kent', 'E04005089', '7000000000018529.0', '10149538.0', 'Q196522');\nDatabase State:\n- Table: `flag`, Columns: [`label`, `description`, `country`, `instance_of`, `image`, `applies_to_jurisdiction`, `freebase_id`]\n- Table: `political_border`, Columns: [`label`, `description`, `instance_of`, `country`, `flag_image`, `locator_map_image`, `shares_border_with`, `population`, `flag`, `different_from`, `vision_of_britain_place_id`, `coordinate_location`, `catalog_code`, `commons_category`, `factgrid_item_id`]\n- Table: `chambered_long_barrow`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `historic_county`, `national_heritage_list_for_england_number`, `heritage_designation`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `found_in_taxon`, `encoded_by`, `cell_component`, `instance_of`)  VALUES ('phospholipid-transporting ATPase 2', 'nan', 'Plasmodium chabaudi', 'ATP2', 'integral component of membrane', 'protein');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `refseq_rna_id`, `ortholog`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `found_in_taxon`, `encoded_by`, `cell_component`, `instance_of`]\n- Table: `orthology`, Columns: [`label`, `description`, `subclass_of`, `chromosome`, `found_in_taxon`, `encodes`, `ortholog`, `strand_orientation`, `instance_of`, `genomic_start`, `genomic_end`]\n- Table: `p_type_atpase_subfamily_iv`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `instance_of`, `part_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `route` (`train_id`, `station_id`)  VALUES (7, 4);\nDatabase State:\n- Table: `station`, Columns: [`id`, `network_name`, `services`, `local_authority`]",
        "Response": "Table: `route`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EVENTID, REFID, EVENT_DATE, AMOUNT)  VALUES (851785, 89545, '2007-06-24 12:00:00.0', 15.42999999999999972);\nDatabase State:\n- Table: mailings3, Columns: [REFID, REF_DATE, RESPONSE]\n- Table: `Mailings1_2`, Columns: [REFID, REF_DATE, RESPONSE]",
        "Response": "Table: `Sales`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Payments (payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid)  VALUES (14, 5, 5, 'Direct Debit', '1', '2018-03-17 15:51:52', 407.509999999999991, 704.4099999999999682);\nDatabase State:\n- Table: Discount_Coupons, Columns: [coupon_id, date_issued, coupon_amount]\n- Table: View_Product_Availability, Columns: [product_id, booking_id, status_date, available_yn]\n- Table: Products_for_Hire, Columns: [product_id, product_type_code, daily_hire_cost, product_name, product_description]\n- Table: Products_Booked, Columns: [booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount]\n- Table: Customers, Columns: [customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire]\n- Table: Payments, Columns: [payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid]",
        "Response": "Table: Payments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `ship` (`Ship_ID`, `Name`, `Type`, `Nationality`, `Tonnage`)  VALUES (5, 'Trader', 'Battle ship', 'United Kingdom', 3608);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `ship`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `orthology` (`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `homologene_id`, `found_in_taxon`, `refseq_rna_id`, `ensembl_transcript_id`, `chromosome`, `encodes`, `ortholog`, `strand_orientation`, `instance_of`, `genomic_start`, `genomic_end`, `expressed_in`)  VALUES ('Stx17', 'protein-coding gene in the species Mus musculus', '67727.0', 'protein-coding gene', 'ENSMUSG00000061455', '9917.0', 'house mouse', 'NM_026343', 'ENSMUST00000064765', 'mouse chromosome 4', 'Syntaxin 17', 'STX17', 'forward strand', 'gene', '48124915.0', '48186507.0', 'parotid gland');\nDatabase State:\n- Table: `molecular_function`, Columns: [`label`, `description`, `subclass_of`, `gene_ontology_id`, `exact_match`, `instance_of`]\n- Table: `syntaxin_epimorphin_conserved_site_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `biological_process`, `cell_component`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `homologene_id`, `refseq_rna_id`, `ensembl_transcript_id`, `ortholog`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `expressed_in`]\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]\n- Table: `cellular_component`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]",
        "Response": "Table: `orthology`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1006, 'Schultz', 'Andy', 18, 'M', 600, 1148, 'BAL');\nDatabase State:\n- Table: Visits_Restaurant, Columns: [StuID, ResID, Time, Spent]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Restaurant_Type, Columns: [ResTypeID, ResTypeName, ResTypeDescription]\n- Table: Restaurant, Columns: [ResID, ResName, Address, Rating]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('glutamine synthetase BDGL_002370', 'microbial gene found in Acinetobacter pittii PHEA-2', 'gene', 'Acinetobacter pittii PHEA-2', '11636901', 'BDGL_002370', 'Glutamine synthetase BDGL_002370', 'gene', '2570749', 'reverse strand', '2567999');\nDatabase State:\n- Table: `bifunctional_glutamine_synthetase_adenylyltransferase_adenylyl_removing_enzyme`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `biological_process`, `molecular_function`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (customer_id, first_name, last_name, email)  VALUES (1914, 'Kayle', 'MacPaik', 'kmacpaikpd@dmoz.org');\nDatabase State:\n- Table: address_status, Columns: [status_id, address_status]\n- Table: author, Columns: [author_id, author_name]\n- Table: `order_line`, Columns: [line_id, order_id, book_id, price]\n- Table: shipping_method, Columns: [method_id, method_name, cost]\n- Table: address, Columns: [address_id, street_number, street_name, city, country_id]\n- Table: `order_history`, Columns: [history_id, order_id, status_id, status_date]\n- Table: `cust_order`, Columns: [order_id, order_date, customer_id, shipping_method_id, dest_address_id]\n- Table: country, Columns: [country_id, country_name]\n- Table: customer, Columns: [customer_id, first_name, last_name, email]\n- Table: book, Columns: [book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id]\n- Table: book_language, Columns: [language_id, language_code, language_name]\n- Table: publisher, Columns: [publisher_id, publisher_name]\n- Table: order_status, Columns: [status_id, status_value]",
        "Response": "Table: customer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `topics_main_category`, `said_to_be_the_same_as`, `native_label`, `writing_system`, `described_by_source`)  VALUES ('Du', 'Chinese surname (\u675c)', 'Han surname', 'Category:Du (surname)', 'Du', '\u675c', 'Chinese characters', 'Hundred Family Surnames');\nDatabase State:\n- Table: `yuntai_28_generals`, Columns: [`label`, `description`, `instance_of`, `sex_or_gender`, `country_of_citizenship`, `date_of_death`, `part_of`, `family_name`, `occupation`, `commons_category`, `described_by_source`, `google_knowledge_graph_id`]",
        "Response": "Table: `family_name`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `building` (`building_id`, `Name`, `Street_address`, `Years_as_tallest`, `Height_feet`, `Floors`)  VALUES ('0', 'Citizens Bank Building', '701 North Franklin Street', '1913\u20131915', 145, 12);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `building`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Tips` (business_id, user_id, likes, tip_length)  VALUES (1409, 52252, 0, 'Medium');\nDatabase State:\n- Table: Days, Columns: [day_id, day_of_week]\n- Table: `Business_Attributes`, Columns: [attribute_id, business_id, attribute_value]\n- Table: `Elite`, Columns: [user_id, year_id]\n- Table: Compliments, Columns: [compliment_id, compliment_type]\n- Table: Attributes, Columns: [attribute_id, attribute_name]\n- Table: `Users_Compliments`, Columns: [compliment_id, user_id, number_of_compliments]\n- Table: `Checkins`, Columns: [business_id, day_id, label_time_0, label_time_1, label_time_2, label_time_3, label_time_4, label_time_5, label_time_6, label_time_7, label_time_8, label_time_9, label_time_10, label_time_11, label_time_12, label_time_13, label_time_14, label_time_15, label_time_16, label_time_17, label_time_18, label_time_19, label_time_20, label_time_21, label_time_22, label_time_23]\n- Table: `Business_Hours`, Columns: [business_id, day_id, opening_time, closing_time]\n- Table: Categories, Columns: [category_id, category_name]\n- Table: `Tips`, Columns: [business_id, user_id, likes, tip_length]\n- Table: `Business`, Columns: [business_id, active, city, state, stars, review_count]\n- Table: `Users`, Columns: [user_id, user_yelping_since_year, user_average_stars, user_votes_funny, user_votes_useful, user_votes_cool, user_review_count, user_fans]",
        "Response": "Table: `Tips`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Apartment_Facilities (apt_id, facility_code)  VALUES (9, 'Boardband');\nDatabase State:\n- Table: View_Unit_Status, Columns: [apt_id, apt_booking_id, status_date, available_yn]\n- Table: Guests, Columns: [guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth]\n- Table: Apartment_Facilities, Columns: [apt_id, facility_code]\n- Table: Apartment_Buildings, Columns: [building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone]\n- Table: Apartments, Columns: [apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count]\n- Table: Apartment_Bookings, Columns: [apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date]",
        "Response": "Table: Apartment_Facilities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `topics_main_category`, `instance_of`, `country`, `commons_category`, `located_in_the_administrative_territorial_entity`, `head_of_government`, `coordinate_location`, `curlie_id`, `musicbrainz_area_id`, `gnd_id`, `viaf_id`, `library_of_congress_authority_id`, `freebase_id`, `locator_map_image`, `geonames_id`, `category_for_people_who_died_here`, `category_of_associated_people`, `capital_of`, `page_banner`, `elevation_above_sea_level`, `gnis_id`, `official_website`, `facebook_places_id`, `encyclop\u00e6dia_britannica_online_id`, `population`, `fips_55_3_locations_in_the_us`, `inception`, `local_dialing_code`, `quora_topic_id`, `area`, `us_national_archives_identifier`, `gran_enciclop\u00e8dia_catalana_id`, `flag_image`, `archinform_location_id`, `whos_on_first_id`, `located_in_time_zone`, `worldcat_identities_id`, `interlingual_index_id`, `wordnet_31_synset_id`, `tripadvisor_id`, `google_maps_customer_id`, `ballotpedia_id`, `image`, `subreddit`, `water_as_percent_of_area`, `online_pwn_encyclopedia_id`, `store_norske_leksikon_id`, `national_library_of_israel_j9u_id`, `wikisimpsons_id`, `per_capita_income`, `number_of_households`, `hashtag`)  VALUES ('Mercer County', 'county in New Jersey, United States', 'Category:Mercer County, New Jersey', 'county of New Jersey', 'United States of America', 'Mercer County, New Jersey', 'New Jersey', 'nan', '40.28', 'Regional/North_America/United_States/New_Jersey/Counties/Mercer/', 'b1a0db57-fa88-4f70-ac94-2157a300fb5f', '4496998-3', '157113639', 'nan', '/m/0n5dt', 'Map of New Jersey highlighting Mercer County.svg', '5101090.0', 'nan', 'Category:People from Mercer County, New Jersey', 'nan', 'WV banner Mercer county D&R canal.jpg', NULL, '882229.0', 'http://www.mercercounty.org/', 'nan', 'place/Mercer-county-New-Jersey', 387340.0, 'nan', '+1838-00-00T00:00:00Z', 'nan', 'nan', 593.0, '10036562.0', 'nan', 'Flag of Mercer County, New Jersey.gif', '20056.0', '102081129.0', 'Eastern Time Zone', 'lccn-n81035809', 'nan', 'nan', 'nan', '', 'nan', '2014-08-30 11 07 51 View of Mercer County Court House in Trenton, New Jersey from the east.JPG', 'nan', 1.889999999999999903, 'nan', 'nan', 'nan', 'nan', 44532.0, 131440.0, 'nan');\nDatabase State:\n- Table: `head_of_government`, Columns: [`label`, `description`, `member_of_political_party`, `educated_at`, `instance_of`, `date_of_birth`, `sex_or_gender`, `country_of_citizenship`, `given_name`, `occupation`, `position_held`, `place_of_birth`, `family_name`]\n- Table: `jurisdiction`, Columns: [`label`, `description`, `dewey_decimal_classification`, `country`, `shares_border_with`, `capital`, `flag_image`, `named_after`, `iso_3166_2_code`, `commons_category`, `flag`, `coordinate_location`, `openstreetmap_relation_id`, `located_in_the_administrative_territorial_entity`, `official_website`, `page_banner`, `topics_main_category`, `curlie_id`, `musicbrainz_area_id`, `instance_of`, `legislative_body`, `freebase_id`, `gnis_id`, `fips_10_4_countries_and_regions`, `topics_main_wikimedia_portal`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `gnd_id`, `category_for_films_shot_at_this_location`, `category_of_people_buried_here`, `category_of_associated_people`, `office_held_by_head_of_government`, `inception`, `located_in_or_next_to_body_of_water`, `described_by_source`, `locator_map_image`, `viaf_id`, `pronunciation_audio`, `head_of_government`, `area`, `library_of_congress_authority_id`, `population`, `located_in_time_zone`, `bbc_things_id`, `quora_topic_id`, `isni`, `ringgold_id`, `highest_point`, `lowest_point`, `subreddit`, `short_name`, `nickname`, `motto_text`, `contains_the_administrative_territorial_entity`, `yso_id`, `elevation_above_sea_level`, `mesh_descriptor_id`, `us_national_archives_identifier`, `gacs_id`, `history_of_topic`, `encyclop\u00e6dia_britannica_online_id`, `fips_5_2_alpha_code_us_states`, `fips_5_2_numeric_code_us_states`, `geography_of_topic`, `demonym`, `wikimedia_outline`, `water_as_percent_of_area`, `coordinates_of_geographic_center`, `executive_body`, `foundational_text`, `highest_judicial_authority`, `coordinates_of_northernmost_point`, `getty_thesaurus_of_geographic_names_id`, `part_of`, `c_span_organization_id`, `native_label`, `archinform_location_id`, `geoshape`, `wolfram_language_entity_code`, `catholic_encyclopedia_id`, `official_symbol`, `comic_vine_id`, `maximum_temperature_record`, `loc_and_marc_vocabularies_id`, `language_used`, `whos_on_first_id`, `gran_enciclop\u00e8dia_catalana_id`, `omegawiki_defined_meaning`, `minimum_temperature_record`, `category_for_maps`, `larousse_id`, `treccanis_dizionario_di_storia_id`, `worldcat_identities_id`, `nkcr_aut_id`, `anthem`, `seal_image`, `has_seal_badge_or_sigil`, `kbpedia_id`, `rkd_thesaurus_id`, `hasc`, `interlingual_index_id`, `the_top_tens_id`, `economy_of_topic`, `open_civic_data_division_id`, `tripadvisor_id`, `google_maps_customer_id`, `google_news_topics_id`, `category_for_the_view_of_the_item`, `github_topic`, `wordnet_31_synset_id`, `demographics_of_topic`, `ballotpedia_id`, `inaturalist_place_id`, `archives_at`, `marriageable_age`, `compulsory_education_maximum_age`, `openstreetmap_zoom_level`, `topics_main_template`, `different_from`, `uk_parliament_thesaurus_id`, `online_pwn_encyclopedia_id`, `store_norske_leksikon_id`, `twitter_topic_id`, `wikisimpsons_id`, `related_category`, `den_store_danske_id`, `per_capita_income`, `mean_age`, `number_of_households`, `hashtag`, `national_library_of_israel_j9u_id`, `national_library_of_israel_id_old`, `idref_id`, `french_vikidia_id`, `english_vikidia_id`, `italian_vikidia_id`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `found_in_taxon`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('hypothetical protein BN117_3157', 'microbial gene found in Bordetella parapertussis Bpp5', '13891194', 'Bordetella parapertussis Bpp5', 'gene', 'Hypothetical protein BN117_3157', 'BN117_3157', 'gene', '3401502', 'reverse strand', '3400966');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `found_in_taxon`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `encodes`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `instance_of`, `parent_taxon`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `encyclopedia_of_life_id`, `itis_tsn`, `bacdive_id`, `gram_staining`, `mesh_descriptor_id`, `lpsn_url`, `microsoft_academic_id`, `freebase_id`, `openalex_id`, `catalogue_of_life_id`, `irmng_id`]\n- Table: `periplasmic_metal_binding_protein_tp34_type_superfamily`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Document_Sections_Images (section_id, image_id)  VALUES (27, 10);\nDatabase State:\n- Table: Functional_Areas, Columns: [functional_area_code, parent_functional_area_code, functional_area_description]\n- Table: Document_Sections_Images, Columns: [section_id, image_id]\n- Table: Document_Sections, Columns: [section_id, document_code, section_sequence, section_code, section_title]\n- Table: Roles, Columns: [role_code, role_description]\n- Table: Images, Columns: [image_id, image_alt_text, image_name, image_url]\n- Table: Document_Functional_Areas, Columns: [document_code, functional_area_code]",
        "Response": "Table: Document_Sections_Images"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (153834, 2005, 'B', 'W', '4y other', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment)  VALUES (983, 682, 'American Express', '2018-01-19', 177130);\nDatabase State:\n- Table: Settlements, Columns: [Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]",
        "Response": "Table: Payments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `conserved_hypothetical_protein_chp00255` (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Hypothetical protein FN2034', 'microbial protein found in Fusobacterium nucleatum subsp. nucleatum ATCC 25586', 'Q8RHI8', 'Fusobacterium nucleatum subsp. nucleatum ATCC 25586', 'protein', 'hypothetical protein FN2034', 'Domain of unknown function DUF1732', 'protein', 'NP_602820', 'Conserved hypothetical protein CHP00255');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `parent_taxon`, `instance_of`, `freebase_id`, `itis_tsn`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `gram_staining`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`, `catalogue_of_life_id`]",
        "Response": "Table: `conserved_hypothetical_protein_chp00255`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Budget_Type_Code, Budget_Type_Description)  VALUES ('ORG', 'Organisation');\nDatabase State:\n- Table: Statements, Columns: [Statement_ID, Statement_Details]\n- Table: Documents_with_Expenses, Columns: [Document_ID, Budget_Type_Code, Document_Details]\n- Table: Accounts, Columns: [Account_ID, Statement_ID, Account_Details]\n- Table: Ref_Document_Types, Columns: [Document_Type_Code, Document_Type_Name, Document_Type_Description]",
        "Response": "Table: Ref_Budget_Codes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `translation_elongation_factor_kow_like_protein_family` (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `subclass_of`, `has_parts`, `cell_component`, `molecular_function`, `biological_process`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Elongation factor P ECL_00547', 'microbial protein found in Enterobacter cloacae subsp. cloacae ATCC 13047', 'A0A0H3CE39', 'Enterobacter cloacae subsp. cloacae ATCC 13047', 'elongation factor P ECL_00547', 'protein', 'Elongation factor P, C-terminal', 'cytoplasm', 'translation elongation factor activity', 'peptide biosynthetic process', 'protein', 'YP_003611062', 'Nucleic acid-binding, OB-fold');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `translation_elongation_factor_kow_like_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `commons_category`, `coordinate_location`, `topics_main_category`, `locator_map_image`, `freebase_id`)  VALUES ('Horn of Africa', 'peninsula in Northeast Africa which juts into the Guardafui Channel', 'peninsula', 'Horn of Africa', '9.5', 'Category:Horn of Africa', 'Horn of Africa states.svg', '/m/0gt8x');\nDatabase State:\n- Table: `scramble_for_africa`, Columns: [`label`, `description`, `instance_of`, `freebase_id`, `start_time`, `end_time`, `location`, `part_of`]",
        "Response": "Table: `physical_location`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `user_reviews` (App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity)  VALUES ('AirBrush: Easy Photo Editor', 'nan', 'nan', 'nan', 'nan');\nDatabase State:\n- Table: `playstore`, Columns: [App, Category, Rating, Reviews, Size, Installs, Type, Price, `Content Rating`, Genres]\n- Table: `user_reviews`, Columns: [App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity]",
        "Response": "Table: `user_reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (locationID, locationcity, address, state, zipcode, officephone)  VALUES (5, 'New York City', '1650 Washington Blvd', 'NY', 15648, '(518)256-3100');\nDatabase State:\n- Table: location, Columns: [locationID, locationcity, address, state, zipcode, officephone]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `openstreetmap_relation_id`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `freebase_id`, `instance_of`, `bag_residence_id`, `located_in_time_zone`, `commons_category`, `whos_on_first_id`, `rkd_thesaurus_id`, `geonames_id`)  VALUES ('Feerwerd', 'farm village in the Netherlands', '1468241.0', 'Netherlands', 'Het Hogeland', '53.3058', 'nan', 'village', '2468', 'UTC+01:00', 'Feerwerd', 'nan', '7407.0', '2755926');\nDatabase State:\n- Table: `political_border`, Columns: [`label`, `description`, `commons_category`, `cbs_municipality_code`, `coat_of_arms_image`, `local_dialing_code`, `locator_map_image`, `postal_code`, `country`, `coordinate_location`, `instance_of`, `shares_border_with`, `freebase_id`, `contains_settlement`, `image`, `topics_main_category`, `flag_image`, `official_website`, `population`, `number_of_households`, `located_in_time_zone`, `coat_of_arms`, `flag`, `geonames_id`, `amsterdam_code`, `located_in_the_administrative_territorial_entity`, `category_for_maps`, `inaturalist_place_id`, `email_address`, `area`, `rkd_thesaurus_id`, `kvk_company_id`, `telephone_number`, `elevation_above_sea_level`]\n- Table: `human_settlement`, Columns: [`label`, `description`, `country`, `coordinate_location`, `instance_of`, `located_in_the_administrative_territorial_entity`]\n- Table: `physical_location`, Columns: [`label`, `description`, `openstreetmap_relation_id`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `freebase_id`, `instance_of`, `bag_residence_id`, `located_in_time_zone`, `commons_category`, `whos_on_first_id`, `rkd_thesaurus_id`, `geonames_id`]",
        "Response": "Table: `physical_location`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `cell_component`, `part_of`)  VALUES ('Translation initiation factor IF-3 CA_C2361', 'microbial protein found in Clostridium acetobutylicum ATCC 824', 'translation initiation factor IF-3 CA_C2361', 'Q97GK5', 'protein biosynthesis', 'translation initiation factor activity', 'Translation initiation factor 3, C-terminal', 'Clostridium acetobutylicum ATCC 824', 'NP_348977', 'protein', 'cytoplasm', 'Translation initiation factor 3 (IF-3), N-terminal domain superfamily');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `translation_initiation_factor_3`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `cell_component`, `part_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `cell_component`, `part_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`concert_ID`, `Singer_ID`)  VALUES (3, '5');\nDatabase State:\n- Table: `concert`, Columns: [`concert_ID`, `concert_Name`, `Theme`, `Stadium_ID`, `Year`]",
        "Response": "Table: `singer_in_concert`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `gas_station` (`Station_ID`, `Open_Year`, `Location`, `Manager_Name`, `Vice_Manager_Name`, `Representative_Name`)  VALUES (11, 2009, 'Newport Rd', 'Jon Rowe', 'Steve Parsons', 'Tim Read');\nDatabase State:\n- Table: `gas_station`, Columns: [`Station_ID`, `Open_Year`, `Location`, `Manager_Name`, `Vice_Manager_Name`, `Representative_Name`]\n- Table: `company`, Columns: [`Company_ID`, `Rank`, `Company`, `Headquarters`, `Main_Industry`, `Sales_billion`, `Profits_billion`, `Assets_billion`, `Market_Value`]",
        "Response": "Table: `gas_station`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Aminopeptidase FN0775', 'microbial protein found in Fusobacterium nucleatum subsp. nucleatum ATCC 25586', 'protein', 'Q8RFD2', 'aminopeptidase FN0775', 'proteolysis', 'metalloaminopeptidase activity', 'Fusobacterium nucleatum subsp. nucleatum ATCC 25586', 'NP_603672', 'protein', 'Peptidase M18');\nDatabase State:\n- Table: `peptidase_m18`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `found_in_taxon`, `part_of`, `instance_of`, `refseq_protein_id`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `ncbi_taxonomy_id`, `encyclopedia_of_life_id`, `gbif_taxon_id`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`]\n- Table: `encodes`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`architect_id`, `id`, `location`, `name`, `type`, `built_year`, `notes`)  VALUES (4, 5, 'Oth\u00e9e', 'Moulin du Ch\u00e2teau', 'Grondzeiler', 1856, 'Molenechos (Dutch)');\nDatabase State:\n- Table: `mill`, Columns: [`architect_id`, `id`, `location`, `name`, `type`, `built_year`, `notes`]\n- Table: `bridge`, Columns: [`architect_id`, `id`, `name`, `location`, `length_meters`, `length_feet`]\n- Table: `architect`, Columns: [`id`, `name`, `nationality`, `gender`]",
        "Response": "Table: `mill`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO titleauthor (au_id, title_id, au_ord, royaltyper)  VALUES ('213-46-8915', 'BU2075', 1, 100);\nDatabase State:\n- Table: jobs, Columns: [job_id, job_desc, min_lvl, max_lvl]\n- Table: stores, Columns: [stor_id, stor_name, stor_address, city, state, zip]",
        "Response": "Table: titleauthor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update)  VALUES (1385, 50, 2, 11053, 3.990000000000000213, '2005-08-02 06:27:13.0', '2006-02-15 22:12:41.0');\nDatabase State:\n- Table: `actor`, Columns: [actor_id, first_name, last_name, last_update]\n- Table: `store`, Columns: [store_id, manager_staff_id, address_id, last_update]\n- Table: `film_actor`, Columns: [actor_id, film_id, last_update]\n- Table: `staff`, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]\n- Table: `film`, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]\n- Table: film_text, Columns: [film_id, title, description]\n- Table: `category`, Columns: [category_id, name, last_update]\n- Table: `film_category`, Columns: [film_id, category_id, last_update]\n- Table: `inventory`, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: `address`, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: `customer`, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: `language`, Columns: [language_id, name, last_update]",
        "Response": "Table: `payment`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Climber_ID`, `Name`, `Country`, `Time`, `Points`, `Mountain_ID`)  VALUES (2, 'Siegfried Schauzu', 'West Germany', '1:14.56.4', 12.0, 1);\nDatabase State:\n- Table: `climber`, Columns: [`Climber_ID`, `Name`, `Country`, `Time`, `Points`, `Mountain_ID`]",
        "Response": "Table: `climber`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size)  VALUES (10, 9, 'Electronics', 937.850000000000022, 'TV', 'Red', 'Medium');\nDatabase State:\n- Table: Customers, Columns: [customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city, state_county_province, country]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `replaced_by`, `replaces`, `applies_to_jurisdiction`, `dissolved_abolished_or_demolished_date`, `inception`)  VALUES ('Ku\u010dinskis cabinet', 'nan', 'Government of Latvia', '1st Kari\u0146\u0161 cabinet', 'Second Straujuma cabinet', 'Latvia', '+2019-01-23T00:00:00Z', '+2016-02-11T00:00:00Z');\nDatabase State:\n- Table: `replaced_entity`, Columns: [`label`, `description`, `instance_of`, `replaced_by`, `replaces`, `applies_to_jurisdiction`, `dissolved_abolished_or_demolished_date`, `inception`]",
        "Response": "Table: `replaced_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `election` (`Election_ID`, `Representative_ID`, `Date`, `Votes`, `Vote_Percent`, `Seats`, `Place`)  VALUES (4, 5, '1949', 14077.0, 19.5, 9.0, 2.0);\nDatabase State:\n- Table: `election`, Columns: [`Election_ID`, `Representative_ID`, `Date`, `Votes`, `Vote_Percent`, `Seats`, `Place`]\n- Table: `representative`, Columns: [`Representative_ID`, `Name`, `State`, `Party`, `Lifespan`]",
        "Response": "Table: `election`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO course (course_id, courseLevel)  VALUES (147, 'Level_300');\nDatabase State:\n- Table: `advisedBy`, Columns: [p_id, p_id_dummy]\n- Table: person, Columns: [p_id, professor, student, hasPosition, inPhase, yearsInProgram]\n- Table: taughtBy, Columns: [course_id, p_id]\n- Table: course, Columns: [course_id, courseLevel]",
        "Response": "Table: course"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Cinema_ID`, `Name`, `Openning_year`, `Capacity`, `Location`)  VALUES (4, 'Glenmore', 2009, 305, 'County Clare');\nDatabase State:\n- Table: `schedule`, Columns: [`Cinema_ID`, `Film_ID`, `Date`, `Show_times_per_day`, `Price`]\n- Table: `film`, Columns: [`Film_ID`, `Rank_in_series`, `Number_in_season`, `Title`, `Directed_by`, `Original_air_date`, `Production_code`]\n- Table: `cinema`, Columns: [`Cinema_ID`, `Name`, `Openning_year`, `Capacity`, `Location`]",
        "Response": "Table: `cinema`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `instance_of`, `country`, `image`, `terminus`, `route_diagram`, `part_of`, `srgb_color_hex_triplet`, `operator`, `openstreetmap_relation_id`, `freebase_id`, `located_in_the_administrative_territorial_entity`, `twitter_username`, `state_of_use`, `transport_network`, `onestop_id`)  VALUES ('Manayunk/Norristown Line', 'SEPTA Regional Rail service', 'Manayunk/Norristown Line', 'train service', 'United States of America', 'Train at Norristown Main Street next to Route 202, October 2014.jpg', '30th Street Station', 'Template:Manayunk/Norristown Line RDT', 'SEPTA Regional Rail', 'EE5067', 'Southeastern Pennsylvania Transportation Authority', '10433670.0', '/m/0cmc_gx', 'Philadelphia', 'SEPTA_NOR', 'in use', 'SEPTA Regional Rail', 'r-dr4e-manayunk~norristownline');\nDatabase State:\n- Table: `terminus`, Columns: [`label`, `description`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`, `adjacent_station`, `connecting_line`, `coordinate_location`, `fare_zone`, `connecting_service`, `onestop_id`, `image`, `owned_by`, `date_of_official_opening`, `commons_category`, `freebase_id`]",
        "Response": "Table: `septa_regional_rail`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `instance_of`, `population`, `shares_border_with`, `banque_de_noms_de_lieux_du_qu\u00e9bec_id`, `quebec_municipalities_geographical_code`, `locator_map_image`, `commons_category`, `statistics_canada_geographic_code`, `openstreetmap_relation_id`, `area`, `freebase_id`, `cgndb_unique_id`, `image`, `geonames_id`, `official_website`, `inception`, `whos_on_first_id`, `viaf_id`, `demonym`)  VALUES ('Chaudi\u00e8re-Appalaches', 'administrative region in Quebec, Canada', 'Canada', '46.4833', 'Quebec', 'administrative region of Quebec', 433312.0, 'Centre-du-Qu\u00e9bec', '227460', 'nan', 'LocationChaudi\u00e8re-Appalaches.png', 'Chaudi\u00e8re-Appalaches', 'nan', '8138409.0', 15676.75, '/m/04y89j', 'ENODW', 'nan', '6691322.0', 'https://chaudiereappalaches.com/fr/', 'nan', 'nan', '132669548', 'nan');\nDatabase State:\n- Table: `floral_habitat_of_quebec`, Columns: [`label`, `description`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `inception`, `area`, `banque_de_noms_de_lieux_du_qu\u00e9bec_id`, `cgndb_unique_id`]\n- Table: `political_border`, Columns: [`label`, `description`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `instance_of`, `population`, `shares_border_with`, `image`, `banque_de_noms_de_lieux_du_qu\u00e9bec_id`, `quebec_municipalities_geographical_code`, `locator_map_image`, `commons_category`, `openstreetmap_relation_id`, `statistics_canada_geographic_code`, `area`, `freebase_id`, `cgndb_unique_id`, `official_website`, `inception`, `geonames_id`, `whos_on_first_id`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`, `regulates_molecular_biology`)  VALUES ('positive regulation of dehydroepiandrosterone secretion', 'Any process that activates or increases the frequency, rate or extent of dehydroepiandrosterone secretion.', 'GO:2000842', 'regulation of dehydroepiandrosterone secretion', 'http://purl.obolibrary.org/obo/GO_2000842', 'biological process', 'dehydroepiandrosterone secretion');\nDatabase State:\n- Table: `regulates_molecular_biology`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`, `has_parts`]\n- Table: `positive_regulation_of_lipid_transport`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`, `regulates_molecular_biology`]",
        "Response": "Table: `positive_regulation_of_lipid_transport`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Code, Name, Price, Manufacturer)  VALUES (3, 'ZIP drive', 150, 4);\nDatabase State:\n- Table: Manufacturers, Columns: [Code, Name, Headquarter, Founder, Revenue]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Product ID`, `Product Name`, Category, `Sub-Category`, Region)  VALUES ('TEC-AC-10000303', 'Logitech M510 Wireless Mouse', 'Technology', 'Accessories', 'Central');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (date, store_nbr, item_nbr, units)  VALUES ('2012-09-25', 24, 83, 0);\nDatabase State:\n- Table: sales_in_weather, Columns: [date, store_nbr, item_nbr, units]\n- Table: relation, Columns: [store_nbr, station_nbr]",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Keyword (episode_id, keyword)  VALUES ('S20-E4', 'alien');\nDatabase State:\n- Table: Credit, Columns: [episode_id, category, person, role, credited]\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]",
        "Response": "Table: Keyword"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `executive_branch` (`label`, `description`, `country`, `applies_to_jurisdiction`, `has_parts`)  VALUES ('Federal Government of Brazil', 'executive authority of Brazil', 'Brazil', 'Brazil', 'cabinet of Brazil');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `executive_branch`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0)  VALUES (69, 'Niklas Kronwall', '1981-01-12', 1981, 1, 12, 'Stockholm, SWE', 'Sweden', 72, 194, 'D', 'L', 2000, 1, 29, 'Detroit Red Wings', 26, 115, 2235, 'yes');\nDatabase State:\n- Table: PlayerInfo, Columns: [ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0]\n- Table: height_info, Columns: [height_id, height_in_cm, height_in_inch]\n- Table: SeasonStatus, Columns: [ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS]",
        "Response": "Table: PlayerInfo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`station_id`, `day_of_week`, `high_temperature`, `low_temperature`, `precipitation`, `wind_speed_mph`)  VALUES (1, 'Monday', 59, 54, 90.0, 13);\nDatabase State:\n- Table: `route`, Columns: [`train_id`, `station_id`]",
        "Response": "Table: `weekly_weather`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `commons_category`, `coordinate_location`, `coat_of_arms_image`, `image`, `official_website`, `freebase_id`, `locator_map_image`, `topics_main_category`, `viaf_id`, `musicbrainz_area_id`, `elevation_above_sea_level`, `area`, `postal_code`, `geonames_id`, `gnd_id`, `capital_of`, `population`, `whos_on_first_id`, `worldcat_identities_id`, `located_in_time_zone`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`)  VALUES ('Th\u00f4nes', 'commune in Haute-Savoie, France', 'France', 'commune of France', 'Canton of Th\u00f4nes', 'Th\u00f4nes', '45.882222222222005', 'Blason ville fr Th\u00f4nes (Haute-Savoie).svg', '1030888-Thones city center-Thones.jpg', 'http://www.mairie-thones.fr', '/m/03ntz52', 'Th\u00f4nes OSM 01.png', 'Category:Th\u00f4nes', '137045629', 'nan', NULL, 52.3299999999999983, '74230', '2972749', 'nan', 'Canton of Th\u00f4nes', 6598.0, '101767965', 'nan', 'UTC+01:00', 'n87116967', '9.870075673703052e+17');\nDatabase State:\n- Table: `capital_city`, Columns: [`label`, `description`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `commons_category`, `coordinate_location`, `coat_of_arms_image`, `image`, `official_website`, `freebase_id`, `locator_map_image`, `topics_main_category`, `viaf_id`, `musicbrainz_area_id`, `elevation_above_sea_level`, `area`, `postal_code`, `geonames_id`, `gnd_id`, `capital_of`, `population`, `whos_on_first_id`, `worldcat_identities_id`, `located_in_time_zone`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`]\n- Table: `winner`, Columns: [`label`, `description`, `sex_or_gender`, `date_of_birth`, `instance_of`, `freebase_id`, `country_of_citizenship`, `place_of_birth`, `occupation`, `sports_referencecom_olympic_athlete_id_archived`, `given_name`, `sport`, `participant_in`, `munzinger_sport_number`, `fis_alpine_skier_id`, `height`, `mass`, `ski_db_skier_id`, `family_name`, `olympedia_people_id`, `image`, `commons_category`]",
        "Response": "Table: `capital_city`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Competition_ID`, `Year`, `Theme`, `Host_city_ID`, `Hosts`)  VALUES (5, 2003, 'MTV Cube', 5, 'Shaggy and Coco Lee');\nDatabase State:\n- Table: `farm`, Columns: [`Farm_ID`, `Year`, `Total_Horses`, `Working_Horses`, `Total_Cattle`, `Oxen`, `Bulls`, `Cows`, `Pigs`, `Sheep_and_Goats`]\n- Table: `farm_competition`, Columns: [`Competition_ID`, `Year`, `Theme`, `Host_city_ID`, `Hosts`]\n- Table: `competition_record`, Columns: [`Competition_ID`, `Farm_ID`, `Rank`]\n- Table: `city`, Columns: [`City_ID`, `Official_Name`, `Status`, `Area_km_2`, `Population`, `Census_Ranking`]",
        "Response": "Table: `farm_competition`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (client_id, sex, day, month, year, age, social, first, middle, last, phone, email, address_1, address_2, city, state, zipcode, district_id)  VALUES ('C00001925', 'Male', 23, 6, 1958, 61, '343-83-8226', 'Diesel', 'Abel', 'Galloway', '543-600-8996', 'diesel.abel.galloway@gmail.com', '692 East Country Drive', NULL, 'Jackson', 'MS', 44263, 37);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: client"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (date, store_nbr, item_nbr, units)  VALUES ('2012-01-17', 8, 84, 0);\nDatabase State:\n- Table: weather, Columns: [station_nbr, date, tmax, tmin, tavg, depart, dewpoint, wetbulb, heat, cool, sunrise, sunset, codesum, snowfall, preciptotal, stnpressure, sealevel, resultspeed, resultdir, avgspeed]\n- Table: sales_in_weather, Columns: [date, store_nbr, item_nbr, units]",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('flagellar L-ring protein flgH CCNA_02145', 'microbial gene found in Caulobacter vibrioides NA1000', 'Caulobacter crescentus NA1000', '7330451', 'protein-coding gene', 'Flagellar L-ring protein flgH CCNA_02145', 'CCNA_02145', 'gene', '2303865', 'forward strand', '2303131');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`id`, `name`, `Operating_system`, `Client`, `Connection`)  VALUES (19, 'Ziproxy', 'Unix (Linux, *BSD, Mac OS X, others)', 'ISP', 'Any');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Web_client_accelerator`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (address_id, line_1_number_building, city, zip_postcode, state_province_county, country)  VALUES (11, '70345 Marvin Glens Apt. 669', 'Lake Katheryn', '505', 'Kentucky', 'USA');\nDatabase State:\n- Table: Order_Items, Columns: [order_item_id, order_id, product_id, order_quantity]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_date, order_status_code]\n- Table: Customers, Columns: [customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email]\n- Table: Addresses, Columns: [address_id, line_1_number_building, city, zip_postcode, state_province_county, country]\n- Table: Products, Columns: [product_id, product_type_code, product_name, product_price]\n- Table: Customer_Address_History, Columns: [customer_id, address_id, date_from, date_to]",
        "Response": "Table: Addresses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, score, date, type)  VALUES (69665, 98, '2015-10-23', 'Routine - Unscheduled');\nDatabase State:\n- Table: inspections, Columns: [business_id, score, date, type]\n- Table: violations, Columns: [business_id, date, violation_type_id, risk_category, description]",
        "Response": "Table: inspections"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, Allergy)  VALUES (1002, 'Shellfish');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Has_Allergy"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('kelch domain-containing protein, putative', 'nan', 'PF3D7_1125700', 'Q8IIA7', 'nan', 'Plasmodium falciparum 3D7', 'nan', 'protein', 'Galactose oxidase/kelch, beta-propeller');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO central_superstore (`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit)  VALUES (4207, 'CA-2017-118101', '2017-06-26', '2017-06-26', 'Same Day', 'SN-20560', 'Central', 'OFF-PA-10000357', 368.910000000000025, 9, 0.0, 180.7658999999999879);\nDatabase State:\n- Table: south_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]\n- Table: west_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]\n- Table: central_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]",
        "Response": "Table: central_superstore"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (3689865, 17, 13520, 184, 689);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score)  VALUES (25, 15, 2013, 55);\nDatabase State:\n- Table: university_ranking_year, Columns: [university_id, ranking_criteria_id, year, score]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `homologene_id`, `chromosome`, `found_in_taxon`, `refseq_rna_id`, `ensembl_transcript_id`, `encodes`, `ortholog`, `exact_match`, `strand_orientation`, `instance_of`, `cytogenetic_location`, `genomic_start`, `genomic_end`, `expressed_in`)  VALUES ('nstp-2', 'protein-coding gene in the species Caenorhabditis elegans', '177424.0', 'nan', 'WBGene00017480', '5799.0', 'Caenorhabditis elegans chromosome IV', 'Caenorhabditis elegans', 'NM_001047471', 'F15B10.1b.1', 'Nucleotide Sugar TransPorter family CELE_F15B10.1', 'slc35b4', 'nan', 'reverse strand', 'gene', 'nan', '6604001', '6606188', 'embryo');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `ensembl_protein_id`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `refseq_protein_id`, `biological_process`, `cell_component`, `molecular_function`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `ensembl_transcript_id`, `homologene_id`, `refseq_rna_id`, `ortholog`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `expressed_in`]\n- Table: `uaa_transporter`, Columns: [`label`, `description`, `ensembl_protein_id`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `orthology`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (student_id)  VALUES (1934, 1304);\nDatabase State:\n- Table: Highschooler, Columns: [ID]\n- Table: Likes, Columns: [student_id]",
        "Response": "Table: Friend"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `reactome_id`, `instance_of`, `part_of`, `has_parts`, `exact_match`, `cites_work`)  VALUES ('CDT1-mediated loading of MCM2-7 to replication origins', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-9749320)', 'Homo sapiens', 'R-HSA-9749320', 'biological process', 'Assembly of the pre-replicative complex', 'CDT1:MCM2-7 [nucleoplasm]', 'https://identifiers.org/reactome:R-HSA-9749320', 'Geminin inhibits a late step in the formation of human pre-replicative complexes');\nDatabase State:\n- Table: `assembly_of_the_pre_replicative_complex`, Columns: [`label`, `description`, `found_in_taxon`, `reactome_id`, `instance_of`, `part_of`, `has_parts`, `exact_match`, `cites_work`]",
        "Response": "Table: `assembly_of_the_pre_replicative_complex`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `transglycosylase_slt_domain_2_protein_family` (`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Murein hydrolase B SDY_2897', 'microbial protein found in Shigella dysenteriae Sd197', 'protein', 'Q32CM7', 'murein hydrolase B SDY_2897', 'Shigella dysenteriae Sd197', 'Transglycosylase SLT domain 2', 'protein', 'YP_404419', 'Lytic transglycosylase MltB');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `instance_of`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `transglycosylase_slt_domain_2_protein_family`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `transglycosylase_slt_domain_2_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (council_tax_id, cmi_cross_ref_id)  VALUES (9, 4);\nDatabase State:\n- Table: Business_Rates, Columns: [business_rates_id, cmi_cross_ref_id]\n- Table: Parking_Fines, Columns: [council_tax_id, cmi_cross_ref_id]\n- Table: Customer_Master_Index, Columns: [master_customer_id, cmi_details]\n- Table: Benefits_Overpayments, Columns: [council_tax_id, cmi_cross_ref_id]\n- Table: Council_Tax, Columns: [council_tax_id, cmi_cross_ref_id]\n- Table: CMI_Cross_References, Columns: [cmi_cross_ref_id, master_customer_id, source_system_code]",
        "Response": "Table: Parking_Fines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `party` (`Party_ID`, `Party_Theme`, `Location`, `First_year`, `Last_year`, `Number_of_hosts`)  VALUES (6, 'QrimeTime', 'Heineken Music Hall Amsterdam', '2004', '2007', 4);\nDatabase State:\n- Table: `host`, Columns: [`Host_ID`, `Name`, `Nationality`, `Age`]\n- Table: `party_host`, Columns: [`Party_ID`, `Host_ID`, `Is_Main_in_Charge`]\n- Table: `party`, Columns: [`Party_ID`, `Party_Theme`, `Location`, `First_year`, `Last_year`, `Number_of_hosts`]",
        "Response": "Table: `party`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `genomic_start`, `strand_orientation`, `genomic_end`, `instance_of`, `ncbi_locus_tag`)  VALUES ('hypothetical protein FN1661', 'microbial gene found in Fusobacterium nucleatum subsp. nucleatum ATCC 25586', '993297', 'gene', 'Hypothetical protein FN1661', 'Fusobacterium nucleatum subsp. nucleatum ATCC 25586', '158052.0', 'reverse strand', '158801.0', 'gene', 'FN1661');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `natural_product` (`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `genbank_assembly_accession_number`, `gram_staining`)  VALUES ('Escherichia coli str. K-12 substr. MG1655', 'bacterial strain', 'Escherichia coli str. K-12 substr. MG1655', 'Escherichia coli', '511145', 'reference strain', 'GCA_000005845.2', 'Gram-negative bacteria');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `ncbi_locus_tag`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `protein_of_unknown_function_duf1454`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `genbank_assembly_accession_number`, `gram_staining`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `510_methylenetetrahydrofolate_reductase` (`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `biological_process`, `molecular_function`, `cell_component`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('5,10-methylenetetrahydrofolate reductase SDY_3776', 'microbial protein found in Shigella dysenteriae Sd197', 'protein', 'Q32AD3', '5,10-methylenetetrahydrofolate reductase SDY_3776', 'Shigella dysenteriae Sd197', 'cellular amino acid biosynthetic process', 'oxidoreductase activity', 'cytosol', 'protein', 'YP_405213', 'FAD-linked oxidoreductase-like');\nDatabase State:\n- Table: `510_methylenetetrahydrofolate_reductase`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `biological_process`, `molecular_function`, `cell_component`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `510_methylenetetrahydrofolate_reductase`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('2-oxoglutarate dehydrogenase complex dihydrolipoyllysine-residue succinyltransferase BA_1269', 'microbial protein found in Bacillus anthracis str. Ames', '2-oxoglutarate dehydrogenase complex dihydrolipoyllysine-residue succinyltransferase BA_1269', 'A0A0F7RM04', 'nan', 'nan', 'nan', '2-oxo acid dehydrogenase, lipoyl-binding site', 'Bacillus anthracis str. Ames', 'NP_843741', 'protein', 'Dihydrolipoamide succinyltransferase, subgroup', 'nan');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('Oxidoreductase XCC2728', 'microbial protein found in Xanthomonas campestris pv. campestris str. ATCC 33913', 'Q8P785', 'oxidoreductase XCC2728', 'oxidoreductase activity, acting on CH-OH group of donors', 'CO dehydrogenase flavoprotein, C-terminal', 'Xanthomonas campestris pv. campestris str. ATCC 33913', 'NP_638076', 'protein', 'CO dehydrogenase flavoprotein, C-terminal domain superfamily', 'protein');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `encyclopedia_of_life_id`, `gbif_taxon_id`, `irmng_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `molecular_function`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO user (UserID, Gender)  VALUES ('tw-339681140', 'Male');\nDatabase State:\n- Table: user, Columns: [UserID, Gender]\n- Table: location, Columns: [LocationID, Country, State, StateCode, City]",
        "Response": "Table: user"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violation (inspection_id, point_id, fine, inspector_comment)  VALUES (1770694, 18, 0, 'CORRECTED');\nDatabase State:\n- Table: establishment, Columns: [license_no, dba_name, aka_name, facility_type, risk_level, address, city, state, zip, latitude, longitude, ward]\n- Table: inspection_point, Columns: [point_id, Description, category, code, fine, point_level]",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `enzyme` (`id`, `name`, `Location`, `Product`, `Chromosome`, `OMIM`, `Porphyria`)  VALUES (1, 'ALA synthase', 'Mitochondrion', '\u03b4-Aminolevulinic acid', '3p21.1', 125290, 'none');\nDatabase State:\n- Table: `medicine`, Columns: [`id`, `name`, `Trade_Name`, `FDA_approved`]\n- Table: `medicine_enzyme_interaction`, Columns: [`enzyme_id`, `medicine_id`, `interaction_type`]\n- Table: `enzyme`, Columns: [`id`, `name`, `Location`, `Product`, `Chromosome`, `OMIM`, `Porphyria`]",
        "Response": "Table: `enzyme`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Business_Attributes` (attribute_id, business_id, attribute_value)  VALUES (36, 6913, 'false');\nDatabase State:\n- Table: `Business_Categories`, Columns: [business_id, category_id]",
        "Response": "Table: `Business_Attributes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Transcriptional activator RhaS KPHS_00660', 'microbial protein found in Klebsiella pneumoniae subsp. pneumoniae HS11286', 'protein', 'A0A0H3GPN3', 'Klebsiella pneumoniae subsp. pneumoniae HS11286', 'transcriptional activator RhaS KPHS_00660', 'HTH domain AraC-type, conserved site', 'protein', 'YP_005224366', 'Homeobox-like domain superfamily');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `genbank_assembly_accession_number`, `gram_staining`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `ncbi_locus_tag`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `transcription_regulator_hth_rhas`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `sobrado` (`label`, `description`, `instance_of`, `image`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`)  VALUES ('Sobrado \u00e0 Ladeira de S\u00e3o Miguel, 18', 'former house in Salvador, Brazil', 'sobrado', 'Biblioteca An\u00edsio Teixeira Salvador Bahia 2019-1724.jpg', 'Salvador', 'Brazil', '-12.973419');\nDatabase State:\n- Table: `political_border`, Columns: [`label`, `description`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `instance_of`, `freebase_id`, `geonames_id`, `commons_category`, `topics_main_category`, `brazilian_municipality_code`, `population`, `locator_map_image`, `image`, `area`, `human_development_index`, `elevation_above_sea_level`, `shares_border_with`, `openstreetmap_relation_id`, `local_dialing_code`, `brazilian_electoral_unit_id`, `whos_on_first_id`, `demonym`, `inaturalist_place_id`, `electorate`]",
        "Response": "Table: `sobrado`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Staff_Department_Assignments (staff_id, department_id, date_assigned_from, job_title_code, date_assigned_to)  VALUES (7, 3, '2016-05-17 07:02:37', 'Clerical Staff', '2018-03-24 10:45:21');\nDatabase State:\n- Table: Departments, Columns: [department_id, dept_store_id, department_name]\n- Table: Products, Columns: [product_id, product_type_code, product_name, product_price]\n- Table: Customer_Addresses, Columns: [customer_id, address_id, date_from, date_to]\n- Table: Suppliers, Columns: [supplier_id, supplier_name, supplier_phone]\n- Table: Addresses, Columns: [address_id, address_details]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status_code, order_date]\n- Table: Department_Stores, Columns: [dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email]\n- Table: Order_Items, Columns: [order_item_id, order_id, product_id]\n- Table: Department_Store_Chain, Columns: [dept_store_chain_id, dept_store_chain_name]\n- Table: Staff_Department_Assignments, Columns: [staff_id, department_id, date_assigned_from, job_title_code, date_assigned_to]\n- Table: Customers, Columns: [customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email]",
        "Response": "Table: Staff_Department_Assignments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `uniprot_protein_id`, `ensembl_protein_id`, `refseq_protein_id`, `encoded_by`, `found_in_taxon`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `part_of`)  VALUES ('Asialoglycoprotein receptor 2', 'mammalian protein found in Mus musculus', 'P24721', 'ENSMUSP00000099632', 'NP_001300854', 'Asgr2', 'house mouse', 'bone mineralization', 'carbohydrate binding', 'integral component of membrane', 'C-type lectin-like domain', 'protein', 'C-type lectin-like/link domain superfamily');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Shop_ID`, `Name`, `Location`, `District`, `Number_products`, `Manager_name`)  VALUES (4, 'FC Inter', 'Turku', 'Veritas Stadion', 10000, 'Job Dragtsma');\nDatabase State:\n- Table: `hiring`, Columns: [`Shop_ID`, `Employee_ID`, `Start_from`, `Is_full_time`]\n- Table: `shop`, Columns: [`Shop_ID`, `Name`, `Location`, `District`, `Number_products`, `Manager_name`]\n- Table: `evaluation`, Columns: [`Employee_ID`, `Year_awarded`, `Bonus`]",
        "Response": "Table: `shop`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`LastName`)  VALUES ('STIRE', ' SHIRLEY', 6, 112);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `list`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, `text`, LocationID, UserID)  VALUES ('tw-698669637735591937', 'Saturday', 17, 13, 'en', 'FALSE', 130, 0, 0, 29, 0.0, 'Amazon Web Services to assist video game creators http://www.sfgate.com/business/article/Amazon-Web-Services-to-assist-video-game-creators-6827066.php', 83, 'tw-14439495');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: twitter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11464614, 'JB459327', '9/29/2018 19:00', '013XX W OHIO ST', '1563', 'SCHOOL, PUBLIC, BUILDING', 'FALSE', 'FALSE', 1215, 12, 1, 24, '17', '41.89250103', '-87.66123319');\nDatabase State:\n- Table: Community_Area, Columns: [community_area_no, community_area_name, side, population]\n- Table: IUCR, Columns: [iucr_no, primary_description, secondary_description, index_code]\n- Table: FBI_Code, Columns: [fbi_code_no, title, description, crime_against]\n- Table: District, Columns: [district_no, district_name, address, zip_code, commander, email, phone, fax, tty, twitter]\n- Table: Neighborhood, Columns: [neighborhood_name, community_area_no]\n- Table: Crime, Columns: [report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`)  VALUES ('tRNA metabolic process', 'The chemical reactions and pathways involving tRNA, transfer RNA, a class of relatively small RNA molecules responsible for mediating the insertion of amino acids into the sequence of nascent polypeptide chains during protein synthesis. Transfer RNA', 'GO:0006399', 'ncRNA metabolic process', 'http://purl.obolibrary.org/obo/GO_0006399', 'biological process');\nDatabase State:\n- Table: `regulates_molecular_biology`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]",
        "Response": "Table: `regulates_molecular_biology`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `entrez_gene_id`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('FMN adenylyltransferase / riboflavin kinase Rru_A2965', 'microbial gene found in Rhodospirillum rubrum ATCC 11170', 'gene', '3836410', 'FMN adenylyltransferase / riboflavin kinase Rru_A2965', 'Rhodospirillum rubrum ATCC 11170', 'forward strand', '3415629.0', '3414676.0', 'gene', 'Rru_A2965');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `entrez_gene_id`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `riboflavin_kinase_domain_superfamily`, Columns: [`label`, `description`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `player_coach` (`Player_ID`, `Coach_ID`, `Starting_year`)  VALUES (6, 3, 2012);\nDatabase State:\n- Table: `player_coach`, Columns: [`Player_ID`, `Coach_ID`, `Starting_year`]",
        "Response": "Table: `player_coach`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `place_of_birth` (`label`, `description`, `instance_of`, `category_combines_topics`, `commons_category`, `category_contains`)  VALUES ('Category:Births in Wisconsin', 'Wikimedia category', 'Wikimedia category', 'place of birth', 'Births in Wisconsin', 'human');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `seal_image`, `dewey_decimal_classification`, `topics_main_wikimedia_portal`, `country`, `capital`, `shares_border_with`, `flag_image`, `flag`, `iso_3166_2_code`, `commons_category`, `locator_map_image`, `located_in_time_zone`, `head_of_government`, `openstreetmap_relation_id`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `official_website`, `topics_main_category`, `page_banner`, `curlie_id`, `musicbrainz_area_id`, `instance_of`, `legislative_body`, `freebase_id`, `contains_the_administrative_territorial_entity`, `gnis_id`, `fips_10_4_countries_and_regions`, `inception`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `gnd_id`, `category_for_films_shot_at_this_location`, `category_of_people_buried_here`, `category_of_associated_people`, `office_held_by_head_of_government`, `viaf_id`, `library_of_congress_authority_id`, `population`, `nickname`, `topics_main_template`, `ballotpedia_id`, `described_by_source`, `geography_of_topic`, `encyclop\u00e6dia_britannica_online_id`, `has_seal_badge_or_sigil`, `pronunciation_audio`, `gran_enciclop\u00e8dia_catalana_id`, `area`, `quora_topic_id`, `bbc_things_id`, `yso_id`, `short_name`, `demonym`, `subreddit`, `motto_text`, `highest_point`, `lowest_point`, `history_of_topic`, `elevation_above_sea_level`, `us_national_archives_identifier`, `gacs_id`, `mesh_descriptor_id`, `archives_at`, `official_symbol`, `fips_5_2_alpha_code_us_states`, `fips_5_2_numeric_code_us_states`, `wikimedia_outline`, `water_as_percent_of_area`, `named_after`, `coordinates_of_geographic_center`, `executive_body`, `foundational_text`, `highest_judicial_authority`, `getty_thesaurus_of_geographic_names_id`, `part_of`, `c_span_organization_id`, `native_label`, `idref_id`, `archinform_location_id`, `national_library_of_israel_id_old`, `geoshape`, `wolfram_language_entity_code`, `nkcr_aut_id`, `different_from`, `comic_vine_id`, `maximum_temperature_record`, `loc_and_marc_vocabularies_id`, `language_used`, `anthem`, `whos_on_first_id`, `store_norske_leksikon_id`, `located_in_or_next_to_body_of_water`, `omegawiki_defined_meaning`, `minimum_temperature_record`, `category_for_maps`, `larousse_id`, `treccanis_dizionario_di_storia_id`, `french_vikidia_id`, `english_vikidia_id`, `italian_vikidia_id`, `worldcat_identities_id`, `isni`, `kbpedia_id`, `rkd_thesaurus_id`, `hasc`, `interlingual_index_id`, `the_top_tens_id`, `economy_of_topic`, `google_maps_customer_id`, `tripadvisor_id`, `open_civic_data_division_id`, `google_news_topics_id`, `category_for_the_view_of_the_item`, `github_topic`, `uk_parliament_thesaurus_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `coordinates_of_northernmost_point`, `coordinates_of_southernmost_point`, `inaturalist_place_id`, `marriageable_age`, `compulsory_education_maximum_age`, `twitter_topic_id`, `openstreetmap_zoom_level`, `online_pwn_encyclopedia_id`, `wikisimpsons_id`, `related_category`, `den_store_danske_id`, `per_capita_income`, `mean_age`, `number_of_households`, `hashtag`, `national_library_of_israel_j9u_id`, `ringgold_id`, `catholic_encyclopedia_id`]\n- Table: `economy_of_region`, Columns: [`label`, `description`, `commons_category`, `topics_main_category`, `instance_of`, `location`, `country`, `subclass_of`, `nominal_gdp`]\n- Table: `geography`, Columns: [`label`, `description`, `topics_main_category`, `subclass_of`, `instance_of`]\n- Table: `state_park_of_the_united_states`, Columns: [`label`, `description`, `subclass_of`, `located_in_the_administrative_territorial_entity`, `country`, `topics_main_category`, `has_list`]\n- Table: `eponym`, Columns: [`label`, `description`, `freebase_id`, `instance_of`]\n- Table: `wikimedia_category`, Columns: [`label`, `description`, `instance_of`, `commons_category`, `category_combines_topics`, `category_contains`]\n- Table: `facet_of`, Columns: [`label`, `description`, `seal_image`, `dewey_decimal_classification`, `topics_main_wikimedia_portal`, `country`, `capital`, `shares_border_with`, `flag_image`, `flag`, `iso_3166_2_code`, `commons_category`, `locator_map_image`, `located_in_time_zone`, `head_of_government`, `openstreetmap_relation_id`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `official_website`, `topics_main_category`, `page_banner`, `curlie_id`, `musicbrainz_area_id`, `instance_of`, `legislative_body`, `freebase_id`, `contains_the_administrative_territorial_entity`, `gnis_id`, `fips_10_4_countries_and_regions`, `inception`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `gnd_id`, `category_for_films_shot_at_this_location`, `category_of_people_buried_here`, `category_of_associated_people`, `office_held_by_head_of_government`, `viaf_id`, `library_of_congress_authority_id`, `population`, `nickname`, `topics_main_template`, `ballotpedia_id`, `described_by_source`, `geography_of_topic`, `encyclop\u00e6dia_britannica_online_id`, `has_seal_badge_or_sigil`, `pronunciation_audio`, `gran_enciclop\u00e8dia_catalana_id`, `area`, `quora_topic_id`, `bbc_things_id`, `yso_id`, `short_name`, `demonym`, `subreddit`, `motto_text`, `highest_point`, `lowest_point`, `history_of_topic`, `elevation_above_sea_level`, `us_national_archives_identifier`, `gacs_id`, `mesh_descriptor_id`, `archives_at`, `official_symbol`, `fips_5_2_alpha_code_us_states`, `fips_5_2_numeric_code_us_states`, `wikimedia_outline`, `water_as_percent_of_area`, `named_after`, `coordinates_of_geographic_center`, `executive_body`, `foundational_text`, `highest_judicial_authority`, `getty_thesaurus_of_geographic_names_id`, `part_of`, `c_span_organization_id`, `native_label`, `idref_id`, `archinform_location_id`, `national_library_of_israel_id_old`, `geoshape`, `wolfram_language_entity_code`, `nkcr_aut_id`, `different_from`, `comic_vine_id`, `maximum_temperature_record`, `loc_and_marc_vocabularies_id`, `language_used`, `anthem`, `whos_on_first_id`, `store_norske_leksikon_id`, `located_in_or_next_to_body_of_water`, `omegawiki_defined_meaning`, `minimum_temperature_record`, `category_for_maps`, `larousse_id`, `treccanis_dizionario_di_storia_id`, `french_vikidia_id`, `english_vikidia_id`, `italian_vikidia_id`, `worldcat_identities_id`, `isni`, `kbpedia_id`, `rkd_thesaurus_id`, `hasc`, `interlingual_index_id`, `the_top_tens_id`, `economy_of_topic`, `google_maps_customer_id`, `tripadvisor_id`, `open_civic_data_division_id`, `google_news_topics_id`, `category_for_the_view_of_the_item`, `github_topic`, `uk_parliament_thesaurus_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `coordinates_of_northernmost_point`, `coordinates_of_southernmost_point`, `inaturalist_place_id`, `marriageable_age`, `compulsory_education_maximum_age`, `twitter_topic_id`, `openstreetmap_zoom_level`, `online_pwn_encyclopedia_id`, `wikisimpsons_id`, `related_category`, `den_store_danske_id`, `per_capita_income`, `mean_age`, `number_of_households`, `hashtag`, `national_library_of_israel_j9u_id`, `ringgold_id`, `catholic_encyclopedia_id`]",
        "Response": "Table: `place_of_birth`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Trucks (truck_id, truck_licence_number, truck_details)  VALUES (9, '78683', 'Bud');\nDatabase State:\n- Table: Customer_Addresses, Columns: [customer_id, address_id, date_from, address_type, date_to]\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer]\n- Table: Regular_Orders, Columns: [regular_order_id, distributer_id]\n- Table: Order_Deliveries, Columns: [location_code, actual_order_id, delivery_status_code, driver_employee_id, truck_id, delivery_date]\n- Table: Delivery_Routes, Columns: [route_id, route_name, other_route_details]\n- Table: Actual_Orders, Columns: [actual_order_id, order_status_code, regular_order_id, actual_order_date]",
        "Response": "Table: Trucks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `follows`, `followed_by`, `part_of`, `point_in_time`)  VALUES ('2010 BC', 'year', 'year BC', '2011 BC', '2009 BC', '2010s BC', '-2010-01-01T00:00:00Z');\nDatabase State:\n- Table: `2010s_bc`, Columns: [`label`, `description`, `instance_of`, `follows`, `followed_by`, `part_of`, `point_in_time`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `follows`, `followed_by`, `part_of`, `point_in_time`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `geonames_id`, `gns_unique_feature_id`)  VALUES ('Poen in 1991', 'About Mandal Commission', 'reservation', 'nan', 'nan', 'nan', 'nan', 'nan');\nDatabase State:\n- Table: `political_border`, Columns: [`label`, `description`, `capital`, `commons_category`, `country`, `iso_3166_2_code`, `locator_map_image`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `shares_border_with`, `topics_main_category`, `instance_of`, `freebase_id`, `fips_10_4_countries_and_regions`, `geonames_id`, `population`, `image`, `area`, `official_website`, `inception`, `language_used`, `whos_on_first_id`, `openstreetmap_relation_id`, `geoshape`, `inaturalist_place_id`, `musicbrainz_area_id`, `getty_thesaurus_of_geographic_names_id`]\n- Table: `administrative_centre`, Columns: [`label`, `description`, `openstreetmap_relation_id`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `capital`, `instance_of`, `population`, `area`, `flag_image`, `commons_category`, `iso_3166_2_code`, `locator_map_image`, `shares_border_with`, `topics_main_category`, `freebase_id`, `fips_10_4_countries_and_regions`, `geonames_id`, `musicbrainz_area_id`, `inception`, `official_website`, `language_used`, `whos_on_first_id`, `geoshape`, `inaturalist_place_id`, `getty_thesaurus_of_geographic_names_id`]\n- Table: `capital_city`, Columns: [`label`, `description`, `inception`, `country`, `commons_category`, `image`, `coordinate_location`, `instance_of`, `topics_main_category`, `located_in_the_administrative_territorial_entity`, `freebase_id`, `official_website`, `geonames_id`, `viaf_id`, `capital_of`, `population`, `encyclop\u00e6dia_britannica_online_id`, `elevation_above_sea_level`, `area`, `whos_on_first_id`]\n- Table: `reservation`, Columns: [`label`, `description`, `instance_of`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `geonames_id`, `gns_unique_feature_id`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `flag_image`, `commons_category`, `capital`, `country`, `iso_3166_2_code`, `locator_map_image`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `shares_border_with`, `topics_main_category`, `musicbrainz_area_id`, `instance_of`, `freebase_id`, `fips_10_4_countries_and_regions`, `geonames_id`, `official_website`, `population`, `openstreetmap_relation_id`, `area`, `inception`, `image`, `whos_on_first_id`, `geoshape`, `inaturalist_place_id`, `getty_thesaurus_of_geographic_names_id`]",
        "Response": "Table: `reservation`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`id`, `name`, `Height`, `Prominence`, `Range`, `Country`)  VALUES (18, 'Muggia', 3950.0, 500.0, 'Lasta Massif', 'Ethiopia');\nDatabase State:\n- Table: `camera_lens`, Columns: [`id`, `brand`, `name`, `focal_length_mm`, `max_aperture`]",
        "Response": "Table: `mountain`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Document_Sections_Images (section_id, image_id)  VALUES (54, 12);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Document_Sections_Images"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Code`)  VALUES (67917, 'TAA', '09-JUL-10', '13-JUL-10', 75.0, 'SALERNO', 'LOU', 1, 0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Reservations`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Addresses (address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details)  VALUES (12, '11940 Pauline Shoals', NULL, NULL, 'West Lianafurt', '619', 'Arkansas', 'USA', NULL);\nDatabase State:\n- Table: Ref_Detention_Type, Columns: [detention_type_code, detention_type_description]\n- Table: Assessment_Notes, Columns: [notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details]\n- Table: Detention, Columns: [detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details]\n- Table: Ref_Incident_Type, Columns: [incident_type_code, incident_type_description]\n- Table: Ref_Address_Types, Columns: [address_type_code, address_type_description]\n- Table: Students, Columns: [student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details]\n- Table: Students_in_Detention, Columns: [student_id, detention_id, incident_id]\n- Table: Student_Addresses, Columns: [student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details]\n- Table: Addresses, Columns: [address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details]",
        "Response": "Table: Addresses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO registration (course_id, student_id, grade, sat)  VALUES (11, 17, 'D', 5);\nDatabase State:\n- Table: RA, Columns: [student_id, capability, prof_id, salary]\n- Table: `course`, Columns: [course_id, name, credit, diff]\n- Table: student, Columns: [student_id, f_name, l_name, phone_number, email, intelligence, gpa, type]",
        "Response": "Table: registration"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Teachers (teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details)  VALUES (2, 7, 'Sid', 'Tremayne', 'Brakus', '1', '202.626.1698x9242', 'deborah37@example.com', NULL);\nDatabase State:\n- Table: Ref_Detention_Type, Columns: [detention_type_code, detention_type_description]\n- Table: Assessment_Notes, Columns: [notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details]",
        "Response": "Table: Teachers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `volume` (`Volume_ID`, `Volume_Issue`, `Issue_Date`, `Weeks_on_Top`, `Song`, `Artist_ID`)  VALUES (10, '46:16', '25 July', 1.0, 'Head to Toe ', 5);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `volume`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `storm` (`Storm_ID`, `Name`, `Dates_active`, `Max_speed`, `Damage_millions_USD`, `Number_Deaths`)  VALUES (3, 'Three', 'August5\u2013August14', 972, 13.0, 52);\nDatabase State:\n- Table: `region`, Columns: [Region_id, Region_code, Region_name]\n- Table: affected_region, Columns: [Region_id, Storm_ID, Number_city_affected]",
        "Response": "Table: `storm`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (semester_id, semester_name, semester_description, other_details)  VALUES (6, 'spring 2012', 'l', NULL);\nDatabase State:\n- Table: Sections, Columns: [section_id, course_id, section_name, section_description, other_details]\n- Table: Degree_Programs, Columns: [degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details]\n- Table: Student_Enrolment_Courses, Columns: [student_course_id, course_id, student_enrolment_id]\n- Table: Addresses, Columns: [address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details]",
        "Response": "Table: Semesters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `discipline_enrollments` (`Campus`)  VALUES (17, 19, 2004, 1874, 146);\nDatabase State:\n- Table: `enrollments`, Columns: [`Campus`]\n- Table: `discipline_enrollments`, Columns: [`Campus`]\n- Table: `degrees`, Columns: [`Year`, `Campus`]\n- Table: `Campuses`, Columns: [`Id`]\n- Table: `faculty`, Columns: [`Campus`]",
        "Response": "Table: `discipline_enrollments`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `instance_of`, `strand_orientation`, `genomic_start`, `genomic_end`, `ncbi_locus_tag`)  VALUES ('Iron hydrogenase, small subunit Moth_1717', 'microbial gene found in Moorella thermoacetica ATCC 39073', '3833167', 'gene', 'Iron hydrogenase, small subunit Moth_1717', 'Moorella thermoacetica ATCC 39073', 'gene', 'reverse strand', '1759098', '1760819', 'Moth_1717');\nDatabase State:\n- Table: `nadhubiquinone_oxidoreductase_75kda_subunit_conserved_site_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `cell_component`, `molecular_function`, `biological_process`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `instance_of`, `strand_orientation`, `genomic_start`, `genomic_end`, `ncbi_locus_tag`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `phosphoserine_aminotransferase` (`label`, `description`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('3-phosphoserine/phosphohydroxythreonine aminotransferase NGO1283', 'microbial protein found in Neisseria gonorrhoeae FA 1090', 'protein', '3-phosphoserine/phosphohydroxythreonine aminotransferase NGO1283', 'Q5F7A0', 'cellular amino acid biosynthetic process', 'transaminase activity', 'cytoplasm', 'Aminotransferase class-V, pyridoxal-phosphate binding site', 'Neisseria gonorrhoeae FA 1090', 'YP_208349', 'protein', 'Pyridoxal phosphate-dependent transferase, major domain');\nDatabase State:\n- Table: `phosphoserine_aminotransferase`, Columns: [`label`, `description`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `phosphoserine_aminotransferase`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `head_of_state` (`label`, `description`, `instance_of`, `place_of_birth`, `position_held`, `date_of_birth`, `occupation`, `sex_or_gender`, `country_of_citizenship`, `given_name`, `image`, `member_of_political_party`, `educated_at`, `commons_category`, `name_in_native_language`, `viaf_id`, `gnd_id`, `opensanctions_id`, `languages_spoken_written_or_signed`)  VALUES ('Myint Swe', 'Burmese general, acting President of Myanmar', 'human', 'Mandalay', 'President of Myanmar', '+1951-05-24T00:00:00Z', 'military personnel', 'male', 'Myanmar', 'nan', 'Myint Swe on 30 March 2016.jpg', 'Union Solidarity and Development Party', 'Defence Services Academy', 'Myint Swe', 'nan', 'nan', 'nan', 'Q3331362', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `head_of_state`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('ribonucleotide-diphosphate reductase subunit beta STM2278', 'microbial gene found in Salmonella enterica subsp. enterica serovar Typhimurium str. LT2', '1253800', 'gene', 'Ribonucleotide-diphosphate reductase subunit beta STM2278', 'Salmonella enterica subsp. enterica serovar Typhimurium str. LT2', 'forward strand', '2384926.0', '2383782.0', 'gene', 'STM2278');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Reviews` (business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length)  VALUES (919, 24936, 5, 'None', 'Low', 'None', 'Short');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`)  VALUES ('EIF1', 'gene of the species Macaca nemestrina', '105472147.0', 'gene', 'Eukaryotic translation initiation factor 1', 'southern pig-tailed macaque', 'nan', 'nan', 'nan', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`)  VALUES ('human chromosome 4', 'human chromosome', 'NC_000004.12', 'Homo sapiens', 'chromosome');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `homologene_id`, `refseq_rna_id`, `ensembl_transcript_id`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`]\n- Table: `peptidase_m12a_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`]\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `commons_category`, `instance_of`, `taxon_rank`, `topics_main_category`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `eppo_code`, `irmng_id`, `image`, `catalogue_of_life_id`]",
        "Response": "Table: `chromosome`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id_restaurant, street_num, street_name, city)  VALUES (9007, NULL, 'rd', 'cupertino');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `from_narrative_universe`, `pok\u00e9mon_index`, `part_of`, `height`, `color`, `bulbapedia_article_id`, `comic_vine_id`, `giant_bomb_id`, `media_franchise`, `fandom_article_id`, `instance_of`, `first_appearance`, `present_in_work`, `subclass_of`)  VALUES ('Honedge', 'Pok\u00e9mon species', 'Pok\u00e9mon universe', '679', 'list of Pok\u00e9mon introduced in Generation VI', 80.0, 'brown', 'Honedge_(Pok\u00e9mon)', '4005-129493', '3015-8049', 'Pok\u00e9mon', 'it.pokemon:Honedge', 'ghost-type Pok\u00e9mon', 'sixth generation of Pok\u00e9mon', 'Pok\u00e9mon', 'video game character');\nDatabase State:\n- Table: `part`, Columns: [`label`, `description`, `instance_of`, `has_parts`, `is_a_list_of`]",
        "Response": "Table: `mineral_egg_group`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `instance_of`, `field_of_this_occupation`)  VALUES ('palestinologist', 'scholar who specializes in the study of the region known as Palestine, in any aspect (history, nature, etc.). It should not be confused with a Palestinianist', 'scholar of area studies', 'profession', 'Palestine studies');\nDatabase State:\n- Table: `scholar_of_area_studies`, Columns: [`label`, `description`, `subclass_of`, `instance_of`, `field_of_this_occupation`]\n- Table: `academic_discipline`, Columns: [`label`, `description`, `is_the_study_of`, `subclass_of`, `instance_of`, `practiced_by`]\n- Table: `intentional_human_activity`, Columns: [`label`, `description`, `topics_main_category`, `instance_of`, `subclass_of`, `field_of_this_occupation`]\n- Table: `research`, Columns: [`label`, `description`, `topics_main_category`, `freebase_id`, `commons_category`, `encyclop\u00e6dia_britannica_online_id`, `library_of_congress_authority_id`, `nkcr_aut_id`, `described_by_source`, `gnd_id`, `studied_by`, `instance_of`, `quora_topic_id`, `on_focus_list_of_wikimedia_project`, `great_russian_encyclopedia_online_id`, `yso_id`, `store_norske_leksikon_id`, `kbpedia_id`, `different_from`, `online_pwn_encyclopedia_id`]",
        "Response": "Table: `scholar_of_area_studies`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `subclass_of`, `reactome_id`, `exact_match`, `part_of`)  VALUES ('Gal-Gal-Xyl-BCAN [Golgi lumen]', 'An instance of entity with accessioned sequence in Homo sapiens with Reactome ID (R-HSA-2063986)', 'Homo sapiens', 'Brevican', 'R-HSA-2063986', 'https://identifiers.org/reactome:R-HSA-2063986', 'Gal-Gal-Xyl-proteins [Golgi lumen]');\nDatabase State:\n- Table: `part`, Columns: [`label`, `description`, `found_in_taxon`, `instance_of`, `reactome_id`, `exact_match`, `has_parts`, `part_of`]",
        "Response": "Table: `brevican`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate)  VALUES (59010, 69468, '2350-42CD-B1', 1, 937, 1, 49.0, 0.0, 49.0, 'AC9D1D32-3B7D-419A-AC4B-E7A69C79DFCF', '2013-10-30 00:00:00.0');\nDatabase State:\n- Table: `EmployeePayHistory`, Columns: [BusinessEntityID, RateChangeDate, Rate, PayFrequency, ModifiedDate]\n- Table: Password, Columns: [BusinessEntityID, PasswordHash, PasswordSalt, rowguid, ModifiedDate]\n- Table: `Department`, Columns: [DepartmentID, Name, GroupName, ModifiedDate]\n- Table: TransactionHistory, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: Culture, Columns: [CultureID, Name, ModifiedDate]\n- Table: UnitMeasure, Columns: [UnitMeasureCode, Name, ModifiedDate]\n- Table: ProductListPriceHistory, Columns: [ProductID, StartDate, EndDate, ListPrice, ModifiedDate]\n- Table: SpecialOfferProduct, Columns: [SpecialOfferID, ProductID, rowguid, ModifiedDate]\n- Table: ProductModel, Columns: [ProductModelID, Name, CatalogDescription, Instructions, rowguid, ModifiedDate]\n- Table: `ContactType`, Columns: [ContactTypeID, Name, ModifiedDate]\n- Table: `Address`, Columns: [AddressID, AddressLine1, AddressLine2, City, StateProvinceID, PostalCode, SpatialLocation, rowguid, ModifiedDate]\n- Table: Vendor, Columns: [BusinessEntityID, AccountNumber, Name, CreditRating, PreferredVendorStatus, ActiveFlag, PurchasingWebServiceURL, ModifiedDate]\n- Table: Employee, Columns: [BusinessEntityID, NationalIDNumber, LoginID, OrganizationNode, OrganizationLevel, JobTitle, BirthDate, MaritalStatus, Gender, HireDate, SalariedFlag, VacationHours, SickLeaveHours, CurrentFlag, rowguid, ModifiedDate]\n- Table: EmailAddress, Columns: [BusinessEntityID, EmailAddressID, EmailAddress, rowguid, ModifiedDate]\n- Table: Customer, Columns: [CustomerID, PersonID, StoreID, TerritoryID, AccountNumber, rowguid, ModifiedDate]\n- Table: `StateProvince`, Columns: [StateProvinceID, StateProvinceCode, CountryRegionCode, IsOnlyStateProvinceFlag, Name, TerritoryID, rowguid, ModifiedDate]\n- Table: `BusinessEntity`, Columns: [BusinessEntityID, rowguid, ModifiedDate]\n- Table: SalesOrderHeaderSalesReason, Columns: [SalesOrderID, SalesReasonID, ModifiedDate]\n- Table: `CreditCard`, Columns: [CreditCardID, CardType, CardNumber, ExpMonth, ExpYear, ModifiedDate]\n- Table: Shift, Columns: [ShiftID, Name, StartTime, EndTime, ModifiedDate]\n- Table: ProductCostHistory, Columns: [ProductID, StartDate, EndDate, StandardCost, ModifiedDate]\n- Table: ProductCategory, Columns: [ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: Person, Columns: [BusinessEntityID, PersonType, NameStyle, Title, FirstName, MiddleName, LastName, Suffix, EmailPromotion, AdditionalContactInfo, Demographics, rowguid, ModifiedDate]\n- Table: `AddressType`, Columns: [AddressTypeID, Name, rowguid, ModifiedDate]\n- Table: ProductDocument, Columns: [ProductID, DocumentNode, ModifiedDate]\n- Table: TransactionHistoryArchive, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: SalesTerritory, Columns: [TerritoryID, Name, CountryRegionCode, `Group`, SalesYTD, SalesLastYear, CostYTD, CostLastYear, rowguid, ModifiedDate]\n- Table: ProductSubcategory, Columns: [ProductSubcategoryID, ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: `Product`, Columns: [ProductID, Name, ProductNumber, MakeFlag, FinishedGoodsFlag, Color, SafetyStockLevel, ReorderPoint, StandardCost, ListPrice, Size, SizeUnitMeasureCode, WeightUnitMeasureCode, Weight, DaysToManufacture, ProductLine, Class, Style, ProductSubcategoryID, ProductModelID, SellStartDate, SellEndDate, DiscontinuedDate, rowguid, ModifiedDate]\n- Table: ProductVendor, Columns: [ProductID, BusinessEntityID, AverageLeadTime, StandardPrice, LastReceiptCost, LastReceiptDate, MinOrderQty, MaxOrderQty, OnOrderQty, UnitMeasureCode, ModifiedDate]\n- Table: ProductPhoto, Columns: [ProductPhotoID, ThumbNailPhoto, ThumbnailPhotoFileName, LargePhoto, LargePhotoFileName, ModifiedDate]\n- Table: CountryRegionCurrency, Columns: [CountryRegionCode, CurrencyCode, ModifiedDate]\n- Table: ProductReview, Columns: [ProductReviewID, ProductID, ReviewerName, ReviewDate, EmailAddress, Rating, Comments, ModifiedDate]\n- Table: CountryRegion, Columns: [CountryRegionCode, Name, ModifiedDate]",
        "Response": "Table: SalesOrderDetail"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Other_Property_Features (property_id, feature_id, property_feature_description)  VALUES (14, 4, 'quo');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Other_Property_Features"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `country`, `sport`, `organizer`, `followed_by`, `follows`, `edition_number`, `broadcast_by`, `point_in_time`)  VALUES ('Fight 2 Win 110', 'Brazilian Jiu Jitsu event in 2019', 'Brazilian Jiu Jitsu Competition', 'United States of America', 'Brazilian jiu-jitsu', 'Fight 2 Win Promotions', 'Fight 2 Win 111', 'Fight 2 Win 109', '110', 'FloGrappling', '+2019-04-27T00:00:00Z');\nDatabase State:\n- Table: `brazilian_jiu_jitsu_competition`, Columns: [`label`, `description`, `instance_of`, `country`, `organizer`, `point_in_time`, `sport`, `follows`, `edition_number`, `broadcast_by`, `followed_by`]\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `country`, `organizer`, `point_in_time`, `sport`, `follows`, `edition_number`, `broadcast_by`, `followed_by`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `country`, `sport`, `organizer`, `followed_by`, `follows`, `edition_number`, `broadcast_by`, `point_in_time`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id)  VALUES (6274, 'Kate Vaiden', '9780684846941', 1, 306, '1998-05-29', 1777);\nDatabase State:\n- Table: customer_address, Columns: [customer_id, address_id, status_id]\n- Table: address, Columns: [address_id, street_number, street_name, city, country_id]\n- Table: `order_line`, Columns: [line_id, order_id, book_id, price]\n- Table: order_status, Columns: [status_id, status_value]\n- Table: author, Columns: [author_id, author_name]",
        "Response": "Table: book"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `schedule` (`Cinema_ID`, `Film_ID`, `Date`, `Show_times_per_day`, `Price`)  VALUES (1, 3, '21 Jun', 2, 8.990000000000000213);\nDatabase State:\n- Table: `cinema`, Columns: [`Cinema_ID`, `Name`, `Openning_year`, `Capacity`, `Location`]\n- Table: `schedule`, Columns: [`Cinema_ID`, `Film_ID`, `Date`, `Show_times_per_day`, `Price`]",
        "Response": "Table: `schedule`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, DATE, PATIENT, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION)  VALUES ('69866db8-c59c-403b-a270-7b288638c2ce', '2017-01-14', '7e9c51cb-d8b3-4353-85f9-9e060e2155f2', 170258001, 'Outpatient Encounter', NULL, NULL);\nDatabase State:\n- Table: allergies, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: encounters, Columns: [ID, DATE, PATIENT, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: patients, Columns: [patient, birthdate, deathdate, ssn, drivers, passport, prefix, first, last, suffix, maiden, marital, race, ethnicity, gender, birthplace, address]\n- Table: procedures, Columns: [DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: conditions, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: careplans, Columns: [ID, START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: `claims`, Columns: [ID, PATIENT, BILLABLEPERIOD, ORGANIZATION, ENCOUNTER, DIAGNOSIS, TOTAL]\n- Table: medications, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: immunizations, Columns: [DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: observations, Columns: [DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, VALUE, UNITS]",
        "Response": "Table: encounters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `instance_of`, `part_of`)  VALUES ('Degerfors Municipality', 'municipality in \u00d6rebro County, Sweden', '\u00d6rebro County', 'Sweden', '59.233333333333', 'municipality of Sweden', 'N\u00e4rke');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `n\u00e4rke`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `financial_regulatory_agency` (`label`, `description`, `instance_of`, `official_website`, `country`, `freebase_id`)  VALUES ('Auditing and Assurance Standards Board', 'nan', 'organization', 'nan', 'Canada', '/m/0vzsmt_');\nDatabase State:\n- Table: `part`, Columns: [`label`, `description`, `instance_of`, `viaf_id`, `commons_category`, `locator_map_image`, `topics_main_category`, `freebase_id`, `coordinate_location`, `has_parts`, `worldcat_identities_id`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `coordinate_location`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`, `freebase_id`, `commons_category`, `geonames_id`]\n- Table: `head_of_state`, Columns: [`label`, `description`, `sex_or_gender`, `spouse`, `commons_category`, `viaf_id`, `gnd_id`, `date_of_birth`, `image`, `educated_at`, `instance_of`, `award_received`, `freebase_id`, `place_of_birth`, `country_of_citizenship`, `given_name`, `munzinger_person_id`, `name_in_native_language`, `occupation`, `position_held`, `worldcat_identities_id`, `opensanctions_id`, `languages_spoken_written_or_signed`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `commons_category`, `country`, `coordinate_location`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `area`, `official_website`, `population`, `located_in_the_administrative_territorial_entity`, `locator_map_image`]\n- Table: `financial_regulatory_agency`, Columns: [`label`, `description`, `instance_of`, `official_website`, `country`, `freebase_id`]",
        "Response": "Table: `financial_regulatory_agency`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (au_id, au_lname, au_fname, phone, address, city, state, zip, contract)  VALUES ('472-27-2349', 'Gringlesby', 'Burt', '707 938-6445', 'PO Box 792', 'Covelo', 'CA', '95428', '0');\nDatabase State:\n- Table: titleauthor, Columns: [au_id, title_id, au_ord, royaltyper]\n- Table: discounts, Columns: [discounttype, stor_id, lowqty, highqty, discount]\n- Table: publishers, Columns: [pub_id, pub_name, city, state, country]\n- Table: titles, Columns: [title_id, title, type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate]\n- Table: roysched, Columns: [title_id, lorange, hirange, royalty]\n- Table: authors, Columns: [au_id, au_lname, au_fname, phone, address, city, state, zip, contract]\n- Table: jobs, Columns: [job_id, job_desc, min_lvl, max_lvl]\n- Table: sales, Columns: [stor_id, ord_num, ord_date, qty, payterms, title_id]\n- Table: stores, Columns: [stor_id, stor_name, stor_address, city, state, zip]\n- Table: pub_info, Columns: [pub_id, logo, pr_info]\n- Table: employee, Columns: [emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date]",
        "Response": "Table: authors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, direction)  VALUES (11, 'west');\nDatabase State:\n- Table: cars, Columns: [id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num]",
        "Response": "Table: trains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `medicine_enzyme_interaction` (`enzyme_id`, `medicine_id`, `interaction_type`)  VALUES (2, 8, 'inhibitor');\nDatabase State:\n- Table: `medicine`, Columns: [`id`, `name`, `Trade_Name`, `FDA_approved`]\n- Table: `medicine_enzyme_interaction`, Columns: [`enzyme_id`, `medicine_id`, `interaction_type`]\n- Table: `enzyme`, Columns: [`id`, `name`, `Location`, `Product`, `Chromosome`, `OMIM`, `Porphyria`]",
        "Response": "Table: `medicine_enzyme_interaction`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, person_id, category, role, credited)  VALUES ('tt0629394', 'nm0285969', 'Produced by', 'co-producer', 'true');\nDatabase State:\n- Table: Credit, Columns: [episode_id, person_id, category, role, credited]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EVENTID, REFID, EVENT_DATE, AMOUNT)  VALUES (2897150, 304838, '2007-04-16 12:00:00.0', 11.05700000000000038);\nDatabase State:\n- Table: `Mailings1_2`, Columns: [REFID, REF_DATE, RESPONSE]\n- Table: `Customers`, Columns: [ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age]\n- Table: Demog, Columns: [GEOID, INHABITANTS_K, INCOME_K, A_VAR1, A_VAR2, A_VAR3, A_VAR4, A_VAR5, A_VAR6, A_VAR7, A_VAR8, A_VAR9, A_VAR10, A_VAR11, A_VAR12, A_VAR13, A_VAR14, A_VAR15, A_VAR16, A_VAR17, A_VAR18]\n- Table: `Sales`, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]",
        "Response": "Table: `Sales`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO titles (title_id, title, type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate)  VALUES ('TC4203', 'Fifty Years in Buckingham Palace Kitchens', 'trad_cook', '0877', 11.94999999999999929, 4000.0, 14, 15096, 'More anecdotes from the Queen''s favorite cook describing life among English royalty. Recipes, techniques, tender vignettes.', '1991-06-12 00:00:00.0');\nDatabase State:\n- Table: titles, Columns: [title_id, title, type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate]\n- Table: stores, Columns: [stor_id, stor_name, stor_address, city, state, zip]\n- Table: pub_info, Columns: [pub_id, logo, pr_info]\n- Table: discounts, Columns: [discounttype, stor_id, lowqty, highqty, discount]\n- Table: authors, Columns: [au_id, au_lname, au_fname, phone, address, city, state, zip, contract]\n- Table: jobs, Columns: [job_id, job_desc, min_lvl, max_lvl]\n- Table: roysched, Columns: [title_id, lorange, hirange, royalty]",
        "Response": "Table: titles"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11288614, 'JB228265', '4/18/2018 9:09', '042XX W BELMONT AVE', '1330', 'SMALL RETAIL STORE', 'FALSE', 'FALSE', 1731, 17, 31, 16, '26', '41.93902814', '-87.73227687');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`name`)  VALUES ('student888');\nDatabase State:\n- Table: male, Columns: [`name`]\n- Table: enlist, Columns: [`name`, organ]\n- Table: bool, Columns: [`name`]\n- Table: disabled, Columns: [`name`]\n- Table: unemployed, Columns: [`name`]",
        "Response": "Table: unemployed"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `followed_by` (`label`, `description`, `follows`, `followed_by`, `participant_in`, `part_of_the_series`, `instance_of`, `country`, `point_in_time`)  VALUES ('France in the Eurovision Song Contest 2016', 'nan', 'France in the Eurovision Song Contest 2015', 'nan', 'Eurovision Song Contest 2016', 'France in the Eurovision Song Contest', 'France in the Eurovision Song Contest', 'France', '+2016-00-00T00:00:00Z');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `follows`, `followed_by`, `participant_in`, `part_of_the_series`, `instance_of`, `country`, `point_in_time`]\n- Table: `event`, Columns: [`label`, `description`, `winner`, `participant`, `commons_category`, `topics_main_category`, `instance_of`, `freebase_id`, `presenter`, `location`, `imdb_id`, `point_in_time`, `genre`, `number_of_participants`, `official_website`, `part_of_the_series`, `fandom_article_id`]\n- Table: `follows`, Columns: [`label`, `description`, `follows`, `followed_by`, `participant_in`, `part_of_the_series`, `instance_of`, `country`, `point_in_time`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Performance_ID`, `Date`, `Host`, `Location`, `Attendance`)  VALUES (2.0, 'February 4', 'New York Rangers', 'Madison Square Garden', 1820);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `performance`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Artwork_ID`, `Festival_ID`, `Result`)  VALUES (9, 5, 'Nominated');\nDatabase State:\n- Table: nomination, Columns: [`Artwork_ID`, `Festival_ID`, `Result`]\n- Table: `festival_detail`, Columns: [`Festival_ID`, `Festival_Name`, `Chair_Name`, `Location`, `Year`, `Num_of_Audience`]\n- Table: artwork, Columns: [`Artwork_ID`, `Type`, `Name`]",
        "Response": "Table: nomination"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (cmi_cross_ref_id, master_customer_id, source_system_code)  VALUES (77, 4, 'Electoral');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: CMI_Cross_References"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Glycogen synthesis protein GlgS SDY_3228', 'microbial protein found in Shigella dysenteriae Sd197', 'Shigella dysenteriae Sd197', 'protein', 'Q32BR9', 'glycogen synthesis protein GlgS SDY_3228', 'protein', 'YP_404727', 'GlgS superfamily');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `ncbi_locus_tag`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]",
        "Response": "Table: `surface_composition_regulator`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `tm1646_like_domain_superfamily` (`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Hypothetical protein BC1634', 'microbial protein found in Bacillus cereus ATCC 14579', 'protein', 'Q81FF6', 'Bacillus cereus ATCC 14579', 'hypothetical protein BC1634', 'protein', 'NP_831412', 'Protein of unknown function DUF327');\nDatabase State:\n- Table: `tm1646_like_domain_superfamily`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `found_in_taxon`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `instance_of`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `encodes`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `tm1646_like_domain_superfamily`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO zip_data (zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, `1st_quarter_payroll`, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA)  VALUES (22821, 'Dayton', 'VA', 'No', 'Post Office', NULL, 'Eastern', 'Yes', 38.47668500000000336, -79.07238300000000208, 1352, 51, 165, 'South', 'South Atlantic', 5544, 5753, 2123, 212500, 60613, 2.709999999999999965, 5579, 47, 228, 17, 16, 0, 143, 2879, 2874, 38.20000000000000285, 37.10000000000000142, 39.20000000000000285, 2046, 100, 2559, 139, 16642000, 75996000, 2182, 0.2919999999999999818, 81.87000000000000454, 2018, 0, 1100, 815, 130, 60, 35, 60, 850, 1346000, 1061000, 73000, 25500);\nDatabase State:\n- Table: alias, Columns: [zip_code, alias]\n- Table: area_code, Columns: [zip_code, area_code]\n- Table: zip_congress, Columns: [zip_code, district]\n- Table: avoid, Columns: [zip_code, bad_alias]\n- Table: CBSA, Columns: [CBSA, CBSA_name, CBSA_type]",
        "Response": "Table: zip_data"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Manufacturer_ID`, `Open_Year`, `Name`, `Num_of_Factories`, `Num_of_Shops`)  VALUES (5, 2000.0, 'Chevrolet', 38, 24);\nDatabase State:\n- Table: `manufacturer`, Columns: [`Manufacturer_ID`, `Open_Year`, `Name`, `Num_of_Factories`, `Num_of_Shops`]",
        "Response": "Table: `manufacturer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Match_ID`, `Date`, `Venue`, `Score`, `Result`, `Competition`)  VALUES (4, '23 July 1992', 'Estadio Cuscatl\u00e1n , San Salvador , El Salvador', '3-0', '5-1', '1994 FIFA World Cup qualification');\nDatabase State:\n- Table: `city`, Columns: [`City_ID`, `City`, `Hanzi`, `Hanyu_Pinyin`, `Regional_Population`, `GDP`]\n- Table: `hosting_city`, Columns: [`Year`, `Match_ID`, `Host_City`]",
        "Response": "Table: `match`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`architect_id`, `id`, `name`, `location`, `length_meters`, `length_feet`)  VALUES (3, 3, 'Kolob Arch', 'Zion National Park , Utah , USA', 87.0, 287.0);\nDatabase State:\n- Table: `bridge`, Columns: [`architect_id`, `id`, `name`, `location`, `length_meters`, `length_feet`]\n- Table: `mill`, Columns: [`architect_id`, `id`, `location`, `name`, `type`, `built_year`, `notes`]",
        "Response": "Table: `bridge`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, student_id, grade, sat)  VALUES (9, 12, 'A', 5);\nDatabase State:\n- Table: RA, Columns: [student_id, capability, prof_id, salary]\n- Table: `course`, Columns: [course_id, name, credit, diff]\n- Table: registration, Columns: [course_id, student_id, grade, sat]\n- Table: prof, Columns: [prof_id, gender, first_name, last_name, email, popularity, teachingability, graduate_from]",
        "Response": "Table: registration"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (p_id, professor, student, hasPosition, inPhase, yearsInProgram)  VALUES (190, 0, 1, '0', '0', '0');\nDatabase State:\n- Table: person, Columns: [p_id, professor, student, hasPosition, inPhase, yearsInProgram]\n- Table: taughtBy, Columns: [course_id, p_id]\n- Table: course, Columns: [course_id, courseLevel]\n- Table: `advisedBy`, Columns: [p_id, p_id_dummy]",
        "Response": "Table: person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Ingredient (ingredient_id, category, name, plural)  VALUES (315, 'frozen meat/poultry/seafood', 'frozen rabbit', 's');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Ingredient"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `performance` (`Performance_ID`, `Orchestra_ID`, `Type`, `Date`, `Official_ratings_(millions)`, `Weekly_rank`, `Share`)  VALUES (7, 7, 'Semi-final 3', '16 June', 9.28999999999999914, '7', '40.9%');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `performance`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num)  VALUES (19, 6, 2, 'hexagon', 'short', 'not_double', 'flat', 2, 'circle', 1);\nDatabase State:\n- Table: trains, Columns: [id, direction]\n- Table: cars, Columns: [id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num]",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EVENTID, REFID, EVENT_DATE, AMOUNT)  VALUES (1983646, 208586, '2007-04-28 12:00:00.0', 13.05000000000000071);\nDatabase State:\n- Table: Demog, Columns: [GEOID, INHABITANTS_K, INCOME_K, A_VAR1, A_VAR2, A_VAR3, A_VAR4, A_VAR5, A_VAR6, A_VAR7, A_VAR8, A_VAR9, A_VAR10, A_VAR11, A_VAR12, A_VAR13, A_VAR14, A_VAR15, A_VAR16, A_VAR17, A_VAR18]\n- Table: `Sales`, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]",
        "Response": "Table: `Sales`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Market_ID`, `District`, `Num_of_employees`, `Num_of_shops`, `Ranking`)  VALUES (2, 'British Columbia', 1965, 49.0, 21);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `market`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Player_ID`, `Player`, `Years_Played`, `Total_WL`, `Singles_WL`, `Doubles_WL`, `Team`)  VALUES (5, 'Kim Hyun-Joon (908)', '2 (2010\u20132011)', '3\u20134', '2\u20131', '1\u20133', 2);\nDatabase State:\n- Table: team, Columns: [Team_id, Name]",
        "Response": "Table: `player`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update)  VALUES (14597, '2005-08-21 17:39:41.0', 1160, 472, '2005-08-25 14:07:41.0', 1, '2006-02-15 21:30:53.0');\nDatabase State:\n- Table: `store`, Columns: [store_id, manager_staff_id, address_id, last_update]",
        "Response": "Table: `rental`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student_Course_Enrolment (registration_id, student_id, course_id, date_of_enrolment, date_of_completion)  VALUES (9, 8, 9, '2017-08-02 17:21:44', '2018-03-07 00:39:37');\nDatabase State:\n- Table: Subjects, Columns: [subject_id, subject_name]\n- Table: Course_Authors_and_Tutors, Columns: [author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1]",
        "Response": "Table: Student_Course_Enrolment"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Manufacturers (Code, Name, Headquarter, Founder, Revenue)  VALUES (1, 'Sony', 'Tokyo', 'Andy', 120.0);\nDatabase State:\n- Table: Manufacturers, Columns: [Code, Name, Headquarter, Founder, Revenue]\n- Table: Products, Columns: [Code, Name, Price, Manufacturer]",
        "Response": "Table: Manufacturers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `dewey_decimal_classification`, `topics_main_wikimedia_portal`, `country`, `shares_border_with`, `capital`, `flag_image`, `named_after`, `iso_3166_2_code`, `commons_category`, `flag`, `locator_map_image`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `official_website`, `gnd_id`, `viaf_id`, `library_of_congress_authority_id`, `topics_main_category`, `curlie_id`, `musicbrainz_area_id`, `instance_of`, `legislative_body`, `freebase_id`, `gnis_id`, `fips_10_4_countries_and_regions`, `inception`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `category_for_films_shot_at_this_location`, `category_of_people_buried_here`, `category_of_associated_people`, `located_in_time_zone`, `isni`, `office_held_by_head_of_government`, `pronunciation_audio`, `gran_enciclop\u00e8dia_catalana_id`, `located_in_or_next_to_body_of_water`, `described_by_source`, `geography_of_topic`, `encyclop\u00e6dia_britannica_online_id`, `getty_thesaurus_of_geographic_names_id`, `head_of_government`, `area`, `openstreetmap_relation_id`, `population`, `page_banner`, `bbc_things_id`, `quora_topic_id`, `subreddit`, `short_name`, `highest_point`, `lowest_point`, `elevation_above_sea_level`, `mesh_descriptor_id`, `us_national_archives_identifier`, `gacs_id`, `history_of_topic`, `part_of`, `contains_the_administrative_territorial_entity`, `fips_5_2_alpha_code_us_states`, `fips_5_2_numeric_code_us_states`, `demonym`, `wikimedia_outline`, `water_as_percent_of_area`, `uk_parliament_thesaurus_id`, `coordinates_of_geographic_center`, `foundational_text`, `highest_judicial_authority`, `executive_body`, `motto_text`, `c_span_organization_id`, `native_label`, `archinform_location_id`, `geoshape`, `wolfram_language_entity_code`, `idref_id`, `official_symbol`, `topics_main_template`, `comic_vine_id`, `maximum_temperature_record`, `loc_and_marc_vocabularies_id`, `ringgold_id`, `language_used`, `coordinates_of_northernmost_point`, `whos_on_first_id`, `minimum_temperature_record`, `category_for_maps`, `larousse_id`, `french_vikidia_id`, `english_vikidia_id`, `italian_vikidia_id`, `nkcr_aut_id`, `worldcat_identities_id`, `seal_image`, `has_seal_badge_or_sigil`, `nickname`, `kbpedia_id`, `rkd_thesaurus_id`, `hasc`, `interlingual_index_id`, `the_top_tens_id`, `economy_of_topic`, `tripadvisor_id`, `google_maps_customer_id`, `open_civic_data_division_id`, `google_news_topics_id`, `category_for_the_view_of_the_item`, `github_topic`, `wordnet_31_synset_id`, `demographics_of_topic`, `anthem`, `ballotpedia_id`, `inaturalist_place_id`, `archives_at`, `marriageable_age`, `compulsory_education_maximum_age`, `twitter_topic_id`, `openstreetmap_zoom_level`, `yso_id`, `national_library_of_israel_j9u_id`, `store_norske_leksikon_id`, `online_pwn_encyclopedia_id`, `wikisimpsons_id`, `related_category`, `den_store_danske_id`, `per_capita_income`, `mean_age`, `number_of_households`, `hashtag`, `omegawiki_defined_meaning`, `treccanis_dizionario_di_storia_id`)  VALUES ('New Jersey', 'state of the United States of America', '2--749', 'Portal:New Jersey', 'United States of America', 'New York', 'Trenton', 'Flag of New Jersey.svg', 'Province of New Jersey', 'US-NJ', 'New Jersey', 'flag of New Jersey', 'New Jersey in United States (zoom).svg', '40.0', 'United States of America', 'https://nj.gov', '4042004-8', '157102040', 'n80046086', 'Category:New Jersey', 'Regional/North_America/United_States/New_Jersey/', 'a36544c1-cb40-4f44-9e0e-7a5a69e403a8', 'U.S. state', 'New Jersey Legislature', '/m/05fjf', '1779795', 'US34', '+1787-12-18T00:00:00Z', 'Category:Births in New Jersey', 'Category:Deaths in New Jersey', '5101760', 'Category:Films shot in New Jersey', 'Category:Burials in New Jersey', 'Category:People from New Jersey', 'Eastern Time Zone', '0000 0004 0424 706X', 'Governor of New Jersey', 'En-us-New Jersey.ogg', '46487.0', 'Atlantic Ocean', 'Catholic Encyclopedia', 'geography of New Jersey', 'place/New-Jersey', '7007565', 'Phil Murphy', 22591.40000000000146, '224951', 9288994.0, 'NewJerseyTrentonBanner.JPG', '676488c9-3b71-4719-b9f0-2e57bcdc971c', 'New-Jersey-state', 'newjersey', 'NJ', 'High Point', 'Atlantic Ocean', 75.0, 'D009515', '10045265.0', '13396.0', 'history of New Jersey', 'contiguous United States', 'Bergen County', 'NJ', '34', 'New Jerseyan', 'outline of New Jersey', 15.68999999999999951, '11894.0', '40.1907', 'Constitution of New Jersey', 'Supreme Court of New Jersey', 'Government of New Jersey', 'Liberty and prosperity', '3525.0', 'State of New Jersey', '2859.0', 'Data:NewJersey.map', 'Entity[\"AdministrativeDivision\", {\"NewJersey\", \"UnitedStates\"}]', '027356132', 'American Goldfinch', 'Template:New Jersey', '4020-55712', 110.0, 'countries/nju', '114428.0', 'nan', '41.35776', '85688607', -34.0, 'Category:New Jersey maps', 'autre-region/wd/135117', 'New_Jersey', 'New_Jersey', 'New_Jersey', 'ge291850', 'lccn-n80046086', 'Seal of New Jersey.svg', 'coat of arms of New Jersey', 'The Garden State', 'NewJersey-State', '585.0', 'US.NJ', 'i84518', '250.0', 'economy of New Jersey', '28951.0', '3229779156937960845', 'ocd-division/country:us/state:nj', 'CAAqIQgKIhtDQkFTRGdvSUwyMHZNRFZtYW1ZU0FtVnVLQUFQAQ', 'Category:Views of New Jersey', 'new-jersey', '09135395-n', 'demographics of New Jersey', 'nan', 'New_Jersey', '51', 'NJ State Archives', 18.0, 16.0, '1.2483562491601756e+18', '8', '209902.0', '9.870075643247052e+17', 'New_Jersey', '3946963.0', '49979.0', 'Category:New Jersey-related lists', 'New_Jersey', 44153.0, 40.0, 3272054.0, 'NewJersey', '370136.0', 'new-jersey');\nDatabase State:\n- Table: `part`, Columns: [`label`, `description`, `freebase_id`, `page_banner`, `country`, `quora_topic_id`, `coordinate_location`, `instance_of`, `part_of`, `kbpedia_id`, `curlie_id`, `locator_map_image`, `topics_main_category`]\n- Table: `aspect_of_history`, Columns: [`label`, `description`, `part_of`, `commons_category`, `topics_main_category`, `dewey_decimal_classification`, `instance_of`, `facet_of`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `point_in_time`, `office_contested`, `successful_candidate`, `followed_by`, `follows`, `commons_category`, `country`, `part_of`, `candidate`, `applies_to_jurisdiction`, `freebase_id`]",
        "Response": "Table: `jurisdiction`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `taxon` (`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`)  VALUES ('Brachybacterium faecium', 'species of bacterium', 'Brachybacterium', 'Brachybacterium faecium', 'taxon', 'species', '960046.0', 'nan', '43669.0', '3224898.0', '10975637.0', '5WQ7J', 'gram-positive bacteria', 'http://www.bacterio.net/brachybacterium.html#faecium', 'nan');\nDatabase State:\n- Table: `alanine_dehydrogenase_pyridine_nucleotide_transhydrogenase_n_terminal_domain_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `stanislaus_county_library` (`label`, `description`, `location`, `google_maps_customer_id`, `country`, `librariesorg_id`, `telephone_number`, `fax_number`, `located_in_the_administrative_territorial_entity`, `part_of`, `street_address`, `coordinate_location`, `postal_code`, `instance_of`)  VALUES ('Ceres Library', 'public library in Ceres, California, USA', 'Ceres', '4268961204472552028', 'United States of America', '12808', '+1-209-537-8938', '+1-209-541-1593', 'Stanislaus County', 'Stanislaus County Library', 'Ceres Library, 2250 Magnolia, Ceres, CA 95307-3209, USA', '37.592956', '95307-3209', 'library branch');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `stanislaus_county_library`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `mission` (`Mission_ID`, `Ship_ID`, `Code`, `Launched_Year`, `Location`, `Speed_knots`, `Fate`)  VALUES (4, 5, 'VMV-4 Former: Sterling', 1916, 'Norway', 16, 'Retired 1939');\nDatabase State:\n- Table: `mission`, Columns: [`Mission_ID`, `Ship_ID`, `Code`, `Launched_Year`, `Location`, `Speed_knots`, `Fate`]\n- Table: `ship`, Columns: [`Ship_ID`, `Name`, `Type`, `Nationality`, `Tonnage`]",
        "Response": "Table: `mission`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `natural_product` (`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `genbank_assembly_accession_number`, `gram_staining`)  VALUES ('Bifidobacterium longum NCC2705', 'nan', 'strain', 'Bifidobacterium longum NCC2705', 'Bifidobacterium longum', '206672', 'GCA_000007525.1', 'gram-positive bacteria');\nDatabase State:\n- Table: `carbohydrate_kinase_thermoresistant_glucokinase`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `genbank_assembly_accession_number`, `gram_staining`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Musical_ID`, `Name`, `Year`, `Award`, `Category`, `Nominee`, `Result`)  VALUES (6, 'The Book of Mormon', 1986, 'Drama Desk Award', 'Outstanding Director of a Musical', 'Bob Fosse', 'Nominated');\nDatabase State:\n- Table: `actor`, Columns: [`Actor_ID`, `Name`, `Musical_ID`, `Character`, `Duration`, `age`]",
        "Response": "Table: `musical`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (stuid, dormid, room_number)  VALUES (1012, 160, 333);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Lives_in"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `ballistic_missile_submarine` (`label`, `description`, `operator`, `vessel_class`, `instance_of`, `freebase_id`, `image`, `commons_category`, `manufacturer`, `country_of_registry`)  VALUES ('HMS Victorious', '1995 Vanguard-class ballistic missile nuclear submarine', 'Royal Navy', 'Vanguard-class submarine', 'ballistic missile submarine', '/m/08j1zh', 'Trident Nuclear Submarine HMS Victorious.jpg', 'HMS Victorious (S29)', 'Vickers Shipbuilding and Engineering', 'United Kingdom');\nDatabase State:\n- Table: `vessel_class`, Columns: [`label`, `description`, `commons_category`, `instance_of`, `subclass_of`, `freebase_id`, `image`, `operator`, `topics_main_category`, `short_name`, `country_of_origin`]",
        "Response": "Table: `ballistic_missile_submarine`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `found_in_taxon`, `instance_of`, `ensembl_gene_id`, `refseq_rna_id`, `encodes`)  VALUES ('LOC105487652', 'gene of the species Macaca nemestrina', '105487652', 'southern pig-tailed macaque', 'nan', 'nan', 'XM_011751150', 'Cytochrome b-c1 complex subunit Rieske, mitochondrial');\nDatabase State:\n- Table: `cytochrome_bc1_complex_subunit_rieske_transmembrane_domain_superfamily`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `part_of`, `instance_of`, `ensembl_protein_id`, `refseq_protein_id`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `found_in_taxon`, `instance_of`, `ensembl_gene_id`, `refseq_rna_id`, `encodes`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Member_ID`, `Card_Number`, `Name`, `Hometown`, `Level`)  VALUES (2, 'LT98', 'Myron Pryor', 'Louisville, Kentucky', 6);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `member`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `subclass_of`, `cell_component`, `molecular_function`, `biological_process`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Dithiobiotin synthetase VP1116', 'microbial protein found in Vibrio parahaemolyticus RIMD 2210633', 'Q87QN3', 'Vibrio parahaemolyticus RIMD 2210633', 'dithiobiotin synthetase VP1116', 'protein', 'cytoplasm', 'nucleotide binding', 'biotin biosynthetic process', 'protein', 'NP_797495', 'Dethiobiotin synthase BioD');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `dethiobiotin_synthase_biod`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `subclass_of`, `cell_component`, `molecular_function`, `biological_process`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `dethiobiotin_synthase_biod`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  VALUES ('2018/8/27', 19393, 'N708SW', 2402, 15016, 1501606, 31123, 'STL', 14492, 1449202, 34492, 'RDU', 830, 837, 7, 7, 1120, 0, 0, 0, NULL, 110, 103, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Airlines, Columns: [FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY]\n- Table: `Air Carriers`, Columns: [Code, Description]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price)  VALUES (3192, 'Boys and Girls', 250, 3, 19, NULL, 1278333, 255245729, 1.989999999999999992);\nDatabase State:\n- Table: playlist_tracks, Columns: [playlist_id, track_id]\n- Table: genres, Columns: [id, name]\n- Table: playlists, Columns: [id, name]\n- Table: artists, Columns: [id, name]\n- Table: albums, Columns: [id, title, artist_id]\n- Table: customers, Columns: [id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]\n- Table: invoice_lines, Columns: [id, invoice_id, track_id, unit_price, quantity]\n- Table: tracks, Columns: [id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]\n- Table: invoices, Columns: [id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]\n- Table: employees, Columns: [id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]\n- Table: media_types, Columns: [id, name]",
        "Response": "Table: tracks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('Penicillin G acylase precursor FP2213', 'microbial gene found in Flavobacterium psychrophilum JIP02/86', 'gene', 'Flavobacterium psychrophilum JIP02/86', '5300766', 'FP2213', 'Penicillin G acylase precursor FP2213', 'gene', '2537525', 'reverse strand', '2535141');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Sales Orders` (OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`)  VALUES ('SO - 0005201', 'In-Store', 'WARE-UHY1004', '8/23/19', '1/26/20', '2/16/20', '2/26/20', 'USD', 1, 15, 244, 26, 5, 0.07499999999999999723, '1,045.20', '836.16');\nDatabase State:\n- Table: Products, Columns: [ProductID, `Product Name`]",
        "Response": "Table: `Sales Orders`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `people` (`People_ID`, `Name`, `Height`, `Weight`, `Birth_Date`, `Birth_Place`)  VALUES (2, 'Ty Conklin', 192.0, 90.0, 'March 30, 1976', 'Anchorage, Alaska');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO sales_in_weather (date, store_nbr, item_nbr, units)  VALUES ('2013-04-08', 18, 77, 0);\nDatabase State:\n- Table: sales_in_weather, Columns: [date, store_nbr, item_nbr, units]\n- Table: weather, Columns: [station_nbr, date, tmax, tmin, tavg, depart, dewpoint, wetbulb, heat, cool, sunrise, sunset, codesum, snowfall, preciptotal, stnpressure, sealevel, resultspeed, resultdir, avgspeed]\n- Table: relation, Columns: [store_nbr, station_nbr]",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO institution_grads (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (115126, 2007, 'F', 'A', '2y all', '117', 'NULL', '43', 'NULL', '36.8');\nDatabase State:\n- Table: institution_grads, Columns: [unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate]\n- Table: state_sector_grads, Columns: [stateid, state, state_abbr, control, level, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate, grad_cohort_ct]\n- Table: institution_details, Columns: [unitid, chronname, city, state, level, control, basic, hbcu, flagship, long_x, lat_y, site, student_count, awards_per_value, awards_per_state_value, awards_per_natl_value, exp_award_value, exp_award_state_value, exp_award_natl_value, exp_award_percentile, ft_pct, fte_value, fte_percentile, med_sat_value, med_sat_percentile, aid_value, aid_percentile, endow_value, endow_percentile, grad_100_value, grad_100_percentile, grad_150_value, grad_150_percentile, pell_value, pell_percentile, retain_value, retain_percentile, ft_fac_value, ft_fac_percentile, vsa_year, vsa_grad_after4_first, vsa_grad_elsewhere_after4_first, vsa_enroll_after4_first, vsa_enroll_elsewhere_after4_first, vsa_grad_after6_first, vsa_grad_elsewhere_after6_first, vsa_enroll_after6_first, vsa_enroll_elsewhere_after6_first, vsa_grad_after4_transfer, vsa_grad_elsewhere_after4_transfer, vsa_enroll_after4_transfer, vsa_enroll_elsewhere_after4_transfer, vsa_grad_after6_transfer, vsa_grad_elsewhere_after6_transfer, vsa_enroll_after6_transfer, vsa_enroll_elsewhere_after6_transfer, similar, state_sector_ct, carnegie_ct, counted_pct, nicknames, cohort_size]",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Investors (investor_id, Investor_details)  VALUES (11, 'q');\nDatabase State:\n- Table: Ref_Transaction_Types, Columns: [transaction_type_code, transaction_type_description]",
        "Response": "Table: Investors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (university_id, ranking_criteria_id, year, score)  VALUES (659, 17, 2014, 655);\nDatabase State:\n- Table: ranking_criteria, Columns: [id, ranking_system_id, criteria_name]\n- Table: country, Columns: [id, country_name]\n- Table: ranking_system, Columns: [id, system_name]\n- Table: university, Columns: [id, country_id, university_name]\n- Table: university_year, Columns: [university_id, year, num_students, student_staff_ratio, pct_international_students, pct_female_students]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity)  VALUES (201, 10324, 63, 80);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: OrderDetails"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID)  VALUES (2903, 'Sullana', 'PER', 'Piura', 147361);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (2144741, 1, 15600, 119, 624);\nDatabase State:\n- Table: Customers, Columns: [CustomerID, FirstName, MiddleInitial, LastName]\n- Table: Products, Columns: [ProductID, Name, Price]\n- Table: Employees, Columns: [EmployeeID, FirstName, MiddleInitial, LastName]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customer_Orders (order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges)  VALUES (13, 12, 'Paid', 'FedEx', '2013-06-16 17:51:45', '2018-03-20 12:00:00', '31.33');\nDatabase State:\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges]",
        "Response": "Table: Customer_Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `list` (`LastName`)  VALUES ('MACIAG', ' CHET', 5, 109);\nDatabase State:\n- Table: `list`, Columns: [`LastName`]",
        "Response": "Table: `list`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `physical_location` (`label`, `description`, `instance_of`, `twinned_administrative_body`, `dewey_decimal_classification`, `flag_image`, `coat_of_arms_image`, `shares_border_with`, `openstreetmap_relation_id`, `commons_category`, `locator_map_image`, `postal_code`, `located_in_time_zone`, `local_dialing_code`, `viaf_id`, `gnd_id`, `licence_plate_code`, `coordinate_location`, `topics_main_category`, `page_banner`, `official_website`, `musicbrainz_area_id`, `german_municipality_key`, `freebase_id`, `library_of_congress_authority_id`, `population`, `biblioth\u00e8que_nationale_de_france_id`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `located_in_or_next_to_body_of_water`, `category_of_associated_people`, `described_by_source`, `capital_of`, `national_library_of_israel_id_old`, `area`, `image`, `commons_gallery`, `facebook_places_id`, `encyclop\u00e6dia_britannica_online_id`, `elevation_above_sea_level`, `quora_topic_id`, `native_label`, `official_name`, `great_russian_encyclopedia_online_id`, `short_name`, `early_modern_letters_online_location_id`, `member_of`, `head_of_government`, `country`, `located_in_the_administrative_territorial_entity`, `archinform_location_id`, `nkcr_aut_id`, `whos_on_first_id`, `inaturalist_place_id`, `category_for_maps`, `worldcat_identities_id`, `store_norske_leksikon_id`, `factgrid_item_id`, `national_library_of_israel_j9u_id`, `den_store_danske_id`, `museum_digital_place_id`, `online_pwn_encyclopedia_id`, `sbn_place_id`)  VALUES ('Jena', 'city in Thuringia, Germany', 'big city', 'Beit Yala', '2--432224', 'Flag of Jena.svg', 'Wappen Jena.svg', 'Saale-Holzland-Kreis', '62693', 'Jena', 'Thuringia J.svg', '07751', 'nan', '3641', '139549325', '4028557-1', 'J', '50.927222222222', 'Category:Jena', 'Jena Wikivoyage banner.png', 'https://www.jena.de/', '0645d067-5477-4edb-9506-d70e573c435b', '16053000.0', '/m/018_7x', 'n80025810', 110502.0, 'nan', 'Category:Births in Jena', 'Category:Deaths in Jena', '2895042', 'Saale', 'Category:People from Jena', 'Brockhaus and Efron Encyclopedic Dictionary', 'Kreis Jena-Land', 'nan', 114.7600000000000051, 'Zentrum Jenas 2008-05-24.JPG', 'Jena', '112958415384628.0', 'place/Jena-Germany', 143.0, 'Jena-Germany-1', 'Jena', 'Jena', '2029173.0', 'J', 'nan', 'nan', 'Thomas Nitzsche', 'Germany', 'Thuringia', '487', 'ge134244', '101748613', '108264.0', 'Category:Maps of Jena', 'lccn-n80025810', 'Jena', 'Q10391', '9.870075619249052e+17', 'Jena', '249.0', '3917643.0', 'MILL001586');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `gnd_id`, `viaf_id`, `capital`, `openstreetmap_relation_id`, `commons_category`, `shares_border_with`, `population`, `geonames_id`, `coat_of_arms_image`, `nuts_code`, `freebase_id`, `area`, `topics_main_category`, `locator_map_image`, `instance_of`, `contains_the_administrative_territorial_entity`, `coordinate_location`, `worldcat_identities_id`, `country`, `official_website`, `eu_knowledge_graph_item_id`, `dewey_decimal_classification`, `located_in_the_administrative_territorial_entity`]\n- Table: `political_border`, Columns: [`label`, `description`, `dewey_decimal_classification`, `country`, `coat_of_arms_image`, `shares_border_with`, `commons_category`, `locator_map_image`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `openstreetmap_relation_id`, `topics_main_category`, `gnd_id`, `viaf_id`, `instance_of`, `freebase_id`, `geonames_id`, `official_website`, `population`, `elevation_above_sea_level`, `area`, `archinform_location_id`, `whos_on_first_id`, `worldcat_identities_id`, `museum_digital_place_id`, `licence_plate_code`]\n- Table: `twin_town`, Columns: [`label`, `description`, `country`, `located_in_the_administrative_territorial_entity`, `commons_category`, `instance_of`, `coordinate_location`, `image`, `twinned_administrative_body`, `page_banner`, `musicbrainz_area_id`, `located_in_time_zone`, `population`, `freebase_id`, `topics_main_category`, `category_for_people_who_died_here`, `geonames_id`, `gnd_id`, `official_website`, `category_of_associated_people`, `capital_of`, `viaf_id`, `library_of_congress_authority_id`, `elevation_above_sea_level`, `postal_code`, `area`, `coat_of_arms_image`, `archinform_location_id`, `whos_on_first_id`, `worldcat_identities_id`, `national_library_of_israel_j9u_id`]\n- Table: `capital_city`, Columns: [`label`, `description`, `instance_of`, `twinned_administrative_body`, `dewey_decimal_classification`, `flag_image`, `coat_of_arms_image`, `shares_border_with`, `openstreetmap_relation_id`, `commons_category`, `locator_map_image`, `postal_code`, `located_in_time_zone`, `local_dialing_code`, `viaf_id`, `gnd_id`, `licence_plate_code`, `coordinate_location`, `topics_main_category`, `page_banner`, `official_website`, `musicbrainz_area_id`, `german_municipality_key`, `freebase_id`, `library_of_congress_authority_id`, `population`, `biblioth\u00e8que_nationale_de_france_id`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `located_in_or_next_to_body_of_water`, `category_of_associated_people`, `described_by_source`, `capital_of`, `area`, `image`, `commons_gallery`, `facebook_places_id`, `encyclop\u00e6dia_britannica_online_id`, `elevation_above_sea_level`, `quora_topic_id`, `short_name`, `member_of`, `head_of_government`, `country`, `located_in_the_administrative_territorial_entity`, `archinform_location_id`, `nkcr_aut_id`, `whos_on_first_id`, `category_for_maps`, `worldcat_identities_id`, `store_norske_leksikon_id`, `factgrid_item_id`, `national_library_of_israel_j9u_id`, `museum_digital_place_id`, `online_pwn_encyclopedia_id`, `sbn_place_id`]\n- Table: `physical_location`, Columns: [`label`, `description`, `instance_of`, `twinned_administrative_body`, `dewey_decimal_classification`, `flag_image`, `coat_of_arms_image`, `shares_border_with`, `openstreetmap_relation_id`, `commons_category`, `locator_map_image`, `postal_code`, `located_in_time_zone`, `local_dialing_code`, `viaf_id`, `gnd_id`, `licence_plate_code`, `coordinate_location`, `topics_main_category`, `page_banner`, `official_website`, `musicbrainz_area_id`, `german_municipality_key`, `freebase_id`, `library_of_congress_authority_id`, `population`, `biblioth\u00e8que_nationale_de_france_id`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `located_in_or_next_to_body_of_water`, `category_of_associated_people`, `described_by_source`, `capital_of`, `national_library_of_israel_id_old`, `area`, `image`, `commons_gallery`, `facebook_places_id`, `encyclop\u00e6dia_britannica_online_id`, `elevation_above_sea_level`, `quora_topic_id`, `native_label`, `official_name`, `great_russian_encyclopedia_online_id`, `short_name`, `early_modern_letters_online_location_id`, `member_of`, `head_of_government`, `country`, `located_in_the_administrative_territorial_entity`, `archinform_location_id`, `nkcr_aut_id`, `whos_on_first_id`, `inaturalist_place_id`, `category_for_maps`, `worldcat_identities_id`, `store_norske_leksikon_id`, `factgrid_item_id`, `national_library_of_israel_j9u_id`, `den_store_danske_id`, `museum_digital_place_id`, `online_pwn_encyclopedia_id`, `sbn_place_id`]\n- Table: `german_librarians_day_conference`, Columns: [`label`, `description`, `instance_of`, `location`, `point_in_time`, `country`]",
        "Response": "Table: `physical_location`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `instance_of`, `population`, `freebase_id`, `coordinate_location`, `commons_category`, `capital`, `topics_main_category`, `openstreetmap_relation_id`, `locator_map_image`, `official_website`, `geonames_id`, `area`, `inaturalist_place_id`)  VALUES ('Haskovo Province', 'oblast of Bulgaria', 'Bulgaria', 'Bulgaria', 'oblast of Bulgaria', 246238.0, '/m/02syp3', '41.833333333333', 'Haskovo Province', 'Haskovo', 'Category:Haskovo Province', '1739545.0', 'Haskovo in Bulgaria.svg', 'http://hs.government.bg', '730436.0', 5543.0, '12196.0');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `instance_of`, `population`, `freebase_id`, `coordinate_location`, `commons_category`, `capital`, `topics_main_category`, `openstreetmap_relation_id`, `locator_map_image`, `official_website`, `geonames_id`, `area`, `inaturalist_place_id`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `country`, `commons_category`, `instance_of`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `topics_main_category`, `freebase_id`, `image`, `geonames_id`, `elevation_above_sea_level`, `category_of_associated_people`, `official_website`, `area`, `population`, `whos_on_first_id`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (engineer_id, skill_id)  VALUES (13, 2);\nDatabase State:\n- Table: Staff, Columns: [staff_id, staff_name, gender, other_staff_details]\n- Table: Maintenance_Contracts, Columns: [maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details]\n- Table: Maintenance_Engineers, Columns: [engineer_id, company_id, first_name, last_name, other_details]\n- Table: Engineer_Visits, Columns: [engineer_visit_id, contact_staff_id, engineer_id, fault_log_entry_id, fault_status, visit_start_datetime, visit_end_datetime, other_visit_details]\n- Table: Parts, Columns: [part_id, part_name, chargeable_yn, chargeable_amount, other_part_details]\n- Table: Third_Party_Companies, Columns: [company_id, company_type, company_name, company_address, other_company_details]\n- Table: Engineer_Skills, Columns: [engineer_id, skill_id]\n- Table: Skills_Required_To_Fix, Columns: [part_fault_id, skill_id]\n- Table: Skills, Columns: [skill_id, skill_code, skill_description]\n- Table: Fault_Log, Columns: [fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details]",
        "Response": "Table: Engineer_Skills"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Shop_ID`, `Device_ID`, `Quantity`)  VALUES (11, 6, 112);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `stock`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `commons_category`, `archinform_person_or_group_id`)  VALUES ('John Woolley', 'American architect', 'human', 'John Woolley', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `architect`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tweets (id, uid, text, createdate)  VALUES (6, 6, 'Let\u2019s celebrate women, fight for equality and support each other,  not just today, but everyday!', '2018-03-12 02:30:30');\nDatabase State:\n- Table: follows, Columns: [f1, f2]\n- Table: `user_profiles`, Columns: [uid]",
        "Response": "Table: tweets"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `creator` (`label`, `description`, `located_in_the_administrative_territorial_entity`, `instance_of`, `country`, `coordinate_location`, `official_website`)  VALUES ('Museum Schloss F\u00fcrstenberg', 'museum in Germany', 'F\u00fcrstenberg', 'museum', 'Germany', '51.73149', 'http://www.fuerstenberg-schloss.com/');\nDatabase State:\n- Table: `license`, Columns: [`label`, `description`, `author`, `instance_of`, `commons_category`, `short_name`, `official_website`, `spdx_license_id`, `topics_main_template`, `full_work_available_at_url`]\n- Table: `open_data`, Columns: [`label`, `description`, `copyright_license`, `instance_of`, `creator`, `copyright_status`, `described_at_url`, `used_by`]",
        "Response": "Table: `creator`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details)  VALUES (15, 'Grade', 'facere', 'slow', NULL);\nDatabase State:\n- Table: Products, Columns: [product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details]\n- Table: Ref_Characteristic_Types, Columns: [characteristic_type_code, characteristic_type_description]\n- Table: Characteristics, Columns: [characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details]\n- Table: Product_Characteristics, Columns: [product_id, characteristic_id, product_characteristic_value]\n- Table: Ref_Product_Categories, Columns: [product_category_code, product_category_description, unit_of_measure]",
        "Response": "Table: Characteristics"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Airlines (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  VALUES ('2018/8/7', 19977, 'N482UA', 240, 14679, 1467903, 33570, 'SAN', 13930, 1393006, 30977, 'ORD', 2230, 2223, -7, 0, 358, -28, 0, 0, NULL, 236, 215, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Airlines, Columns: [FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY]\n- Table: Airports, Columns: [Code, Description]\n- Table: `Air Carriers`, Columns: [Code, Description]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `flights` (Airline)  VALUES (10, 469, ' APV', ' AAF');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `flights`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO DEPARTMENT (DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION)  VALUES ('BIOL', 'Biology', 'A&SCI', 387, 'AAK 230, Box 415', '4117');\nDatabase State:\n- Table: CLASS, Columns: [CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]\n- Table: DEPARTMENT, Columns: [DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]\n- Table: PROFESSOR, Columns: [EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]\n- Table: COURSE, Columns: [CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]\n- Table: ENROLL, Columns: [CLASS_CODE, STU_NUM, ENROLL_GRADE]\n- Table: EMPLOYEE, Columns: [EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB]",
        "Response": "Table: DEPARTMENT"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity)  VALUES (2, 'Paid', 6, 7, 'good', '2018-02-27 18:04:55', '7');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Order_Items"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO person (p_id, professor, student, hasPosition, inPhase, yearsInProgram)  VALUES (52, 1, 0, 'Faculty', '0', '0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `protein_of_unknown_function_duf560` (`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`, `subclass_of`)  VALUES ('Hypothetical protein NMB0313', 'microbial protein found in Neisseria meningitidis MC58', 'Neisseria meningitidis MC58', 'Q9K165', 'hypothetical protein NMB0313', 'protein', 'NP_273362', 'Tetratricopeptide-like helical domain superfamily', 'protein');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `protein_of_unknown_function_duf560`"
    }
]