[
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('hypothetical protein EAE_07460', 'microbial gene found in Klebsiella aerogenes KCTC 2190', 'Enterobacter aerogenes KCTC 2190', '10791668', 'gene', 'Hypothetical protein EAE_07460', 'EAE_07460', 'gene', '1553763', 'forward strand', '1553272');\nDatabase State:\n- Table: natural_product, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO generalinfo (id_restaurant, label, food_type, city, review) VALUES (5955, 'giancarlos', 'italian', 'morgan hill', 3.399999999999999912);\nDatabase State:\n- Table: geographic, Columns: [city, county, region]\n- Table: location, Columns: [id_restaurant, street_num, street_name, city]",
        "Response": "Table: generalinfo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (customer_id, address_id, date_from, date_to) VALUES (7, 13, '2012-11-19 09:20:49', '2018-03-11 20:11:21');\nDatabase State:\n- Table: Contacts, Columns: [contact_id, customer_id, gender, first_name, last_name, contact_phone]\n- Table: Customer_Address_History, Columns: [customer_id, address_id, date_from, date_to]\n- Table: Customers, Columns: [customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email]\n- Table: Order_Items, Columns: [order_item_id, order_id, product_id, order_quantity]\n- Table: Addresses, Columns: [address_id, line_1_number_building, city, zip_postcode, state_province_county, country]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_date, order_status_code]\n- Table: Products, Columns: [product_id, product_type_code, product_name, product_price]",
        "Response": "Table: Customer_Address_History"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO capital_city (label, description, twinned_administrative_body, located_in_the_administrative_territorial_entity, country, instance_of, coat_of_arms_image, commons_category, coordinate_location, page_banner, topics_main_category, freebase_id, musicbrainz_area_id, geonames_id, gnd_id, category_for_people_who_died_here, category_of_associated_people, capital_of, viaf_id, image, official_website, commons_gallery, population, located_in_time_zone, elevation_above_sea_level, area, postal_code, encyclop\u00e6dia_britannica_online_id, great_russian_encyclopedia_online_id, located_in_or_next_to_body_of_water, archinform_location_id, official_name, whos_on_first_id, described_by_source, library_of_congress_authority_id, category_for_maps, nkcr_aut_id, worldcat_identities_id, locator_map_image, factgrid_item_id, national_library_of_israel_j9u_id, store_norske_leksikon_id, online_pwn_encyclopedia_id) VALUES ('Uster', 'city in the canton of Z\u00fcrich, Switzerland', 'Prenzlau', 'Uster District', 'Switzerland', 'municipality of Switzerland', 'Uster-blazon.svg', 'Uster', '47.349166666667', 'Uster Banner.jpg', 'Category:Uster', '/m/08flgh', 'cd57f85e-7279-4730-ab81-57fb5243a337', '7287397', '4107491-9', 'Category:Deaths in Uster, Switzerland', 'Category:People from Uster, Switzerland', 'Uster District', '133694426.0', 'Uster Panorama 2.JPG', 'http://www.uster.ch', 'nan', 36791.0, 'UTC+01:00', 464.0, 28.55999999999999873, '8610', 'nan', 'nan', 'Greifensee', '5538.0', 'Uster', '101854391', 'nan', 'n80158585', 'Category:Maps of Uster', 'nan', 'lccn-n80158585', 'Karte Gemeinde Uster 2007.png', 'Q389300', '9.870075641949052e+17', 'Uster', 'nan');\nDatabase State:\n- Table: multilateral_trading_facility, Columns: [label, description, country, instance_of, mic_market_code, official_website]",
        "Response": "Table: capital_city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, topics_main_category, instance_of, country, commons_category, located_in_the_administrative_territorial_entity, head_of_government, coordinate_location, curlie_id, musicbrainz_area_id, gnd_id, viaf_id, library_of_congress_authority_id, freebase_id, locator_map_image, geonames_id, category_for_people_who_died_here, category_of_associated_people, capital_of, page_banner, elevation_above_sea_level, gnis_id, official_website, facebook_places_id, encyclop\u00e6dia_britannica_online_id, population, fips_55_3_locations_in_the_us, inception, local_dialing_code, quora_topic_id, area, us_national_archives_identifier, gran_enciclop\u00e8dia_catalana_id, flag_image, archinform_location_id, whos_on_first_id, located_in_time_zone, worldcat_identities_id, interlingual_index_id, wordnet_31_synset_id, tripadvisor_id, google_maps_customer_id, ballotpedia_id, image, subreddit, water_as_percent_of_area, online_pwn_encyclopedia_id, store_norske_leksikon_id, national_library_of_israel_j9u_id, wikisimpsons_id, per_capita_income, number_of_households, hashtag) VALUES ('Marion County', 'county in Indiana, United States', 'Category:Marion County, Indiana', 'county of Indiana', 'United States of America', 'Marion County, Indiana', 'Indiana', 'nan', '39.78', 'nan', 'nan', 'nan', '127851812', 'n81071147', '/m/0nt4s', 'Map of Indiana highlighting Marion County.svg', '4260977.0', 'nan', 'Category:People from Marion County, Indiana', 'nan', 'nan', NULL, '450371.0', 'http://www.indy.gov/eGov/County', 'nan', 'nan', 977203.0, 'nan', '+1822-00-00T00:00:00Z', 'nan', 'Marion-County-IN', 1044.0, '10036516.0', 'nan', 'nan', '19014.0', 'nan', 'Eastern Time Zone', 'lccn-n81071147', 'nan', 'nan', 'nan', '', 'Marion_County,_Indiana', 'City and County Building from SSM.JPG', 'nan', 1.659999999999999921, 'nan', 'nan', '9.870075667178052e+17', 'nan', 30013.0, 377695.0, 'nan');\nDatabase State:\n- Table: place_of_death, Columns: [label, description, instance_of, category_combines_topics, category_contains, commons_category]\n- Table: headquarters, Columns: [label, description, commons_category, coordinate_location, country, located_in_the_administrative_territorial_entity, freebase_id, instance_of, image]\n- Table: political_border, Columns: [label, description, capital, country, shares_border_with, named_after, commons_category, locator_map_image, coordinate_location, located_in_the_administrative_territorial_entity, official_website, topics_main_category, curlie_id, musicbrainz_area_id, instance_of, freebase_id, gnis_id, library_of_congress_authority_id, viaf_id, inception, geonames_id, category_of_associated_people, area, openstreetmap_relation_id, population, us_national_archives_identifier, contains_the_administrative_territorial_entity, water_as_percent_of_area, getty_thesaurus_of_geographic_names_id, image, native_label, archinform_location_id, wolfram_language_entity_code, whos_on_first_id, category_for_maps, worldcat_identities_id, hasc, inaturalist_place_id, national_library_of_israel_j9u_id, per_capita_income, number_of_households]\n- Table: legislature_of_a_us_state, Columns: [label, description, instance_of, topics_main_category, viaf_id, freebase_id, has_parts, country, applies_to_jurisdiction, official_website, described_by_source, snac_ark_id, headquarters_location]\n- Table: administrative_centre, Columns: [label, description, country, shares_border_with, capital, commons_category, coordinate_location, located_in_the_administrative_territorial_entity, official_website, viaf_id, topics_main_category, instance_of, freebase_id, gnis_id, category_for_people_born_here, geonames_id, category_of_associated_people, inception, locator_map_image, openstreetmap_relation_id, population, area, us_national_archives_identifier, contains_the_administrative_territorial_entity, water_as_percent_of_area, getty_thesaurus_of_geographic_names_id, named_after, native_label, archinform_location_id, wolfram_language_entity_code, whos_on_first_id, category_for_maps, worldcat_identities_id, hasc, inaturalist_place_id, per_capita_income, number_of_households, image]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO content (paper_id, word_cited_id) VALUES ('114563', 'word3458');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: content"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EmployeeID, Name, Position, Registered, SSN) VALUES (101, 'Carla Espinosa', 'Head Nurse', 1, 111111110);\nDatabase State:\n- Table: Prescribes, Columns: [Physician, Patient, Appointment]\n- Table: On_Call, Columns: [Nurse, BlockFloor, OnCallStart, OnCallEnd]\n- Table: Stay, Columns: [StayID, Patient, Room, StayStart, StayEnd]\n- Table: Affiliated_With, Columns: [Physician, Department, PrimaryAffiliation]\n- Table: Trained_In, Columns: [Physician, Treatment, CertificationDate, CertificationExpires]\n- Table: Appointment, Columns: [AppointmentID, Patient, Physician, Start, End, ExaminationRoom]\n- Table: Medication, Columns: [Code, Name, Brand, Description]\n- Table: Block, Columns: [BlockFloor, BlockCode]\n- Table: StaffMembers, Columns: [EmployeeID, Name, Position, Registered, SSN]\n- Table: Department, Columns: [DepartmentID, Name, Head]\n- Table: Patient, Columns: [SSN, Name, Address, Phone, InsuranceID, PCP]\n- Table: Room, Columns: [RoomNumber, RoomType, BlockFloor]",
        "Response": "Table: StaffMembers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO catalogus_professorum (label, description, instance_of, official_website, wikidata_property) VALUES ('Hamburger Professorinnen- und Professorenkatalog', 'nan', 'catalogus professorum', 'https://www.hpk.uni-hamburg.de/', 'Sophie Bradley-Auckland');\nDatabase State:\n- Table: wikidata_property, Columns: [label, description, image, instance_of, freebase_id, commons_category]\n- Table: Professors, Columns: [label, description, instance_of, official_website, wikidata_property]",
        "Response": "Table: Professors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, ensembl_protein_id, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of) VALUES ('S100 calcium binding protein A13', 'mammalian protein found in Rattus norvegicus', 'S100a13', 'D3ZTB5', 'nan', 'molecular function', 'cellular component', 'S100/CaBP-9k-type, calcium binding, subdomain', 'brown rat', 'NP_001178536', 'protein', 'Protein S100-A13');\nDatabase State:\n- Table: Protein_S100_Calcium_Binding_F, Columns: [label, description, encoded_by, uniprot_protein_id, ensembl_protein_id, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: Protein_S100_Calcium_Binding_F"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Shop_ID, Shop_Name, Location, Open_Date, Open_Year) VALUES (6, 'Tynewydd repair', 'Porth', '11 April', 2007);\nDatabase State:\n- Table: Retailers, Columns: [Shop_ID, Shop_Name, Location, Open_Date, Open_Year]",
        "Response": "Table: Retailers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (cmi_cross_ref_id, master_customer_id, source_system_code) VALUES (8, 1, 'Rent');\nDatabase State:\n- Table: Parking_Fines, Columns: [council_tax_id, cmi_cross_ref_id]\n- Table: CustomerReferences, Columns: [cmi_cross_ref_id, master_customer_id, source_system_code]",
        "Response": "Table: CustomerReferences"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales (EVENTID, REFID, EVENT_DATE, AMOUNT) VALUES (351397, 36977, '2006-12-11 12:00:00.0', 14.83300000000000018);\nDatabase State:\n- Table: Transactions, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]\n- Table: Demog, Columns: [GEOID, INHABITANTS_K, INCOME_K, A_VAR1, A_VAR2, A_VAR3, A_VAR4, A_VAR5, A_VAR6, A_VAR7, A_VAR8, A_VAR9, A_VAR10, A_VAR11, A_VAR12, A_VAR13, A_VAR14, A_VAR15, A_VAR16, A_VAR17, A_VAR18]\n- Table: Customers, Columns: [ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age]",
        "Response": "Table: Transactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Document_Sections (section_id, document_code, section_sequence, section_code, section_title) VALUES (40, '465', 4964, '93', 'after');\nDatabase State:\n- Table: Images, Columns: [image_id, image_alt_text, image_name, image_url]\n- Table: Documents, Columns: [document_code, document_structure_code, document_type_code, access_count, document_name]\n- Table: Functional_Areas, Columns: [functional_area_code, parent_functional_area_code, functional_area_description]\n- Table: Document_Functional_Areas, Columns: [document_code, functional_area_code]\n- Table: Users, Columns: [user_id, role_code, user_name, user_login, password]\n- Table: Document_Sections_Images, Columns: [section_id, image_id]\n- Table: Document_Structures, Columns: [document_structure_code, parent_document_structure_code, document_structure_description]\n- Table: Document_Section_History, Columns: [section_id, document_code, section_sequence, section_code, section_title]",
        "Response": "Table: Document_Section_History"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO sales_in_weather (date, store_nbr, item_nbr, units) VALUES ('2013-01-12', 32, 73, 0);\nDatabase State:\n- Table: relation, Columns: [store_nbr, station_nbr]\n- Table: sales_in_weather, Columns: [date, store_nbr, item_nbr, units]\n- Table: weather, Columns: [station_nbr, date, tmax, tmin, tavg, depart, dewpoint, wetbulb, heat, cool, sunrise, sunset, codesum, snowfall, preciptotal, stnpressure, sealevel, resultspeed, resultdir, avgspeed]",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO delimitation_orders_of_india_under_delimitation_act_2002 (label, description, instance_of, country, applies_to_jurisdiction, legal_citation_of_this_text, part_of, effective_date) VALUES ('Delimitation Order No. 45 under Delimitation Act, 2002', 'nan', 'proclamation', 'India', 'Madhya Pradesh', 'O.N. 70 (E) dated 14 May 2007', 'Delimitation Orders of India under Delimitation Act, 2002', '+2008-02-19T00:00:00Z');\nDatabase State:\n- Table: delimitation_orders_of_india_under_delimitation_act_2002, Columns: [label, description, instance_of, country, applies_to_jurisdiction, legal_citation_of_this_text, part_of, effective_date]\n- Table: part, Columns: [label, description, topics_main_category, instance_of, country, applies_to_jurisdiction, has_parts, freebase_id]\n- Table: administrative_territorial_entity, Columns: [label, description, coordinate_location, freebase_id, instance_of, country, contains_the_administrative_territorial_entity, located_in_the_administrative_territorial_entity]\n- Table: jurisdiction, Columns: [label, description, page_banner, country, commons_category, iso_3166_2_code, located_in_the_administrative_territorial_entity, coordinate_location, locator_map_image, shares_border_with, official_website, topics_main_category, gnd_id, freebase_id, fips_10_4_countries_and_regions, instance_of, geonames_id, musicbrainz_area_id, openstreetmap_relation_id, inception, getty_thesaurus_of_geographic_names_id, curlie_id, capital, encyclop\u00e6dia_britannica_online_id, head_of_government, population, area, native_label, location_map, subreddit, quora_topic_id, indian_census_area_code_2001, image, wikimedia_outline, category_of_associated_people, office_held_by_head_of_government, legislative_body, executive_body, coextensive_with, different_from, viaf_id, male_population, female_population, urban_population, rural_population, mdws_place_id, library_of_congress_authority_id, literate_population, illiterate_population, language_used, whos_on_first_id, nkcr_aut_id, category_for_maps, geoshape, wolfram_language_entity_code, kbpedia_id, hasc, economy_of_topic, inaturalist_place_id, store_norske_leksikon_id, national_library_of_israel_j9u_id, den_store_danske_id, online_pwn_encyclopedia_id, gran_enciclop\u00e8dia_catalana_id, head_of_state]\n- Table: capital_city, Columns: [label, description, instance_of, located_in_the_administrative_territorial_entity, country, coordinate_location, topics_main_category, freebase_id, image, geonames_id, gnd_id, elevation_above_sea_level, category_of_associated_people, capital_of, viaf_id, postal_code, local_dialing_code, population, official_website, quora_topic_id, area, page_banner, native_label, commons_category, authority, library_of_congress_authority_id, gran_enciclop\u00e8dia_catalana_id, whos_on_first_id, category_for_maps, worldcat_identities_id, store_norske_leksikon_id, national_library_of_israel_j9u_id, located_in_time_zone, encyclop\u00e6dia_britannica_online_id]\n- Table: executive_branch, Columns: [label, description, instance_of, country, part_of, applies_to_jurisdiction, has_parts, freebase_id]\n- Table: governing_body, Columns: [label, description, instance_of, country, has_parts, different_from, applies_to_jurisdiction]\n- Table: political_border, Columns: [label, description, country, commons_category, iso_3166_2_code, located_in_the_administrative_territorial_entity, coordinate_location, locator_map_image, shares_border_with, official_website, topics_main_category, gnd_id, freebase_id, fips_10_4_countries_and_regions, musicbrainz_area_id, instance_of, geonames_id, page_banner, category_of_associated_people, getty_thesaurus_of_geographic_names_id, openstreetmap_relation_id, head_of_state, capital, encyclop\u00e6dia_britannica_online_id, curlie_id, inception, area, population, head_of_government, quora_topic_id, contains_the_administrative_territorial_entity, subreddit, indian_census_area_code_2001, gran_enciclop\u00e8dia_catalana_id, wikimedia_outline, legislative_body, office_held_by_head_of_government, executive_body, location_map, coextensive_with, different_from, viaf_id, male_population, female_population, urban_population, rural_population, mdws_place_id, library_of_congress_authority_id, native_label, literate_population, illiterate_population, language_used, image, whos_on_first_id, category_for_maps, geoshape, wolfram_language_entity_code, kbpedia_id, hasc, inaturalist_place_id, economy_of_topic, twitter_topic_id, store_norske_leksikon_id, den_store_danske_id, national_library_of_israel_j9u_id, online_pwn_encyclopedia_id, official_name, biblioth\u00e8que_nationale_de_france_id, nkcr_aut_id]",
        "Response": "Table: delimitation_orders_of_india_under_delimitation_act_2002"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, country, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, freebase_id, inaturalist_place_id, geonames_id) VALUES ('Kinshasa', 'nan', 'Democratic Republic of the Congo', '-4.33166668', 'Belgian Congo', 'province', 'nan', 'nan', 'nan');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, country, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, freebase_id, inaturalist_place_id, geonames_id]\n- Table: economy_of_africa, Columns: [label, description, topics_main_category, instance_of, commons_category, quora_topic_id, location, country, subclass_of, inflation_rate, nominal_gdp, nominal_gdp_per_capita, ppp_gdp_per_capita, gdp_ppp, real_gdp_growth_rate, store_norske_leksikon_id]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, person_id, category, role, credited) VALUES ('tt0629289', 'nm0123245', 'Cast', 'Leonard Dorsey', 'true');\nDatabase State:\n- Table: Person, Columns: [person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Episode, Columns: [episode_id, series, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, series, episode_id, person_id, role, result]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of, transporter_classification_database_id) VALUES ('Putative surface protein BF2210', 'microbial protein found in Bacteroides fragilis YCH46', 'putative surface protein BF2210', 'Q64U72', 'integral component of membrane', 'Bacteroides fragilis YCH46', 'YP_099491', 'protein', 'Lysine exporter LysO', '2.A.124.1.4');\nDatabase State:\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, commons_category, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, image, catalogue_of_life_id, mesh_descriptor_id, microsoft_academic_id, openalex_id]\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id]",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Conductor_ID, Name, Age, Nationality, Year_of_Work) VALUES (1, 'Antal Dor\u00e1ti', 40, 'USA', 10);\nDatabase State:\n- Table: orchestra, Columns: [Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format]\n- Table: performance, Columns: [Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share]\n- Table: conductor, Columns: [Conductor_ID, Name, Age, Nationality, Year_of_Work]",
        "Response": "Table: conductor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, name, Operating_system, Client, Connection) VALUES (2, 'CProxy', 'Windows', 'user', 'up to 756kbit/s');\nDatabase State:\n- Table: Web_client_accelerator, Columns: [id, name, Operating_system, Client, Connection]",
        "Response": "Table: Web_client_accelerator"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO sports_team (label, description, instance_of, sport, uci_code_of_cycling_team, country, official_name, has_parts, inception, official_website) VALUES ('Alpecin\u2013Deceuninck', 'Belgian cycling team', 'UCI Continental Team', 'road bicycle racing', 'BKP', 'Belgium', 'BKCP-Powerplus', '2009 BKCP-Powerplus', '+2009-00-00T00:00:00Z', 'https://www.alpecin-fenix.com/');\nDatabase State:\n- Table: followed_by, Columns: [label, description, sport, instance_of, follows, followed_by, edition_number, start_time, end_time, winner, country, subclass_of]\n- Table: given_name, Columns: [label, description, instance_of, different_from, language_of_work_or_name, native_label, writing_system, soundex, caverphone, commons_category]\n- Table: follows, Columns: [label, description, sport, instance_of, followed_by, edition_number, winner, country, start_time, end_time, subclass_of, follows]",
        "Response": "Table: sports_team"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, encoded_by, biological_process, cell_component, found_in_taxon, refseq_protein_id, molecular_function, instance_of, part_of, subclass_of) VALUES ('Hypothetical protein ML0475', 'microbial protein found in Mycobacterium leprae TN', 'Q49645', 'hypothetical protein ML0475', 'regulation of transcription, DNA-templated', 'cytoplasm', 'Mycobacterium leprae TN', 'NP_301420', 'DNA binding', 'protein', 'YebC-like', 'protein');\nDatabase State:\n- Table: Proteins, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, cell_component, found_in_taxon, refseq_protein_id, molecular_function, instance_of, part_of, subclass_of]",
        "Response": "Table: Proteins"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, seal_image, dewey_decimal_classification, topics_main_wikimedia_portal, country, capital, shares_border_with, flag_image, flag, iso_3166_2_code, commons_category, locator_map_image, located_in_time_zone, head_of_government, openstreetmap_relation_id, located_in_the_administrative_territorial_entity, coordinate_location, official_website, topics_main_category, page_banner, curlie_id, musicbrainz_area_id, instance_of, legislative_body, freebase_id, contains_the_administrative_territorial_entity, gnis_id, fips_10_4_countries_and_regions, inception, category_for_people_born_here, category_for_people_who_died_here, geonames_id, gnd_id, category_for_films_shot_at_this_location, category_of_people_buried_here, category_of_associated_people, office_held_by_head_of_government, viaf_id, library_of_congress_authority_id, population, nickname, topics_main_template, ballotpedia_id, described_by_source, geography_of_topic, encyclop\u00e6dia_britannica_online_id, has_seal_badge_or_sigil, pronunciation_audio, gran_enciclop\u00e8dia_catalana_id, area, quora_topic_id, bbc_things_id, yso_id, short_name, demonym, subreddit, motto_text, highest_point, lowest_point, history_of_topic, elevation_above_sea_level, us_national_archives_identifier, gacs_id, mesh_descriptor_id, archives_at, official_symbol, fips_5_2_alpha_code_us_states, fips_5_2_numeric_code_us_states, wikimedia_outline, water_as_percent_of_area, named_after, coordinates_of_geographic_center, executive_body, foundational_text, highest_judicial_authority, getty_thesaurus_of_geographic_names_id, part_of, c_span_organization_id, native_label, idref_id, archinform_location_id, national_library_of_israel_id_old, geoshape, wolfram_language_entity_code, nkcr_aut_id, different_from, comic_vine_id, maximum_temperature_record, loc_and_marc_vocabularies_id, language_used, anthem, whos_on_first_id, store_norske_leksikon_id, located_in_or_next_to_body_of_water, omegawiki_defined_meaning, minimum_temperature_record, category_for_maps, larousse_id, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, italian_vikidia_id, worldcat_identities_id, isni, kbpedia_id, rkd_thesaurus_id, hasc, interlingual_index_id, the_top_tens_id, economy_of_topic, google_maps_customer_id, tripadvisor_id, open_civic_data_division_id, google_news_topics_id, category_for_the_view_of_the_item, github_topic, uk_parliament_thesaurus_id, wordnet_31_synset_id, demographics_of_topic, coordinates_of_northernmost_point, coordinates_of_southernmost_point, inaturalist_place_id, marriageable_age, compulsory_education_maximum_age, twitter_topic_id, openstreetmap_zoom_level, online_pwn_encyclopedia_id, wikisimpsons_id, related_category, den_store_danske_id, per_capita_income, mean_age, number_of_households, hashtag, national_library_of_israel_j9u_id, ringgold_id, catholic_encyclopedia_id) VALUES ('Minnesota', 'state of the United States of America', 'State Seal of Minnesota.svg', '2--776', 'Portal:Minnesota', 'United States of America', 'Saint Paul', 'Michigan', 'Flag of Minnesota.svg', 'flag of Minnesota', 'US-MN', 'Minnesota', 'Minnesota in United States.svg', 'UTC\u221206:00', 'Tim Walz', '165471', 'United States of America', '46.0', 'https://mn.gov/', 'Category:Minnesota', 'Bannerminnesota.jpg', 'Regional/North_America/United_States/Minnesota/', 'f5ffcc03-ebf2-466a-bb11-b38c6c0c84f5', 'U.S. state', 'Minnesota Legislature', '/m/04ykg', 'Aitkin County', '662849', 'US27', '+1858-05-11T00:00:00Z', 'Category:Births in Minnesota', 'Category:Deaths in Minnesota', '5037779', '4101012-7', 'Category:Films shot in Minnesota', 'Category:Burials in Minnesota', 'Category:People from Minnesota', 'Governor of Minnesota', '146514191', 'n79021675', 5706494.0, 'Land of 10,000 Lakes', 'Template:Minnesota', 'Minnesota', 'Catholic Encyclopedia', 'geography of Minnesota', 'place/Minnesota', 'Seal of Minnesota', 'En-us-Minnesota.ogg', '42618.0', 225163.0, 'Minnesota-state', '17be21a7-c94f-4dca-a8ea-ff6db74d60c5', '106685', 'MN', 'Minnesotan', 'Minnesota', 'L\u2019\u00c9toile du Nord', 'Eagle Mountain', 'Lake Superior', 'history of Minnesota', 365.0, '10045230', '7477', 'D008910', 'Minnesota Historical Society', 'Grace', 'MN', '27', 'outline of Minnesota', 8.410000000000000142, 'Minnesota River', '46.2807', 'government of Minnesota', 'Minnesota Constitution', 'Minnesota Supreme Court', '7007521', 'Midwestern United States', '13651', 'State of Minnesota', 'nan', '2847', '974602.0', 'Data:Minnesota.map', 'Entity[\"AdministrativeDivision\", {\"Minnesota\", \"UnitedStates\"}]', 'ge391167', 'nan', '4020-55747', 115.0, 'countries/mnu', 'Hutterite German', 'Hail! Minnesota', '85688727', 'Minnesota', 'Lake Superior', '370108.0', -60.0, 'Category:Maps of Minnesota', 'autre-region/wd/133318', 'minnesota', 'Minnesota', 'Minnesota', 'Minnesota', 'lccn-n79021675', '0000 0004 0434 4468', 'Minnesota-State', '7408', 'US.MN', 'i84463', '243.0', 'economy of Minnesota', '189935802145219087', '28944.0', 'ocd-division/country:us/state:mn', 'CAAqIQgKIhtDQkFTRGdvSUwyMHZNRFI1YTJjU0FtVnVLQUFQAQ', 'Category:Views of Minnesota', 'minnesota', '11700', '09124616-n', 'demographics of Minnesota', '49.384472222222', 'nan', '38', 18.0, 16.0, '1.2581558355842048e+18', '6', '3941795.0', '49972', 'Category:Minnesota-related lists', 'Minnesota', 38881.0, 38.10000000000000142, 2207988.0, 'Minnesota', '9.870075549588051e+17', '5529.0', '10326c');\nDatabase State:\n- Table: facet_of, Columns: [label, description, seal_image, dewey_decimal_classification, topics_main_wikimedia_portal, country, capital, shares_border_with, flag_image, flag, iso_3166_2_code, commons_category, locator_map_image, located_in_time_zone, head_of_government, openstreetmap_relation_id, located_in_the_administrative_territorial_entity, coordinate_location, official_website, topics_main_category, page_banner, curlie_id, musicbrainz_area_id, instance_of, legislative_body, freebase_id, contains_the_administrative_territorial_entity, gnis_id, fips_10_4_countries_and_regions, inception, category_for_people_born_here, category_for_people_who_died_here, geonames_id, gnd_id, category_for_films_shot_at_this_location, category_of_people_buried_here, category_of_associated_people, office_held_by_head_of_government, viaf_id, library_of_congress_authority_id, population, nickname, topics_main_template, ballotpedia_id, described_by_source, geography_of_topic, encyclop\u00e6dia_britannica_online_id, has_seal_badge_or_sigil, pronunciation_audio, gran_enciclop\u00e8dia_catalana_id, area, quora_topic_id, bbc_things_id, yso_id, short_name, demonym, subreddit, motto_text, highest_point, lowest_point, history_of_topic, elevation_above_sea_level, us_national_archives_identifier, gacs_id, mesh_descriptor_id, archives_at, official_symbol, fips_5_2_alpha_code_us_states, fips_5_2_numeric_code_us_states, wikimedia_outline, water_as_percent_of_area, named_after, coordinates_of_geographic_center, executive_body, foundational_text, highest_judicial_authority, getty_thesaurus_of_geographic_names_id, part_of, c_span_organization_id, native_label, idref_id, archinform_location_id, national_library_of_israel_id_old, geoshape, wolfram_language_entity_code, nkcr_aut_id, different_from, comic_vine_id, maximum_temperature_record, loc_and_marc_vocabularies_id, language_used, anthem, whos_on_first_id, store_norske_leksikon_id, located_in_or_next_to_body_of_water, omegawiki_defined_meaning, minimum_temperature_record, category_for_maps, larousse_id, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, italian_vikidia_id, worldcat_identities_id, isni, kbpedia_id, rkd_thesaurus_id, hasc, interlingual_index_id, the_top_tens_id, economy_of_topic, google_maps_customer_id, tripadvisor_id, open_civic_data_division_id, google_news_topics_id, category_for_the_view_of_the_item, github_topic, uk_parliament_thesaurus_id, wordnet_31_synset_id, demographics_of_topic, coordinates_of_northernmost_point, coordinates_of_southernmost_point, inaturalist_place_id, marriageable_age, compulsory_education_maximum_age, twitter_topic_id, openstreetmap_zoom_level, online_pwn_encyclopedia_id, wikisimpsons_id, related_category, den_store_danske_id, per_capita_income, mean_age, number_of_households, hashtag, national_library_of_israel_j9u_id, ringgold_id, catholic_encyclopedia_id]",
        "Response": "Table: facet_of"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO flights (Airline) VALUES (2, 672, ' ANV', ' ABL');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: flights"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, subclass_of, uniprot_protein_id, found_in_taxon, encoded_by, instance_of, refseq_protein_id, part_of) VALUES ('Hypothetical protein p1ECUMN_0042', 'microbial protein found in Escherichia coli UMN026', 'nan', 'B7LIZ1', 'Escherichia coli UMN026', 'hypothetical protein p1ECUMN_0042', 'protein', 'YP_002405943', 'Periplasmic metal-binding protein Tp34-type');\nDatabase State:\n- Table: taxon, Columns: [label, description, taxon_name, taxon_rank, instance_of, parent_taxon, ncbi_taxonomy_id, gbif_taxon_id, encyclopedia_of_life_id, itis_tsn, bacdive_id, gram_staining, mesh_descriptor_id, lpsn_url, microsoft_academic_id, freebase_id, openalex_id, catalogue_of_life_id, irmng_id]\n- Table: Protein_Info, Columns: [label, description, subclass_of, uniprot_protein_id, found_in_taxon, encoded_by, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: Protein_Info"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customers (ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age) VALUES (17848, 'Male', 'Never-married', 42, 6, 'Farming-fishing', 40);\nDatabase State:\n- Table: Sales, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]\n- Table: Demographics, Columns: [ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age]",
        "Response": "Table: Demographics"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, country, instance_of, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, freebase_id, commons_category, viaf_id, geonames_id, population, official_website, image, locator_map_image, openstreetmap_relation_id, area, whos_on_first_id, worldcat_identities_id) VALUES ('Northern Territory', 'federal territory of Australia', 'Australia', 'mainland territory of Australia', 'Australia', '-20.0', 'Category:Northern Territory', '/m/05ff6', 'Northern Territory', '153552537.0', '2064513', 245353.0, 'http://www.nt.gov.au/', 'Uluru, helicopter view, cropped.jpg', 'Northern Territory in Australia.svg', '2316594', 1347791.0, '85681533.0', 'lccn-n81035353');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO track (Track_ID, Name, Location, Seating, Year_Opened) VALUES (3, 'Darlington Raceway', 'Darlington, SC', 63000.0, 1950.0);\nDatabase State:\n- Table: track, Columns: [Track_ID, Name, Location, Seating, Year_Opened]",
        "Response": "Table: track"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SeasonStatus (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS) VALUES (12508, '2006-2007', 'Lewiston MAINEiacs', 'QMJHL', 'Regular Season', 70, 5, 27, 32, 141, 34);\nDatabase State:\n- Table: PlayerInfo, Columns: [ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0]\n- Table: height_info, Columns: [height_id, height_in_cm, height_in_inch]",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO place_of_birth (label, description, country, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, freebase_id, instance_of, geonames_id, official_website, image, viaf_id) VALUES ('University Medical Center Utrecht', 'academic hospital in Utrecht, Netherlands', 'Netherlands', 'Universitair Medisch Centrum Utrecht', 'Utrecht', '52.088611', '/m/02qkwv4', 'university hospital', 'nan', 'http://www.umcutrecht.nl/nl/', 'UMC Heidelberglaan-100 Uithof Utrecht Nederland-02.JPG', '131559150.0');\nDatabase State:\n- Table: political_border, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, country, coordinate_location, topics_main_category, instance_of, freebase_id, geonames_id, shares_border_with, official_website, locator_map_image, openstreetmap_relation_id, area, archinform_location_id, image, inaturalist_place_id, whos_on_first_id, population, musicbrainz_area_id]\n- Table: part, Columns: [label, description, commons_category, topics_main_category, freebase_id, gnd_id, viaf_id, instance_of, quora_topic_id, has_parts, coordinate_location, locator_map_image]\n- Table: capital_city, Columns: [label, description, country, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, freebase_id, instance_of, geonames_id, official_website, image, capital_of, viaf_id, postal_code, population, area, library_of_congress_authority_id, whos_on_first_id, worldcat_identities_id, different_from, national_library_of_israel_j9u_id]\n- Table: Places, Columns: [label, description, country, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, freebase_id, instance_of, geonames_id, official_website, image, viaf_id]\n- Table: head_of_state, Columns: [label, description, commons_category, viaf_id, isni, library_of_congress_authority_id, gnd_id, country_of_citizenship, image, place_of_birth, date_of_birth, occupation, position_held, educated_at, instance_of, freebase_id, munzinger_person_id, languages_spoken_written_or_signed, given_name, native_language, award_received, signature, family_name, name_in_native_language, sex_or_gender, worldcat_identities_id, opensanctions_id]\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, instance_of, freebase_id, geonames_id, shares_border_with, official_website, capital, locator_map_image, head_of_government, archinform_location_id, inaturalist_place_id, whos_on_first_id, area, population]",
        "Response": "Table: Places"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, located_in_the_administrative_territorial_entity, country, coordinate_location, instance_of, freebase_id, geonames_id, openstreetmap_relation_id, image, whos_on_first_id) VALUES ('Devon', 'ceremonial county of England', 'Devon', 'South West England', 'United Kingdom', '50.7', 'ceremonial county of England', '/m/028n3', '11609025.0', '57538.0', 'Ilfracombe.jpg', '85683773.0');\nDatabase State:\n- Table: political_border, Columns: [label, description, instance_of, country, geoshape, locator_map_image, shares_border_with, vision_of_britain_place_id, population, coordinate_location, catalog_code, factgrid_item_id, located_in_the_administrative_territorial_entity, commons_category]\n- Table: historic_county, Columns: [label, description, instance_of, country, flag_image, locator_map_image, shares_border_with, vision_of_britain_place_id, population, catalog_code, coordinate_location, factgrid_item_id, described_by_source, commons_category]\n- Table: chamber_tomb, Columns: [label, description, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, country, historic_county]\n- Table: Places, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, country, coordinate_location, instance_of, freebase_id, geonames_id, openstreetmap_relation_id, image, whos_on_first_id]",
        "Response": "Table: Places"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, molecular_function, biological_process, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('L-allo-threonine aldolase KPHS_17800', 'microbial protein found in Klebsiella pneumoniae subsp. pneumoniae HS11286', 'L-allo-threonine aldolase KPHS_17800', 'A0A0H3GM68', 'lyase activity', 'cellular amino acid metabolic process', 'Aromatic amino acid beta-eliminating lyase/threonine aldolase', 'Klebsiella pneumoniae subsp. pneumoniae HS11286', 'YP_005226080', 'protein', 'Pyridoxal phosphate-dependent transferase, major domain', 'protein');\nDatabase State:\n- Table: encodes, Columns: [label, description, encoded_by, uniprot_protein_id, molecular_function, biological_process, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO enrolled (name, school, month) VALUES ('student6', 'smc', 12);\nDatabase State:\n- Table: unemployed, Columns: [name]\n- Table: enrolled, Columns: [name, school, month]\n- Table: filed_for_bankrupcy, Columns: [name]\n- Table: person, Columns: [name]",
        "Response": "Table: enrolled"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (part_fault_id, part_id, fault_short_name, fault_description, other_fault_details) VALUES (6, 2, 'PW', 'Package Wrong', NULL);\nDatabase State:\n- Table: Asset_Parts, Columns: [asset_id, part_id]\n- Table: Engineer_Skills, Columns: [engineer_id, skill_id]\n- Table: Engineer_Visits, Columns: [engineer_visit_id, contact_staff_id, engineer_id, fault_log_entry_id, fault_status, visit_start_datetime, visit_end_datetime, other_visit_details]\n- Table: Skills, Columns: [skill_id, skill_code, skill_description]\n- Table: Maintenance_Contracts, Columns: [maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details]",
        "Response": "Table: Part_Faults"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO accelerator_compatible_browser (accelerator_id, browser_id, compatible_since_year) VALUES (1, 2, 1996);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: accelerator_compatible_browser"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, official_website, freebase_id, issn, era_journal_id, oclc_control_number, coden, scopus_source_id, danish_bibliometric_research_indicator_bfi_snocno, danish_bibliometric_research_indicator_level, publisher, title, iso_4_abbreviation, opencitations_bibliographic_resource_id, nlm_unique_id, language_of_work_or_name, inception, country_of_origin, uniprot_journal_id, main_subject, jufo_id, acnp_journal_id, crossref_journal_id, issn_l, indexed_in_bibliographic_review, openalex_id, scilit_journal_id) VALUES ('FEBS Journal', 'scientific journal', 'scientific journal', 'http://www.febsjournal.org/', '/m/02qg9y_', '1742-464X', '2212', '57253365.0', 'FJEOAC', '38597', '7307', '1', 'Wiley-Blackwell', 'FEBS Journal', 'FEBS J.', '1723', '0107600', 'English', '+1906-01-01T00:00:00Z', 'England', '708', 'biochemistry', '55681', '1531', '3481', 'nan', 'Scopus', 'V37672443', 'nan');\nDatabase State:\n- Table: citation, Columns: [label, description, pages, title, author_name_string, publication_date, issue, volume, published_in, instance_of, pubmed_id, doi, language_of_work_or_name]\n- Table: smooth_muscle_contraction, Columns: [label, description, found_in_taxon, reactome_id, instance_of, part_of, exact_match, has_parts, cites_work]",
        "Response": "Table: publishing"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO storm (Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths) VALUES (5, 'Five', 'September7\u2013September17', 988, 1.489999999999999992, 3);\nDatabase State:\n- Table: region, Columns: [Region_id, Region_code, Region_name]\n- Table: storm, Columns: [Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths]",
        "Response": "Table: storm"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales (EVENTID, REFID, EVENT_DATE, AMOUNT) VALUES (140502, 14794, '2006-11-23 12:00:00.0', 18.28999999999999915);\nDatabase State:\n- Table: Mailings1_2, Columns: [REFID, REF_DATE, RESPONSE]\n- Table: mailings3, Columns: [REFID, REF_DATE, RESPONSE]\n- Table: Demog, Columns: [GEOID, INHABITANTS_K, INCOME_K, A_VAR1, A_VAR2, A_VAR3, A_VAR4, A_VAR5, A_VAR6, A_VAR7, A_VAR8, A_VAR9, A_VAR10, A_VAR11, A_VAR12, A_VAR13, A_VAR14, A_VAR15, A_VAR16, A_VAR17, A_VAR18]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL');\nDatabase State:\n- Table: Restaurant_Type, Columns: [ResTypeID, ResTypeName, ResTypeDescription]\n- Table: Restaurant, Columns: [ResID, ResName, Address, Rating]\n- Table: Visits_Restaurant, Columns: [StuID, ResID, Time, Spent]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, playerID, year, stint, tmID, lgID, GP, GS, minutes, points, oRebounds, dRebounds, rebounds, assists, steals, blocks, turnovers, PF, fgAttempted, fgMade, ftAttempted, ftMade, threeAttempted, threeMade, PostGP, PostGS, PostMinutes, PostPoints, PostoRebounds, PostdRebounds, PostRebounds, PostAssists, PostSteals, PostBlocks, PostTurnovers, PostPF, PostfgAttempted, PostfgMade, PostftAttempted, PostftMade, PostthreeAttempted, PostthreeMade, note) VALUES (17768, 'robbire01', 1968, 1, 'NOB', 'ABA', 76, 0, 2736, 1210, 368, 656, 1024, 142, 0, 0, 121, 200, 1035, 456, 361, 291, 29, 7, 11, 0, 410, 185, 0, 0, 175, 17, 0, 0, 20, 32, 146, 71, 53, 41, 5, 2, NULL);\nDatabase State:\n- Table: coaches, Columns: [coachID, year, tmID, lgID, stint, won, lost, post_wins, post_losses]\n- Table: players_teams, Columns: [id, playerID, year, stint, tmID, lgID, GP, GS, minutes, points, oRebounds, dRebounds, rebounds, assists, steals, blocks, turnovers, PF, fgAttempted, fgMade, ftAttempted, ftMade, threeAttempted, threeMade, PostGP, PostGS, PostMinutes, PostPoints, PostoRebounds, PostdRebounds, PostRebounds, PostAssists, PostSteals, PostBlocks, PostTurnovers, PostPF, PostfgAttempted, PostfgMade, PostftAttempted, PostftMade, PostthreeAttempted, PostthreeMade, note]\n- Table: player_allstar, Columns: [playerID, last_name, first_name, season_id, conference, league_id, games_played, minutes, points, o_rebounds, d_rebounds, rebounds, assists, steals, blocks, turnovers, personal_fouls, fg_attempted, fg_made, ft_attempted, ft_made, three_attempted, three_made]",
        "Response": "Table: players_teams"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO citation (label, description, pubmed_id, instance_of, published_in, volume, issue, pages, author_name_string, cites_work, doi, publication_date, title) VALUES ('Characterization and localization to human chromosome 1 of human fast-twitch skeletal muscle calsequestrin gene', 'scientific journal article', '2321095', 'scholarly article', 'Somatic Cell and Molecular Genetics', '16', '2', '185\u2013189', 'J. Fujii', 'nan', '10.1007/BF01233048', '+1990-03-01T00:00:00Z', 'Characterization and localization to human chromosome 1 of human fast-twitch skeletal muscle calsequestrin gene');\nDatabase State:\n- Table: publisher, Columns: [label, description, official_website, country, instance_of, isni, ringgold_id, headquarters_location, inception, microsoft_academic_id, library_of_congress_authority_id, romeo_publisher_id, viaf_id, worldcat_identities_id, freebase_id, publons_publisher_id]\n- Table: topic, Columns: [label, description, instance_of, commons_category, bncf_thesaurus_id, topics_main_category, freebase_id, library_of_congress_authority_id, mesh_descriptor_id, biblioth\u00e8que_nationale_de_france_id, quora_topic_id, jstor_topic_id, encyclop\u00e6dia_britannica_online_id, subclass_of, omegawiki_defined_meaning, microsoft_academic_id, yso_id, mesh_tree_code, national_library_of_israel_j9u_id, openalex_id, nkcr_aut_id]",
        "Response": "Table: citation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, +/_, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, Post+/_, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG) VALUES ('haworal01', 1981, 1, 'BUF', 'NHL', 'R', 57, 21, 18, 39, 30, '6', '3', NULL, '0', NULL, '1', '2', '114', '3', '0', '1', '1', '2', NULL, '0', NULL, '0', NULL, '0', NULL);\nDatabase State:\n- Table: CombinedShutouts, Columns: [year, month, date, tmID, oppID, R/P, IDgoalie1, IDgoalie2]\n- Table: ScoringSC, Columns: [playerID, year, tmID, lgID, pos, GP, G, A, Pts, PIM]\n- Table: AwardsMisc, Columns: [name, ID, award, year, lgID, note]\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: AwardsPlayers, Columns: [playerID, award, year, lgID, note, pos]\n- Table: HOF, Columns: [year, hofID, name, category]\n- Table: TeamsSC, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM]\n- Table: SeriesPost, Columns: [year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L, T, GoalsWinner, GoalsLoser, note]\n- Table: ScoringSup, Columns: [playerID, year, PPA, SHA]\n- Table: TeamsPost, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: TeamVsTeam, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]\n- Table: Coaches, Columns: [coachID, year, tmID, lgID, stint, notes, g, w, l, t, postg, postw, postl, postt]\n- Table: GoaliesSC, Columns: [playerID, year, tmID, lgID, GP, Min, W, L, T, SHO, GA]\n- Table: Teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: TeamsHalf, Columns: [year, lgID, tmID, half, rank, G, W, L, T, GF, GA]\n- Table: abbrev, Columns: [Type, Code, Fullname]\n- Table: GoaliesShootout, Columns: [playerID, year, stint, tmID, W, L, SA, GA]\n- Table: ScoringShootout, Columns: [playerID, year, stint, tmID, S, G, GDG]\n- Table: PlayerStats, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, +/_, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, Post+/_, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]\n- Table: Goalies, Columns: [playerID, year, stint, tmID, lgID, GP, Min, W, L, T/OL, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA]\n- Table: Master, Columns: [playerID, coachID, hofID, firstName, lastName, nameNote, nameGiven, nameNick, height, weight, shootCatch, legendsID, ihdbID, hrefID, firstNHL, lastNHL, firstWHA, lastWHA, pos, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity, deathYear, deathMon, deathDay, deathCountry, deathState, deathCity]\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]",
        "Response": "Table: PlayerStats"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Film_ID, Title, Studio, Director, Gross_in_dollar) VALUES (8, 'Poltergeist', 'MGM', 'Tobe Hooper', 76606280);\nDatabase State:\n- Table: film, Columns: [Film_ID, Title, Studio, Director, Gross_in_dollar]\n- Table: market, Columns: [Market_ID, Country, Number_cities]",
        "Response": "Table: film"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (concert_ID, Singer_ID) VALUES (1, '3');\nDatabase State:\n- Table: concert, Columns: [concert_ID, concert_Name, Theme, Stadium_ID, Year]",
        "Response": "Table: singer_in_concert"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (zip_code, area_code) VALUES (30360, 678);\nDatabase State:\n- Table: ZipAreaCodes, Columns: [zip_code, area_code]\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]",
        "Response": "Table: ZipAreaCodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Code) VALUES (52597, 'AOB', '11-JAN-10', '14-JAN-10', 175.0, 'CASMORE', 'MARINE', 3, 0);\nDatabase State:\n- Table: Rooms, Columns: [RoomId, roomName]",
        "Response": "Table: Reservations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO part (label, description, instance_of, kegg_id, pubchem_substance_id_sid, has_parts) VALUES ('choreitogoshimotsuto', 'Kampo drug', 'Chinese herbology', 'D07015', '51091357', 'Rehmanniae Radix');\nDatabase State:\n- Table: taxon, Columns: [label, description, commons_category, image, taxon_name, taxon_rank, freebase_id, tropicos_id, ipni_plant_id, parent_taxon, instance_of, ncbi_taxonomy_id, flora_of_china_id, grin_url, gbif_taxon_id, taxon_common_name, plants_of_the_world_online_id, irmng_id, topics_main_category, inaturalist_taxon_id, encyclopedia_of_life_id, described_by_source, world_flora_online_id, open_tree_of_life_id, catalogue_of_life_id]\n- Table: natural_product, Columns: [label, description, instance_of, natural_product_of_taxon, kegg_id, pubchem_substance_id_sid, subclass_of, part_of]\n- Table: part, Columns: [label, description, instance_of, kegg_id, pubchem_substance_id_sid, has_parts]",
        "Response": "Table: part"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, category_combines_topics, commons_category, category_contains) VALUES ('Category:People from Kropyvnytskyi', 'Wikimedia category', 'Wikimedia category', 'Kropyvnytskyi', 'People of Kropyvnytskyi', 'human');\nDatabase State:\n- Table: wikimedia_category, Columns: [label, description, instance_of, category_combines_topics, commons_category, category_contains]\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, iso_3166_2_code, capital, located_in_the_administrative_territorial_entity, country, population, coordinate_location, geonames_id, commons_category, image, locator_map_image, official_website, coat_of_arms_image, topics_main_category, area]\n- Table: capital_city, Columns: [label, description, gnd_id, twinned_administrative_body, commons_category, instance_of, country, coat_of_arms_image, flag_image, viaf_id, postal_code, head_of_government, located_in_the_administrative_territorial_entity, coordinate_location, page_banner, topics_main_category, freebase_id, musicbrainz_area_id, dewey_decimal_classification, category_for_people_born_here, category_for_people_who_died_here, geonames_id, local_dialing_code, official_website, category_of_associated_people, described_by_source, elevation_above_sea_level, image, commons_gallery, population, quora_topic_id, area, native_label, official_name, located_in_time_zone, encyclop\u00e6dia_britannica_online_id, great_russian_encyclopedia_online_id, nkcr_aut_id, capital_of, whos_on_first_id, category_for_maps, worldcat_identities_id, factgrid_item_id, store_norske_leksikon_id, national_library_of_israel_j9u_id]\n- Table: twin_town, Columns: [label, description, gnd_id, twinned_administrative_body, commons_category, instance_of, country, coat_of_arms_image, flag_image, viaf_id, postal_code, head_of_government, located_in_the_administrative_territorial_entity, coordinate_location, page_banner, topics_main_category, freebase_id, musicbrainz_area_id, dewey_decimal_classification, category_for_people_born_here, category_for_people_who_died_here, geonames_id, local_dialing_code, official_website, category_of_associated_people, described_by_source, elevation_above_sea_level, image, commons_gallery, population, quora_topic_id, area, native_label, official_name, located_in_time_zone, encyclop\u00e6dia_britannica_online_id, archinform_location_id, great_russian_encyclopedia_online_id, nkcr_aut_id, capital_of, gran_enciclop\u00e8dia_catalana_id, whos_on_first_id, category_for_maps, worldcat_identities_id, factgrid_item_id, online_pwn_encyclopedia_id, store_norske_leksikon_id, national_library_of_israel_j9u_id]\n- Table: centre_of_oblast, Columns: [label, description, coat_of_arms, gnd_id, twinned_administrative_body, instance_of, commons_category, country, flag_image, coat_of_arms_image, postal_code, located_in_time_zone, local_dialing_code, coordinate_location, topics_main_category, page_banner, freebase_id, musicbrainz_area_id, inception, flag, official_website, category_for_people_who_died_here, geonames_id, category_of_associated_people, capital_of, viaf_id, described_by_source, locator_map_image, located_in_the_administrative_territorial_entity, elevation_above_sea_level, area, population, image, official_name, native_label, quora_topic_id, great_russian_encyclopedia_online_id, encyclop\u00e6dia_britannica_online_id, nkcr_aut_id, library_of_congress_authority_id, whos_on_first_id, national_library_of_israel_j9u_id, online_pwn_encyclopedia_id, koatuu_identifier, category_for_people_born_here, internet_encyclopedia_of_ukraine_id, on_focus_list_of_wikimedia_project, facebook_id]",
        "Response": "Table: wikimedia_category"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Apartments (apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count) VALUES (7, 790, 'Studio', 'Suite 088', 2, 4, '6');\nDatabase State:\n- Table: Guests, Columns: [guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth]\n- Table: Apartment_Facilities, Columns: [apt_id, facility_code]\n- Table: ResidentialUnits, Columns: [apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count]\n- Table: View_Unit_Status, Columns: [apt_id, apt_booking_id, status_date, available_yn]\n- Table: Apartment_Bookings, Columns: [apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date]",
        "Response": "Table: ResidentialUnits"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO playlist_tracks (playlist_id, track_id) VALUES (1, 938);\nDatabase State:\n- Table: playlist_tracks, Columns: [playlist_id, track_id]\n- Table: albums, Columns: [id, title, artist_id]\n- Table: invoices, Columns: [id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]\n- Table: employees, Columns: [id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]\n- Table: media_types, Columns: [id, name]\n- Table: invoice_lines, Columns: [id, invoice_id, track_id, unit_price, quantity]\n- Table: customers, Columns: [id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]\n- Table: artists, Columns: [id, name]\n- Table: playlists, Columns: [id, name]\n- Table: tracks, Columns: [id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]",
        "Response": "Table: playlist_tracks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO wine (No) VALUES (280, 'Chardonnay', 'Kistler', 'Russian River Valley', 'California', 'Dutton Ranch', 2006, 75, 92, 1810, 'now');\nDatabase State:\n- Table: appellations, Columns: [No]",
        "Response": "Table: wine"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, performer, record_label, instance_of, musicbrainz_release_group_id, follows, followed_by, genre, publication_date, form_of_creative_work, part_of, distribution_format, apple_music_album_id_us_version, deezer_album_id, spotify_album_id, genius_album_id, youtube_playlist_id) VALUES ('Autopsie 0', 'fifth mixtape by Booba', 'Booba', 'Tallac Records', 'album', 'nan', 'Nero Nemesis', 'Tr\u014dne', 'French hip hop', '+2017-03-10T00:00:00Z', 'compilation album', 'Booba discography', 'music streaming', '1440887688.0', '15587272.0', '4BKzjaLggvfdOTNo1fvgFM', 'Booba/Autopsie-0', 'OLAK5uy_niiBJQ9itOJCItQYchjuaWHYHd-mTJUdA');\nDatabase State:\n- Table: followed_by, Columns: [label, description, performer, record_label, instance_of, musicbrainz_release_group_id, follows, followed_by, genre, publication_date, form_of_creative_work, part_of, distribution_format, apple_music_album_id_us_version, deezer_album_id, spotify_album_id, genius_album_id, youtube_playlist_id]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings) VALUES (3, 5, 21.0, 1.0, 166.0, 104871.0);\nDatabase State:\n- Table: poker_player, Columns: [Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings]",
        "Response": "Table: poker_player"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (customer_id, datetime_payment, payment_method_code, amount_payment) VALUES (2, '2018-03-20 21:38:41', 'Direct Debit', 1708.180000000000063);\nDatabase State:\n- Table: Customer_Payments, Columns: [customer_id, datetime_payment, payment_method_code, amount_payment]\n- Table: Staff, Columns: [staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff]\n- Table: Addresses, Columns: [address_id, line_1_number_building, city, zip_postcode, state_province_county, country]\n- Table: Customers, Columns: [customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number, cell_mobile_phone_number]\n- Table: Lessons, Columns: [lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price]",
        "Response": "Table: Customer_Payments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO maastricht_formation (label, description, named_after, part_of, instance_of) VALUES ('Sint Pieter Horizon', 'nan', 'Sint Pieter', 'Maastricht Formation', 'horizon');\nDatabase State:\n- Table: eponym, Columns: [label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of, commons_category, located_inon_physical_feature]",
        "Response": "Table: maastricht_formation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male) VALUES (3, 'Justin Brown', 'France', 'Hey Oh', '2013', 29, 'T');\nDatabase State:\n- Table: singer_in_concert, Columns: [concert_ID, Singer_ID]\n- Table: stadium, Columns: [Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]",
        "Response": "Table: singer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Behavior_Incident (incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details) VALUES (14, 'NOISE', 1, '2017-08-29 20:48:56', '2018-03-16 14:37:20', NULL, 'Transfer schools', NULL);\nDatabase State:\n- Table: Detention, Columns: [detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details]\n- Table: Students_in_Detention, Columns: [student_id, detention_id, incident_id]\n- Table: Ref_Incident_Type, Columns: [incident_type_code, incident_type_description]\n- Table: Behavior_Incident, Columns: [incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details]\n- Table: Addresses, Columns: [address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details]\n- Table: Student_Addresses, Columns: [student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details]\n- Table: Assessment_Notes, Columns: [notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details]\n- Table: Ref_Address_Types, Columns: [address_type_code, address_type_description]\n- Table: Students, Columns: [student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details]\n- Table: Teachers, Columns: [teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details]\n- Table: Ref_Detention_Type, Columns: [detention_type_code, detention_type_description]",
        "Response": "Table: Behavior_Incident"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO RA (student_id, capability, prof_id, salary) VALUES (23, 5, 6, 'high');\nDatabase State:\n- Table: prof, Columns: [prof_id, gender, first_name, last_name, email, popularity, teachingability, graduate_from]\n- Table: Research_Assignments, Columns: [student_id, capability, prof_id, salary]\n- Table: course, Columns: [course_id, name, credit, diff]",
        "Response": "Table: Research_Assignments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, instance_of, ncbi_locus_tag, genomic_end, strand_orientation, genomic_start) VALUES ('GTP-binding protein Era LSL_0895', 'microbial gene found in Lactobacillus salivarius UCC118', '3977787', 'gene', 'GTP-binding protein Era LSL_0895', 'Lactobacillus salivarius UCC118', 'gene', 'LSL_0895', '919145.0', 'reverse strand', '918243.0');\nDatabase State:\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, instance_of, ncbi_locus_tag, genomic_end, strand_orientation, genomic_start]\n- Table: era_type_guanine_nucleotide_binding_g_domain_protein_family, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO broadcast (Channel_ID, Program_ID, Time_of_day) VALUES (9, 3, 'Noon');\nDatabase State:\n- Table: channel, Columns: [Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent]\n- Table: Schedule, Columns: [Channel_ID, Program_ID, Time_of_day]",
        "Response": "Table: Schedule"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, Name, Level_of_membership, Age) VALUES (3, 'Arjen Robben', 1, 27);\nDatabase State:\n- Table: visitor, Columns: [ID, Name, Level_of_membership, Age]",
        "Response": "Table: visitor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Quantity (quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional) VALUES (6052, 1366, 2270, 2.0, 2.0, 'clove(s)', 'peeled and crushed', 'FALSE');\nDatabase State:\n- Table: Quantity, Columns: [quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional]\n- Table: Recipe, Columns: [recipe_id, title, subtitle, servings, yield_unit, prep_min, cook_min, stnd_min, source, intro, directions]\n- Table: Nutrition, Columns: [recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories]",
        "Response": "Table: Quantity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO movies_total_gross (movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross) VALUES ('Cold Creek Manor', 'Sep 19, 2003', 'Thriller/Suspense', 'R', '$21,384,035', '$29,895,090');\nDatabase State:\n- Table: director, Columns: [name, director]\n- Table: BoxOfficePerformance, Columns: [movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross]",
        "Response": "Table: BoxOfficePerformance"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Finances (Finance_ID, Other_Details) VALUES (2, 'Good');\nDatabase State:\n- Table: Addresses, Columns: [Address_ID, address_details]\n- Table: Products, Columns: [Product_ID, Product_Type_Code, Product_Name, Product_Price]\n- Table: Events, Columns: [Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID]\n- Table: Agreements, Columns: [Document_ID, Event_ID]\n- Table: Parties, Columns: [Party_ID, Party_Details]\n- Table: Locations, Columns: [Location_ID, Other_Details]\n- Table: Assets_in_Events, Columns: [Asset_ID, Event_ID]\n- Table: Products_in_Events, Columns: [Product_in_Event_ID, Event_ID, Product_ID]\n- Table: Parties_in_Events, Columns: [Party_ID, Event_ID, Role_Code]",
        "Response": "Table: Finances"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO replaced_entity (label, description, instance_of, replaced_by, replaces, applies_to_jurisdiction, dissolved_abolished_or_demolished_date, inception) VALUES ('Kri\u0161topans cabinet', 'government of Latvia from 26 November 1998 to 16 July 1999', 'Government of Latvia', '3rd \u0160\u0137\u0113le Cabinet', 'Krasts cabinet', 'Latvia', '+1999-07-16T00:00:00Z', '+1998-11-26T00:00:00Z');\nDatabase State:\n- Table: government_of_latvia, Columns: [label, description, inception, replaced_by, replaces, instance_of, applies_to_jurisdiction, dissolved_abolished_or_demolished_date]\n- Table: Cabinets, Columns: [label, description, instance_of, replaced_by, replaces, applies_to_jurisdiction, dissolved_abolished_or_demolished_date, inception]",
        "Response": "Table: Cabinets"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Reviews (business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length) VALUES (9940, 24074, 4, 'None', 'Low', 'None', 'Medium');\nDatabase State:\n- Table: Compliments, Columns: [compliment_id, compliment_type]\n- Table: Elite, Columns: [user_id, year_id]\n- Table: Users_Compliments, Columns: [compliment_id, user_id, number_of_compliments]\n- Table: Users, Columns: [user_id, user_yelping_since_year, user_average_stars, user_votes_funny, user_votes_useful, user_votes_cool, user_review_count, user_fans]\n- Table: Business, Columns: [business_id, active, city, state, stars, review_count]\n- Table: Attributes, Columns: [attribute_id, attribute_name]\n- Table: Checkins, Columns: [business_id, day_id, label_time_0, label_time_1, label_time_2, label_time_3, label_time_4, label_time_5, label_time_6, label_time_7, label_time_8, label_time_9, label_time_10, label_time_11, label_time_12, label_time_13, label_time_14, label_time_15, label_time_16, label_time_17, label_time_18, label_time_19, label_time_20, label_time_21, label_time_22, label_time_23]\n- Table: Business_Categories, Columns: [business_id, category_id]\n- Table: Business_Attributes, Columns: [attribute_id, business_id, attribute_value]\n- Table: Categories, Columns: [category_id, category_name]\n- Table: Tips, Columns: [business_id, user_id, likes, tip_length]\n- Table: Business_Hours, Columns: [business_id, day_id, opening_time, closing_time]",
        "Response": "Table: Reviews"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number) VALUES ('Enterococcus faecium DO', 'bacterial strain', 'Enterococcus faecium DO', 'Enterococcus faecium', '333849', 'strain', 'gram-positive bacteria', 'GCA_000174395.2');\nDatabase State:\n- Table: Strains, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]\n- Table: trnaile_lysidine_synthase_n_terminal_domain_protein_family, Columns: [label, description, encoded_by, subclass_of, found_in_taxon, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: Strains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO trip (id, duration, start_date, start_station_name, end_date, end_station_name, bike_id, subscription_type, zip_code) VALUES (911393, 564, '8/30/2015 14:18', 'Post at Kearny', 47, '8/30/2015 14:27', 'Civic Center BART (7th at Market)', 72, 473, 'Subscriber', 94102);\nDatabase State:\n- Table: Rides, Columns: [id, duration, start_date, start_station_name, end_date, end_station_name, bike_id, subscription_type, zip_code]\n- Table: weather, Columns: [date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]\n- Table: station, Columns: [id, name, lat, long, dock_count, city, installation_date]\n- Table: status, Columns: [station_id, bikes_available, docks_available, time]",
        "Response": "Table: Rides"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Debate_ID, Affirmative, Negative, If_Affirmative_Win) VALUES (1, 1, 10, 'F');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: debate_people"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, category, person, role, credited) VALUES ('S20-E1', 'Cast', 'Harry Shearer', 'Ned Flanders', 'true');\nDatabase State:\n- Table: Credit, Columns: [episode_id, category, person, role, credited]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, person, role, episode_id, season, song, result]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, topics_main_category, instance_of, country, commons_category, located_in_the_administrative_territorial_entity, head_of_government, coordinate_location, curlie_id, musicbrainz_area_id, gnd_id, viaf_id, library_of_congress_authority_id, freebase_id, locator_map_image, geonames_id, category_for_people_who_died_here, category_of_associated_people, capital_of, page_banner, elevation_above_sea_level, gnis_id, official_website, facebook_places_id, encyclop\u00e6dia_britannica_online_id, population, fips_55_3_locations_in_the_us, inception, local_dialing_code, quora_topic_id, area, us_national_archives_identifier, gran_enciclop\u00e8dia_catalana_id, flag_image, archinform_location_id, whos_on_first_id, located_in_time_zone, worldcat_identities_id, interlingual_index_id, wordnet_31_synset_id, tripadvisor_id, google_maps_customer_id, ballotpedia_id, image, subreddit, water_as_percent_of_area, online_pwn_encyclopedia_id, store_norske_leksikon_id, national_library_of_israel_j9u_id, wikisimpsons_id, per_capita_income, number_of_households, hashtag) VALUES ('Ramsey County', 'county in Minnesota, United States', 'Category:Ramsey County, Minnesota', 'county of Minnesota', 'United States of America', 'Ramsey County, Minnesota', 'Minnesota', 'nan', '45.02', 'nan', 'dcdb3306-f3c3-415d-acc5-bbd570d585b2', 'nan', '158284646', 'n81056706', '/m/0nh57', 'Map of Minnesota highlighting Ramsey County.svg', '5042563.0', 'nan', 'Category:People from Ramsey County, Minnesota', 'nan', 'nan', NULL, '659507.0', 'http://www.co.ramsey.mn.us', 'nan', 'nan', 552352.0, 'nan', '+1849-10-27T00:00:00Z', 'nan', 'Ramsey-County-Minnesota', 441.0, '10039744.0', 'nan', 'nan', '19520.0', '102087007.0', 'nan', 'lccn-n81056706', 'nan', 'nan', 'nan', '', 'nan', 'Saint Paul City Hall.jpg', 'nan', 11.0, 'nan', 'nan', 'nan', 'nan', 36598.0, 210424.0, 'nan');\nDatabase State:\n- Table: jurisdiction, Columns: [label, description, dewey_decimal_classification, country, shares_border_with, capital, flag_image, named_after, iso_3166_2_code, commons_category, flag, coordinate_location, openstreetmap_relation_id, located_in_the_administrative_territorial_entity, official_website, page_banner, topics_main_category, curlie_id, musicbrainz_area_id, instance_of, legislative_body, freebase_id, gnis_id, fips_10_4_countries_and_regions, topics_main_wikimedia_portal, category_for_people_born_here, category_for_people_who_died_here, geonames_id, gnd_id, category_for_films_shot_at_this_location, category_of_people_buried_here, category_of_associated_people, office_held_by_head_of_government, inception, located_in_or_next_to_body_of_water, described_by_source, locator_map_image, viaf_id, pronunciation_audio, head_of_government, area, library_of_congress_authority_id, population, located_in_time_zone, bbc_things_id, quora_topic_id, isni, ringgold_id, highest_point, lowest_point, subreddit, short_name, nickname, motto_text, contains_the_administrative_territorial_entity, yso_id, elevation_above_sea_level, mesh_descriptor_id, us_national_archives_identifier, gacs_id, history_of_topic, encyclop\u00e6dia_britannica_online_id, fips_5_2_alpha_code_us_states, fips_5_2_numeric_code_us_states, geography_of_topic, demonym, wikimedia_outline, water_as_percent_of_area, coordinates_of_geographic_center, executive_body, foundational_text, highest_judicial_authority, coordinates_of_northernmost_point, getty_thesaurus_of_geographic_names_id, part_of, c_span_organization_id, native_label, archinform_location_id, geoshape, wolfram_language_entity_code, catholic_encyclopedia_id, official_symbol, comic_vine_id, maximum_temperature_record, loc_and_marc_vocabularies_id, language_used, whos_on_first_id, gran_enciclop\u00e8dia_catalana_id, omegawiki_defined_meaning, minimum_temperature_record, category_for_maps, larousse_id, treccanis_dizionario_di_storia_id, worldcat_identities_id, nkcr_aut_id, anthem, seal_image, has_seal_badge_or_sigil, kbpedia_id, rkd_thesaurus_id, hasc, interlingual_index_id, the_top_tens_id, economy_of_topic, open_civic_data_division_id, tripadvisor_id, google_maps_customer_id, google_news_topics_id, category_for_the_view_of_the_item, github_topic, wordnet_31_synset_id, demographics_of_topic, ballotpedia_id, inaturalist_place_id, archives_at, marriageable_age, compulsory_education_maximum_age, openstreetmap_zoom_level, topics_main_template, different_from, uk_parliament_thesaurus_id, online_pwn_encyclopedia_id, store_norske_leksikon_id, twitter_topic_id, wikisimpsons_id, related_category, den_store_danske_id, per_capita_income, mean_age, number_of_households, hashtag, national_library_of_israel_j9u_id, national_library_of_israel_id_old, idref_id, french_vikidia_id, english_vikidia_id, italian_vikidia_id]\n- Table: political_border, Columns: [label, description, capital, country, shares_border_with, named_after, commons_category, locator_map_image, coordinate_location, located_in_the_administrative_territorial_entity, official_website, topics_main_category, curlie_id, musicbrainz_area_id, instance_of, freebase_id, gnis_id, library_of_congress_authority_id, viaf_id, inception, geonames_id, category_of_associated_people, area, openstreetmap_relation_id, population, us_national_archives_identifier, contains_the_administrative_territorial_entity, water_as_percent_of_area, getty_thesaurus_of_geographic_names_id, image, native_label, archinform_location_id, wolfram_language_entity_code, whos_on_first_id, category_for_maps, worldcat_identities_id, hasc, inaturalist_place_id, national_library_of_israel_j9u_id, per_capita_income, number_of_households]\n- Table: place_of_death, Columns: [label, description, instance_of, category_combines_topics, category_contains, commons_category]\n- Table: Counties, Columns: [label, description, topics_main_category, instance_of, country, commons_category, located_in_the_administrative_territorial_entity, head_of_government, coordinate_location, curlie_id, musicbrainz_area_id, gnd_id, viaf_id, library_of_congress_authority_id, freebase_id, locator_map_image, geonames_id, category_for_people_who_died_here, category_of_associated_people, capital_of, page_banner, elevation_above_sea_level, gnis_id, official_website, facebook_places_id, encyclop\u00e6dia_britannica_online_id, population, fips_55_3_locations_in_the_us, inception, local_dialing_code, quora_topic_id, area, us_national_archives_identifier, gran_enciclop\u00e8dia_catalana_id, flag_image, archinform_location_id, whos_on_first_id, located_in_time_zone, worldcat_identities_id, interlingual_index_id, wordnet_31_synset_id, tripadvisor_id, google_maps_customer_id, ballotpedia_id, image, subreddit, water_as_percent_of_area, online_pwn_encyclopedia_id, store_norske_leksikon_id, national_library_of_israel_j9u_id, wikisimpsons_id, per_capita_income, number_of_households, hashtag]\n- Table: legislature_of_a_us_state, Columns: [label, description, instance_of, topics_main_category, viaf_id, freebase_id, has_parts, country, applies_to_jurisdiction, official_website, described_by_source, snac_ark_id, headquarters_location]",
        "Response": "Table: Counties"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, cites_work, instance_of, found_in_taxon, reactome_id, part_of, exact_match, has_parts) VALUES ('Budding of COPII coated vesicle', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-983424)', 'Dynamics of transitional endoplasmic reticulum sites in vertebrate cells', 'biological process', 'Homo sapiens', 'R-HSA-983424', 'Antigen Presentation: Folding, assembly and peptide loading of class I MHC', 'https://identifiers.org/reactome:R-HSA-983424', 'COPII vesicle with MHC class I [integral component of lumenal side of endoplasmic reticulum membrane]');\nDatabase State:\n- Table: antigen_presentation_folding_assembly_and_peptide_loading_of_class_i_mhc, Columns: [label, description, cites_work, instance_of, found_in_taxon, reactome_id, part_of, exact_match, has_parts]\n- Table: citation, Columns: [label, description, pages, title, author_name_string, publication_date, issue, volume, published_in, instance_of, pubmed_id, doi, language_of_work_or_name]",
        "Response": "Table: antigen_presentation_folding_assembly_and_peptide_loading_of_class_i_mhc"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO AREA_CODE_STATE (area_code) VALUES (278, 'MI');\nDatabase State:\n- Table: AreaCodeStateMap, Columns: [area_code]",
        "Response": "Table: AreaCodeStateMap"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows) VALUES ('1992 Ontario Badminton Championships', 'badminton championships', 'Ontario Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'Canada', '+1992-00-00T00:00:00Z', '1993 Ontario Badminton Championships', 'national championship', '1992 Ontario Badminton Championships \u2013 Men''s singles', '1991 Ontario Badminton Championships');\nDatabase State:\n- Table: followed_by, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, follows, followed_by, competition_class, has_parts]\n- Table: ontario_badminton_championships, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows]\n- Table: follows, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tjsb_sahakari_bank_branch (label, description, operator, country, located_in_the_administrative_territorial_entity, indian_financial_system_code, instance_of) VALUES ('TJSB Sahakari Bank, Murbad Branch', 'branch of TJSB Sahakari Bank', 'TJSB Sahakari Bank', 'India', 'Thane district', 'TJSB0000152', 'TJSB Sahakari Bank branch');\nDatabase State:\n- Table: capital_city, Columns: [label, description, country, located_in_the_administrative_territorial_entity, commons_category, instance_of, located_in_time_zone, coordinate_location, freebase_id, geonames_id, elevation_above_sea_level, image, postal_code, local_dialing_code, capital_of, quora_topic_id, whos_on_first_id, area]\n- Table: tjsb_sahakari_bank_branch, Columns: [label, description, operator, country, located_in_the_administrative_territorial_entity, indian_financial_system_code, instance_of]",
        "Response": "Table: tjsb_sahakari_bank_branch"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Year, Campus) VALUES (2002, 1, 1151);\nDatabase State:\n- Table: Campuses, Columns: [Id]\n- Table: faculty, Columns: [Campus]\n- Table: csu_fees, Columns: [Campus]\n- Table: discipline_enrollments, Columns: [Campus]\n- Table: enrollments, Columns: [Campus]",
        "Response": "Table: degrees"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO wikidata_property_related_to_sport (label, description, subclass_of, facet_of, instance_of) VALUES ('Wikidata property related to sports teams/clubs', 'Wikidata property', 'Wikidata property related to sport', 'sports club', 'type of Wikidata property');\nDatabase State:\n- Table: use, Columns: [label, description, subclass_of, freebase_id, commons_category, image]\n- Table: SportProperties, Columns: [label, description, subclass_of, facet_of, instance_of]\n- Table: facet_of, Columns: [label, description, subclass_of, topics_main_category, commons_category, freebase_id, library_of_congress_authority_id, image, practiced_by]\n- Table: intentional_human_activity, Columns: [label, description, field_of_this_occupation, topics_main_category, instance_of, commons_category, female_form_of_label, subclass_of]",
        "Response": "Table: SportProperties"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, operator, country, located_in_the_administrative_territorial_entity, indian_financial_system_code, instance_of) VALUES ('TJSB Sahakari Bank, Bengaluru Branch', 'branch of TJSB Sahakari Bank', 'TJSB Sahakari Bank', 'India', 'Bangalore Urban district', 'TJSB0000101', 'TJSB Sahakari Bank branch');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, country, coordinate_location, located_in_the_administrative_territorial_entity, capital, topics_main_category, instance_of, freebase_id, geonames_id, commons_category, shares_border_with, located_in_time_zone, official_website, locator_map_image, area, indian_census_area_code_2011, population, male_population, female_population, number_of_households, urban_population, rural_population, library_of_congress_authority_id, literate_population, illiterate_population, geoshape, viaf_id, wolfram_language_entity_code, inaturalist_place_id]\n- Table: political_border, Columns: [label, description, commons_category, country, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, instance_of, freebase_id, geonames_id, shares_border_with, official_website, capital, locator_map_image, area, indian_census_area_code_2011, population, male_population, female_population, number_of_households, urban_population, rural_population, literate_population, illiterate_population, geoshape, wolfram_language_entity_code, inaturalist_place_id, located_in_time_zone]",
        "Response": "Table: tjsb_sahakari_bank_branch"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO taughtBy (course_id, p_id) VALUES (62, 101);\nDatabase State:\n- Table: InstructorsCourses, Columns: [course_id, p_id]\n- Table: advisedBy, Columns: [p_id, p_id_dummy]\n- Table: person, Columns: [p_id, professor, student, hasPosition, inPhase, yearsInProgram]",
        "Response": "Table: InstructorsCourses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details) VALUES (10, 2, 'Adella', 'Chesley', 'Krajcik', '08605192839', 'frederique.mante@example.org', '2017-07-05 19:15:29', '2018-03-11 15:57:19', 'first honor');\nDatabase State:\n- Table: Students_in_Detention, Columns: [student_id, detention_id, incident_id]\n- Table: Detention, Columns: [detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details]\n- Table: Behavior_Incident, Columns: [incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details]\n- Table: Addresses, Columns: [address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details]\n- Table: Teachers, Columns: [teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details]\n- Table: Assessment_Notes, Columns: [notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details]\n- Table: Ref_Incident_Type, Columns: [incident_type_code, incident_type_description]\n- Table: Ref_Detention_Type, Columns: [detention_type_code, detention_type_description]",
        "Response": "Table: Students"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO trust (source_u_id) VALUES (7, 5, 2);\nDatabase State:\n- Table: useracct, Columns: [u_id]\n- Table: item, Columns: [i_id]\n- Table: review, Columns: [a_id]",
        "Response": "Table: trust"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (title_id, lorange, hirange, royalty) VALUES ('TC4203', 0, 2000, 10);\nDatabase State:\n- Table: stores, Columns: [stor_id, stor_name, stor_address, city, state, zip]\n- Table: Royalties, Columns: [title_id, lorange, hirange, royalty]\n- Table: authors, Columns: [au_id, au_lname, au_fname, phone, address, city, state, zip, contract]",
        "Response": "Table: Royalties"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO chamber_tomb (label, description, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, country, historic_county) VALUES ('Cloghanmore Tomb', 'Megalithic court cairn in Ireland', '54.68916667', 'Glencolumbkille', 'chamber tomb', 'Republic of Ireland', 'County Donegal');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: chamber_tomb"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO People_Addresses (person_address_id, person_id, address_id, date_from, date_to) VALUES (281, 151, 92, '2010-11-26 05:21:12', '2018-03-12 21:10:02');\nDatabase State:\n- Table: Students, Columns: [student_id, student_details]\n- Table: Addresses, Columns: [address_id, line_1, line_2, city, zip_postcode, state_province_county, country]\n- Table: Candidates, Columns: [candidate_id, candidate_details]\n- Table: People_Addresses, Columns: [person_address_id, person_id, address_id, date_from, date_to]",
        "Response": "Table: People_Addresses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cytochrome_bc1_complex_subunit_rieske_transmembrane_domain_superfamily (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, part_of, instance_of, ensembl_protein_id, refseq_protein_id) VALUES ('Cytochrome b-c1 complex subunit Rieske, mitochondrial-like', 'mammalian protein found in Macaca nemestrina', 'LOC105493947', 'A0A2K6APB9', 'electron transport chain', 'ubiquinol-cytochrome-c reductase activity', 'mitochondrion', 'Cytochrome b-c1 complex subunit Rieske, transmembrane domain', 'southern pig-tailed macaque', 'Rieske iron-sulphur protein', 'protein', 'ENSMNEP00000000999', 'XP_011760298');\nDatabase State:\n- Table: Protein_Information, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, part_of, instance_of, ensembl_protein_id, refseq_protein_id]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, found_in_taxon, instance_of, ensembl_gene_id, refseq_rna_id, encodes]",
        "Response": "Table: Protein_Information"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (CountryCode) VALUES ('DZA', 'Berberi', 'F', 14.0);\nDatabase State:\n- Table: countrylanguage, Columns: [CountryCode]",
        "Response": "Table: countrylanguage"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Member_of (FacID, DNO, Appt_Type) VALUES (7271, 50, 'Secondary');\nDatabase State:\n- Table: Course, Columns: [CID, CName, Credits, Instructor, Days, Hours, DNO]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: FacilityAppointments, Columns: [FacID, DNO, Appt_Type]",
        "Response": "Table: FacilityAppointments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Photos (Photo_ID, Tourist_Attraction_ID, Name, Description, Filename, Other_Details) VALUES (435, 8429, 'fun4', NULL, '453', NULL);\nDatabase State:\n- Table: Royal_Family, Columns: [Royal_Family_ID, Royal_Family_Details]\n- Table: Locations, Columns: [Location_ID, Location_Name, Address, Other_Details]\n- Table: Tourist_Attractions_Photos, Columns: [Photo_ID, Tourist_Attraction_ID, Name, Description, Filename, Other_Details]\n- Table: Street_Markets, Columns: [Market_ID, Market_Details]\n- Table: Visits, Columns: [Visit_ID, Tourist_Attraction_ID, Tourist_ID, Visit_Date, Visit_Details]\n- Table: Shops, Columns: [Shop_ID, Shop_Details]\n- Table: Ref_Hotel_Star_Ratings, Columns: [star_rating_code, star_rating_description]\n- Table: Features, Columns: [Feature_ID, Feature_Details]\n- Table: Visitors, Columns: [Tourist_ID, Tourist_Details]\n- Table: Theme_Parks, Columns: [Theme_Park_ID, Theme_Park_Details]\n- Table: Tourist_Attraction_Features, Columns: [Tourist_Attraction_ID, Feature_ID]\n- Table: Staff, Columns: [Staff_ID, Tourist_Attraction_ID, Name, Other_Details]\n- Table: Museums, Columns: [Museum_ID, Museum_Details]",
        "Response": "Table: Tourist_Attractions_Photos"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, doi, instance_of, title, published_in, follows, followed_by, volume, publication_date, part_of, author_name_string) VALUES ('Reflections on an interdisciplinary geoscience career', 'article', '10.1130/2018.1214(06)', 'scholarly article', 'Reflections on an interdisciplinary geoscience career', 'Memoir / Geological Society of America', 'Pioneers in Antarctic research: Lois Jones and her all-woman science team explore the geochemistry of the Dry Valleys', 'Hollywood representations of women in geology: Women geoscientists in film (1986\u20132016)', '214', '+2018-08-07T00:00:00Z', 'Women and Geology: Who Are We, Where Have We Come From, and Where Are We Going?', 'C. Olson');\nDatabase State:\n- Table: follows, Columns: [label, description, doi, instance_of, title, published_in, followed_by, publication_date, volume, part_of, follows, author_name_string]\n- Table: women_and_geology_who_are_we_where_have_we_come_from_and_where_are_we_going, Columns: [label, description, doi, instance_of, title, published_in, followed_by, publication_date, volume, part_of, main_subject, follows, author_name_string]\n- Table: followed_by, Columns: [label, description, doi, instance_of, title, published_in, follows, followed_by, volume, publication_date, part_of, author_name_string]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, country, located_in_the_administrative_territorial_entity, coat_of_arms_image, capital, commons_category, coordinate_location, topics_main_category, instance_of, freebase_id, geonames_id, category_of_associated_people, openstreetmap_relation_id, official_website, shares_border_with, area, locator_map_image, population, inaturalist_place_id) VALUES ('Minden-L\u00fcbbecke District', 'district in North Rhine-Westphalia, Germany', 'Germany', 'Detmold Government Region', 'DEU Kreis Minden-Luebbecke COA.svg', 'Minden', 'Kreis Minden-L\u00fcbbecke', '52.399166666667', 'Category:Minden-L\u00fcbbecke', 'rural district of North Rhine-Westphalia', '/m/018sqx', '2871034.0', 'Category:People from Minden-L\u00fcbbecke', '62358.0', 'http://www.minden-luebbecke.de', 'Lippe', 1051.970000000000027, 'North rhine w MI.svg', 310710.0, '98559.0');\nDatabase State:\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, new_york_times_topic_id, babelnet_id, geonames_id, gnd_id, unicode_character, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, coordinates_of_westernmost_point, geography_of_topic, stw_thesaurus_for_economics_id, iso_3166_1_alpha_3_code, office_held_by_head_of_government, quora_topic_id, curlie_id, country, native_label, basic_form_of_government, musicbrainz_area_id, has_quality, coat_of_arms_image, uic_alphabetical_country_code, mesh_descriptor_id, located_in_or_next_to_body_of_water, insee_countries_and_foreign_territories_code, diplomatic_relation, highest_judicial_authority, ituisoiec_object_identifier, commons_gallery, inception, viaf_id, civicus_monitor_country_entry, nuts_code, history_of_topic, gran_enciclop\u00e8dia_catalana_id, freebase_id, replaces, subreddit, continent, capital, coat_of_arms, demonym, geoshape, openstreetmap_relation_id, wipo_st3, coordinates_of_northernmost_point, coordinates_of_easternmost_point, nkcr_aut_id, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, flag_image, marriageable_age, topics_main_category, le_monde_diplomatique_subject_id, head_of_state, biblioth\u00e8que_nationale_de_france_id, category_of_people_buried_here, locator_map_image, bbc_things_id, age_of_majority, dewey_decimal_classification, area, head_of_government, fast_id, ioc_country_code, member_of, official_name, unemployment_rate, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, gs1_country_code, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, located_in_time_zone, category_for_people_who_died_here, yso_id, anthem, office_held_by_head_of_state, life_expectancy, part_of, commons_category, top_level_internet_domain, shares_border_with, instance_of, highest_point, category_for_people_born_here, short_name, number_of_out_of_school_children, driving_side, uic_numerical_country_code, on_focus_list_of_wikimedia_project, lowest_point, treccani_id, iso_3166_1_numeric_code, official_language, pronunciation_audio, idref_id, giant_bomb_id, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, statoids_id, library_of_congress_authority_id, iso_3166_1_alpha_2_code, flag, coordinate_location, fips_10_4_countries_and_regions, described_by_source, isni, brockhaus_enzyklop\u00e4die_online_id, klexikon_article_id, loc_and_marc_vocabularies_id, language_used, iab_code, legislative_body, comic_vine_id, category_of_associated_people, whos_on_first_id, world_encyclopedia_of_puppetry_arts_id, dr_topic_id, inaturalist_place_id, omegawiki_defined_meaning, hds_id, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, online_pwn_encyclopedia_id, eurovoc_id, worldcat_identities_id, motto_text, open_data_portal, kbpedia_id, grove_art_online_id, store_norske_leksikon_id, rkd_thesaurus_id, pm20_geo_code, interlingual_index_id, jewish_encyclopedia_id_russian, central_bank, bbc_news_topic_id, economy_of_topic, tasteatlas_id, sapa_id, bhcl_uuid, uk_parliament_thesaurus_id, github_topic, wordnet_31_synset_id, namuwiki_id, demographics_of_topic, joconde_location_id, national_library_of_israel_j9u_id, zhihu_topic_id, idaigazetteer_id, krugosvet_article, schoenberg_database_of_manuscripts_place_id, the_world_factbook_country_id, colon_classification, democracy_index, nese_id, der_spiegel_topic_id, museum_digital_place_id, ysa_id, postimees_topic_id, yle_topic_id, wikisimpsons_id, den_store_danske_id, urban_electric_transit_country_id, hashtag, m49_code, s\u00fcddeutsche_zeitung_topic_id, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, gini_coefficient, official_website, nalt_id, national_library_of_israel_id_old, vat_rate]\n- Table: capital_city, Columns: [label, description, twinned_administrative_body, located_in_the_administrative_territorial_entity, country, instance_of, coat_of_arms_image, commons_category, coordinate_location, page_banner, topics_main_category, freebase_id, musicbrainz_area_id, geonames_id, gnd_id, category_for_people_who_died_here, category_of_associated_people, capital_of, viaf_id, image, official_website, commons_gallery, population, located_in_time_zone, elevation_above_sea_level, area, postal_code, encyclop\u00e6dia_britannica_online_id, great_russian_encyclopedia_online_id, located_in_or_next_to_body_of_water, archinform_location_id, official_name, whos_on_first_id, described_by_source, library_of_congress_authority_id, category_for_maps, nkcr_aut_id, worldcat_identities_id, locator_map_image, factgrid_item_id, national_library_of_israel_j9u_id, store_norske_leksikon_id, online_pwn_encyclopedia_id]\n- Table: part, Columns: [label, description, commons_category, topics_main_category, gnd_id, freebase_id, instance_of, quora_topic_id, coordinate_location, has_parts, viaf_id, locator_map_image, worldcat_identities_id, den_store_danske_id]\n- Table: place_of_birth, Columns: [label, description, official_website, country, instance_of, located_in_the_administrative_territorial_entity, commons_category, image, viaf_id, gnd_id, library_of_congress_authority_id, coordinate_location, topics_main_category, freebase_id, geonames_id, quora_topic_id, nkcr_aut_id, worldcat_identities_id, online_pwn_encyclopedia_id, national_library_of_israel_j9u_id]\n- Table: multilateral_trading_facility, Columns: [label, description, country, instance_of, mic_market_code, official_website]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, coordinate_location, instance_of, image, country, located_in_the_administrative_territorial_entity, drainage_basin, length) VALUES ('Darreh Dam', 'dam in Birjand County, Iranian national heritage site', 'Darreh Dam', '32.81933333333333', 'arch-gravity dam', 'Bande Dare.jpg', 'Iran', 'Baqeran Rural District', 'Dasht-e Lut Basin', 31.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: buttress_dam"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encodes (label, description, subclass_of, uniprot_protein_id, encoded_by, found_in_taxon, has_parts, instance_of, refseq_protein_id, part_of) VALUES ('Transglutaminase domain-containing protein Smed_4480', 'microbial protein found in Sinorhizobium medicae WSM419', 'protein', 'A6UI00', 'transglutaminase domain-containing protein Smed_4480', 'Sinorhizobium medicae WSM419', 'Bacterial transglutaminase-like, N-terminal', 'protein', 'YP_001313213', 'Papain-like cysteine peptidase superfamily');\nDatabase State:\n- Table: natural_product, Columns: [label, description, taxon_name, instance_of, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: encoded_by, Columns: [label, description, subclass_of, found_in_taxon, entrez_gene_id, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: bacterial_transglutaminase_like_n_terminal_domain_protein_family, Columns: [label, description, subclass_of, uniprot_protein_id, encoded_by, found_in_taxon, has_parts, instance_of, refseq_protein_id, part_of]\n- Table: taxon, Columns: [label, description, taxon_rank, parent_taxon, taxon_name, instance_of, ncbi_taxonomy_id, gbif_taxon_id, itis_tsn, gram_staining, irmng_id, lpsn_url, catalogue_of_life_id]",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (index, id, tag) VALUES (50838, 25657, 'funk');\nDatabase State:\n- Table: MusicTracks, Columns: [index, id, tag]\n- Table: torrents, Columns: [groupName, totalSnatched, artist, groupYear, releaseType, groupId, id]",
        "Response": "Table: MusicTracks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO resource_record (label, description, subclass_of, described_by_source, series_ordinal, short_name) VALUES ('RRSIG', 'type of resource record in the Domain Name System (DNS)', 'resource record', 'RFC 4034: Resource Records for the DNS Security Extensions', '46', 'RRSIG');\nDatabase State:\n- Table: DNS_Resource_Records, Columns: [label, description, subclass_of, described_by_source, series_ordinal, short_name]\n- Table: source_of_information, Columns: [label, description, instance_of, rfc_id, title, language_of_work_or_name, publisher, publication_date, doi, author_name_string, number_of_pages, full_work_available_at_url, dblp_publication_id]",
        "Response": "Table: DNS_Resource_Records"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Driver_ID, Name, Party, Home_city, Age) VALUES (12, 'Geoff Luxenberg', 'Dem', 'Manchester', 52);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: driver"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO product (Product_ID, Product_Name, Category, Sub_Category, Region) VALUES ('OFF-BI-10001308', 'GBC Standard Plastic Binding Systems'' Combs', 'Office Supplies', 'Binders', 'East');\nDatabase State:\n- Table: people, Columns: [Customer_ID, Customer_Name, Segment, Country, City, State, Postal_Code, Region]\n- Table: west_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: east_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: south_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]",
        "Response": "Table: product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (address, bioguide, chamber, class, contact_form, district, end, fax, last, middle, name, office, party, party_affiliations, phone, relation, rss_url, start, state, state_rank, title, type, url) VALUES (NULL, 'M000910', NULL, NULL, NULL, 2.0, '1891-03-03', NULL, NULL, NULL, NULL, NULL, 'Republican', NULL, NULL, NULL, NULL, '1889-12-02', 'NH', NULL, NULL, 'rep', NULL);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: historical_terms"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO glycosyltransferase_rgta_b_c_d_like_protein_family (label, description, uniprot_protein_id, refseq_protein_id, found_in_taxon, encoded_by, cell_component, has_parts, instance_of, part_of) VALUES ('Glycosyl transferase family 83 SO_4690', 'microbial protein found in Shewanella oneidensis MR-1', 'Q8E8H4', 'NP_720206', 'Shewanella oneidensis MR-1', 'glycosyl transferase family 83 SO_4690', 'membrane', 'Glycosyltransferase RgtA/B/C/D-like', 'protein', 'membrane proteins');\nDatabase State:\n- Table: taxon, Columns: [label, description, taxon_name, taxon_rank, freebase_id, ncbi_taxonomy_id, parent_taxon, instance_of, gbif_taxon_id, itis_tsn, gram_staining, irmng_id, lpsn_url, microsoft_academic_id]\n- Table: part, Columns: [label, description, instance_of, interpro_id]\n- Table: glycosyltransferase_rgta_b_c_d_like_protein_family, Columns: [label, description, uniprot_protein_id, refseq_protein_id, found_in_taxon, encoded_by, cell_component, has_parts, instance_of, part_of]\n- Table: natural_product, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: glycosyltransferase_rgta_b_c_d_like_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season) VALUES ('SP1', '2017-03-19', 'Ath Madrid', 'Sevilla', 3, 1, 'H', 2017);\nDatabase State:\n- Table: Fixtures, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]",
        "Response": "Table: Fixtures"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, gnd_id, twinned_administrative_body, commons_category, instance_of, country, coat_of_arms_image, flag_image, viaf_id, postal_code, head_of_government, located_in_the_administrative_territorial_entity, coordinate_location, page_banner, topics_main_category, freebase_id, musicbrainz_area_id, dewey_decimal_classification, category_for_people_born_here, category_for_people_who_died_here, geonames_id, local_dialing_code, official_website, category_of_associated_people, described_by_source, elevation_above_sea_level, image, commons_gallery, population, quora_topic_id, area, native_label, official_name, located_in_time_zone, encyclop\u00e6dia_britannica_online_id, archinform_location_id, great_russian_encyclopedia_online_id, nkcr_aut_id, capital_of, gran_enciclop\u00e8dia_catalana_id, whos_on_first_id, category_for_maps, worldcat_identities_id, factgrid_item_id, online_pwn_encyclopedia_id, store_norske_leksikon_id, national_library_of_israel_j9u_id) VALUES ('Lublin', 'capital of Lublin Voivodeship in eastern Poland', '4036418-5', 'Ivano-Frankivsk', 'Lublin', 'city with powiat rights', 'Poland', 'POL Lublin COA 1.svg', 'POL Lublin flag 1.svg', '166279695', '20-001\u201320-999', 'Krzysztof \u017buk', 'Lublin Voivodeship', '51.25', 'Lublin banner.jpg', 'Category:Lublin', '/m/0jw_5', '98466136-d6d9-47ec-88bc-06f0fc226d79', 'nan', 'Category:Births in Lublin', 'Category:Deaths in Lublin', '765876', '81', 'http://lublin.eu', 'Category:People from Lublin', 'Jewish Encyclopedia of Brockhaus and Efron', 163.0, 'Alians PL Lublin z WiezyTrynitarskiej Srodmiescie,2007 03 24,P3240065.jpg', 'Lublin', 334681.0, 'Lublin', 147.5, 'Lublin', 'Lublin', 'Central European Summer Time', 'place/Lublin-Poland', '1406.0', '2161640.0', 'ge134333', 'Lublin Voivodeship', '38640.0', '101752199.0', 'Category:Maps of Lublin', 'lccn-n79089257', 'Q88260', 'nan', 'Lublin', '9.870075553893052e+17');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, iso_3166_2_code, capital, located_in_the_administrative_territorial_entity, country, population, coordinate_location, geonames_id, commons_category, image, locator_map_image, official_website, coat_of_arms_image, topics_main_category, area]\n- Table: centre_of_oblast, Columns: [label, description, coat_of_arms, gnd_id, twinned_administrative_body, instance_of, commons_category, country, flag_image, coat_of_arms_image, postal_code, located_in_time_zone, local_dialing_code, coordinate_location, topics_main_category, page_banner, freebase_id, musicbrainz_area_id, inception, flag, official_website, category_for_people_who_died_here, geonames_id, category_of_associated_people, capital_of, viaf_id, described_by_source, locator_map_image, located_in_the_administrative_territorial_entity, elevation_above_sea_level, area, population, image, official_name, native_label, quora_topic_id, great_russian_encyclopedia_online_id, encyclop\u00e6dia_britannica_online_id, nkcr_aut_id, library_of_congress_authority_id, whos_on_first_id, national_library_of_israel_j9u_id, online_pwn_encyclopedia_id, koatuu_identifier, category_for_people_born_here, internet_encyclopedia_of_ukraine_id, on_focus_list_of_wikimedia_project, facebook_id]\n- Table: capital_city, Columns: [label, description, gnd_id, twinned_administrative_body, commons_category, instance_of, country, coat_of_arms_image, flag_image, viaf_id, postal_code, head_of_government, located_in_the_administrative_territorial_entity, coordinate_location, page_banner, topics_main_category, freebase_id, musicbrainz_area_id, dewey_decimal_classification, category_for_people_born_here, category_for_people_who_died_here, geonames_id, local_dialing_code, official_website, category_of_associated_people, described_by_source, elevation_above_sea_level, image, commons_gallery, population, quora_topic_id, area, native_label, official_name, located_in_time_zone, encyclop\u00e6dia_britannica_online_id, great_russian_encyclopedia_online_id, nkcr_aut_id, capital_of, whos_on_first_id, category_for_maps, worldcat_identities_id, factgrid_item_id, store_norske_leksikon_id, national_library_of_israel_j9u_id]\n- Table: wikimedia_category, Columns: [label, description, instance_of, category_combines_topics, commons_category, category_contains]",
        "Response": "Table: twin_town"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, dewey_decimal_classification, twinned_administrative_body, country, commons_category, instance_of, coat_of_arms_image, image, located_in_time_zone, located_in_the_administrative_territorial_entity, coordinate_location, page_banner, musicbrainz_area_id, topics_main_category, freebase_id, population, geonames_id, shares_border_with, category_of_associated_people, official_website, finnish_municipality_number, legislative_body, official_language, area, yso_id, store_norske_leksikon_id, archinform_location_id, viaf_id, whos_on_first_id, ysa_id) VALUES ('Uusimaa', 'region of Finland', '2--489718', 'nan', 'Finland', 'Uusimaa', 'region of Finland', 'Uusimaa.vaakuna.svg', 'nan', 'Eastern European Time', 'Finland', '60.25', 'Hanko banner 2.jpg', '942bd6e5-e590-4202-b16f-de6335211dd5', 'Category:Uusimaa', '/m/036snv', 1704607.0, '830709.0', 'Kymenlaakso', 'Category:People from Uusimaa', 'http://www.uudenmaanliitto.fi/', 'nan', 'nan', 'nan', 9568.85000000000036, '94465.0', 'Nyland', '16162.0', '143678804.0', '85683067.0', 'Y94465');\nDatabase State:\n- Table: twin_town, Columns: [label, description, locator_map_image, instance_of, located_in_the_administrative_territorial_entity, shares_border_with, country, commons_category, coat_of_arms_image, twinned_administrative_body, located_in_time_zone, topics_main_category, page_banner, official_website, musicbrainz_area_id, freebase_id, category_of_associated_people, image, viaf_id, coordinate_location, population, area, quora_topic_id, geonames_id, inaturalist_place_id]\n- Table: place_of_birth, Columns: [label, description, twinned_administrative_body, located_in_the_administrative_territorial_entity, commons_category, country, postal_code, located_in_time_zone, locator_map_image, topics_main_category, official_website, instance_of, freebase_id, gnd_id, musicbrainz_area_id, dewey_decimal_classification, category_for_people_who_died_here, category_of_associated_people, image, capital_of, elevation_above_sea_level, commons_gallery, viaf_id, facebook_places_id, coordinate_location, library_of_congress_authority_id, described_by_source, population, openstreetmap_relation_id, encyclop\u00e6dia_britannica_online_id, area, head_of_government, quora_topic_id, archinform_location_id, geonames_id, whos_on_first_id, official_name, nkcr_aut_id, worldcat_identities_id, native_label, national_library_of_israel_j9u_id, online_pwn_encyclopedia_id, store_norske_leksikon_id, category_for_maps]\n- Table: wikimedia_category, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: part, Columns: [label, description, quora_topic_id, viaf_id, nkcr_aut_id, topics_main_category, locator_map_image, store_norske_leksikon_id, commons_category, instance_of, has_parts, freebase_id, coordinate_location, worldcat_identities_id]\n- Table: head_of_state, Columns: [label, description, freebase_id, religion_or_worldview, native_language, commons_category, member_of_political_party, instance_of, date_of_birth, place_of_birth, country_of_citizenship, occupation, given_name, position_held, languages_spoken_written_or_signed, viaf_id, library_of_congress_authority_id, idref_id, award_received, image, educated_at, family_name, spouse, gnd_id, name_in_native_language, isni, gran_enciclop\u00e8dia_catalana_id, signature, gtaa_id, residence, treccani_id, radio_radicale_person_id, munzinger_person_id, worldcat_identities_id, fast_id, sex_or_gender, candidacy_in_election, plwabn_id, store_norske_leksikon_id, nese_id, opensanctions_id, genicom_profile_id, topics_main_category, nkcr_aut_id]\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, new_york_times_topic_id, babelnet_id, geonames_id, gnd_id, unicode_character, category_of_associated_people, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, coordinates_of_westernmost_point, geography_of_topic, iso_3166_1_alpha_3_code, office_held_by_head_of_government, isni, quora_topic_id, country, encyclop\u00e6dia_universalis_id, mesh_descriptor_id, guardian_topic_id, basic_form_of_government, musicbrainz_area_id, public_holiday, has_quality, coat_of_arms_image, uic_alphabetical_country_code, number_of_out_of_school_children, continent, insee_countries_and_foreign_territories_code, diplomatic_relation, inception, office_held_by_head_of_state, commons_gallery, legislative_body, iso_3166_1_numeric_code, nuts_code, history_of_topic, stw_thesaurus_for_economics_id, replaces, native_label, subreddit, located_in_or_next_to_body_of_water, capital, official_website, coat_of_arms, demonym, age_of_majority, national_library_of_israel_id_old, openstreetmap_relation_id, on_focus_list_of_wikimedia_project, wipo_st3, coordinates_of_northernmost_point, coordinates_of_easternmost_point, nkcr_aut_id, comic_vine_id, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, executive_body, compulsory_education_minimum_age, marriageable_age, topics_main_category, le_monde_diplomatique_subject_id, head_of_state, category_of_people_buried_here, locator_map_image, bbc_things_id, geoshape, dewey_decimal_classification, area, ituisoiec_object_identifier, head_of_government, ioc_country_code, member_of, fast_id, store_norske_leksikon_id, unemployment_rate, viaf_id, railway_traffic_side, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, category_for_films_shot_at_this_location, mains_voltage, official_name, located_in_time_zone, category_for_people_who_died_here, yso_id, anthem, highest_judicial_authority, life_expectancy, part_of, commons_category, top_level_internet_domain, shares_border_with, instance_of, highest_point, category_for_people_born_here, short_name, driving_side, uic_numerical_country_code, lowest_point, brockhaus_enzyklop\u00e4die_online_id, ipa_transcription, civicus_monitor_country_entry, official_language, pronunciation_audio, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, freebase_id, statoids_id, asc_leiden_thesaurus_id, library_of_congress_authority_id, curlie_id, flag, coordinate_location, fips_10_4_countries_and_regions, dagens_nyheter_topic_id, described_by_source, flag_image, iso_3166_1_alpha_2_code, maintained_by_wikiproject, iab_code, klexikon_article_id, loc_and_marc_vocabularies_id, language_used, whos_on_first_id, dr_topic_id, world_encyclopedia_of_puppetry_arts_id, gran_enciclop\u00e8dia_catalana_id, nese_id, omegawiki_defined_meaning, hds_id, treccani_id, gs1_country_code, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, treccanis_dizionario_di_storia_id, vat_rate, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, basque_vikidia_id, eurovoc_id, worldcat_identities_id, fandom_article_id, nalt_id, motto_text, open_data_portal, kbpedia_id, grove_art_online_id, gynopedia_id, rkd_thesaurus_id, interlingual_index_id, jewish_encyclopedia_id_russian, bbc_news_topic_id, inaturalist_place_id, economy_of_topic, edition_humboldt_digital_id, sapa_id, ysa_id, yle_topic_id, bhcl_uuid, tasteatlas_id, github_topic, uk_parliament_thesaurus_id, namuwiki_id, wordnet_31_synset_id, demographics_of_topic, cna_topic_id, joconde_location_id, zhihu_topic_id, idaigazetteer_id, encyclopedia_of_the_history_of_ukraine_id, armeniapedia_id, schoenberg_database_of_manuscripts_place_id, the_world_factbook_country_id, online_pwn_encyclopedia_id, larousse_id, colon_classification, national_library_of_israel_j9u_id, democracy_index, image_archive_herder_institute, der_spiegel_topic_id, gyldendals_teaterleksikon_id, museum_digital_place_id, wikisimpsons_id, krugosvet_article, den_store_danske_id, urban_electric_transit_country_id, biblioth\u00e8que_nationale_de_france_id, biblioteca_nacional_de_espa\u00f1a_id, hashtag, marine_regions_geographic_id, named_after, postimees_topic_id, m49_code, s\u00fcddeutsche_zeitung_topic_id, idref_id, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, central_bank, gini_coefficient, pm20_geo_code, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, different_from]\n- Table: parish_union, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, official_website, diocese]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId) VALUES (15984, 647, 327, 37, 6, 15, '', 'R', 13, 0.0, '31', '', '', '', '', '', '', 5);\nDatabase State:\n- Table: Formula1Races, Columns: [resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId]\n- Table: qualifying, Columns: [qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3]\n- Table: drivers, Columns: [driverId, driverRef, number, code, forename, surname, dob, nationality, url]\n- Table: pitStops, Columns: [raceId, driverId, stop, lap, time, duration, milliseconds]",
        "Response": "Table: Formula1Races"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (RootBeerID, BrandID, ContainerType, LocationID, PurchaseDate) VALUES (101477, 10006, 'Bottle', 2, '2015-08-21');\nDatabase State:\n- Table: geolocation, Columns: [LocationID, Latitude, Longitude]\n- Table: RootBeerTransactions, Columns: [RootBeerID, BrandID, ContainerType, LocationID, PurchaseDate]",
        "Response": "Table: RootBeerTransactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Answer (AnswerText, SurveyID, UserID, QuestionID) VALUES ('100-500', 2019, 3977, 8);\nDatabase State:\n- Table: Question, Columns: [questiontext, questionid]\n- Table: Survey, Columns: [SurveyID, Description]",
        "Response": "Table: Answer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customer_Events (Customer_Event_ID, customer_id, date_moved_in, property_id, resident_id, thing_id) VALUES (70, 19, '2015-03-27 12:00:00', 605, 10, 1);\nDatabase State:\n- Table: Timed_Locations_of_Things, Columns: [thing_id, Date_and_Time, Location_Code]\n- Table: Properties, Columns: [property_id, property_type_code, property_address, other_details]\n- Table: Organizations, Columns: [organization_id, parent_organization_id, organization_details]\n- Table: Services, Columns: [service_id, organization_id, service_type_code, service_details]\n- Table: Residents_Services, Columns: [resident_id, service_id, date_moved_in, property_id, date_requested, date_provided, other_details]\n- Table: Things, Columns: [thing_id, organization_id, Type_of_Thing_Code, service_type_code, service_details]\n- Table: Customers, Columns: [customer_id, customer_details]\n- Table: Residents, Columns: [resident_id, property_id, date_moved_in, date_moved_out, other_details]",
        "Response": "Table: Customer_Events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, refseq_protein_id, found_in_taxon, encoded_by, cell_component, has_parts, instance_of, part_of) VALUES ('Hypothetical protein CA_C2251', 'microbial protein found in Clostridium acetobutylicum ATCC 824', 'Q97GW4', 'NP_348868', 'Clostridium acetobutylicum ATCC 824', 'hypothetical protein CA_C2251', 'membrane', 'Glycosyltransferase RgtA/B/C/D-like', 'protein', 'membrane proteins');\nDatabase State:\n- Table: taxon, Columns: [label, description, taxon_name, taxon_rank, freebase_id, ncbi_taxonomy_id, parent_taxon, instance_of, gbif_taxon_id, itis_tsn, gram_staining, irmng_id, lpsn_url, microsoft_academic_id]\n- Table: natural_product, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]\n- Table: Protein_Glycosyltransferase, Columns: [label, description, uniprot_protein_id, refseq_protein_id, found_in_taxon, encoded_by, cell_component, has_parts, instance_of, part_of]",
        "Response": "Table: Protein_Glycosyltransferase"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO movie_cast (movie_id, person_id, character_name, gender_id, cast_order) VALUES (10590, 21043, 'Capt. Robert Edwards', 2, 16);\nDatabase State:\n- Table: movie_cast, Columns: [movie_id, person_id, character_name, gender_id, cast_order]\n- Table: gender, Columns: [gender_id, gender]\n- Table: department, Columns: [department_id, department_name]\n- Table: language_role, Columns: [role_id, language_role]\n- Table: keyword, Columns: [keyword_id, keyword_name]\n- Table: movie, Columns: [movie_id, title, budget, homepage, overview, popularity, release_date, revenue, runtime, movie_status, tagline, vote_average, vote_count]\n- Table: country, Columns: [country_id, country_iso_code, country_name]\n- Table: movie_keywords, Columns: [movie_id, keyword_id]\n- Table: person, Columns: [person_id, person_name]\n- Table: movie_crew, Columns: [movie_id, person_id, department_id, job]",
        "Response": "Table: movie_cast"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Staff (staff_id, gender, first_name, last_name, email_address, phone_number) VALUES (116, '0', 'Dagmar', 'Erdman', 'wrau@example.com', '345-656-5571');\nDatabase State:\n- Table: Employees, Columns: [staff_id, gender, first_name, last_name, email_address, phone_number]",
        "Response": "Table: Employees"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, named_after, part_of, instance_of) VALUES ('Valkenburg Member', 'nan', 'Valkenburg', 'Maastricht Formation', 'member');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: maastricht_formation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, subclass_of, instance_of, freebase_id, microsoft_academic_id, uberon_id) VALUES ('tibia', 'long bone of the lower leg', 'long bone', 'bone', '/m/01kf1h', '2777236700.0', '979.0');\nDatabase State:\n- Table: encodes, Columns: [label, description, uniprot_protein_id, encoded_by, ensembl_protein_id, biological_process, cell_component, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: expressed_in, Columns: [label, description, subclass_of, instance_of, freebase_id, microsoft_academic_id, uberon_id]\n- Table: lysyl_oxidase, Columns: [label, description, uniprot_protein_id, encoded_by, ensembl_protein_id, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, ensembl_gene_id, refseq_rna_id, ensembl_transcript_id, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, chromosome, instance_of, expressed_in]",
        "Response": "Table: expressed_in"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO mill (architect_id, id, location, name, type, built_year, notes) VALUES (2, 3, 'Fexhe-le-haut-Clocher', 'Moulin de Fexhe', 'Grondzeiler', 1843, 'Molenechos (Dutch)');\nDatabase State:\n- Table: architect, Columns: [id, name, nationality, gender]",
        "Response": "Table: mill"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Airlines (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY) VALUES ('2018/8/4', 20398, 'N663AR', 3645, 13303, 1330303, 32467, 'MIA', 11042, 1104205, 30647, 'CLE', 1415, 1410, -5, 0, 1656, -14, 0, 0, NULL, 175, 166, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Airports, Columns: [Code, Description]\n- Table: Air_Carriers, Columns: [Code, Description]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO natural_product (label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number) VALUES ('Salinibacter ruber DSM 13855', 'bacterial strain', 'strain', 'Salinibacter ruber DSM 13855', 'Salinibacter ruber', '309807', 'Gram-negative bacteria', 'GCA_000013045.1');\nDatabase State:\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, commons_category, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, image, catalogue_of_life_id, gram_staining, lpsn_url, mesh_descriptor_id, microsoft_academic_id, openalex_id]\n- Table: concentrative_nucleoside_transporter_n_terminal_domain_protein_family, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: Microorganisms, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]",
        "Response": "Table: Microorganisms"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season) VALUES ('E1', '2017-04-14', 'Nott''m Forest', 'Blackburn', 0, 1, 'A', 2017);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO trains (id, direction) VALUES (11, 'west');\nDatabase State:\n- Table: Train_Routes, Columns: [id, direction]\n- Table: cars, Columns: [id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num]",
        "Response": "Table: Train_Routes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cars (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num) VALUES (12, 4, 2, 'ellipse', 'short', 'not_double', 'arc', 2, 'diamond', 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Party_Services (booking_id, customer_id, service_id, service_datetime, booking_made_date) VALUES (3, 4, 7, '2018-03-08 10:39:29', '2018-03-24 11:09:52');\nDatabase State:\n- Table: Organizations, Columns: [organization_id, date_formed, organization_name, uk_vat_number]\n- Table: PartyBookings, Columns: [booking_id, customer_id, service_id, service_datetime, booking_made_date]\n- Table: Parties, Columns: [party_id, payment_method_code, party_phone, party_email]\n- Table: Services, Columns: [service_id, service_type_code, service_name, service_descriptio]\n- Table: Organization_Contact_Individuals, Columns: [individual_id, organization_id, date_contact_from, date_contact_to]\n- Table: Individuals, Columns: [individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name]\n- Table: Party_Forms, Columns: [party_id, form_id, date_completion_started, form_status_code, date_fully_completed]\n- Table: Forms, Columns: [form_id, form_type_code, service_id, form_number, form_name, form_description]",
        "Response": "Table: PartyBookings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1026, 'Pang', 'Eric', 19, 'M', 520, 7134, 'HKG');\nDatabase State:\n- Table: Student_Data, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Student_Data"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO area_code (zip_code, area_code) VALUES (46798, 260);\nDatabase State:\n- Table: area_code, Columns: [zip_code, area_code]\n- Table: zip_data, Columns: [zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, 1st_quarter_payroll, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA]",
        "Response": "Table: area_code"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO recycling_of_bile_acids_and_salts (label, description, cites_work, instance_of, found_in_taxon, reactome_id, part_of, exact_match, has_parts) VALUES ('Bile salts bind FABP6', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-9733973)', 'Insights into the bile acid transportation system: the human ileal lipid-binding protein-cholyltaurine complex and its comparison with homologous structures', 'biological process', 'Homo sapiens', 'R-HSA-9733973', 'Recycling of bile acids and salts', 'https://identifiers.org/reactome:R-HSA-9733973', 'bile salts and acids [cytosol]');\nDatabase State:\n- Table: citation, Columns: [label, description, pubmed_id, instance_of, title, published_in, volume, issue, publication_date, pages, author_name_string, doi, language_of_work_or_name]",
        "Response": "Table: recycling_of_bile_acids_and_salts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update) VALUES (4972, 182, 1, 14953, 6.990000000000000213, '2005-08-22 06:23:54.0', '2006-02-15 22:13:51.0');\nDatabase State:\n- Table: payment, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]",
        "Response": "Table: payment"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO singer (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship) VALUES (3, 'Alice Walton', 1949.0, 26.30000000000000071, 'United States');\nDatabase State:\n- Table: singer, Columns: [Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
        "Response": "Table: singer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO legislature_of_a_us_state (label, description, instance_of, topics_main_category, viaf_id, freebase_id, has_parts, country, applies_to_jurisdiction, official_website, described_by_source, snac_ark_id, headquarters_location) VALUES ('Virginia General Assembly', 'legislative body of Virginia, United States', 'legislature of a U.S. state', 'Category:Virginia General Assembly', '155923339', '/m/027205', 'Senate of Virginia', 'United States of America', 'Virginia', 'http://virginiageneralassembly.gov/', 'Open States', 'w6wh6rpd', 'nan');\nDatabase State:\n- Table: US_State_Legislatures, Columns: [label, description, instance_of, topics_main_category, viaf_id, freebase_id, has_parts, country, applies_to_jurisdiction, official_website, described_by_source, snac_ark_id, headquarters_location]",
        "Response": "Table: US_State_Legislatures"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO war_in_popular_culture (label, description, instance_of, main_subject, subclass_of) VALUES ('Korean War in popular culture', 'Korean War depicted in popular culture', 'cultural depiction', 'Korean War', 'war in popular culture');\nDatabase State:\n- Table: war_in_popular_culture, Columns: [label, description, instance_of, main_subject, subclass_of]",
        "Response": "Table: war_in_popular_culture"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO useracct (u_id) VALUES (4, 'Nancy');\nDatabase State:\n- Table: Users, Columns: [u_id]\n- Table: review, Columns: [a_id]\n- Table: item, Columns: [i_id]",
        "Response": "Table: Users"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO flights (Airline) VALUES (10, 225, ' AIV', ' ANI');\nDatabase State:\n- Table: flights, Columns: [Airline]",
        "Response": "Table: flights"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (GeneID, Localization) VALUES ('G234715', 'nucleus');\nDatabase State:\n- Table: Genes, Columns: [GeneID, Essential, Class, Complex, Phenotype, Motif, Chromosome, Function, Localization]\n- Table: Classification, Columns: [GeneID, Localization]",
        "Response": "Table: Classification"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, encoded_by, biological_process, cell_component, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('50S ribosomal protein L29 KPHS_48600', 'microbial protein found in Klebsiella pneumoniae subsp. pneumoniae HS11286', 'A0A0H3GWL2', '50S ribosomal protein L29 KPHS_48600', 'protein biosynthesis', 'intracellular anatomical structure', 'structural constituent of ribosome', 'Ribosomal protein L29, conserved site', 'Klebsiella pneumoniae subsp. pneumoniae HS11286', 'YP_005229160', 'protein', 'Ribosomal protein L29/L35 superfamily', 'protein');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: RibosomalProteins, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, cell_component, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: RibosomalProteins"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO events (Date_received, Product, Sub_product, Issue, Sub_issue, Consumer_complaint_narrative, Tags, Consumer_consent_provided?, Submitted_via, Date_sent_to_company, Company_response_to_consumer, Timely_response?, Consumer_disputed?, Complaint_ID, Client_ID) VALUES ('2012-10-03', 'Bank account or service', 'Checking account', 'Making/receiving payments, sending money', NULL, NULL, NULL, 'N/A', 'Referral', '2012-10-05', 'Closed with explanation', 'Yes', 'Yes', 'CR0161725', 'C00000823');\nDatabase State:\n- Table: callcenterlogs, Columns: [Date_received, Complaint_ID, rand_client, phonefinal, vru+line, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time]\n- Table: Consumer_Complaints, Columns: [Date_received, Product, Sub_product, Issue, Sub_issue, Consumer_complaint_narrative, Tags, Consumer_consent_provided?, Submitted_via, Date_sent_to_company, Company_response_to_consumer, Timely_response?, Consumer_disputed?, Complaint_ID, Client_ID]",
        "Response": "Table: Consumer_Complaints"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO east_superstore (Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit) VALUES (6235, 'CA-2013-151561', '2015-09-02', '2015-09-08', 'Standard Class', 'PG-18820', 'East', 'OFF-SU-10001574', 10.94999999999999928, 3, 0.0, 3.285000000000000142);\nDatabase State:\n- Table: west_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: south_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: central_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: people, Columns: [Customer_ID, Customer_Name, Segment, Country, City, State, Postal_Code, Region]\n- Table: East_Superstore_Orders, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: product, Columns: [Product_ID, Product_Name, Category, Sub_Category, Region]",
        "Response": "Table: East_Superstore_Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (MovieID, Title, MPAA_Rating, Budget, Gross, Release_Date, Genre, Runtime, Rating, Rating_Count, Summary) VALUES (426, 'Megamind', 'PG', 130000000, 321887208, '2010-10-28', 'Animation', 95, 7.200000000000000177, 212563, 'The supervillain Megamind finally defeats his nemesis, the superhero Metro Man. But without a hero, he loses all purpose and must find new meaning to his life.');\nDatabase State:\n- Table: characters, Columns: [MovieID, ActorID, Character_Name, creditOrder, pay, screentime]\n- Table: actor, Columns: [ActorID, Name, Date_of_Birth, Birth_City, Birth_Country, Height_(Inches), Biography, Gender, Ethnicity, NetWorth]\n- Table: Movies, Columns: [MovieID, Title, MPAA_Rating, Budget, Gross, Release_Date, Genre, Runtime, Rating, Rating_Count, Summary]",
        "Response": "Table: Movies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity) VALUES (4213237, 18, 80, 330, 330);\nDatabase State:\n- Table: Customers, Columns: [CustomerID, FirstName, MiddleInitial, LastName]\n- Table: Employees, Columns: [EmployeeID, FirstName, MiddleInitial, LastName]\n- Table: Sales, Columns: [SalesID, SalesPersonID, CustomerID, ProductID, Quantity]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO mathematical_society (label, description, instance_of, country, official_website) VALUES ('Danish Mathematical Society', 'nan', 'mathematical society', 'Denmark', 'http://mathematics.dk/');\nDatabase State:\n- Table: place_of_birth, Columns: [label, description, instance_of, country, commons_category, gnd_id, viaf_id, coordinate_location, topics_main_category, official_website, freebase_id, geonames_id, population, area, located_in_the_administrative_territorial_entity, elevation_above_sea_level, image, whos_on_first_id]\n- Table: administrative_territorial_entity, Columns: [label, description, population, geonames_id, country, capital, locator_map_image, area, commons_category, instance_of, coordinate_location, official_website, located_in_the_administrative_territorial_entity]\n- Table: head_of_state, Columns: [label, description, sex_or_gender, commons_category, viaf_id, library_of_congress_authority_id, gnd_id, date_of_birth, member_of_political_party, instance_of, place_of_birth, occupation, country_of_citizenship, position_held, given_name, image, languages_spoken_written_or_signed, educated_at, family_name, name_in_native_language, worldcat_identities_id, opensanctions_id]\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, treccani_id, new_york_times_topic_id, babelnet_id, geonames_id, gnd_id, unicode_character, category_of_associated_people, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, geography_of_topic, iso_3166_1_alpha_3_code, official_name, office_held_by_head_of_government, isni, quora_topic_id, nkcr_aut_id, curlie_id, country, mesh_descriptor_id, basic_form_of_government, musicbrainz_area_id, has_quality, coat_of_arms_image, comic_vine_id, iab_code, insee_countries_and_foreign_territories_code, diplomatic_relation, ituisoiec_object_identifier, commons_gallery, legislative_body, inception, viaf_id, civicus_monitor_country_entry, history_of_topic, stw_thesaurus_for_economics_id, official_language, replaces, continent, capital, coat_of_arms, subreddit, demonym, geoshape, openstreetmap_relation_id, wipo_st3, national_library_of_israel_id_old, coordinates_of_northernmost_point, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, marriageable_age, topics_main_category, le_monde_diplomatique_subject_id, head_of_state, biblioth\u00e8que_nationale_de_france_id, category_of_people_buried_here, locator_map_image, bbc_things_id, age_of_majority, dewey_decimal_classification, coordinates_of_easternmost_point, area, head_of_government, ioc_country_code, member_of, fast_id, unemployment_rate, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, located_in_time_zone, category_for_people_who_died_here, yso_id, anthem, office_held_by_head_of_state, life_expectancy, gran_enciclop\u00e8dia_catalana_id, part_of, commons_category, top_level_internet_domain, shares_border_with, instance_of, highest_point, category_for_people_born_here, short_name, driving_side, on_focus_list_of_wikimedia_project, lowest_point, brockhaus_enzyklop\u00e4die_online_id, iso_3166_1_numeric_code, coordinates_of_westernmost_point, idref_id, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, freebase_id, statoids_id, library_of_congress_authority_id, iso_3166_1_alpha_2_code, flag, coordinate_location, fips_10_4_countries_and_regions, language_used, flag_image, uk_parliament_thesaurus_id, klexikon_article_id, loc_and_marc_vocabularies_id, central_bank, native_label, world_encyclopedia_of_puppetry_arts_id, whos_on_first_id, dr_topic_id, official_website, omegawiki_defined_meaning, hds_id, gs1_country_code, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, treccanis_dizionario_di_storia_id, vat_rate, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, pronunciation_audio, eurovoc_id, worldcat_identities_id, motto_text, open_data_portal, kbpedia_id, grove_art_online_id, rkd_thesaurus_id, interlingual_index_id, jewish_encyclopedia_id_russian, inaturalist_place_id, economy_of_topic, tasteatlas_id, bhcl_uuid, github_topic, wordnet_31_synset_id, demographics_of_topic, ysa_id, yle_topic_id, joconde_location_id, zhihu_topic_id, idaigazetteer_id, krugosvet_article, described_by_source, schoenberg_database_of_manuscripts_place_id, different_from, the_world_factbook_country_id, store_norske_leksikon_id, den_store_danske_id, colon_classification, democracy_index, national_library_of_israel_j9u_id, der_spiegel_topic_id, museum_digital_place_id, wikisimpsons_id, urban_electric_transit_country_id, postimees_topic_id, bbc_news_topic_id, m49_code, online_pwn_encyclopedia_id, s\u00fcddeutsche_zeitung_topic_id, hashtag, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, gini_coefficient, pm20_geo_code, openstreetmap_element, happy_planet_index_score, namuwiki_id, railway_traffic_side, number_of_out_of_school_children, obo_gazetteer_id]\n- Table: mathematical_society, Columns: [label, description, instance_of, country, official_website]",
        "Response": "Table: mathematical_society"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Orders (order_id, customer_id, order_status, date_order_placed, order_details) VALUES (14, 10, 'On Road', '2002-09-13 07:38:09', NULL);\nDatabase State:\n- Table: Invoices, Columns: [invoice_number, invoice_date, invoice_details]\n- Table: Shipment_Items, Columns: [shipment_id, order_item_id]\n- Table: Products, Columns: [product_id, product_name, product_details]",
        "Response": "Table: Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO stimuli_sensing_channels (label, description, found_in_taxon, reactome_id, instance_of, cites_work, part_of, has_parts, exact_match) VALUES ('CLCN4/5/6 exchange Cl- for H+', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-2730692)', 'Homo sapiens', 'R-HSA-2730692', 'biological process', 'Identification of an acid-activated Cl(-) channel from human skeletal muscles', 'Stimuli-sensing channels', 'chloride ion', 'https://identifiers.org/reactome:R-HSA-2730692');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: stimuli_sensing_channels"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (RootBeerID, BrandID, ContainerType, LocationID, PurchaseDate) VALUES (104678, 10014, 'Bottle', 2, '2016-03-09');\nDatabase State:\n- Table: RootBeerPurchases, Columns: [RootBeerID, BrandID, ContainerType, LocationID, PurchaseDate]\n- Table: customers, Columns: [CustomerID, First, Last, StreetAddress, City, State, ZipCode, Email, PhoneNumber, FirstPurchaseDate, SubscribedToEmailList, Gender]",
        "Response": "Table: RootBeerPurchases"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO registration (course_id, student_id, grade, sat) VALUES (12, 22, 'A', 5);\nDatabase State:\n- Table: course, Columns: [course_id, name, credit, diff]",
        "Response": "Table: registration"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (District_ID, District_name, Headquartered_City, City_Population, City_Area) VALUES (15, 'Khanewal District', 'Khanewal City', 165038.0, 17.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: district"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details) VALUES (16, 5, 'CV', '2012-04-05 07:11:42', '1980-05-07 12:15:47', '');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Templates"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, person_id, category, role, credited) VALUES ('tt0629420', 'nm0809000', 'Sound Department', 'boom operator', 'true');\nDatabase State:\n- Table: Episode, Columns: [episode_id, series, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Episodes_Credits, Columns: [episode_id, person_id, category, role, credited]",
        "Response": "Table: Episodes_Credits"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('OCA2', 'protein-coding gene in the species Homo sapiens', '4948.0', 'protein-coding gene', 'OCA2 melanosomal transmembrane protein', 'Homo sapiens', 'reverse strand', '28344504', '27754875', 'gene', 'nan');\nDatabase State:\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO gtp_cyclohydrolase_1_type_2_nif3 (label, description, encoded_by, uniprot_protein_id, found_in_taxon, part_of, instance_of, subclass_of, refseq_protein_id) VALUES ('Hypothetical protein smi_0665', 'microbial protein found in Streptococcus mitis B6', 'hypothetical protein smi_0665', 'D3H7S2', 'Streptococcus mitis B6', 'GTP cyclohydrolase 1 type 2/Nif3', 'protein', 'protein', 'YP_003445782');\nDatabase State:\n- Table: gtp_cyclohydrolase_1_type_2_nif3, Columns: [label, description, encoded_by, uniprot_protein_id, found_in_taxon, part_of, instance_of, subclass_of, refseq_protein_id]",
        "Response": "Table: gtp_cyclohydrolase_1_type_2_nif3"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Calendar_Date, Day_Number) VALUES ('1976-06-15 03:40:06', 7);\nDatabase State:\n- Table: Documents_to_be_Destroyed, Columns: [Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details]\n- Table: Ref_Calendar, Columns: [Calendar_Date, Day_Number]",
        "Response": "Table: Ref_Calendar"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, part_of, commons_category, topics_main_category, freebase_id, instance_of, quora_topic_id, coordinate_location, has_parts, nkcr_aut_id, viaf_id, locator_map_image) VALUES ('Western Asia', 'westernmost subregion of the continent of Asia', 'Asia', 'Western Asia', 'Category:Western Asia', '/m/023ptn', 'geographic region', 'Western-Asia', '29.166667', 'Armenia', 'ge199433', 'nan', 'Western Asia (orthographic projection).svg');\nDatabase State:\n- Table: part, Columns: [label, description, part_of, commons_category, topics_main_category, freebase_id, instance_of, quora_topic_id, coordinate_location, has_parts, nkcr_aut_id, viaf_id, locator_map_image]\n- Table: head_of_state, Columns: [label, description, sex_or_gender, commons_category, viaf_id, library_of_congress_authority_id, gnd_id, date_of_birth, member_of_political_party, instance_of, place_of_birth, occupation, country_of_citizenship, position_held, given_name, image, languages_spoken_written_or_signed, educated_at, family_name, name_in_native_language, worldcat_identities_id, opensanctions_id]\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, treccani_id, new_york_times_topic_id, babelnet_id, geonames_id, gnd_id, unicode_character, category_of_associated_people, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, geography_of_topic, iso_3166_1_alpha_3_code, official_name, office_held_by_head_of_government, isni, quora_topic_id, nkcr_aut_id, curlie_id, country, mesh_descriptor_id, basic_form_of_government, musicbrainz_area_id, has_quality, coat_of_arms_image, comic_vine_id, iab_code, insee_countries_and_foreign_territories_code, diplomatic_relation, ituisoiec_object_identifier, commons_gallery, legislative_body, inception, viaf_id, civicus_monitor_country_entry, history_of_topic, stw_thesaurus_for_economics_id, official_language, replaces, continent, capital, coat_of_arms, subreddit, demonym, geoshape, openstreetmap_relation_id, wipo_st3, national_library_of_israel_id_old, coordinates_of_northernmost_point, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, marriageable_age, topics_main_category, le_monde_diplomatique_subject_id, head_of_state, biblioth\u00e8que_nationale_de_france_id, category_of_people_buried_here, locator_map_image, bbc_things_id, age_of_majority, dewey_decimal_classification, coordinates_of_easternmost_point, area, head_of_government, ioc_country_code, member_of, fast_id, unemployment_rate, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, located_in_time_zone, category_for_people_who_died_here, yso_id, anthem, office_held_by_head_of_state, life_expectancy, gran_enciclop\u00e8dia_catalana_id, part_of, commons_category, top_level_internet_domain, shares_border_with, instance_of, highest_point, category_for_people_born_here, short_name, driving_side, on_focus_list_of_wikimedia_project, lowest_point, brockhaus_enzyklop\u00e4die_online_id, iso_3166_1_numeric_code, coordinates_of_westernmost_point, idref_id, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, freebase_id, statoids_id, library_of_congress_authority_id, iso_3166_1_alpha_2_code, flag, coordinate_location, fips_10_4_countries_and_regions, language_used, flag_image, uk_parliament_thesaurus_id, klexikon_article_id, loc_and_marc_vocabularies_id, central_bank, native_label, world_encyclopedia_of_puppetry_arts_id, whos_on_first_id, dr_topic_id, official_website, omegawiki_defined_meaning, hds_id, gs1_country_code, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, treccanis_dizionario_di_storia_id, vat_rate, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, pronunciation_audio, eurovoc_id, worldcat_identities_id, motto_text, open_data_portal, kbpedia_id, grove_art_online_id, rkd_thesaurus_id, interlingual_index_id, jewish_encyclopedia_id_russian, inaturalist_place_id, economy_of_topic, tasteatlas_id, bhcl_uuid, github_topic, wordnet_31_synset_id, demographics_of_topic, ysa_id, yle_topic_id, joconde_location_id, zhihu_topic_id, idaigazetteer_id, krugosvet_article, described_by_source, schoenberg_database_of_manuscripts_place_id, different_from, the_world_factbook_country_id, store_norske_leksikon_id, den_store_danske_id, colon_classification, democracy_index, national_library_of_israel_j9u_id, der_spiegel_topic_id, museum_digital_place_id, wikisimpsons_id, urban_electric_transit_country_id, postimees_topic_id, bbc_news_topic_id, m49_code, online_pwn_encyclopedia_id, s\u00fcddeutsche_zeitung_topic_id, hashtag, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, gini_coefficient, pm20_geo_code, openstreetmap_element, happy_planet_index_score, namuwiki_id, railway_traffic_side, number_of_out_of_school_children, obo_gazetteer_id]\n- Table: administrative_territorial_entity, Columns: [label, description, population, geonames_id, country, capital, locator_map_image, area, commons_category, instance_of, coordinate_location, official_website, located_in_the_administrative_territorial_entity]",
        "Response": "Table: part"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, located_in_the_administrative_territorial_entity, postal_code, follows, followed_by, part_of, coordinate_location, google_knowledge_graph_id) VALUES ('Yamada service area', 'rest area in Asakura, Fukuoka prefecture, Japan', 'rest area', 'Japan', 'Asakura', '838-1306', 'Asakura interchange', 'Haki interchange', 'Oita Expressway', '33.374727777778', '/g/120l7py5');\nDatabase State:\n- Table: follows, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, postal_code, follows, followed_by, part_of, coordinate_location, google_knowledge_graph_id]\n- Table: followed_by, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, postal_code, follows, followed_by, part_of, coordinate_location, google_knowledge_graph_id]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (player_id, college_id, year) VALUES ('nymanje01', 'byu', 1964);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: player_college"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO upf0234_n_terminal (label, description, encoded_by, subclass_of, uniprot_protein_id, found_in_taxon, instance_of, refseq_protein_id, part_of) VALUES ('Nucleotide-binding protein Cj0374', 'microbial protein found in Campylobacter jejuni subsp. jejuni NCTC 11168 = ATCC 700819', 'nucleotide-binding protein Cj0374', 'protein', 'Q9PIC8', 'Campylobacter jejuni subsp. jejuni NCTC 11168 = ATCC 700819', 'protein', 'YP_002343811', 'Protein of unknown function DUF520');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: Proteins, Columns: [label, description, encoded_by, subclass_of, uniprot_protein_id, found_in_taxon, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: Proteins"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, subclass_of, uniprot_protein_id, found_in_taxon, instance_of, refseq_protein_id, part_of) VALUES ('Nucleotide-binding protein YE3147', 'microbial protein found in Yersinia enterocolitica subsp. enterocolitica 8081', 'nucleotide-binding protein YE3147', 'protein', 'A1JNQ7', 'Yersinia enterocolitica subsp. enterocolitica 8081', 'protein', 'YP_001007329', 'Protein of unknown function DUF520');\nDatabase State:\n- Table: Proteins, Columns: [label, description, encoded_by, subclass_of, uniprot_protein_id, found_in_taxon, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: Proteins"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (character, voice_actor, movie) VALUES ('Yzma', 'Eartha Kitt', 'The Emperor''s New Groove');\nDatabase State:\n- Table: Voice_Cast, Columns: [character, voice_actor, movie]",
        "Response": "Table: Voice_Cast"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO airport (Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes) VALUES (5, 'London Luton', 10180734.0, '2.6%', 8853224.0, 1320678.0, 6832.0, 117859.0, 40518.0);\nDatabase State:\n- Table: aircraft, Columns: [Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]\n- Table: match, Columns: [Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]\n- Table: airport_aircraft, Columns: [ID, Airport_ID, Aircraft_ID]\n- Table: pilot, Columns: [Pilot_Id, Name, Age]",
        "Response": "Table: airport"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (date, store_nbr, item_nbr, units) VALUES ('2014-05-24', 24, 89, 0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, brewery_id, abv, ibu, name, style, ounces) VALUES (14, 61, 0.05099999999999999673, 20.0, 'Hell', 'Keller Bier / Zwickel Bier', 16.0);\nDatabase State:\n- Table: beers, Columns: [id, brewery_id, abv, ibu, name, style, ounces]",
        "Response": "Table: beers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customer_Orders (order_id, customer_id, order_date, order_status_code) VALUES (5, 13, '1992-04-19 21:42:58', 'Completed');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Customer_Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO City (ID, Name, CountryCode, District, Population) VALUES (1537, 'Kioto', 'JPN', 'Kyoto', 1461974);\nDatabase State:\n- Table: CountryLanguage, Columns: [CountryCode, Language, IsOfficial, Percentage]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude) VALUES (11312026, 'JB259271', '5/11/2018 10:45', '040XX W WILCOX ST', '486', 'RESIDENCE', 'FALSE', 'TRUE', 1115, 11, 28, 26, '08B', '41.87885796', '-87.7265215');\nDatabase State:\n- Table: Crime, Columns: [report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date) VALUES ('CGS88322F', 'Carine', 'G', 'Schmitt', 13, 64, '1389', '1992-07-07 00:00:00.0');\nDatabase State:\n- Table: employee, Columns: [emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date]\n- Table: roysched, Columns: [title_id, lorange, hirange, royalty]\n- Table: sales, Columns: [stor_id, ord_num, ord_date, qty, payterms, title_id]\n- Table: publishers, Columns: [pub_id, pub_name, city, state, country]\n- Table: pub_info, Columns: [pub_id, logo, pr_info]\n- Table: jobs, Columns: [job_id, job_desc, min_lvl, max_lvl]\n- Table: discounts, Columns: [discounttype, stor_id, lowqty, highqty, discount]\n- Table: titles, Columns: [title_id, title, type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate]\n- Table: stores, Columns: [stor_id, stor_name, stor_address, city, state, zip]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violations (business_id, date, violation_type_id, risk_category, description) VALUES (2131, '2016-06-30', '103154', 'Low Risk', 'Unclean or degraded floors walls or ceilings');\nDatabase State:\n- Table: inspections, Columns: [business_id, score, date, type]\n- Table: businesses, Columns: [business_id, name, address, city, postal_code, latitude, longitude, phone_number, tax_code, business_certificate, application_date, owner_name, owner_address, owner_city, owner_state, owner_zip]\n- Table: violations, Columns: [business_id, date, violation_type_id, risk_category, description]",
        "Response": "Table: violations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, instance_of, country, located_in_the_administrative_territorial_entity, part_of, follows, followed_by, coordinate_location) VALUES ('Torre del Fiume', 'Torre del Fiume di Galatena', 'tower', 'Italy', 'Nard\u00f2', 'Coastal towers in Salento', 'Torre dell''Alto Lido', 'Torre Santa Caterina', '40.125');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, postal_code, local_dialing_code, located_in_time_zone, image, coordinate_location, country, instance_of, freebase_id, geonames_id, elevation_above_sea_level, whos_on_first_id]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO payment (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update) VALUES (3155, 117, 1, 6449, 6.990000000000000213, '2005-07-12 00:48:58.0', '2006-02-15 22:13:08.0');\nDatabase State:\n- Table: rental, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]\n- Table: payment, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: film_text, Columns: [film_id, title, description]\n- Table: film_actor, Columns: [actor_id, film_id, last_update]\n- Table: category, Columns: [category_id, name, last_update]\n- Table: film_category, Columns: [film_id, category_id, last_update]\n- Table: address, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: customer, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: city, Columns: [city_id, city, country_id, last_update]\n- Table: actor, Columns: [actor_id, first_name, last_name, last_update]\n- Table: staff, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]\n- Table: language, Columns: [language_id, name, last_update]\n- Table: film, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]",
        "Response": "Table: payment"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Editor_ID, Journal_ID, Work_Type) VALUES (9, 12, 'Photo');\nDatabase State:\n- Table: journal_committee, Columns: [Editor_ID, Journal_ID, Work_Type]",
        "Response": "Table: journal_committee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO member (Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address) VALUES (9, 'Rizzo, Todd', 'White', 35, 18, 4, 'Waterbury');\nDatabase State:\n- Table: Members, Columns: [Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address]",
        "Response": "Table: Members"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (book_id, author_id) VALUES (1570, 3309);\nDatabase State:\n- Table: address, Columns: [address_id, street_number, street_name, city, country_id]\n- Table: order_history, Columns: [history_id, order_id, status_id, status_date]\n- Table: book_author, Columns: [book_id, author_id]\n- Table: publisher, Columns: [publisher_id, publisher_name]\n- Table: address_status, Columns: [status_id, address_status]\n- Table: customer, Columns: [customer_id, first_name, last_name, email]\n- Table: book, Columns: [book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id]\n- Table: book_language, Columns: [language_id, language_code, language_name]\n- Table: shipping_method, Columns: [method_id, method_name, cost]\n- Table: cust_order, Columns: [order_id, order_date, customer_id, shipping_method_id, dest_address_id]\n- Table: order_line, Columns: [line_id, order_id, book_id, price]\n- Table: order_status, Columns: [status_id, status_value]\n- Table: customer_address, Columns: [customer_id, address_id, status_id]\n- Table: country, Columns: [country_id, country_name]\n- Table: author, Columns: [author_id, author_name]",
        "Response": "Table: book_author"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movie_id, person_id, department_id, job) VALUES (15005, 1130633, 8, 'Makeup Department Head');\nDatabase State:\n- Table: gender, Columns: [gender_id, gender]\n- Table: CrewMembers, Columns: [movie_id, person_id, department_id, job]\n- Table: movie, Columns: [movie_id, title, budget, homepage, overview, popularity, release_date, revenue, runtime, movie_status, tagline, vote_average, vote_count]\n- Table: production_company, Columns: [company_id, company_name]",
        "Response": "Table: CrewMembers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, part_of, sport, country, followed_by, follows) VALUES ('2010 Venezuelan National Road Race Championships', 'nan', 'Venezuelan National Road Race Championships', '2010\u00a0national road cycling championships', 'road bicycle racing', 'Venezuela', '2011 Venezuelan National Road Race Championships', '2009 Venezuelan National Road Race Championships');\nDatabase State:\n- Table: venezuelan_national_road_race_championships, Columns: [label, description, instance_of, part_of, sport, country, followed_by, follows]\n- Table: CyclingEvents, Columns: [label, description, instance_of, part_of, sport, country, followed_by, follows]",
        "Response": "Table: CyclingEvents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, part_of, collection, inception, title, creator, inventory_number, publisher, place_of_publication, published_in, publication_date, location, image, copyright_status, main_subject) VALUES ('Rvtlandia Comitatus (Joan Blaeu, 1667) BL 114.h*.5 (28)', 'British Library copy of map from 1667 Atlas Maior by Joan Blaeu', 'individual copy of a map', 'Blaeu''s Atlas Maior, Vol 5 (England) - BL 114.h*.5', 'British Library', '+1667-00-00T00:00:00Z', 'Rvtlandia Comitatus', 'Joan Blaeu', '114.h*.5 (28)', 'Joan Blaeu', 'Amsterdam', 'Blaeu''s Atlas Maior (1667) BL 114.h*.1-12', '+1667-00-00T00:00:00Z', 'British Library', 'Rvtlandia Comitatus - Atlas Maior, vol 5, map 28 - Joan Blaeu, 1667 - BL 114.h(star).5.(28).jpg', 'public domain', 'Rutland');\nDatabase State:\n- Table: topic, Columns: [label, description, coordinate_location, topics_main_category, commons_category, instance_of, freebase_id, image, geonames_id, country, encyclop\u00e6dia_britannica_online_id, locator_map_image, store_norske_leksikon_id, population, described_by_source, shares_border_with, vision_of_britain_place_id, located_in_the_administrative_territorial_entity]\n- Table: political_border, Columns: [label, description, instance_of, commons_category, country, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, page_banner, freebase_id, openstreetmap_relation_id, nuts_code, category_for_people_who_died_here, curlie_id, contains_the_administrative_territorial_entity, area, locator_map_image, geonames_id, category_of_people_buried_here, image, category_of_associated_people, shares_border_with, population, uk_parliament_thesaurus_id, eu_knowledge_graph_item_id]",
        "Response": "Table: blaeus_atlas_maior_vol_5_england_bl_114h5"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id_restaurant, street_num, street_name, city) VALUES (5732, 574, 'green', 'san francisco');\nDatabase State:\n- Table: generalinfo, Columns: [id_restaurant, label, food_type, city, review]\n- Table: location, Columns: [id_restaurant, street_num, street_name, city]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO followed_by (label, description, instance_of, sport, country, follows, followed_by, point_in_time, edition_number, winner, event_distance) VALUES ('2010 Gent\u2013Wevelgem', 'cycling race', 'Gent\u2013Wevelgem', 'road bicycle racing', 'Belgium', '2009 Gent\u2013Wevelgem', '2011 Gent\u2013Wevelgem', '+2010-03-28T00:00:00Z', '72', 'Bernhard Eisel', 219.0);\nDatabase State:\n- Table: followed_by, Columns: [label, description, instance_of, sport, country, follows, followed_by, point_in_time, edition_number, winner, event_distance]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO sales_in_weather (date, store_nbr, item_nbr, units) VALUES ('2012-03-26', 15, 29, 0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value) VALUES (6, 7, 'PetroChina', 'China', 'Oil and gas', 310.1000000000000227, 20.60000000000000143, 304.6999999999999887, 294.6999999999999887);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: company"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO followed_by (label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, follows, followed_by, competition_class, has_parts) VALUES ('1990 Ontario Badminton Championships', 'badminton championships', 'Ontario Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'Canada', '+1990-00-00T00:00:00Z', '1989 Ontario Badminton Championships', '1991 Ontario Badminton Championships', 'national championship', '1990 Ontario Badminton Championships \u2013 Men''s singles');\nDatabase State:\n- Table: ontario_badminton_championships, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows]\n- Table: Ontario_Badminton_Championships_History, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, follows, followed_by, competition_class, has_parts]",
        "Response": "Table: Ontario_Badminton_Championships_History"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, part_of, event_distance, competition_class, point_in_time, sport, followed_by, location, freebase_id, follows) VALUES ('rowing at the 2006 Asian Games \u2013 women''s coxless four', 'rowing event', 'rowing event', 'rowing at the 2006 Asian Games', 1000.0, 'women''s coxless four', '+2006-00-00T00:00:00Z', 'rowing', 'rowing at the 2010 Asian Games \u2013 women''s coxless four', 'West Bay Lagoon', '/m/0w18dt2', 'rowing at the 2002 Asian Games \u2013 women''s coxless four');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (No) VALUES (183, 'Syrah', 'Montes', 'Paso Robles', 'California', 'Star Angel ', 2007, 35, 87, 3000, 'now');\nDatabase State:\n- Table: appellations, Columns: [No]\n- Table: Wine_List, Columns: [No]",
        "Response": "Table: Wine_List"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, commons_category, country, iso_3166_2_code, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, freebase_id, fips_10_4_countries_and_regions, instance_of, inception, geonames_id, capital, area, population, locator_map_image, getty_thesaurus_of_geographic_names_id, openstreetmap_relation_id, whos_on_first_id, geoshape, inaturalist_place_id, located_in_time_zone) VALUES ('Gracias a Dios Department', 'department of Honduras', 'Gracias a Dios Department', 'Honduras', 'HN-GD', '15.266666666667', 'Honduras', 'Category:Gracias a Dios Department', '/m/02pn2k', 'HO09', 'department of Honduras', '+1957-00-00T00:00:00Z', '3609583', 'Puerto Lempira', 16997.0, 90765.0, 'Gracias a Dios in Honduras.svg', '1000617.0', '3811537', '85671867.0', 'Data:Honduras/Gracias a Dios.map', '13033', 'UTC\u221206:00');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, treccani_id, new_york_times_topic_id, babelnet_id, geonames_id, gnd_id, unicode_character, category_of_associated_people, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, geography_of_topic, iso_3166_1_alpha_3_code, official_name, office_held_by_head_of_government, isni, quora_topic_id, nkcr_aut_id, curlie_id, country, mesh_descriptor_id, basic_form_of_government, musicbrainz_area_id, has_quality, coat_of_arms_image, comic_vine_id, iab_code, insee_countries_and_foreign_territories_code, diplomatic_relation, ituisoiec_object_identifier, commons_gallery, legislative_body, inception, viaf_id, civicus_monitor_country_entry, history_of_topic, stw_thesaurus_for_economics_id, official_language, replaces, continent, capital, coat_of_arms, subreddit, demonym, geoshape, openstreetmap_relation_id, wipo_st3, national_library_of_israel_id_old, coordinates_of_northernmost_point, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, marriageable_age, topics_main_category, le_monde_diplomatique_subject_id, head_of_state, biblioth\u00e8que_nationale_de_france_id, category_of_people_buried_here, locator_map_image, bbc_things_id, age_of_majority, dewey_decimal_classification, coordinates_of_easternmost_point, area, head_of_government, ioc_country_code, member_of, fast_id, unemployment_rate, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, located_in_time_zone, category_for_people_who_died_here, yso_id, anthem, office_held_by_head_of_state, life_expectancy, gran_enciclop\u00e8dia_catalana_id, part_of, commons_category, top_level_internet_domain, shares_border_with, instance_of, highest_point, category_for_people_born_here, short_name, driving_side, on_focus_list_of_wikimedia_project, lowest_point, brockhaus_enzyklop\u00e4die_online_id, iso_3166_1_numeric_code, coordinates_of_westernmost_point, idref_id, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, freebase_id, statoids_id, library_of_congress_authority_id, iso_3166_1_alpha_2_code, flag, coordinate_location, fips_10_4_countries_and_regions, language_used, flag_image, uk_parliament_thesaurus_id, klexikon_article_id, loc_and_marc_vocabularies_id, central_bank, native_label, world_encyclopedia_of_puppetry_arts_id, whos_on_first_id, dr_topic_id, official_website, omegawiki_defined_meaning, hds_id, gs1_country_code, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, treccanis_dizionario_di_storia_id, vat_rate, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, pronunciation_audio, eurovoc_id, worldcat_identities_id, motto_text, open_data_portal, kbpedia_id, grove_art_online_id, rkd_thesaurus_id, interlingual_index_id, jewish_encyclopedia_id_russian, inaturalist_place_id, economy_of_topic, tasteatlas_id, bhcl_uuid, github_topic, wordnet_31_synset_id, demographics_of_topic, ysa_id, yle_topic_id, joconde_location_id, zhihu_topic_id, idaigazetteer_id, krugosvet_article, described_by_source, schoenberg_database_of_manuscripts_place_id, different_from, the_world_factbook_country_id, store_norske_leksikon_id, den_store_danske_id, colon_classification, democracy_index, national_library_of_israel_j9u_id, der_spiegel_topic_id, museum_digital_place_id, wikisimpsons_id, urban_electric_transit_country_id, postimees_topic_id, bbc_news_topic_id, m49_code, online_pwn_encyclopedia_id, s\u00fcddeutsche_zeitung_topic_id, hashtag, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, gini_coefficient, pm20_geo_code, openstreetmap_element, happy_planet_index_score, namuwiki_id, railway_traffic_side, number_of_out_of_school_children, obo_gazetteer_id) VALUES ('Germany', 'country in Central Europe', '2354371', 83149300.0, '7000084', 'Portal:Germany', '47.2700279', 'outline of Germany', '561571', 'euro', 'germania', 'destination/germany', '00026684n', '2921044', '4011882-4', '\ud83c\udde9\ud83c\uddea', 'Category:German people', '112', 'concept904', 'Schuko', 'D', 'geography of Germany', 'DEU', 'Bundesrepublik Deutschland', 'Federal Chancellor of Germany', '0000 0001 2285 4945', 'Germany', 'ge135889', 'Regional/Europe/Germany/', 'Germany', 'D005858', 'federal parliamentary republic', '85752fda-13c4-31a3-bee5-0e5cb1f51dad', 'free country', 'Coat of arms of Germany.svg', '4020-55777', '1300.0', '99109.0', 'Yemen', '2.16.276', 'Deutschland', 'Bundesrat', '+1990-10-03T00:00:00Z', '189116956', 'germany', 'history of Germany', '18012-3', 'German', 'West Germany', 'Europe', 'Berlin', 'coat of arms of Germany', 'deutschland', 'Deutscher', 'Data:Germany.map', '51477', 'DE', '981369.0', '55.0584', '262.0', 1.389999999999999903, '211.0', '10044480.0', 18.0, 'Category:Germany', 'pays/allemagne', 'Frank-Walter Steinmeier', '12205186t', 'Category:Burials in Germany', 'Germany (orthographic projection).svg', '2e3befc0-e70a-41c7-b6cb-2f8f0d69a7db', 18.0, 'nan', '51.27279981', 357587.7700000000186, 'Olaf Scholz', 'GER', 'World Trade Organization', '1210272.0', 5.0, '601.0', '2979', 'place/Germany', '\u00d6tlingen - Panoramaansicht klein banner.jpg', 'Category:Films shot in Germany', 230.0, 'federal level of Germany', 'UTC+01:00', 'Category:Deaths in Germany', '105087', 'Das Lied der Deutschen', 'president of Germany', 80.79999999999999716, '220737.0', 'Western Europe', 'Germany', '.de', 'Czech Republic', 'sovereign state', 'Zugspitze', 'Category:Births in Germany', 'Deutschland', 'right', 'Wikipedia:List of articles all languages should have', 'Neuendorf-Sachsenbande', 'deutschland', '276.0', '51.05110016', '030685435', 'Baden-W\u00fcrttemberg', 'D', '49', '/m/0345h', 'ude', 'n80125931', 'DE', 'flag of Germany', '51.0', 'GM', 'Swabian', 'Flag of Germany.svg', '10438', 'Deutschland', 'countries/gw', 'Deutsche Bundesbank', 'Bundesrepublik Deutschland', 'germany', '85633111', 'tyskland', 'https://verwaltung.bund.de', '7118', '3352.0', '400-440', 'culture of Germany', 'VwiQvi', '3002.0', 'Category:Maps of Germany', 'germania', 19.0, 'Allemagne', 'Germany', 'Alemania', 'De-Deutschland.ogg', '1318', 'lccn-n95056124', 'Einigkeit und Recht und Freiheit', 'GovData', 'Germany', 'nan', '456.0', 'i82954', '11122.0', '7207', 'economy of Germany', 'germany', '2bde846d-48ca-4ac0-880c-91f4fe24c210', 'deutschland', '08784821-n', 'demographics of Germany', 'Y105087', '18-177448', 'T84-600', '19554996.0', '2044274.0', 'strany_mira/GERMANIYA.html', 'Ott\u016fv slovn\u00edk nau\u010dn\u00fd', '66.0', 'Germany', 'nan', 'Tyskland', 'Tyskland', 'SG--55', 8.669999999999999929, '9.870075597787052e+17', 'deutschland', '209.0', '21469.0', '10.0', '1865.0', 'c77jz3md4rdt', '276.0', '4169110', 'Deutschland', 'Deutschland', 'germany', 0.941999999999999949, 'geo/5954BE73-910D-4ABC-96C2-6781831F6043', 'Q22', 31.69999999999999929, 'A10', 'node/1683325355', 52.70000000000000284, '\ub3c5\uc77c', 'right', NULL, '2646.0');\nDatabase State:\n- Table: head_of_state, Columns: [label, description, sex_or_gender, commons_category, viaf_id, library_of_congress_authority_id, gnd_id, date_of_birth, member_of_political_party, instance_of, place_of_birth, occupation, country_of_citizenship, position_held, given_name, image, languages_spoken_written_or_signed, educated_at, family_name, name_in_native_language, worldcat_identities_id, opensanctions_id]\n- Table: administrative_territorial_entity, Columns: [label, description, population, geonames_id, country, capital, locator_map_image, area, commons_category, instance_of, coordinate_location, official_website, located_in_the_administrative_territorial_entity]",
        "Response": "Table: country"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, part_of, sport, country, followed_by, follows) VALUES ('2006 Venezuelan National Road Race Championships', 'nan', 'Venezuelan National Road Race Championships', '2006\u00a0national road cycling championships', 'road bicycle racing', 'Venezuela', '2007 Venezuelan National Road Race Championships', '2005 Venezuelan National Road Race Championships');\nDatabase State:\n- Table: Venezuelan_National_Road_Race, Columns: [label, description, instance_of, part_of, sport, country, followed_by, follows]\n- Table: follows, Columns: [label, description, instance_of, part_of, sport, country, followed_by, follows]",
        "Response": "Table: Venezuelan_National_Road_Race"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO region_sales (region_id, game_platform_id, num_sales) VALUES (4, 11840, 0.2000000000000000111);\nDatabase State:\n- Table: game_platform, Columns: [id, game_publisher_id, platform_id, release_year]\n- Table: platform, Columns: [id, platform_name]\n- Table: genre, Columns: [id, genre_name]\n- Table: publisher, Columns: [id, publisher_name]\n- Table: game, Columns: [id, genre_id, game_name]\n- Table: game_publisher, Columns: [id, game_id, publisher_id]\n- Table: GameRegionSales, Columns: [region_id, game_platform_id, num_sales]",
        "Response": "Table: GameRegionSales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler) VALUES (392190, 6, 6, 2, 2, 3, 3, 46, 52, 109);\nDatabase State:\n- Table: Bowling_Style, Columns: [Bowling_Id, Bowling_skill]\n- Table: Outcome, Columns: [Outcome_Id, Outcome_Type]\n- Table: Player_Match, Columns: [Match_Id, Player_Id, Role_Id, Team_Id]\n- Table: City, Columns: [City_Id, City_Name, Country_id]\n- Table: Venue, Columns: [Venue_Id, Venue_Name, City_Id]\n- Table: Batting_Style, Columns: [Batting_Id, Batting_hand]\n- Table: Win_By, Columns: [Win_Id, Win_Type]\n- Table: Umpire, Columns: [Umpire_Id, Umpire_Name, Umpire_Country]\n- Table: Wicket_Taken, Columns: [Match_Id, Over_Id, Ball_Id, Player_Out, Kind_Out, Fielders, Innings_No]\n- Table: Extra_Runs, Columns: [Match_Id, Over_Id, Ball_Id, Extra_Type_Id, Extra_Runs, Innings_No]\n- Table: Out_Type, Columns: [Out_Id, Out_Name]\n- Table: Ball_by_Ball, Columns: [Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler]",
        "Response": "Table: Ball_by_Ball"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel) VALUES (10.0, 'Blowback', 'November 26, 2007', '3.7', 6.0, '2.4/6', '6.05', 68.0, '719');\nDatabase State:\n- Table: Cartoon, Columns: [id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel]\n- Table: TV_series, Columns: [id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel]\n- Table: TV_Channel, Columns: [id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option]",
        "Response": "Table: TV_series"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (branch_ID, bname, no_of_customers, city, state) VALUES (1, 'morningside', 203, 'New York City', 'New York');\nDatabase State:\n- Table: customer, Columns: [cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state]\n- Table: Branches, Columns: [branch_ID, bname, no_of_customers, city, state]",
        "Response": "Table: Branches"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity) VALUES (2718132, 13, 10560, 324, 829);\nDatabase State:\n- Table: Transactions, Columns: [SalesID, SalesPersonID, CustomerID, ProductID, Quantity]",
        "Response": "Table: Transactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update) VALUES (4947, 181, 2, 13008, 2.990000000000000213, '2006-02-14 15:16:03', '2006-02-15 22:13:50');\nDatabase State:\n- Table: inventory, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: payment, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: actor, Columns: [actor_id, first_name, last_name, last_update]\n- Table: country, Columns: [country_id, country, last_update]",
        "Response": "Table: payment"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO manchester_metrolink_tram_stop (label, description, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, image, historic_county, state_of_use, transport_network, connecting_service, adjacent_station) VALUES ('Piccadilly tram stop', 'nan', 'United Kingdom', '53.477', 'Manchester Metrolink tram stop', 'nan', '3007 at Piccadilly station.jpg', 'Lancashire', 'in use', 'Manchester Metrolink', 'Ashton-under-Lyne to Eccles', 'Piccadilly Gardens tram stop');\nDatabase State:\n- Table: TransportStops, Columns: [label, description, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, image, historic_county, state_of_use, transport_network, connecting_service, adjacent_station]",
        "Response": "Table: TransportStops"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EVENTID, REFID, EVENT_DATE, AMOUNT) VALUES (1977975, 207988, '2007-06-23 12:00:00.0', 19.78699999999999904);\nDatabase State:\n- Table: Transactions, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]",
        "Response": "Table: Transactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (rid, dst_apid) VALUES (13260, 345, 'DS', 1509, 'CTA', 596, 'AZ', NULL);\nDatabase State:\n- Table: airlines, Columns: [alid]\n- Table: airports, Columns: [apid]\n- Table: airlines_routes, Columns: [rid, dst_apid]",
        "Response": "Table: airlines_routes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number) VALUES ('Prochlorococcus marinus subsp. marinus str. CCMP1375', 'nan', 'Prochlorococcus marinus subsp. marinus str. CCMP1375', 'Prochlorococcus marinus marinus', '167539', 'taxon', 'Gram-negative bacteria', 'GCA_000007925.1');\nDatabase State:\n- Table: BacterialStrains, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]\n- Table: glycosyltransferase_rgta_b_c_d_like_protein_family, Columns: [label, description, uniprot_protein_id, refseq_protein_id, found_in_taxon, encoded_by, cell_component, has_parts, instance_of, part_of]\n- Table: taxon, Columns: [label, description, taxon_name, taxon_rank, freebase_id, ncbi_taxonomy_id, parent_taxon, instance_of, gbif_taxon_id, itis_tsn, gram_staining, irmng_id, lpsn_url, microsoft_academic_id]",
        "Response": "Table: BacterialStrains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Documents (document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details) VALUES (25, 'overdue', 'Hard Drive', 'AL', '1985-11-05 17:59:34', '83', 'u');\nDatabase State:\n- Table: Ref_Document_Types, Columns: [document_type_code, document_type_description]\n- Table: Circulation_History, Columns: [document_id, draft_number, copy_number, employee_id]\n- Table: ShippingReceipts, Columns: [document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details]\n- Table: Documents_Mailed, Columns: [document_id, mailed_to_address_id, mailing_date]\n- Table: Ref_Shipping_Agents, Columns: [shipping_agent_code, shipping_agent_name, shipping_agent_description]\n- Table: Ref_Document_Status, Columns: [document_status_code, document_status_description]\n- Table: Roles, Columns: [role_code, role_description]",
        "Response": "Table: ShippingReceipts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO driver (Driver_ID, Name, Party, Home_city, Age) VALUES (4, 'Angel Acre', 'Dem', 'Hartford', 42);\nDatabase State:\n- Table: driver, Columns: [Driver_ID, Name, Party, Home_city, Age]",
        "Response": "Table: driver"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Railway_ID, Manager_ID, From_Year) VALUES (8, 1, '2010');\nDatabase State:\n- Table: railway_managers, Columns: [Railway_ID, Manager_ID, From_Year]\n- Table: train, Columns: [Train_ID, Train_Num, Name, From, Arrival, Railway_ID]\n- Table: railway, Columns: [Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber]",
        "Response": "Table: railway_managers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (staff_id, employer_organisation_id, staff_details) VALUES (8, 5, 'consequatur');\nDatabase State:\n- Table: Organisations, Columns: [organisation_id, organisation_type, organisation_details]\n- Table: Tasks, Columns: [task_id, project_id, task_details, eg_Agree_Objectives]",
        "Response": "Table: Research_Staff"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('peptidase M19 Psyr_4784', 'microbial gene found in Pseudomonas syringae pv. syringae B728a', '3370334', 'gene', 'Peptidase M19 Psyr_4784', 'Pseudomonas syringae pv. syringae B728a', 'reverse strand', '5673623.0', '5672646.0', 'gene', 'Psyr_4784');\nDatabase State:\n- Table: dipeptidase_1, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (title_id, lorange, hirange, royalty) VALUES ('BU7832', 5001, 10000, 12);\nDatabase State:\n- Table: pub_info, Columns: [pub_id, logo, pr_info]\n- Table: authors, Columns: [au_id, au_lname, au_fname, phone, address, city, state, zip, contract]\n- Table: sales, Columns: [stor_id, ord_num, ord_date, qty, payterms, title_id]",
        "Response": "Table: roysched"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (staff_id, staff_gender, staff_name) VALUES (14, '1', 'Adrienne');\nDatabase State:\n- Table: Customer_Addresses, Columns: [customer_id, address_id, date_from, date_to]\n- Table: Supplier_Addresses, Columns: [supplier_id, address_id, date_from, date_to]\n- Table: Product_Suppliers, Columns: [product_id, supplier_id, date_supplied_from, date_supplied_to, total_amount_purchased, total_value_purchased]\n- Table: Suppliers, Columns: [supplier_id, supplier_name, supplier_phone]\n- Table: Products, Columns: [product_id, product_type_code, product_name, product_price]\n- Table: Order_Items, Columns: [order_item_id, order_id, product_id]\n- Table: Employees, Columns: [staff_id, staff_gender, staff_name]\n- Table: Staff_Department_Assignments, Columns: [staff_id, department_id, date_assigned_from, job_title_code, date_assigned_to]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status_code, order_date]\n- Table: Departments, Columns: [department_id, dept_store_id, department_name]\n- Table: Addresses, Columns: [address_id, address_details]\n- Table: Customers, Columns: [customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email]\n- Table: Department_Store_Chain, Columns: [dept_store_chain_id, dept_store_chain_name]",
        "Response": "Table: Employees"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (area_code) VALUES (236, 'VA');\nDatabase State:\n- Table: AreaCodes, Columns: [area_code]",
        "Response": "Table: AreaCodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, refseq_protein_id, found_in_taxon, encoded_by, part_of, instance_of, uniprot_protein_id) VALUES ('hypothetical protein    Rv2079', 'microbial protein found in Mycobacterium tuberculosis H37Rv', 'NP_216595', 'Mycobacterium tuberculosis H37Rv', 'hypothetical protein Rv2079', 'Protein of unknown function DUF1023', 'protein', 'P9WLK7');\nDatabase State:\n- Table: encodes, Columns: [label, description, refseq_protein_id, found_in_taxon, encoded_by, part_of, instance_of, uniprot_protein_id]",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO content (paper_id, word_cited_id) VALUES ('169000', 'word1240');\nDatabase State:\n- Table: Citations, Columns: [paper_id, word_cited_id]\n- Table: paper, Columns: [paper_id, class_label]",
        "Response": "Table: Citations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Market_ID, District, Num_of_employees, Num_of_shops, Ranking) VALUES (6, 'Quebec', 1958, 54.0, 8);\nDatabase State:\n- Table: phone_market, Columns: [Market_ID, Phone_ID, Num_of_stock]\n- Table: market, Columns: [Market_ID, District, Num_of_employees, Num_of_shops, Ranking]",
        "Response": "Table: market"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO players_teams (id, playerID, year, stint, tmID, lgID, GP, GS, minutes, points, oRebounds, dRebounds, rebounds, assists, steals, blocks, turnovers, PF, fgAttempted, fgMade, ftAttempted, ftMade, threeAttempted, threeMade, PostGP, PostGS, PostMinutes, PostPoints, PostoRebounds, PostdRebounds, PostRebounds, PostAssists, PostSteals, PostBlocks, PostTurnovers, PostPF, PostfgAttempted, PostfgMade, PostftAttempted, PostftMade, PostthreeAttempted, PostthreeMade, note) VALUES (13979, 'mckenst01', 1972, 1, 'POR', 'NBA', 7, 0, 107, 40, 0, 0, 21, 8, 0, 0, 0, 15, 36, 13, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL);\nDatabase State:\n- Table: players_teams, Columns: [id, playerID, year, stint, tmID, lgID, GP, GS, minutes, points, oRebounds, dRebounds, rebounds, assists, steals, blocks, turnovers, PF, fgAttempted, fgMade, ftAttempted, ftMade, threeAttempted, threeMade, PostGP, PostGS, PostMinutes, PostPoints, PostoRebounds, PostdRebounds, PostRebounds, PostAssists, PostSteals, PostBlocks, PostTurnovers, PostPF, PostfgAttempted, PostfgMade, PostftAttempted, PostftMade, PostthreeAttempted, PostthreeMade, note]\n- Table: coaches, Columns: [coachID, year, tmID, lgID, stint, won, lost, post_wins, post_losses]\n- Table: players, Columns: [playerID, useFirst, firstName, middleName, lastName, nameGiven, fullGivenName, nameSuffix, nameNick, pos, firstseason, lastseason, height, weight, college, collegeOther, birthDate, birthCity, birthState, birthCountry, highSchool, hsCity, hsState, hsCountry, deathDate, race]\n- Table: player_allstar, Columns: [playerID, last_name, first_name, season_id, conference, league_id, games_played, minutes, points, o_rebounds, d_rebounds, rebounds, assists, steals, blocks, turnovers, personal_fouls, fg_attempted, fg_made, ft_attempted, ft_made, three_attempted, three_made]\n- Table: draft, Columns: [id, draftYear, draftRound, draftSelection, draftOverall, tmID, firstName, lastName, suffixName, playerID, draftFrom, lgID]",
        "Response": "Table: players_teams"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (inspection_id, point_id, fine, inspector_comment) VALUES (1401971, 33, 100, 'ALL EQUIPMENT THRU-OUT NEEDS DETAILED CLEANING FREE OF DEBRIS/GREASE ACCUMULATION: INCLUDING INTERIOR BOTTOM OF FRYERS, ALL STORAGE SHELVES, INTERIOR BOTTOM OF STOVE, INTERIOR OF ALL FREEZERS/COOLERS IN REAR COOKING AREA.');\nDatabase State:\n- Table: employee, Columns: [employee_id, first_name, last_name, address, city, state, zip, phone, title, salary, supervisor]\n- Table: inspection_point, Columns: [point_id, Description, category, code, fine, point_level]\n- Table: violation, Columns: [inspection_id, point_id, fine, inspector_comment]",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude) VALUES (11349556, 'JB308937', '6/16/2018 2:18', '062XX S SEELEY AVE', '460', 'STREET', 'FALSE', 'FALSE', 714, 7, 15, 67, '08B', '41.78040148', '-87.67514212');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (staff_id, staff_first_name, staff_last_name, other_staff_details) VALUES (9, 'Junius', 'Treutel', 'j');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Staff"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Campus) VALUES (16, 17, 2004, 252, 60);\nDatabase State:\n- Table: enrollments, Columns: [Campus]\n- Table: faculty, Columns: [Campus]\n- Table: csu_fees, Columns: [Campus]\n- Table: discipline_enrollments, Columns: [Campus]",
        "Response": "Table: discipline_enrollments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO citation (label, description, pubmed_id, instance_of, title, published_in, volume, issue, publication_date, pages, author_name_string, doi, language_of_work_or_name) VALUES ('Subcellular organization of bile acid amidation in human liver: a key issue in regulating the biosynthesis of bile salts', 'scientific journal article', '10884298', 'scholarly article', 'Subcellular organization of bile acid amidation in human liver: a key issue in regulating the biosynthesis of bile salts', 'Journal of Lipid Research', '41', '7', '+2000-07-01T00:00:00Z', '1154-1162', 'Solaas K', 'nan', 'nan');\nDatabase State:\n- Table: Publications, Columns: [label, description, pubmed_id, instance_of, title, published_in, volume, issue, publication_date, pages, author_name_string, doi, language_of_work_or_name]",
        "Response": "Table: Publications"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (paper_id, word_cited_id) VALUES ('bryson01modularity', 'word976');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: content"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost) VALUES ('SO - 0007674', 'Distributor', 'WARE-XYS1001', '6/18/20', '11/11/20', '11/20/20', '11/29/20', 'USD', 21, 28, 41, 27, 6, 0.07499999999999999723, '1,728.60', '1,382.88');\nDatabase State:\n- Table: Products, Columns: [ProductID, Product_Name]\n- Table: Sales_Orders, Columns: [OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost]\n- Table: Store_Locations, Columns: [StoreID, City_Name, County, StateCode, State, Type, Latitude, Longitude, AreaCode, Population, Household_Income, Median_Income, Land_Area, Water_Area, Time_Zone]\n- Table: Customers, Columns: [CustomerID, Customer_Names]",
        "Response": "Table: Sales_Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('S-adenosyl-methyltransferase MraW TDE1198', 'microbial gene found in Treponema denticola ATCC 35405', '2741159.0', 'gene', 'S-adenosyl-methyltransferase MraW TDE1198', 'Treponema denticola ATCC 35405', 'forward strand', '1231478', '1230531', 'gene', 'TDE1198');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: s_adenosyl_l_methionine_dependent_methyltransferase_mraw_recognition_domain_superfamily, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of, cell_component]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tags (index, id, tag) VALUES (52739, 26553, '2000s');\nDatabase State:\n- Table: tags, Columns: [index, id, tag]\n- Table: torrents, Columns: [groupName, totalSnatched, artist, groupYear, releaseType, groupId, id]",
        "Response": "Table: tags"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id) VALUES (11, 'M2-F1 #70', 'October 8, 1965', 'Thompson', 240.0, 3650.0, 4, 5);\nDatabase State:\n- Table: operate_company, Columns: [id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding]",
        "Response": "Table: flight"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details) VALUES (192, 'PP', 134, '2013-01-26 15:15:25', 'Book on USA files', NULL, NULL);\nDatabase State:\n- Table: Ref_Budget_Codes, Columns: [Budget_Type_Code, Budget_Type_Description]\n- Table: Ref_Document_Types, Columns: [Document_Type_Code, Document_Type_Name, Document_Type_Description]\n- Table: Documents, Columns: [Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details]\n- Table: Documents_with_Expenses, Columns: [Document_ID, Budget_Type_Code, Document_Details]\n- Table: Statements, Columns: [Statement_ID, Statement_Details]\n- Table: Accounts, Columns: [Account_ID, Statement_ID, Account_Details]",
        "Response": "Table: Documents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, commons_category, located_in_the_administrative_territorial_entity, lau, instance_of, freebase_id, country, coat_of_arms_image, shares_border_with, population, image, geonames_id, coordinate_location, topics_main_category, postal_code, official_website, elevation_above_sea_level, time_of_earliest_written_record, email_address, nkcr_aut_id, openstreetmap_relation_id, area, licence_plate_code, czech_registration_id, historical_region, whos_on_first_id, geoshape, mapycz_id, isds_id, czech_municipality_id, number_of_houses, mean_age, flag_image) VALUES ('Mn\u00ed\u0161ek', 'village in Liberec District of Liberec Region', 'Mn\u00ed\u0161ek (Liberec District)', 'Liberec District', 'CZ564231', 'municipality of the Czech Republic', 'nan', 'Czech Republic', 'Znakmnisek.png', 'Bed\u0159ichov', 1694.0, 'Mn\u00ed\u0161ek, kostel svat\u00e9ho Mikul\u00e1\u0161e.jpg', '3070447.0', '50.831690050608', 'Category:Mn\u00ed\u0161ek', '463\u00a031', 'http://www.obec-mnisek.cz', 375.0, '+1381-01-01T00:00:00Z', 'mailto:mnisek.obec@volny.cz', 'ge325784', '438983.0', 25.44069800000000114, 'LB', '263001.0', 'Bohemia', '101825639.0', 'Data:Map of Mn\u00ed\u0161ek, Liberec District.map', 'muni&id=1845', 'prjbpvy', '564231.0', 515.0, 38.89999999999999858, 'Vlajkamnisek.gif');\nDatabase State:\n- Table: political_border, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, lau, instance_of, freebase_id, coat_of_arms_image, flag_image, shares_border_with, population, topics_main_category, official_website, elevation_above_sea_level, postal_code, geonames_id, time_of_earliest_written_record, email_address, openstreetmap_relation_id, image, czech_registration_id, area, licence_plate_code, coordinate_location, nkcr_aut_id, historical_region, whos_on_first_id, geoshape, mapycz_id, isds_id, czech_municipality_id, number_of_houses, mean_age]\n- Table: jizera_mountains, Columns: [label, description, instance_of, country, coordinate_location, elevation_above_sea_level, image, located_in_the_administrative_territorial_entity, mountain_range, google_knowledge_graph_id, part_of]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Wrestler_ID, Name, Reign, Days_held, Location, Event) VALUES (4, 'Gran Hamada', '1', '960', 'Tokyo , Japan', 'Live event');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: wrestler"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, date, violation_type_id, risk_category, description) VALUES (84387, '2015-08-18', '103149', 'Low Risk', 'Wiping cloths not clean or properly stored or inadequate sanitizer');\nDatabase State:\n- Table: BusinessViolations, Columns: [business_id, date, violation_type_id, risk_category, description]",
        "Response": "Table: BusinessViolations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO city (city_id, city_name, state, population, area) VALUES (561, 'North Charleston', 'South Carolina', 79641, 58.5);\nDatabase State:\n- Table: Cities, Columns: [city_id, city_name, state, population, area]\n- Table: customer, Columns: [cust_id, cust_name, annual_revenue, cust_type, address, city, state, zip, phone]",
        "Response": "Table: Cities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, instance_of) VALUES ('J. C. Penney', 'American department store chain', 'United States of America', 'department store chain');\nDatabase State:\n- Table: given_name, Columns: [label, description, instance_of, native_label, soundex, cologne_phonetics, caverphone, writing_system, language_of_work_or_name, said_to_be_the_same_as, different_from, commons_category]\n- Table: head_of_state, Columns: [label, description, commons_category, viaf_id, isni, library_of_congress_authority_id, gnd_id, country_of_citizenship, image, place_of_birth, date_of_birth, occupation, position_held, educated_at, instance_of, freebase_id, munzinger_person_id, languages_spoken_written_or_signed, given_name, fast_id, award_received, signature, spouse, name_in_native_language, encyclop\u00e6dia_britannica_online_id, religion_or_worldview, sex_or_gender, topics_main_category, worldcat_identities_id, store_norske_leksikon_id, child]",
        "Response": "Table: department_store_chain"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, ParagraphNum, PlainText, character_id, chapter_id) VALUES (655508, 3039, 'Your honour is most welcome.', 311, 19255);\nDatabase State:\n- Table: paragraphs, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]\n- Table: characters, Columns: [id, CharName, Abbrev, Description]\n- Table: works, Columns: [id, Title, LongTitle, Date, GenreType]",
        "Response": "Table: paragraphs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO content (paper_id, word_cited_id) VALUES ('plaisant99design', 'word2757');\nDatabase State:\n- Table: paper, Columns: [paper_id, class_label]\n- Table: cites, Columns: [cited_paper_id, citing_paper_id]",
        "Response": "Table: content"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('biotin synthesis protein BN112_1138', 'microbial gene found in Bordetella bronchiseptica 253', 'Bordetella bronchiseptica 253', '13978196', 'gene', 'BN112_1138', 'Biotin synthesis protein BN112_1138', 'gene', '1219047', 'forward strand', '1217611');\nDatabase State:\n- Table: dethiobiotin_synthase_biod, Columns: [label, description, uniprot_protein_id, found_in_taxon, encoded_by, subclass_of, cell_component, molecular_function, biological_process, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID) VALUES (176, 'Jonathon', 'Taylor', 'JTAYLOR', '011.44.1644.429265', '1987-09-01', 'SA_REP', 8600, 0.2000000000000000111, 149, 80);\nDatabase State:\n- Table: regions, Columns: [REGION_ID, REGION_NAME]\n- Table: departments, Columns: [DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]\n- Table: countries, Columns: [COUNTRY_ID, COUNTRY_NAME, REGION_ID]",
        "Response": "Table: employees"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO matchs (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season) VALUES ('I1', '2021-01-09', 'Benevento', 'Atalanta', 1, 4, 'A', 2021);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, category, person, role, credited) VALUES ('S20-E6', 'Produced by', 'Ron Hauge', 'co-executive producer', 'true');\nDatabase State:\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, person, role, episode_id, season, song, result]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Detention (detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details) VALUES (5, 'BREAK ', 3, '2017-08-25 12:00:46', '2018-03-11 13:21:07', NULL, NULL);\nDatabase State:\n- Table: Assessment_Notes, Columns: [notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details]\n- Table: Addresses, Columns: [address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details]\n- Table: Detention, Columns: [detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details]\n- Table: Ref_Incident_Type, Columns: [incident_type_code, incident_type_description]\n- Table: Teachers, Columns: [teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details]\n- Table: Students_in_Detention, Columns: [student_id, detention_id, incident_id]\n- Table: Ref_Address_Types, Columns: [address_type_code, address_type_description]\n- Table: Student_Addresses, Columns: [student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details]\n- Table: Behavior_Incident, Columns: [incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details]\n- Table: Ref_Detention_Type, Columns: [detention_type_code, detention_type_description]",
        "Response": "Table: Detention"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO game (id, genre_id, game_name) VALUES (5119, 12, 'LEGO Rock Raiders');\nDatabase State:\n- Table: game_platform, Columns: [id, game_publisher_id, platform_id, release_year]\n- Table: region, Columns: [id, region_name]\n- Table: game_publisher, Columns: [id, game_id, publisher_id]\n- Table: region_sales, Columns: [region_id, game_platform_id, num_sales]\n- Table: Games, Columns: [id, genre_id, game_name]\n- Table: publisher, Columns: [id, publisher_name]\n- Table: platform, Columns: [id, platform_name]\n- Table: genre, Columns: [id, genre_name]",
        "Response": "Table: Games"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update) VALUES (6924, 257, 2, 4462, 6.990000000000000213, '2005-07-08 00:02:49.0', '2006-02-15 22:14:55.0');\nDatabase State:\n- Table: film_category, Columns: [film_id, category_id, last_update]\n- Table: RentalsPayments, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: staff, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]\n- Table: film_actor, Columns: [actor_id, film_id, last_update]\n- Table: address, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: country, Columns: [country_id, country, last_update]\n- Table: rental, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]\n- Table: language, Columns: [language_id, name, last_update]\n- Table: customer, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: category, Columns: [category_id, name, last_update]\n- Table: store, Columns: [store_id, manager_staff_id, address_id, last_update]\n- Table: inventory, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: film, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]\n- Table: city, Columns: [city_id, city, country_id, last_update]\n- Table: actor, Columns: [actor_id, first_name, last_name, last_update]",
        "Response": "Table: RentalsPayments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('nucleoside permease KPHS_38160', 'microbial gene found in Klebsiella pneumoniae subsp. pneumoniae HS11286', '11848849', 'gene', 'Nucleoside permease KPHS_38160', 'Klebsiella pneumoniae subsp. pneumoniae HS11286', 'forward strand', '3851236.0', '3850034.0', 'gene', 'KPHS_38160');\nDatabase State:\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: concentrative_nucleoside_transporter_n_terminal_domain_protein_family, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO followed_by (label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, follows, followed_by, competition_class, has_parts) VALUES ('2021/2022 Swedish Junior Badminton Championships U19', 'badminton championships', 'Swedish Junior Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'Sweden', '+2022-00-00T00:00:00Z', '2020/2021 Swedish Junior Badminton Championships U19', '2022/2023 Swedish Junior Badminton Championships U19', 'national championship', '2021/2022 Swedish Junior Badminton Championships U19 \u2013 Men''s singles');\nDatabase State:\n- Table: follows, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows]\n- Table: swedish_junior_badminton_championships, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross) VALUES ('Swing Vote', 'Aug 1, 2008', 'Comedy', 'PG-13', '$16,289,867', '$19,125,841');\nDatabase State:\n- Table: revenue, Columns: [Year, Studio_Entertainment[NI_1], Disney_Consumer_Products[NI_2], Disney_Interactive[NI_3][Rev_1], Walt_Disney_Parks_and_Resorts, Disney_Media_Networks, Total]\n- Table: movies_total_gross, Columns: [movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross]\n- Table: director, Columns: [name, director]\n- Table: characters, Columns: [movie_title, release_date, hero, villian, song]\n- Table: voice_actors, Columns: [character, voice_actor, movie]",
        "Response": "Table: movies_total_gross"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number) VALUES ('Thermotoga maritima MSB8', 'bacterial strain', 'strain', 'Thermotoga maritima MSB8', 'Thermotoga maritima', '243274', 'Gram-negative bacteria', 'GCA_000978555.1');\nDatabase State:\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, instance_of, genomic_start, genomic_end, ncbi_locus_tag]\n- Table: glucose_6_phosphate_dehydrogenase_c_terminal_domain_protein_family, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: natural_product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Staff (Staff_ID, Tourist_Attraction_ID, Name, Other_Details) VALUES (860, 6476, 'Trinity', NULL);\nDatabase State:\n- Table: Street_Markets, Columns: [Market_ID, Market_Details]\n- Table: Hotels, Columns: [hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details]\n- Table: Locations, Columns: [Location_ID, Location_Name, Address, Other_Details]\n- Table: Features, Columns: [Feature_ID, Feature_Details]\n- Table: Ref_Hotel_Star_Ratings, Columns: [star_rating_code, star_rating_description]\n- Table: Theme_Parks, Columns: [Theme_Park_ID, Theme_Park_Details]\n- Table: Ref_Attraction_Types, Columns: [Attraction_Type_Code, Attraction_Type_Description]\n- Table: Royal_Family, Columns: [Royal_Family_ID, Royal_Family_Details]\n- Table: Tourist_Attractions, Columns: [Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details]\n- Table: Visits, Columns: [Visit_ID, Tourist_Attraction_ID, Tourist_ID, Visit_Date, Visit_Details]\n- Table: Photos, Columns: [Photo_ID, Tourist_Attraction_ID, Name, Description, Filename, Other_Details]\n- Table: Tourist_Attraction_Features, Columns: [Tourist_Attraction_ID, Feature_ID]\n- Table: Visitors, Columns: [Tourist_ID, Tourist_Details]",
        "Response": "Table: Staff"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO project (Pname, Pnumber, Plocation, Dnum) VALUES ('ProductX', 1, 'Bellaire', 5);\nDatabase State:\n- Table: department, Columns: [Dname, Dnumber, Mgr_ssn, Mgr_start_date]\n- Table: dependent, Columns: [Essn, Dependent_name, Sex, Bdate, Relationship]\n- Table: works_on, Columns: [Essn, Pno, Hours]\n- Table: dept_locations, Columns: [Dnumber, Dlocation]\n- Table: employee, Columns: [Fname, Minit, Lname, Ssn, Bdate, Address, Sex, Salary, Super_ssn]",
        "Response": "Table: project"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic) VALUES (13, 4, 'Caguas', 76.09999999999999431, 11.0, 0.5999999999999999778, 0.2000000000000000111, 12.09999999999999965, 99.0999999999999944);\nDatabase State:\n- Table: county_public_safety, Columns: [County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location]\n- Table: Demographics, Columns: [City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic]",
        "Response": "Table: Demographics"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Date_received, Product, Sub_product, Issue, Sub_issue, Consumer_complaint_narrative, Tags, Consumer_consent_provided?, Submitted_via, Date_sent_to_company, Company_response_to_consumer, Timely_response?, Consumer_disputed?, Complaint_ID, Client_ID) VALUES ('2013-06-10', 'Bank account or service', 'Checking account', 'Deposits and withdrawals', NULL, NULL, NULL, 'N/A', 'Fax', '2013-06-12', 'Closed with monetary relief', 'Yes', 'No', 'CR0428430', 'C00012221');\nDatabase State:\n- Table: client, Columns: [client_id, sex, day, month, year, age, social, first, middle, last, phone, email, address_1, address_2, city, state, zipcode, district_id]\n- Table: callcenterlogs, Columns: [Date_received, Complaint_ID, rand_client, phonefinal, vru+line, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time]",
        "Response": "Table: events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, twinned_administrative_body, commons_category, image, flag_image, coat_of_arms_image, country, topics_main_category, lau, instance_of, freebase_id, population, category_for_people_born_here, geonames_id, shares_border_with, gnd_id, category_for_people_who_died_here, coordinate_location, category_of_associated_people, viaf_id, capital_of, postal_code, official_website, described_by_source, head_of_government, elevation_above_sea_level, contains_the_administrative_territorial_entity, time_of_earliest_written_record, email_address, openstreetmap_relation_id, official_name, czech_registration_id, archinform_location_id, area, licence_plate_code, nkcr_aut_id, image_archive_herder_institute, library_of_congress_authority_id, historical_region, whos_on_first_id, category_for_maps, located_in_the_administrative_territorial_entity, geoshape, mapycz_id, category_for_the_view_of_the_item, bhcl_uuid, isds_id, czech_municipality_id, native_label, number_of_houses, mean_age, national_library_of_israel_j9u_id) VALUES ('Krom\u011b\u0159\u00ed\u017e', 'town in Czech Republic', 'Krems an der Donau', 'Krom\u011b\u0159\u00ed\u017e', 'N\u00e1m\u011bst\u00ed Krom\u011b\u0159\u00ed\u017e.JPG', 'Flag of Kromeriz.svg', 'CZE Krom\u011b\u0159\u00ed\u017e COA.svg', 'Czech Republic', 'Category:Krom\u011b\u0159\u00ed\u017e', 'CZ588296', 'municipality of the Czech Republic', '/m/05v7w3', 27838.0, 'Category:Births in Krom\u011b\u0159\u00ed\u017e', '3072649.0', 'Ba\u0159ice-Velk\u00e9 T\u011b\u0161any', '4110390-7', 'Category:Deaths in Krom\u011b\u0159\u00ed\u017e', '49.297859972783', 'Category:People from Krom\u011b\u0159\u00ed\u017e', '123170580', 'Krom\u011b\u0159\u00ed\u017e District', 'nan', 'http://www.mesto-kromeriz.cz/', 'Svensk uppslagsbok', 'Jaroslav N\u011bmec', 201.0, 'B\u00edlany', '+1110-01-17T00:00:00Z', 'mailto:meu@mesto-kromeriz.cz', '437751.0', 'M\u011bsto Krom\u011b\u0159\u00ed\u017e', '287351.0', '4956.0', 50.97522500000000178, 'Z', 'ge129682', 'Q158239', 'n81146784', 'Moravia', '101831961.0', 'Category:Maps of Krom\u011b\u0159\u00ed\u017e', 'Krom\u011b\u0159\u00ed\u017e District', 'Data:Map of Krom\u011b\u0159\u00ed\u017e, Krom\u011b\u0159\u00ed\u017e District.map', 'muni&id=3117', 'Category:Views of Krom\u011b\u0159\u00ed\u017e', '0f012c0a-f3ba-46aa-a00e-269a134f6a26', 'bg2bfur', '588296.0', 'Krom\u011b\u0159\u00ed\u017e', 5337.0, 44.60000000000000142, '9.870075666982052e+17');\nDatabase State:\n- Table: headquarters, Columns: [label, description, twinned_administrative_body, commons_category, image, flag_image, coat_of_arms_image, country, topics_main_category, lau, instance_of, freebase_id, population, category_for_people_born_here, geonames_id, shares_border_with, gnd_id, category_for_people_who_died_here, coordinate_location, category_of_associated_people, viaf_id, capital_of, postal_code, official_website, described_by_source, head_of_government, elevation_above_sea_level, contains_the_administrative_territorial_entity, time_of_earliest_written_record, email_address, openstreetmap_relation_id, official_name, czech_registration_id, archinform_location_id, area, licence_plate_code, nkcr_aut_id, image_archive_herder_institute, library_of_congress_authority_id, historical_region, whos_on_first_id, category_for_maps, located_in_the_administrative_territorial_entity, geoshape, mapycz_id, category_for_the_view_of_the_item, bhcl_uuid, isds_id, czech_municipality_id, native_label, number_of_houses, mean_age, national_library_of_israel_j9u_id]",
        "Response": "Table: headquarters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('S-adenosyl-methyltransferase MraW Psyr_4110', 'microbial gene found in Pseudomonas syringae pv. syringae B728a', '3369646.0', 'gene', 'S-adenosyl-methyltransferase MraW Psyr_4110', 'Pseudomonas syringae pv. syringae B728a', 'reverse strand', '4901418', '4900477', 'gene', 'Psyr_4110');\nDatabase State:\n- Table: s_adenosyl_l_methionine_dependent_methyltransferase_mraw_recognition_domain_superfamily, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of, cell_component]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length) VALUES (10587, 29153, 5, 'Low', 'Low', 'Low', 'Medium');\nDatabase State:\n- Table: Business_Attributes, Columns: [attribute_id, business_id, attribute_value]\n- Table: Days, Columns: [day_id, day_of_week]\n- Table: Checkins, Columns: [business_id, day_id, label_time_0, label_time_1, label_time_2, label_time_3, label_time_4, label_time_5, label_time_6, label_time_7, label_time_8, label_time_9, label_time_10, label_time_11, label_time_12, label_time_13, label_time_14, label_time_15, label_time_16, label_time_17, label_time_18, label_time_19, label_time_20, label_time_21, label_time_22, label_time_23]\n- Table: Attributes, Columns: [attribute_id, attribute_name]\n- Table: Elite, Columns: [user_id, year_id]\n- Table: Reviews, Columns: [business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length]\n- Table: Years, Columns: [year_id, actual_year]\n- Table: Users_Compliments, Columns: [compliment_id, user_id, number_of_compliments]\n- Table: Business_Hours, Columns: [business_id, day_id, opening_time, closing_time]\n- Table: Users, Columns: [user_id, user_yelping_since_year, user_average_stars, user_votes_funny, user_votes_useful, user_votes_cool, user_review_count, user_fans]\n- Table: Business, Columns: [business_id, active, city, state, stars, review_count]\n- Table: Business_Categories, Columns: [business_id, category_id]\n- Table: Tips, Columns: [business_id, user_id, likes, tip_length]",
        "Response": "Table: Reviews"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO mountain (Mountain_ID, Name, Height, Prominence, Range, Country) VALUES (2, 'Mount Kenya (Batian)', 5199.0, 3825.0, 'Mount Kenya', 'Kenya');\nDatabase State:\n- Table: mountain, Columns: [Mountain_ID, Name, Height, Prominence, Range, Country]\n- Table: climber, Columns: [Climber_ID, Name, Country, Time, Points, Mountain_ID]",
        "Response": "Table: mountain"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO market (Market_ID, District, Num_of_employees, Num_of_shops, Ranking) VALUES (4, 'Nova Scotia', 1968, 32.0, 5);\nDatabase State:\n- Table: phone, Columns: [Name, Phone_ID, Memory_in_G, Carrier, Price]\n- Table: market, Columns: [Market_ID, District, Num_of_employees, Num_of_shops, Ranking]",
        "Response": "Table: market"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (playerID, award, year, lgID, note, pos) VALUES ('ibakase01', 'All-Defensive First Team', 2011, 'NBA', NULL, 'F');\nDatabase State:\n- Table: teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, confRank, playoff, name, o_fgm, o_ftm, o_pts, d_pts, homeWon, homeLost, awayWon, awayLost, won, lost, games, arena]\n- Table: players, Columns: [playerID, useFirst, firstName, middleName, lastName, nameGiven, fullGivenName, nameSuffix, nameNick, pos, firstseason, lastseason, height, weight, college, collegeOther, birthDate, birthCity, birthState, birthCountry, highSchool, hsCity, hsState, hsCountry, deathDate, race]\n- Table: draft, Columns: [id, draftYear, draftRound, draftSelection, draftOverall, tmID, firstName, lastName, suffixName, playerID, draftFrom, lgID]\n- Table: series_post, Columns: [id, year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L]\n- Table: Awards, Columns: [playerID, award, year, lgID, note, pos]\n- Table: awards_coaches, Columns: [id, year, coachID, award, lgID, note]\n- Table: player_allstar, Columns: [playerID, last_name, first_name, season_id, conference, league_id, games_played, minutes, points, o_rebounds, d_rebounds, rebounds, assists, steals, blocks, turnovers, personal_fouls, fg_attempted, fg_made, ft_attempted, ft_made, three_attempted, three_made]\n- Table: coaches, Columns: [coachID, year, tmID, lgID, stint, won, lost, post_wins, post_losses]\n- Table: players_teams, Columns: [id, playerID, year, stint, tmID, lgID, GP, GS, minutes, points, oRebounds, dRebounds, rebounds, assists, steals, blocks, turnovers, PF, fgAttempted, fgMade, ftAttempted, ftMade, threeAttempted, threeMade, PostGP, PostGS, PostMinutes, PostPoints, PostoRebounds, PostdRebounds, PostRebounds, PostAssists, PostSteals, PostBlocks, PostTurnovers, PostPF, PostfgAttempted, PostfgMade, PostftAttempted, PostftMade, PostthreeAttempted, PostthreeMade, note]",
        "Response": "Table: Awards"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO AREA_CODE_STATE (area_code) VALUES (707, 'CA');\nDatabase State:\n- Table: AreaCodes, Columns: [area_code]\n- Table: VOTES, Columns: [vote_id]",
        "Response": "Table: AreaCodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, commons_category, country, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, page_banner, freebase_id, openstreetmap_relation_id, nuts_code, category_for_people_who_died_here, curlie_id, contains_the_administrative_territorial_entity, area, locator_map_image, geonames_id, category_of_people_buried_here, image, category_of_associated_people, shares_border_with, population, uk_parliament_thesaurus_id, eu_knowledge_graph_item_id) VALUES ('Yorkshire and the Humber', 'one of nine regions of England', 'region of England', 'Yorkshire and the Humber', 'United Kingdom', 'England', '53.56666666666701', 'Category:Yorkshire and the Humber', 'Yorkshire banner.jpg', '/m/0dymr', '151012.0', 'UKE', 'nan', 'nan', 'South Yorkshire', 15420.0, 'Yorkshire and the Humber in England.svg', '11591951.0', 'Category:Burials in Yorkshire and the Humber', 'York Minster from M&S.JPG', 'Category:People from Yorkshire and the Humber', 'East Midlands', 5502967.0, '95342.0', 'Q2554908');\nDatabase State:\n- Table: Counties, Columns: [label, description, instance_of, commons_category, country, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, page_banner, freebase_id, openstreetmap_relation_id, nuts_code, category_for_people_who_died_here, curlie_id, contains_the_administrative_territorial_entity, area, locator_map_image, geonames_id, category_of_people_buried_here, image, category_of_associated_people, shares_border_with, population, uk_parliament_thesaurus_id, eu_knowledge_graph_item_id]\n- Table: category_for_films_shot_at_this_location, Columns: [label, description, instance_of, category_combines_topics, category_contains]",
        "Response": "Table: Counties"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, population, geonames_id, gnd_id, licence_plate_code, country, bavarikon_id, coat_of_arms_image, german_municipality_key, viaf_id, freebase_id, official_website, openstreetmap_relation_id, topics_main_category, locator_map_image, area, archinform_location_id, local_dialing_code, commons_category, elevation_above_sea_level, instance_of, coordinate_location, located_in_the_administrative_territorial_entity, postal_code, image, whos_on_first_id, factgrid_item_id, located_in_time_zone, german_regional_key, part_of) VALUES ('Kulmbach', 'town in Bavaria, Germany', 25724.0, '2882588', '4033534-3', 'KU', 'Germany', 'ODB_A00002114', 'Wappen Kulmbach.svg', '9477128.0', '155953248.0', '/m/04_qwb', 'https://www.kulmbach.de/', '1022764.0', 'Category:Kulmbach', 'Kulmbach in KU.svg', 92.7699999999999961, '11415.0', '9221.0', 'Kulmbach', 304.0, 'Greater district town', '50.1', 'Kulmbach', '95312\u201395326', 'Plassenburg, Kulmbach from Rehturm.jpg', '101826017', 'Q87692', 'UTC+01:00', '94770128128.0', 'Stimmkreis Wunsiedel, Kulmbach');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score) VALUES (44, 1, 2013, 68);\nDatabase State:\n- Table: university_ranking_year, Columns: [university_id, ranking_criteria_id, year, score]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details) VALUES (12, 'LUNCH', 3, '2018-01-20 19:06:56', '2018-02-25 07:20:30', NULL, NULL);\nDatabase State:\n- Table: Teachers, Columns: [teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details]\n- Table: Ref_Detention_Type, Columns: [detention_type_code, detention_type_description]\n- Table: Ref_Address_Types, Columns: [address_type_code, address_type_description]\n- Table: Assessment_Notes, Columns: [notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details]\n- Table: Detention, Columns: [detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details]\n- Table: Addresses, Columns: [address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details]\n- Table: Students_in_Detention, Columns: [student_id, detention_id, incident_id]\n- Table: Ref_Incident_Type, Columns: [incident_type_code, incident_type_description]\n- Table: Students, Columns: [student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details]\n- Table: Student_Addresses, Columns: [student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details]\n- Table: Behavior_Incident, Columns: [incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details]",
        "Response": "Table: Detention"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO drifter (label, description, instance_of, country, located_in_the_administrative_territorial_entity, coordinate_location, significant_event, described_by_source, canmore_id, historic_county) VALUES ('Nixie', 'Shipwreck off the Scottish Coast, imported from Canmore Nov 2020', 'drifter', 'United Kingdom', 'Highland', '57.00798335701785', 'shipwrecking', 'Canmore', '101943.0', 'Inverness-shire');\nDatabase State:\n- Table: Shipwrecks, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, coordinate_location, significant_event, described_by_source, canmore_id, historic_county]",
        "Response": "Table: Shipwrecks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales_Orders (OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost) VALUES ('SO - 0002853', 'Online', 'WARE-UHY1004', '2/4/19', '4/21/19', '4/27/19', '5/5/19', 'USD', 16, 42, 215, 47, 4, 0.4000000000000000222, '2,653.20', '1,830.71');\nDatabase State:\n- Table: Order_Transactions, Columns: [OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost]\n- Table: Products, Columns: [ProductID, Product_Name]\n- Table: Store_Locations, Columns: [StoreID, City_Name, County, StateCode, State, Type, Latitude, Longitude, AreaCode, Population, Household_Income, Median_Income, Land_Area, Water_Area, Time_Zone]\n- Table: Customers, Columns: [CustomerID, Customer_Names]",
        "Response": "Table: Order_Transactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, country, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, instance_of, freebase_id, geonames_id, shares_border_with, official_website, capital, locator_map_image, area, indian_census_area_code_2011, population, male_population, female_population, number_of_households, urban_population, rural_population, literate_population, illiterate_population, geoshape, wolfram_language_entity_code, inaturalist_place_id, located_in_time_zone) VALUES ('Sangli district', 'district of Maharashtra state in west-central India', 'Sangli district', 'India', '16.86', 'Pune division', 'Category:Sangli district', 'district of India', '/m/097c32', '9747967.0', 'Ratnagiri district', 'http://sangli.gov.in', 'Sangli', 'Sangli in Maharashtra (India).svg', 8578.0, '531.0', 2822143.0, 1435728.0, 1386415.0, 598386.0, 719357.0, 2102786.0, 2049467.0, 772676.0, 'Data:India/Maharashtra/Sangli.map', 'Entity[\"AdministrativeDivision\", {\"Sangli\", \"Maharashtra\", \"India\"}]', '32352', 'UTC+05:30');\nDatabase State:\n- Table: Districts, Columns: [label, description, commons_category, country, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, instance_of, freebase_id, geonames_id, shares_border_with, official_website, capital, locator_map_image, area, indian_census_area_code_2011, population, male_population, female_population, number_of_households, urban_population, rural_population, literate_population, illiterate_population, geoshape, wolfram_language_entity_code, inaturalist_place_id, located_in_time_zone]\n- Table: capital_city, Columns: [label, description, country, located_in_the_administrative_territorial_entity, commons_category, instance_of, located_in_time_zone, coordinate_location, freebase_id, geonames_id, elevation_above_sea_level, image, postal_code, local_dialing_code, capital_of, quora_topic_id, whos_on_first_id, area]",
        "Response": "Table: Districts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Room (RoomNumber, RoomType, BlockFloor) VALUES (311, 'Single', 3, 2, 0);\nDatabase State:\n- Table: Stay, Columns: [StayID, Patient, Room, StayStart, StayEnd]\n- Table: Department, Columns: [DepartmentID, Name, Head]\n- Table: Block, Columns: [BlockFloor, BlockCode]\n- Table: Affiliated_With, Columns: [Physician, Department, PrimaryAffiliation]\n- Table: Trained_In, Columns: [Physician, Treatment, CertificationDate, CertificationExpires]\n- Table: On_Call, Columns: [Nurse, BlockFloor, OnCallStart, OnCallEnd]\n- Table: Prescribes, Columns: [Physician, Patient, Appointment]\n- Table: Undergoes, Columns: [Patient, Procedures, Stay, DateUndergoes, Physician, AssistingNurse]\n- Table: Physician, Columns: [EmployeeID, Name, Position, SSN]\n- Table: Patient, Columns: [SSN, Name, Address, Phone, InsuranceID, PCP]\n- Table: Appointment, Columns: [AppointmentID, Patient, Physician, Start, End, ExaminationRoom]\n- Table: Medication, Columns: [Code, Name, Brand, Description]\n- Table: Nurse, Columns: [EmployeeID, Name, Position, Registered, SSN]\n- Table: Procedures, Columns: [Code, Name, Cost]\n- Table: Accommodations, Columns: [RoomNumber, RoomType, BlockFloor]",
        "Response": "Table: Accommodations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, part_of, instance_of, ensembl_protein_id, refseq_protein_id) VALUES ('Ubiquinol--cytochrome-c reductase catalytic subunit RIP1 YEL024W', 'fungal protein found in Saccharomyces cerevisiae S288c', 'RIP1', 'P08067', 'mitochondrial electron transport, ubiquinol to cytochrome c', 'oxidoreductase activity, acting on diphenols and related substances as donors', 'integral component of membrane', 'Cytochrome b-c1 complex subunit Rieske, transmembrane domain', 'Saccharomyces cerevisiae S288c', 'Rieske [2Fe-2S] iron-sulphur domain superfamily', 'protein', 'YEL024W', 'NP_010890');\nDatabase State:\n- Table: cytochrome_bc1_complex_subunit_rieske_transmembrane_domain_superfamily, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, part_of, instance_of, ensembl_protein_id, refseq_protein_id]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, found_in_taxon, instance_of, ensembl_gene_id, refseq_rna_id, encodes]",
        "Response": "Table: cytochrome_bc1_complex_subunit_rieske_transmembrane_domain_superfamily"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, record_label, performer, follows, followed_by, genre, publication_date, form_of_creative_work, part_of, distribution_format, genius_album_id, deezer_album_id, youtube_playlist_id, spotify_album_id) VALUES ('Temps mort', '2002 album by Booba', 'album', 'Bertelsmann Music Group', 'Booba', 'nan', 'Panth\u00e9on', 'French hip hop', '+2002-01-22T00:00:00Z', 'studio album', 'Booba discography', 'music streaming', 'Booba/Temps-mort', '73913112.0', 'OLAK5uy_maByUy0ystmQArPf0xkBVOdB1tkhhhnrg', '4zeDPBFZnBCjBPCZc6NEPn');\nDatabase State:\n- Table: BoobaAlbums, Columns: [label, description, instance_of, record_label, performer, follows, followed_by, genre, publication_date, form_of_creative_work, part_of, distribution_format, genius_album_id, deezer_album_id, youtube_playlist_id, spotify_album_id]\n- Table: followed_by, Columns: [label, description, performer, record_label, instance_of, musicbrainz_release_group_id, follows, followed_by, genre, publication_date, form_of_creative_work, part_of, distribution_format, apple_music_album_id_us_version, deezer_album_id, spotify_album_id, genius_album_id, youtube_playlist_id]",
        "Response": "Table: BoobaAlbums"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, bncf_thesaurus_id, topics_main_category, freebase_id, subclass_of, library_of_congress_authority_id, quora_topic_id, jstor_topic_id, image, uses, gnd_id, practiced_by, yso_id, national_library_of_israel_j9u_id, nkcr_aut_id, on_focus_list_of_wikimedia_project, openstreetmap_tag_or_key, instance_of, kbpedia_id) VALUES ('motorsport', 'events which primarily involve the use of motorized vehicles', 'Motorsports', '35919.0', 'Category:Motorsport', '/m/0410tth', 'sport', 'sh85087698', 'Motorsports', 'motorsports', 'nan', 'motor vehicle', '4040408-0', 'racing driver', '7596.0', '9.870075483122052e+17', 'ph123000', 'nan', 'Tag:sport=motor', 'type of sport', 'MotorSport');\nDatabase State:\n- Table: facet_of, Columns: [label, description, subclass_of, topics_main_category, commons_category, freebase_id, library_of_congress_authority_id, image, practiced_by]\n- Table: field_of_work, Columns: [label, description, commons_category, bncf_thesaurus_id, topics_main_category, freebase_id, subclass_of, library_of_congress_authority_id, quora_topic_id, jstor_topic_id, image, uses, gnd_id, practiced_by, yso_id, national_library_of_israel_j9u_id, nkcr_aut_id, on_focus_list_of_wikimedia_project, openstreetmap_tag_or_key, instance_of, kbpedia_id]\n- Table: use, Columns: [label, description, subclass_of, freebase_id, commons_category, image]\n- Table: wikidata_property_related_to_sport, Columns: [label, description, subclass_of, facet_of, instance_of]\n- Table: intentional_human_activity, Columns: [label, description, field_of_this_occupation, topics_main_category, instance_of, commons_category, female_form_of_label, subclass_of]",
        "Response": "Table: field_of_work"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (inspection_id, point_id, fine, inspector_comment) VALUES (1326383, 32, 100, 'MUST PROVIDE CONTAINERS LARGE /LIDS, TO PROPERLY STORE FOR ALL OPEN BAGS OF RICE ETC IN BASEMENT.');\nDatabase State:\n- Table: employee, Columns: [employee_id, first_name, last_name, address, city, state, zip, phone, title, salary, supervisor]\n- Table: FoodViolations, Columns: [inspection_id, point_id, fine, inspector_comment]",
        "Response": "Table: FoodViolations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, office_contested, point_in_time, country, applies_to_jurisdiction, successful_candidate, candidate) VALUES ('1971 Adelaide state by-election', 'South Australian by-election', 'South Australian House of Assembly by-election', 'Member of the South Australian House of Assembly', '+1971-07-03T00:00:00Z', 'Australia', 'Adelaide', 'Jack Wright', 'Jack Wright');\nDatabase State:\n- Table: candidate, Columns: [label, description, instance_of, date_of_birth, sex_or_gender, position_held, given_name, occupation, country_of_citizenship, family_name, languages_spoken_written_or_signed, candidacy_in_election, freebase_id, sa_parliament_member_id]\n- Table: family_name_identical_to_this_given_name, Columns: [label, description, instance_of, different_from, said_to_be_the_same_as, native_label, writing_system, soundex, cologne_phonetics, caverphone, g\u00e9opatronyme_id, geneanet_family_name_id]\n- Table: south_australian_house_of_assembly_by_election, Columns: [label, description, instance_of, office_contested, point_in_time, country, applies_to_jurisdiction, successful_candidate, candidate]",
        "Response": "Table: south_australian_house_of_assembly_by_election"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO roller_coaster (Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status) VALUES (4, 'Ravine Flyer II', 'Waldameer', 2, 2900.0, 120.0, '57', 'May 17, 2008', 'Operating');\nDatabase State:\n- Table: RollerCoasters, Columns: [Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status]",
        "Response": "Table: RollerCoasters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO wikimedia_category (label, description, instance_of, category_combines_topics, commons_category, category_contains) VALUES ('Category:People from Ciechan\u00f3w', 'Wikimedia category', 'Wikimedia category', 'Ciechan\u00f3w', 'People of Ciechan\u00f3w', 'human');\nDatabase State:\n- Table: wikimedia_category, Columns: [label, description, instance_of, category_combines_topics, commons_category, category_contains]",
        "Response": "Table: wikimedia_category"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO mountain (id, name, Height, Prominence, Range, Country) VALUES (4, 'Kaka / Kecha / Chiqe', 4193.0, 1215.0, 'Arsi Mountains', 'Ethiopia');\nDatabase State:\n- Table: camera_lens, Columns: [id, brand, name, focal_length_mm, max_aperture]\n- Table: photos, Columns: [id, mountain_id, color]",
        "Response": "Table: mountain"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of, cell_component) VALUES ('Methyltransferase like 15', 'mammalian protein found in Mus musculus', 'Mettl15', 'Q9DCL4', 'methylation', 'methyltransferase activity', 'house mouse', 'NP_084066', 'protein', 'Ribosomal RNA small subunit methyltransferase H', 'protein', 'cellular component');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]",
        "Response": "Table: s_adenosyl_l_methionine_dependent_methyltransferase_mraw_recognition_domain_superfamily"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Song_ID, Title, Singer_ID, Sales, Highest_Position) VALUES (4, 'Call on Me', 4, 335000.0, 1.0);\nDatabase State:\n- Table: song, Columns: [Song_ID, Title, Singer_ID, Sales, Highest_Position]\n- Table: singer, Columns: [Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
        "Response": "Table: song"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO City (ID, Name, CountryCode, District, Population) VALUES (3311, 'Morogoro', 'TZA', 'Morogoro', 117800);\nDatabase State:\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO city (City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking) VALUES (5, 'Aroostook', 'Village', 2.240000000000000214, 351.0, '3460 of 5008');\nDatabase State:\n- Table: farm, Columns: [Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats]\n- Table: competition_record, Columns: [Competition_ID, Farm_ID, Rank]\n- Table: farm_competition, Columns: [Competition_ID, Year, Theme, Host_city_ID, Hosts]\n- Table: Cities, Columns: [City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking]",
        "Response": "Table: Cities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO competition_record (Competition_ID, Farm_ID, Rank) VALUES (3, 1, 3);\nDatabase State:\n- Table: farm_competition, Columns: [Competition_ID, Year, Theme, Host_city_ID, Hosts]\n- Table: competition_record, Columns: [Competition_ID, Farm_ID, Rank]\n- Table: city, Columns: [City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking]",
        "Response": "Table: competition_record"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, playerID, year, stint, tmID, lgID, GP, GS, minutes, points, oRebounds, dRebounds, rebounds, assists, steals, blocks, turnovers, PF, fgAttempted, fgMade, ftAttempted, ftMade, threeAttempted, threeMade, PostGP, PostGS, PostMinutes, PostPoints, PostoRebounds, PostdRebounds, PostRebounds, PostAssists, PostSteals, PostBlocks, PostTurnovers, PostPF, PostfgAttempted, PostfgMade, PostftAttempted, PostftMade, PostthreeAttempted, PostthreeMade, note) VALUES (12442, 'lewisfr01', 1947, 0, 'BIR', 'PBLA', 7, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 16, 0, 29, 23, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL);\nDatabase State:\n- Table: players, Columns: [playerID, useFirst, firstName, middleName, lastName, nameGiven, fullGivenName, nameSuffix, nameNick, pos, firstseason, lastseason, height, weight, college, collegeOther, birthDate, birthCity, birthState, birthCountry, highSchool, hsCity, hsState, hsCountry, deathDate, race]\n- Table: awards_coaches, Columns: [id, year, coachID, award, lgID, note]\n- Table: teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, confRank, playoff, name, o_fgm, o_ftm, o_pts, d_pts, homeWon, homeLost, awayWon, awayLost, won, lost, games, arena]\n- Table: player_allstar, Columns: [playerID, last_name, first_name, season_id, conference, league_id, games_played, minutes, points, o_rebounds, d_rebounds, rebounds, assists, steals, blocks, turnovers, personal_fouls, fg_attempted, fg_made, ft_attempted, ft_made, three_attempted, three_made]\n- Table: draft, Columns: [id, draftYear, draftRound, draftSelection, draftOverall, tmID, firstName, lastName, suffixName, playerID, draftFrom, lgID]\n- Table: series_post, Columns: [id, year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L]",
        "Response": "Table: players_teams"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO winner (label, description, sex_or_gender, instance_of, freebase_id, date_of_birth, place_of_birth, country_of_citizenship, occupation, sport, driver_database_driver_id, given_name, family_name, motorsportstatscom_driver_id, racing_reference_driver_id, commons_category, image) VALUES ('Nick Cassidy', 'New Zealand racing driver', 'male', 'human', '/m/0j28_6n', '+1994-08-19T00:00:00Z', 'Auckland', 'New Zealand', 'racing driver', 'nan', 'nick-cassidy', 'Nick', 'Cassidy', 'nick-cassidy', 'Nick_Cassidy', 'Nick Cassidy', '2014 F3 HockenheimringII Nick Cassidy by 2eight DSC7535.jpg');\nDatabase State:\n- Table: family_name_identical_to_this_given_name, Columns: [label, description, instance_of, different_from, commons_category, native_label, writing_system, soundex, caverphone, cologne_phonetics, wolfram_language_entity_code, g\u00e9opatronyme_id, geneanet_family_name_id]\n- Table: new_zealand_grand_prix, Columns: [label, description, pole_position, instance_of, point_in_time, country, winner, event_distance, fastest_lap, google_knowledge_graph_id]\n- Table: winner, Columns: [label, description, sex_or_gender, instance_of, freebase_id, date_of_birth, place_of_birth, country_of_citizenship, occupation, sport, driver_database_driver_id, given_name, family_name, motorsportstatscom_driver_id, racing_reference_driver_id, commons_category, image]",
        "Response": "Table: winner"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO country (zip_code, county, state) VALUES (97918, 'MALHEUR', 'OR');\nDatabase State:\n- Table: US_ZIPCODES, Columns: [zip_code, county, state]\n- Table: CBSA, Columns: [CBSA, CBSA_name, CBSA_type]\n- Table: zip_data, Columns: [zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, 1st_quarter_payroll, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA]\n- Table: area_code, Columns: [zip_code, area_code]\n- Table: zip_congress, Columns: [zip_code, district]",
        "Response": "Table: US_ZIPCODES"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales (SalesID, SalesPersonID, CustomerID, ProductID, Quantity) VALUES (5958818, 15, 960, 255, 255);\nDatabase State:\n- Table: Customers, Columns: [CustomerID, FirstName, MiddleInitial, LastName]\n- Table: SalesRecords, Columns: [SalesID, SalesPersonID, CustomerID, ProductID, Quantity]\n- Table: Employees, Columns: [EmployeeID, FirstName, MiddleInitial, LastName]",
        "Response": "Table: SalesRecords"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('CTP synthase FP1899', 'microbial protein found in Flavobacterium psychrophilum JIP02/86', 'CTP synthase FP1899', 'A6H0U1', 'glutamine metabolic process', 'CTP synthase activity', 'CTP synthase GATase domain', 'Flavobacterium psychrophilum JIP02/86', 'YP_001296767', 'protein', 'Class I glutamine amidotransferase-like', 'protein');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: Protein_CTP_Synthase_Family, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: Protein_CTP_Synthase_Family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO person (id, full_name, gender, height, weight) VALUES (94219, 'Per Helmer \"Pelle\"\" Petterson\"', 'M', 177, 74);\nDatabase State:\n- Table: city, Columns: [id, city_name]\n- Table: medal, Columns: [id, medal_name]\n- Table: person_region, Columns: [person_id, region_id]\n- Table: event, Columns: [id, sport_id, event_name]\n- Table: People, Columns: [id, full_name, gender, height, weight]\n- Table: games_competitor, Columns: [id, games_id, person_id, age]\n- Table: sport, Columns: [id, sport_name]\n- Table: noc_region, Columns: [id, noc, region_name]\n- Table: competitor_event, Columns: [event_id, competitor_id, medal_id]\n- Table: games, Columns: [id, games_year, games_name, season]",
        "Response": "Table: People"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('DUF386 domain-containing protein YhcH b3221', 'microbial gene found in Escherichia coli str. K-12 substr. MG1655', 'Escherichia coli str. K-12 substr. MG1655', '947750', 'gene', 'DUF386 domain-containing protein YhcH b3221', 'b3221', 'gene', '3369477', 'reverse strand', '3369013');\nDatabase State:\n- Table: yhch_yjgk_yial_family, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of]\n- Table: Genes, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO user (UserID, Gender) VALUES ('tw-13397152', 'Male');\nDatabase State:\n- Table: location, Columns: [LocationID, Country, State, StateCode, City]\n- Table: twitter, Columns: [TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID]",
        "Response": "Table: user"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Code, Name, Headquarter, Founder, Revenue) VALUES (5, 'Fujitsu', 'Taiwan', 'John', 130.0);\nDatabase State:\n- Table: Manufacturers, Columns: [Code, Name, Headquarter, Founder, Revenue]\n- Table: Products, Columns: [Code, Name, Price, Manufacturer]",
        "Response": "Table: Manufacturers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ballotpedia_id, bioguide_id, bioguide_previous_id, birthday_bio, cspan_id, fec_id, first_name, gender_bio, google_entity_id_id, govtrack_id, house_history_alternate_id, house_history_id, icpsr_id, last_name, lis_id, maplight_id, middle_name, nickname_name, official_full_name, opensecrets_id, religion_bio, suffix_name, thomas_id, votesmart_id, wikidata_id, wikipedia_id) VALUES (NULL, 'R000472', NULL, '1870-09-08', NULL, NULL, 'Joseph', 'M', 'kg:/m/02rkt98', 409433, NULL, 20669.0, 8088.0, 'Rowan', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Q6286667', 'Joseph Rowan');\nDatabase State:\n- Table: current, Columns: [ballotpedia_id, bioguide_id, birthday_bio, cspan_id, fec_id, first_name, gender_bio, google_entity_id_id, govtrack_id, house_history_id, icpsr_id, last_name, lis_id, maplight_id, middle_name, nickname_name, official_full_name, opensecrets_id, religion_bio, suffix_name, thomas_id, votesmart_id, wikidata_id, wikipedia_id]",
        "Response": "Table: historical"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Event_ID, Service_ID, Event_Details) VALUES (16, 2, 'Fail');\nDatabase State:\n- Table: Service_Errors, Columns: [Event_ID, Service_ID, Event_Details]\n- Table: Participants_in_Events, Columns: [Event_ID, Participant_ID]\n- Table: Services, Columns: [Service_ID, Service_Type_Code]",
        "Response": "Table: Service_Errors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO manchester_metrolink_tram_stop (label, description, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, image, historic_county, state_of_use, transport_network, connecting_service, adjacent_station) VALUES ('Bury Interchange', 'Transport hub in Bury, Greater Manchester, England', 'United Kingdom', '53.5914', 'railway station', 'Bury', 'Metrolink bury.jpg', 'Lancashire', 'in use', 'Manchester Metrolink', 'Piccadilly to Bury', 'Radcliffe tram stop');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, located_in_the_administrative_territorial_entity, geonames_id, toid, country, coordinate_location, whos_on_first_id, topics_main_category, commons_category, image, musicbrainz_area_id, freebase_id]\n- Table: manchester_metrolink_tram_stop, Columns: [label, description, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, image, historic_county, state_of_use, transport_network, connecting_service, adjacent_station]",
        "Response": "Table: manchester_metrolink_tram_stop"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, reactome_id, instance_of, part_of, exact_match, has_parts, cites_work) VALUES ('DYSF, CAV3 and TRIM72 bind', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-5263633)', 'Homo sapiens', 'R-HSA-5263633', 'biological process', 'Smooth Muscle Contraction', 'https://identifiers.org/reactome:R-HSA-5263633', 'Caveolin 3', 'Membrane repair defects in muscular dystrophy are linked to altered interaction between MG53, caveolin-3, and dysferlin');\nDatabase State:\n- Table: publishing, Columns: [label, description, instance_of, official_website, freebase_id, issn, era_journal_id, oclc_control_number, coden, scopus_source_id, danish_bibliometric_research_indicator_bfi_snocno, danish_bibliometric_research_indicator_level, publisher, title, iso_4_abbreviation, opencitations_bibliographic_resource_id, nlm_unique_id, language_of_work_or_name, inception, country_of_origin, uniprot_journal_id, main_subject, jufo_id, acnp_journal_id, crossref_journal_id, issn_l, indexed_in_bibliographic_review, openalex_id, scilit_journal_id]\n- Table: smooth_muscle_contraction, Columns: [label, description, found_in_taxon, reactome_id, instance_of, part_of, exact_match, has_parts, cites_work]\n- Table: citation, Columns: [label, description, pages, title, author_name_string, publication_date, issue, volume, published_in, instance_of, pubmed_id, doi, language_of_work_or_name]",
        "Response": "Table: smooth_muscle_contraction"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost) VALUES ('SO - 0006095', 'In-Store', 'WARE-UHY1004', '3/10/20', '5/13/20', '5/21/20', '5/23/20', 'USD', 9, 20, 215, 13, 3, 0.1499999999999999945, '783.90', '642.80');\nDatabase State:\n- Table: Customers, Columns: [CustomerID, Customer_Names]\n- Table: Regions, Columns: [StateCode, State, Region]\n- Table: Sales_Team, Columns: [SalesTeamID, Sales_Team, Region]\n- Table: Products, Columns: [ProductID, Product_Name]",
        "Response": "Table: Sales_Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (userid, movieid, rating) VALUES (48, 1831593, '3');\nDatabase State:\n- Table: actors, Columns: [actorid, a_gender, a_quality]\n- Table: User_Movie_Ratings, Columns: [userid, movieid, rating]\n- Table: users, Columns: [userid, age, u_gender, occupation]",
        "Response": "Table: User_Movie_Ratings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number) VALUES ('Shewanella oneidensis MR-1', 'nan', 'strain', 'Shewanella oneidensis MR-1', 'Shewanella oneidensis', '211586', 'Gram-negative bacteria', 'GCA_000146165.2');\nDatabase State:\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: natural_product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO people (People_ID, Name, Height, Weight, Birth_Date, Birth_Place) VALUES (4, 'Mark Fayne', 215.0, 102.0, 'May 5, 1987', 'Nashua, New Hampshire');\nDatabase State:\n- Table: people, Columns: [People_ID, Name, Height, Weight, Birth_Date, Birth_Place]",
        "Response": "Table: people"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO yhch_yjgk_yial_family (label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of) VALUES ('Hypothetical protein VF_A0892', 'microbial protein found in Aliivibrio fischeri ES114', 'Q5DZ34', 'Vibrio fischeri ES114', 'protein', 'hypothetical protein VF_A0892', 'protein', 'YP_206850', 'YhcH/YjgK/YiaL family');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: yhch_yjgk_yial_family, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: yhch_yjgk_yial_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season) VALUES ('I1', '2011-12-10', 'Inter', 'Fiorentina', 2, 0, 'H', 2012);\nDatabase State:\n- Table: divisions, Columns: [division, name, country]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO matchs (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season) VALUES ('F1', '2013-05-04', 'Sochaux', 'Lorient', 1, 0, 'H', 2013);\nDatabase State:\n- Table: matchs, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]\n- Table: divisions, Columns: [division, name, country]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1005, 'Gompers', 'Paul', 26, 'M', 600, 1121, 'YYZ');\nDatabase State:\n- Table: EnrolledStudents, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: EnrolledStudents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, subclass_of, entrez_gene_id, found_in_taxon, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('hypothetical protein O3K_11360', 'microbial gene found in Escherichia coli O104:H4 str. 2011C-3493', 'gene', '13701500', 'Escherichia coli O104:H4 str. 2011C-3493', 'O3K_11360', 'Hypothetical protein O3K_11360', 'gene', '2343970', 'reverse strand', '2343680');\nDatabase State:\n- Table: Genes, Columns: [label, description, subclass_of, entrez_gene_id, found_in_taxon, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: encodes, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of]\n- Table: endoribonuclease_antitoxin_ghos_superfamily, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, cites_work, instance_of, found_in_taxon, reactome_id, part_of, exact_match, has_parts) VALUES ('ABCC3 transports bile salts from cytosol to extracellular region', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-194153)', 'Transport of bile acids in multidrug-resistance-protein 3-overexpressing cells co-transfected with the ileal Na+-dependent bile-acid transporter', 'biological process', 'Homo sapiens', 'R-HSA-194153', 'Recycling of bile acids and salts', 'https://identifiers.org/reactome:R-HSA-194153', 'ATP(4-)');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: recycling_of_bile_acids_and_salts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Ship_ID, Name, Type, Built_Year, Class, Flag) VALUES (3, 'HM Cutter Avenger', 'Panamax', 1997.0, 'KR', 'Panama');\nDatabase State:\n- Table: captain, Columns: [Captain_ID, Name, Ship_ID, age, Class, Rank]",
        "Response": "Table: Ship"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_centre (label, description, commons_category, coordinate_location, country, instance_of, topics_main_category, freebase_id, geonames_id, viaf_id, elevation_above_sea_level, population, shares_border_with, area, official_website, coat_of_arms_image, lau, whos_on_first_id, capital, inaturalist_place_id, located_in_the_administrative_territorial_entity, image) VALUES ('Mondercange', 'commune in Luxembourg', 'Mondercange', '49.531944444444', 'Luxembourg', 'municipality of Luxembourg', 'Category:Mondercange', '/m/08gjn3', '2960258', '138070898', 290.0, 6982.0, 'Esch-sur-Alzette', 2140.0, 'http://www.mondercange.lu/', 'Coat of arms mondercange luxbrg.png', '208.0', '101812915.0', 'Mondercange', '127376.0', 'Canton of Esch-sur-Alzette', 'nan');\nDatabase State:\n- Table: political_border, Columns: [label, description, commons_category, country, coat_of_arms_image, coordinate_location, instance_of, topics_main_category, freebase_id, geonames_id, viaf_id, elevation_above_sea_level, shares_border_with, area, official_website, image, population, lau, whos_on_first_id, inaturalist_place_id, located_in_the_administrative_territorial_entity, capital]\n- Table: administrative_territorial_entity, Columns: [label, description, commons_category, country, coat_of_arms_image, coordinate_location, instance_of, topics_main_category, freebase_id, geonames_id, viaf_id, shares_border_with, area, official_website, elevation_above_sea_level, population, capital, lau, whos_on_first_id, category_for_the_view_of_the_item, inaturalist_place_id, located_in_the_administrative_territorial_entity]",
        "Response": "Table: administrative_centre"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude) VALUES (11459164, 'JB452439', '9/26/2018 10:45', '001XX N STATE ST', '880', 'CTA BUS STOP', 'FALSE', 'FALSE', 111, 1, 42, 32, '6', '41.88534739', '-87.62792982');\nDatabase State:\n- Table: FBI_Code, Columns: [fbi_code_no, title, description, crime_against]\n- Table: District, Columns: [district_no, district_name, address, zip_code, commander, email, phone, fax, tty, twitter]\n- Table: Neighborhood, Columns: [neighborhood_name, community_area_no]\n- Table: Ward, Columns: [ward_no, alderman_first_name, alderman_last_name, alderman_name_suffix, ward_office_address, ward_office_zip, ward_email, ward_office_phone, ward_office_fax, city_hall_office_room, city_hall_office_phone, city_hall_office_fax, Population]\n- Table: Community_Area, Columns: [community_area_no, community_area_name, side, population]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO replacing_subject (label, description, inception, replaced_by, replaces, instance_of, applies_to_jurisdiction, dissolved_abolished_or_demolished_date) VALUES ('Krasts cabinet', 'nan', '+1997-08-07T00:00:00Z', 'Kri\u0161topans cabinet', '2nd \u0160\u0137\u0113le Cabinet', 'Government of Latvia', 'Latvia', '+1998-11-26T00:00:00Z');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: replacing_subject"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, genomic_start, strand_orientation, genomic_end, instance_of, ncbi_locus_tag) VALUES ('hypothetical protein Atu3727', 'microbial gene found in Agrobacterium fabrum str. C58', '1135601', 'gene', 'Hypothetical protein Atu3727', 'Agrobacterium fabrum str. C58', '808405.0', 'reverse strand', '809151.0', 'gene', 'Atu3727');\nDatabase State:\n- Table: Genes, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, genomic_start, strand_orientation, genomic_end, instance_of, ncbi_locus_tag]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encodes (label, description, encoded_by, uniprot_protein_id, molecular_function, biological_process, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('Tryptophanase b3708', 'microbial protein found in Escherichia coli str. K-12 substr. MG1655', 'tryptophanase b3708', 'P0A853', 'nan', 'nan', 'Tryptophanase, conserved site', 'Escherichia coli str. K-12 substr. MG1655', 'NP_418164', 'protein', 'Pyridoxal phosphate-dependent transferase domain 1', 'protein');\nDatabase State:\n- Table: aromatic_amino_acid_beta_eliminating_lyase_threonine_aldolase_family, Columns: [label, description, encoded_by, uniprot_protein_id, molecular_function, biological_process, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, catalogue_of_life_id, gram_staining, lpsn_url, microsoft_academic_id]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, doi, instance_of, title, published_in, followed_by, publication_date, volume, part_of, follows, author_name_string) VALUES ('The Association for Women Geoscientists: Forty years of successes, struggles, and sisterhood', 'nan', '10.1130/2018.1214(11)', 'scholarly article', 'The Association for Women Geoscientists: Forty years of successes, struggles, and sisterhood', 'Memoir / Geological Society of America', 'Building community to advance women in the geosciences through the Earth Science Women\u2019s Network', '+2018-08-07T00:00:00Z', '214', 'Women and Geology: Who Are We, Where Have We Come From, and Where Are We Going?', 'Progress of women in the geosciences: Insight from a small liberal arts university', 'Blair Schneider');\nDatabase State:\n- Table: followed_by, Columns: [label, description, doi, instance_of, title, published_in, follows, followed_by, volume, publication_date, part_of, author_name_string]\n- Table: Publications, Columns: [label, description, doi, instance_of, title, published_in, followed_by, publication_date, volume, part_of, follows, author_name_string]\n- Table: women_and_geology_who_are_we_where_have_we_come_from_and_where_are_we_going, Columns: [label, description, doi, instance_of, title, published_in, followed_by, publication_date, volume, part_of, main_subject, follows, author_name_string]",
        "Response": "Table: Publications"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO captain (Captain_ID, Name, Ship_ID, age, Class, Rank) VALUES (3, 'Lieutenant Hugh Bolitho', 3, '43', 'Cutter', 'Midshipman');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: captain"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, name, description, menus_appeared, times_appeared, first_appeared, last_appeared, lowest_price, highest_price) VALUES (84553, 'F. & M. Schaefer, per bottle', NULL, 1, 1, 1901, 1901, 0.0, 0.0);\nDatabase State:\n- Table: Menu, Columns: [id, name, sponsor, event, venue, place, physical_description, occasion, notes, call_number, keywords, language, date, location, location_type, currency, currency_symbol, status, page_count, dish_count]\n- Table: MenuItem, Columns: [id, menu_page_id, price, high_price, dish_id, created_at, updated_at, xpos, ypos]",
        "Response": "Table: Dish"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (attribute_id, attribute_name, attribute_data_type) VALUES (4, 'Sweet', 'Bool');\nDatabase State:\n- Table: Catalogs, Columns: [catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]\n- Table: Colors, Columns: [attribute_id, attribute_name, attribute_data_type]\n- Table: Catalog_Contents_Additional_Attributes, Columns: [catalog_entry_id, catalog_level_number, attribute_id, attribute_value]\n- Table: Catalog_Contents, Columns: [catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
        "Response": "Table: Colors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (truck_id, truck_licence_number, truck_details) VALUES (15, '89343', 'Efren');\nDatabase State:\n- Table: Actual_Orders, Columns: [actual_order_id, order_status_code, regular_order_id, actual_order_date]\n- Table: Order_Deliveries, Columns: [location_code, actual_order_id, delivery_status_code, driver_employee_id, truck_id, delivery_date]\n- Table: Delivery_Route_Locations, Columns: [location_code, route_id, location_address_id, location_name]\n- Table: Employees, Columns: [employee_id, employee_address_id, employee_name, employee_phone]\n- Table: Regular_Order_Products, Columns: [regular_order_id, product_id]\n- Table: Addresses, Columns: [address_id, address_details, city, zip_postcode, state_province_county, country]\n- Table: Trucks, Columns: [truck_id, truck_licence_number, truck_details]\n- Table: Actual_Order_Products, Columns: [actual_order_id, product_id]\n- Table: Delivery_Routes, Columns: [route_id, route_name, other_route_details]\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer]",
        "Response": "Table: Trucks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO current_terms (address, bioguide, caucus, chamber, class, contact_form, district, end, fax, last, name, office, party, party_affiliations, phone, relation, rss_url, start, state, state_rank, title, type, url) VALUES (NULL, 'P000258', NULL, NULL, NULL, NULL, 7.0, '1997-01-03', NULL, NULL, NULL, NULL, 'Democrat', NULL, NULL, NULL, NULL, '1995-01-04', 'MN', NULL, NULL, 'rep', NULL);\nDatabase State:\n- Table: current_terms, Columns: [address, bioguide, caucus, chamber, class, contact_form, district, end, fax, last, name, office, party, party_affiliations, phone, relation, rss_url, start, state, state_rank, title, type, url]\n- Table: historical, Columns: [ballotpedia_id, bioguide_id, bioguide_previous_id, birthday_bio, cspan_id, fec_id, first_name, gender_bio, google_entity_id_id, govtrack_id, house_history_alternate_id, house_history_id, icpsr_id, last_name, lis_id, maplight_id, middle_name, nickname_name, official_full_name, opensecrets_id, religion_bio, suffix_name, thomas_id, votesmart_id, wikidata_id, wikipedia_id]\n- Table: historical_terms, Columns: [address, bioguide, chamber, class, contact_form, district, end, fax, last, middle, name, office, party, party_affiliations, phone, relation, rss_url, start, state, state_rank, title, type, url]",
        "Response": "Table: current_terms"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Airlines (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY) VALUES ('2018/8/1', 19977, 'N77542', 454, 12892, 1289208, 32575, 'LAX', 13830, 1383002, 33830, 'OGG', 1510, 1505, -5, 0, 1736, -17, 0, 0, NULL, 343, 331, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Airports, Columns: [Code, Description]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (zip_code, district) VALUES (90409, 'CA-33');\nDatabase State:\n- Table: zip_data, Columns: [zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, 1st_quarter_payroll, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA]\n- Table: CBSA, Columns: [CBSA, CBSA_name, CBSA_type]\n- Table: state, Columns: [abbreviation, name]\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]",
        "Response": "Table: zip_congress"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, subclass_of, commons_category, operator, instance_of) VALUES ('Saucisson coaches', 'nan', 'railway coach', 'Saucisson coaches', 'nan', 'rolling stock class');\nDatabase State:\n- Table: Coaches, Columns: [label, description, subclass_of, commons_category, operator, instance_of]",
        "Response": "Table: Coaches"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status) VALUES (1, 'Boardwalk Bullet', 'Kemah Boardwalk', 1, 3236.0, 96.0, '51', 'August 31, 2007', 'Operating');\nDatabase State:\n- Table: RollerCoasters, Columns: [Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status]",
        "Response": "Table: RollerCoasters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude) VALUES (11414680, 'JB394396', '8/14/2018 17:00', '116XX S YALE AVE', '610', 'RESIDENCE', 'FALSE', 'FALSE', 522, 5, 34, 53, '5', '41.68274751', '-87.62881452');\nDatabase State:\n- Table: IUCR, Columns: [iucr_no, primary_description, secondary_description, index_code]\n- Table: Neighborhood, Columns: [neighborhood_name, community_area_no]\n- Table: Ward, Columns: [ward_no, alderman_first_name, alderman_last_name, alderman_name_suffix, ward_office_address, ward_office_zip, ward_email, ward_office_phone, ward_office_fax, city_hall_office_room, city_hall_office_phone, city_hall_office_fax, Population]\n- Table: Incidents, Columns: [report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude]\n- Table: FBI_Code, Columns: [fbi_code_no, title, description, crime_against]",
        "Response": "Table: Incidents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Documents (Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details) VALUES (227, 'BK', 30, '1970-03-06 07:34:49', 'Deontae files', NULL, NULL);\nDatabase State:\n- Table: Statements, Columns: [Statement_ID, Statement_Details]\n- Table: Project_Documents, Columns: [Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details]\n- Table: Ref_Document_Types, Columns: [Document_Type_Code, Document_Type_Name, Document_Type_Description]\n- Table: Projects, Columns: [Project_ID, Project_Details]\n- Table: Documents_with_Expenses, Columns: [Document_ID, Budget_Type_Code, Document_Details]\n- Table: Accounts, Columns: [Account_ID, Statement_ID, Account_Details]",
        "Response": "Table: Project_Documents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (driverStandingsId, raceId, driverId, points, position, positionText, wins) VALUES (21205, 442, 175, 8.0, 9, '9', 0);\nDatabase State:\n- Table: circuits, Columns: [circuitId, circuitRef, name, location, country, lat, lng, alt, url]",
        "Response": "Table: driverStandings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number) VALUES ('Shewanella oneidensis MR-1', 'nan', 'Shewanella oneidensis MR-1', 'Shewanella oneidensis', '211586', 'strain', 'Gram-negative bacteria', 'GCA_000146165.2');\nDatabase State:\n- Table: natural_product, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: natural_product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, pubmed_id, instance_of, published_in, volume, issue, pages, author_name_string, cites_work, doi, publication_date, title) VALUES ('Crofelemer, an antisecretory antidiarrheal proanthocyanidin oligomer extracted from Croton lechleri, targets two distinct intestinal chloride channels', 'scientific article', '19808995', 'scholarly article', 'Molecular Pharmacology', '77', '1', '69-78', 'Lukmanee Tradtrantip', 'SP-303, an antiviral oligomeric proanthocyanidin from the latex of Croton lechleri (Sangre de Drago).', '10.1124/MOL.109.061051', '+2009-10-06T00:00:00Z', 'Crofelemer, an antisecretory antidiarrheal proanthocyanidin oligomer extracted from Croton lechleri, targets two distinct intestinal chloride channels');\nDatabase State:\n- Table: publisher, Columns: [label, description, official_website, country, instance_of, isni, ringgold_id, headquarters_location, inception, microsoft_academic_id, library_of_congress_authority_id, romeo_publisher_id, viaf_id, worldcat_identities_id, freebase_id, publons_publisher_id]\n- Table: publishing, Columns: [label, description, instance_of, official_website, issn, era_journal_id, scopus_source_id, danish_bibliometric_research_indicator_bfi_snocno, danish_bibliometric_research_indicator_level, publisher, title, nlm_unique_id, opencitations_bibliographic_resource_id, language_of_work_or_name, country_of_origin, inception, uniprot_journal_id, jufo_id, main_subject, acnp_journal_id, crossref_journal_id, scilit_journal_id, indexed_in_bibliographic_review, issn_l, freebase_id, openalex_id]\n- Table: headquarters, Columns: [label, description, image, located_in_time_zone, viaf_id, country, located_in_the_administrative_territorial_entity, commons_category, coordinate_location, instance_of, topics_main_category, curlie_id, freebase_id, gnd_id, population, geonames_id, category_for_people_born_here, musicbrainz_area_id, encyclop\u00e6dia_britannica_online_id, locator_map_image, quora_topic_id, category_of_associated_people, area, archinform_location_id, shares_border_with, official_name, native_label, whos_on_first_id, category_for_maps, nkcr_aut_id, national_library_of_israel_j9u_id, official_website]\n- Table: stimuli_sensing_channels, Columns: [label, description, found_in_taxon, reactome_id, instance_of, cites_work, part_of, has_parts, exact_match]\n- Table: topic, Columns: [label, description, instance_of, commons_category, bncf_thesaurus_id, topics_main_category, freebase_id, library_of_congress_authority_id, mesh_descriptor_id, biblioth\u00e8que_nationale_de_france_id, quora_topic_id, jstor_topic_id, encyclop\u00e6dia_britannica_online_id, subclass_of, omegawiki_defined_meaning, microsoft_academic_id, yso_id, mesh_tree_code, national_library_of_israel_j9u_id, openalex_id, nkcr_aut_id]",
        "Response": "Table: citation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Assets (asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details) VALUES (12, 13, 14, 'machine4', 'RU', '95 vn', '2017-09-26 14:05:46', '2018-02-27 23:12:03', 'Bad condition');\nDatabase State:\n- Table: Skills_Required_To_Fix, Columns: [part_fault_id, skill_id]\n- Table: Assets, Columns: [asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details]\n- Table: Part_Faults, Columns: [part_fault_id, part_id, fault_short_name, fault_description, other_fault_details]\n- Table: Maintenance_Contracts, Columns: [maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details]\n- Table: Third_Party_Companies, Columns: [company_id, company_type, company_name, company_address, other_company_details]\n- Table: Asset_Parts, Columns: [asset_id, part_id]\n- Table: Engineer_Visits, Columns: [engineer_visit_id, contact_staff_id, engineer_id, fault_log_entry_id, fault_status, visit_start_datetime, visit_end_datetime, other_visit_details]\n- Table: Fault_Log, Columns: [fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details]\n- Table: Fault_Log_Parts, Columns: [fault_log_entry_id, part_fault_id, fault_status]",
        "Response": "Table: Assets"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, sport, country, follows, followed_by, point_in_time, edition_number, winner, event_distance) VALUES ('1947 Gent\u2013Wevelgem', 'cycling race', 'Gent\u2013Wevelgem', 'cycle sport', 'Belgium', '1946 Gent\u2013Wevelgem', '1948 Gent\u2013Wevelgem', '+1947-03-30T00:00:00Z', '9', 'Maurice Desimpelaere', NULL);\nDatabase State:\n- Table: gentwevelgem, Columns: [label, description, instance_of, sport, country, edition_number, point_in_time, follows, followed_by, winner, event_distance]\n- Table: winner, Columns: [label, description, sex_or_gender, date_of_birth, instance_of, occupation, freebase_id, image, place_of_birth, country_of_citizenship, participant_in, given_name, member_of_sports_team, sport, cycling_archives_cyclist_id, procyclingstats_cyclist_id, cyclebase_cyclist_id, m\u00e9moire_du_cyclisme_cyclist_id]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Artwork_ID, Type, Name) VALUES (3, 'Presenter Music/Variety Show', 'Loving you');\nDatabase State:\n- Table: festival_detail, Columns: [Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience]\n- Table: nomination, Columns: [Artwork_ID, Festival_ID, Result]\n- Table: artwork, Columns: [Artwork_ID, Type, Name]",
        "Response": "Table: artwork"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (eid, aid) VALUES (573284895, 4);\nDatabase State:\n- Table: flight, Columns: [flno, origin, destination, distance, departure_date, arrival_date, price, aid]\n- Table: aircraft, Columns: [aid, name, distance]",
        "Response": "Table: certificate"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Ball_by_Ball (Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler) VALUES (392229, 7, 4, 1, 3, 2, 4, 20, 18, 124);\nDatabase State:\n- Table: Bowling_Style, Columns: [Bowling_Id, Bowling_skill]\n- Table: Country, Columns: [Country_Id, Country_Name]\n- Table: Player, Columns: [Player_Id, Player_Name, DOB, Batting_hand, Bowling_skill, Country_Name]\n- Table: Crickinfo_Ball_By_Ball, Columns: [Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler]\n- Table: Rolee, Columns: [Role_Id, Role_Desc]\n- Table: Extra_Type, Columns: [Extra_Id, Extra_Name]\n- Table: Venue, Columns: [Venue_Id, Venue_Name, City_Id]\n- Table: Batsman_Scored, Columns: [Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No]\n- Table: Wicket_Taken, Columns: [Match_Id, Over_Id, Ball_Id, Player_Out, Kind_Out, Fielders, Innings_No]\n- Table: Toss_Decision, Columns: [Toss_Id, Toss_Name]\n- Table: Season, Columns: [Season_Id, Man_of_the_Series, Orange_Cap, Purple_Cap, Season_Year]",
        "Response": "Table: Crickinfo_Ball_By_Ball"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO affected_region (Region_id, Storm_ID, Number_city_affected) VALUES (2, 5, 12.0);\nDatabase State:\n- Table: affected_region, Columns: [Region_id, Storm_ID, Number_city_affected]\n- Table: region, Columns: [Region_id, Region_code, Region_name]",
        "Response": "Table: affected_region"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO sales_in_weather (date, store_nbr, item_nbr, units) VALUES ('2012-08-22', 16, 32, 0);\nDatabase State:\n- Table: relation, Columns: [store_nbr, station_nbr]",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (party_id, address_id, date_address_from, address_type_code, date_address_to) VALUES (6, 9, '2016-12-21 03:54:15', 'Delivery', '2018-02-25 07:34:22');\nDatabase State:\n- Table: Organizations, Columns: [organization_id, date_formed, organization_name, uk_vat_number]\n- Table: Parties, Columns: [party_id, payment_method_code, party_phone, party_email]\n- Table: Organization_Contact_Individuals, Columns: [individual_id, organization_id, date_contact_from, date_contact_to]\n- Table: Party_Forms, Columns: [party_id, form_id, date_completion_started, form_status_code, date_fully_completed]\n- Table: Individuals, Columns: [individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name]\n- Table: Forms, Columns: [form_id, form_type_code, service_id, form_number, form_name, form_description]\n- Table: Services, Columns: [service_id, service_type_code, service_name, service_descriptio]\n- Table: Party_Services, Columns: [booking_id, customer_id, service_id, service_datetime, booking_made_date]\n- Table: Addresses, Columns: [address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country]",
        "Response": "Table: Party_Addresses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (authID, lname, fname) VALUES (54, 'Turon', 'Aaron');\nDatabase State:\n- Table: Authorship, Columns: [authID, instID, paperID, authOrder]\n- Table: Authors, Columns: [authID, lname, fname]\n- Table: Papers, Columns: [paperID, title]\n- Table: Inst, Columns: [instID, name, country]",
        "Response": "Table: Authors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO war_in_popular_culture (label, description, instance_of, main_subject, subclass_of) VALUES ('Sri Lankan Civil War in popular culture', 'nan', 'cultural depiction', 'Sri Lankan Civil War', 'war in popular culture');\nDatabase State:\n- Table: war_in_popular_culture, Columns: [label, description, instance_of, main_subject, subclass_of]",
        "Response": "Table: war_in_popular_culture"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (City, Province, Country, River, Lake, Sea) VALUES ('Paris', 'Ile de France', 'F', 'Seine', NULL, NULL);\nDatabase State:\n- Table: geo_estuary, Columns: [River, Country, Province]\n- Table: islandIn, Columns: [Island, Sea, Lake, River]\n- Table: geo_island, Columns: [Island, Country, Province]\n- Table: geo_source, Columns: [River, Country, Province]\n- Table: borders, Columns: [Country1, Country2, Length]\n- Table: mergesWith, Columns: [Sea1, Sea2]\n- Table: politics, Columns: [Country, Independence, Dependent, Government]\n- Table: city, Columns: [Name, Country, Province, Population, Longitude, Latitude]\n- Table: economy, Columns: [Country, GDP, Agriculture, Service, Industry, Inflation]\n- Table: desert, Columns: [Name, Area, Longitude, Latitude]\n- Table: locatedOn, Columns: [City, Province, Country, Island]\n- Table: ethnicGroup, Columns: [Country, Name, Percentage]\n- Table: geo_desert, Columns: [Desert, Country, Province]\n- Table: encompasses, Columns: [Country, Continent, Percentage]\n- Table: lake, Columns: [Name, Area, Depth, Altitude, Type, River, Longitude, Latitude]\n- Table: target, Columns: [Country, Target]\n- Table: language, Columns: [Country, Name, Percentage]",
        "Response": "Table: located"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Reviews (business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length) VALUES (6615, 16755, 3, 'None', 'None', 'None', 'Medium');\nDatabase State:\n- Table: Business, Columns: [business_id, active, city, state, stars, review_count]",
        "Response": "Table: Reviews"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, model_year, country) VALUES (173, 1977, 2);\nDatabase State:\n- Table: price, Columns: [ID, price]\n- Table: production, Columns: [ID, model_year, country]\n- Table: country, Columns: [origin, country]",
        "Response": "Table: production"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler) VALUES (419126, 12, 3, 1, 4, 3, 5, 27, 33, 109);\nDatabase State:\n- Table: City, Columns: [City_Id, City_Name, Country_id]\n- Table: Season, Columns: [Season_Id, Man_of_the_Series, Orange_Cap, Purple_Cap, Season_Year]\n- Table: Extra_Runs, Columns: [Match_Id, Over_Id, Ball_Id, Extra_Type_Id, Extra_Runs, Innings_No]\n- Table: Wicket_Taken, Columns: [Match_Id, Over_Id, Ball_Id, Player_Out, Kind_Out, Fielders, Innings_No]\n- Table: Outcome, Columns: [Outcome_Id, Outcome_Type]\n- Table: Rolee, Columns: [Role_Id, Role_Desc]\n- Table: Player, Columns: [Player_Id, Player_Name, DOB, Batting_hand, Bowling_skill, Country_Name]\n- Table: Toss_Decision, Columns: [Toss_Id, Toss_Name]\n- Table: Extra_Type, Columns: [Extra_Id, Extra_Name]\n- Table: Player_Match, Columns: [Match_Id, Player_Id, Role_Id, Team_Id]\n- Table: Out_Type, Columns: [Out_Id, Out_Name]\n- Table: Country, Columns: [Country_Id, Country_Name]\n- Table: Bowling_Style, Columns: [Bowling_Id, Bowling_skill]\n- Table: Batting_Style, Columns: [Batting_Id, Batting_hand]\n- Table: Team, Columns: [Team_Id, Team_Name]\n- Table: Venue, Columns: [Venue_Id, Venue_Name, City_Id]\n- Table: Match, Columns: [Match_Id, Team_1, Team_2, Match_Date, Season_Id, Venue_Id, Toss_Winner, Toss_Decide, Win_Type, Win_Margin, Outcome_type, Match_Winner, Man_of_the_Match]\n- Table: Win_By, Columns: [Win_Id, Win_Type]\n- Table: Umpire, Columns: [Umpire_Id, Umpire_Name, Umpire_Country]\n- Table: Batsman_Scored, Columns: [Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No]",
        "Response": "Table: Ball_by_Ball"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('hypothetical protein HI0105', 'microbial gene found in Haemophilus influenzae Rd KW20', '951007', 'gene', 'Hypothetical protein HI0105', 'Haemophilus influenzae Rd KW20', 'forward strand', '113219', '112464', 'gene', 'HI0105');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO person (p_id, professor, student, hasPosition, inPhase, yearsInProgram) VALUES (315, 0, 1, '0', '0', '0');\nDatabase State:\n- Table: advisedBy, Columns: [p_id, p_id_dummy]\n- Table: Student_Progress, Columns: [p_id, professor, student, hasPosition, inPhase, yearsInProgram]",
        "Response": "Table: Student_Progress"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, refseq_protein_id, found_in_taxon, encoded_by, part_of, instance_of, uniprot_protein_id) VALUES ('Hypothetical protein Mb0988c', 'microbial protein found in Mycobacterium bovis AF2122/97', 'NP_854645', 'Mycobacterium bovis AF2122/97', 'hypothetical protein Mb0988c', 'Protein of unknown function DUF1023', 'protein', 'P64778');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, subclass_of, found_in_taxon, entrez_gene_id, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: Proteins_of_Unknown_Function, Columns: [label, description, refseq_protein_id, found_in_taxon, encoded_by, part_of, instance_of, uniprot_protein_id]\n- Table: encodes, Columns: [label, description, refseq_protein_id, found_in_taxon, encoded_by, part_of, instance_of, uniprot_protein_id]",
        "Response": "Table: Proteins_of_Unknown_Function"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO perpetrator (Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured) VALUES (4, 6, '09.20 Sep. 20', 1994.0, 'Beijing', 'China', 23, 80);\nDatabase State:\n- Table: ViolentIncidents, Columns: [Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured]\n- Table: people, Columns: [People_ID, Name, Height, Weight, Home_Town]",
        "Response": "Table: ViolentIncidents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO radix (label, description, instance_of, commons_category, numeric_value, unicode_character, kit_linked_open_numbers_id, prime_factor, pronunciation_audio, number_of_decimal_digits, code, omegawiki_defined_meaning, babelnet_id) VALUES ('7', 'natural number', 'prime number', '7 (number)', 7.0, '7', '7', '7.0', 'Ady-7.oga', 1.0, '\u0bed', '7004.0', '00000129n');\nDatabase State:\n- Table: prime_factor, Columns: [label, description, instance_of, commons_category, numeric_value, unicode_character, kit_linked_open_numbers_id, prime_factor, encyclop\u00e6dia_britannica_online_id, label_in_sign_language, pronunciation_audio, number_of_decimal_digits, code, spoken_text_audio, code_image, omegawiki_defined_meaning, babelnet_id, personality_database_profile_id, factgrid_item_id, pixiv_encyclopedia_id, image]",
        "Response": "Table: radix"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('50S ribosomal protein L11 TM0454', 'microbial gene found in Thermotoga maritima MSB8', '897484', 'gene', '50S ribosomal protein L11    TM0454', 'Thermotoga maritima MSB8', 'forward strand', '476394.0', '475969.0', 'gene', 'TM0454');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, subclass_of, entrez_gene_id, found_in_taxon, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('hypothetical protein NRG857_20705', 'microbial gene found in Escherichia coli O83:H1 str. NRG 857C', 'gene', '12876660', 'Escherichia coli O83:H1 str. NRG 857C', 'NRG857_20705', 'Hypothetical protein NRG857_20705', 'gene', '4420106', 'forward strand', '4419810');\nDatabase State:\n- Table: Genes, Columns: [label, description, subclass_of, entrez_gene_id, found_in_taxon, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: endoribonuclease_antitoxin_ghos_superfamily, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO genre (g_name, rating, most_popular_in) VALUES ('pop', '9', 'America');\nDatabase State:\n- Table: artist, Columns: [artist_name, country, gender, preferred_genre]\n- Table: genre, Columns: [g_name, rating, most_popular_in]",
        "Response": "Table: genre"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (order_id, customer_id, order_date, order_status_code) VALUES (11, 10, '1993-05-08 14:12:06', 'Completed');\nDatabase State:\n- Table: Customers, Columns: [customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email]\n- Table: Products, Columns: [product_id, product_type_code, product_name, product_price]\n- Table: Contacts, Columns: [contact_id, customer_id, gender, first_name, last_name, contact_phone]",
        "Response": "Table: Customer_Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO subjects (case_number, race, gender, last_name, first_name, full_name) VALUES ('64249X', 'W', 'M', 'Mustard', 'Richard', 'Mustard, Richard');\nDatabase State:\n- Table: incidents, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]\n- Table: officers, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: Defendants, Columns: [case_number, race, gender, last_name, first_name, full_name]",
        "Response": "Table: Defendants"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, instance_of, competition_class, part_of, follows, followed_by, point_in_time, sport) VALUES ('1969 European Rowing Championships \u2013 men''s coxed four', 'rowing event', 'rowing event', 'men''s coxed four', '1969 European Rowing Championships', '1967 European Rowing Championships \u2013 men''s coxed four', '1971 European Rowing Championships \u2013 men''s coxed four', '+1969-00-00T00:00:00Z', 'rowing');\nDatabase State:\n- Table: competition_class, Columns: [label, description, instance_of, competition_class, short_name, sport, catalog_code]\n- Table: RowingEvents, Columns: [label, description, instance_of, competition_class, part_of, follows, followed_by, point_in_time, sport]\n- Table: 1971_european_rowing_championships, Columns: [label, description, instance_of, competition_class, part_of, described_at_url, follows, followed_by, point_in_time, sport]\n- Table: followed_by, Columns: [label, description, instance_of, competition_class, part_of, described_at_url, follows, followed_by, point_in_time, sport]",
        "Response": "Table: RowingEvents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Airlines (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY) VALUES ('2018/8/8', 19805, 'N958NN', 362, 12892, 1289208, 32575, 'LAX', 13930, 1393006, 30977, 'ORD', 59, 113, 14, 14, 719, 6, 6, 0, NULL, 254, 246, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Airports, Columns: [Code, Description]\n- Table: Airlines, Columns: [FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY]\n- Table: Air_Carriers, Columns: [Code, Description]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of) VALUES ('GTP-binding protein Era SDY_2807', 'microbial protein found in Shigella dysenteriae Sd197', 'GTP-binding protein Era SDY_2807', 'Q32CV5', 'ribosome biogenesis', 'RNA binding', 'plasma membrane', 'Era-type guanine nucleotide-binding (G) domain', 'Shigella dysenteriae Sd197', 'YP_404341', 'protein', 'K homology domain superfamily, prokaryotic type');\nDatabase State:\n- Table: Protein_GTP_Binding_Family, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: Protein_GTP_Binding_Family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (userid, movieid, rating) VALUES (1501, 2192733, '3');\nDatabase State:\n- Table: movies2directors, Columns: [movieid, directorid, genre]\n- Table: movies2actors, Columns: [movieid, actorid, cast_num]\n- Table: users, Columns: [userid, age, u_gender, occupation]\n- Table: movies, Columns: [movieid, year, isEnglish, country, runningtime]\n- Table: directors, Columns: [directorid, d_quality, avg_revenue]",
        "Response": "Table: u2base"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, coordinate_location, country, heritage_designation, instance_of, located_in_the_administrative_territorial_entity, national_heritage_list_for_england_number, historic_county, os_grid_reference) VALUES ('Ha Ha Forming Boundary Wall To North Terrace With Returned East End', 'ha-ha in Bramham cum Oglethorpe, Leeds, West Yorkshire, UK', '53.871015', 'United Kingdom', 'Grade II listed building', 'ha-ha', 'Bramham cum Oglethorpe', '1300761.0', 'Yorkshire', 'SE4063641821');\nDatabase State:\n- Table: ha_ha, Columns: [label, description, coordinate_location, country, heritage_designation, instance_of, located_in_the_administrative_territorial_entity, national_heritage_list_for_england_number, historic_county, os_grid_reference]",
        "Response": "Table: ha_ha"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO winner (label, description, sex_or_gender, instance_of, freebase_id, date_of_birth, place_of_birth, country_of_citizenship, occupation, sport, driver_database_driver_id, given_name, family_name, motorsportstatscom_driver_id, racing_reference_driver_id, commons_category, image) VALUES ('Reg Parnell', 'racecar driver', 'male', 'human', '/m/04kylb', '+1911-07-02T00:00:00Z', 'Derby', 'United Kingdom', 'Formula One driver', 'auto racing', 'reg-parnell', 'Reginald', 'Parnell', 'reg-parnell', 'Reg_Parnell', 'Reg Parnell', 'Autoraces te Zandvoort, Bestanddeelnr 902-9002.jpg');\nDatabase State:\n- Table: given_name, Columns: [label, description, different_from, family_name_identical_to_this_given_name, native_label, language_of_work_or_name, commons_category, writing_system, instance_of, soundex, cologne_phonetics, caverphone, attested_in, said_to_be_the_same_as, nederlandse_voornamenbank_id]\n- Table: winner, Columns: [label, description, sex_or_gender, instance_of, freebase_id, date_of_birth, place_of_birth, country_of_citizenship, occupation, sport, driver_database_driver_id, given_name, family_name, motorsportstatscom_driver_id, racing_reference_driver_id, commons_category, image]\n- Table: place_of_birth, Columns: [label, description, commons_category, country, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, freebase_id, instance_of, geonames_id, image, population, quora_topic_id, postal_code, whos_on_first_id]\n- Table: performer_of_the_fastest_lap, Columns: [label, description, sex_or_gender, date_of_birth, freebase_id, instance_of, country_of_citizenship, given_name, occupation, place_of_birth, commons_category, driver_database_driver_id, image, sport, motorsportstatscom_driver_id, family_name]\n- Table: pole_position, Columns: [label, description, sex_or_gender, date_of_birth, instance_of, place_of_birth, image, country_of_citizenship, given_name, occupation, family_name, commons_category, sport, motorsportstatscom_driver_id, racing_reference_driver_id, driver_database_driver_id]\n- Table: new_zealand_grand_prix, Columns: [label, description, pole_position, instance_of, point_in_time, country, winner, event_distance, fastest_lap, google_knowledge_graph_id]\n- Table: family_name, Columns: [label, description, instance_of, different_from, commons_category, native_label, writing_system, soundex, caverphone, wolfram_language_entity_code, g\u00e9opatronyme_id, geneanet_family_name_id]\n- Table: administrative_territorial_entity, Columns: [label, description, country, topics_main_category, instance_of, locator_map_image, area, located_in_the_administrative_territorial_entity, shares_border_with, coordinate_location, population, inaturalist_place_id, image, geonames_id, official_website, commons_category, capital, openstreetmap_relation_id]",
        "Response": "Table: winner"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, freebase_id, instance_of, follows, followed_by, country, sport, organizer, point_in_time, edition_number, start_time, end_time) VALUES ('1999 Belgian Open', 'tennis tournament edition', '/m/0hqzxgr', 'Diamond Games', '1993 Belgian Ladies Open', '2000 Mexx Sport Benelux Open', 'Belgium', 'tennis', 'Women''s Tennis Association', '+1999-00-00T00:00:00Z', '6', '+1999-05-08T00:00:00Z', '+1999-05-16T00:00:00Z');\nDatabase State:\n- Table: diamond_games, Columns: [label, description, freebase_id, instance_of, follows, followed_by, country, sport, organizer, point_in_time, edition_number, start_time, end_time]",
        "Response": "Table: diamond_games"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name) VALUES (7, '2015-09-05 10:49:02', '2017-07-17 23:13:31', 'darrin56', '35cd4a47a3', 'Jewel', 'Marianne', 'Hodkiewicz');\nDatabase State:\n- Table: Student_Course_Enrolment, Columns: [registration_id, student_id, course_id, date_of_enrolment, date_of_completion]\n- Table: Students, Columns: [student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name]",
        "Response": "Table: Students"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Problem_Log (problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details) VALUES (3, 12, 1, 'GUI', 'Solved', '1974-12-11 01:06:22', 'b', 'j', 'e');\nDatabase State:\n- Table: Problems, Columns: [problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details]\n- Table: Staff, Columns: [staff_id, staff_first_name, staff_last_name, other_staff_details]\n- Table: Problem_Category_Codes, Columns: [problem_category_code, problem_category_description]\n- Table: Support_Log, Columns: [problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details]\n- Table: Problem_Status_Codes, Columns: [problem_status_code, problem_status_description]",
        "Response": "Table: Support_Log"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student_Course_Enrolment (registration_id, student_id, course_id, date_of_enrolment, date_of_completion) VALUES (8, 15, 11, '2017-12-07 02:21:13', '2018-02-27 20:06:06');\nDatabase State:\n- Table: Courses, Columns: [course_id, author_id, subject_id, course_name, course_description]",
        "Response": "Table: Student_Course_Enrolment"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees) VALUES (1, 'State', '1789', 1, 9.96000000000000086, 30266.0);\nDatabase State:\n- Table: management, Columns: [department_ID, head_ID, temporary_acting]\n- Table: head, Columns: [head_ID, name, born_state, age]",
        "Response": "Table: department"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, coordinate_location, freebase_id, instance_of, located_in_the_administrative_territorial_entity, population) VALUES ('Perth and Kinross', 'council area of Scotland', 'United Kingdom', '56.41666667', '/m/0124jj', 'Scottish council area', 'Scotland', 151950.0);\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, country, coordinate_location, freebase_id, instance_of, located_in_the_administrative_territorial_entity, population]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, country, coordinate_location, freebase_id, instance_of, located_in_the_administrative_territorial_entity, population) VALUES ('La Vall de Bo\u00ed', 'municipality in the province of Lleida, in the autonomous community of Catalonia, Spain', 'Spain', '42.507222222222', '/m/0fq1fk', 'municipality of Catalonia', 'Alta Ribagor\u00e7a', 1090.0);\nDatabase State:\n- Table: buttress_dam, Columns: [label, description, commons_category, coordinate_location, instance_of, image, country, located_in_the_administrative_territorial_entity, drainage_basin, length]\n- Table: TerritorialUnits, Columns: [label, description, country, coordinate_location, freebase_id, instance_of, located_in_the_administrative_territorial_entity, population]",
        "Response": "Table: TerritorialUnits"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, twinned_administrative_body, located_in_the_administrative_territorial_entity, country, coordinate_location, freebase_id, instance_of, geonames_id, topics_main_category, commons_category, official_website, image, page_banner, population, area, locator_map_image, openstreetmap_relation_id, postal_code, whos_on_first_id, elevation_above_sea_level, gnd_id, musicbrainz_area_id, library_of_congress_authority_id, category_of_associated_people, inception, head_of_government, quora_topic_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, viaf_id, different_from, rkd_thesaurus_id, national_library_of_israel_j9u_id, worldcat_identities_id) VALUES ('Dublin', 'capital and largest city of Ireland', 'Vilnius', 'County Dublin', 'Republic of Ireland', '53.34972222222222', '/m/02cft', 'capital city', '2964574', 'Category:Dublin (city)', 'Dublin', 'http://www.dublincity.ie', 'Liffeyeast.jpg', 'Dublin banner Street scene.jpg', 553165.0, 114990000.0, 'Ei-map.svg', '1109531.0', 'D1-18, 20, 22, 24, D6W', '101751737.0', 20.0, '4013170-1', '462e7952-4fa9-43cd-bc24-2c5c9cd5dd47', 'n79065753', 'Category:People from Dublin (city)', '+0841-00-00T00:00:00Z', 'Paul McAuliffe', 'Dublin-Ireland', '853.0', 'place/Dublin', '150028417.0', 'Dublin', '2032.0', '9.870075642302052e+17', 'lccn-n79065753');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (company_id, company_type, company_name, company_address, other_company_details) VALUES (4, 'Maintenance Contractor', 'Dooley-Langosh', '9576 Jacynthe Point Suite 747', 'Albania');\nDatabase State:\n- Table: Asset_Parts, Columns: [asset_id, part_id]\n- Table: Engineer_Skills, Columns: [engineer_id, skill_id]\n- Table: Fault_Log, Columns: [fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details]\n- Table: Parts, Columns: [part_id, part_name, chargeable_yn, chargeable_amount, other_part_details]\n- Table: Skills_Required_To_Fix, Columns: [part_fault_id, skill_id]\n- Table: Fault_Log_Parts, Columns: [fault_log_entry_id, part_fault_id, fault_status]\n- Table: Engineer_Visits, Columns: [engineer_visit_id, contact_staff_id, engineer_id, fault_log_entry_id, fault_status, visit_start_datetime, visit_end_datetime, other_visit_details]\n- Table: Maintenance_Contracts, Columns: [maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details]\n- Table: Skills, Columns: [skill_id, skill_code, skill_description]\n- Table: Part_Faults, Columns: [part_fault_id, part_id, fault_short_name, fault_description, other_fault_details]\n- Table: Staff, Columns: [staff_id, staff_name, gender, other_staff_details]\n- Table: Maintenance_Engineers, Columns: [engineer_id, company_id, first_name, last_name, other_details]\n- Table: Assets, Columns: [asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details]",
        "Response": "Table: Third_Party_Companies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encodes (label, description, encoded_by, uniprot_protein_id, ensembl_protein_id, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of) VALUES ('S100 calcium binding protein A7A', 'mammalian protein found in Homo sapiens', 'S100A7A', 'Q86SG5', 'ENSP00000329008', 'metal ion binding', 'cytoplasm', 'EF-hand domain', 'Homo sapiens', 'NP_789793', 'protein', 'protein S100-A7');\nDatabase State:\n- Table: encodes, Columns: [label, description, encoded_by, uniprot_protein_id, ensembl_protein_id, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score) VALUES (803, 18, 2015, 730);\nDatabase State:\n- Table: university_year, Columns: [university_id, year, num_students, student_staff_ratio, pct_international_students, pct_female_students]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, date, violation_type_id, risk_category, description) VALUES (69957, '2014-04-25', '103152', 'Low Risk', 'Unclean unmaintained or improperly constructed toilet facilities');\nDatabase State:\n- Table: inspections, Columns: [business_id, score, date, type]",
        "Response": "Table: violations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, gene_ontology_id, subclass_of, exact_match, instance_of) VALUES ('tRNA catabolic process', 'The chemical reactions and pathways resulting in the breakdown of tRNA, transfer RNA, a class of relatively small RNA molecules responsible for mediating the insertion of amino acids into the sequence of nascent polypeptide chains during protein synt', 'GO:0016078', 'tRNA metabolic process', 'http://purl.obolibrary.org/obo/GO_0016078', 'biological process');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: regulates_molecular_biology"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('dithiobiotin synthetase SCO1246', 'microbial gene found in Streptomyces coelicolor A3(2)', 'Streptomyces coelicolor A3(2)', '1096669', 'gene', 'SCO1246', 'Dithiobiotin synthetase SCO1246', 'gene', '1319508', 'forward strand', '1318792');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, coat_of_arms_image, located_in_the_administrative_territorial_entity, coordinate_location, commons_category, instance_of, image, area, geonames_id, ine_id_portugal, openstreetmap_relation_id, population, factgrid_item_id, flag_image, freebase_id, official_website, topics_main_category, postal_code, located_in_time_zone, contains_the_administrative_territorial_entity, shares_border_with, inaturalist_place_id) VALUES ('Const\u00e2ncia', 'municipality and town of Portugal', 'Portugal', 'CNS.png', 'Santar\u00e9m', '39.483333333333', 'Const\u00e2ncia', 'municipality of Portugal', 'Rua em Const\u00e2ncia.JPG', 80.37000000000000454, '8010601.0', '1408', '5400341', 4056.0, 'Q358454', 'Pt-ctc1.png', '/m/05xbf8', 'http://www.cm-constancia.pt/', 'Category:Const\u00e2ncia', '2250', 'UTC\u00b100:00', 'Santa Margarida da Coutada', 'Abrantes', '18390.0');\nDatabase State:\n- Table: linha_da_beira_baixa, Columns: [label, description, instance_of, country, part_of, coordinate_location, located_in_the_administrative_territorial_entity, located_in_time_zone, connecting_line, google_knowledge_graph_id, commons_category, image]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO flight (id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id) VALUES (1, 'M2-F1 #0', 'March 1, 1963', 'Thompson', 135.0, 0.0, 1, 2);\nDatabase State:\n- Table: airport, Columns: [id, City, Country, IATA, ICAO, name]\n- Table: Airlines_Flights, Columns: [id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id]",
        "Response": "Table: Airlines_Flights"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO enrolled (name, school, month) VALUES ('student533', 'ucsd', 4);\nDatabase State:\n- Table: bool, Columns: [name]\n- Table: no_payment_due, Columns: [name, bool]\n- Table: longest_absense_from_school, Columns: [name, month]\n- Table: disabled, Columns: [name]\n- Table: unemployed, Columns: [name]\n- Table: male, Columns: [name]\n- Table: person, Columns: [name]\n- Table: enlist, Columns: [name, organ]",
        "Response": "Table: enrolled"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (city_id, city_name, state, population, area) VALUES (593, 'Apple Valley', 'California', 54239, 73.29999999999999716);\nDatabase State:\n- Table: customer, Columns: [cust_id, cust_name, annual_revenue, cust_type, address, city, state, zip, phone]\n- Table: city, Columns: [city_id, city_name, state, population, area]",
        "Response": "Table: city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, official_website, freebase_id, issn, era_journal_id, oclc_control_number, coden, scopus_source_id, danish_bibliometric_research_indicator_bfi_snocno, danish_bibliometric_research_indicator_level, publisher, title, iso_4_abbreviation, opencitations_bibliographic_resource_id, nlm_unique_id, language_of_work_or_name, inception, country_of_origin, uniprot_journal_id, main_subject, jufo_id, acnp_journal_id, crossref_journal_id, issn_l, indexed_in_bibliographic_review, openalex_id, scilit_journal_id) VALUES ('Journal of Urology', 'journal', 'scientific journal', 'http://www.jurology.com', '/m/09v2w1p', '0022-5347', '16538', 'nan', 'nan', '19975', '6258', '2', 'Elsevier BV', 'The Journal of Urology', 'J. Urol.', '991', '0376374', 'English', '+1917-01-01T00:00:00Z', 'United States of America', '1222', 'urology', '62082', '2393', '21151', '0022-5347', 'Scopus', 'V30525748', '35147.0');\nDatabase State:\n- Table: smooth_muscle_contraction, Columns: [label, description, found_in_taxon, reactome_id, instance_of, part_of, exact_match, has_parts, cites_work]\n- Table: citation, Columns: [label, description, pages, title, author_name_string, publication_date, issue, volume, published_in, instance_of, pubmed_id, doi, language_of_work_or_name]",
        "Response": "Table: publishing"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, ensembl_protein_id, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of) VALUES ('S100 calcium binding protein A13', 'mammalian protein found in Rattus norvegicus', 'S100a13', 'D3ZTB5', 'nan', 'molecular function', 'cellular component', 'S100/CaBP-9k-type, calcium binding, subdomain', 'brown rat', 'NP_001178536', 'protein', 'Protein S100-A13');\nDatabase State:\n- Table: s100_cabp_9k_type_calcium_binding_subdomain_protein_family, Columns: [label, description, encoded_by, uniprot_protein_id, ensembl_protein_id, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, ensembl_gene_id, ensembl_transcript_id, homologene_id, refseq_rna_id, encodes, found_in_taxon, exact_match, strand_orientation, genomic_end, genomic_start, chromosome, instance_of, expressed_in]\n- Table: chromosome, Columns: [label, description, refseq_genome_id, found_in_taxon, instance_of]\n- Table: Proteins, Columns: [label, description, encoded_by, uniprot_protein_id, ensembl_protein_id, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: cellular_component, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]\n- Table: part, Columns: [label, description, interpro_id, instance_of, subclass_of]",
        "Response": "Table: Proteins"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Cinema_ID, Film_ID, Date, Show_times_per_day, Price) VALUES (9, 4, '20 May', 5, 9.99000000000000021);\nDatabase State:\n- Table: cinema, Columns: [Cinema_ID, Name, Openning_year, Capacity, Location]\n- Table: schedule, Columns: [Cinema_ID, Film_ID, Date, Show_times_per_day, Price]",
        "Response": "Table: schedule"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Employee_ID, Year_awarded, Bonus) VALUES ('2', '2015', 3200.0);\nDatabase State:\n- Table: shop, Columns: [Shop_ID, Name, Location, District, Number_products, Manager_name]\n- Table: hiring, Columns: [Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "Response": "Table: evaluation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('carboxynorspermidine dehydrogenase RSP_1475', 'microbial gene found in Rhodobacter sphaeroides 2.4.1', '3718770', 'gene', 'Carboxynorspermidine dehydrogenase RSP_1475', 'Rhodobacter sphaeroides 2.4.1', 'forward strand', '60985', '59747', 'gene', 'RSP_1475');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Date_received, Product, Sub_product, Issue, Sub_issue, Consumer_complaint_narrative, Tags, Consumer_consent_provided?, Submitted_via, Date_sent_to_company, Company_response_to_consumer, Timely_response?, Consumer_disputed?, Complaint_ID, Client_ID) VALUES ('2016-05-05', 'Bank account or service', 'Checking account', 'Using a debit or ATM card', NULL, 'I just learned of an overdraft on my account and unaware of the occurance. I believe the transaction was fraudulently done. I currently have a temporary debit card. I currently have a negative account with Eagle National Bank now in the amount of about {$350.00}.', 'Servicemember', 'Consent provided', 'Web', '2016-05-05', 'Closed with non-monetary relief', 'Yes', 'No', 'CR1911696', 'C00004650');\nDatabase State:\n- Table: state, Columns: [StateCode, State, Region]\n- Table: callcenterlogs, Columns: [Date_received, Complaint_ID, rand_client, phonefinal, vru+line, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time]",
        "Response": "Table: events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, performer, record_label, instance_of, musicbrainz_release_group_id, follows, followed_by, genre, publication_date, form_of_creative_work, part_of, distribution_format, apple_music_album_id_us_version, deezer_album_id, spotify_album_id, genius_album_id, youtube_playlist_id) VALUES ('Autopsie Vol. 2', 'album by Booba', 'Booba', 'Tallac Records', 'album', '8a0c3adb-1d1d-3aa7-b73e-bea570f1d443', 'Ouest Side', '0.9', 'French hip hop', '+2007-01-22T00:00:00Z', 'mixtape', 'Booba discography', 'music streaming', 'nan', '23225.0', 'nan', 'Booba/Autopsie-vol-2', 'PL3TcBeohSzh_bVFynKZmLgx_-MZLVstQD');\nDatabase State:\n- Table: booba_discography, Columns: [label, description, instance_of, record_label, performer, follows, followed_by, genre, publication_date, form_of_creative_work, part_of, distribution_format, genius_album_id, deezer_album_id, youtube_playlist_id, spotify_album_id]\n- Table: follows, Columns: [label, description, performer, record_label, instance_of, musicbrainz_release_group_id, discogs_master_id, genre, followed_by, spotify_album_id, follows, distribution_format, publication_date, form_of_creative_work, part_of, apple_music_album_id_us_version, deezer_album_id, genius_album_id, youtube_playlist_id]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County) VALUES ('7', 'New Prairie 1', 'New Carlisle', 'Cougars', 852, 'AAA', 'AAAA', '46 LaPorte 71 St. Joseph');\nDatabase State:\n- Table: High_Schools, Columns: [School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County]",
        "Response": "Table: High_Schools"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Cinema_ID, Film_ID, Date, Show_times_per_day, Price) VALUES (6, 5, '2 Aug', 4, 12.99000000000000021);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: schedule"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, sport, country) VALUES ('BC D\u00fcsseldorf', 'badminton club', 'badminton club', 'badminton', 'Germany');\nDatabase State:\n- Table: head_of_state, Columns: [label, description, commons_category, viaf_id, isni, library_of_congress_authority_id, gnd_id, country_of_citizenship, image, place_of_birth, date_of_birth, occupation, position_held, educated_at, instance_of, freebase_id, munzinger_person_id, languages_spoken_written_or_signed, given_name, native_language, award_received, signature, family_name, name_in_native_language, sex_or_gender, worldcat_identities_id, opensanctions_id]\n- Table: political_border, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, country, coordinate_location, topics_main_category, instance_of, freebase_id, geonames_id, shares_border_with, official_website, locator_map_image, openstreetmap_relation_id, area, archinform_location_id, image, inaturalist_place_id, whos_on_first_id, population, musicbrainz_area_id]\n- Table: BadmintonClubs, Columns: [label, description, instance_of, sport, country]",
        "Response": "Table: BadmintonClubs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname) VALUES ('nm0566552', 'Kathy McCormick', NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Credit, Columns: [episode_id, person_id, category, role, credited]\n- Table: Episode, Columns: [episode_id, series, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Celebrities, Columns: [person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]",
        "Response": "Table: Celebrities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO twitter (TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID) VALUES ('tw-687402441659281409', 'Wednesday', 15, 13, 'en', 'TRUE', 88, 18, 0, 14, 0.0, 'RT @VentureBeat: Amazons next AWS data center region will be in Canada http://venturebeat.com/2016/01/13/amazons-next-aws-data-center-region-will-be-in-canada/ http://twitter.com/VentureBeat/status/687393160855687168/photo/1', 3753, 'tw-62545512');\nDatabase State:\n- Table: user, Columns: [UserID, Gender]\n- Table: twitter, Columns: [TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID]\n- Table: location, Columns: [LocationID, Country, State, StateCode, City]",
        "Response": "Table: twitter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO multilateral_trading_facility (label, description, country, instance_of, mic_market_code, official_website) VALUES ('Warsaw Stock Exchange/bonds/treasury Bond/bondspot/B2C Market/MTF', 'Multilateral Trading Facility in Poland', 'Poland', 'multilateral trading facility', 'TBSA', 'https://www.bondspot.pl');\nDatabase State:\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, new_york_times_topic_id, babelnet_id, geonames_id, gnd_id, unicode_character, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, coordinates_of_westernmost_point, geography_of_topic, stw_thesaurus_for_economics_id, iso_3166_1_alpha_3_code, office_held_by_head_of_government, quora_topic_id, curlie_id, country, native_label, basic_form_of_government, musicbrainz_area_id, has_quality, coat_of_arms_image, uic_alphabetical_country_code, mesh_descriptor_id, located_in_or_next_to_body_of_water, insee_countries_and_foreign_territories_code, diplomatic_relation, highest_judicial_authority, ituisoiec_object_identifier, commons_gallery, inception, viaf_id, civicus_monitor_country_entry, nuts_code, history_of_topic, gran_enciclop\u00e8dia_catalana_id, freebase_id, replaces, subreddit, continent, capital, coat_of_arms, demonym, geoshape, openstreetmap_relation_id, wipo_st3, coordinates_of_northernmost_point, coordinates_of_easternmost_point, nkcr_aut_id, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, flag_image, marriageable_age, topics_main_category, le_monde_diplomatique_subject_id, head_of_state, biblioth\u00e8que_nationale_de_france_id, category_of_people_buried_here, locator_map_image, bbc_things_id, age_of_majority, dewey_decimal_classification, area, head_of_government, fast_id, ioc_country_code, member_of, official_name, unemployment_rate, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, gs1_country_code, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, located_in_time_zone, category_for_people_who_died_here, yso_id, anthem, office_held_by_head_of_state, life_expectancy, part_of, commons_category, top_level_internet_domain, shares_border_with, instance_of, highest_point, category_for_people_born_here, short_name, number_of_out_of_school_children, driving_side, uic_numerical_country_code, on_focus_list_of_wikimedia_project, lowest_point, treccani_id, iso_3166_1_numeric_code, official_language, pronunciation_audio, idref_id, giant_bomb_id, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, statoids_id, library_of_congress_authority_id, iso_3166_1_alpha_2_code, flag, coordinate_location, fips_10_4_countries_and_regions, described_by_source, isni, brockhaus_enzyklop\u00e4die_online_id, klexikon_article_id, loc_and_marc_vocabularies_id, language_used, iab_code, legislative_body, comic_vine_id, category_of_associated_people, whos_on_first_id, world_encyclopedia_of_puppetry_arts_id, dr_topic_id, inaturalist_place_id, omegawiki_defined_meaning, hds_id, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, online_pwn_encyclopedia_id, eurovoc_id, worldcat_identities_id, motto_text, open_data_portal, kbpedia_id, grove_art_online_id, store_norske_leksikon_id, rkd_thesaurus_id, pm20_geo_code, interlingual_index_id, jewish_encyclopedia_id_russian, central_bank, bbc_news_topic_id, economy_of_topic, tasteatlas_id, sapa_id, bhcl_uuid, uk_parliament_thesaurus_id, github_topic, wordnet_31_synset_id, namuwiki_id, demographics_of_topic, joconde_location_id, national_library_of_israel_j9u_id, zhihu_topic_id, idaigazetteer_id, krugosvet_article, schoenberg_database_of_manuscripts_place_id, the_world_factbook_country_id, colon_classification, democracy_index, nese_id, der_spiegel_topic_id, museum_digital_place_id, ysa_id, postimees_topic_id, yle_topic_id, wikisimpsons_id, den_store_danske_id, urban_electric_transit_country_id, hashtag, m49_code, s\u00fcddeutsche_zeitung_topic_id, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, gini_coefficient, official_website, nalt_id, national_library_of_israel_id_old, vat_rate]\n- Table: political_border, Columns: [label, description, country, located_in_the_administrative_territorial_entity, commons_category, coat_of_arms_image, coordinate_location, topics_main_category, instance_of, freebase_id, geonames_id, shares_border_with, official_website, area, capital, locator_map_image, population, archinform_location_id, openstreetmap_relation_id, inaturalist_place_id, image]\n- Table: place_of_birth, Columns: [label, description, official_website, country, instance_of, located_in_the_administrative_territorial_entity, commons_category, image, viaf_id, gnd_id, library_of_congress_authority_id, coordinate_location, topics_main_category, freebase_id, geonames_id, quora_topic_id, nkcr_aut_id, worldcat_identities_id, online_pwn_encyclopedia_id, national_library_of_israel_j9u_id]\n- Table: capital_city, Columns: [label, description, twinned_administrative_body, located_in_the_administrative_territorial_entity, country, instance_of, coat_of_arms_image, commons_category, coordinate_location, page_banner, topics_main_category, freebase_id, musicbrainz_area_id, geonames_id, gnd_id, category_for_people_who_died_here, category_of_associated_people, capital_of, viaf_id, image, official_website, commons_gallery, population, located_in_time_zone, elevation_above_sea_level, area, postal_code, encyclop\u00e6dia_britannica_online_id, great_russian_encyclopedia_online_id, located_in_or_next_to_body_of_water, archinform_location_id, official_name, whos_on_first_id, described_by_source, library_of_congress_authority_id, category_for_maps, nkcr_aut_id, worldcat_identities_id, locator_map_image, factgrid_item_id, national_library_of_israel_j9u_id, store_norske_leksikon_id, online_pwn_encyclopedia_id]\n- Table: part, Columns: [label, description, commons_category, topics_main_category, gnd_id, freebase_id, instance_of, quora_topic_id, coordinate_location, has_parts, viaf_id, locator_map_image, worldcat_identities_id, den_store_danske_id]",
        "Response": "Table: multilateral_trading_facility"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, encoded_by, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of) VALUES ('Peptidoglycan-binding outer membrane protein GSU0360', 'microbial protein found in Geobacter sulfurreducens PCA', 'Q74G87', 'peptidoglycan-binding outer membrane protein GSU0360', 'calcium ion binding', 'Thrombospondin, type 3-like repeat', 'Geobacter sulfurreducens PCA', 'NP_951419', 'protein', 'Outer membrane protein/outer membrane enzyme PagP,  beta-barrel');\nDatabase State:\n- Table: ProteinRepeatFeatures, Columns: [label, description, uniprot_protein_id, encoded_by, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of]",
        "Response": "Table: ProteinRepeatFeatures"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, coordinate_location, country, instance_of, area, described_at_url, inception, located_in_the_administrative_territorial_entity, code, location, geoshape, inaturalist_place_id, official_name) VALUES ('Sonnebierg', 'Nature reserve in Luxembourg', '49.66244', 'Luxembourg', 'protected zones of national interest', 15.02999999999999937, 'http://legilux.public.lu/eli/etat/leg/rgd/1989/07/31/n4/jo', '+1989-07-31T00:00:00Z', 'Walferdange', 'PS 04', 'Walferdange', 'Data:ZPIN Sonnebierg.map', '157316', 'Sonnebierg');\nDatabase State:\n- Table: capital_city, Columns: [label, description, country, instance_of, capital_of, population]\n- Table: administrative_centre, Columns: [label, description, commons_category, coordinate_location, country, instance_of, topics_main_category, freebase_id, geonames_id, viaf_id, elevation_above_sea_level, population, shares_border_with, area, official_website, coat_of_arms_image, lau, whos_on_first_id, capital, inaturalist_place_id, located_in_the_administrative_territorial_entity, image]\n- Table: protected_zones_of_national_interest, Columns: [label, description, coordinate_location, country, instance_of, area, described_at_url, inception, located_in_the_administrative_territorial_entity, code, location, geoshape, inaturalist_place_id, official_name]\n- Table: physical_location, Columns: [label, description, commons_category, country, coordinate_location, instance_of, topics_main_category, freebase_id, geonames_id, shares_border_with, area, official_website, elevation_above_sea_level, population, lau, whos_on_first_id, inaturalist_place_id, located_in_the_administrative_territorial_entity]",
        "Response": "Table: protected_zones_of_national_interest"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length) VALUES (12056, 13131, 4, 'None', 'None', 'None', 'Long');\nDatabase State:\n- Table: Reviews, Columns: [business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length]\n- Table: Compliments, Columns: [compliment_id, compliment_type]\n- Table: Users_Compliments, Columns: [compliment_id, user_id, number_of_compliments]\n- Table: Business_Hours, Columns: [business_id, day_id, opening_time, closing_time]\n- Table: Business_Categories, Columns: [business_id, category_id]\n- Table: Years, Columns: [year_id, actual_year]\n- Table: Categories, Columns: [category_id, category_name]\n- Table: Days, Columns: [day_id, day_of_week]\n- Table: Elite, Columns: [user_id, year_id]\n- Table: Business_Attributes, Columns: [attribute_id, business_id, attribute_value]\n- Table: Attributes, Columns: [attribute_id, attribute_name]\n- Table: Business, Columns: [business_id, active, city, state, stars, review_count]\n- Table: Tips, Columns: [business_id, user_id, likes, tip_length]\n- Table: Users, Columns: [user_id, user_yelping_since_year, user_average_stars, user_votes_funny, user_votes_useful, user_votes_cool, user_review_count, user_fans]\n- Table: Checkins, Columns: [business_id, day_id, label_time_0, label_time_1, label_time_2, label_time_3, label_time_4, label_time_5, label_time_6, label_time_7, label_time_8, label_time_9, label_time_10, label_time_11, label_time_12, label_time_13, label_time_14, label_time_15, label_time_16, label_time_17, label_time_18, label_time_19, label_time_20, label_time_21, label_time_22, label_time_23]",
        "Response": "Table: Reviews"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Documents_to_be_Destroyed (Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details) VALUES (25, 183, 156, '2009-08-18 03:29:08', '1995-01-01 03:52:11', NULL);\nDatabase State:\n- Table: Document Destruction Log, Columns: [Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details]\n- Table: Ref_Locations, Columns: [Location_Code, Location_Name, Location_Description]\n- Table: Employees, Columns: [Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details]",
        "Response": "Table: Document Destruction Log"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO person (p_id, professor, student, hasPosition, inPhase, yearsInProgram) VALUES (104, 1, 0, 'Faculty', '0', '0');\nDatabase State:\n- Table: Student_Progress, Columns: [p_id, professor, student, hasPosition, inPhase, yearsInProgram]\n- Table: taughtBy, Columns: [course_id, p_id]",
        "Response": "Table: Student_Progress"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Player_ID, Coach_ID, Starting_year) VALUES (2, 1, 2011);\nDatabase State:\n- Table: Player_Coach_Assignments, Columns: [Player_ID, Coach_ID, Starting_year]\n- Table: match_result, Columns: [Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points]\n- Table: club, Columns: [Club_ID, Club_name, Region, Start_year]",
        "Response": "Table: Player_Coach_Assignments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank) VALUES (6, 'Kildonan\u2014St. Paul', 'Ross Eadie', 'M', 'Winnipeg', 'Self Employed / Consultant', 12093, '2nd');\nDatabase State:\n- Table: player, Columns: [Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank]\n- Table: player_coach, Columns: [Player_ID, Coach_ID, Starting_year]\n- Table: match_result, Columns: [Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points]",
        "Response": "Table: player"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Store_ID, Product_ID) VALUES (3, 2);\nDatabase State:\n- Table: store, Columns: [Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking]\n- Table: Store_Products, Columns: [Store_ID, Product_ID]",
        "Response": "Table: Store_Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, dantai_code, commons_category, country, located_in_the_administrative_territorial_entity, coordinate_location, official_website, ndl_authority_id, instance_of, freebase_id, population, geonames_id, viaf_id, topics_main_category, corporate_number_japan, located_in_time_zone, name_in_kana, area, opencorporates_id, geonlp_id, image, locator_map_image, whos_on_first_id, flag_image, worldcat_identities_id, shares_border_with, inception, inaturalist_place_id) VALUES ('\u014cita', 'city in \u014cita prefecture, Japan', '442011', 'Oita, Oita', 'Japan', 'Oita Prefecture', '33.239555555555555', 'https://www.city.oita.oita.jp/', '291468', 'core city of Japan', '/m/0gp6_w', 477186.0, '1854487', '125513393', 'Category:\u014cita (city)', '4000020442011', 'UTC+09:00', '\u304a\u304a\u3044\u305f\u3057', 501.2799999999999728, 'jp/4000020442011', 'tBToZM', 'Oita takasago.jpg', 'Oita in Oita Prefecture.png', '102031459.0', 'Flag of Oita, Oita.svg', 'viaf-259306416', 'Beppu', '+1963-03-10T00:00:00Z', '100953');\nDatabase State:\n- Table: JapaneseCities, Columns: [label, description, dantai_code, commons_category, country, located_in_the_administrative_territorial_entity, coordinate_location, official_website, ndl_authority_id, instance_of, freebase_id, population, geonames_id, viaf_id, topics_main_category, corporate_number_japan, located_in_time_zone, name_in_kana, area, opencorporates_id, geonlp_id, image, locator_map_image, whos_on_first_id, flag_image, worldcat_identities_id, shares_border_with, inception, inaturalist_place_id]\n- Table: followed_by, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, postal_code, follows, followed_by, part_of, coordinate_location, google_knowledge_graph_id]",
        "Response": "Table: JapaneseCities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1010, 'Lee', 'Derek', 17, 'M', 600, 2192, 'HOU');\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO product (Product_ID, Product_Name, Category, Sub_Category, Region) VALUES ('FUR-BO-10002268', 'Sauder Barrister Bookcases', 'Furniture', 'Bookcases', 'East');\nDatabase State:\n- Table: west_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: product, Columns: [Product_ID, Product_Name, Category, Sub_Category, Region]",
        "Response": "Table: product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO biological_process (label, description, gene_ontology_id, subclass_of, exact_match, instance_of) VALUES ('Golgi organization', 'A process that is carried out at the cellular level which results in the assembly, arrangement of constituent parts, or disassembly of the Golgi apparatus.', 'GO:0007030', 'organelle organization', 'http://purl.obolibrary.org/obo/GO_0007030', 'biological process');\nDatabase State:\n- Table: biological_process, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]",
        "Response": "Table: biological_process"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO topic (label, description, instance_of, start_time, end_time, gnd_id, commons_category, topics_main_category, freebase_id, image, location, library_of_congress_authority_id, participant, encyclop\u00e6dia_britannica_online_id, part_of, nkcr_aut_id, national_library_of_israel_j9u_id) VALUES ('Winter War', '1939\u20131940 war between the Soviet Union and Finland', 'war', '+1939-11-30T00:00:00Z', '+1940-03-13T00:00:00Z', '4154442-0', 'Winter War', 'Category:Winter War', '/m/085w4', 'A Finnish Maxim M-32 machine gun nest during the Winter War.jpg', 'Finland', 'sh85116032', 'Finland', 'event/Russo-Finnish-War', 'World War II', 'ph125882', '987007548647705171');\nDatabase State:\n- Table: topic, Columns: [label, description, instance_of, start_time, end_time, gnd_id, commons_category, topics_main_category, freebase_id, image, location, library_of_congress_authority_id, participant, encyclop\u00e6dia_britannica_online_id, part_of, nkcr_aut_id, national_library_of_israel_j9u_id]\n- Table: war_in_popular_culture, Columns: [label, description, instance_of, main_subject, subclass_of]",
        "Response": "Table: topic"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, menu_page_id, price, high_price, dish_id, created_at, updated_at, xpos, ypos) VALUES (971482, 62712, 0.25, NULL, 349866, '2012-06-16 02:23:04 UTC', '2012-06-16 02:23:04 UTC', 0.6428570000000000117, 0.7949969999999999538);\nDatabase State:\n- Table: MenuItems, Columns: [id, menu_page_id, price, high_price, dish_id, created_at, updated_at, xpos, ypos]",
        "Response": "Table: MenuItems"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO school_bus (School_ID, Driver_ID, Years_Working, If_full_time) VALUES (5, 7, 8, 'T');\nDatabase State:\n- Table: driver, Columns: [Driver_ID, Name, Party, Home_city, Age]",
        "Response": "Table: school_bus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO architect (id, name, nationality, gender) VALUES ('1', 'Frank Lloyd Wright', 'American', 'male');\nDatabase State:\n- Table: architect, Columns: [id, name, nationality, gender]\n- Table: bridge, Columns: [architect_id, id, name, location, length_meters, length_feet]",
        "Response": "Table: architect"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (MovieID, ActorID, Character_Name, creditOrder, pay, screentime) VALUES (178, 1121, 'Spicer Lovejoy', 9, NULL, NULL);\nDatabase State:\n- Table: actor, Columns: [ActorID, Name, Date_of_Birth, Birth_City, Birth_Country, Height_(Inches), Biography, Gender, Ethnicity, NetWorth]\n- Table: movie, Columns: [MovieID, Title, MPAA_Rating, Budget, Gross, Release_Date, Genre, Runtime, Rating, Rating_Count, Summary]",
        "Response": "Table: characters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO country (zip_code, county, state) VALUES (5660, 'WASHINGTON', 'VT');\nDatabase State:\n- Table: alias, Columns: [zip_code, alias]\n- Table: zip_congress, Columns: [zip_code, district]\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]\n- Table: area_code, Columns: [zip_code, area_code]",
        "Response": "Table: country"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (department_ID, head_ID, temporary_acting) VALUES (2, 6, 'Yes');\nDatabase State:\n- Table: head, Columns: [head_ID, name, born_state, age]\n- Table: department, Columns: [Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees]",
        "Response": "Table: management"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Member_ID, Branch_ID, Year, Total_pounds) VALUES (1, '3', '2018', 2013.319999999999937);\nDatabase State:\n- Table: member, Columns: [Member_ID, Card_Number, Name, Hometown, Level]\n- Table: purchase, Columns: [Member_ID, Branch_ID, Year, Total_pounds]",
        "Response": "Table: purchase"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO ontario_badminton_championships (label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows) VALUES ('1932 Ontario Badminton Championships', 'badminton championships', 'Ontario Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'Canada', '+1932-00-00T00:00:00Z', '1933 Ontario Badminton Championships', 'national championship', '1932 Ontario Badminton Championships \u2013 Men''s singles', '1931 Ontario Badminton Championships');\nDatabase State:\n- Table: ontario_badminton_championships, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows]",
        "Response": "Table: ontario_badminton_championships"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO historical (ballotpedia_id, bioguide_id, bioguide_previous_id, birthday_bio, cspan_id, fec_id, first_name, gender_bio, google_entity_id_id, govtrack_id, house_history_alternate_id, house_history_id, icpsr_id, last_name, lis_id, maplight_id, middle_name, nickname_name, official_full_name, opensecrets_id, religion_bio, suffix_name, thomas_id, votesmart_id, wikidata_id, wikipedia_id) VALUES (NULL, 'W000085', NULL, '1856-05-21', NULL, NULL, 'William', 'M', 'kg:/m/02rkxw0', 411264, NULL, 23314.0, 9771.0, 'Wallace', NULL, NULL, 'Copeland', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Q404485', 'William C. Wallace');\nDatabase State:\n- Table: current_terms, Columns: [address, bioguide, caucus, chamber, class, contact_form, district, end, fax, last, name, office, party, party_affiliations, phone, relation, rss_url, start, state, state_rank, title, type, url]\n- Table: social_media, Columns: [bioguide, facebook, facebook_id, govtrack, instagram, instagram_id, thomas, twitter, twitter_id, youtube, youtube_id]\n- Table: current, Columns: [ballotpedia_id, bioguide_id, birthday_bio, cspan_id, fec_id, first_name, gender_bio, google_entity_id_id, govtrack_id, house_history_id, icpsr_id, last_name, lis_id, maplight_id, middle_name, nickname_name, official_full_name, opensecrets_id, religion_bio, suffix_name, thomas_id, votesmart_id, wikidata_id, wikipedia_id]\n- Table: Politicians, Columns: [ballotpedia_id, bioguide_id, bioguide_previous_id, birthday_bio, cspan_id, fec_id, first_name, gender_bio, google_entity_id_id, govtrack_id, house_history_alternate_id, house_history_id, icpsr_id, last_name, lis_id, maplight_id, middle_name, nickname_name, official_full_name, opensecrets_id, religion_bio, suffix_name, thomas_id, votesmart_id, wikidata_id, wikipedia_id]",
        "Response": "Table: Politicians"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire) VALUES (4, 12, 'bad', 'Reba', 'Jacobs', '1', '2016-06-17 14:11:50', '2018-02-19 06:04:01');\nDatabase State:\n- Table: Products_for_Hire, Columns: [product_id, product_type_code, daily_hire_cost, product_name, product_description]\n- Table: Payments, Columns: [payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid]\n- Table: Bookings, Columns: [booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding, amount_of_refund]\n- Table: Products_Booked, Columns: [booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('50S ribosomal protein L29 LA_0747', 'microbial gene found in Leptospira interrogans serovar Lai str. 56601', '1150090.0', 'gene', '50S ribosomal protein L29 LA_0747', 'Leptospira interrogans serovar Lai str. 56601', 'forward strand', '766912', '766628', 'gene', 'LA_0747');\nDatabase State:\n- Table: ribosomal_protein_l29_l35_superfamily, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, cell_component, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales_Orders (OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost) VALUES ('SO - 0004608', 'In-Store', 'WARE-PUJ1005', '8/23/19', '11/19/19', '12/13/19', '12/19/19', 'USD', 2, 35, 316, 27, 3, 0.05000000000000000277, '1,085.40', '922.59');\nDatabase State:\n- Table: Regions, Columns: [StateCode, State, Region]\n- Table: Sales_Team, Columns: [SalesTeamID, Sales_Team, Region]\n- Table: Sales_Orders, Columns: [OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost]\n- Table: Products, Columns: [ProductID, Product_Name]\n- Table: Store_Locations, Columns: [StoreID, City_Name, County, StateCode, State, Type, Latitude, Longitude, AreaCode, Population, Household_Income, Median_Income, Land_Area, Water_Area, Time_Zone]\n- Table: Customers, Columns: [CustomerID, Customer_Names]",
        "Response": "Table: Sales_Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID) VALUES (109, 'Daniel', 'Faviet', 'DFAVIET', '515.124.4169', '1987-06-26', 'FI_ACCOUNT', 9000, 0, 108, 100);\nDatabase State:\n- Table: locations, Columns: [LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID]\n- Table: countries, Columns: [COUNTRY_ID, COUNTRY_NAME, REGION_ID]\n- Table: regions, Columns: [REGION_ID, REGION_NAME]\n- Table: departments, Columns: [DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]\n- Table: Employees, Columns: [EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]\n- Table: job_history, Columns: [EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]\n- Table: jobs, Columns: [JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]",
        "Response": "Table: Employees"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, game_publisher_id, platform_id, release_year) VALUES (7358, 5444, 13, 1997);\nDatabase State:\n- Table: Game_Release, Columns: [id, game_publisher_id, platform_id, release_year]\n- Table: publisher, Columns: [id, publisher_name]\n- Table: game, Columns: [id, genre_id, game_name]\n- Table: platform, Columns: [id, platform_name]\n- Table: region_sales, Columns: [region_id, game_platform_id, num_sales]\n- Table: region, Columns: [id, region_name]",
        "Response": "Table: Game_Release"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO status (station_id, bikes_available, docks_available, time) VALUES (24, 5, 10, '2015-06-02 13:27:02');\nDatabase State:\n- Table: status, Columns: [station_id, bikes_available, docks_available, time]\n- Table: trip, Columns: [id, duration, start_date, start_station_name, end_date, end_station_name, bike_id, subscription_type, zip_code]\n- Table: weather, Columns: [date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "Response": "Table: status"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1023, 'Shieber', 'David', 20, 'M', 520, 8722, 'NYC');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (history_id, order_id, status_id, status_date) VALUES (10242, 6852, 2, '2021-04-21 19:26:22');\nDatabase State:\n- Table: cust_order, Columns: [order_id, order_date, customer_id, shipping_method_id, dest_address_id]\n- Table: order_status, Columns: [status_id, status_value]\n- Table: order_history, Columns: [history_id, order_id, status_id, status_date]\n- Table: address, Columns: [address_id, street_number, street_name, city, country_id]\n- Table: customer, Columns: [customer_id, first_name, last_name, email]\n- Table: author, Columns: [author_id, author_name]\n- Table: shipping_method, Columns: [method_id, method_name, cost]\n- Table: country, Columns: [country_id, country_name]\n- Table: book_language, Columns: [language_id, language_code, language_name]\n- Table: publisher, Columns: [publisher_id, publisher_name]\n- Table: order_line, Columns: [line_id, order_id, book_id, price]",
        "Response": "Table: order_history"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of) VALUES ('Hypothetical protein EAE_03235', 'microbial protein found in Klebsiella aerogenes KCTC 2190', 'A0A0H3FRW5', 'Enterobacter aerogenes KCTC 2190', 'protein', 'hypothetical protein EAE_03235', 'protein', 'YP_004590861', 'YhcH/YjgK/YiaL family');\nDatabase State:\n- Table: Protein_Superfamily, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: Protein_Superfamily"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO file_converter (label, description, instance_of, copyright_license, copyright_status) VALUES ('sanjuuni', 'multimedia conversion software for ComputerCraft', 'free software', 'GNU General Public License, version 2.0', 'copyrighted');\nDatabase State:\n- Table: file_converter, Columns: [label, description, instance_of, copyright_license, copyright_status]",
        "Response": "Table: file_converter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO ctp_synthase_n_terminal_domain_protein_family (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('CTP synthase ECs3640', 'microbial protein found in Escherichia coli O157:H7 str. Sakai', 'CTP synthase ECs3640', 'P0A7E7', 'nan', 'nan', 'CTP synthase, N-terminal', 'Escherichia coli O157:H7 str. Sakai', 'NP_311667', 'protein', 'Class I glutamine amidotransferase-like', 'protein');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]",
        "Response": "Table: ctp_synthase_n_terminal_domain_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross) VALUES ('Stick It', 'Apr 28, 2006', 'Comedy', 'PG-13', '$26,910,736', '$34,634,731');\nDatabase State:\n- Table: revenue, Columns: [Year, Studio_Entertainment[NI_1], Disney_Consumer_Products[NI_2], Disney_Interactive[NI_3][Rev_1], Walt_Disney_Parks_and_Resorts, Disney_Media_Networks, Total]\n- Table: director, Columns: [name, director]\n- Table: characters, Columns: [movie_title, release_date, hero, villian, song]\n- Table: voice_actors, Columns: [character, voice_actor, movie]",
        "Response": "Table: movies_total_gross"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO user (UserID, Gender) VALUES ('tw-746285111675600897', 'Female');\nDatabase State:\n- Table: Users, Columns: [UserID, Gender]",
        "Response": "Table: Users"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, part_of, sport, country, followed_by, follows) VALUES ('2010 Venezuelan National Road Race Championships', 'nan', 'Venezuelan National Road Race Championships', '2010\u00a0national road cycling championships', 'road bicycle racing', 'Venezuela', '2011 Venezuelan National Road Race Championships', '2009 Venezuelan National Road Race Championships');\nDatabase State:\n- Table: Venezuelan_National_Road_Race, Columns: [label, description, instance_of, part_of, sport, country, followed_by, follows]",
        "Response": "Table: Venezuelan_National_Road_Race"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Dogs (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed) VALUES (11, 13, '0', 'BUL', 'LGE', 'Betty', '3', '2012-10-14 14:44:37', '0', '8.16', '2017-07-25 15:19:07', '2018-03-14 08:05:18', '2018-03-25 15:05:16');\nDatabase State:\n- Table: Charges, Columns: [charge_id, charge_type, charge_amount]\n- Table: AnimalRegistry, Columns: [dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed]\n- Table: Breeds, Columns: [breed_code, breed_name]\n- Table: Treatment_Types, Columns: [treatment_type_code, treatment_type_description]",
        "Response": "Table: AnimalRegistry"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Accounts (Account_ID, Statement_ID, Account_Details) VALUES (321, 192, '745.817');\nDatabase State:\n- Table: Statements, Columns: [Statement_ID, Statement_Details]\n- Table: Documents, Columns: [Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details]\n- Table: Documents_with_Expenses, Columns: [Document_ID, Budget_Type_Code, Document_Details]\n- Table: Ref_Budget_Codes, Columns: [Budget_Type_Code, Budget_Type_Description]",
        "Response": "Table: Accounts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Date_received, Product, Sub_product, Issue, Sub_issue, Consumer_complaint_narrative, Tags, Consumer_consent_provided?, Submitted_via, Date_sent_to_company, Company_response_to_consumer, Timely_response?, Consumer_disputed?, Complaint_ID, Client_ID) VALUES ('2014-03-06', 'Bank account or service', 'Checking account', 'Account opening, closing, or management', NULL, NULL, NULL, 'N/A', 'Web', '2014-03-10', 'Closed', 'Yes', 'No', 'CR0746197', 'C00002287');\nDatabase State:\n- Table: Complaint_History, Columns: [Date_received, Product, Sub_product, Issue, Sub_issue, Consumer_complaint_narrative, Tags, Consumer_consent_provided?, Submitted_via, Date_sent_to_company, Company_response_to_consumer, Timely_response?, Consumer_disputed?, Complaint_ID, Client_ID]\n- Table: district, Columns: [district_id, city, state_abbrev, division]\n- Table: callcenterlogs, Columns: [Date_received, Complaint_ID, rand_client, phonefinal, vru+line, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time]\n- Table: reviews, Columns: [Date, Stars, Reviews, Product, district_id]",
        "Response": "Table: Complaint_History"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (year, lgID, tmID, oppID, W, L, T, OTL) VALUES (1998, 'NHL', 'NYI', 'VAN', 1, 0, 1, NULL);\nDatabase State:\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: TeamsPost, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: TeamVsTeam, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]\n- Table: ScoringSC, Columns: [playerID, year, tmID, lgID, pos, GP, G, A, Pts, PIM]\n- Table: Teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]",
        "Response": "Table: TeamVsTeam"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (RootBeerID, BrandID, ContainerType, LocationID, PurchaseDate) VALUES (100372, 10002, 'Bottle', 1, '2016-06-30');\nDatabase State:\n- Table: RootBeerPurchases, Columns: [RootBeerID, BrandID, ContainerType, LocationID, PurchaseDate]\n- Table: location, Columns: [LocationID, LocationName, StreetAddress, City, State, ZipCode]\n- Table: transaction, Columns: [TransactionID, CreditCardNumber, CustomerID, TransactionDate, CreditCardType, LocationID, RootBeerID, PurchasePrice]\n- Table: customers, Columns: [CustomerID, First, Last, StreetAddress, City, State, ZipCode, Email, PhoneNumber, FirstPurchaseDate, SubscribedToEmailList, Gender]",
        "Response": "Table: RootBeerPurchases"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Shop_ID, Shop_Name, Location, Open_Date, Open_Year) VALUES (12, 'National Cellphone', 'Wattstown', '18 February', 2017);\nDatabase State:\n- Table: stock, Columns: [Shop_ID, Device_ID, Quantity]\n- Table: device, Columns: [Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform]",
        "Response": "Table: shop"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (City_ID, City, Hanzi, Hanyu_Pinyin, Regional_Population, GDP) VALUES (5, 'Ningbo ( Zhejiang )', '\u5b81\u6ce2/ \u5be7\u6ce2', 'N\u00edngb\u014d', 7605689, 601.0499999999999546);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Code) VALUES (67464, 'MWC', '27-SEP-10', '30-SEP-10', 112.5, 'KVETON', 'FREDRICK', 1, 1);\nDatabase State:\n- Table: HotelReservations, Columns: [Code]",
        "Response": "Table: HotelReservations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (case_number, race, gender, last_name, first_name, full_name) VALUES ('132098Z', 'W', 'M', 'Abdulkarim', 'Ismail', 'Abdulkarim, Ismail');\nDatabase State:\n- Table: Suspects, Columns: [case_number, race, gender, last_name, first_name, full_name]",
        "Response": "Table: Suspects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (history_id, order_id, status_id, status_date) VALUES (4312, 6456, 1, '2021-02-12 14:08:03');\nDatabase State:\n- Table: book_author, Columns: [book_id, author_id]\n- Table: book, Columns: [book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id]\n- Table: order_history, Columns: [history_id, order_id, status_id, status_date]\n- Table: address_status, Columns: [status_id, address_status]\n- Table: order_status, Columns: [status_id, status_value]\n- Table: author, Columns: [author_id, author_name]\n- Table: customer, Columns: [customer_id, first_name, last_name, email]\n- Table: address, Columns: [address_id, street_number, street_name, city, country_id]\n- Table: shipping_method, Columns: [method_id, method_name, cost]",
        "Response": "Table: order_history"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('hypothetical protein smi_0665', 'microbial gene found in Streptococcus mitis B6', '8797819', 'gene', 'Hypothetical protein smi_0665', 'Streptococcus mitis B6', 'forward strand', '616781', '615984', 'gene', 'smi_0665');\nDatabase State:\n- Table: gtp_cyclohydrolase_1_type_2_nif3, Columns: [label, description, encoded_by, uniprot_protein_id, found_in_taxon, part_of, instance_of, subclass_of, refseq_protein_id]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO city (ID) VALUES (997, 'Cianjur', 'IDN', 'West Java', 114300);\nDatabase State:\n- Table: Cities, Columns: [ID]",
        "Response": "Table: Cities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, instance_of, genomic_start, genomic_end, ncbi_locus_tag) VALUES ('glucose-6-phosphate 1-dehydrogenase tll0540', 'microbial gene found in Thermosynechococcus elongatus BP-1', '1012176', 'gene', 'Glucose-6-phosphate 1-dehydrogenase tll0540', 'Thermosynechococcus elongatus BP-1', 'reverse strand', 'gene', '542532', '544061', 'tll0540');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, instance_of, genomic_start, genomic_end, ncbi_locus_tag]\n- Table: glucose_6_phosphate_dehydrogenase_c_terminal_domain_protein_family, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date) VALUES (16, 'clothes', 'US', '2017-11-02 17:26:30', '2018-03-02 17:07:50');\nDatabase State:\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges]\n- Table: Premises, Columns: [premise_id, premises_type, premise_details]\n- Table: Mailshot_Customers, Columns: [mailshot_id, customer_id, outcome_code, mailshot_customer_date]\n- Table: Customer_Addresses, Columns: [customer_id, premise_id, date_address_from, address_type_code, date_address_to]\n- Table: Products, Columns: [product_id, product_category, product_name]\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password]\n- Table: Order_Items, Columns: [item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity]",
        "Response": "Table: Mailshot_Campaigns"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (year, lgID, tmID, oppID, W, L, T, OTL) VALUES (2010, 'NHL', 'BOS', 'NJD', 3, 1, NULL, '0');\nDatabase State:\n- Table: NHLGameResults, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]\n- Table: Scoring, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, +/_, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, Post+/_, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]",
        "Response": "Table: NHLGameResults"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Campus) VALUES (16, 2003, 16034, 12587);\nDatabase State:\n- Table: degrees, Columns: [Year, Campus]\n- Table: csu_fees, Columns: [Campus]\n- Table: faculty, Columns: [Campus]\n- Table: Campuses, Columns: [Id]\n- Table: discipline_enrollments, Columns: [Campus]",
        "Response": "Table: enrollments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO people (People_ID, Name, Country, Is_Male, Age) VALUES (11, 'Adam Scott', 'Australia', 'T', 26);\nDatabase State:\n- Table: wedding, Columns: [Church_ID, Male_ID, Female_ID, Year]",
        "Response": "Table: people"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number) VALUES (116, 'Good Credit Rating', '72144 Katlynn Flat Suite 512', 'Suite 959', 'Hansenbury', 'Tennessee', 'vbogisich@example.org', '548.373.3603x59134');\nDatabase State:\n- Table: Complaints, Columns: [complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id]\n- Table: Products, Columns: [product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price]\n- Table: Customers, Columns: [customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movie_id, keyword_id) VALUES (235271, 11501);\nDatabase State:\n- Table: movie_crew, Columns: [movie_id, person_id, department_id, job]\n- Table: movie, Columns: [movie_id, title, budget, homepage, overview, popularity, release_date, revenue, runtime, movie_status, tagline, vote_average, vote_count]\n- Table: gender, Columns: [gender_id, gender]\n- Table: movie_cast, Columns: [movie_id, person_id, character_name, gender_id, cast_order]\n- Table: person, Columns: [person_id, person_name]\n- Table: movie_genres, Columns: [movie_id, genre_id]\n- Table: movie_languages, Columns: [movie_id, language_id, language_role_id]\n- Table: keyword, Columns: [keyword_id, keyword_name]",
        "Response": "Table: movie_keywords"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, score, date, type) VALUES (77098, 83, '2016-07-29', 'Routine - Unscheduled');\nDatabase State:\n- Table: inspections, Columns: [business_id, score, date, type]\n- Table: businesses, Columns: [business_id, name, address, city, postal_code, latitude, longitude, phone_number, tax_code, business_certificate, application_date, owner_name, owner_address, owner_city, owner_state, owner_zip]",
        "Response": "Table: inspections"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cytochrome_bc1_complex_subunit_rieske_transmembrane_domain_superfamily (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, part_of, instance_of, ensembl_protein_id, refseq_protein_id) VALUES ('Ubiquinol-cytochrome c reductase, Rieske iron-sulfur polypeptide 1', 'Protein found in Danio rerio', 'uqcrfs1', 'A7MCR1', 'electron transport chain', 'ubiquinol-cytochrome-c reductase activity', 'mitochondrion', 'Rieske iron-sulphur protein, C-terminal', 'Danio rerio', 'Rieske iron-sulphur protein', 'protein', 'ENSDARP00000011707', 'NP_001096664');\nDatabase State:\n- Table: cytochrome_bc1_complex_subunit_rieske_transmembrane_domain_superfamily, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, part_of, instance_of, ensembl_protein_id, refseq_protein_id]",
        "Response": "Table: cytochrome_bc1_complex_subunit_rieske_transmembrane_domain_superfamily"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Has_amenity (dormid, amenid) VALUES (160, 932);\nDatabase State:\n- Table: Dorm_amenity, Columns: [amenid, amenity_name]\n- Table: Lives_in, Columns: [stuid, dormid, room_number]\n- Table: Dorm_Amenities, Columns: [dormid, amenid]",
        "Response": "Table: Dorm_Amenities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1010, 'Lee', 'Derek', 17, 'M', 600, 2192, 'HOU');\nDatabase State:\n- Table: Visits_Restaurant, Columns: [StuID, ResID, Time, Spent]\n- Table: Type_Of_Restaurant, Columns: [ResID, ResTypeID]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Restaurant, Columns: [ResID, ResName, Address, Rating]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (locationID, locationcity, address, state, zipcode, officephone) VALUES (8, 'Los Angeles', '1400 Main St', 'CA', 94235, '(705)639-0227');\nDatabase State:\n- Table: Locations, Columns: [locationID, locationcity, address, state, zipcode, officephone]",
        "Response": "Table: Locations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO rental (rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update) VALUES (4581, '2005-07-08 06:05:06.0', 887, 591, '2005-07-16 00:54:06.0', 1, '2006-02-15 21:30:53.0');\nDatabase State:\n- Table: film_actor, Columns: [actor_id, film_id, last_update]\n- Table: country, Columns: [country_id, country, last_update]\n- Table: category, Columns: [category_id, name, last_update]\n- Table: staff, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]\n- Table: city, Columns: [city_id, city, country_id, last_update]\n- Table: store, Columns: [store_id, manager_staff_id, address_id, last_update]\n- Table: customer, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: film, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]\n- Table: language, Columns: [language_id, name, last_update]\n- Table: address, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: film_text, Columns: [film_id, title, description]",
        "Response": "Table: rental"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Genes (GeneID, Essential, Class, Complex, Phenotype, Motif, Chromosome, Function, Localization) VALUES ('G234497', 'Non-Essential', 'Motorproteins', 'Cytoskeleton', 'Conditional phenotypes', 'PS00017', 8, 'CELLULAR TRANSPORT AND TRANSPORTMECHANISMS', 'cytoskeleton');\nDatabase State:\n- Table: Classification, Columns: [GeneID, Localization]\n- Table: Genes, Columns: [GeneID, Essential, Class, Complex, Phenotype, Motif, Chromosome, Function, Localization]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO user (UserID, Gender) VALUES ('tw-3192802250', 'Female');\nDatabase State:\n- Table: location, Columns: [LocationID, Country, State, StateCode, City]\n- Table: Users, Columns: [UserID, Gender]",
        "Response": "Table: Users"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encodes (label, description, found_in_taxon, uniprot_protein_id, encoded_by, subclass_of, instance_of, refseq_protein_id, part_of) VALUES ('Hypothetical protein HI0711', 'microbial protein found in Haemophilus influenzae Rd KW20', 'Haemophilus influenzae Rd KW20', 'P44041', 'hypothetical protein HI0711', 'protein', 'protein', 'NP_438869', 'Toxin-antitoxin system, RelE/ParE toxin domain superfamily');\nDatabase State:\n- Table: Protein_Encodings, Columns: [label, description, found_in_taxon, uniprot_protein_id, encoded_by, subclass_of, instance_of, refseq_protein_id, part_of]\n- Table: toxin_antitoxin_system_yafq_like_toxin, Columns: [label, description, found_in_taxon, uniprot_protein_id, encoded_by, subclass_of, instance_of, refseq_protein_id, part_of]\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: taxon, Columns: [label, description, taxon_name, taxon_rank, parent_taxon, instance_of, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, bacdive_id, itis_tsn, gram_staining, jstor_topic_id, irmng_id, lpsn_url, mesh_descriptor_id, mesh_tree_code, microsoft_academic_id, openalex_id, catalogue_of_life_id]",
        "Response": "Table: Protein_Encodings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO wrestler (Wrestler_ID, Name, Reign, Days_held, Location, Event) VALUES (3, 'Villa\u00f1o IV', '1', '1285', 'Tijuana , Mexico', 'Live event');\nDatabase State:\n- Table: Elimination, Columns: [Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time]",
        "Response": "Table: wrestler"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID) VALUES ('tw-700770638152257536', 'Friday', 12, 19, 'tr', 'FALSE', 29243, 0, 0, 48, 0.0, 'Zombiler uyandnda Amazon Web Services hazr olacak http://woisio.com/en/ife-and-love/56c11506e4b0bbe73ced0931/zombiler-uyandiginda-amazon-web-services-hazir-olacak?partnerId=322', 2966, 'tw-3620163135');\nDatabase State:\n- Table: user, Columns: [UserID, Gender]\n- Table: location, Columns: [LocationID, Country, State, StateCode, City]",
        "Response": "Table: twitter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, competition_class, short_name, sport, catalog_code) VALUES ('lightweight women''s double scull', 'competition class in rowing', 'competition class', 'open', 'LW2x', 'rowing', '61be8c32-b56d-4cac-bf56-46246fb1c349');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: competition_class"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Professionals (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number) VALUES (7, 'Veterenarian', 'Velva', replace('44234 Marvin Shoals Suite 659\\nNorth Frances, AL 23','\\n',char(10)), 'McLaughlinfort', 'NorthCarolina', '67980', 'Hayes', 'lambert62@example.org', '022.529.0550x1319', '499-434-0215x1628');\nDatabase State:\n- Table: Treatments, Columns: [treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment]\n- Table: Treatment_Types, Columns: [treatment_type_code, treatment_type_description]\n- Table: Sizes, Columns: [size_code, size_description]",
        "Response": "Table: Professionals"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of) VALUES ('Protein of unknown function DUF386 SO_4189', 'microbial protein found in Shewanella oneidensis MR-1', 'Q8E9S7', 'Shewanella oneidensis MR-1', 'protein', 'protein of unknown function DUF386 SO_4189', 'protein', 'NP_719717', 'YhcH/YjgK/YiaL family');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: yhch_yjgk_yial_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Scoring (playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, +/_, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, Post+/_, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG) VALUES ('macouja01', 1989, 1, 'CAL', 'NHL', 'D', 78, 8, 27, 35, 70, '34', '1', '5', '0', '0', '1', '0', '120', '6', '0', '3', '3', '10', '2', '0', '0', '0', '0', '0', '5');\nDatabase State:\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]\n- Table: Scoring, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, +/_, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, Post+/_, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]\n- Table: TeamVsTeam, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]\n- Table: GoaliesSC, Columns: [playerID, year, tmID, lgID, GP, Min, W, L, T, SHO, GA]\n- Table: ScoringShootout, Columns: [playerID, year, stint, tmID, S, G, GDG]\n- Table: AwardsMisc, Columns: [name, ID, award, year, lgID, note]\n- Table: AwardsPlayers, Columns: [playerID, award, year, lgID, note, pos]\n- Table: SeriesPost, Columns: [year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L, T, GoalsWinner, GoalsLoser, note]\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: Goalies, Columns: [playerID, year, stint, tmID, lgID, GP, Min, W, L, T/OL, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA]\n- Table: TeamsHalf, Columns: [year, lgID, tmID, half, rank, G, W, L, T, GF, GA]\n- Table: TeamsPost, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: ScoringSup, Columns: [playerID, year, PPA, SHA]\n- Table: GoaliesShootout, Columns: [playerID, year, stint, tmID, W, L, SA, GA]\n- Table: Teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: abbrev, Columns: [Type, Code, Fullname]\n- Table: ScoringSC, Columns: [playerID, year, tmID, lgID, pos, GP, G, A, Pts, PIM]\n- Table: CombinedShutouts, Columns: [year, month, date, tmID, oppID, R/P, IDgoalie1, IDgoalie2]\n- Table: HOF, Columns: [year, hofID, name, category]\n- Table: TeamsSC, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM]\n- Table: Master, Columns: [playerID, coachID, hofID, firstName, lastName, nameNote, nameGiven, nameNick, height, weight, shootCatch, legendsID, ihdbID, hrefID, firstNHL, lastNHL, firstWHA, lastWHA, pos, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity, deathYear, deathMon, deathDay, deathCountry, deathState, deathCity]",
        "Response": "Table: Scoring"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO twitter (TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID) VALUES ('tw-709402147276922880', 'Monday', 9, 14, 'en', 'FALSE', 348, 0, 0, 44, 0.0, '\"Retweeted CloudRanger (@cloudrangerAWS):@awscloud have made qwikLABS available to all current &amp; potential AWS... https://t.co/k3CKA8vkRO\"', 3766, 'tw-124825123');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: twitter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO saccharopine_dehydrogenase_c_terminal_domain_protein_family (label, description, encoded_by, uniprot_protein_id, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('Hypothetical protein Atu4170', 'microbial protein found in Agrobacterium fabrum str. C58', 'hypothetical protein Atu4170', 'A9CG66', 'oxidoreductase activity', 'Saccharopine dehydrogenase, NADP binding domain', 'Agrobacterium fabrum str. C58', 'NP_356480', 'protein', 'NAD(P)-binding domain superfamily', 'protein');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: saccharopine_dehydrogenase_c_terminal_domain_protein_family, Columns: [label, description, encoded_by, uniprot_protein_id, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: saccharopine_dehydrogenase_c_terminal_domain_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO molecular_function (label, description, gene_ontology_id, subclass_of, exact_match, instance_of) VALUES ('ATPase binding', 'Interacting selectively and non-covalently with an ATPase, any enzyme that catalyzes the hydrolysis of ATP.', 'GO:0051117', 'enzyme binding', 'http://purl.obolibrary.org/obo/GO_0051117', 'molecular function');\nDatabase State:\n- Table: part, Columns: [label, description, interpro_id, instance_of, subclass_of]",
        "Response": "Table: molecular_function"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tatch\u016b (label, description, country, image, corporate_number_japan, instance_of, located_in_the_administrative_territorial_entity, part_of, inception) VALUES ('Koh\u014d-an', 'nan', 'Japan', 'Daitokuji Koho-an140524NI2.JPG', '7130005001206.0', 'Tatch\u016b', 'Kita-ku', 'Daitoku-ji', '+1612-00-00T00:00:00Z');\nDatabase State:\n- Table: part, Columns: [label, description, official_website, commons_category, coordinate_location, freebase_id, instance_of, country, ndl_authority_id, image, dedicated_to, located_in_the_administrative_territorial_entity, viaf_id, corporate_number_japan, religion_or_worldview, founded_by, inception, has_parts, tripadvisor_id, heritage_designation, japan_search_name_id, part_of]\n- Table: administrative_territorial_entity, Columns: [label, description, area, dantai_code, located_in_the_administrative_territorial_entity, country, commons_category, coordinate_location, instance_of, freebase_id, population, geonames_id, viaf_id, topics_main_category, image, located_in_time_zone, official_website, geonlp_id, locator_map_image, whos_on_first_id, worldcat_identities_id, inception, native_label, shares_border_with, name_in_kana]\n- Table: political_border, Columns: [label, description, area, dantai_code, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, official_website, instance_of, freebase_id, population, musicbrainz_area_id, geonames_id, topics_main_category, shares_border_with, image, located_in_time_zone, viaf_id, geonlp_id, locator_map_image, openstreetmap_relation_id, facebook_id, whos_on_first_id, worldcat_identities_id, native_label, inception, name_in_kana, ndl_authority_id]\n- Table: JapaneseTemples, Columns: [label, description, country, image, corporate_number_japan, instance_of, located_in_the_administrative_territorial_entity, part_of, inception]",
        "Response": "Table: JapaneseTemples"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO route (train_id, station_id) VALUES (1, 3);\nDatabase State:\n- Table: train, Columns: [id, train_number, name, origin, destination, time, interval]\n- Table: Train_Stations, Columns: [train_id, station_id]\n- Table: weekly_weather, Columns: [station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph]\n- Table: station, Columns: [id, network_name, services, local_authority]",
        "Response": "Table: Train_Stations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Invoice_ID, Order_ID, payment_method_code, Product_ID, Order_Quantity, Other_Item_Details, Order_Item_ID) VALUES (164, 7, 'Visa', 7, '2', NULL, 1);\nDatabase State:\n- Table: Bookings_Services, Columns: [Order_ID, Product_ID]\n- Table: Customers, Columns: [Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details]\n- Table: Order_Items, Columns: [Order_Item_ID, Order_ID, Product_ID, Order_Quantity, Other_Item_Details]\n- Table: Marketing_Regions, Columns: [Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details]\n- Table: Bookings, Columns: [Booking_ID, Customer_ID, Workshop_Group_ID, Status_Code, Store_ID, Order_Date, Planned_Delivery_Date, Actual_Delivery_Date, Other_Order_Details]\n- Table: Invoices, Columns: [Invoice_ID, Order_ID, payment_method_code, Product_ID, Order_Quantity, Other_Item_Details, Order_Item_ID]\n- Table: Performers_in_Bookings, Columns: [Order_ID, Performer_ID]\n- Table: Ref_Payment_Methods, Columns: [payment_method_code, payment_method_description]",
        "Response": "Table: Invoices"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, copyright_license, copyright_status) VALUES ('AsciiDoc.py', 'processor for text files in AsciiDoc syntax', 'file converter', 'GNU General Public License, version 2.0', 'copyrighted');\nDatabase State:\n- Table: file_converter, Columns: [label, description, instance_of, copyright_license, copyright_status]",
        "Response": "Table: file_converter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('CTP synthetase SMU_97', 'microbial protein found in Streptococcus mutans UA159', 'CTP synthetase SMU_97', 'Q8DWG1', 'pyrimidine nucleotide biosynthetic process', 'nucleotide binding', 'Glutamine amidotransferase domain', 'Streptococcus mutans UA159', 'NP_720574', 'protein', 'Class I glutamine amidotransferase-like', 'protein');\nDatabase State:\n- Table: ctp_synthase_n_terminal_domain_protein_family, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: ctp_synthase_n_terminal_domain_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO department (Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees) VALUES (4, 'Justice', '1870', 4, 23.39999999999999858, 112557.0);\nDatabase State:\n- Table: management, Columns: [department_ID, head_ID, temporary_acting]\n- Table: head, Columns: [head_ID, name, born_state, age]\n- Table: department, Columns: [Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees]",
        "Response": "Table: department"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update) VALUES (5689, '2005-07-10 09:24:17.0', 1731, 381, '2005-07-15 05:36:17.0', 1, '2006-02-15 21:30:53.0');\nDatabase State:\n- Table: actor, Columns: [actor_id, first_name, last_name, last_update]\n- Table: inventory, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: store, Columns: [store_id, manager_staff_id, address_id, last_update]\n- Table: film_category, Columns: [film_id, category_id, last_update]\n- Table: payment, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: language, Columns: [language_id, name, last_update]\n- Table: staff, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]\n- Table: rental, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]\n- Table: address, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: customer, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: country, Columns: [country_id, country, last_update]",
        "Response": "Table: rental"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (paper_id, word_cited_id) VALUES ('fernyhough99constructing', 'word403');\nDatabase State:\n- Table: cites, Columns: [cited_paper_id, citing_paper_id]",
        "Response": "Table: content"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of) VALUES ('Australian Defence Satellite Communications Station', 'signals intelligence listening station in Western Australia', 'Australia', 'Western Australia', '-28.695', 'ground station');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, country, instance_of, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, freebase_id, commons_category, viaf_id, geonames_id, population, official_website, image, locator_map_image, openstreetmap_relation_id, area, whos_on_first_id, worldcat_identities_id]\n- Table: Radio_Stations, Columns: [label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of]",
        "Response": "Table: Radio_Stations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Policy_ID, policy_type_code, Customer_Phone) VALUES (301, 'Property Insurance', '(777)537-7792');\nDatabase State:\n- Table: Policies, Columns: [Policy_ID, policy_type_code, Customer_Phone]",
        "Response": "Table: Policies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID) VALUES (3004, 'Orl\u00e9ans', 'FRA', 'Centre', 113126);\nDatabase State:\n- Table: countrylanguage, Columns: [CountryCode]\n- Table: cities, Columns: [ID]",
        "Response": "Table: cities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, taxon_name, taxon_rank, instance_of, parent_taxon, ncbi_taxonomy_id, gbif_taxon_id, encyclopedia_of_life_id, itis_tsn, bacdive_id, gram_staining, mesh_descriptor_id, lpsn_url, microsoft_academic_id, freebase_id, openalex_id, catalogue_of_life_id, irmng_id) VALUES ('Burkholderia pseudomallei', 'species of bacterium', 'Burkholderia pseudomallei', 'species', 'taxon', 'Burkholderia', '28450', '3219968', '976792.0', '960173.0', 'nan', 'Gram-negative bacteria', 'D016957', 'http://www.bacterio.net/burkholderia.html#pseudomallei', '2779110727.0', '/m/09jb7c', 'C2779110727', 'NXJ9', '10435430.0');\nDatabase State:\n- Table: natural_product, Columns: [label, description, taxon_name, instance_of, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, found_in_taxon, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: taxon, Columns: [label, description, taxon_name, taxon_rank, instance_of, parent_taxon, ncbi_taxonomy_id, gbif_taxon_id, encyclopedia_of_life_id, itis_tsn, bacdive_id, gram_staining, mesh_descriptor_id, lpsn_url, microsoft_academic_id, freebase_id, openalex_id, catalogue_of_life_id, irmng_id]",
        "Response": "Table: taxon"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score) VALUES (626, 16, 2014, 210);\nDatabase State:\n- Table: university, Columns: [id, country_id, university_name]\n- Table: ranking_criteria, Columns: [id, ranking_system_id, criteria_name]\n- Table: ranking_system, Columns: [id, system_name]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, locator_map_image, instance_of, freebase_id, gnis_id, population, geonames_id, official_website, area, named_after, shares_border_with, inception, capital, image, viaf_id, archinform_location_id, category_of_associated_people, whos_on_first_id, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, hasc, openstreetmap_relation_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households, library_of_congress_authority_id, national_library_of_israel_j9u_id) VALUES ('Fort Worth', 'city in Texas, United States', 'Tarrant County', 'Fort Worth, Texas', 'United States of America', '32.756388888888885', 'Category:Fort Worth, Texas', 'Tarrant County Texas Incorporated Areas Fort Worth highlighted.svg', 'city in the United States', '/m/0f2s6', '1380947.0', 918915.0, '4691930', 'http://www.fortworthtexas.gov', 916.759999999999991, 'William J. Worth', 'River Oaks', '+1849-00-00T00:00:00Z', 'nan', 'Fort Worth June 2016 68 (skyline).jpg', '126125532.0', '2004.0', 'Category:People from Fort Worth, Texas', '85851835.0', 'Category:Maps of Fort Worth, Texas', 2.312199999999999811, 'Fort Worth', 'nan', 'lccn-n79027008', 'nan', '115274.0', '7013934.0', 'nan', 30374.0, 307248.0, 'n79027008', '9.870075547995053e+17');\nDatabase State:\n- Table: administrative_centre, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, locator_map_image, instance_of, freebase_id, gnis_id, population, geonames_id, official_website, area, named_after, shares_border_with, inception, capital, image, viaf_id, archinform_location_id, category_of_associated_people, whos_on_first_id, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, hasc, openstreetmap_relation_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households, library_of_congress_authority_id, national_library_of_israel_j9u_id]\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, locator_map_image, instance_of, freebase_id, gnis_id, population, geonames_id, official_website, area, shares_border_with, inception, image, viaf_id, archinform_location_id, category_of_associated_people, whos_on_first_id, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, openstreetmap_relation_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households, library_of_congress_authority_id]\n- Table: political_border, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, locator_map_image, instance_of, freebase_id, gnis_id, population, geonames_id, official_website, area, named_after, shares_border_with, inception, capital, image, viaf_id, archinform_location_id, category_of_associated_people, whos_on_first_id, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, hasc, openstreetmap_relation_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households, library_of_congress_authority_id, national_library_of_israel_j9u_id]\n- Table: winner, Columns: [label, description, sex_or_gender, date_of_birth, place_of_birth, country_of_citizenship, occupation, instance_of, freebase_id, given_name, sport, lpga_tour_golf_player_id, family_name]\n- Table: physical_location, Columns: [label, description, country, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, freebase_id]\n- Table: united_states_womens_open_championship, Columns: [label, description, coordinate_location, country, sport, instance_of, point_in_time, competition_class, location, freebase_id, winner]",
        "Response": "Table: political_border"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tags (index, id, tag) VALUES (18926, 8658, 'korean');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: tags"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, date_of_birth, sex_or_gender, position_held, given_name, occupation, country_of_citizenship, family_name, languages_spoken_written_or_signed, candidacy_in_election, freebase_id, sa_parliament_member_id) VALUES ('Yatala colonial by-election, 1857', 'South Australian by-election', 'South Australian House of Assembly by-election', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan');\nDatabase State:\n- Table: family_name_identical_to_this_given_name, Columns: [label, description, instance_of, different_from, said_to_be_the_same_as, native_label, writing_system, soundex, cologne_phonetics, caverphone, g\u00e9opatronyme_id, geneanet_family_name_id]\n- Table: eponym, Columns: [label, description, commons_category, instance_of, freebase_id, image]\n- Table: political_candidate, Columns: [label, description, instance_of, date_of_birth, sex_or_gender, position_held, given_name, occupation, country_of_citizenship, family_name, languages_spoken_written_or_signed, candidacy_in_election, freebase_id, sa_parliament_member_id]\n- Table: family_name, Columns: [label, description, caverphone, instance_of, soundex, native_label, writing_system, geneanet_family_name_id, different_from, g\u00e9opatronyme_id]\n- Table: given_name, Columns: [label, description, said_to_be_the_same_as, family_name_identical_to_this_given_name, instance_of, different_from, native_label, writing_system, soundex, cologne_phonetics, caverphone, commons_category, language_of_work_or_name]\n- Table: jurisdiction, Columns: [label, description, coordinate_location, country, instance_of, named_after, inception, located_in_the_administrative_territorial_entity, freebase_id]\n- Table: south_australian_house_of_assembly_by_election, Columns: [label, description, instance_of, office_contested, point_in_time, country, applies_to_jurisdiction, successful_candidate, candidate]",
        "Response": "Table: candidate"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (event_id, competitor_id, medal_id) VALUES (531, 165545, 4);\nDatabase State:\n- Table: event, Columns: [id, sport_id, event_name]\n- Table: noc_region, Columns: [id, noc, region_name]\n- Table: games_city, Columns: [games_id, city_id]\n- Table: games, Columns: [id, games_year, games_name, season]\n- Table: sport, Columns: [id, sport_name]\n- Table: competitor_event, Columns: [event_id, competitor_id, medal_id]\n- Table: city, Columns: [id, city_name]",
        "Response": "Table: competitor_event"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, catalogue_of_life_id, gram_staining, lpsn_url, microsoft_academic_id) VALUES ('Thermosynechococcus elongatus', 'species of Cyanobacteria', 'Thermosynechococcus', 'Thermosynechococcus elongatus', 'taxon', 'species', 'nan', 'nan', '146786.0', 'nan', '11827968.0', 'nan', 'Gram-negative bacteria', 'https://lpsn.dsmz.de/species/thermosynechococcus-elongatus', 'nan');\nDatabase State:\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, instance_of, ncbi_locus_tag, genomic_end, strand_orientation, genomic_start]\n- Table: era_type_guanine_nucleotide_binding_g_domain_protein_family, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: taxon"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount) VALUES (604, 228, '2014-12-09', 2138.960000000000036);\nDatabase State:\n- Table: First_Notification_of_Loss, Columns: [FNOL_ID, Customer_ID, Policy_ID, Service_ID]\n- Table: Claims, Columns: [Claim_ID, FNOL_ID, Effective_Date]\n- Table: Customers_Policies, Columns: [Customer_ID, Policy_ID, Date_Opened, Date_Closed]\n- Table: Available_Policies, Columns: [Policy_ID, policy_type_code, Customer_Phone]\n- Table: Customers, Columns: [Customer_ID, Customer_name]\n- Table: Claims_Settlements, Columns: [Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount]",
        "Response": "Table: Claims_Settlements"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO flagellar_basal_body_rod_protein_flgc (label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, biological_process, cell_component, has_parts, instance_of, refseq_protein_id, part_of) VALUES ('Putative flagellar basal-body rod protein FlgC ECUMN_0271', 'microbial protein found in Escherichia coli UMN026', 'B7N8D6', 'Escherichia coli UMN026', 'protein', 'putative flagellar basal-body rod protein FlgC ECUMN_0271', 'bacterial-type flagellum-dependent cell motility', 'bacterial-type flagellum', 'Flagellar basal body rod protein, N-terminal', 'protein', 'YP_002411042', 'Flagellar basal-body rod protein FlgC');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: flagellar_basal_body_rod_protein_flgc"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO drifter (label, description, instance_of, country, located_in_the_administrative_territorial_entity, coordinate_location, significant_event, described_by_source, canmore_id, historic_county) VALUES ('Persevere', 'Shipwreck off the Scottish Coast, imported from Canmore Nov 2020', 'drifter', 'United Kingdom', 'Fife', '56.02348148191297', 'shipwrecking', 'Canmore', '120181.0', 'Fife');\nDatabase State:\n- Table: Shipwrecks, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, coordinate_location, significant_event, described_by_source, canmore_id, historic_county]\n- Table: administrative_centre, Columns: [label, description, commons_category, country, located_in_the_administrative_territorial_entity, iso_3166_2_code, coordinate_location, topics_main_category, instance_of, freebase_id, fips_10_4_countries_and_regions, musicbrainz_area_id, geonames_id, openstreetmap_relation_id, gss_code_2011, official_website, curlie_id, capital, toid, area, geoshape, population, viaf_id, encyclop\u00e6dia_britannica_online_id, whos_on_first_id, gazetteer_for_scotland_place_id, image, catalog_code, worldcat_identities_id, authority, hasc, vision_of_britain_place_id, carbon_footprint, inaturalist_place_id, uk_parliament_thesaurus_id, locator_map_image, library_of_congress_authority_id, national_library_of_israel_j9u_id]\n- Table: governing_body, Columns: [label, description, instance_of, country, bbc_things_id, uk_parliament_thesaurus_id, whatdotheyknow_organisation_id, inception, official_website, gss_code_2011, twitter_username, viaf_id, social_media_followers]\n- Table: administrative_territorial_entity, Columns: [label, description, commons_category, country, located_in_the_administrative_territorial_entity, iso_3166_2_code, coordinate_location, topics_main_category, instance_of, freebase_id, fips_10_4_countries_and_regions, musicbrainz_area_id, geonames_id, openstreetmap_relation_id, gss_code_2011, official_website, curlie_id, capital, toid, area, category_of_associated_people, archinform_location_id, geoshape, population, viaf_id, encyclop\u00e6dia_britannica_online_id, whos_on_first_id, gazetteer_for_scotland_place_id, image, catalog_code, worldcat_identities_id, authority, hasc, vision_of_britain_place_id, carbon_footprint, inaturalist_place_id, uk_parliament_thesaurus_id, locator_map_image]\n- Table: wikimedia_category, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: political_border, Columns: [label, description, commons_category, coordinate_location, country, freebase_id, located_in_the_administrative_territorial_entity, instance_of, population, shares_border_with, vision_of_britain_place_id, locator_map_image, described_by_source, catalog_code, factgrid_item_id]\n- Table: historic_county, Columns: [label, description, coordinate_location, country, freebase_id, located_in_the_administrative_territorial_entity, locator_map_image, instance_of, commons_category, catalog_code, shares_border_with, gazetteer_for_scotland_place_id, described_by_source, genuki_id, population, factgrid_item_id]\n- Table: capital_city, Columns: [label, description, commons_category, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, topics_main_category, curlie_id, page_banner, musicbrainz_area_id, freebase_id, image, geonames_id, gnd_id, woeid, local_dialing_code, located_in_time_zone, vision_of_britain_place_id, toid, encyclop\u00e6dia_britannica_online_id, capital_of, population, postal_code, library_of_congress_authority_id, viaf_id, whos_on_first_id, vision_of_britain_unit_id, gazetteer_for_scotland_place_id, gss_code_2011, historic_county, worldcat_identities_id, described_by_source, factgrid_item_id, national_library_of_israel_j9u_id, store_norske_leksikon_id, os_grid_reference]",
        "Response": "Table: Shipwrecks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO yebc_like (label, description, uniprot_protein_id, encoded_by, biological_process, cell_component, found_in_taxon, refseq_protein_id, molecular_function, instance_of, part_of, subclass_of) VALUES ('transcriptional regulator    Rv2603c', 'microbial protein found in Mycobacterium tuberculosis H37Rv', 'P9WGA5', 'transcriptional regulator Rv2603c', 'regulation of transcription, DNA-templated', 'cytoplasm', 'Mycobacterium tuberculosis H37Rv', 'NP_217119', 'DNA binding', 'protein', 'YebC-like', 'protein');\nDatabase State:\n- Table: yebc_like, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, cell_component, found_in_taxon, refseq_protein_id, molecular_function, instance_of, part_of, subclass_of]\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: yebc_like"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO rootbeerreview (CustomerID, BrandID, StarRating, ReviewDate, Review) VALUES (951702, 10021, 3, '2014-07-09', NULL);\nDatabase State:\n- Table: BeerReviews, Columns: [CustomerID, BrandID, StarRating, ReviewDate, Review]\n- Table: rootbeerbrand, Columns: [BrandID, BrandName, FirstBrewedYear, BreweryName, City, State, Country, Description, CaneSugar, CornSyrup, Honey, ArtificialSweetener, Caffeinated, Alcoholic, AvailableInCans, AvailableInBottles, AvailableInKegs, Website, FacebookPage, Twitter, WholesaleCost, CurrentRetailPrice]",
        "Response": "Table: BeerReviews"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('dithiobiotin synthetase CA_C1361', 'microbial gene found in Clostridium acetobutylicum ATCC 824', 'Clostridium acetobutylicum ATCC 824', '1117544', 'gene', 'CA_C1361', 'Dithiobiotin synthetase CA_C1361', 'gene', '1507039', 'forward strand', '1506317');\nDatabase State:\n- Table: dethiobiotin_synthase_biod, Columns: [label, description, uniprot_protein_id, found_in_taxon, encoded_by, subclass_of, cell_component, molecular_function, biological_process, instance_of, refseq_protein_id, part_of]\n- Table: Genes, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Mountain_ID, Name, Height, Prominence, Range, Country) VALUES (6, 'Ngaliema / Mt Stanley (Savoia Pk)', 4977.0, 110.0, 'Rwenzori', 'Uganda');\nDatabase State:\n- Table: climber, Columns: [Climber_ID, Name, Country, Time, Points, Mountain_ID]",
        "Response": "Table: mountain"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO delimitation_orders_of_india_under_delimitation_act_2002 (label, description, instance_of, country, applies_to_jurisdiction, legal_citation_of_this_text, part_of, effective_date) VALUES ('Delimitation Order No. 43 under Delimitation Act, 2002', 'nan', 'proclamation', 'India', 'Tamil Nadu', 'O.N. 52 (E) dated 5 April 2007', 'Delimitation Orders of India under Delimitation Act, 2002', '+2008-02-19T00:00:00Z');\nDatabase State:\n- Table: office_held_by_head_of_government, Columns: [label, description, instance_of, subclass_of, country, applies_to_jurisdiction, has_list, inception, part_of]\n- Table: part, Columns: [label, description, topics_main_category, instance_of, country, applies_to_jurisdiction, has_parts, freebase_id]\n- Table: capital_city, Columns: [label, description, instance_of, located_in_the_administrative_territorial_entity, country, coordinate_location, topics_main_category, freebase_id, image, geonames_id, gnd_id, elevation_above_sea_level, category_of_associated_people, capital_of, viaf_id, postal_code, local_dialing_code, population, official_website, quora_topic_id, area, page_banner, native_label, commons_category, authority, library_of_congress_authority_id, gran_enciclop\u00e8dia_catalana_id, whos_on_first_id, category_for_maps, worldcat_identities_id, store_norske_leksikon_id, national_library_of_israel_j9u_id, located_in_time_zone, encyclop\u00e6dia_britannica_online_id]\n- Table: delimitation_orders_of_india_under_delimitation_act_2002, Columns: [label, description, instance_of, country, applies_to_jurisdiction, legal_citation_of_this_text, part_of, effective_date]\n- Table: governing_body, Columns: [label, description, instance_of, country, has_parts, different_from, applies_to_jurisdiction]",
        "Response": "Table: delimitation_orders_of_india_under_delimitation_act_2002"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Vote (episode_id, stars, votes, percent) VALUES ('tt0629398', 2, 2, 1.0);\nDatabase State:\n- Table: Person, Columns: [person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Episode, Columns: [episode_id, series, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, series, episode_id, person_id, role, result]",
        "Response": "Table: Vote"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO station (id, network_name, services, local_authority) VALUES (3, 'Brentwood', 'Greater Anglia', 'Brentwood');\nDatabase State:\n- Table: train, Columns: [id, train_number, name, origin, destination, time, interval]",
        "Response": "Table: station"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('hypothetical protein BT_0770', 'microbial gene found in Bacteroides thetaiotaomicron VPI-5482', 'Bacteroides thetaiotaomicron VPI-5482', '1074393', 'gene', 'Hypothetical protein BT_0770', 'BT_0770', 'gene', '960446', 'forward strand', '960000');\nDatabase State:\n- Table: yhch_yjgk_yial_superfamily, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Conductor_ID, Name, Age, Nationality, Year_of_Work) VALUES (8, 'Pierre Boulez', 49, 'UK', 11);\nDatabase State:\n- Table: conductor, Columns: [Conductor_ID, Name, Age, Nationality, Year_of_Work]\n- Table: show, Columns: [Show_ID, Performance_ID, If_first_show, Result, Attendance]\n- Table: performance, Columns: [Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share]\n- Table: orchestra, Columns: [Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format]",
        "Response": "Table: conductor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (product_id, characteristic_id, product_characteristic_value) VALUES (11, 3, 'high');\nDatabase State:\n- Table: Product_Characteristics, Columns: [product_id, characteristic_id, product_characteristic_value]\n- Table: Ref_Product_Categories, Columns: [product_category_code, product_category_description, unit_of_measure]",
        "Response": "Table: Product_Characteristics"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('CTP synthetase Rru_A1887', 'microbial protein found in Rhodospirillum rubrum ATCC 11170', 'CTP synthetase Rru_A1887', 'Q2RT58', 'CTP biosynthetic process', 'nucleotide binding', 'CTP synthase GATase domain', 'Rhodospirillum rubrum ATCC 11170', 'YP_426974', 'protein', 'Class I glutamine amidotransferase-like', 'protein');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: ctp_synthase_n_terminal_domain_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (People_ID, Nationality, Name, Birth_Date, Height) VALUES (4, 'Russia', 'Sergey Grankin', 'January 22, 1987', 193.0);\nDatabase State:\n- Table: poker_player, Columns: [Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings]",
        "Response": "Table: people"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details) VALUES (15, 'Grade', 'facere', 'slow', NULL);\nDatabase State:\n- Table: Ref_Colors, Columns: [color_code, color_description]\n- Table: Ref_Characteristic_Types, Columns: [characteristic_type_code, characteristic_type_description]\n- Table: Characteristics, Columns: [characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details]\n- Table: Product_Characteristics, Columns: [product_id, characteristic_id, product_characteristic_value]",
        "Response": "Table: Characteristics"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO diamond_games (label, description, freebase_id, instance_of, follows, followed_by, country, sport, organizer, point_in_time, edition_number, start_time, end_time) VALUES ('2000 Mexx Sport Benelux Open', 'tennis tournament edition', 'nan', 'Diamond Games', '1999 Belgian Open', '2001 TennisCup Vlaanderen', 'Belgium', 'tennis', 'Women''s Tennis Association', '+2000-00-00T00:00:00Z', '7', '+2000-05-13T00:00:00Z', '+2000-05-21T00:00:00Z');\nDatabase State:\n- Table: TennisTournaments, Columns: [label, description, freebase_id, instance_of, follows, followed_by, country, sport, organizer, point_in_time, edition_number, start_time, end_time]",
        "Response": "Table: TennisTournaments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Shop_ID, Employee_ID, Start_from, Is_full_time) VALUES (5, 5, '2013', 'T');\nDatabase State:\n- Table: hiring, Columns: [Shop_ID, Employee_ID, Start_from, Is_full_time]",
        "Response": "Table: hiring"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO club (Club_ID, name, Region, Start_year) VALUES (4, 'ASC', 'Japan', '2001');\nDatabase State:\n- Table: Clubs, Columns: [Club_ID, name, Region, Start_year]\n- Table: player, Columns: [Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points]",
        "Response": "Table: Clubs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Location_ID, Other_Details) VALUES (10, 'Hilll Ltd');\nDatabase State:\n- Table: Products, Columns: [Product_ID, Product_Type_Code, Product_Name, Product_Price]\n- Table: Assets_in_Events, Columns: [Asset_ID, Event_ID]\n- Table: Finances, Columns: [Finance_ID, Other_Details]\n- Table: Parties, Columns: [Party_ID, Party_Details]\n- Table: Channels, Columns: [Channel_ID, Other_Details]\n- Table: Assets, Columns: [Asset_ID, Other_Details]\n- Table: Parties_in_Events, Columns: [Party_ID, Event_ID, Role_Code]\n- Table: Agreements, Columns: [Document_ID, Event_ID]\n- Table: Events, Columns: [Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID]",
        "Response": "Table: Locations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO government_of_latvia (label, description, inception, replaced_by, replaces, instance_of, applies_to_jurisdiction, dissolved_abolished_or_demolished_date) VALUES ('B\u0113rzi\u0146\u0161 cabinet', 'nan', '+2000-05-05T00:00:00Z', 'Rep\u0161e cabinet', '3rd \u0160\u0137\u0113le Cabinet', 'Government of Latvia', 'Latvia', '+2002-11-07T00:00:00Z');\nDatabase State:\n- Table: government_of_latvia, Columns: [label, description, inception, replaced_by, replaces, instance_of, applies_to_jurisdiction, dissolved_abolished_or_demolished_date]\n- Table: replaced_entity, Columns: [label, description, instance_of, replaced_by, replaces, applies_to_jurisdiction, dissolved_abolished_or_demolished_date, inception]\n- Table: replacing_subject, Columns: [label, description, inception, replaced_by, replaces, instance_of, applies_to_jurisdiction, dissolved_abolished_or_demolished_date]",
        "Response": "Table: government_of_latvia"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Participants (Participant_ID, Participant_Type_Code, Participant_Details) VALUES (26, 'Organizer', 'Vilma Schinner');\nDatabase State:\n- Table: Services, Columns: [Service_ID, Service_Type_Code]\n- Table: Participants, Columns: [Participant_ID, Participant_Type_Code, Participant_Details]",
        "Response": "Table: Participants"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, sport, country, edition_number, point_in_time, follows, followed_by, winner, event_distance) VALUES ('2006 Gent\u2013Wevelgem', 'cycling race', 'Gent\u2013Wevelgem', 'road bicycle racing', 'Belgium', '68', '+2006-04-05T00:00:00Z', '2005 Gent\u2013Wevelgem', '2007 Gent\u2013Wevelgem', 'Thor Hushovd', 210.0);\nDatabase State:\n- Table: followed_by, Columns: [label, description, instance_of, sport, country, follows, followed_by, point_in_time, edition_number, winner, event_distance]\n- Table: gentwevelgem, Columns: [label, description, instance_of, sport, country, edition_number, point_in_time, follows, followed_by, winner, event_distance]",
        "Response": "Table: gentwevelgem"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote) VALUES (1001, '08/30/2015', 'Fall', 1004, 1007, 1010, 1035, 1021, 1028);\nDatabase State:\n- Table: Student_Elections, Columns: [StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote]",
        "Response": "Table: Student_Elections"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference) VALUES (3, 'University of Rhode Island', 'Kingston, RI', 1892.0, 'Public', 19095.0, 'Rams', 'Atlantic 10 Conference ( D-I )');\nDatabase State:\n- Table: university, Columns: [School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]\n- Table: basketball_match, Columns: [Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "Response": "Table: university"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (AnswerText, SurveyID, UserID, QuestionID) VALUES ('just sharing about issues, reactions were supportive', 2017, 3430, 61);\nDatabase State:\n- Table: Answer, Columns: [AnswerText, SurveyID, UserID, QuestionID]\n- Table: Question, Columns: [questiontext, questionid]\n- Table: Survey, Columns: [SurveyID, Description]",
        "Response": "Table: Answer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO chromosome (label, description, refseq_genome_id, found_in_taxon, instance_of) VALUES ('mouse chromosome 1', 'mammalian chromosome', 'NC_000067', 'house mouse', 'chromosome');\nDatabase State:\n- Table: biological_process, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]\n- Table: encodes, Columns: [label, description, ensembl_protein_id, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: cellular_component, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]\n- Table: dynein_heavy_chain_region_d6_p_loop_domain_protein_family, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: expressed_in, Columns: [label, description, subclass_of, foundational_model_of_anatomy_id, instance_of]",
        "Response": "Table: chromosome"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO parish_union (label, description, instance_of, country, located_in_the_administrative_territorial_entity, official_website, diocese) VALUES ('Naantali parish union', 'parish union in Naantali, Finland', 'parish union', 'Finland', 'Naantali', 'https://www.naantalinseurakunnat.fi/', 'nan');\nDatabase State:\n- Table: part, Columns: [label, description, quora_topic_id, viaf_id, nkcr_aut_id, topics_main_category, locator_map_image, store_norske_leksikon_id, commons_category, instance_of, has_parts, freebase_id, coordinate_location, worldcat_identities_id]\n- Table: political_border, Columns: [label, description, located_in_the_administrative_territorial_entity, instance_of, commons_category, coordinate_location, country, shares_border_with, topics_main_category, population, geonames_id, category_of_associated_people, viaf_id, official_website, musicbrainz_area_id, located_in_time_zone, part_of, official_language, yso_id, image, whos_on_first_id, freebase_id, coat_of_arms_image, store_norske_leksikon_id, page_banner]\n- Table: twin_town, Columns: [label, description, locator_map_image, instance_of, located_in_the_administrative_territorial_entity, shares_border_with, country, commons_category, coat_of_arms_image, twinned_administrative_body, located_in_time_zone, topics_main_category, page_banner, official_website, musicbrainz_area_id, freebase_id, category_of_associated_people, image, viaf_id, coordinate_location, population, area, quora_topic_id, geonames_id, inaturalist_place_id]\n- Table: administrative_territorial_entity, Columns: [label, description, dewey_decimal_classification, twinned_administrative_body, country, commons_category, instance_of, coat_of_arms_image, image, located_in_time_zone, located_in_the_administrative_territorial_entity, coordinate_location, page_banner, musicbrainz_area_id, topics_main_category, freebase_id, population, geonames_id, shares_border_with, category_of_associated_people, official_website, finnish_municipality_number, legislative_body, official_language, area, yso_id, store_norske_leksikon_id, archinform_location_id, viaf_id, whos_on_first_id, ysa_id]\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, new_york_times_topic_id, babelnet_id, geonames_id, gnd_id, unicode_character, category_of_associated_people, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, coordinates_of_westernmost_point, geography_of_topic, iso_3166_1_alpha_3_code, office_held_by_head_of_government, isni, quora_topic_id, country, encyclop\u00e6dia_universalis_id, mesh_descriptor_id, guardian_topic_id, basic_form_of_government, musicbrainz_area_id, public_holiday, has_quality, coat_of_arms_image, uic_alphabetical_country_code, number_of_out_of_school_children, continent, insee_countries_and_foreign_territories_code, diplomatic_relation, inception, office_held_by_head_of_state, commons_gallery, legislative_body, iso_3166_1_numeric_code, nuts_code, history_of_topic, stw_thesaurus_for_economics_id, replaces, native_label, subreddit, located_in_or_next_to_body_of_water, capital, official_website, coat_of_arms, demonym, age_of_majority, national_library_of_israel_id_old, openstreetmap_relation_id, on_focus_list_of_wikimedia_project, wipo_st3, coordinates_of_northernmost_point, coordinates_of_easternmost_point, nkcr_aut_id, comic_vine_id, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, executive_body, compulsory_education_minimum_age, marriageable_age, topics_main_category, le_monde_diplomatique_subject_id, head_of_state, category_of_people_buried_here, locator_map_image, bbc_things_id, geoshape, dewey_decimal_classification, area, ituisoiec_object_identifier, head_of_government, ioc_country_code, member_of, fast_id, store_norske_leksikon_id, unemployment_rate, viaf_id, railway_traffic_side, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, category_for_films_shot_at_this_location, mains_voltage, official_name, located_in_time_zone, category_for_people_who_died_here, yso_id, anthem, highest_judicial_authority, life_expectancy, part_of, commons_category, top_level_internet_domain, shares_border_with, instance_of, highest_point, category_for_people_born_here, short_name, driving_side, uic_numerical_country_code, lowest_point, brockhaus_enzyklop\u00e4die_online_id, ipa_transcription, civicus_monitor_country_entry, official_language, pronunciation_audio, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, freebase_id, statoids_id, asc_leiden_thesaurus_id, library_of_congress_authority_id, curlie_id, flag, coordinate_location, fips_10_4_countries_and_regions, dagens_nyheter_topic_id, described_by_source, flag_image, iso_3166_1_alpha_2_code, maintained_by_wikiproject, iab_code, klexikon_article_id, loc_and_marc_vocabularies_id, language_used, whos_on_first_id, dr_topic_id, world_encyclopedia_of_puppetry_arts_id, gran_enciclop\u00e8dia_catalana_id, nese_id, omegawiki_defined_meaning, hds_id, treccani_id, gs1_country_code, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, treccanis_dizionario_di_storia_id, vat_rate, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, basque_vikidia_id, eurovoc_id, worldcat_identities_id, fandom_article_id, nalt_id, motto_text, open_data_portal, kbpedia_id, grove_art_online_id, gynopedia_id, rkd_thesaurus_id, interlingual_index_id, jewish_encyclopedia_id_russian, bbc_news_topic_id, inaturalist_place_id, economy_of_topic, edition_humboldt_digital_id, sapa_id, ysa_id, yle_topic_id, bhcl_uuid, tasteatlas_id, github_topic, uk_parliament_thesaurus_id, namuwiki_id, wordnet_31_synset_id, demographics_of_topic, cna_topic_id, joconde_location_id, zhihu_topic_id, idaigazetteer_id, encyclopedia_of_the_history_of_ukraine_id, armeniapedia_id, schoenberg_database_of_manuscripts_place_id, the_world_factbook_country_id, online_pwn_encyclopedia_id, larousse_id, colon_classification, national_library_of_israel_j9u_id, democracy_index, image_archive_herder_institute, der_spiegel_topic_id, gyldendals_teaterleksikon_id, museum_digital_place_id, wikisimpsons_id, krugosvet_article, den_store_danske_id, urban_electric_transit_country_id, biblioth\u00e8que_nationale_de_france_id, biblioteca_nacional_de_espa\u00f1a_id, hashtag, marine_regions_geographic_id, named_after, postimees_topic_id, m49_code, s\u00fcddeutsche_zeitung_topic_id, idref_id, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, central_bank, gini_coefficient, pm20_geo_code, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, different_from]\n- Table: parish_union, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, official_website, diocese]\n- Table: place_of_birth, Columns: [label, description, twinned_administrative_body, located_in_the_administrative_territorial_entity, commons_category, country, postal_code, located_in_time_zone, locator_map_image, topics_main_category, official_website, instance_of, freebase_id, gnd_id, musicbrainz_area_id, dewey_decimal_classification, category_for_people_who_died_here, category_of_associated_people, image, capital_of, elevation_above_sea_level, commons_gallery, viaf_id, facebook_places_id, coordinate_location, library_of_congress_authority_id, described_by_source, population, openstreetmap_relation_id, encyclop\u00e6dia_britannica_online_id, area, head_of_government, quora_topic_id, archinform_location_id, geonames_id, whos_on_first_id, official_name, nkcr_aut_id, worldcat_identities_id, native_label, national_library_of_israel_j9u_id, online_pwn_encyclopedia_id, store_norske_leksikon_id, category_for_maps]\n- Table: wikimedia_category, Columns: [label, description, instance_of, category_combines_topics, category_contains]",
        "Response": "Table: parish_union"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Batsman_Scored (Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No) VALUES (729316, 16, 7, 0, 1);\nDatabase State:\n- Table: Umpire, Columns: [Umpire_Id, Umpire_Name, Umpire_Country]\n- Table: Player_Match, Columns: [Match_Id, Player_Id, Role_Id, Team_Id]\n- Table: Season, Columns: [Season_Id, Man_of_the_Series, Orange_Cap, Purple_Cap, Season_Year]\n- Table: Batsman_Scored, Columns: [Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No]",
        "Response": "Table: Batsman_Scored"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO nomination (Artwork_ID, Festival_ID, Result) VALUES (8, 5, 'Nominated');\nDatabase State:\n- Table: festival_detail, Columns: [Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience]",
        "Response": "Table: nomination"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO routes (rid, dst_apid) VALUES (9229, 1382, 'CDG', 2177, 'BEY', 137, 'AF', NULL);\nDatabase State:\n- Table: airports, Columns: [apid]\n- Table: routes, Columns: [rid, dst_apid]\n- Table: airlines, Columns: [alid]",
        "Response": "Table: routes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violation (inspection_id, point_id, fine, inspector_comment) VALUES (1982660, 38, 100, 'OBSERVED THE FAUCET AT 3- COMPARTMENT SINK LEAKY.MUST REPAIR.');\nDatabase State:\n- Table: Inspections, Columns: [inspection_id, point_id, fine, inspector_comment]\n- Table: inspection, Columns: [inspection_id, inspection_date, inspection_type, results, employee_id, license_no, followup_to]",
        "Response": "Table: Inspections"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (transaction_id, lot_id) VALUES (1, 14);\nDatabase State:\n- Table: Purchases, Columns: [purchase_transaction_id, purchase_details]\n- Table: Investors, Columns: [investor_id, Investor_details]",
        "Response": "Table: Transactions_Lots"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, person_id, category, role, credited) VALUES ('tt0629321', 'nm1755160', 'Transportation Department', 'driver', 'true');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SeasonStatus (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS) VALUES (3706, '2007-2008', 'Sweden U20 (all)', 'International-Jr', 'Regular Season', 15, 2, 3, 5, 4, 0);\nDatabase State:\n- Table: PlayerSeasonStats, Columns: [ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS]\n- Table: PlayerInfo, Columns: [ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0]\n- Table: height_info, Columns: [height_id, height_in_cm, height_in_inch]",
        "Response": "Table: PlayerSeasonStats"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points) VALUES (2, 2, 13, 11, 16, 9, 139);\nDatabase State:\n- Table: player_coach, Columns: [Player_ID, Coach_ID, Starting_year]\n- Table: player, Columns: [Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank]\n- Table: MedalStandings, Columns: [Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points]\n- Table: coach, Columns: [Coach_ID, Coach_name, Gender, Club_ID, Rank]",
        "Response": "Table: MedalStandings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Tourist_Attraction_Features (Tourist_Attraction_ID, Feature_ID) VALUES (9561, 681);\nDatabase State:\n- Table: Locations, Columns: [Location_ID, Location_Name, Address, Other_Details]\n- Table: Museums, Columns: [Museum_ID, Museum_Details]\n- Table: Visitors, Columns: [Tourist_ID, Tourist_Details]\n- Table: Photos, Columns: [Photo_ID, Tourist_Attraction_ID, Name, Description, Filename, Other_Details]\n- Table: Hotels, Columns: [hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details]\n- Table: Street_Markets, Columns: [Market_ID, Market_Details]\n- Table: Theme_Parks, Columns: [Theme_Park_ID, Theme_Park_Details]\n- Table: Royal_Family, Columns: [Royal_Family_ID, Royal_Family_Details]\n- Table: Shops, Columns: [Shop_ID, Shop_Details]",
        "Response": "Table: Tourist_Attraction_Features"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update) VALUES (15585, 581, 1, 14976, 2.990000000000000213, '2005-08-22 07:10:26', '2006-02-15 22:22:41');\nDatabase State:\n- Table: rental, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]\n- Table: film_text, Columns: [film_id, title, description]\n- Table: category, Columns: [category_id, name, last_update]\n- Table: store, Columns: [store_id, manager_staff_id, address_id, last_update]\n- Table: payment, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: film_actor, Columns: [actor_id, film_id, last_update]\n- Table: address, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: language, Columns: [language_id, name, last_update]\n- Table: customer, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]",
        "Response": "Table: payment"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO topic (label, description, instance_of, start_time, end_time, gnd_id, commons_category, topics_main_category, freebase_id, image, location, library_of_congress_authority_id, participant, encyclop\u00e6dia_britannica_online_id, part_of, nkcr_aut_id, national_library_of_israel_j9u_id) VALUES ('World War I', 'global war originating in Europe, 1914\u20131918', 'world war', '+1914-07-28T00:00:00Z', '+1918-11-11T00:00:00Z', '4079163-4', 'World War I', 'Category:World War I', '/m/0cm2xh', 'WWImontage.jpg', 'Europe', 'sh85148236', 'Allies of the First World War', 'event/World-War-I', 'late modern period', 'ph126327', '987007565979805171');\nDatabase State:\n- Table: war_in_popular_culture, Columns: [label, description, instance_of, main_subject, subclass_of]",
        "Response": "Table: topic"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO jizera_mountains (label, description, instance_of, country, coordinate_location, elevation_above_sea_level, image, located_in_the_administrative_territorial_entity, mountain_range, google_knowledge_graph_id, part_of) VALUES ('Lys\u00fd vrch', 'nan', 'mountain', 'Czech Republic', '50.86611', 642.7999999999999546, 'Lys\u00fd vrch, od Chrastavy.jpg', 'He\u0159manice', 'Jizera Mountains', '/g/1229cyw4', 'Jizera Mountains');\nDatabase State:\n- Table: Mountains, Columns: [label, description, instance_of, country, coordinate_location, elevation_above_sea_level, image, located_in_the_administrative_territorial_entity, mountain_range, google_knowledge_graph_id, part_of]",
        "Response": "Table: Mountains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Person (name, age, city, gender, job) VALUES ('Alice', 25, 'new york city', 'female', 'student');\nDatabase State:\n- Table: People, Columns: [name, age, city, gender, job]",
        "Response": "Table: People"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (FacID, Lname, Fname, Rank, Sex, Phone, Room, Building) VALUES (6112, 'Beach', 'Louis', 'Instructor', 'M', 1838, '207', 'NEB');\nDatabase State:\n- Table: Faculty_Participates_in, Columns: [FacID, actid]\n- Table: Participates_in, Columns: [stuid, actid]\n- Table: Activity, Columns: [actid, activity_name]\n- Table: Faculty, Columns: [FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Faculty"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO railway_coach (label, description, subclass_of, commons_category, operator, instance_of) VALUES ('OCEM Talbot coach', 'nan', 'railway coach', 'SNCF driving Talbot coaches', 'SNCF', 'rolling stock class');\nDatabase State:\n- Table: operator, Columns: [label, description, commons_category, instance_of, freebase_id, viaf_id, library_of_congress_authority_id, inception, headquarters_location, country, industry, topics_main_category, worldcat_identities_id, replaces]\n- Table: country, Columns: [label, description, topics_main_wikimedia_portal, continent, instance_of, commons_category, library_of_congress_authority_id, idref_id, biblioth\u00e8que_nationale_de_france_id, gnd_id, coordinate_location, topics_main_category, freebase_id, inception, locator_map_image, flag_image, anthem, basic_form_of_government, legislative_body, currency, capital, category_of_associated_people, described_by_source, page_banner, commons_gallery, demonym, shares_border_with, encyclop\u00e6dia_britannica_online_id, population, quora_topic_id, yso_id, getty_thesaurus_of_geographic_names_id, stw_thesaurus_for_economics_id, us_national_archives_identifier, coat_of_arms, official_language, area, mesh_descriptor_id, great_russian_encyclopedia_online_id, native_label, part_of, viaf_id, klexikon_article_id, isni, gran_enciclop\u00e8dia_catalana_id, omegawiki_defined_meaning, category_for_maps, office_held_by_head_of_state, french_vikidia_id, language_used, member_of, nkcr_aut_id, worldcat_identities_id, coat_of_arms_image, replaces, diplomatic_relation, pm20_geo_code, interlingual_index_id, economy_of_topic, libris_uri, bhcl_uuid, wordnet_31_synset_id, idaigazetteer_id, store_norske_leksikon_id, den_store_danske_id, national_library_of_israel_j9u_id, demographics_of_topic, museum_digital_place_id, nese_id, brockhaus_enzyklop\u00e4die_online_id, on_focus_list_of_wikimedia_project, babelnet_id, country, short_name, head_of_state, motto_text, le_monde_diplomatique_subject_id, country_calling_code, flag, ndl_authority_id, geonames_id, unesco_thesaurus_id, ioc_country_code, gacs_id, contains_the_administrative_territorial_entity, kbpedia_id, uk_parliament_thesaurus_id, yle_topic_id, ysa_id, eu_knowledge_graph_item_id]\n- Table: replaced_entity, Columns: [label, description, instance_of, inception, country, replaced_by]",
        "Response": "Table: railway_coach"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO endoribonuclease_antitoxin_ghos_superfamily (label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of) VALUES ('Hypothetical protein NRG857_20705', 'microbial protein found in Escherichia coli O83:H1 str. NRG 857C', 'A0A0H3ET47', 'Escherichia coli O83:H1 str. NRG 857C', 'protein', 'hypothetical protein NRG857_20705', 'protein', 'YP_006122483', 'Endoribonuclease antitoxin GhoS superfamily');\nDatabase State:\n- Table: natural_product, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, genbank_assembly_accession_number, gram_staining]\n- Table: ProteinDatabase, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of]\n- Table: encoded_by, Columns: [label, description, subclass_of, entrez_gene_id, found_in_taxon, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: ProteinDatabase"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, model_year, country) VALUES (168, 1981, 3);\nDatabase State:\n- Table: Cars, Columns: [ID, model_year, country]\n- Table: data, Columns: [ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name]",
        "Response": "Table: Cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO u2base (userid, movieid, rating) VALUES (4972, 1693346, '2');\nDatabase State:\n- Table: User_Movie_Ratings, Columns: [userid, movieid, rating]\n- Table: directors, Columns: [directorid, d_quality, avg_revenue]",
        "Response": "Table: User_Movie_Ratings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movieid, actorid, cast_num) VALUES (2410916, 1041767, 2);\nDatabase State:\n- Table: movies2directors, Columns: [movieid, directorid, genre]\n- Table: users, Columns: [userid, age, u_gender, occupation]",
        "Response": "Table: movies2actors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO routes (rid, dst_apid) VALUES (43782, 1057, 'TF', 1053, 'SPC', 1539, 'T', NULL);\nDatabase State:\n- Table: airports, Columns: [apid]\n- Table: airlines, Columns: [alid]",
        "Response": "Table: routes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ranking_date) VALUES (20050815, 522, 202389, 29, 3);\nDatabase State:\n- Table: Rankings_History, Columns: [ranking_date]",
        "Response": "Table: Rankings_History"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (person_id, person_name) VALUES (44731, 'Jonathan Ross');\nDatabase State:\n- Table: department, Columns: [department_id, department_name]\n- Table: movie_keywords, Columns: [movie_id, keyword_id]\n- Table: movie, Columns: [movie_id, title, budget, homepage, overview, popularity, release_date, revenue, runtime, movie_status, tagline, vote_average, vote_count]\n- Table: movie_cast, Columns: [movie_id, person_id, character_name, gender_id, cast_order]\n- Table: movie_genres, Columns: [movie_id, genre_id]\n- Table: country, Columns: [country_id, country_iso_code, country_name]\n- Table: movie_company, Columns: [movie_id, company_id]\n- Table: keyword, Columns: [keyword_id, keyword_name]\n- Table: production_company, Columns: [company_id, company_name]",
        "Response": "Table: person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph) VALUES (3, 'Monday', 49, 46, 30.0, 10);\nDatabase State:\n- Table: train, Columns: [id, train_number, name, origin, destination, time, interval]\n- Table: weekly_weather, Columns: [station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph]\n- Table: route, Columns: [train_id, station_id]",
        "Response": "Table: weekly_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO injury_accident (game_id, id, Player, Injury, Number_of_matches, Source) VALUES (8, 10, 'Iv\u00e1n C\u00f3rdoba', 'Sustained a biceps femoris strain in his left leg', '1', 'inter.it');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: injury_accident"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, geoshape, locator_map_image, shares_border_with, vision_of_britain_place_id, population, coordinate_location, catalog_code, factgrid_item_id, located_in_the_administrative_territorial_entity, commons_category) VALUES ('Cardiganshire', 'historic county', 'historic county of Wales', 'United Kingdom', 'Data:Historic counties of Wales/Cardiganshire.map', 'Cardiganshire Brit Isles Sect 6.svg', 'Carmarthenshire', '17265', 75270.0, '52.2559422184', 'CRD', 'Q217687', 'Wales', 'nan');\nDatabase State:\n- Table: HistoricalCounties, Columns: [label, description, instance_of, country, geoshape, locator_map_image, shares_border_with, vision_of_britain_place_id, population, coordinate_location, catalog_code, factgrid_item_id, located_in_the_administrative_territorial_entity, commons_category]",
        "Response": "Table: HistoricalCounties"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (name, director) VALUES ('Meet the Robinsons', 'Stephen J. Anderson');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: director"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, population, country, capital, located_in_the_administrative_territorial_entity, coordinate_location, area, contains_the_administrative_territorial_entity, locator_map_image, number_of_houses, mean_age, mapycz_id, commons_category, iso_3166_2_code, openstreetmap_relation_id, lau, topics_main_category, freebase_id, geonames_id, musicbrainz_area_id, image, geoshape, nkcr_aut_id, licence_plate_code, shares_border_with, viaf_id, czech_district_id, category_for_maps, hasc, inaturalist_place_id, topics_main_template, library_of_congress_authority_id) VALUES ('Fr\u00fddek-M\u00edstek District', 'district of the Czech Republic', 'districts of the Czech Republic', 212347.0, 'Czech Republic', 'Fr\u00fddek-M\u00edstek', 'Moravian-Silesian Region', '49.685556', 1208.490000000000009, 'Fr\u00fddek-M\u00edstek', 'Okres frydek-mistek.PNG', 49400.0, 41.89999999999999858, 'dist&id=61', 'Fr\u00fddek-M\u00edstek District', 'CZ-802', '442412.0', 'CZ0802', 'Category:Fr\u00fddek-M\u00edstek District', '/m/026splq', '3076125.0', '46321fc9-47aa-4357-9a76-0318aada5579', 'Frydek-Mistek Czech Republic2.jpg', 'Data:Czech Republic/Fr\u00fddek-M\u00edstek.map', 'ge134177', 'FM', 'Ostrava-City District', '158322958', '3802.0', 'Category:Maps of Fr\u00fddek-M\u00edstek District', 'CZ.VK.FM', '29395.0', 'Template:Fr\u00fddek-M\u00edstek District', 'n84045686');\nDatabase State:\n- Table: jurisdiction, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, capital, locator_map_image, openstreetmap_relation_id, shares_border_with, country, coordinate_location, lau, topics_main_category, instance_of, iso_3166_2_code, freebase_id, geonames_id, viaf_id, image, population, area, musicbrainz_area_id, geoshape, mean_age, licence_plate_code, nkcr_aut_id, library_of_congress_authority_id, czech_district_id, category_for_maps, hasc, mapycz_id, inaturalist_place_id, number_of_houses, topics_main_template, contains_the_administrative_territorial_entity]\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, population, country, capital, located_in_the_administrative_territorial_entity, coordinate_location, area, contains_the_administrative_territorial_entity, locator_map_image, number_of_houses, mean_age, mapycz_id, commons_category, iso_3166_2_code, openstreetmap_relation_id, lau, topics_main_category, freebase_id, geonames_id, musicbrainz_area_id, image, geoshape, nkcr_aut_id, licence_plate_code, shares_border_with, viaf_id, czech_district_id, category_for_maps, hasc, inaturalist_place_id, topics_main_template, library_of_congress_authority_id]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Participants (Participant_ID, Participant_Type_Code, Participant_Details) VALUES (28, 'Organizer', 'Lupe Deckow');\nDatabase State:\n- Table: Participants_in_Events, Columns: [Event_ID, Participant_ID]\n- Table: Event_Participants, Columns: [Participant_ID, Participant_Type_Code, Participant_Details]",
        "Response": "Table: Event_Participants"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO RA (student_id, capability, prof_id, salary) VALUES (9, 4, 2, 'high');\nDatabase State:\n- Table: student, Columns: [student_id, f_name, l_name, phone_number, email, intelligence, gpa, type]\n- Table: ResearchAssistant, Columns: [student_id, capability, prof_id, salary]\n- Table: course, Columns: [course_id, name, credit, diff]\n- Table: prof, Columns: [prof_id, gender, first_name, last_name, email, popularity, teachingability, graduate_from]",
        "Response": "Table: ResearchAssistant"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO swedish_junior_badminton_championships (label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows) VALUES ('1986/1987 Swedish Junior Badminton Championships U19', 'badminton championships', 'Swedish Junior Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'Sweden', '+1987-00-00T00:00:00Z', '1987/1988 Swedish Junior Badminton Championships U19', 'national championship', '1986/1987 Swedish Junior Badminton Championships U19 \u2013 Men''s singles', '1985/1986 Swedish Junior Badminton Championships U19');\nDatabase State:\n- Table: followed_by, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, follows, followed_by, competition_class, has_parts]\n- Table: swedish_junior_badminton_championships, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows]\n- Table: follows, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows]",
        "Response": "Table: swedish_junior_badminton_championships"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed) VALUES (10, 6, '0', 'HUS', 'MED', 'Troy', '9', '2012-07-11 17:15:10', '0', '8.96', '2017-12-29 06:08:26', '2018-03-18 07:47:40', '2018-03-25 04:42:14');\nDatabase State:\n- Table: Breeds, Columns: [breed_code, breed_name]\n- Table: Sizes, Columns: [size_code, size_description]",
        "Response": "Table: Dogs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO chromosome (label, description, refseq_genome_id, found_in_taxon, instance_of) VALUES ('Drosophila melanogaster chromosome 3L', 'chromosome', 'NT_037436', 'Drosophila melanogaster', 'chromosome');\nDatabase State:\n- Table: Chromosomes, Columns: [label, description, refseq_genome_id, found_in_taxon, instance_of]",
        "Response": "Table: Chromosomes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, category, person, role, credited) VALUES ('S20-E8', 'Produced by', 'Kent Rice', 'animation executive producer', 'true');\nDatabase State:\n- Table: Character_Award, Columns: [award_id, character]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, person, role, episode_id, season, song, result]\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id) VALUES (9, 117, 116, 'OK', 'New', 'Product Unusable', '2006-10-29 07:08:46', '1995-09-11 14:48:46', 120);\nDatabase State:\n- Table: CustomerComplaints, Columns: [complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id]",
        "Response": "Table: CustomerComplaints"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, coordinate_location, country, heritage_designation, instance_of, located_in_the_administrative_territorial_entity, national_heritage_list_for_england_number, historic_county, os_grid_reference) VALUES ('Ha-Ha Approximately 20 Metres South Of Low Hall', 'ha-ha in Brompton, Scarborough, North Yorkshire, UK', '54.222199', 'United Kingdom', 'Grade II listed building', 'ha-ha', 'Brompton', '1167765.0', 'Yorkshire', 'SE9398081676');\nDatabase State:\n- Table: historic_county, Columns: [label, description, commons_category, coordinate_location, locator_map_image, instance_of, country, population, flag_image, shares_border_with, flag, catalog_code, factgrid_item_id, part_of, different_from]",
        "Response": "Table: ha_ha"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, country, topics_main_category, commons_category, geonames_id, population, area, image, freebase_id, openstreetmap_relation_id, whos_on_first_id) VALUES ('Veve\u0159\u00ed', 'neighborhood of Brno-st\u0159ed', '49.205', 'municipal part in Czechia', 'Brno-st\u0159ed', 'Czech Republic', 'nan', 'Veve\u0159\u00ed', 'nan', 20467.0, 1.975999999999999979, 'Brno-Veve\u0159\u00ed - Kotl\u00e1\u0159sk\u00e1 street from east.jpg', 'nan', '433066.0', '85907677.0');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, country, topics_main_category, commons_category, geonames_id, population, area, image, freebase_id, openstreetmap_relation_id, whos_on_first_id]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO historical (ballotpedia_id, bioguide_id, bioguide_previous_id, birthday_bio, cspan_id, fec_id, first_name, gender_bio, google_entity_id_id, govtrack_id, house_history_alternate_id, house_history_id, icpsr_id, last_name, lis_id, maplight_id, middle_name, nickname_name, official_full_name, opensecrets_id, religion_bio, suffix_name, thomas_id, votesmart_id, wikidata_id, wikipedia_id) VALUES (NULL, 'F000090', NULL, NULL, NULL, NULL, 'Charles', 'M', 'kg:/m/02rkmwx', 412148, NULL, 13083.0, 3118.0, 'Ferris', NULL, NULL, 'Goadsby', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Q328650', 'Charles G. Ferris');\nDatabase State:\n- Table: historical, Columns: [ballotpedia_id, bioguide_id, bioguide_previous_id, birthday_bio, cspan_id, fec_id, first_name, gender_bio, google_entity_id_id, govtrack_id, house_history_alternate_id, house_history_id, icpsr_id, last_name, lis_id, maplight_id, middle_name, nickname_name, official_full_name, opensecrets_id, religion_bio, suffix_name, thomas_id, votesmart_id, wikidata_id, wikipedia_id]",
        "Response": "Table: historical"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, model_year, country) VALUES (319, 1980, 3);\nDatabase State:\n- Table: data, Columns: [ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name]\n- Table: price, Columns: [ID, price]\n- Table: production, Columns: [ID, model_year, country]\n- Table: country, Columns: [origin, country]",
        "Response": "Table: production"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO order_history (history_id, order_id, status_id, status_date) VALUES (12001, 4417, 2, '2021-12-09 05:36:14');\nDatabase State:\n- Table: author, Columns: [author_id, author_name]\n- Table: OrderStatusHistory, Columns: [history_id, order_id, status_id, status_date]\n- Table: order_status, Columns: [status_id, status_value]\n- Table: book_author, Columns: [book_id, author_id]\n- Table: customer, Columns: [customer_id, first_name, last_name, email]\n- Table: customer_address, Columns: [customer_id, address_id, status_id]",
        "Response": "Table: OrderStatusHistory"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tags (index, id, tag) VALUES (95204, 47249, '2010s');\nDatabase State:\n- Table: torrents, Columns: [groupName, totalSnatched, artist, groupYear, releaseType, groupId, id]\n- Table: MediaLibrary, Columns: [index, id, tag]",
        "Response": "Table: MediaLibrary"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, follows, sport, has_parts, point_in_time, followed_by, subclass_of) VALUES ('2018\u00a0national road cycling championships', 'List of cyclists', 'National road cycling championships', '2017\u00a0national road cycling championships', 'road bicycle racing', '2018 South African National Road Race Championships', '+2018-00-00T00:00:00Z', '2019\u00a0national road cycling championships', 'CN');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: part"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone) VALUES (153, 'Mercedes House', 'Mercedes House', 'Studio', replace('354 Otto Villages\\nCharliefort, VT 71664','\\n',char(10)), 'Brenden', '915-617-2408x832');\nDatabase State:\n- Table: Apartment_Buildings, Columns: [building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone]\n- Table: Apartment_Bookings, Columns: [apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date]\n- Table: View_Unit_Status, Columns: [apt_id, apt_booking_id, status_date, available_yn]",
        "Response": "Table: Apartment_Buildings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO citation (label, description, pages, title, author_name_string, publication_date, issue, volume, published_in, instance_of, pubmed_id, doi, language_of_work_or_name) VALUES ('Bap31 enhances the endoplasmic reticulum export and quality control of human class I MHC molecules', 'scientific journal article', '6172\u20136181', 'Bap31 enhances the endoplasmic reticulum export and quality control of human class I MHC molecules', 'John J. Ladasky', '+2006-11-01T00:00:00Z', '9', '177', 'Journal of Immunology', 'scholarly article', '17056546', '10.4049/JIMMUNOL.177.9.6172', 'English');\nDatabase State:\n- Table: Publications, Columns: [label, description, pages, title, author_name_string, publication_date, issue, volume, published_in, instance_of, pubmed_id, doi, language_of_work_or_name]",
        "Response": "Table: Publications"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Ref_Property_Types (property_type_code, property_type_description) VALUES ('House', 'House, Bungalow, etc.');\nDatabase State:\n- Table: Other_Property_Features, Columns: [property_id, feature_id, property_feature_description]\n- Table: Properties, Columns: [property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details]\n- Table: PropertyTypes, Columns: [property_type_code, property_type_description]\n- Table: Other_Available_Features, Columns: [feature_id, feature_type_code, feature_name, feature_description]",
        "Response": "Table: PropertyTypes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO flagellar_basal_body_rod_protein_flgc (label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, biological_process, cell_component, has_parts, instance_of, refseq_protein_id, part_of) VALUES ('Flagellar basal-body rod protein FlgC Mesci_1956', 'microbial protein found in Mesorhizobium ciceri biovar biserrulae WSM1271', 'E8TFW7', 'Mesorhizobium ciceri biovar biserrulae WSM1271', 'nan', 'flagellar basal-body rod protein FlgC Mesci_1956', 'bacterial-type flagellum-dependent cell motility', 'bacterial-type flagellum', 'Flagellar basal-body/hook protein, C-terminal domain', 'protein', 'YP_004141159', 'Flagellar basal-body rod protein FlgC');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: flagellar_basal_body_rod_protein_flgc, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, biological_process, cell_component, has_parts, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: flagellar_basal_body_rod_protein_flgc"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience) VALUES (2, 'Flower Awards', 'Charles Coody', 'United States', 2007, 155);\nDatabase State:\n- Table: artwork, Columns: [Artwork_ID, Type, Name]\n- Table: festival_detail, Columns: [Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience]",
        "Response": "Table: festival_detail"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, ensembl_gene_id, homologene_id, chromosome, found_in_taxon, refseq_rna_id, ensembl_transcript_id, encodes, mouse_genome_informatics_id, ortholog, exact_match, mgi_gene_symbol, strand_orientation, instance_of, cytogenetic_location, genomic_start, genomic_end, expressed_in) VALUES ('MLH1', 'protein-coding gene in the species Saccharomyces cerevisiae S288c', '855203', 'protein-coding gene', 'YMR167W', '208', 'Saccharomyces cerevisiae S288c chromosome XIII', 'Saccharomyces cerevisiae S288c', 'NM_001182671', 'YMR167W_mRNA', 'Mismatch repair ATPase MLH1 YMR167W', 'nan', 'Mlh1', 'nan', 'nan', 'forward strand', 'gene', 'nan', '594886', '597195', 'nan');\nDatabase State:\n- Table: biological_variant_of, Columns: [label, description, entrez_gene_id, subclass_of, ensembl_gene_id, ensembl_transcript_id, hgnc_gene_symbol, hgnc_id, homologene_id, refseq_rna_id, ortholog, image, encodes, found_in_taxon, exact_match, strand_orientation, genomic_end, genomic_start, chromosome, gene_atlas_image, instance_of, cytogenetic_location, omim_id, expressed_in, civic_gene_id, genetic_association]\n- Table: inframe_deletion, Columns: [label, description, biological_variant_of, chromosome, civic_variant_id, genomic_start, genomic_end, instance_of]\n- Table: encodes, Columns: [label, description, ensembl_protein_id, found_in_taxon, uniprot_protein_id, encoded_by, refseq_protein_id, biological_process, molecular_function, cell_component, has_parts, instance_of, part_of]",
        "Response": "Table: orthology"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO country (label, description, great_russian_encyclopedia_online_id, coordinates_of_southernmost_point, new_york_times_topic_id, gnd_id, category_of_associated_people, emergency_phone_number, electrical_plug_type, licence_plate_code, hashtag, babelnet_id, office_held_by_head_of_government, curlie_id, native_label, musicbrainz_area_id, public_holiday, insee_countries_and_foreign_territories_code, vat_rate, diplomatic_relation, flag_image, commons_gallery, viaf_id, history_of_topic, located_in_or_next_to_body_of_water, capital, subreddit, openstreetmap_relation_id, mobile_country_code, maritime_identification_digits, nkcr_aut_id, asc_leiden_thesaurus_id, marriageable_age, category_of_people_buried_here, motto_text, geoshape, coordinates_of_easternmost_point, le_monde_diplomatique_subject_id, marine_regions_geographic_id, member_of, unemployment_rate, located_in_time_zone, category_for_people_who_died_here, yso_id, office_held_by_head_of_state, commons_category, shares_border_with, us_national_archives_identifier, nalt_id, treccani_id, iso_3166_1_numeric_code, coordinates_of_westernmost_point, country_calling_code, stw_thesaurus_for_economics_id, statoids_id, flag, fips_10_4_countries_and_regions, isni, nese_id, maintained_by_wikiproject, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, wikimedia_outline, ndl_authority_id, currency, geonames_id, unicode_character, unesco_thesaurus_id, geography_of_topic, iso_3166_1_alpha_3_code, official_name, quora_topic_id, mesh_descriptor_id, basic_form_of_government, coat_of_arms_image, ituisoiec_object_identifier, legislative_body, nuts_code, freebase_id, official_language, replaces, continent, coat_of_arms, age_of_majority, on_focus_list_of_wikimedia_project, wipo_st3, coordinates_of_northernmost_point, has_quality, iso_3166_1_alpha_2_code, total_fertility_rate, area, store_norske_leksikon_id, compulsory_education_minimum_age, different_from, topics_main_category, biblioth\u00e8que_nationale_de_france_id, locator_map_image, bbc_things_id, head_of_government, ioc_country_code, fast_id, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, anthem, highest_judicial_authority, life_expectancy, top_level_internet_domain, instance_of, highest_point, category_for_people_born_here, driving_side, lowest_point, civicus_monitor_country_entry, pronunciation_audio, idref_id, contains_the_administrative_territorial_entity, itu_letter_code, library_of_congress_authority_id, coordinate_location, described_by_source, brockhaus_enzyklop\u00e4die_online_id, iab_code, klexikon_article_id, loc_and_marc_vocabularies_id, language_used, dr_topic_id, world_encyclopedia_of_puppetry_arts_id, gran_enciclop\u00e8dia_catalana_id, whos_on_first_id, inaturalist_place_id, omegawiki_defined_meaning, hds_id, gs1_country_code, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, italian_vikidia_id, larousse_id, worldcat_identities_id, eurovoc_id, part_of, open_data_portal, kbpedia_id, inception, rkd_thesaurus_id, pm20_geo_code, interlingual_index_id, jewish_encyclopedia_id_russian, economy_of_topic, uk_parliament_thesaurus_id, edition_humboldt_digital_id, tasteatlas_id, sapa_id, bhcl_uuid, github_topic, namuwiki_id, wordnet_31_synset_id, demographics_of_topic, ysa_id, yle_topic_id, bbc_news_topic_id, joconde_location_id, topics_main_template, armeniapedia_id, zhihu_topic_id, idaigazetteer_id, den_store_danske_id, krugosvet_article, schoenberg_database_of_manuscripts_place_id, colon_classification, national_library_of_israel_j9u_id, democracy_index, online_pwn_encyclopedia_id, postimees_topic_id, head_of_state, der_spiegel_topic_id, google_arts_culture_entity_id, museum_digital_place_id, wikisimpsons_id, urban_electric_transit_country_id, m49_code, short_name, demonym, s\u00fcddeutsche_zeitung_topic_id, country, official_website, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, central_bank, gini_coefficient, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, dewey_decimal_classification, giant_bomb_id, number_of_out_of_school_children, the_top_tens_id, grove_art_online_id, the_world_factbook_country_id) VALUES ('Poland', 'country in Central Europe', '3177543.0', '49.00263222', 'destination/poland', '4046496-9', 'Category:People of Poland', '112', 'Europlug', 'PL', 'Poland', '00063279n', 'Prime Minister of Poland', 'Regional/Europe/Poland/', 'Rzeczpospolita Polska', 'dd7f80c8-f017-3d01-8608-2a8c9c32b954', 'National Independence Day', '99122.0', NULL, 'Canada', 'Flag of Poland.svg', 'Polska', '141810140', 'history of Poland', 'Western Bug', 'Warsaw', 'poland', '49715', '260', '261.0', 'ge130478', '294932275.0', 18.0, 'Category:Burials in Poland', 'Move your imagination', 'Data:Poland.map', '50.86940732', 'pays/pologne', 'nan', 'European Union', 9.0, 'Central European Time', 'Category:Deaths in Poland', '105244', 'President of the Republic of Poland', 'Poland', 'Russia', '10045341.0', 'nan', 'polonia', '616', '52.84135034', '48', '16826-5', 'upl', 'flag of Poland', 'PL', '0000 0004 0471 0018', 'polen', 'WikiProject Poland', 38382576.0, '7006366', 'Portal:Poland', 'outline of Poland', '569130', 'zloty', '798544', '\ud83c\uddf5\ud83c\uddf1', 'concept918', 'geography of Poland', 'POL', 'Rzeczpospolita Polska', 'Poland', 'D011044', 'parliamentary system', 'Herb Polski.svg', '2.16.616', 'Parliament of Poland', 'PL', '/m/05qhw', 'Polish', 'Congress Poland', 'Europe', 'coat of arms of Poland', 18.0, 'Wikipedia:List of articles all languages should have', 'PL', '54.83', 'free country', 'PL', 1.290000000000000035, 312683.0, 'Polen', 6.0, 'Second Polish Republic', 'Category:Poland', '11880842g', 'EU-Poland.svg', 'c0deef5a-45d4-459d-80f0-6f1d5c23a28d', 'Mateusz Morawiecki', 'POL', '1206891.0', '226', '3031', 'place/Poland', 'Kietlice banner.jpg', 'Category:Films shot in Poland', 230.0, 'Council of Ministers', 'Poland Is Not Yet Lost', 'Supreme Court', 77.45121999999999218, '.pl', 'sovereign state', 'Rysy', 'Category:Births in Poland', 'right', '\u017bu\u0142awy', 'poland', 'Lb-Polen.ogg', '02658994X', 'Lower Silesian Voivodeship', 'POL', 'n79131071', '52.0', 'Jewish Encyclopedia of Brockhaus and Efron', 'polen-20', '1381', 'Polen', 'countries/pl', 'Polish', 'polen', 'poland', '51836', '85633723', '7800', '8084', '3367', '590', 'culture of Poland', 'Elq5jF', '9468.0', 'Category:Maps of Poland', 'polonia', 'Pologne', 'Poland', 'Polonia', 'Polonia', 'nan', 'viaf-141810140', '2543', 'Central Europe', 'Poland''s Open Data Portal', 'Poland', '+1918-11-11T00:00:00Z', '1915.0', 'A12', 'i83894', '13274.0', 'economy of Poland', '12174', 'H0008341', 'poland', 'p/9e29aeb5-97cf-47e8-b956-0c36ad4b3abb', '68dde1e7-9506-416f-80ab-0b0b4a98c47d', 'poland', '\ud3f4\ub780\ub4dc', '09004957-n', 'demographics of Poland', 'Y105244', '18-198486', 'cywd23g0q1mt', 'T84-3496', 'Template:Voivodeships of Poland', '3950.0', '19625001.0', '2054097.0', 'Polen', 'strany_mira/POLSHA.html', '295.0', 'SG--595', '9.870075550897052e+17', 6.849999999999999645, '4169123.0', '410.0', 'Andrzej Duda', 'polen', 'nan', '908.0', '48371', '12.0', '616.0', '\ud83c\uddf5\ud83c\uddf1', 'Pole', 'Polen', 'Poland', 'nan', 'poland', 0.8759999999999998899, 'geo/1BCD852B-A867-4605-87D5-ED532F5CF71F', 'Q13', 'Narodowy Bank Polski', 30.19999999999999929, '2939.0', 'node/432425060', 45.0, '2--438', '3035-1722', 228797.0, '110.0', 'T068337', 'poland');\nDatabase State:\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, coordinates_of_southernmost_point, new_york_times_topic_id, gnd_id, category_of_associated_people, emergency_phone_number, electrical_plug_type, licence_plate_code, hashtag, babelnet_id, office_held_by_head_of_government, curlie_id, native_label, musicbrainz_area_id, public_holiday, insee_countries_and_foreign_territories_code, vat_rate, diplomatic_relation, flag_image, commons_gallery, viaf_id, history_of_topic, located_in_or_next_to_body_of_water, capital, subreddit, openstreetmap_relation_id, mobile_country_code, maritime_identification_digits, nkcr_aut_id, asc_leiden_thesaurus_id, marriageable_age, category_of_people_buried_here, motto_text, geoshape, coordinates_of_easternmost_point, le_monde_diplomatique_subject_id, marine_regions_geographic_id, member_of, unemployment_rate, located_in_time_zone, category_for_people_who_died_here, yso_id, office_held_by_head_of_state, commons_category, shares_border_with, us_national_archives_identifier, nalt_id, treccani_id, iso_3166_1_numeric_code, coordinates_of_westernmost_point, country_calling_code, stw_thesaurus_for_economics_id, statoids_id, flag, fips_10_4_countries_and_regions, isni, nese_id, maintained_by_wikiproject, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, wikimedia_outline, ndl_authority_id, currency, geonames_id, unicode_character, unesco_thesaurus_id, geography_of_topic, iso_3166_1_alpha_3_code, official_name, quora_topic_id, mesh_descriptor_id, basic_form_of_government, coat_of_arms_image, ituisoiec_object_identifier, legislative_body, nuts_code, freebase_id, official_language, replaces, continent, coat_of_arms, age_of_majority, on_focus_list_of_wikimedia_project, wipo_st3, coordinates_of_northernmost_point, has_quality, iso_3166_1_alpha_2_code, total_fertility_rate, area, store_norske_leksikon_id, compulsory_education_minimum_age, different_from, topics_main_category, biblioth\u00e8que_nationale_de_france_id, locator_map_image, bbc_things_id, head_of_government, ioc_country_code, fast_id, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, anthem, highest_judicial_authority, life_expectancy, top_level_internet_domain, instance_of, highest_point, category_for_people_born_here, driving_side, lowest_point, civicus_monitor_country_entry, pronunciation_audio, idref_id, contains_the_administrative_territorial_entity, itu_letter_code, library_of_congress_authority_id, coordinate_location, described_by_source, brockhaus_enzyklop\u00e4die_online_id, iab_code, klexikon_article_id, loc_and_marc_vocabularies_id, language_used, dr_topic_id, world_encyclopedia_of_puppetry_arts_id, gran_enciclop\u00e8dia_catalana_id, whos_on_first_id, inaturalist_place_id, omegawiki_defined_meaning, hds_id, gs1_country_code, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, italian_vikidia_id, larousse_id, worldcat_identities_id, eurovoc_id, part_of, open_data_portal, kbpedia_id, inception, rkd_thesaurus_id, pm20_geo_code, interlingual_index_id, jewish_encyclopedia_id_russian, economy_of_topic, uk_parliament_thesaurus_id, edition_humboldt_digital_id, tasteatlas_id, sapa_id, bhcl_uuid, github_topic, namuwiki_id, wordnet_31_synset_id, demographics_of_topic, ysa_id, yle_topic_id, bbc_news_topic_id, joconde_location_id, topics_main_template, armeniapedia_id, zhihu_topic_id, idaigazetteer_id, den_store_danske_id, krugosvet_article, schoenberg_database_of_manuscripts_place_id, colon_classification, national_library_of_israel_j9u_id, democracy_index, online_pwn_encyclopedia_id, postimees_topic_id, head_of_state, der_spiegel_topic_id, google_arts_culture_entity_id, museum_digital_place_id, wikisimpsons_id, urban_electric_transit_country_id, m49_code, short_name, demonym, s\u00fcddeutsche_zeitung_topic_id, country, official_website, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, central_bank, gini_coefficient, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, dewey_decimal_classification, giant_bomb_id, number_of_out_of_school_children, the_top_tens_id, grove_art_online_id, the_world_factbook_country_id]\n- Table: badminton_club, Columns: [label, description, instance_of, sport, country]\n- Table: political_border, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, country, coordinate_location, topics_main_category, instance_of, freebase_id, geonames_id, shares_border_with, official_website, locator_map_image, openstreetmap_relation_id, area, archinform_location_id, image, inaturalist_place_id, whos_on_first_id, population, musicbrainz_area_id]\n- Table: place_of_birth, Columns: [label, description, country, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, freebase_id, instance_of, geonames_id, official_website, image, viaf_id]\n- Table: capital_city, Columns: [label, description, country, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, freebase_id, instance_of, geonames_id, official_website, image, capital_of, viaf_id, postal_code, population, area, library_of_congress_authority_id, whos_on_first_id, worldcat_identities_id, different_from, national_library_of_israel_j9u_id]\n- Table: head_of_state, Columns: [label, description, commons_category, viaf_id, isni, library_of_congress_authority_id, gnd_id, country_of_citizenship, image, place_of_birth, date_of_birth, occupation, position_held, educated_at, instance_of, freebase_id, munzinger_person_id, languages_spoken_written_or_signed, given_name, native_language, award_received, signature, family_name, name_in_native_language, sex_or_gender, worldcat_identities_id, opensanctions_id]\n- Table: part, Columns: [label, description, commons_category, topics_main_category, freebase_id, gnd_id, viaf_id, instance_of, quora_topic_id, has_parts, coordinate_location, locator_map_image]\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, instance_of, freebase_id, geonames_id, shares_border_with, official_website, capital, locator_map_image, head_of_government, archinform_location_id, inaturalist_place_id, whos_on_first_id, area, population]",
        "Response": "Table: country"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO publisher (label, description, official_website, country, instance_of, isni, ringgold_id, headquarters_location, inception, microsoft_academic_id, library_of_congress_authority_id, romeo_publisher_id, viaf_id, worldcat_identities_id, freebase_id, publons_publisher_id) VALUES ('American Society for Clinical Investigation', 'nonprofit medical honor society composed of more than 3,000 physician-scientists from all medical specialties', 'https://www.the-asci.org/', 'United States of America', 'medical society', '0000 0001 0942 8722', '158350.0', 'nan', '+1908-01-01T00:00:00Z', '2804838664.0', 'no2005076207', '15.0', '136635363', 'lccn-n85046352', '/m/0560t7z', '48.0');\nDatabase State:\n- Table: Publishers, Columns: [label, description, official_website, country, instance_of, isni, ringgold_id, headquarters_location, inception, microsoft_academic_id, library_of_congress_authority_id, romeo_publisher_id, viaf_id, worldcat_identities_id, freebase_id, publons_publisher_id]\n- Table: citation, Columns: [label, description, pubmed_id, instance_of, published_in, volume, issue, pages, author_name_string, cites_work, doi, publication_date, title]\n- Table: stimuli_sensing_channels, Columns: [label, description, found_in_taxon, reactome_id, instance_of, cites_work, part_of, has_parts, exact_match]\n- Table: headquarters, Columns: [label, description, image, located_in_time_zone, viaf_id, country, located_in_the_administrative_territorial_entity, commons_category, coordinate_location, instance_of, topics_main_category, curlie_id, freebase_id, gnd_id, population, geonames_id, category_for_people_born_here, musicbrainz_area_id, encyclop\u00e6dia_britannica_online_id, locator_map_image, quora_topic_id, category_of_associated_people, area, archinform_location_id, shares_border_with, official_name, native_label, whos_on_first_id, category_for_maps, nkcr_aut_id, national_library_of_israel_j9u_id, official_website]\n- Table: topic, Columns: [label, description, instance_of, commons_category, bncf_thesaurus_id, topics_main_category, freebase_id, library_of_congress_authority_id, mesh_descriptor_id, biblioth\u00e8que_nationale_de_france_id, quora_topic_id, jstor_topic_id, encyclop\u00e6dia_britannica_online_id, subclass_of, omegawiki_defined_meaning, microsoft_academic_id, yso_id, mesh_tree_code, national_library_of_israel_j9u_id, openalex_id, nkcr_aut_id]",
        "Response": "Table: Publishers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO country (Country_ID, Name, Population, Area, Languages) VALUES (2, 'Finland', 5261008, 338145, 'Finnish Swedish');\nDatabase State:\n- Table: roller_coaster, Columns: [Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status]\n- Table: Countries, Columns: [Country_ID, Name, Population, Area, Languages]",
        "Response": "Table: Countries"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, molecular_function, biological_process, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('50S ribosomal protein L11 HMPREF0351_12392', 'microbial protein found in Enterococcus faecium DO', '50S ribosomal protein L11 HMPREF0351_12392', 'I3U4S8', 'RNA binding', 'protein biosynthesis', 'ribosome', 'Ribosomal protein L11, conserved site', 'Enterococcus faecium DO', 'YP_006376998', 'protein', 'Ribosomal protein L11/L12, N-terminal domain superfamily', 'protein');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: ribosomal_protein_l11_conserved_site_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, encoded_by, ensembl_protein_id, biological_process, cell_component, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of) VALUES ('Lysyl oxidase-like 2a', 'Protein found in Danio rerio', 'F1QQC3', 'loxl2a', 'ENSDARP00000064612', 'nan', 'nan', 'nan', 'SRCR-like domain', 'Danio rerio', 'NP_001092714', 'protein', 'Lysyl oxidase');\nDatabase State:\n- Table: chromosome, Columns: [label, description, refseq_genome_id, found_in_taxon, instance_of]\n- Table: encodes, Columns: [label, description, uniprot_protein_id, encoded_by, ensembl_protein_id, biological_process, cell_component, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: expressed_in, Columns: [label, description, subclass_of, instance_of, freebase_id, microsoft_academic_id, uberon_id]",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO catalogus_professorum (label, description, instance_of, official_website, wikidata_property) VALUES ('Catalogus Professorum Academiae Groninganae', 'biographical database of university teachers at Groningen University', 'catalogus professorum', 'https://hoogleraren.ub.rug.nl/', 'Gare de Lyon-Saint-Paul');\nDatabase State:\n- Table: Professors, Columns: [label, description, instance_of, official_website, wikidata_property]",
        "Response": "Table: Professors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID) VALUES ('tw-705068560805027840', 'Wednesday', 9, 2, 'en', 'FALSE', 41247, 0, 0, 65, 1.0, '@jacobbednarz Can you share your Amazon Linux concerns with me (jbarr@amazon.com) ?', 3848, 'tw-48443');\nDatabase State:\n- Table: location, Columns: [LocationID, Country, State, StateCode, City]\n- Table: twitter, Columns: [TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID]",
        "Response": "Table: twitter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO building (building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors) VALUES ('3', 'Franklin Exchange Building', '655 North Franklin Street', '1966\u20131972', 280, 22);\nDatabase State:\n- Table: Institution, Columns: [Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id]",
        "Response": "Table: building"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, gnd_id, freebase_id, idref_id, instance_of, locator_map_image, inception, topics_main_category, office_held_by_head_of_government, babelnet_id, store_norske_leksikon_id, isni, biblioth\u00e8que_nationale_de_france_id, viaf_id, worldcat_identities_id, quora_topic_id, continent, diplomatic_relation, demonym, flag_image, short_name, category_for_maps, nese_id, brockhaus_enzyklop\u00e4die_online_id, country, museum_digital_place_id, office_held_by_head_of_state, head_of_state, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, new_york_times_topic_id, geonames_id, unicode_character, category_of_associated_people, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, coordinates_of_westernmost_point, geography_of_topic, iso_3166_1_alpha_3_code, official_name, curlie_id, mesh_descriptor_id, basic_form_of_government, musicbrainz_area_id, has_quality, coat_of_arms_image, uic_alphabetical_country_code, number_of_out_of_school_children, insee_countries_and_foreign_territories_code, commons_gallery, legislative_body, civicus_monitor_country_entry, history_of_topic, stw_thesaurus_for_economics_id, official_language, subreddit, capital, coat_of_arms, geoshape, national_library_of_israel_id_old, openstreetmap_relation_id, wipo_st3, coordinates_of_northernmost_point, coordinates_of_easternmost_point, nkcr_aut_id, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, asc_leiden_thesaurus_id, marriageable_age, le_monde_diplomatique_subject_id, category_of_people_buried_here, bbc_things_id, age_of_majority, dewey_decimal_classification, on_focus_list_of_wikimedia_project, ituisoiec_object_identifier, head_of_government, ioc_country_code, member_of, fast_id, unemployment_rate, railway_traffic_side, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, category_for_people_who_died_here, yso_id, anthem, life_expectancy, gran_enciclop\u00e8dia_catalana_id, part_of, top_level_internet_domain, area, shares_border_with, highest_point, driving_side, uic_numerical_country_code, lowest_point, iso_3166_1_numeric_code, located_in_time_zone, giant_bomb_id, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, statoids_id, library_of_congress_authority_id, iso_3166_1_alpha_2_code, motto_text, flag, coordinate_location, fips_10_4_countries_and_regions, dagens_nyheter_topic_id, described_by_source, maintained_by_wikiproject, klexikon_article_id, iab_code, loc_and_marc_vocabularies_id, central_bank, language_used, comic_vine_id, treccanis_dizionario_di_storia_id, native_label, whos_on_first_id, dr_topic_id, inaturalist_place_id, omegawiki_defined_meaning, hds_id, gs1_country_code, culture, geonlp_id, analysis_policy_observatory_term_id, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, pronunciation_audio, eurovoc_id, open_data_portal, kbpedia_id, krugosvet_article, grove_art_online_id, replaces, rkd_thesaurus_id, interlingual_index_id, jewish_encyclopedia_id_russian, bbc_news_topic_id, economy_of_topic, the_top_tens_id, yle_topic_id, uk_parliament_thesaurus_id, tasteatlas_id, sapa_id, github_topic, wordnet_31_synset_id, demographics_of_topic, ysa_id, joconde_location_id, zhihu_topic_id, schoenberg_database_of_manuscripts_place_id, the_world_factbook_country_id, national_library_of_israel_j9u_id, colon_classification, democracy_index, namuwiki_id, der_spiegel_topic_id, wikisimpsons_id, den_store_danske_id, urban_electric_transit_country_id, postimees_topic_id, online_pwn_encyclopedia_id, m49_code, pm20_geo_code, s\u00fcddeutsche_zeitung_topic_id, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, vat_rate, hashtag, located_in_or_next_to_body_of_water, gini_coefficient, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, gynopedia_id) VALUES ('Japan', 'island country in East Asia', 'Japan', '4028495-5', '/m/03_3d', '02648918X', 'sovereign state', 'Japan on the globe (de-facto) (Japan centered).svg', '+1947-05-03T00:00:00Z', 'Category:Japan', 'Prime Minister of Japan', '00047985n', 'Japan', '0000 0001 2364 9740', '152384465', '159367111', 'lccn-n78089021', 'Japan', 'Asia', 'Germany', 'Japanese', 'Flag of Japan.svg', 'Japan', 'Category:Maps of Japan', 'japan', 'japan', 'Japan', '276.0', 'Emperor of Japan', 'Naruhito', '4919294.0', 125440000.0, '1000120.0', 'Portal:Japan', '20.425277777778', 'outline of Japan', '568158.0', 'Japanese yen', 'destination/japan', '1861060.0', '\ud83c\uddef\ud83c\uddf5', 'Category:People:Japan (people who live or lived in Japan)', '119.0', 'concept835', 'NEMA 1-15', 'J', '24.45138888888889', 'geography of Japan', 'JPN', '\u65e5\u672c\u56fd', 'Regional/Asia/Japan/', 'D007564', 'constitutional monarchy', '2db42837-c832-3c27-b4a3-08198f75693c', 'free country', 'Kamon of the Imperial House of Japan.svg', 'J', 153722.0, '99217.0', '\u65e5\u672c', 'National Diet', 'japan', 'history of Japan', '17568-3', 'Japanese', 'japan', 'Tokyo', 'Imperial Seal of Japan', 'Data:Japan.map', '973886.0', '382313.0', 'JP', '45.523027777778', '24.283055555556', 'ge129425', '440.0', 1.379999999999999894, '431.0', '10035705.0', '294918280.0', 18.0, 'pays/japon', 'Category:Burials at Japan', '3f53c272-5b8f-4a4f-99de-a857d6726c5b', 18.0, '2--52', 'Wikipedia:List of articles all languages should have', '2.16.392', 'Fumio Kishida', 'JPN', 'Organization for Economic Cooperation and Development', '1204082.0', 4.0, 'left', '142.0', '2998.0', 'place/Japan', 'Japanese lanterns banner.jpg', 'Category:Films shot in Japan', 100.0, 'Government of Japan', 'Category:Deaths in Japan', '105023.0', 'Kimigayo', 83.98488000000000397, '34339.0', 'East Asia', '.jp', 377972.280000000028, 'Russia', 'Mount Fuji', 'left', '42.0', 'Hachir\u014dgata', '392.0', 'Japan Standard Time', '3035-37', 'Aichi Prefecture', 'J', '81.0', 'ujp', 'n78089021', 'JP', 'Endless discovery', 'flag of Japan', '35.0', 'JA', 'japan', 'Small Brockhaus and Efron Encyclopedic Dictionary', 'WikiProject Japan', 'Japan', '1328.0', 'countries/ja', 'Bank of Japan', 'Japanese', '4020-55746', 'giappone', '\u65e5\u672c', '85632429.0', 'japan', '6737.0', '6916.0', '3412.0', '450-459', 'culture of Japan', 'zSJCjv', '2991.0', 'Japon', 'Japan', 'Jap\u00f3n', 'Jer-Japon.ogg', '1524.0', 'data.go.jp', 'Japan', 'strany_mira/YAPONIYA.html', 'T043440', 'Empire of Japan', '12538.0', 'i83607', '15234.0', 'cjnwl8q4g7nt', 'economy of Japan', '44.0', '18-173138', '11083.0', 'japan', 'p/c67f440f-aed0-4941-91cf-570bd42ccf0a', 'japan', '08941623-n', 'demographics of Japan', 'Y105023', 'T84-591', '19550917.0', '971.0', 'japan', '9.870075502402052e+17', 'SG--42', 8.150000000000000355, '\uc77c\ubcf8', 'japan', '16243.0', 'Japan', '9.0', '2474.0', '4169061.0', '392.0', 'B111', 'Japan', 'japan', 0.925000000000000044, 'geo/02D8D923-5285-4A8C-8142-18194F6630A6', 'Q396', 10.0, 'Japan', 'Sea of Japan', 32.89999999999999858, '2747.0', 'node/424313451', 47.10000000000000142, 'Japan');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, category_of_associated_people, musicbrainz_area_id, viaf_id, capital, openstreetmap_relation_id, located_in_time_zone, commons_category, shares_border_with, population, geonames_id, coat_of_arms_image, freebase_id, area, topics_main_category, locator_map_image, instance_of, category_for_people_born_here, coordinate_location, inaturalist_place_id, image, country, located_in_the_administrative_territorial_entity]\n- Table: head_of_state, Columns: [label, description, sex_or_gender, spouse, child, position_held, commons_category, library_of_congress_authority_id, viaf_id, isni, gnd_id, place_of_birth, country_of_citizenship, date_of_birth, instance_of, image, award_received, freebase_id, signature, religion_or_worldview, occupation, given_name, topics_main_category, name_in_native_language, languages_spoken_written_or_signed, fast_id, worldcat_identities_id, hrvatska_enciklopedija_id, store_norske_leksikon_id, den_store_danske_id, educated_at, munzinger_person_id, treccani_id, family_name, opensanctions_id]\n- Table: country, Columns: [label, description, commons_category, gnd_id, freebase_id, idref_id, instance_of, locator_map_image, inception, topics_main_category, office_held_by_head_of_government, babelnet_id, store_norske_leksikon_id, isni, biblioth\u00e8que_nationale_de_france_id, viaf_id, worldcat_identities_id, quora_topic_id, continent, diplomatic_relation, demonym, flag_image, short_name, category_for_maps, nese_id, brockhaus_enzyklop\u00e4die_online_id, country, museum_digital_place_id, office_held_by_head_of_state, head_of_state, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, new_york_times_topic_id, geonames_id, unicode_character, category_of_associated_people, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, coordinates_of_westernmost_point, geography_of_topic, iso_3166_1_alpha_3_code, official_name, curlie_id, mesh_descriptor_id, basic_form_of_government, musicbrainz_area_id, has_quality, coat_of_arms_image, uic_alphabetical_country_code, number_of_out_of_school_children, insee_countries_and_foreign_territories_code, commons_gallery, legislative_body, civicus_monitor_country_entry, history_of_topic, stw_thesaurus_for_economics_id, official_language, subreddit, capital, coat_of_arms, geoshape, national_library_of_israel_id_old, openstreetmap_relation_id, wipo_st3, coordinates_of_northernmost_point, coordinates_of_easternmost_point, nkcr_aut_id, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, asc_leiden_thesaurus_id, marriageable_age, le_monde_diplomatique_subject_id, category_of_people_buried_here, bbc_things_id, age_of_majority, dewey_decimal_classification, on_focus_list_of_wikimedia_project, ituisoiec_object_identifier, head_of_government, ioc_country_code, member_of, fast_id, unemployment_rate, railway_traffic_side, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, category_for_people_who_died_here, yso_id, anthem, life_expectancy, gran_enciclop\u00e8dia_catalana_id, part_of, top_level_internet_domain, area, shares_border_with, highest_point, driving_side, uic_numerical_country_code, lowest_point, iso_3166_1_numeric_code, located_in_time_zone, giant_bomb_id, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, statoids_id, library_of_congress_authority_id, iso_3166_1_alpha_2_code, motto_text, flag, coordinate_location, fips_10_4_countries_and_regions, dagens_nyheter_topic_id, described_by_source, maintained_by_wikiproject, klexikon_article_id, iab_code, loc_and_marc_vocabularies_id, central_bank, language_used, comic_vine_id, treccanis_dizionario_di_storia_id, native_label, whos_on_first_id, dr_topic_id, inaturalist_place_id, omegawiki_defined_meaning, hds_id, gs1_country_code, culture, geonlp_id, analysis_policy_observatory_term_id, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, pronunciation_audio, eurovoc_id, open_data_portal, kbpedia_id, krugosvet_article, grove_art_online_id, replaces, rkd_thesaurus_id, interlingual_index_id, jewish_encyclopedia_id_russian, bbc_news_topic_id, economy_of_topic, the_top_tens_id, yle_topic_id, uk_parliament_thesaurus_id, tasteatlas_id, sapa_id, github_topic, wordnet_31_synset_id, demographics_of_topic, ysa_id, joconde_location_id, zhihu_topic_id, schoenberg_database_of_manuscripts_place_id, the_world_factbook_country_id, national_library_of_israel_j9u_id, colon_classification, democracy_index, namuwiki_id, der_spiegel_topic_id, wikisimpsons_id, den_store_danske_id, urban_electric_transit_country_id, postimees_topic_id, online_pwn_encyclopedia_id, m49_code, pm20_geo_code, s\u00fcddeutsche_zeitung_topic_id, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, vat_rate, hashtag, located_in_or_next_to_body_of_water, gini_coefficient, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, gynopedia_id]",
        "Response": "Table: country"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, game_publisher_id, platform_id, release_year) VALUES (4101, 4558, 15, 2007);\nDatabase State:\n- Table: game, Columns: [id, genre_id, game_name]\n- Table: game_platform, Columns: [id, game_publisher_id, platform_id, release_year]\n- Table: platform, Columns: [id, platform_name]\n- Table: region_sales, Columns: [region_id, game_platform_id, num_sales]\n- Table: region, Columns: [id, region_name]\n- Table: publisher, Columns: [id, publisher_name]\n- Table: genre, Columns: [id, genre_name]\n- Table: game_publisher, Columns: [id, game_id, publisher_id]",
        "Response": "Table: game_platform"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO manufacturer (Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops) VALUES (2, 1990.0, 'IKEA', 21, 19);\nDatabase State:\n- Table: furniture, Columns: [Furniture_ID, Name, Num_of_Component, Market_Rate]\n- Table: furniture_manufacte, Columns: [Manufacturer_ID, Furniture_ID, Price_in_Dollar]",
        "Response": "Table: manufacturer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Rating (rID) VALUES (207, 107, 5, '2011-01-20');\nDatabase State:\n- Table: Movie, Columns: [mID]\n- Table: Reviewer, Columns: [rID]",
        "Response": "Table: Rating"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO followed_by (label, description, applies_to_jurisdiction, part_of, country, follows, instance_of, austlii_id, followed_by) VALUES ('Section 76 of the Constitution of Australia', 'section of The Commonwealth of Australia Constitution Act 1900', 'Australia', 'Constitution of Australia', 'Australia', 'Section 75 of the Constitution of Australia', 'law', 'au/legis/cth/consol_act/coaca430/s76', 'Section 77 of the Constitution of Australia');\nDatabase State:\n- Table: follows, Columns: [label, description, applies_to_jurisdiction, part_of, country, followed_by, instance_of, austlii_id, follows]\n- Table: constitution_of_australia, Columns: [label, description, country, instance_of, part_of, applies_to_jurisdiction, follows, followed_by, austlii_id]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details) VALUES (6, 12, 3, 'Refund', '2018-03-22 21:58:37', 1903.410000000000081, NULL, NULL);\nDatabase State:\n- Table: Product_Categories, Columns: [production_type_code, product_type_description, vat_rating]\n- Table: Order_Items, Columns: [order_item_id, order_id, product_id, product_quantity, other_order_item_details]\n- Table: Products, Columns: [product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size]\n- Table: Accounts, Columns: [account_id, customer_id, date_account_opened, account_name, other_account_details]\n- Table: Invoices, Columns: [invoice_number, order_id, invoice_date]\n- Table: Customers, Columns: [customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city, state_county_province, country]",
        "Response": "Table: Financial_Transactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (endowment_id, School_id, donator_name, amount) VALUES (8, 5, 'Duarte', 8.52999999999999936);\nDatabase State:\n- Table: endowment, Columns: [endowment_id, School_id, donator_name, amount]",
        "Response": "Table: endowment"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO member (Member_ID, Member_Name, Party_ID, In_office) VALUES (4, 'Hon John Anderson', '1', '1989\u20132007');\nDatabase State:\n- Table: region, Columns: [Region_ID, Region_name, Date, Label, Format, Catalogue]\n- Table: party_events, Columns: [Event_ID, Event_Name, Party_ID, Member_in_charge_ID]\n- Table: Members, Columns: [Member_ID, Member_Name, Party_ID, In_office]",
        "Response": "Table: Members"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1006, 'Schultz', 'Andy', 18, 'M', 600, 1148, 'BAL');\nDatabase State:\n- Table: Member_of_club, Columns: [StuID, ClubID, Position]\n- Table: Student_Data, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Student_Data"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY) VALUES ('2018/8/14', 19393, 'N8541W', 2264, 14107, 1410702, 30466, 'PHX', 11292, 1129202, 30325, 'DEN', 700, 658, -2, 0, 933, -7, 0, 0, NULL, 100, 95, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (index, id, tag) VALUES (66529, 33350, 'pop');\nDatabase State:\n- Table: MusicTracks, Columns: [index, id, tag]\n- Table: torrents, Columns: [groupName, totalSnatched, artist, groupYear, releaseType, groupId, id]",
        "Response": "Table: MusicTracks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Actor_ID, Name, Musical_ID, Character, Duration, age) VALUES (9, 'Stefan Dennis', 6, 'Paul Robinson', '1985\u20131992, 1993, 2004\u2014', 17);\nDatabase State:\n- Table: musical, Columns: [Musical_ID, Name, Year, Award, Category, Nominee, Result]",
        "Response": "Table: actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (case_number, race, gender, last_name, first_name, full_name) VALUES ('286923W', 'L', 'M', 'Eduardo Oliveros', NULL, 'Eduardo Oliveros');\nDatabase State:\n- Table: PoliceOfficers, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: incidents, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]",
        "Response": "Table: PoliceOfficers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Reservations (Code) VALUES (59225, 'AOB', '26-JUN-10', '30-JUN-10', 201.25, 'DURAN', 'BO', 1, 0);\nDatabase State:\n- Table: Rooms, Columns: [RoomId, roomName]\n- Table: Reservations, Columns: [Code]",
        "Response": "Table: Reservations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, brewery_id, abv, ibu, name, style, ounces) VALUES (1922, 269, 0.05199999999999999762, NULL, 'Southern Drawl Pale Lager', 'American Pale Lager', 12.0);\nDatabase State:\n- Table: beers, Columns: [id, brewery_id, abv, ibu, name, style, ounces]",
        "Response": "Table: beers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO events (Date_received, Product, Sub_product, Issue, Sub_issue, Consumer_complaint_narrative, Tags, Consumer_consent_provided?, Submitted_via, Date_sent_to_company, Company_response_to_consumer, Timely_response?, Consumer_disputed?, Complaint_ID, Client_ID) VALUES ('2016-08-06', 'Bank account or service', 'Other bank product/service', 'Account opening, closing, or management', NULL, NULL, NULL, 'Consent not provided', 'Web', '2016-08-06', 'Closed with explanation', 'Yes', 'Yes', 'CR2049735', 'C00000011');\nDatabase State:\n- Table: district, Columns: [district_id, city, state_abbrev, division]\n- Table: reviews, Columns: [Date, Stars, Reviews, Product, district_id]\n- Table: Complaint_History, Columns: [Date_received, Product, Sub_product, Issue, Sub_issue, Consumer_complaint_narrative, Tags, Consumer_consent_provided?, Submitted_via, Date_sent_to_company, Company_response_to_consumer, Timely_response?, Consumer_disputed?, Complaint_ID, Client_ID]\n- Table: client, Columns: [client_id, sex, day, month, year, age, social, first, middle, last, phone, email, address_1, address_2, city, state, zipcode, district_id]\n- Table: state, Columns: [StateCode, State, Region]",
        "Response": "Table: Complaint_History"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (index, id, tag) VALUES (91282, 45352, 'electronic');\nDatabase State:\n- Table: MusicTags, Columns: [index, id, tag]\n- Table: torrents, Columns: [groupName, totalSnatched, artist, groupYear, releaseType, groupId, id]",
        "Response": "Table: MusicTags"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (RootBeerID, BrandID, ContainerType, LocationID, PurchaseDate) VALUES (100340, 10002, 'Bottle', 2, '2015-10-08');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: rootbeer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO orderdetails (orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber) VALUES (10420, 'S18_4409', 66, 73.62000000000000454, 6);\nDatabase State:\n- Table: customers, Columns: [customerNumber, customerName, contactLastName, contactFirstName, phone, addressLine1, addressLine2, city, state, postalCode, country, salesRepEmployeeNumber, creditLimit]",
        "Response": "Table: orderdetails"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO certificate (eid, aid) VALUES (567354612, 4);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: certificate"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO alias (zip_code, alias) VALUES (4741, 'Estcourt Station');\nDatabase State:\n- Table: zip_data, Columns: [zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, 1st_quarter_payroll, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA]\n- Table: alias, Columns: [zip_code, alias]\n- Table: country, Columns: [zip_code, county, state]",
        "Response": "Table: alias"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Council_Tax (council_tax_id, cmi_cross_ref_id) VALUES (3, 104);\nDatabase State:\n- Table: Benefits_Overpayments, Columns: [council_tax_id, cmi_cross_ref_id]\n- Table: TaxReferences, Columns: [council_tax_id, cmi_cross_ref_id]",
        "Response": "Table: TaxReferences"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Timed_Locations_of_Things (thing_id, Date_and_Time, Location_Code) VALUES (85, '2017-11-26 00:13:44', '1537 Schmeler G');\nDatabase State:\n- Table: Customers, Columns: [customer_id, customer_details]\n- Table: Services, Columns: [service_id, organization_id, service_type_code, service_details]\n- Table: Organizations, Columns: [organization_id, parent_organization_id, organization_details]\n- Table: Timed_Status_of_Things, Columns: [thing_id, Date_and_Date, Status_of_Thing_Code]",
        "Response": "Table: Timed_Locations_of_Things"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3) VALUES (2557, 255, 63, 25, 4, 12, '1:41.355', '', 'NULL');\nDatabase State:\n- Table: races, Columns: [raceId, year, round, circuitId, name, date, time, url]\n- Table: results, Columns: [resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId]\n- Table: constructorResults, Columns: [constructorResultsId, raceId, constructorId, points, status]\n- Table: qualifying, Columns: [qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3]",
        "Response": "Table: qualifying"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, category_combines_topics, category_contains) VALUES ('Category:Films shot in South West England', 'Wikimedia category', 'Wikimedia category', 'filming location', 'film');\nDatabase State:\n- Table: source_of_information, Columns: [label, description, language_of_work_or_name, instance_of, publication_date, publisher, genre, image, country_of_origin]\n- Table: political_border, Columns: [label, description, instance_of, commons_category, country, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, page_banner, freebase_id, openstreetmap_relation_id, nuts_code, category_for_people_who_died_here, curlie_id, contains_the_administrative_territorial_entity, area, locator_map_image, geonames_id, category_of_people_buried_here, image, category_of_associated_people, shares_border_with, population, uk_parliament_thesaurus_id, eu_knowledge_graph_item_id]\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, commons_category, country, located_in_time_zone, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, page_banner, freebase_id, openstreetmap_relation_id, category_for_films_shot_at_this_location, nuts_code, category_for_people_who_died_here, official_website, curlie_id, contains_the_administrative_territorial_entity, locator_map_image, gss_code_2011, area, geonames_id, category_of_people_buried_here, image, category_of_associated_people, category_for_maps, shares_border_with, toid, population, uk_parliament_thesaurus_id, eu_knowledge_graph_item_id]\n- Table: category_for_films_shot_at_this_location, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: topic, Columns: [label, description, coordinate_location, topics_main_category, commons_category, instance_of, freebase_id, image, geonames_id, country, encyclop\u00e6dia_britannica_online_id, locator_map_image, store_norske_leksikon_id, population, described_by_source, shares_border_with, vision_of_britain_place_id, located_in_the_administrative_territorial_entity]\n- Table: place_of_death, Columns: [label, description, instance_of, category_combines_topics, category_contains]",
        "Response": "Table: category_for_films_shot_at_this_location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Person (name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname) VALUES ('Paul Wee', NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Character_Award, Columns: [award_id, character]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Credit, Columns: [episode_id, category, person, role, credited]",
        "Response": "Table: Person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO followed_by (label, description, instance_of, part_of, event_distance, competition_class, point_in_time, sport, follows, location, freebase_id, followed_by) VALUES ('rowing at the 2014 Asian Games \u2013 women''s coxless pair', 'rowing event', 'rowing event', 'rowing at the 2014 Asian Games', 2000.0, 'women''s coxless pair', '+2014-00-00T00:00:00Z', 'rowing', 'rowing at the 2010 Asian Games \u2013 women''s coxless pair', 'Tangeum Lake', '/m/011x4fpt', 'rowing at the 2018 Asian Games \u2013 women''s coxless pair');\nDatabase State:\n- Table: follows, Columns: [label, description, instance_of, part_of, event_distance, competition_class, point_in_time, sport, followed_by, location, freebase_id, follows]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details) VALUES (11, 'Other', '1981-08-23 05:40:38', '1997-11-07 20:22:05', 'murray hill', replace('2088 Bashirian Fork Suite 337\\nFaustinoport, MT 16771-9320','\\n',char(10)), 2, 6713620.900000000372, 13991131.43400000035, 170766.4720000000088, 'et', 'est', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Other_Property_Features, Columns: [property_id, feature_id, property_feature_description]\n- Table: Other_Available_Features, Columns: [feature_id, feature_type_code, feature_name, feature_description]\n- Table: Properties, Columns: [property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details]\n- Table: Ref_Property_Types, Columns: [property_type_code, property_type_description]\n- Table: Ref_Feature_Types, Columns: [feature_type_code, feature_type_name]",
        "Response": "Table: Properties"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (name, month) VALUES ('student751', 2);\nDatabase State:\n- Table: enlist, Columns: [name, organ]\n- Table: male, Columns: [name]\n- Table: disabled, Columns: [name]\n- Table: Student_Absences, Columns: [name, month]\n- Table: no_payment_due, Columns: [name, bool]",
        "Response": "Table: Student_Absences"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, coordinate_location, country, freebase_id, located_in_the_administrative_territorial_entity, locator_map_image, instance_of, commons_category, catalog_code, shares_border_with, gazetteer_for_scotland_place_id, described_by_source, genuki_id, population, factgrid_item_id) VALUES ('Orkney Islands', 'archipelago, county and council area in northern Scotland', '59.0', 'United Kingdom', '/m/05nwr', 'Scotland', 'Orkney Islands in Scotland.svg', 'archipelago', 'Orkney Islands', '54', 'nan', 'counties/countyfirst20', 'Armenian Soviet Encyclopedia', 'sct/OKI', 22270.0, 'Q217737');\nDatabase State:\n- Table: wikimedia_category, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: drifter, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, coordinate_location, significant_event, described_by_source, canmore_id, historic_county]\n- Table: administrative_centre, Columns: [label, description, commons_category, country, located_in_the_administrative_territorial_entity, iso_3166_2_code, coordinate_location, topics_main_category, instance_of, freebase_id, fips_10_4_countries_and_regions, musicbrainz_area_id, geonames_id, openstreetmap_relation_id, gss_code_2011, official_website, curlie_id, capital, toid, area, geoshape, population, viaf_id, encyclop\u00e6dia_britannica_online_id, whos_on_first_id, gazetteer_for_scotland_place_id, image, catalog_code, worldcat_identities_id, authority, hasc, vision_of_britain_place_id, carbon_footprint, inaturalist_place_id, uk_parliament_thesaurus_id, locator_map_image, library_of_congress_authority_id, national_library_of_israel_j9u_id]\n- Table: administrative_territorial_entity, Columns: [label, description, commons_category, country, located_in_the_administrative_territorial_entity, iso_3166_2_code, coordinate_location, topics_main_category, instance_of, freebase_id, fips_10_4_countries_and_regions, musicbrainz_area_id, geonames_id, openstreetmap_relation_id, gss_code_2011, official_website, curlie_id, capital, toid, area, category_of_associated_people, archinform_location_id, geoshape, population, viaf_id, encyclop\u00e6dia_britannica_online_id, whos_on_first_id, gazetteer_for_scotland_place_id, image, catalog_code, worldcat_identities_id, authority, hasc, vision_of_britain_place_id, carbon_footprint, inaturalist_place_id, uk_parliament_thesaurus_id, locator_map_image]\n- Table: governing_body, Columns: [label, description, instance_of, country, bbc_things_id, uk_parliament_thesaurus_id, whatdotheyknow_organisation_id, inception, official_website, gss_code_2011, twitter_username, viaf_id, social_media_followers]",
        "Response": "Table: historic_county"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO series_post (id, year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L) VALUES (473, 1996, 'CFR', 'L', 'ATL', 'NBA', 'DET', 'NBA', 3, 2);\nDatabase State:\n- Table: players_teams, Columns: [id, playerID, year, stint, tmID, lgID, GP, GS, minutes, points, oRebounds, dRebounds, rebounds, assists, steals, blocks, turnovers, PF, fgAttempted, fgMade, ftAttempted, ftMade, threeAttempted, threeMade, PostGP, PostGS, PostMinutes, PostPoints, PostoRebounds, PostdRebounds, PostRebounds, PostAssists, PostSteals, PostBlocks, PostTurnovers, PostPF, PostfgAttempted, PostfgMade, PostftAttempted, PostftMade, PostthreeAttempted, PostthreeMade, note]\n- Table: player_allstar, Columns: [playerID, last_name, first_name, season_id, conference, league_id, games_played, minutes, points, o_rebounds, d_rebounds, rebounds, assists, steals, blocks, turnovers, personal_fouls, fg_attempted, fg_made, ft_attempted, ft_made, three_attempted, three_made]\n- Table: awards_coaches, Columns: [id, year, coachID, award, lgID, note]\n- Table: series_post, Columns: [id, year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L]",
        "Response": "Table: series_post"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, coordinate_location, elevation_above_sea_level, image, located_in_the_administrative_territorial_entity, mountain_range, google_knowledge_graph_id, part_of) VALUES ('Vyhl\u00eddka', 'nan', 'mountain', 'Czech Republic', '50.743177777778', 678.2999999999999546, 'Vyhl\u00eddka (678 m) u Smr\u017eovky - vyhl\u00eddkov\u00e9 skalisko Finkenstein (1).jpg', 'Smr\u017eovka', 'Jizera Mountains', '/g/11c0t9jrql', 'Jizera Mountains');\nDatabase State:\n- Table: jizera_mountains, Columns: [label, description, instance_of, country, coordinate_location, elevation_above_sea_level, image, located_in_the_administrative_territorial_entity, mountain_range, google_knowledge_graph_id, part_of]\n- Table: political_border, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, lau, instance_of, freebase_id, coat_of_arms_image, flag_image, shares_border_with, population, topics_main_category, official_website, elevation_above_sea_level, postal_code, geonames_id, time_of_earliest_written_record, email_address, openstreetmap_relation_id, image, czech_registration_id, area, licence_plate_code, coordinate_location, nkcr_aut_id, historical_region, whos_on_first_id, geoshape, mapycz_id, isds_id, czech_municipality_id, number_of_houses, mean_age]\n- Table: administrative_territorial_entity, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, lau, instance_of, freebase_id, country, coat_of_arms_image, shares_border_with, population, image, geonames_id, coordinate_location, topics_main_category, postal_code, official_website, elevation_above_sea_level, time_of_earliest_written_record, email_address, nkcr_aut_id, openstreetmap_relation_id, area, licence_plate_code, czech_registration_id, historical_region, whos_on_first_id, geoshape, mapycz_id, isds_id, czech_municipality_id, number_of_houses, mean_age, flag_image]",
        "Response": "Table: jizera_mountains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Country, Organization, Type) VALUES ('THA', 'IBRD', 'member');\nDatabase State:\n- Table: population, Columns: [Country, Population_Growth, Infant_Mortality]\n- Table: encompasses, Columns: [Country, Continent, Percentage]\n- Table: city, Columns: [Name, Country, Province, Population, Longitude, Latitude]\n- Table: geo_desert, Columns: [Desert, Country, Province]\n- Table: lake, Columns: [Name, Area, Depth, Altitude, Type, River, Longitude, Latitude]\n- Table: Memberships, Columns: [Country, Organization, Type]\n- Table: geo_sea, Columns: [Sea, Country, Province]",
        "Response": "Table: Memberships"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Team_id, Name) VALUES (10, 'D.C. United');\nDatabase State:\n- Table: Teams, Columns: [Team_id, Name]",
        "Response": "Table: Teams"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('16S rRNA m(4)C1402 methyltransferase EAE_11220', 'microbial gene found in Klebsiella aerogenes KCTC 2190', '10792446.0', 'gene', '16S rRNA m(4)C1402 methyltransferase EAE_11220', 'Enterobacter aerogenes KCTC 2190', 'forward strand', '2403604', '2402663', 'gene', 'EAE_11220');\nDatabase State:\n- Table: Genes, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Code, Name, Headquarter, Founder, Revenue) VALUES (6, 'Winchester', 'Paris', 'Robert', 30.0);\nDatabase State:\n- Table: Manufacturers, Columns: [Code, Name, Headquarter, Founder, Revenue]",
        "Response": "Table: Manufacturers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO place_of_death (label, description, instance_of, category_combines_topics, category_contains, commons_category) VALUES ('Category:Deaths in Springfield, Illinois', 'Wikimedia category', 'Wikimedia category', 'place of death', 'human', 'Deaths in Springfield, Illinois');\nDatabase State:\n- Table: place_of_birth, Columns: [label, description, topics_main_category, instance_of, country, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, curlie_id, musicbrainz_area_id, gnd_id, viaf_id, library_of_congress_authority_id, freebase_id, locator_map_image, geonames_id, category_of_associated_people, capital_of, page_banner, elevation_above_sea_level, gnis_id, official_website, encyclop\u00e6dia_britannica_online_id, population, fips_55_3_locations_in_the_us, inception, local_dialing_code, quora_topic_id, area, us_national_archives_identifier, gran_enciclop\u00e8dia_catalana_id, archinform_location_id, whos_on_first_id, located_in_time_zone, worldcat_identities_id, factgrid_item_id, image, water_as_percent_of_area, national_library_of_israel_j9u_id, per_capita_income, number_of_households, postal_code]\n- Table: head_of_government, Columns: [label, description, member_of_political_party, educated_at, instance_of, date_of_birth, sex_or_gender, country_of_citizenship, given_name, occupation, position_held, place_of_birth, family_name]\n- Table: legislature_of_a_us_state, Columns: [label, description, instance_of, topics_main_category, viaf_id, freebase_id, has_parts, country, applies_to_jurisdiction, official_website, described_by_source, snac_ark_id, headquarters_location]\n- Table: headquarters, Columns: [label, description, commons_category, coordinate_location, country, located_in_the_administrative_territorial_entity, freebase_id, instance_of, image]\n- Table: place_of_death, Columns: [label, description, instance_of, category_combines_topics, category_contains, commons_category]\n- Table: political_border, Columns: [label, description, capital, country, shares_border_with, named_after, commons_category, locator_map_image, coordinate_location, located_in_the_administrative_territorial_entity, official_website, topics_main_category, curlie_id, musicbrainz_area_id, instance_of, freebase_id, gnis_id, library_of_congress_authority_id, viaf_id, inception, geonames_id, category_of_associated_people, area, openstreetmap_relation_id, population, us_national_archives_identifier, contains_the_administrative_territorial_entity, water_as_percent_of_area, getty_thesaurus_of_geographic_names_id, image, native_label, archinform_location_id, wolfram_language_entity_code, whos_on_first_id, category_for_maps, worldcat_identities_id, hasc, inaturalist_place_id, national_library_of_israel_j9u_id, per_capita_income, number_of_households]\n- Table: administrative_territorial_entity, Columns: [label, description, topics_main_category, instance_of, country, commons_category, located_in_the_administrative_territorial_entity, head_of_government, coordinate_location, curlie_id, musicbrainz_area_id, gnd_id, viaf_id, library_of_congress_authority_id, freebase_id, locator_map_image, geonames_id, category_for_people_who_died_here, category_of_associated_people, capital_of, page_banner, elevation_above_sea_level, gnis_id, official_website, facebook_places_id, encyclop\u00e6dia_britannica_online_id, population, fips_55_3_locations_in_the_us, inception, local_dialing_code, quora_topic_id, area, us_national_archives_identifier, gran_enciclop\u00e8dia_catalana_id, flag_image, archinform_location_id, whos_on_first_id, located_in_time_zone, worldcat_identities_id, interlingual_index_id, wordnet_31_synset_id, tripadvisor_id, google_maps_customer_id, ballotpedia_id, image, subreddit, water_as_percent_of_area, online_pwn_encyclopedia_id, store_norske_leksikon_id, national_library_of_israel_j9u_id, wikisimpsons_id, per_capita_income, number_of_households, hashtag]\n- Table: jurisdiction, Columns: [label, description, dewey_decimal_classification, country, shares_border_with, capital, flag_image, named_after, iso_3166_2_code, commons_category, flag, coordinate_location, openstreetmap_relation_id, located_in_the_administrative_territorial_entity, official_website, page_banner, topics_main_category, curlie_id, musicbrainz_area_id, instance_of, legislative_body, freebase_id, gnis_id, fips_10_4_countries_and_regions, topics_main_wikimedia_portal, category_for_people_born_here, category_for_people_who_died_here, geonames_id, gnd_id, category_for_films_shot_at_this_location, category_of_people_buried_here, category_of_associated_people, office_held_by_head_of_government, inception, located_in_or_next_to_body_of_water, described_by_source, locator_map_image, viaf_id, pronunciation_audio, head_of_government, area, library_of_congress_authority_id, population, located_in_time_zone, bbc_things_id, quora_topic_id, isni, ringgold_id, highest_point, lowest_point, subreddit, short_name, nickname, motto_text, contains_the_administrative_territorial_entity, yso_id, elevation_above_sea_level, mesh_descriptor_id, us_national_archives_identifier, gacs_id, history_of_topic, encyclop\u00e6dia_britannica_online_id, fips_5_2_alpha_code_us_states, fips_5_2_numeric_code_us_states, geography_of_topic, demonym, wikimedia_outline, water_as_percent_of_area, coordinates_of_geographic_center, executive_body, foundational_text, highest_judicial_authority, coordinates_of_northernmost_point, getty_thesaurus_of_geographic_names_id, part_of, c_span_organization_id, native_label, archinform_location_id, geoshape, wolfram_language_entity_code, catholic_encyclopedia_id, official_symbol, comic_vine_id, maximum_temperature_record, loc_and_marc_vocabularies_id, language_used, whos_on_first_id, gran_enciclop\u00e8dia_catalana_id, omegawiki_defined_meaning, minimum_temperature_record, category_for_maps, larousse_id, treccanis_dizionario_di_storia_id, worldcat_identities_id, nkcr_aut_id, anthem, seal_image, has_seal_badge_or_sigil, kbpedia_id, rkd_thesaurus_id, hasc, interlingual_index_id, the_top_tens_id, economy_of_topic, open_civic_data_division_id, tripadvisor_id, google_maps_customer_id, google_news_topics_id, category_for_the_view_of_the_item, github_topic, wordnet_31_synset_id, demographics_of_topic, ballotpedia_id, inaturalist_place_id, archives_at, marriageable_age, compulsory_education_maximum_age, openstreetmap_zoom_level, topics_main_template, different_from, uk_parliament_thesaurus_id, online_pwn_encyclopedia_id, store_norske_leksikon_id, twitter_topic_id, wikisimpsons_id, related_category, den_store_danske_id, per_capita_income, mean_age, number_of_households, hashtag, national_library_of_israel_j9u_id, national_library_of_israel_id_old, idref_id, french_vikidia_id, english_vikidia_id, italian_vikidia_id]",
        "Response": "Table: place_of_death"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season) VALUES ('E0', '2013-11-02', 'West Ham', 'Aston Villa', 0, 0, 'D', 2014);\nDatabase State:\n- Table: divisions, Columns: [division, name, country]\n- Table: FootballMatches, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]",
        "Response": "Table: FootballMatches"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Authors (authID, lname, fname) VALUES (62, 'Sheard', 'Tim');\nDatabase State:\n- Table: Authors, Columns: [authID, lname, fname]\n- Table: Authorship, Columns: [authID, instID, paperID, authOrder]\n- Table: Papers, Columns: [paperID, title]",
        "Response": "Table: Authors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, catalogue_of_life_id, gram_staining, lpsn_url, microsoft_academic_id) VALUES ('Salmonella enterica', 'species of bacterium', 'Salmonella', 'Salmonella enterica', 'taxon', 'species', '965903.0', '/m/02bvfx', '28901.0', '5427577.0', 'nan', '6XF3V', 'Gram-negative bacteria', 'http://www.bacterio.net/salmonella.html#enterica', '2779607309.0');\nDatabase State:\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, catalogue_of_life_id, gram_staining, lpsn_url, microsoft_academic_id]",
        "Response": "Table: taxon"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO city (Name, Country, Province, Population, Longitude, Latitude) VALUES ('Torun', 'PL', 'Torunskie', 201000, NULL, NULL);\nDatabase State:\n- Table: isMember, Columns: [Country, Organization, Type]\n- Table: lake, Columns: [Name, Area, Depth, Altitude, Type, River, Longitude, Latitude]\n- Table: religion, Columns: [Country, Name, Percentage]\n- Table: continent, Columns: [Name, Area]\n- Table: population, Columns: [Country, Population_Growth, Infant_Mortality]\n- Table: politics, Columns: [Country, Independence, Dependent, Government]\n- Table: target, Columns: [Country, Target]\n- Table: geo_river, Columns: [River, Country, Province]\n- Table: province, Columns: [Name, Country, Population, Area, Capital, CapProv]\n- Table: sea, Columns: [Name, Depth]\n- Table: geo_source, Columns: [River, Country, Province]\n- Table: organization, Columns: [Abbreviation, Name, City, Country, Province, Established]\n- Table: geo_estuary, Columns: [River, Country, Province]\n- Table: Cities, Columns: [Name, Country, Province, Population, Longitude, Latitude]\n- Table: borders, Columns: [Country1, Country2, Length]\n- Table: country, Columns: [Name, Code, Capital, Province, Area, Population]\n- Table: ethnicGroup, Columns: [Country, Name, Percentage]\n- Table: located, Columns: [City, Province, Country, River, Lake, Sea]\n- Table: desert, Columns: [Name, Area, Longitude, Latitude]\n- Table: mountain, Columns: [Name, Mountains, Height, Type, Longitude, Latitude]",
        "Response": "Table: Cities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, genomic_end, strand_orientation, instance_of, genomic_start) VALUES ('hypothetical protein BN112_4148', 'microbial gene found in Bordetella bronchiseptica 253', 'Bordetella bronchiseptica 253', '13981203', 'gene', 'Hypothetical protein BN112_4148', 'BN112_4148', '4457830', 'forward strand', 'gene', '4456211');\nDatabase State:\n- Table: part, Columns: [label, description, instance_of, interpro_id]\n- Table: glycosyltransferase_rgta_b_c_d_like_protein_family, Columns: [label, description, uniprot_protein_id, refseq_protein_id, found_in_taxon, encoded_by, cell_component, has_parts, instance_of, part_of]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO volume (Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID) VALUES (5, '46:5', '9 May', 1.0, ' With or Without You ', 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: volume"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address) VALUES (3, 'Campbell, Jessie', 'Black', 34, 20, 6, 'Hartford');\nDatabase State:\n- Table: happy_hour_member, Columns: [HH_ID, Member_ID, Total_amount]\n- Table: happy_hour, Columns: [HH_ID, Shop_ID, Month, Num_of_shaff_in_charge]\n- Table: shop, Columns: [Shop_ID, Address, Num_of_staff, Score, Open_Year]\n- Table: member, Columns: [Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address]",
        "Response": "Table: member"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, model_year, country) VALUES (100, 1976, 1);\nDatabase State:\n- Table: production, Columns: [ID, model_year, country]",
        "Response": "Table: production"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO performance (Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share) VALUES (1, 1, 'Auditions 1', '9 June', 5.200000000000000177, '12', '22.7%');\nDatabase State:\n- Table: conductor, Columns: [Conductor_ID, Name, Age, Nationality, Year_of_Work]\n- Table: performance, Columns: [Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share]",
        "Response": "Table: performance"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO gtp_cyclohydrolase_1_type_2_nif3 (label, description, encoded_by, uniprot_protein_id, found_in_taxon, part_of, instance_of, subclass_of, refseq_protein_id) VALUES ('GTP cyclohydrolase I HP0959', 'microbial protein found in Helicobacter pylori 26695', 'GTP cyclohydrolase I HP0959', 'O25613', 'Helicobacter pylori 26695', 'GTP cyclohydrolase 1 type 2/Nif3', 'protein', 'protein', 'NP_207751');\nDatabase State:\n- Table: Protein_GTP_Cyclohydrol, Columns: [label, description, encoded_by, uniprot_protein_id, found_in_taxon, part_of, instance_of, subclass_of, refseq_protein_id]",
        "Response": "Table: Protein_GTP_Cyclohydrol"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, commons_category, numeric_value, unicode_character, kit_linked_open_numbers_id, prime_factor, encyclop\u00e6dia_britannica_online_id, label_in_sign_language, pronunciation_audio, number_of_decimal_digits, code, spoken_text_audio, code_image, omegawiki_defined_meaning, babelnet_id, personality_database_profile_id, factgrid_item_id, pixiv_encyclopedia_id, image) VALUES ('3', 'natural number', 'prime number', '3 (number)', 3.0, '3', '3', '3', 'topic/the-number-three', 'LSQ 3.jpg', 'Ady-3.oga', 1.0, '\u0be9', 'Nl-3 (getal)-article.ogg', 'Old tamil number3.jpg', '5424', '00000100n', '518852.0', 'Q399914', '3.0', 'Maya 3.svg');\nDatabase State:\n- Table: positional_numeral_system, Columns: [label, description, instance_of, radix]",
        "Response": "Table: prime_factor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO transaction (TransactionID, CreditCardNumber, CustomerID, TransactionDate, CreditCardType, LocationID, RootBeerID, PurchasePrice) VALUES (100193, 5358930718083632, 464984, '2014-11-17', 'MasterCard', 1, 103279, 3.0);\nDatabase State:\n- Table: RootBeerTransactions, Columns: [TransactionID, CreditCardNumber, CustomerID, TransactionDate, CreditCardType, LocationID, RootBeerID, PurchasePrice]\n- Table: rootbeerbrand, Columns: [BrandID, BrandName, FirstBrewedYear, BreweryName, City, State, Country, Description, CaneSugar, CornSyrup, Honey, ArtificialSweetener, Caffeinated, Alcoholic, AvailableInCans, AvailableInBottles, AvailableInKegs, Website, FacebookPage, Twitter, WholesaleCost, CurrentRetailPrice]\n- Table: rootbeerreview, Columns: [CustomerID, BrandID, StarRating, ReviewDate, Review]\n- Table: rootbeer, Columns: [RootBeerID, BrandID, ContainerType, LocationID, PurchaseDate]",
        "Response": "Table: RootBeerTransactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, country, coat_of_arms_image, located_in_the_administrative_territorial_entity, coordinate_location, commons_category, instance_of, image, area, geonames_id, ine_id_portugal, openstreetmap_relation_id, population, factgrid_item_id, flag_image, freebase_id, official_website, topics_main_category, postal_code, located_in_time_zone, contains_the_administrative_territorial_entity, shares_border_with, inaturalist_place_id) VALUES ('Am\u00eandoa', 'civil parish in Ma\u00e7\u00e3o', 'Portugal', 'MAC-amendoa.png', 'Ma\u00e7\u00e3o', '39.658611111111', 'nan', 'freguesia of Portugal', 'nan', 37.0, '8013016.0', '141302', '6458552', NULL, 'Q357776', 'nan', 'nan', 'nan', 'nan', 'nan', 'UTC\u00b100:00', 'nan', 'nan', 'nan');\nDatabase State:\n- Table: PortugueseMunicipalities, Columns: [label, description, country, coat_of_arms_image, located_in_the_administrative_territorial_entity, coordinate_location, commons_category, instance_of, image, area, geonames_id, ine_id_portugal, openstreetmap_relation_id, population, factgrid_item_id, flag_image, freebase_id, official_website, topics_main_category, postal_code, located_in_time_zone, contains_the_administrative_territorial_entity, shares_border_with, inaturalist_place_id]\n- Table: linha_da_beira_baixa, Columns: [label, description, instance_of, country, part_of, coordinate_location, located_in_the_administrative_territorial_entity, located_in_time_zone, connecting_line, google_knowledge_graph_id, commons_category, image]",
        "Response": "Table: PortugueseMunicipalities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO political_border (label, description, commons_category, country, coat_of_arms_image, lau, instance_of, freebase_id, flag_image, shares_border_with, population, image, geonames_id, coordinate_location, elevation_above_sea_level, official_website, topics_main_category, postal_code, time_of_earliest_written_record, email_address, openstreetmap_relation_id, area, licence_plate_code, czech_registration_id, nkcr_aut_id, historical_region, whos_on_first_id, located_in_the_administrative_territorial_entity, geoshape, mapycz_id, isds_id, czech_municipality_id, number_of_houses, mean_age) VALUES ('Kamenn\u00e1 Horka', 'village in Svitavy District of Pardubice region', 'Kamenn\u00e1 Horka', 'Czech Republic', 'Kamenn\u00e1 Horka znak.jpg', 'CZ578215', 'municipality of the Czech Republic', '/m/07kht03', 'Kamenn\u00e1 horka flag CZ.svg', 'Svitavy', 320.0, 'Kamenn\u00e1 Horka 2.jpg', '3073911.0', '49.737935720193', 521.0, 'http://www.obeckamennahorka.cz/', 'Category:Kamenn\u00e1 Horka', '568\u00a002', '+1270-01-01T00:00:00Z', 'mailto:obec.kamenna.horka@cmail.cz', '436648', 15.74226700000000001, 'SY', '276812.0', 'ge437291', 'Moravia', '1125860907.0', 'Svitavy District', 'Data:Map of Kamenn\u00e1 Horka, Svitavy District.map', 'muni&id=2797', '9tka4ux', '578215.0', 112.0, 44.89999999999999858);\nDatabase State:\n- Table: jurisdiction, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, capital, locator_map_image, openstreetmap_relation_id, shares_border_with, country, coordinate_location, lau, topics_main_category, instance_of, iso_3166_2_code, freebase_id, geonames_id, viaf_id, image, population, area, musicbrainz_area_id, geoshape, mean_age, licence_plate_code, nkcr_aut_id, library_of_congress_authority_id, czech_district_id, category_for_maps, hasc, mapycz_id, inaturalist_place_id, number_of_houses, topics_main_template, contains_the_administrative_territorial_entity]",
        "Response": "Table: political_border"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Country_id, Country_name, Capital, Official_native_language) VALUES (2, 'Iran', 'Tehran', 'Persian ( Arabic script )');\nDatabase State:\n- Table: player, Columns: [Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team]\n- Table: match_season, Columns: [Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College]",
        "Response": "Table: country"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS) VALUES (2046, '2004-2005', 'MODO Hockey J20', 'SuperElit', 'Regular Season', 33, 10, 5, 15, 78, 0);\nDatabase State:\n- Table: PlayerInfo, Columns: [ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0]",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (orderNumber, orderDate, requiredDate, shippedDate, status, comments, customerNumber) VALUES (10228, '2004-03-10', '2004-03-18', '2004-03-13', 'Shipped', NULL, 173);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, day_id, opening_time, closing_time) VALUES (7508, 7, '9AM', '7PM');\nDatabase State:\n- Table: Business_Hours, Columns: [business_id, day_id, opening_time, closing_time]\n- Table: Days, Columns: [day_id, day_of_week]\n- Table: Attributes, Columns: [attribute_id, attribute_name]\n- Table: Business, Columns: [business_id, active, city, state, stars, review_count]\n- Table: Categories, Columns: [category_id, category_name]\n- Table: Users_Compliments, Columns: [compliment_id, user_id, number_of_compliments]\n- Table: Business_Categories, Columns: [business_id, category_id]\n- Table: Users, Columns: [user_id, user_yelping_since_year, user_average_stars, user_votes_funny, user_votes_useful, user_votes_cool, user_review_count, user_fans]\n- Table: Business_Attributes, Columns: [attribute_id, business_id, attribute_value]\n- Table: Reviews, Columns: [business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length]\n- Table: Checkins, Columns: [business_id, day_id, label_time_0, label_time_1, label_time_2, label_time_3, label_time_4, label_time_5, label_time_6, label_time_7, label_time_8, label_time_9, label_time_10, label_time_11, label_time_12, label_time_13, label_time_14, label_time_15, label_time_16, label_time_17, label_time_18, label_time_19, label_time_20, label_time_21, label_time_22, label_time_23]\n- Table: Compliments, Columns: [compliment_id, compliment_type]\n- Table: Tips, Columns: [business_id, user_id, likes, tip_length]\n- Table: Years, Columns: [year_id, actual_year]\n- Table: Elite, Columns: [user_id, year_id]",
        "Response": "Table: Business_Hours"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (character, voice_actor, movie) VALUES ('Eeyore', 'Ralph Wright', 'Winnie the Pooh and the Honey Tree');\nDatabase State:\n- Table: director, Columns: [name, director]",
        "Response": "Table: voice_actors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, person_id, category, role, credited) VALUES ('tt0629291', 'nm5632505', 'Additional Crew', 'executive assistant to executive producer', 'true');\nDatabase State:\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Keyword, Columns: [episode_id, keyword]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, freebase_id, instance_of) VALUES ('Platte River', 'river in Nebraska, United States', '/m/01nlrj', 'river');\nDatabase State:\n- Table: Eponyms, Columns: [label, description, freebase_id, instance_of]",
        "Response": "Table: Eponyms"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Airlines (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY) VALUES ('2018/8/25', 20452, 'N979RP', 3630, 14492, 1449202, 34492, 'RDU', 11618, 1161802, 31703, 'EWR', 1605, 1603, -2, 0, 1757, 15, 15, 0, NULL, 97, 114, 0, 0, 15, 0, 0);\nDatabase State:\n- Table: Airlines, Columns: [FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Lives_in (stuid, dormid, room_number) VALUES (1017, 140, 319);\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Dorm, Columns: [dormid, dorm_name, student_capacity, gender]\n- Table: Dorm_amenity, Columns: [amenid, amenity_name]\n- Table: Lives_in, Columns: [stuid, dormid, room_number]",
        "Response": "Table: Lives_in"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (GeneID, Essential, Class, Complex, Phenotype, Motif, Chromosome, Function, Localization) VALUES ('G235735', 'Essential', '?', 'Histone acetyltransferase complexes', '?', '?', 13, 'TRANSCRIPTION', 'nucleus');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage) VALUES (8, 'Reliant Stadium', 8, 71080.0, 568643.0, 100.0);\nDatabase State:\n- Table: stadium, Columns: [id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]",
        "Response": "Table: stadium"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO temperature (City_ID, Jan, Feb, Mar, Apr, Jun, Jul, Aug, Sep, Oct, Nov, Dec) VALUES (3, 18.89999999999999857, 18.30000000000000071, 19.39999999999999857, 20.0, 22.19999999999999929, 23.30000000000000071, 23.89999999999999858, 23.30000000000000071, 22.80000000000000071, 21.69999999999999929, 20.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: temperature"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO regulates_molecular_biology (label, description, gene_ontology_id, subclass_of, exact_match, instance_of) VALUES ('ubiquitin-dependent protein catabolic process', 'The chemical reactions and pathways resulting in the breakdown of a protein or peptide by hydrolysis of its peptide bonds, initiated by the covalent attachment of a ubiquitin group, or multiple ubiquitin groups, to the protein.', 'GO:0006511', 'modification-dependent protein catabolic process', 'http://purl.obolibrary.org/obo/GO_0006511', 'biological process');\nDatabase State:\n- Table: positive_regulation_of_cellular_catabolic_process, Columns: [label, description, gene_ontology_id, subclass_of, regulates_molecular_biology, exact_match, instance_of]\n- Table: regulates_molecular_biology, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]",
        "Response": "Table: regulates_molecular_biology"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, sport, winner, location, point_in_time, coordinate_location, freebase_id) VALUES ('1864 Open Championship', 'golf tournament held in 1864', 'The Open Championship', 'golf', 'Old Tom Morris', 'Prestwick Golf Club', '+1864-00-00T00:00:00Z', 'nan', '/m/04lfpcx');\nDatabase State:\n- Table: winner, Columns: [label, description, sex_or_gender, date_of_birth, freebase_id, instance_of, place_of_birth, country_of_citizenship, given_name, sport, family_name, occupation]\n- Table: place_of_birth, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, country, topics_main_category, freebase_id, geonames_id, instance_of, viaf_id, local_dialing_code, image, library_of_congress_authority_id, whos_on_first_id, worldcat_identities_id, national_library_of_israel_j9u_id, postal_code, population]\n- Table: physical_location, Columns: [label, description, coordinate_location, country, official_website, freebase_id, instance_of, commons_category, sport, historic_county]\n- Table: the_open_championship, Columns: [label, description, instance_of, sport, winner, location, point_in_time, coordinate_location, freebase_id]",
        "Response": "Table: the_open_championship"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ship_id, cust_id, weight, truck_id, driver_id, city_id, ship_date) VALUES (1498, 2131, 6399.0, 7, 27, 451, '2017-02-21');\nDatabase State:\n- Table: Shipments, Columns: [ship_id, cust_id, weight, truck_id, driver_id, city_id, ship_date]\n- Table: driver, Columns: [driver_id, first_name, last_name, address, city, state, zip_code, phone]",
        "Response": "Table: Shipments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO mathematical_society (label, description, instance_of, country, official_website) VALUES ('Mathematical Optimization Society', 'international association of researchers active in optimization, encourages the research, development, and use of optimization\u2014including mathematical theory, software implementation, and practical applications (operations research)', 'pressure group', 'nan', 'http://www.mathopt.org/');\nDatabase State:\n- Table: Mathematical_Societies, Columns: [label, description, instance_of, country, official_website]",
        "Response": "Table: Mathematical_Societies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Authors (authID, lname, fname) VALUES (55, 'Ahmed', 'Amal');\nDatabase State:\n- Table: Authors, Columns: [authID, lname, fname]",
        "Response": "Table: Authors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (zip_code, alias) VALUES (2370, 'Rockland');\nDatabase State:\n- Table: Zip_Aliases, Columns: [zip_code, alias]\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]",
        "Response": "Table: Zip_Aliases"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO hosting_city (Year, Match_ID, Host_City) VALUES (2009, 2, '2');\nDatabase State:\n- Table: FIFA_Hosting_Cities, Columns: [Year, Match_ID, Host_City]\n- Table: temperature, Columns: [City_ID, Jan, Feb, Mar, Apr, Jun, Jul, Aug, Sep, Oct, Nov, Dec]",
        "Response": "Table: FIFA_Hosting_Cities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Catalog_Contents_Additional_Attributes (catalog_entry_id, catalog_level_number, attribute_id, attribute_value) VALUES (8, 9, 3, '0');\nDatabase State:\n- Table: Catalog_Contents_Additional_Attributes, Columns: [catalog_entry_id, catalog_level_number, attribute_id, attribute_value]\n- Table: Catalogs, Columns: [catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision]\n- Table: Attribute_Definitions, Columns: [attribute_id, attribute_name, attribute_data_type]\n- Table: Catalog_Structure, Columns: [catalog_level_number, catalog_id, catalog_level_name]",
        "Response": "Table: Catalog_Contents_Additional_Attributes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, found_in_taxon, instance_of, ensembl_gene_id, refseq_rna_id, encodes) VALUES ('LOC105487652', 'gene of the species Macaca nemestrina', '105487652', 'southern pig-tailed macaque', 'nan', 'nan', 'XM_011751150', 'Cytochrome b-c1 complex subunit Rieske, mitochondrial');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, found_in_taxon, instance_of, ensembl_gene_id, refseq_rna_id, encodes]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (GeneID1, GeneID2, Type, Expression_Corr) VALUES ('G235482', 'G237509', 'Genetic', -0.6107962070000000354);\nDatabase State:\n- Table: Classification, Columns: [GeneID, Localization]\n- Table: GeneInteractions, Columns: [GeneID1, GeneID2, Type, Expression_Corr]",
        "Response": "Table: GeneInteractions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost) VALUES ('SO - 0001975', 'Distributor', 'WARE-NMK1003', '10/27/18', '1/4/19', '1/9/19', '1/17/19', 'USD', 22, 19, 165, 27, 6, 0.07499999999999999723, '2,525.90', '1,768.13');\nDatabase State:\n- Table: Products, Columns: [ProductID, Product_Name]\n- Table: Regions, Columns: [StateCode, State, Region]\n- Table: Sales_Orders, Columns: [OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost]",
        "Response": "Table: Sales_Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, instance_of, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, freebase_id, commons_category, viaf_id, geonames_id, population, official_website, image, locator_map_image, openstreetmap_relation_id, area, whos_on_first_id, worldcat_identities_id) VALUES ('Manawat\u016b District', 'territorial authority district in Manawat\u016b-Whanganui, New Zealand', 'New Zealand', 'district of New Zealand', 'Manawat\u016b-Whanganui Region', '-40.093', 'Category:Manawatu District', '/m/03_mpr', 'Manawatu District', 'nan', '7910051', 30800.0, 'https://www.mdc.govt.nz/', 'Sacred Heart Catholic Church, Rongotea (c.1895).JPG', 'Manawatu Territorial Authority.PNG', '3467598', 2624.114999999999782, 'nan', 'nan');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, country, instance_of, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, freebase_id, commons_category, viaf_id, geonames_id, population, official_website, image, locator_map_image, openstreetmap_relation_id, area, whos_on_first_id, worldcat_identities_id]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, courseLevel) VALUES (141, 'Level_500');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: course"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cars_data (Id) VALUES (117, '21', 4, 140.0, '72', 2401, 19.5, 1973);\nDatabase State:\n- Table: cars_data, Columns: [Id]",
        "Response": "Table: cars_data"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO dna_recombination_mediator_protein_a (label, description, encoded_by, uniprot_protein_id, found_in_taxon, subclass_of, biological_process, instance_of, refseq_protein_id, part_of) VALUES ('DNA protecting protein DprA ECL_04662', 'microbial protein found in Enterobacter cloacae subsp. cloacae ATCC 13047', 'DNA protecting protein DprA ECL_04662', 'A0A0H3CU79', 'Enterobacter cloacae subsp. cloacae ATCC 13047', 'protein', 'DNA mediated transformation', 'protein', 'YP_003615139', 'DNA recombination-mediator protein A');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: dna_recombination_mediator_protein_a"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Cinema_ID, Name, Openning_year, Capacity, Location) VALUES (10, 'Oriel', 2013, 330, 'County Louth');\nDatabase State:\n- Table: schedule, Columns: [Cinema_ID, Film_ID, Date, Show_times_per_day, Price]\n- Table: Cinemas, Columns: [Cinema_ID, Name, Openning_year, Capacity, Location]\n- Table: film, Columns: [Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code]",
        "Response": "Table: Cinemas"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, locator_map_image, flag_image, shares_border_with, population, coordinate_location, catalog_code, commons_category, part_of, factgrid_item_id, flag, vision_of_britain_place_id) VALUES ('Suffolk', 'historic county of England', 'historic county of England', 'United Kingdom', 'Suffolk - British Isles.svg', 'County Flag of Suffolk.svg', 'Essex', 776070.0, '52.2243372093', 'SFF', 'Suffolk', 'England', 'Q217753', 'flag of Suffolk', '17457.0');\nDatabase State:\n- Table: ha_ha, Columns: [label, description, coordinate_location, country, heritage_designation, instance_of, located_in_the_administrative_territorial_entity, national_heritage_list_for_england_number, historic_county, os_grid_reference]\n- Table: administrative_territorial_entity, Columns: [label, description, country, located_in_the_administrative_territorial_entity, commons_category, coordinate_location, freebase_id, instance_of, geonames_id, gss_code_2011, toid, openstreetmap_relation_id]\n- Table: political_border, Columns: [label, description, instance_of, country, locator_map_image, flag_image, shares_border_with, population, coordinate_location, catalog_code, commons_category, part_of, factgrid_item_id, flag, vision_of_britain_place_id]",
        "Response": "Table: political_border"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, coordinate_location, freebase_id, instance_of, country, contains_the_administrative_territorial_entity, located_in_the_administrative_territorial_entity) VALUES ('Ajmer district', 'district of Rajasthan, India', '26.45', '/m/098zkh', 'district of India', 'India', 'nan', 'Ajmer division');\nDatabase State:\n- Table: Administrative_Divisions, Columns: [label, description, coordinate_location, freebase_id, instance_of, country, contains_the_administrative_territorial_entity, located_in_the_administrative_territorial_entity]",
        "Response": "Table: Administrative_Divisions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SeasonStatus (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS) VALUES (9522, '2000-2001', 'Brampton Battalion', 'OHL', 'Regular Season', 53, 4, 15, 19, 112, 4);\nDatabase State:\n- Table: SeasonStatus, Columns: [ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS]\n- Table: height_info, Columns: [height_id, height_in_cm, height_in_inch]",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO given_name (label, description, instance_of, said_to_be_the_same_as, language_of_work_or_name, native_label, writing_system, nominis_given_name_id, commons_category, caverphone) VALUES ('Geoffroy', 'male given name', 'male given name', 'Galfridus', 'nan', 'Geoffroy', 'Latin script', '7/Geoffroy', 'Geoffroy (given name)', 'KFR111');\nDatabase State:\n- Table: city_gates_of_paris, Columns: [label, description, commons_category, coordinate_location, country, instance_of, part_of, located_in_the_administrative_territorial_entity, google_knowledge_graph_id]\n- Table: head_of_government, Columns: [label, description, place_of_birth, date_of_birth, country_of_citizenship, instance_of, sex_or_gender, position_held, member_of_political_party, image, occupation, given_name, whos_who_in_france_biography_id, twitter_username, languages_spoken_written_or_signed, google_knowledge_graph_id, social_media_followers]\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, shares_border_with, country, postal_code, insee_municipality_code, topics_main_category, page_banner, freebase_id, inception, replaces, geonames_id, category_for_films_shot_at_this_location, locator_map_image, image, official_website, population, head_of_government, openstreetmap_relation_id, gnd_id, biblioth\u00e8que_nationale_de_france_id, area, twitter_username, viaf_id, archinform_location_id, isni, annual_number_of_weddings, coat_of_arms_image, contains_the_administrative_territorial_entity, category_for_maps, worldcat_identities_id, gadm_id, detail_map, social_media_followers, facebook_id, factgrid_item_id]",
        "Response": "Table: given_name"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Region_id, Region_code, Region_name) VALUES (9, 'AG', 'Antigua and Barbuda');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: region"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id_restaurant, street_num, street_name, city) VALUES (6989, 3919, 'cherry ave', 'san jose');\nDatabase State:\n- Table: generalinfo, Columns: [id_restaurant, label, food_type, city, review]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO routes (rid, dst_apid) VALUES (62929, 679, 'WAW', 708, 'MMX', 5461, 'W6', NULL);\nDatabase State:\n- Table: routes, Columns: [rid, dst_apid]\n- Table: airports, Columns: [apid]",
        "Response": "Table: routes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (region_id, game_platform_id, num_sales) VALUES (3, 7118, 0.1799999999999999934);\nDatabase State:\n- Table: game_publisher, Columns: [id, game_id, publisher_id]",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO employee (ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID) VALUES ('464-64-4466', 'Webster', 'David', '1/29/91', 'US$58,500.00', 'M', 'Poor', 2, 7);\nDatabase State:\n- Table: position, Columns: [positionID, positiontitle, educationrequired, minsalary, maxsalary]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ActorID, Name, Date_of_Birth, Birth_City, Birth_Country, Height_(Inches), Biography, Gender, Ethnicity, NetWorth) VALUES (2657, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Celebrities, Columns: [ActorID, Name, Date_of_Birth, Birth_City, Birth_Country, Height_(Inches), Biography, Gender, Ethnicity, NetWorth]\n- Table: characters, Columns: [MovieID, ActorID, Character_Name, creditOrder, pay, screentime]\n- Table: movie, Columns: [MovieID, Title, MPAA_Rating, Budget, Gross, Release_Date, Genre, Runtime, Rating, Rating_Count, Summary]",
        "Response": "Table: Celebrities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft) VALUES (3.0, 'Flamengo Beach , Rio de Janeiro', 'Brazil', 'May 8\u20139', 'Hannes Arch', '6', '2');\nDatabase State:\n- Table: airport, Columns: [Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes]\n- Table: AirRacingResults, Columns: [Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft]",
        "Response": "Table: AirRacingResults"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO car_names (MakeId) VALUES (332, 'datsun', 'datsun 210');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: car_names"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('nucleotide-binding protein VP1617', 'microbial gene found in Vibrio parahaemolyticus RIMD 2210633', 'Vibrio parahaemolyticus RIMD 2210633', '1189124', 'gene', 'Nucleotide-binding protein VP1617', 'VP1617', 'gene', '1717893', 'forward strand', '1717411');\nDatabase State:\n- Table: Genes, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO protein_of_unknown_function_duf1023 (label, description, refseq_protein_id, found_in_taxon, encoded_by, part_of, instance_of, uniprot_protein_id) VALUES ('Hypothetical protein AMED_2228', 'microbial protein found in Amycolatopsis mediterranei U32', 'YP_003764430', 'Amycolatopsis mediterranei U32', 'hypothetical protein AMED_2228', 'Protein of unknown function DUF1023', 'protein', 'A0A0H3D086');\nDatabase State:\n- Table: protein_of_unknown_function_duf1023, Columns: [label, description, refseq_protein_id, found_in_taxon, encoded_by, part_of, instance_of, uniprot_protein_id]\n- Table: encoded_by, Columns: [label, description, subclass_of, found_in_taxon, entrez_gene_id, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: encodes, Columns: [label, description, refseq_protein_id, found_in_taxon, encoded_by, part_of, instance_of, uniprot_protein_id]",
        "Response": "Table: protein_of_unknown_function_duf1023"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, menu_page_id, price, high_price, dish_id, created_at, updated_at, xpos, ypos) VALUES (1354186, 68942, 0.6999999999999999556, NULL, 1583, '2014-09-26 17:18:33 UTC', '2014-09-26 17:18:33 UTC', 0.4600000000000000199, 0.5547670000000000101);\nDatabase State:\n- Table: Menu, Columns: [id, name, sponsor, event, venue, place, physical_description, occasion, notes, call_number, keywords, language, date, location, location_type, currency, currency_symbol, status, page_count, dish_count]\n- Table: MenuPage, Columns: [id, menu_id, page_number, image_id, full_height, full_width, uuid]",
        "Response": "Table: MenuItem"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, reactome_id, instance_of, part_of, exact_match, has_parts, cites_work) VALUES ('Phosphorylation of Smooth Muscle Myosin Light Chains', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-445813)', 'Homo sapiens', 'R-HSA-445813', 'biological process', 'Smooth Muscle Contraction', 'https://identifiers.org/reactome:R-HSA-445813', 'ATP(4-)', 'The distribution of heavy-chain isoforms of myosin in airways smooth muscle from adult and neonate humans');\nDatabase State:\n- Table: publishing, Columns: [label, description, instance_of, official_website, freebase_id, issn, era_journal_id, oclc_control_number, coden, scopus_source_id, danish_bibliometric_research_indicator_bfi_snocno, danish_bibliometric_research_indicator_level, publisher, title, iso_4_abbreviation, opencitations_bibliographic_resource_id, nlm_unique_id, language_of_work_or_name, inception, country_of_origin, uniprot_journal_id, main_subject, jufo_id, acnp_journal_id, crossref_journal_id, issn_l, indexed_in_bibliographic_review, openalex_id, scilit_journal_id]\n- Table: citation, Columns: [label, description, pages, title, author_name_string, publication_date, issue, volume, published_in, instance_of, pubmed_id, doi, language_of_work_or_name]",
        "Response": "Table: smooth_muscle_contraction"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking) VALUES (1, 'Grand Falls/Grand-Sault', 'Town', 18.05999999999999873, 5706.0, '636 of 5008');\nDatabase State:\n- Table: farm, Columns: [Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats]\n- Table: competition_record, Columns: [Competition_ID, Farm_ID, Rank]\n- Table: Cities, Columns: [City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking]",
        "Response": "Table: Cities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO events (Date_received, Product, Sub_product, Issue, Sub_issue, Consumer_complaint_narrative, Tags, Consumer_consent_provided?, Submitted_via, Date_sent_to_company, Company_response_to_consumer, Timely_response?, Consumer_disputed?, Complaint_ID, Client_ID) VALUES ('2016-04-27', 'Bank account or service', 'Savings account', 'Deposits and withdrawals', NULL, 'I made a deposit of {$1300.00} in a mix of {$2.00} bills, {$1.00} coins, and {$.00} coins right before XXXX. However a few weeks later my online banking account said that I had a withdrawal of {$300.00}. I called to check with the bank as I had barely touched my account since the deposit. It turned out that the deposit that I had made was incorrect? I keep on getting pushed off to the bank manager then to customer service phone calls and vice versa. I counted every coin into every coin wrapper, so I should know if I was {$300.00} short. Plus it said that I was {$.00} short which does n''t make sense at all considering I only deposited {$1.00} and {$.00} coins.', NULL, 'Consent provided', 'Web', '2016-04-27', 'Closed with monetary relief', 'Yes', 'No', 'CR1900232', 'C00001403');\nDatabase State:\n- Table: Complaint_History, Columns: [Date_received, Product, Sub_product, Issue, Sub_issue, Consumer_complaint_narrative, Tags, Consumer_consent_provided?, Submitted_via, Date_sent_to_company, Company_response_to_consumer, Timely_response?, Consumer_disputed?, Complaint_ID, Client_ID]\n- Table: callcenterlogs, Columns: [Date_received, Complaint_ID, rand_client, phonefinal, vru+line, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time]\n- Table: district, Columns: [district_id, city, state_abbrev, division]",
        "Response": "Table: Complaint_History"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, taxon_name, taxon_rank, parent_taxon, instance_of, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, bacdive_id, itis_tsn, gram_staining, jstor_topic_id, irmng_id, lpsn_url, mesh_descriptor_id, mesh_tree_code, microsoft_academic_id, openalex_id, catalogue_of_life_id) VALUES ('Yersinia enterocolitica', 'species of bacterium', 'Yersinia enterocolitica', 'species', 'Yersinia', 'taxon', '/m/058ytg', '630', '5427626.0', '5210.0', '958655.0', 'Gram-negative bacteria', 'yersinia-enterocolitica', '10032888.0', 'http://www.bacterio.net/yersinia.html#enterocolitica', 'D015008', 'B03.440.450.425.900.300', '2776234502.0', 'C2776234502', '5CRHY');\nDatabase State:\n- Table: natural_product, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]\n- Table: taxon, Columns: [label, description, taxon_name, taxon_rank, parent_taxon, instance_of, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, bacdive_id, itis_tsn, gram_staining, jstor_topic_id, irmng_id, lpsn_url, mesh_descriptor_id, mesh_tree_code, microsoft_academic_id, openalex_id, catalogue_of_life_id]\n- Table: toxin_antitoxin_system_yafq_like_toxin, Columns: [label, description, found_in_taxon, uniprot_protein_id, encoded_by, subclass_of, instance_of, refseq_protein_id, part_of]\n- Table: encodes, Columns: [label, description, found_in_taxon, uniprot_protein_id, encoded_by, subclass_of, instance_of, refseq_protein_id, part_of]\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: taxon"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO buttress_dam (label, description, commons_category, coordinate_location, instance_of, image, country, located_in_the_administrative_territorial_entity, drainage_basin, length) VALUES ('Galu Kalat Dam', 'dam in Jam County, Iranian national heritage site', 'Galu Kalat Dam', 'nan', 'gravity dam', '\u0628\u0646\u062f \u06af\u0644\u0648 \u06a9\u0644\u0627\u062a.jpg', 'Iran', 'Kuri Rural District', 'Persian Gulf Basin', NULL);\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, country, coordinate_location, freebase_id, instance_of, located_in_the_administrative_territorial_entity, population]",
        "Response": "Table: buttress_dam"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO election (Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee) VALUES (6, '13', 1, 'Pendergrass, Shane E. Shane Pendergrass', 4, 1994.0, 'Health and Government Operations');\nDatabase State:\n- Table: county, Columns: [County_Id, County_name, Population, Zip_code]\n- Table: party, Columns: [Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate]\n- Table: Legislators, Columns: [Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee]",
        "Response": "Table: Legislators"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (AnswerText, SurveyID, UserID, QuestionID) VALUES ('Don''t Know', 2019, 4133, 33);\nDatabase State:\n- Table: SurveyResponses, Columns: [AnswerText, SurveyID, UserID, QuestionID]",
        "Response": "Table: SurveyResponses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO department_of_honduras (label, description, commons_category, country, iso_3166_2_code, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, freebase_id, fips_10_4_countries_and_regions, instance_of, inception, geonames_id, capital, area, population, locator_map_image, getty_thesaurus_of_geographic_names_id, openstreetmap_relation_id, whos_on_first_id, geoshape, inaturalist_place_id, located_in_time_zone) VALUES ('Francisco Moraz\u00e1n Department', 'department of Honduras', 'Francisco Moraz\u00e1n Department', 'Honduras', 'HN-FM', '14.10571388888889', 'Honduras', 'Category:Francisco Moraz\u00e1n Department', '/m/01v24_', 'HO08', 'department of Honduras', '+1825-00-00T00:00:00Z', '3609672.0', 'Tegucigalpa', 8619.0, 1508906.0, 'Francisco Morazan in Honduras.svg', '1000612.0', '4627390.0', '85671863.0', 'Data:Honduras/Francisco Moraz\u00e1n.map', '10727.0', 'UTC\u221206:00');\nDatabase State:\n- Table: department_of_honduras, Columns: [label, description, commons_category, country, iso_3166_2_code, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, freebase_id, fips_10_4_countries_and_regions, instance_of, inception, geonames_id, capital, area, population, locator_map_image, getty_thesaurus_of_geographic_names_id, openstreetmap_relation_id, whos_on_first_id, geoshape, inaturalist_place_id, located_in_time_zone]",
        "Response": "Table: department_of_honduras"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (playerID, year, stint, tmID, lgID, GP, Min, W, L, T/OL, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA) VALUES ('moranpa01', 1911, 1, 'QU1', 'NHA', '18', '1099', '10', '8', '0', NULL, '0', '78', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: HOF, Columns: [year, hofID, name, category]\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]\n- Table: abbrev, Columns: [Type, Code, Fullname]\n- Table: Teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: AwardsMisc, Columns: [name, ID, award, year, lgID, note]\n- Table: Master, Columns: [playerID, coachID, hofID, firstName, lastName, nameNote, nameGiven, nameNick, height, weight, shootCatch, legendsID, ihdbID, hrefID, firstNHL, lastNHL, firstWHA, lastWHA, pos, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity, deathYear, deathMon, deathDay, deathCountry, deathState, deathCity]\n- Table: TeamsPost, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: TeamVsTeam, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]\n- Table: Scoring, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, +/_, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, Post+/_, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]\n- Table: GoaliesShootout, Columns: [playerID, year, stint, tmID, W, L, SA, GA]\n- Table: SeriesPost, Columns: [year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L, T, GoalsWinner, GoalsLoser, note]\n- Table: AwardsPlayers, Columns: [playerID, award, year, lgID, note, pos]\n- Table: TeamsSC, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM]\n- Table: GoaliesSC, Columns: [playerID, year, tmID, lgID, GP, Min, W, L, T, SHO, GA]\n- Table: CombinedShutouts, Columns: [year, month, date, tmID, oppID, R/P, IDgoalie1, IDgoalie2]\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: ScoringSup, Columns: [playerID, year, PPA, SHA]\n- Table: ScoringShootout, Columns: [playerID, year, stint, tmID, S, G, GDG]",
        "Response": "Table: Goalies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customer_Policies (Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date) VALUES (396, 7, 'Travel', '2017-07-30', '2017-10-09');\nDatabase State:\n- Table: Settlements, Columns: [Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]\n- Table: Claims, Columns: [Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]\n- Table: Customers, Columns: [Customer_ID, Customer_Details]\n- Table: Payments, Columns: [Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]\n- Table: Customer_Policies, Columns: [Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date]",
        "Response": "Table: Customer_Policies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO incidents (case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers) VALUES ('267651Z', '2012/10/27', '3716 Spring Avenue', 'Shoot and Miss', 'Unarmed', 'Kelly, Devoncey B/M', 1, 'Shipp, Joshua W/M');\nDatabase State:\n- Table: officers, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: Incident_Logs, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]",
        "Response": "Table: Incident_Logs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO wikidata_property (label, description, image, instance_of, freebase_id, commons_category) VALUES ('JavaScript', 'high-level programming language', 'JavaScript screenshot.png', 'scripting language', '/m/02p97', 'JavaScript');\nDatabase State:\n- Table: PlacesAndLanguages, Columns: [label, description, image, instance_of, freebase_id, commons_category]",
        "Response": "Table: PlacesAndLanguages"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, gene_ontology_id, subclass_of, regulates_molecular_biology, exact_match, instance_of) VALUES ('positive regulation of tetrapyrrole catabolic process', 'Any process that activates or increases the frequency, rate or extent of tetrapyrrole catabolic process.', 'GO:1901406', 'positive regulation of cellular catabolic process', 'tetrapyrrole catabolic process', 'http://purl.obolibrary.org/obo/GO_1901406', 'biological process');\nDatabase State:\n- Table: regulates_molecular_biology, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]\n- Table: positive_regulation_of_cellular_catabolic_process, Columns: [label, description, gene_ontology_id, subclass_of, regulates_molecular_biology, exact_match, instance_of]",
        "Response": "Table: positive_regulation_of_cellular_catabolic_process"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Catalog_Contents (catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width) VALUES (15, 1, 6, 8, 9, 'Wanglaoji', '51 kr', 533.6000000000000227, 498.6200000000000045, 422.7099999999999796, '4', '5', '8', '8');\nDatabase State:\n- Table: Products, Columns: [catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO glucose_6_phosphate_dehydrogenase_c_terminal_domain_protein_family (label, description, uniprot_protein_id, encoded_by, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('Glucose-6-phosphate dehydrogenase X-linked', 'mammalian protein found in Mus musculus', 'Q00612', 'G6pdx', 'angiotensin-mediated vasodilation involved in regulation of systemic arterial blood pressure', 'glucose-6-phosphate dehydrogenase activity', 'Glucose-6-phosphate dehydrogenase, C-terminal', 'house mouse', 'NP_032088', 'protein', 'NAD(P)-binding domain superfamily', 'nan');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, instance_of, genomic_start, genomic_end, ncbi_locus_tag]",
        "Response": "Table: glucose_6_phosphate_dehydrogenase_c_terminal_domain_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (paper_id, word_cited_id) VALUES ('kumar98beyond', 'word281');\nDatabase State:\n- Table: Citations, Columns: [paper_id, word_cited_id]\n- Table: paper, Columns: [paper_id, class_label]",
        "Response": "Table: Citations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO roysched (title_id, lorange, hirange, royalty) VALUES ('BU2075', 0, 1000, 10);\nDatabase State:\n- Table: jobs, Columns: [job_id, job_desc, min_lvl, max_lvl]\n- Table: sales, Columns: [stor_id, ord_num, ord_date, qty, payterms, title_id]\n- Table: titles, Columns: [title_id, title, type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate]\n- Table: titleauthor, Columns: [au_id, title_id, au_ord, royaltyper]\n- Table: roysched, Columns: [title_id, lorange, hirange, royalty]",
        "Response": "Table: roysched"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO production (ID, model_year, country) VALUES (180, 1975, 2);\nDatabase State:\n- Table: country, Columns: [origin, country]\n- Table: data, Columns: [ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name]\n- Table: price, Columns: [ID, price]",
        "Response": "Table: production"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, official_website, country, instance_of, isni, ringgold_id, headquarters_location, inception, microsoft_academic_id, library_of_congress_authority_id, romeo_publisher_id, viaf_id, worldcat_identities_id, freebase_id, publons_publisher_id) VALUES ('Wiley-Blackwell', 'international scientific, technical, medical, and scholarly publishing business of John Wiley & Sons', 'http://www.wiley.com/wiley-blackwell', 'United States of America', 'publisher', '0000 0004 0639 6288', '73191.0', 'Hoboken', '+2001-01-01T00:00:00Z', '1283650056.0', 'n2008042594', 'nan', '9163147270532735700008', 'nan', '/m/0chqgp', 'nan');\nDatabase State:\n- Table: Publishers, Columns: [label, description, official_website, country, instance_of, isni, ringgold_id, headquarters_location, inception, microsoft_academic_id, library_of_congress_authority_id, romeo_publisher_id, viaf_id, worldcat_identities_id, freebase_id, publons_publisher_id]\n- Table: topic, Columns: [label, description, instance_of, commons_category, bncf_thesaurus_id, topics_main_category, freebase_id, library_of_congress_authority_id, mesh_descriptor_id, biblioth\u00e8que_nationale_de_france_id, quora_topic_id, jstor_topic_id, encyclop\u00e6dia_britannica_online_id, subclass_of, omegawiki_defined_meaning, microsoft_academic_id, yso_id, mesh_tree_code, national_library_of_israel_j9u_id, openalex_id, nkcr_aut_id]\n- Table: citation, Columns: [label, description, pubmed_id, instance_of, published_in, volume, issue, pages, author_name_string, cites_work, doi, publication_date, title]\n- Table: headquarters, Columns: [label, description, image, located_in_time_zone, viaf_id, country, located_in_the_administrative_territorial_entity, commons_category, coordinate_location, instance_of, topics_main_category, curlie_id, freebase_id, gnd_id, population, geonames_id, category_for_people_born_here, musicbrainz_area_id, encyclop\u00e6dia_britannica_online_id, locator_map_image, quora_topic_id, category_of_associated_people, area, archinform_location_id, shares_border_with, official_name, native_label, whos_on_first_id, category_for_maps, nkcr_aut_id, national_library_of_israel_j9u_id, official_website]\n- Table: publishing, Columns: [label, description, instance_of, official_website, issn, era_journal_id, scopus_source_id, danish_bibliometric_research_indicator_bfi_snocno, danish_bibliometric_research_indicator_level, publisher, title, nlm_unique_id, opencitations_bibliographic_resource_id, language_of_work_or_name, country_of_origin, inception, uniprot_journal_id, jufo_id, main_subject, acnp_journal_id, crossref_journal_id, scilit_journal_id, indexed_in_bibliographic_review, issn_l, freebase_id, openalex_id]\n- Table: stimuli_sensing_channels, Columns: [label, description, found_in_taxon, reactome_id, instance_of, cites_work, part_of, has_parts, exact_match]",
        "Response": "Table: Publishers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, genomic_end, strand_orientation, instance_of, genomic_start) VALUES ('site-specific tyrosine recombinase XerD ECs3766', 'microbial gene found in Escherichia coli O157:H7 str. Sakai', 'Escherichia coli O157:H7 str. Sakai', '912431', 'gene', 'Site-specific tyrosine recombinase XerD ECs3766', 'ECs3766', '3777891', 'reverse strand', 'gene', '3776995');\nDatabase State:\n- Table: Genes, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, genomic_end, strand_orientation, instance_of, genomic_start]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, natural_product_of_taxon, kegg_id, pubchem_substance_id_sid, subclass_of, part_of) VALUES ('Saposhnikoviae Radix', 'Crude drug', 'crude drug', 'Saposhnikovia divaricata', 'D06787', '47208438.0', 'kampo herb', 'chotosan');\nDatabase State:\n- Table: secretion_or_excretion, Columns: [label, description, instance_of, taxon_name, taxon_rank, parent_taxon, this_taxon_is_source_of, image, freebase_id, plantlist_id, ncbi_taxonomy_id, ipni_plant_id, tropicos_id, grin_url, gbif_taxon_id, plants_of_the_world_online_id, world_flora_online_id, unii, open_tree_of_life_id, inaturalist_taxon_id, catalogue_of_life_id, taxon_common_name, described_by_source, has_use]\n- Table: source_of_information, Columns: [label, description, instance_of, publication_date]\n- Table: sokeikakketsuto, Columns: [label, description, instance_of, natural_product_of_taxon, kegg_id, pubchem_substance_id_sid, subclass_of, part_of]\n- Table: part, Columns: [label, description, instance_of, kegg_id, pubchem_substance_id_sid, has_parts]",
        "Response": "Table: natural_product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO head (head_ID, name, born_state, age) VALUES (1, 'Tiger Woods', 'Alabama', 67.0);\nDatabase State:\n- Table: department, Columns: [Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees]\n- Table: Golfers, Columns: [head_ID, name, born_state, age]",
        "Response": "Table: Golfers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO player (Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points) VALUES (6, 'Paul Deacon (c)', 'Scrum Half', 4, 20.0, 3.0, '90/106', 188.0);\nDatabase State:\n- Table: player, Columns: [Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points]\n- Table: club_rank, Columns: [Rank, Club_ID, Gold, Silver, Bronze, Total]\n- Table: club, Columns: [Club_ID, name, Region, Start_year]\n- Table: competition, Columns: [Competition_ID, Year, Competition_type, Country]",
        "Response": "Table: player"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Race_ID, Name, Class, Date, Track_ID) VALUES (5, 'RumBum.com 250', 'DP/GT', 'May 17', '5');\nDatabase State:\n- Table: track, Columns: [Track_ID, Name, Location, Seating, Year_Opened]\n- Table: Races, Columns: [Race_ID, Name, Class, Date, Track_ID]",
        "Response": "Table: Races"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, country, topics_main_category, freebase_id, geonames_id, instance_of, viaf_id, local_dialing_code, image, library_of_congress_authority_id, whos_on_first_id, worldcat_identities_id, national_library_of_israel_j9u_id, postal_code, population) VALUES ('Atlanta', 'capital city of Georgia, United States', 'Atlanta', 'Fulton County', '33.756944444444', 'United States of America', 'Category:Atlanta', '/m/013yq', '4180439.0', 'state or insular area capital of the United States', '130778640', '404.0', 'Atlanta Montage 2.jpg', 'n79023214', '85936429.0', 'lccn-n79023214', '9.870075549515052e+17', '30060', 498715.0);\nDatabase State:\n- Table: the_open_championship, Columns: [label, description, instance_of, sport, winner, location, point_in_time, coordinate_location, freebase_id]",
        "Response": "Table: place_of_birth"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student_Course_Registrations (student_id, course_id, registration_date) VALUES (141, 301, '2008-11-08 10:35:13');\nDatabase State:\n- Table: People_Addresses, Columns: [person_address_id, person_id, address_id, date_from, date_to]\n- Table: Enrollments, Columns: [student_id, course_id, registration_date]",
        "Response": "Table: Enrollments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Crime (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude) VALUES (11456548, 'JB448977', '9/24/2018 14:15', '044XX N LINCOLN AVE', '1345', 'LIBRARY', 'FALSE', 'FALSE', 1911, 19, 47, 4, '14', '41.9623241', '-87.68444327');\nDatabase State:\n- Table: FBI_Code, Columns: [fbi_code_no, title, description, crime_against]\n- Table: Neighborhood, Columns: [neighborhood_name, community_area_no]\n- Table: IUCR, Columns: [iucr_no, primary_description, secondary_description, index_code]\n- Table: Community_Area, Columns: [community_area_no, community_area_name, side, population]\n- Table: Crimes, Columns: [report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude]",
        "Response": "Table: Crimes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (p_id, p_id_dummy) VALUES (45, 211);\nDatabase State:\n- Table: taughtBy, Columns: [course_id, p_id]\n- Table: course, Columns: [course_id, courseLevel]",
        "Response": "Table: advisedBy"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('hypothetical protein smi_0606', 'microbial gene found in Streptococcus mitis B6', 'Streptococcus mitis B6', '8797780', 'gene', 'Hypothetical protein smi_0606', 'smi_0606', 'gene', '549942', 'forward strand', '549490');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: yhch_yjgk_yial_superfamily, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (AnswerText, SurveyID, UserID, QuestionID) VALUES ('0', 2016, 2078, 5);\nDatabase State:\n- Table: Survey, Columns: [SurveyID, Description]\n- Table: Question, Columns: [questiontext, questionid]",
        "Response": "Table: Answer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (university_id, ranking_criteria_id, year, score) VALUES (375, 21, 2015, 45);\nDatabase State:\n- Table: ranking_criteria, Columns: [id, ranking_system_id, criteria_name]\n- Table: country, Columns: [id, country_name]\n- Table: university_year, Columns: [university_id, year, num_students, student_staff_ratio, pct_international_students, pct_female_students]\n- Table: university, Columns: [id, country_id, university_name]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of, transporter_classification_database_id) VALUES ('Glutamate/sodium ion symporter GltS PA3176', 'microbial protein found in Pseudomonas aeruginosa PAO1', 'glutamate/sodium ion symporter GltS PA3176', 'Q9HZ58', 'membrane', 'Pseudomonas aeruginosa PAO1', 'NP_251866', 'protein', 'Sodium/glutamate symport carrier protein GltS', '2.A.27.1.3');\nDatabase State:\n- Table: Proteins, Columns: [label, description, encoded_by, uniprot_protein_id, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of, transporter_classification_database_id]\n- Table: cellular_component, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]",
        "Response": "Table: Proteins"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SeasonStatus (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS) VALUES (11547, '1999-2000', 'Victoriaville Tigres', 'QMJHL', 'Regular Season', 69, 49, 76, 125, 97, 3);\nDatabase State:\n- Table: PlayerSeasonStats, Columns: [ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS]",
        "Response": "Table: PlayerSeasonStats"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO category_for_films_shot_at_this_location (label, description, instance_of, category_combines_topics, category_contains) VALUES ('Category:Films shot in the 17th arrondissement of Paris', 'Wikimedia category', 'Wikimedia category', 'filming location', 'film');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: category_for_films_shot_at_this_location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO orthology (label, description, entrez_gene_id, subclass_of, ensembl_gene_id, homologene_id, chromosome, found_in_taxon, refseq_rna_id, ensembl_transcript_id, encodes, ortholog, exact_match, strand_orientation, instance_of, cytogenetic_location, genomic_start, genomic_end, expressed_in) VALUES ('Slc35b2', 'protein-coding gene in the species Rattus norvegicus', '501103.0', 'protein-coding gene', 'ENSRNOG00000019900', '24504.0', 'Rattus norvegicus chromosome 9', 'brown rat', 'NM_001037215', 'ENSRNOT00000026929', 'Solute carrier family 35 member B2', 'Slc35b2', 'http://identifiers.org/ncbigene/501103', 'reverse strand', 'gene', '9q12', '15438594', '15442234', 'pancreas');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, ensembl_gene_id, ensembl_transcript_id, homologene_id, refseq_rna_id, ortholog, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, chromosome, instance_of, expressed_in]\n- Table: chromosome, Columns: [label, description, refseq_genome_id, found_in_taxon, instance_of]\n- Table: encodes, Columns: [label, description, ensembl_protein_id, found_in_taxon, uniprot_protein_id, encoded_by, refseq_protein_id, biological_process, cell_component, molecular_function, instance_of, part_of]\n- Table: expressed_in, Columns: [label, description, foundational_model_of_anatomy_id, instance_of, uberon_id, subclass_of]\n- Table: uaa_transporter, Columns: [label, description, ensembl_protein_id, uniprot_protein_id, encoded_by, biological_process, molecular_function, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: orthology, Columns: [label, description, entrez_gene_id, subclass_of, ensembl_gene_id, homologene_id, chromosome, found_in_taxon, refseq_rna_id, ensembl_transcript_id, encodes, ortholog, exact_match, strand_orientation, instance_of, cytogenetic_location, genomic_start, genomic_end, expressed_in]",
        "Response": "Table: orthology"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, found_in_taxon, subclass_of, biological_process, instance_of, refseq_protein_id, part_of) VALUES ('SMF family protein SSUBM407_0930', 'microbial protein found in Streptococcus suis BM407', 'SMF family protein SSUBM407_0930', 'A0A0H3MVL6', 'Streptococcus suis BM407', 'protein', 'DNA mediated transformation', 'protein', 'YP_003028674', 'DNA recombination-mediator protein A');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: dna_recombination_mediator_protein_a"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO membership_register_branch (Member_ID, Branch_ID, Register_Year) VALUES (1, '1', '2016');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: membership_register_branch"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO topic (label, description, instance_of, start_time, end_time, gnd_id, commons_category, topics_main_category, freebase_id, image, location, library_of_congress_authority_id, participant, encyclop\u00e6dia_britannica_online_id, part_of, nkcr_aut_id, national_library_of_israel_j9u_id) VALUES ('World War III', 'hypothetical future global conflict', 'logical possibility', 'nan', 'nan', '4189592-7', 'World War III', 'Category:World War III', '/m/0hc1g', 'Operation Castle - Romeo 001.jpg', 'nan', 'sh85148541', 'nan', 'nan', 'nan', 'nan', '987007529752505171');\nDatabase State:\n- Table: war_in_popular_culture, Columns: [label, description, instance_of, main_subject, subclass_of]\n- Table: HistoricalEvents, Columns: [label, description, instance_of, start_time, end_time, gnd_id, commons_category, topics_main_category, freebase_id, image, location, library_of_congress_authority_id, participant, encyclop\u00e6dia_britannica_online_id, part_of, nkcr_aut_id, national_library_of_israel_j9u_id]",
        "Response": "Table: HistoricalEvents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, games_id, person_id, age) VALUES (64164, 25, 48647, 20);\nDatabase State:\n- Table: games_city, Columns: [games_id, city_id]\n- Table: person_region, Columns: [person_id, region_id]\n- Table: games, Columns: [id, games_year, games_name, season]\n- Table: Competitors, Columns: [id, games_id, person_id, age]\n- Table: city, Columns: [id, city_name]\n- Table: competitor_event, Columns: [event_id, competitor_id, medal_id]",
        "Response": "Table: Competitors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO City (ID, Name, CountryCode, District, Population) VALUES (226, 'Teresina', 'BRA', 'Piau\u00ed', 691942);\nDatabase State:\n- Table: CountryLanguage, Columns: [CountryCode, Language, IsOfficial, Percentage]\n- Table: Cities, Columns: [ID, Name, CountryCode, District, Population]\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
        "Response": "Table: Cities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, found_in_taxon, instance_of, ensembl_gene_id, refseq_rna_id, encodes) VALUES ('isp-1', 'protein-coding gene in the species Caenorhabditis elegans', '177609', 'Caenorhabditis elegans', 'gene', 'WBGene00002162', 'NM_068960', 'Cytochrome b-c1 complex subunit Rieske, mitochondrial CELE_F42G8.12');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, found_in_taxon, instance_of, ensembl_gene_id, refseq_rna_id, encodes]\n- Table: cytochrome_bc1_complex_subunit_rieske_transmembrane_domain_superfamily, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, part_of, instance_of, ensembl_protein_id, refseq_protein_id]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO course (Course_ID, Staring_Date, Course) VALUES (6, '11 May', 'Geography');\nDatabase State:\n- Table: Courses, Columns: [Course_ID, Staring_Date, Course]",
        "Response": "Table: Courses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (People_ID, Name, Height, Weight, Home_Town) VALUES (4, 'Rob Cunningham', 6.799999999999999823, 215.0, 'Westport, CT');\nDatabase State:\n- Table: Residents, Columns: [People_ID, Name, Height, Weight, Home_Town]\n- Table: perpetrator, Columns: [Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured]",
        "Response": "Table: Residents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('hypothetical protein SAOUHSC_00484', 'microbial gene found in Staphylococcus aureus subsp. aureus NCTC 8325', 'Staphylococcus aureus subsp. aureus NCTC 8325', '3920342', 'gene', 'Hypothetical protein SAOUHSC_00484', 'SAOUHSC_00484', 'gene', '482590', 'forward strand', '481295');\nDatabase State:\n- Table: trnaile_lysidine_synthase_n_terminal_domain_protein_family, Columns: [label, description, encoded_by, subclass_of, found_in_taxon, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, instance_of, refseq_protein_id, part_of]\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: natural_product, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Customer_ID, Customer_Details) VALUES (588, 'Dayana Robel');\nDatabase State:\n- Table: Claims_Documents, Columns: [Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date]\n- Table: Subscribers, Columns: [Customer_ID, Customer_Details]\n- Table: Claims_Processing_Stages, Columns: [Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description]\n- Table: Staff, Columns: [Staff_ID, Staff_Details]\n- Table: Policies, Columns: [Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date]",
        "Response": "Table: Subscribers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO natural_product (label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number) VALUES ('Neisseria gonorrhoeae FA 1090', 'bacterial strain', 'Neisseria gonorrhoeae FA 1090', 'Neisseria gonorrhoeae', '242231', 'strain', 'Gram-negative bacteria', 'GCA_000006845.1');\nDatabase State:\n- Table: Microorganisms, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, genomic_end, strand_orientation, instance_of, genomic_start]\n- Table: tyrosine_recombinase_xerd, Columns: [label, description, uniprot_protein_id, found_in_taxon, refseq_protein_id, encoded_by, subclass_of, has_parts, cell_component, molecular_function, biological_process, part_of, instance_of]",
        "Response": "Table: Microorganisms"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, sex_or_gender, date_of_birth, place_of_birth, name_in_native_language, commons_category, image, member_of_political_party, occupation, position_held, country_of_citizenship, educated_at, viaf_id) VALUES ('Letsie III of Lesotho', 'King of Lesotho', 'human', 'male', '+1963-07-17T00:00:00Z', 'Morija', 'nan', 'Letsie III of Lesotho', 'Letsie III.jpg', 'nan', 'sovereign', 'King of Lesotho', 'Lesotho', 'Wolfson College', '309840670');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, country, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, freebase_id, inaturalist_place_id, geonames_id]\n- Table: country, Columns: [label, description, dewey_decimal_classification, continent, capital, instance_of, shares_border_with, head_of_state, official_language, currency, top_level_internet_domain, flag_image, anthem, flag, iso_3166_1_alpha_2_code, iso_3166_1_alpha_3_code, iso_3166_1_numeric_code, commons_category, coat_of_arms_image, head_of_government, coordinate_location, contains_the_administrative_territorial_entity, member_of, topics_main_category, locator_map_image, page_banner, coat_of_arms, country_calling_code, ndl_authority_id, curlie_id, ioc_country_code, musicbrainz_area_id, country, freebase_id, fips_10_4_countries_and_regions, highest_point, geonames_id, gnd_id, category_for_people_who_died_here, located_in_time_zone, category_for_films_shot_at_this_location, category_of_associated_people, population, diplomatic_relation, topics_main_wikimedia_portal, commons_gallery, lowest_point, mobile_country_code, demonym, driving_side, geography_of_topic, mains_voltage, electrical_plug_type, legislative_body, history_of_topic, encyclop\u00e6dia_britannica_online_id, coordinates_of_northernmost_point, new_york_times_topic_id, area, human_development_index, quora_topic_id, insee_countries_and_foreign_territories_code, short_name, le_monde_diplomatique_subject_id, unesco_thesaurus_id, coordinates_of_southernmost_point, coordinates_of_easternmost_point, coordinates_of_westernmost_point, office_held_by_head_of_government, yso_id, getty_thesaurus_of_geographic_names_id, stw_thesaurus_for_economics_id, openstreetmap_relation_id, licence_plate_code, us_national_archives_identifier, subreddit, gacs_id, encyclop\u00e6dia_universalis_id, mesh_descriptor_id, gran_enciclop\u00e8dia_catalana_id, office_held_by_head_of_state, has_quality, total_fertility_rate, motto_text, maritime_identification_digits, great_russian_encyclopedia_online_id, wikimedia_outline, civicus_monitor_country_entry, geoshape, brockhaus_enzyklop\u00e4die_online_id, isni, ituisoiec_object_identifier, archinform_location_id, national_library_of_israel_id_old, idref_id, biblioth\u00e8que_nationale_de_france_id, viaf_id, life_expectancy, nkcr_aut_id, statoids_id, itu_letter_code, wipo_st3, inception, asc_leiden_thesaurus_id, emergency_phone_number, unicode_character, iab_code, klexikon_article_id, library_of_congress_authority_id, loc_and_marc_vocabularies_id, part_of, official_name, language_used, comic_vine_id, whos_on_first_id, treccanis_dizionario_di_storia_id, omegawiki_defined_meaning, hds_id, pronunciation_audio, culture, geonlp_id, category_for_maps, french_vikidia_id, spanish_vikidia_id, eurovoc_id, worldcat_identities_id, kbpedia_id, bti_status_index, bti_governance_index, rkd_thesaurus_id, interlingual_index_id, tasteatlas_id, economy_of_topic, uk_parliament_thesaurus_id, wordnet_31_synset_id, demographics_of_topic, inaturalist_place_id, krugosvet_article, idaigazetteer_id, the_world_factbook_country_id, national_library_of_israel_j9u_id, store_norske_leksikon_id, democracy_index, catalan_vikidia_id, museum_digital_place_id, ysa_id, yle_topic_id, postimees_topic_id, den_store_danske_id, bbc_news_topic_id, m49_code, online_pwn_encyclopedia_id, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, central_bank, hashtag, on_focus_list_of_wikimedia_project, gini_coefficient, obo_gazetteer_id, openstreetmap_element, namuwiki_id, official_website, bbc_things_id, fast_id, dr_topic_id, native_label]\n- Table: place_of_birth, Columns: [label, description, country, coordinate_location, freebase_id, located_in_the_administrative_territorial_entity, instance_of, geonames_id, whos_on_first_id]\n- Table: economy_of_africa, Columns: [label, description, topics_main_category, instance_of, commons_category, quora_topic_id, location, country, subclass_of, inflation_rate, nominal_gdp, nominal_gdp_per_capita, ppp_gdp_per_capita, gdp_ppp, real_gdp_growth_rate, store_norske_leksikon_id]\n- Table: physical_location, Columns: [label, description, dewey_decimal_classification, continent, capital, instance_of, shares_border_with, head_of_state, official_language, currency, top_level_internet_domain, flag_image, anthem, flag, iso_3166_1_alpha_2_code, iso_3166_1_alpha_3_code, iso_3166_1_numeric_code, commons_category, coat_of_arms_image, head_of_government, coordinate_location, contains_the_administrative_territorial_entity, member_of, topics_main_category, locator_map_image, page_banner, coat_of_arms, country_calling_code, ndl_authority_id, curlie_id, ioc_country_code, musicbrainz_area_id, country, freebase_id, fips_10_4_countries_and_regions, highest_point, geonames_id, gnd_id, category_for_people_who_died_here, located_in_time_zone, category_for_films_shot_at_this_location, category_of_associated_people, population, diplomatic_relation, topics_main_wikimedia_portal, commons_gallery, lowest_point, mobile_country_code, demonym, driving_side, geography_of_topic, mains_voltage, electrical_plug_type, legislative_body, history_of_topic, encyclop\u00e6dia_britannica_online_id, coordinates_of_northernmost_point, new_york_times_topic_id, area, human_development_index, quora_topic_id, insee_countries_and_foreign_territories_code, short_name, le_monde_diplomatique_subject_id, unesco_thesaurus_id, coordinates_of_southernmost_point, coordinates_of_easternmost_point, coordinates_of_westernmost_point, office_held_by_head_of_government, yso_id, getty_thesaurus_of_geographic_names_id, stw_thesaurus_for_economics_id, openstreetmap_relation_id, licence_plate_code, us_national_archives_identifier, subreddit, gacs_id, encyclop\u00e6dia_universalis_id, mesh_descriptor_id, gran_enciclop\u00e8dia_catalana_id, office_held_by_head_of_state, has_quality, total_fertility_rate, motto_text, maritime_identification_digits, great_russian_encyclopedia_online_id, wikimedia_outline, civicus_monitor_country_entry, geoshape, brockhaus_enzyklop\u00e4die_online_id, isni, ituisoiec_object_identifier, archinform_location_id, national_library_of_israel_id_old, idref_id, biblioth\u00e8que_nationale_de_france_id, viaf_id, life_expectancy, nkcr_aut_id, statoids_id, itu_letter_code, wipo_st3, inception, asc_leiden_thesaurus_id, emergency_phone_number, unicode_character, iab_code, klexikon_article_id, library_of_congress_authority_id, loc_and_marc_vocabularies_id, part_of, official_name, language_used, comic_vine_id, whos_on_first_id, treccanis_dizionario_di_storia_id, omegawiki_defined_meaning, hds_id, pronunciation_audio, culture, geonlp_id, category_for_maps, french_vikidia_id, spanish_vikidia_id, eurovoc_id, worldcat_identities_id, kbpedia_id, bti_status_index, bti_governance_index, rkd_thesaurus_id, interlingual_index_id, tasteatlas_id, economy_of_topic, uk_parliament_thesaurus_id, wordnet_31_synset_id, demographics_of_topic, inaturalist_place_id, krugosvet_article, idaigazetteer_id, the_world_factbook_country_id, national_library_of_israel_j9u_id, store_norske_leksikon_id, democracy_index, catalan_vikidia_id, museum_digital_place_id, ysa_id, yle_topic_id, postimees_topic_id, den_store_danske_id, bbc_news_topic_id, m49_code, online_pwn_encyclopedia_id, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, central_bank, hashtag, on_focus_list_of_wikimedia_project, gini_coefficient, obo_gazetteer_id, openstreetmap_element, namuwiki_id, official_website, bbc_things_id, fast_id, dr_topic_id, native_label]\n- Table: Leaders, Columns: [label, description, instance_of, sex_or_gender, date_of_birth, place_of_birth, name_in_native_language, commons_category, image, member_of_political_party, occupation, position_held, country_of_citizenship, educated_at, viaf_id]",
        "Response": "Table: Leaders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO facet_of (label, description, subclass_of, topics_main_category, commons_category, freebase_id, library_of_congress_authority_id, image, practiced_by) VALUES ('association football', 'sport that is practiced between two teams of eleven players', 'football codes', 'Category:Association football', 'Association football', '/m/02vx4', 'sh85123840', 'Football in Bloomington, Indiana, 1996.jpg', 'association football player');\nDatabase State:\n- Table: field_of_work, Columns: [label, description, commons_category, bncf_thesaurus_id, topics_main_category, freebase_id, subclass_of, library_of_congress_authority_id, quora_topic_id, jstor_topic_id, image, uses, gnd_id, practiced_by, yso_id, national_library_of_israel_j9u_id, nkcr_aut_id, on_focus_list_of_wikimedia_project, openstreetmap_tag_or_key, instance_of, kbpedia_id]\n- Table: use, Columns: [label, description, subclass_of, freebase_id, commons_category, image]",
        "Response": "Table: facet_of"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO chip_model (Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth) VALUES ('X3 Basic', 2003.0, 32.0, 32.0, '1SD', 'No', 'No');\nDatabase State:\n- Table: phone, Columns: [Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode]\n- Table: screen_mode, Columns: [Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type]",
        "Response": "Table: chip_model"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Party_Forms (party_id, form_id, date_completion_started, form_status_code, date_fully_completed) VALUES (9, 2, '2017-11-27 11:57:03', 'Completed', '2018-02-15 13:15:25');\nDatabase State:\n- Table: PartyFormSubmissions, Columns: [party_id, form_id, date_completion_started, form_status_code, date_fully_completed]\n- Table: Services, Columns: [service_id, service_type_code, service_name, service_descriptio]\n- Table: Addresses, Columns: [address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country]\n- Table: Organizations, Columns: [organization_id, date_formed, organization_name, uk_vat_number]\n- Table: Parties, Columns: [party_id, payment_method_code, party_phone, party_email]\n- Table: Individuals, Columns: [individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name]\n- Table: Party_Addresses, Columns: [party_id, address_id, date_address_from, address_type_code, date_address_to]",
        "Response": "Table: PartyFormSubmissions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, molecular_function, biological_process, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('50S ribosomal protein L11 TTHA0247', 'microbial protein found in Thermus thermophilus HB8', '50S ribosomal protein L11 TTHA0247', 'Q5SLP6', 'RNA binding', 'protein biosynthesis', 'ribosome', 'Ribosomal protein L11, N-terminal', 'Thermus thermophilus HB8', 'YP_143513', 'protein', 'Ribosomal protein L11/L12, N-terminal domain superfamily', 'protein');\nDatabase State:\n- Table: ribosomal_protein_l11_conserved_site_protein_family, Columns: [label, description, encoded_by, uniprot_protein_id, molecular_function, biological_process, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: ribosomal_protein_l11_conserved_site_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference) VALUES (1, 'University of Delaware', 'Newark, DE', 1743.0, 'Public', 19067.0, 'Fightin'' Blue Hens', 'Colonial Athletic Association ( D-I )');\nDatabase State:\n- Table: Universities, Columns: [School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]\n- Table: basketball_match, Columns: [Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "Response": "Table: Universities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Shop_ID, Device_ID, Quantity) VALUES (1, 4, 200);\nDatabase State:\n- Table: shop, Columns: [Shop_ID, Shop_Name, Location, Open_Date, Open_Year]\n- Table: stock, Columns: [Shop_ID, Device_ID, Quantity]",
        "Response": "Table: stock"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost) VALUES ('SO - 0001711', 'Distributor', 'WARE-PUJ1005', '7/19/18', '12/9/18', '12/23/18', '12/31/18', 'USD', 24, 36, 313, 7, 3, 0.05000000000000000277, '1,038.50', '768.49');\nDatabase State:\n- Table: Products, Columns: [ProductID, Product_Name]\n- Table: Sales_Team, Columns: [SalesTeamID, Sales_Team, Region]\n- Table: Regions, Columns: [StateCode, State, Region]\n- Table: Customers, Columns: [CustomerID, Customer_Names]\n- Table: Store_Locations, Columns: [StoreID, City_Name, County, StateCode, State, Type, Latitude, Longitude, AreaCode, Population, Household_Income, Median_Income, Land_Area, Water_Area, Time_Zone]",
        "Response": "Table: Sales_Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, course_id, sec_id, semester, year, grade) VALUES ('14596', '242', '1', 'Fall', 2009, 'C+');\nDatabase State:\n- Table: Enrollments, Columns: [ID, course_id, sec_id, semester, year, grade]\n- Table: classroom, Columns: [building, room_number, capacity]\n- Table: time_slot, Columns: [time_slot_id, day, start_hr, start_min, end_hr, end_min]\n- Table: section, Columns: [course_id, sec_id, semester, year, building, room_number, time_slot_id]\n- Table: department, Columns: [dept_name, building, budget]",
        "Response": "Table: Enrollments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, category, person, role, credited) VALUES ('S20-E15', 'Produced by', 'Tom Gammill', 'producer', 'true');\nDatabase State:\n- Table: Character_Award, Columns: [award_id, character]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, person, role, episode_id, season, song, result]\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Episode, Columns: [episode_id, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Keyword, Columns: [episode_id, keyword]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, performer, record_label, instance_of, musicbrainz_release_group_id, discogs_master_id, genre, followed_by, spotify_album_id, follows, distribution_format, publication_date, form_of_creative_work, part_of, apple_music_album_id_us_version, deezer_album_id, genius_album_id, youtube_playlist_id) VALUES ('0.9', 'album by Booba', 'Booba', 'Tallac Records', 'album', '1f6a9089-3515-3bc3-b18c-560c0e6e2de3', '97153.0', 'French hip hop', 'Autopsie Vol. 3', '4kvVqavqTyVWqXURC0fRqF', 'Autopsie Vol. 2', 'music streaming', '+2008-11-24T00:00:00Z', 'studio album', 'Booba discography', '1443769059.0', '684714.0', 'Booba/0-9', 'OLAK5uy_kzru_DHIEHjA4o22GZHfXGsxf5cxGzqqI');\nDatabase State:\n- Table: MusicReleases, Columns: [label, description, performer, record_label, instance_of, musicbrainz_release_group_id, discogs_master_id, genre, followed_by, spotify_album_id, follows, distribution_format, publication_date, form_of_creative_work, part_of, apple_music_album_id_us_version, deezer_album_id, genius_album_id, youtube_playlist_id]",
        "Response": "Table: MusicReleases"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Quantity (quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional) VALUES (4276, 1081, 3550, 1.5, 1.25, 'pound(s)', NULL, 'FALSE');\nDatabase State:\n- Table: Quantity, Columns: [quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional]",
        "Response": "Table: Quantity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, located_in_the_administrative_territorial_entity, coat_of_arms_image, capital, commons_category, coordinate_location, topics_main_category, instance_of, freebase_id, geonames_id, category_of_associated_people, openstreetmap_relation_id, official_website, shares_border_with, area, locator_map_image, population, inaturalist_place_id) VALUES ('Croatia', 'country in Central and Southeastern Europe', 'Croatia', 'nan', 'Coat of arms of Croatia.svg', 'Zagreb', 'Croatia', '45.25', 'Category:Croatia', 'sovereign state', '/m/01pj7', '3202326.0', 'Category:Croatian people', '214885.0', 'http://www.vlada.hr', 'Liberland', 56594.0, 'EU-Croatia.svg', 3871833.0, '8196.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1009, 'Tai', 'Eric', 19, 'M', 600, 2192, 'YYZ');\nDatabase State:\n- Table: Pets, Columns: [PetID, PetType, pet_age, weight]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Has_Pet, Columns: [StuID, PetID]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, commons_category, numeric_value, unicode_character, kit_linked_open_numbers_id, prime_factor, pronunciation_audio, number_of_decimal_digits, code, omegawiki_defined_meaning, babelnet_id) VALUES ('32', 'natural number', 'natural number', '32 (number)', 32.0, '\u325c', '32', '2.0', 'LL-Q150 (fra)-Guilhelma-32.wav', 2.0, '\u0be9\u0bf0\u0be8', '7056.0', '03113924n');\nDatabase State:\n- Table: Numbers, Columns: [label, description, instance_of, commons_category, numeric_value, unicode_character, kit_linked_open_numbers_id, prime_factor, pronunciation_audio, number_of_decimal_digits, code, omegawiki_defined_meaning, babelnet_id]",
        "Response": "Table: Numbers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Course_Authors_and_Tutors (author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1) VALUES (6, '817', 'al75', 'e96c0bcbbbb14747747a56ff4c17354f343a5b4f', 'Adolf', 'Keira', 'Rohan', '1', replace('92220 Hellen Skyway Apt. 635\\nRennerview, MS 81036','\\n',char(10)));\nDatabase State:\n- Table: Authors, Columns: [author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1]",
        "Response": "Table: Authors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, topics_main_category, instance_of, country, applies_to_jurisdiction, has_parts, freebase_id) VALUES ('Government of Kerala', 'Government for the Indian state of Kerala', 'Category:Government of Kerala', 'state government', 'India', 'Kerala', 'Council of Ministers of Kerala', '/m/03cdk4y');\nDatabase State:\n- Table: StateGovernments, Columns: [label, description, topics_main_category, instance_of, country, applies_to_jurisdiction, has_parts, freebase_id]\n- Table: governing_body, Columns: [label, description, instance_of, country, has_parts, different_from, applies_to_jurisdiction]",
        "Response": "Table: StateGovernments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Ball_by_Ball (Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler) VALUES (829788, 1, 8, 2, 7, 6, 3, 17, 400, 15);\nDatabase State:\n- Table: Batting_Style, Columns: [Batting_Id, Batting_hand]\n- Table: Player, Columns: [Player_Id, Player_Name, DOB, Batting_hand, Bowling_skill, Country_Name]\n- Table: City, Columns: [City_Id, City_Name, Country_id]\n- Table: Season, Columns: [Season_Id, Man_of_the_Series, Orange_Cap, Purple_Cap, Season_Year]\n- Table: Extra_Type, Columns: [Extra_Id, Extra_Name]\n- Table: Wicket_Taken, Columns: [Match_Id, Over_Id, Ball_Id, Player_Out, Kind_Out, Fielders, Innings_No]",
        "Response": "Table: Ball_by_Ball"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO pilot (Pilot_Id, Name, Age) VALUES (6, 'Elisha Hickle V', 37);\nDatabase State:\n- Table: aircraft, Columns: [Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
        "Response": "Table: pilot"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Dish (id, name, description, menus_appeared, times_appeared, first_appeared, last_appeared, lowest_price, highest_price) VALUES (10145, 'Cold Viands', NULL, 3, 3, 1900, 1900, 0.0, 0.0);\nDatabase State:\n- Table: MenuPage, Columns: [id, menu_id, page_number, image_id, full_height, full_width, uuid]\n- Table: Menu, Columns: [id, name, sponsor, event, venue, place, physical_description, occasion, notes, call_number, keywords, language, date, location, location_type, currency, currency_symbol, status, page_count, dish_count]",
        "Response": "Table: Dish"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, coordinate_location, country, located_in_the_administrative_territorial_entity, image, instance_of, heritage_designation) VALUES ('Train stop Kurort Jonsdorf Haltestelle', 'nan', 'Kurort Jonsdorf Haltestelle', '50.861964', 'Germany', 'Jonsdorf', 'Schmalspurbahn-Haltestelle Jonsdorf (2).jpg', 'station building', 'cultural heritage monument in Germany');\nDatabase State:\n- Table: Heritage_Waiting_Rooms, Columns: [label, description, commons_category, coordinate_location, country, located_in_the_administrative_territorial_entity, image, instance_of, heritage_designation]",
        "Response": "Table: Heritage_Waiting_Rooms"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO phone (Name, Phone_ID, Memory_in_G, Carrier, Price) VALUES ('IPhone 6s', 2, 128, 'TMobile', 699.0);\nDatabase State:\n- Table: phone_market, Columns: [Market_ID, Phone_ID, Num_of_stock]\n- Table: Phones, Columns: [Name, Phone_ID, Memory_in_G, Carrier, Price]",
        "Response": "Table: Phones"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (index, id, tag) VALUES (130334, 62066, 'freely.available');\nDatabase State:\n- Table: torrents, Columns: [groupName, totalSnatched, artist, groupYear, releaseType, groupId, id]",
        "Response": "Table: tags"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of) VALUES ('hypothetical protein SSUBM407_0471a', 'microbial gene found in Streptococcus suis BM407', '8154814', 'gene', 'Hypothetical protein SSUBM407_0471a', 'Streptococcus suis BM407', 'forward strand', '524038.0', '523847.0', 'gene');\nDatabase State:\n- Table: Genes, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of]\n- Table: tsp_type_3_repeat, Columns: [label, description, uniprot_protein_id, encoded_by, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO orders (orderNumber, orderDate, requiredDate, shippedDate, status, comments, customerNumber) VALUES (10417, '2005-05-13', '2005-05-19', '2005-05-19', 'Disputed', 'Customer doesn''t like the colors and precision of the models.', 141);\nDatabase State:\n- Table: CustomerOrders, Columns: [orderNumber, orderDate, requiredDate, shippedDate, status, comments, customerNumber]",
        "Response": "Table: CustomerOrders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO male (name) VALUES ('student835');\nDatabase State:\n- Table: filed_for_bankrupcy, Columns: [name]\n- Table: unemployed, Columns: [name]\n- Table: Students, Columns: [name]\n- Table: enrolled, Columns: [name, school, month]\n- Table: longest_absense_from_school, Columns: [name, month]\n- Table: disabled, Columns: [name]",
        "Response": "Table: Students"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Document_ID, Template_ID, Document_Name, Document_Description, Other_Details) VALUES (82, 11, 'Data base', 'w', NULL);\nDatabase State:\n- Table: Ref_Template_Types, Columns: [Template_Type_Code, Template_Type_Description]\n- Table: Templates, Columns: [Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details]\n- Table: Paragraphs, Columns: [Paragraph_ID, Document_ID, Paragraph_Text, Other_Details]",
        "Response": "Table: Documents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, population, geonames_id, gnd_id, licence_plate_code, country, bavarikon_id, coat_of_arms_image, german_municipality_key, viaf_id, freebase_id, official_website, openstreetmap_relation_id, topics_main_category, locator_map_image, area, archinform_location_id, local_dialing_code, commons_category, elevation_above_sea_level, instance_of, coordinate_location, located_in_the_administrative_territorial_entity, postal_code, image, whos_on_first_id, factgrid_item_id, located_in_time_zone, german_regional_key, part_of) VALUES ('Eisenberg', 'municipality of Germany', 1216.0, '2931550', '4014061-1', 'OAL', 'Germany', 'ODB_A00000730', 'Wappen von Eisenberg (Schwaben).svg', '9777125.0', '236783921.0', '/m/02q642z', 'https://www.eisenberg-allgaeu.de/', '448305.0', 'Category:Eisenberg (Allg\u00e4u)', 'Eisenberg in OAL.svg', 13.58000000000000007, '14069.0', '8364.0', 'Eisenberg (Allg\u00e4u)', 818.0, 'non-urban municipality of Germany', '47.6', 'Ostallg\u00e4u', '87637', 'Ballonfahrt 140713 - Eisenberg, OAL - Speiden v SO.JPG', '101853723', 'Q84534', 'UTC+01:00', '97775756125.0', 'Verwaltungsgemeinschaft Seeg');\nDatabase State:\n- Table: part, Columns: [label, description, coordinate_location, country, instance_of, located_in_the_administrative_territorial_entity]\n- Table: Municipalities, Columns: [label, description, population, geonames_id, gnd_id, licence_plate_code, country, bavarikon_id, coat_of_arms_image, german_municipality_key, viaf_id, freebase_id, official_website, openstreetmap_relation_id, topics_main_category, locator_map_image, area, archinform_location_id, local_dialing_code, commons_category, elevation_above_sea_level, instance_of, coordinate_location, located_in_the_administrative_territorial_entity, postal_code, image, whos_on_first_id, factgrid_item_id, located_in_time_zone, german_regional_key, part_of]\n- Table: plague_pit, Columns: [label, description, country, instance_of, located_in_the_administrative_territorial_entity, heritage_designation, coordinate_location]",
        "Response": "Table: Municipalities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Name, Country, Province, Population, Longitude, Latitude) VALUES ('Novomoskovsk', 'R', 'Tulskaya oblast', 144000, NULL, NULL);\nDatabase State:\n- Table: geo_estuary, Columns: [River, Country, Province]\n- Table: politics, Columns: [Country, Independence, Dependent, Government]\n- Table: desert, Columns: [Name, Area, Longitude, Latitude]\n- Table: geo_source, Columns: [River, Country, Province]\n- Table: mountain, Columns: [Name, Mountains, Height, Type, Longitude, Latitude]\n- Table: mergesWith, Columns: [Sea1, Sea2]\n- Table: lake, Columns: [Name, Area, Depth, Altitude, Type, River, Longitude, Latitude]\n- Table: target, Columns: [Country, Target]\n- Table: island, Columns: [Name, Islands, Area, Height, Type, Longitude, Latitude]\n- Table: language, Columns: [Country, Name, Percentage]\n- Table: located, Columns: [City, Province, Country, River, Lake, Sea]\n- Table: geo_river, Columns: [River, Country, Province]\n- Table: economy, Columns: [Country, GDP, Agriculture, Service, Industry, Inflation]\n- Table: ethnicGroup, Columns: [Country, Name, Percentage]\n- Table: borders, Columns: [Country1, Country2, Length]\n- Table: islandIn, Columns: [Island, Sea, Lake, River]\n- Table: encompasses, Columns: [Country, Continent, Percentage]\n- Table: geo_island, Columns: [Island, Country, Province]\n- Table: city, Columns: [Name, Country, Province, Population, Longitude, Latitude]",
        "Response": "Table: city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, copyright_license, copyright_status) VALUES ('Any Video Converter', 'Video converter by Anvsoft', 'file converter', 'nan', 'nan');\nDatabase State:\n- Table: license, Columns: [label, description, approved_by, spdx_license_id, short_name, topics_main_template, instance_of]",
        "Response": "Table: file_converter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, ParagraphNum, PlainText, character_id, chapter_id) VALUES (642085, 331, 'What she says I''ll confirm: we''ll fight it out.', 238, 18963);\nDatabase State:\n- Table: works, Columns: [id, Title, LongTitle, Date, GenreType]\n- Table: chapters, Columns: [id, Act, Scene, Description, work_id]\n- Table: characters, Columns: [id, CharName, Abbrev, Description]\n- Table: book_text, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]",
        "Response": "Table: book_text"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO file_converter (label, description, instance_of, copyright_license, copyright_status) VALUES ('dcraw', 'Decoding raw digital photos in Linux', 'application', 'donationware', 'copyrighted');\nDatabase State:\n- Table: SoftwareConverters, Columns: [label, description, instance_of, copyright_license, copyright_status]\n- Table: license, Columns: [label, description, approved_by, spdx_license_id, short_name, topics_main_template, instance_of]",
        "Response": "Table: SoftwareConverters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, sex_or_gender, commons_category, date_of_birth, occupation, instance_of, image, country_of_citizenship, participant_in, given_name, sport, place_of_birth, cq_ranking_male_cyclist_id, cycling_archives_cyclist_id, procyclingstats_cyclist_id, member_of_sports_team, family_name, firstcycling_rider_id, uci_rider_id) VALUES ('Em\u012bls Liepi\u0146\u0161', 'Latvian cyclist', 'male', 'Em\u012bls Liepi\u0146\u0161', '+1992-10-29T00:00:00Z', 'sport cyclist', 'human', 'Emils Liepins \u2013 2019 Tour of Austria \u2013 3rd stage.jpg', 'Latvia', '2020 UCI World Ranking', 'Em\u012bls', 'road bicycle racing', 'Dobele', '18296.0', '53769', '131659', 'Rietumu-Delfin', 'Liepi\u0146\u0161', '8813.0', '75275');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, country, coordinate_location, locator_map_image, located_in_the_administrative_territorial_entity, area, population, geonames_id]\n- Table: baltic_chain_tour, Columns: [label, description, sport, instance_of, follows, followed_by, edition_number, start_time, end_time, winner, country, subclass_of]",
        "Response": "Table: winner"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option) VALUES ('707', 'MTV Dance', 'United Kingdom', 'English', 'music', '16:9', 'no', 'no', 'Sky Famiglia');\nDatabase State:\n- Table: TV_series, Columns: [id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel]\n- Table: TV_Channels, Columns: [id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option]",
        "Response": "Table: TV_Channels"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (REFID, REF_DATE, RESPONSE) VALUES (97935, '2007-07-01 12:00:00.0', 'false');\nDatabase State:\n- Table: mailing_responses, Columns: [REFID, REF_DATE, RESPONSE]",
        "Response": "Table: mailing_responses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO representative (Representative_ID, Name, State, Party, Lifespan) VALUES (6, 'Jack Quinn', 'New York', 'Republican', '1951\u2013');\nDatabase State:\n- Table: election, Columns: [Election_ID, Representative_ID, Date, Votes, Vote_Percent, Seats, Place]",
        "Response": "Table: representative"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO culture_company (Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id) VALUES ('Dragonair', 'Subsidiary', 'Hong Kong', 100.0, '5', '7');\nDatabase State:\n- Table: culture_company, Columns: [Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id]",
        "Response": "Table: culture_company"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO citation (label, description, pages, title, author_name_string, publication_date, issue, volume, published_in, instance_of, pubmed_id, doi, language_of_work_or_name) VALUES ('Specific associations of fluorescent beta-2-microglobulin with cell surfaces. The affinity of different H-2 and HLA antigens for beta-2-microglobulin', 'scientific article', '2322-9', 'Specific associations of fluorescent beta-2-microglobulin with cell surfaces. The affinity of different H-2 and HLA antigens for beta-2-microglobulin', 'J H Hochman', '+1988-04-01T00:00:00Z', '7', '140', 'Journal of Immunology', 'scholarly article', '2450918', 'nan', 'English');\nDatabase State:\n- Table: antigen_presentation_folding_assembly_and_peptide_loading_of_class_i_mhc, Columns: [label, description, cites_work, instance_of, found_in_taxon, reactome_id, part_of, exact_match, has_parts]\n- Table: citation, Columns: [label, description, pages, title, author_name_string, publication_date, issue, volume, published_in, instance_of, pubmed_id, doi, language_of_work_or_name]",
        "Response": "Table: citation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO physical_location (label, description, commons_category, coordinate_location, freebase_id, viaf_id, idref_id, isni, nkcr_aut_id, library_of_congress_authority_id, official_website, inception, image, located_in_the_administrative_territorial_entity, instance_of, commons_institution_page, country, biblioth\u00e8que_nationale_de_france_id, worldcat_identities_id) VALUES ('National Museum of Asian Art', 'art museum of Asian art in Washington, D.C., a division of the Smithsonian Institution', 'nan', '38.88810020051392', 'nan', '311378280', 'nan', '0000 0004 0439 4318', 'nan', 'nan', 'https://asia.si.edu/', 'nan', 'nan', 'Washington, D.C.', 'art museum', 'nan', 'United States of America', 'nan', 'nan');\nDatabase State:\n- Table: collection, Columns: [label, description, commons_category, coordinate_location, freebase_id, viaf_id, idref_id, isni, library_of_congress_authority_id, official_website, inception, image, located_in_the_administrative_territorial_entity, instance_of, commons_institution_page, country, biblioth\u00e8que_nationale_de_france_id, worldcat_identities_id, national_library_of_israel_j9u_id]\n- Table: album_leaf, Columns: [label, description, instance_of, collection, image, location, inception, inventory_number, height, width]",
        "Response": "Table: physical_location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cellular_component (label, description, gene_ontology_id, subclass_of, exact_match, instance_of) VALUES ('inner dynein arm', 'Inner arm structure present on the outer doublet microtubules of ciliary and flagellar axonemes. The structure of inner dynein arms is complex and may vary within the axoneme. Inner dynein arms are heteromeric, comprising 8 different heavy chains and', 'GO:0036156', 'axonemal dynein complex', 'http://purl.obolibrary.org/obo/GO_0036156', 'cellular component');\nDatabase State:\n- Table: cellular_component, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]\n- Table: chromosome, Columns: [label, description, refseq_genome_id, found_in_taxon, instance_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, ensembl_gene_id, ensembl_transcript_id, homologene_id, refseq_rna_id, ortholog, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, chromosome, instance_of, expressed_in]",
        "Response": "Table: cellular_component"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO movies2actors (movieid, actorid, cast_num) VALUES (2421914, 284639, 2);\nDatabase State:\n- Table: movies2actors, Columns: [movieid, actorid, cast_num]\n- Table: u2base, Columns: [userid, movieid, rating]\n- Table: actors, Columns: [actorid, a_gender, a_quality]",
        "Response": "Table: movies2actors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS) VALUES (9508, '2003-2004', 'Canada U20 ', 'WJC-20', 'Regular Season', 6, 1, 2, 3, 4, 1);\nDatabase State:\n- Table: weight_info, Columns: [weight_id, weight_in_kg, weight_in_lbs]\n- Table: PlayerInfo, Columns: [ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0]",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, model_year, country) VALUES (34, 1975, 1);\nDatabase State:\n- Table: price, Columns: [ID, price]\n- Table: Cars, Columns: [ID, model_year, country]\n- Table: data, Columns: [ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name]\n- Table: country, Columns: [origin, country]",
        "Response": "Table: Cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO followed_by (label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, follows, followed_by, competition_class, has_parts) VALUES ('1971 Ontario Badminton Championships', 'badminton championships', 'Ontario Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'Canada', '+1971-00-00T00:00:00Z', '1970 Ontario Badminton Championships', '1972 Ontario Badminton Championships', 'national championship', '1971 Ontario Badminton Championships \u2013 Men''s singles');\nDatabase State:\n- Table: followed_by, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, follows, followed_by, competition_class, has_parts]\n- Table: ontario_badminton_championships, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1010, 'Lee', 'Derek', 17, 'M', 600, 2192, 'HOU');\nDatabase State:\n- Table: Member_of_club, Columns: [StuID, ClubID, Position]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Club, Columns: [ClubID, ClubName, ClubDesc, ClubLocation]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross) VALUES ('The Nightmare Before Christmas', 'Oct 13, 1993', 'Musical', 'PG', '$50,408,318', '$100,026,637');\nDatabase State:\n- Table: Movie_Grossings, Columns: [movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross]",
        "Response": "Table: Movie_Grossings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, instance_of, freebase_id, image) VALUES ('Howard Florey', 'Australian pathologist (1898-1968)', 'Howard Florey', 'human', '/m/0b2tt', 'Howard Walter Florey 1945.jpg');\nDatabase State:\n- Table: south_australian_house_of_assembly_by_election, Columns: [label, description, instance_of, office_contested, point_in_time, country, applies_to_jurisdiction, successful_candidate, candidate]\n- Table: candidate, Columns: [label, description, instance_of, date_of_birth, sex_or_gender, position_held, given_name, occupation, country_of_citizenship, family_name, languages_spoken_written_or_signed, candidacy_in_election, freebase_id, sa_parliament_member_id]\n- Table: family_name, Columns: [label, description, caverphone, instance_of, soundex, native_label, writing_system, geneanet_family_name_id, different_from, g\u00e9opatronyme_id]\n- Table: eponym, Columns: [label, description, commons_category, instance_of, freebase_id, image]\n- Table: political_candidate, Columns: [label, description, instance_of, date_of_birth, sex_or_gender, position_held, given_name, occupation, country_of_citizenship, family_name, languages_spoken_written_or_signed, candidacy_in_election, freebase_id, sa_parliament_member_id]\n- Table: given_name, Columns: [label, description, said_to_be_the_same_as, family_name_identical_to_this_given_name, instance_of, different_from, native_label, writing_system, soundex, cologne_phonetics, caverphone, commons_category, language_of_work_or_name]",
        "Response": "Table: eponym"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Museum_ID, Name, Num_of_Staff, Open_Year) VALUES (8, 'ZirMed Gateway Museum', 12, '2009');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: museum"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO women_and_geology_who_are_we_where_have_we_come_from_and_where_are_we_going (label, description, doi, instance_of, title, published_in, followed_by, publication_date, volume, part_of, main_subject, follows, author_name_string) VALUES ('Building community to advance women in the geosciences through the Earth Science Women\u2019s Network', 'nan', '10.1130/2018.1214(12)', 'scholarly article', 'Building community to advance women in the geosciences through the Earth Science Women\u2019s Network', 'Memoir / Geological Society of America', 'nan', '+2018-08-07T00:00:00Z', '214', 'Women and Geology: Who Are We, Where Have We Come From, and Where Are We Going?', 'women in science', 'The Association for Women Geoscientists: Forty years of successes, struggles, and sisterhood', 'Rebecca T. Barnes');\nDatabase State:\n- Table: follows, Columns: [label, description, doi, instance_of, title, published_in, followed_by, publication_date, volume, part_of, follows, author_name_string]",
        "Response": "Table: women_and_geology_who_are_we_where_have_we_come_from_and_where_are_we_going"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, person_id, category, role, credited) VALUES ('tt0629397', 'nm1059316', 'Casting Department', 'casting associate', 'true');\nDatabase State:\n- Table: Person, Columns: [person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, series, episode_id, person_id, role, result]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Episode, Columns: [episode_id, series, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO matchs (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season) VALUES ('E3', '2020-01-28', 'Port Vale', 'Exeter', 3, 1, 'H', 2020);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (actual_order_id, order_status_code, regular_order_id, actual_order_date) VALUES (3, 'Cancel', 4, '2018-02-25 10:13:36');\nDatabase State:\n- Table: Regular_Order_Products, Columns: [regular_order_id, product_id]\n- Table: Order_Deliveries, Columns: [location_code, actual_order_id, delivery_status_code, driver_employee_id, truck_id, delivery_date]\n- Table: Regular_Orders, Columns: [regular_order_id, distributer_id]\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer]\n- Table: Products, Columns: [product_id, product_name, product_price, product_description]\n- Table: Employees, Columns: [employee_id, employee_address_id, employee_name, employee_phone]\n- Table: Trucks, Columns: [truck_id, truck_licence_number, truck_details]",
        "Response": "Table: Actual_Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (groupName, totalSnatched, artist, groupYear, releaseType, groupId, id) VALUES ('ouroboros', 0, 'archive mind', 2012, 'album', 72297753, 41983);\nDatabase State:\n- Table: MusicReleases, Columns: [groupName, totalSnatched, artist, groupYear, releaseType, groupId, id]",
        "Response": "Table: MusicReleases"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO transaction (TransactionID, CreditCardNumber, CustomerID, TransactionDate, CreditCardType, LocationID, RootBeerID, PurchasePrice) VALUES (102452, 5277228301273712, 756928, '2015-07-31', 'MasterCard', 2, 105015, 1.0);\nDatabase State:\n- Table: location, Columns: [LocationID, LocationName, StreetAddress, City, State, ZipCode]",
        "Response": "Table: transaction"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, image, historic_county, state_of_use, transport_network, connecting_service, adjacent_station) VALUES ('Cornbrook tram stop', 'Manchester Metrolink tram stop', 'United Kingdom', '53.47', 'Manchester Metrolink tram stop', 'Manchester', 'Cornbrook platforms.jpg', 'Lancashire', 'in use', 'Manchester Metrolink', 'Trafford Centre to Cornbrook', 'Deansgate-Castlefield tram stop');\nDatabase State:\n- Table: manchester_metrolink_tram_stop, Columns: [label, description, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, image, historic_county, state_of_use, transport_network, connecting_service, adjacent_station]",
        "Response": "Table: manchester_metrolink_tram_stop"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO department_store_chain (label, description, country, instance_of) VALUES ('Bullock''s', 'defunct department store chain', 'United States of America', 'department store chain');\nDatabase State:\n- Table: part, Columns: [label, description, commons_category, topics_main_category, freebase_id, gnd_id, viaf_id, instance_of, geonames_id, page_banner, quora_topic_id, has_parts, nkcr_aut_id, worldcat_identities_id, coordinate_location, locator_map_image, part_of, den_store_danske_id]\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, coordinates_of_southernmost_point, new_york_times_topic_id, gnd_id, category_of_associated_people, emergency_phone_number, electrical_plug_type, licence_plate_code, hashtag, babelnet_id, office_held_by_head_of_government, curlie_id, native_label, musicbrainz_area_id, comic_vine_id, insee_countries_and_foreign_territories_code, vat_rate, diplomatic_relation, flag_image, commons_gallery, viaf_id, history_of_topic, capital, subreddit, openstreetmap_relation_id, mobile_country_code, maritime_identification_digits, nkcr_aut_id, asc_leiden_thesaurus_id, marriageable_age, category_of_people_buried_here, motto_text, geoshape, coordinates_of_easternmost_point, le_monde_diplomatique_subject_id, marine_regions_geographic_id, retirement_age, member_of, unemployment_rate, railway_traffic_side, located_in_time_zone, category_for_people_who_died_here, yso_id, office_held_by_head_of_state, commons_category, shares_border_with, us_national_archives_identifier, nalt_id, treccani_id, iso_3166_1_numeric_code, coordinates_of_westernmost_point, country_calling_code, stw_thesaurus_for_economics_id, statoids_id, flag, fips_10_4_countries_and_regions, isni, nese_id, maintained_by_wikiproject, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, wikimedia_outline, ndl_authority_id, currency, geonames_id, unicode_character, unesco_thesaurus_id, geography_of_topic, iso_3166_1_alpha_3_code, official_name, quora_topic_id, mesh_descriptor_id, basic_form_of_government, coat_of_arms_image, ituisoiec_object_identifier, legislative_body, trunk_prefix, freebase_id, official_language, replaces, continent, coat_of_arms, age_of_majority, national_library_of_israel_id_old, on_focus_list_of_wikimedia_project, wipo_st3, coordinates_of_northernmost_point, has_quality, iso_3166_1_alpha_2_code, total_fertility_rate, area, store_norske_leksikon_id, topics_main_category, biblioth\u00e8que_nationale_de_france_id, locator_map_image, bbc_things_id, head_of_government, ioc_country_code, fast_id, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, anthem, life_expectancy, top_level_internet_domain, instance_of, highest_point, category_for_people_born_here, driving_side, lowest_point, civicus_monitor_country_entry, pronunciation_audio, idref_id, contains_the_administrative_territorial_entity, itu_letter_code, library_of_congress_authority_id, coordinate_location, described_by_source, brockhaus_enzyklop\u00e4die_online_id, iab_code, klexikon_article_id, loc_and_marc_vocabularies_id, language_used, dr_topic_id, world_encyclopedia_of_puppetry_arts_id, gran_enciclop\u00e8dia_catalana_id, whos_on_first_id, inaturalist_place_id, omegawiki_defined_meaning, hds_id, gs1_country_code, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, larousse_id, worldcat_identities_id, eurovoc_id, part_of, open_data_portal, kbpedia_id, inception, gynopedia_id, rkd_thesaurus_id, pm20_geo_code, interlingual_index_id, jewish_encyclopedia_id_russian, economy_of_topic, uk_parliament_thesaurus_id, edition_humboldt_digital_id, tasteatlas_id, github_topic, namuwiki_id, wordnet_31_synset_id, demographics_of_topic, cna_topic_id, ysa_id, yle_topic_id, bbc_news_topic_id, joconde_location_id, armeniapedia_id, zhihu_topic_id, den_store_danske_id, krugosvet_article, schoenberg_database_of_manuscripts_place_id, colon_classification, national_library_of_israel_j9u_id, democracy_index, catalan_vikidia_id, online_pwn_encyclopedia_id, postimees_topic_id, head_of_state, der_spiegel_topic_id, museum_digital_place_id, wikisimpsons_id, urban_electric_transit_country_id, m49_code, short_name, demonym, country, official_website, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, central_bank, gini_coefficient, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, number_of_out_of_school_children, dewey_decimal_classification, giant_bomb_id, grove_art_online_id, the_top_tens_id, the_world_factbook_country_id]\n- Table: given_name, Columns: [label, description, instance_of, native_label, soundex, cologne_phonetics, caverphone, writing_system, language_of_work_or_name, said_to_be_the_same_as, different_from, commons_category]\n- Table: place_of_birth, Columns: [label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of]\n- Table: head_of_state, Columns: [label, description, commons_category, viaf_id, isni, library_of_congress_authority_id, gnd_id, country_of_citizenship, image, place_of_birth, date_of_birth, occupation, position_held, educated_at, instance_of, freebase_id, munzinger_person_id, languages_spoken_written_or_signed, given_name, fast_id, award_received, signature, spouse, name_in_native_language, encyclop\u00e6dia_britannica_online_id, religion_or_worldview, sex_or_gender, topics_main_category, worldcat_identities_id, store_norske_leksikon_id, child]\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, instance_of, freebase_id, geonames_id, inception, official_website, locator_map_image, inaturalist_place_id, area, population]",
        "Response": "Table: department_store_chain"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, instance_of, country, coordinate_location, locator_map_image, located_in_the_administrative_territorial_entity, area, population, geonames_id) VALUES ('Dobele Municipality', 'municipality of Latvia from 1 July 2021', 'municipality of Latvia', 'Latvia', '56.583333333333336', 'Latvija Dobeles novads 2021.svg', 'Latvia', 1587.25, 27993.0, 'nan');\nDatabase State:\n- Table: place_of_birth, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coat_of_arms_image, coordinate_location, instance_of, topics_main_category, freebase_id, musicbrainz_area_id, geonames_id, category_of_associated_people, viaf_id, image, official_website, population, capital_of, area, official_name, quora_topic_id, native_label, postal_code, located_in_time_zone, whos_on_first_id]\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, country, coordinate_location, locator_map_image, located_in_the_administrative_territorial_entity, area, population, geonames_id]\n- Table: sports_team, Columns: [label, description, instance_of, sport, uci_code_of_cycling_team, country, official_name, has_parts, inception, official_website]\n- Table: winner, Columns: [label, description, sex_or_gender, commons_category, date_of_birth, occupation, instance_of, image, country_of_citizenship, participant_in, given_name, sport, place_of_birth, cq_ranking_male_cyclist_id, cycling_archives_cyclist_id, procyclingstats_cyclist_id, member_of_sports_team, family_name, firstcycling_rider_id, uci_rider_id]\n- Table: baltic_chain_tour, Columns: [label, description, sport, instance_of, follows, followed_by, edition_number, start_time, end_time, winner, country, subclass_of]\n- Table: follows, Columns: [label, description, sport, instance_of, followed_by, edition_number, winner, country, start_time, end_time, subclass_of, follows]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, sport, instance_of, followed_by, edition_number, winner, country, start_time, end_time, subclass_of, follows) VALUES ('2015 Baltic Chain Tour', 'nan', 'road bicycle racing', 'Baltic Chain Tour', '2016 Baltic Chain Tour', '5', 'Andriy Kulyk', 'Estonia', '+2015-08-18T00:00:00Z', '+2015-08-23T00:00:00Z', '2.2', '2014 Baltic Chain Tour');\nDatabase State:\n- Table: followed_by, Columns: [label, description, sport, instance_of, follows, followed_by, edition_number, start_time, end_time, winner, country, subclass_of]\n- Table: sports_team, Columns: [label, description, instance_of, sport, uci_code_of_cycling_team, country, official_name, has_parts, inception, official_website]\n- Table: given_name, Columns: [label, description, instance_of, different_from, language_of_work_or_name, native_label, writing_system, soundex, caverphone, commons_category]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (loan_ID, loan_type, cust_ID, branch_ID, amount) VALUES ('2', 'Auto', '1', '2', 3000);\nDatabase State:\n- Table: bank, Columns: [branch_ID, bname, no_of_customers, city, state]\n- Table: Loans, Columns: [loan_ID, loan_type, cust_ID, branch_ID, amount]",
        "Response": "Table: Loans"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (document_type_code, document_type_description) VALUES ('Paper', 'u');\nDatabase State:\n- Table: Ref_Shipping_Agents, Columns: [shipping_agent_code, shipping_agent_name, shipping_agent_description]\n- Table: Addresses, Columns: [address_id, address_details]\n- Table: Draft_Copies, Columns: [document_id, draft_number, copy_number]\n- Table: Roles, Columns: [role_code, role_description]\n- Table: Circulation_History, Columns: [document_id, draft_number, copy_number, employee_id]\n- Table: Documents, Columns: [document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details]\n- Table: Ref_Document_Status, Columns: [document_status_code, document_status_description]",
        "Response": "Table: Ref_Document_Types"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of) VALUES ('Protein YdiZ b1724', 'microbial protein found in Escherichia coli str. K-12 substr. MG1655', 'P64479', 'Escherichia coli str. K-12 substr. MG1655', 'protein', 'protein YdiZ b1724', 'protein', 'NP_416238', 'Endoribonuclease antitoxin GhoS superfamily');\nDatabase State:\n- Table: encodes, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of]\n- Table: natural_product, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, genbank_assembly_accession_number, gram_staining]\n- Table: encoded_by, Columns: [label, description, subclass_of, entrez_gene_id, found_in_taxon, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: endoribonuclease_antitoxin_ghos_superfamily, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: endoribonuclease_antitoxin_ghos_superfamily"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM) VALUES ('10015', 'ACCT-212', '1', 'MWF 10:00-10:50 a.m.', 'BUS311', 301);\nDatabase State:\n- Table: COURSE, Columns: [CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]\n- Table: PROFESSOR, Columns: [EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]\n- Table: STUDENT, Columns: [STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]\n- Table: Schedules, Columns: [CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]\n- Table: DEPARTMENT, Columns: [DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]",
        "Response": "Table: Schedules"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, ParagraphNum, PlainText, character_id, chapter_id) VALUES (663634, 1665, '[Enter PANDARUS and Troilus''s Boy, meeting]', 1261, 19595);\nDatabase State:\n- Table: characters, Columns: [id, CharName, Abbrev, Description]\n- Table: works, Columns: [id, Title, LongTitle, Date, GenreType]",
        "Response": "Table: paragraphs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num) VALUES (14, 4, 4, 'bucket', 'short', 'not_double', 'none', 2, 'triangle', 1);\nDatabase State:\n- Table: trains, Columns: [id, direction]\n- Table: cars, Columns: [id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num]",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO batting (player_id, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp) VALUES ('ryanmi02', 1966, 1, 'BOS', 'AL', 116, 369, 27, 79, 15, 3, 2, 32, 1, 0, 29, 68, 3, 0, 1, 1, 10);\nDatabase State:\n- Table: player_college, Columns: [player_id, college_id, year]\n- Table: fielding_postseason, Columns: [player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]\n- Table: player_award, Columns: [player_id, tie, notes]\n- Table: batting_postseason, Columns: [year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]\n- Table: player, Columns: [player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]\n- Table: fielding, Columns: [player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]\n- Table: pitching, Columns: [player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]\n- Table: manager_half, Columns: [player_id, year, team_id, league_id, inseason, half, g, w, l, rank]\n- Table: college, Columns: [college_id, name_full, city, state, country]",
        "Response": "Table: batting"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Courses (course_id, course_name, course_description, other_details) VALUES (1, 'ds', 'p', NULL);\nDatabase State:\n- Table: Student_Enrolment, Columns: [student_enrolment_id, degree_program_id, semester_id, student_id, other_details]\n- Table: Departments, Columns: [department_id, department_name, department_description, other_details]\n- Table: CourseInformation, Columns: [course_id, course_name, course_description, other_details]",
        "Response": "Table: CourseInformation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, category, person, role, credited) VALUES ('S20-E15', 'Produced by', 'Mike Reiss', 'producer', 'true');\nDatabase State:\n- Table: Episodes_Crew, Columns: [episode_id, category, person, role, credited]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]",
        "Response": "Table: Episodes_Crew"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO track (Track_ID, Name, Location, Seating, Year_Opened) VALUES (4, 'Daytona International Speedway', 'Daytona Beach, FL', 168000.0, 1959.0);\nDatabase State:\n- Table: track, Columns: [Track_ID, Name, Location, Seating, Year_Opened]\n- Table: race, Columns: [Race_ID, Name, Class, Date, Track_ID]",
        "Response": "Table: track"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO zip_data (zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, 1st_quarter_payroll, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA) VALUES (72529, 'Cherokee Village', 'AR', 'Yes', 'Non Postal Community Name', NULL, 'Central', 'Yes', 36.294829, -91.57574999999999932, 670, 5, 135, 'South', 'West South Central', 4911, 4726, 2218, 80900, 39118, 2.129999999999999894, 4649, 25, 95, 18, 56, 2, 35, 2289, 2437, 55.29999999999999716, 54.29999999999999716, 56.29999999999999716, 2306, 38, 2336, 39, 1476000, 6666000, 244, 0.8770000000000000017, 19.54599999999999938, 2305, 0, 1820, 1245, 300, 105, 55, 115, 1300, 2253000, 1673000, 128000, NULL);\nDatabase State:\n- Table: avoid, Columns: [zip_code, bad_alias]\n- Table: state, Columns: [abbreviation, name]\n- Table: area_code, Columns: [zip_code, area_code]\n- Table: country, Columns: [zip_code, county, state]\n- Table: zip_congress, Columns: [zip_code, district]\n- Table: alias, Columns: [zip_code, alias]\n- Table: CBSA, Columns: [CBSA, CBSA_name, CBSA_type]\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]",
        "Response": "Table: zip_data"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO train (id, train_number, name, origin, destination, time, interval) VALUES (2, 16127, 'Guruvayur Express', 'Chennai', 'Guruvayur', '22:10', 'Daily');\nDatabase State:\n- Table: Trains, Columns: [id, train_number, name, origin, destination, time, interval]",
        "Response": "Table: Trains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (journalist_ID, Name, Nationality, Age, Years_working) VALUES (6, 'Ray Ferris', 'Northern Ireland', '29', 3);\nDatabase State:\n- Table: Journalists, Columns: [journalist_ID, Name, Nationality, Age, Years_working]",
        "Response": "Table: Journalists"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Church_ID, Name, Organized_by, Open_Date, Continuation_of) VALUES (8, 'Church of Christ', 'Hiram Page', 1842, 'Church of Jesus Christ of Latter Day Saints');\nDatabase State:\n- Table: people, Columns: [People_ID, Name, Country, Is_Male, Age]\n- Table: wedding, Columns: [Church_ID, Male_ID, Female_ID, Year]",
        "Response": "Table: church"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, subclass_of, uniprot_protein_id, found_in_taxon, encoded_by, instance_of, refseq_protein_id, part_of) VALUES ('Hypothetical protein BBPR_1726', 'microbial protein found in Bifidobacterium bifidum PRL2010', 'nan', 'A0A0H3EC84', 'Bifidobacterium bifidum PRL2010', 'hypothetical protein BBPR_1726', 'protein', 'YP_003971784', 'Periplasmic metal-binding protein Tp34-type');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: periplasmic_metal_binding_protein_tp34_type_superfamily"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, Allergy) VALUES (1005, 'Tree Pollen');\nDatabase State:\n- Table: Students_Allergies, Columns: [StuID, Allergy]\n- Table: Allergy_Type, Columns: [Allergy, AllergyType]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Students_Allergies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, instance_of, ncbi_locus_tag, genomic_end, strand_orientation, genomic_start) VALUES ('GTPase Era SF2628', 'microbial gene found in Shigella flexneri 2a str. 301', '1025663', 'gene', 'GTPase Era SF2628', 'Shigella flexneri 2a str. 301', 'gene', 'SF2628', '2700599.0', 'reverse strand', '2699694.0');\nDatabase State:\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO film_text (film_id, title, description) VALUES (316, 'FIRE WOLVES', 'A Intrepid Documentary of a Frisbee And a Dog who must Outrace a Lumberjack in Nigeria');\nDatabase State:\n- Table: Films, Columns: [film_id, title, description]\n- Table: address, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: inventory, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: store, Columns: [store_id, manager_staff_id, address_id, last_update]",
        "Response": "Table: Films"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO list (LastName) VALUES ('PREHM', ' SHANEL', 0, 104);\nDatabase State:\n- Table: list, Columns: [LastName]",
        "Response": "Table: list"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Participates_in (stuid, actid) VALUES (1004, 782);\nDatabase State:\n- Table: Activity, Columns: [actid, activity_name]",
        "Response": "Table: Participates_in"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO dna_recombination_mediator_protein_a (label, description, encoded_by, uniprot_protein_id, found_in_taxon, subclass_of, biological_process, instance_of, refseq_protein_id, part_of) VALUES ('DNA-processing protein A LA_3583', 'microbial protein found in Leptospira interrogans serovar Lai str. 56601', 'DNA-processing protein A LA_3583', 'Q8F0B3', 'Leptospira interrogans serovar Lai str. 56601', 'protein', 'DNA mediated transformation', 'protein', 'NP_713763', 'DNA recombination-mediator protein A');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: dna_recombination_mediator_protein_a"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, Allergy) VALUES (1031, 'Soy');\nDatabase State:\n- Table: Allergy_Type, Columns: [Allergy, AllergyType]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Has_Allergy"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (playlist_id, track_id) VALUES (8, 3448);\nDatabase State:\n- Table: customers, Columns: [id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]\n- Table: employees, Columns: [id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]\n- Table: invoices, Columns: [id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]",
        "Response": "Table: playlist_tracks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (image_id, image_alt_text, image_name, image_url) VALUES (4, 'Chaya', 'top4', 'http://abernathyboehm.com/1.jpg');\nDatabase State:\n- Table: Document_Structures, Columns: [document_structure_code, parent_document_structure_code, document_structure_description]\n- Table: Documents, Columns: [document_code, document_structure_code, document_type_code, access_count, document_name]\n- Table: Document_Sections, Columns: [section_id, document_code, section_sequence, section_code, section_title]\n- Table: Users, Columns: [user_id, role_code, user_name, user_login, password]\n- Table: Functional_Areas, Columns: [functional_area_code, parent_functional_area_code, functional_area_description]\n- Table: Document_Sections_Images, Columns: [section_id, image_id]\n- Table: Roles, Columns: [role_code, role_description]\n- Table: Document_Functional_Areas, Columns: [document_code, functional_area_code]",
        "Response": "Table: Images"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, located_in_the_administrative_territorial_entity, country, instance_of, coordinate_location, freebase_id) VALUES ('Central District', 'district (bakhsh) in Tonekabon County, Mazandaran Province, Iran', 'Tonekabon County', 'Iran', 'district of Iran', '36.75', '/m/0hgq_qh');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, country, instance_of, coordinate_location, freebase_id]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO furniture_manufacte (Manufacturer_ID, Furniture_ID, Price_in_Dollar) VALUES (7, 4, 1234.0);\nDatabase State:\n- Table: furniture_manufacte, Columns: [Manufacturer_ID, Furniture_ID, Price_in_Dollar]\n- Table: manufacturer, Columns: [Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops]",
        "Response": "Table: furniture_manufacte"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (student_id) VALUES (1661, 1025);\nDatabase State:\n- Table: Student_Friends, Columns: [student_id]",
        "Response": "Table: Student_Friends"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movieid, actorid, cast_num) VALUES (2338199, 184351, 3);\nDatabase State:\n- Table: u2base, Columns: [userid, movieid, rating]\n- Table: movies, Columns: [movieid, year, isEnglish, country, runningtime]\n- Table: actors, Columns: [actorid, a_gender, a_quality]\n- Table: movies2directors, Columns: [movieid, directorid, genre]\n- Table: Movie_Cast, Columns: [movieid, actorid, cast_num]",
        "Response": "Table: Movie_Cast"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, instance_of, country, located_in_the_administrative_territorial_entity, part_of, follows, followed_by, coordinate_location) VALUES ('Torre Inserraglio', 'The tower of Torre Inserraglio city', 'tower', 'Italy', 'Nard\u00f2', 'Coastal towers in Salento', 'Torre Uluzzo', 'Torre Sant''Isidoro', '40.185277777778');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO centre_of_oblast (label, description, coat_of_arms, gnd_id, twinned_administrative_body, instance_of, commons_category, country, flag_image, coat_of_arms_image, postal_code, located_in_time_zone, local_dialing_code, coordinate_location, topics_main_category, page_banner, freebase_id, musicbrainz_area_id, inception, flag, official_website, category_for_people_who_died_here, geonames_id, category_of_associated_people, capital_of, viaf_id, described_by_source, locator_map_image, located_in_the_administrative_territorial_entity, elevation_above_sea_level, area, population, image, official_name, native_label, quora_topic_id, great_russian_encyclopedia_online_id, encyclop\u00e6dia_britannica_online_id, nkcr_aut_id, library_of_congress_authority_id, whos_on_first_id, national_library_of_israel_j9u_id, online_pwn_encyclopedia_id, koatuu_identifier, category_for_people_born_here, internet_encyclopedia_of_ukraine_id, on_focus_list_of_wikimedia_project, facebook_id) VALUES ('Sumy', 'city and capital of Sumy Oblast in north-eastern Ukraine', 'coat of arms of Sumy', '4238867-3', 'Lublin', 'city of regional significance of Ukraine', 'Sumy', 'Ukraine', 'Flag of Sumy.jpg', '\u0413\u0435\u0440\u0431 \u043c\u0456\u0441\u0442\u0430 \u0421\u0443\u043c\u0438.svg', '40000\u201340035', 'UTC+02:00', '542', '50.906799260254', 'Category:Sumy', 'Sumy Wikivoyage banner.jpg', '/m/02q6jz', '78d3dadb-1f22-43b7-8beb-991477182800', '+1652-00-00T00:00:00Z', 'flag of Sumy', 'https://smr.gov.ua/uk/', 'Category:Deaths in Sumy', '692194', 'Category:People from Sumy', 'Sumy Oblast', '145420790', 'Small Brockhaus and Efron Encyclopedic Dictionary', 'Sumy-Ukraine-Map.png', 'Sumy Oblast', 166.0, 145.0, 265758.0, 'Skyline of Sumy.jpg', '\u0421\u0443\u043c\u0438', '\u0421\u0443\u043c\u0438', 'Sumy-Ukraine', '4173462.0', 'place/Sumy-Ukraine', 'ge612950', 'n81005212', '101752495', '9.870075667204051e+17', '3981338', '5910100000.0', 'Category:Births in Sumy', 'S\\U\\Sumy', 'WikiProject Ukraine', 'smr.gov.ua');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, iso_3166_2_code, capital, located_in_the_administrative_territorial_entity, country, population, coordinate_location, geonames_id, commons_category, image, locator_map_image, official_website, coat_of_arms_image, topics_main_category, area]",
        "Response": "Table: centre_of_oblast"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Mountain_ID, Name, Height, Prominence, Range, Country) VALUES (1, 'Kibo (Uhuru Pk)', 5895.0, 5885.0, 'Kilimanjaro', 'Tanzania');\nDatabase State:\n- Table: Peaks, Columns: [Mountain_ID, Name, Height, Prominence, Range, Country]",
        "Response": "Table: Peaks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO inframe_deletion (label, description, biological_variant_of, chromosome, civic_variant_id, genomic_start, genomic_end, instance_of) VALUES ('EGFR L747_P753delinsS', 'genetic variant', 'EGFR', 'human chromosome 7', '1012', '55242470.0', '55242487.0', 'Inframe Deletion');\nDatabase State:\n- Table: biological_variant_of, Columns: [label, description, entrez_gene_id, subclass_of, ensembl_gene_id, ensembl_transcript_id, hgnc_gene_symbol, hgnc_id, homologene_id, refseq_rna_id, ortholog, image, encodes, found_in_taxon, exact_match, strand_orientation, genomic_end, genomic_start, chromosome, gene_atlas_image, instance_of, cytogenetic_location, omim_id, expressed_in, civic_gene_id, genetic_association]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, ensembl_gene_id, homologene_id, chromosome, found_in_taxon, refseq_rna_id, ensembl_transcript_id, encodes, mouse_genome_informatics_id, ortholog, exact_match, mgi_gene_symbol, strand_orientation, instance_of, cytogenetic_location, genomic_start, genomic_end, expressed_in]\n- Table: orthology, Columns: [label, description, entrez_gene_id, subclass_of, ensembl_gene_id, homologene_id, chromosome, found_in_taxon, refseq_rna_id, ensembl_transcript_id, encodes, mouse_genome_informatics_id, ortholog, exact_match, mgi_gene_symbol, strand_orientation, instance_of, cytogenetic_location, genomic_start, genomic_end, expressed_in]",
        "Response": "Table: inframe_deletion"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Editor_ID, Name, Age) VALUES (5, 'Szymon Wydra', 20.0);\nDatabase State:\n- Table: journal, Columns: [Journal_ID, Date, Theme, Sales]\n- Table: journal_committee, Columns: [Editor_ID, Journal_ID, Work_Type]\n- Table: editor, Columns: [Editor_ID, Name, Age]",
        "Response": "Table: editor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, +/_, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, Post+/_, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG) VALUES ('staplbr01', 1975, 1, 'WAS', 'NHL', 'R', 1, 0, 0, 0, 0, '-2', '0', NULL, '0', NULL, '0', '0', '0', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: TeamsPost, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: Scoring, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, +/_, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, Post+/_, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]",
        "Response": "Table: Scoring"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, direction) VALUES (1, 'east');\nDatabase State:\n- Table: cars, Columns: [id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num]\n- Table: trains, Columns: [id, direction]",
        "Response": "Table: trains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO trip (id, duration, start_date, start_station_name, end_date, end_station_name, bike_id, subscription_type, zip_code) VALUES (912958, 312, '8/31/2015 17:32', 'Howard at 2nd', 63, '8/31/2015 17:37', 'Steuart at Market', 74, 548, 'Subscriber', 94590);\nDatabase State:\n- Table: status, Columns: [station_id, bikes_available, docks_available, time]\n- Table: trip, Columns: [id, duration, start_date, start_station_name, end_date, end_station_name, bike_id, subscription_type, zip_code]\n- Table: station, Columns: [id, name, lat, long, dock_count, city, installation_date]\n- Table: weather, Columns: [date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]",
        "Response": "Table: trip"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, name, date, bulgarian_commander, latin_commander, result) VALUES (1, 'Battle of Adrianople', '14 April 1205', 'Kaloyan', 'Baldwin I', 'Bulgarian victory');\nDatabase State:\n- Table: battle, Columns: [id, name, date, bulgarian_commander, latin_commander, result]",
        "Response": "Table: battle"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO train (Train_ID, Name, Time, Service) VALUES (9, 'Island Express', '16:59', 'Daily');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: train"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Employee_ID, Name, Age, City) VALUES (9, 'Steve Borthwick', 32, 'Bath');\nDatabase State:\n- Table: employee, Columns: [Employee_ID, Name, Age, City]\n- Table: hiring, Columns: [Shop_ID, Employee_ID, Start_from, Is_full_time]\n- Table: shop, Columns: [Shop_ID, Name, Location, District, Number_products, Manager_name]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, image, corporate_number_japan, instance_of, located_in_the_administrative_territorial_entity, part_of, inception) VALUES ('Saih\u014d-in', 'nan', 'Japan', '\u5510\u62db\u63d0\u5bfa\u897f\u65b9\u9662.jpg', '7150005000239.0', 'Tatch\u016b', 'Nara', 'nan', '+1240-00-00T00:00:00Z');\nDatabase State:\n- Table: JapaneseTemples, Columns: [label, description, country, image, corporate_number_japan, instance_of, located_in_the_administrative_territorial_entity, part_of, inception]\n- Table: political_border, Columns: [label, description, area, dantai_code, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, official_website, instance_of, freebase_id, population, musicbrainz_area_id, geonames_id, topics_main_category, shares_border_with, image, located_in_time_zone, viaf_id, geonlp_id, locator_map_image, openstreetmap_relation_id, facebook_id, whos_on_first_id, worldcat_identities_id, native_label, inception, name_in_kana, ndl_authority_id]\n- Table: administrative_territorial_entity, Columns: [label, description, area, dantai_code, located_in_the_administrative_territorial_entity, country, commons_category, coordinate_location, instance_of, freebase_id, population, geonames_id, viaf_id, topics_main_category, image, located_in_time_zone, official_website, geonlp_id, locator_map_image, whos_on_first_id, worldcat_identities_id, inception, native_label, shares_border_with, name_in_kana]",
        "Response": "Table: JapaneseTemples"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, subclass_of, described_by_source, series_ordinal, short_name) VALUES ('route through', 'type of resource record in the Domain Name System (DNS)', 'resource record', 'RFC 1183: New DNS RR Definitions', '21', 'RT');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: resource_record"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format) VALUES (5, 'Detroit Symphony Orchestra', 5, 'Decca Records', 2002.0, 'CD');\nDatabase State:\n- Table: performance, Columns: [Performance_ID, Orchestra_ID, Type, Date, Official_ratings_(millions), Weekly_rank, Share]\n- Table: conductor, Columns: [Conductor_ID, Name, Age, Nationality, Year_of_Work]\n- Table: show, Columns: [Show_ID, Performance_ID, If_first_show, Result, Attendance]",
        "Response": "Table: orchestra"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tags (index, id, tag) VALUES (145056, 68318, 'beats');\nDatabase State:\n- Table: torrents, Columns: [groupName, totalSnatched, artist, groupYear, releaseType, groupId, id]",
        "Response": "Table: tags"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, locator_map_image, instance_of, located_in_the_administrative_territorial_entity, shares_border_with, country, commons_category, coat_of_arms_image, twinned_administrative_body, located_in_time_zone, topics_main_category, page_banner, official_website, musicbrainz_area_id, freebase_id, category_of_associated_people, image, viaf_id, coordinate_location, population, area, quora_topic_id, geonames_id, inaturalist_place_id) VALUES ('Vadstena Municipality', 'municipality in \u00d6sterg\u00f6tland County, Sweden', 'Vadstena Municipality in \u00d6sterg\u00f6tland County.png', 'municipality of Sweden', '\u00d6sterg\u00f6tland County', 'Mj\u00f6lby Municipality', 'Sweden', 'Vadstena Municipality', 'Vadstena vapen.svg', 'Naantali', 'nan', 'Category:Vadstena municipality', 'nan', 'http://www.vadstena.se', '233c0f51-c028-41de-afcd-9ced8b98b3ac', '/m/0zw3m', 'nan', 'R\u00e5dhuset i Vadstena, juni 2005.jpg', 'nan', '58.448333333333', 7517.0, 413.2699999999999819, 'nan', '2665901.0', '44930.0');\nDatabase State:\n- Table: twin_town, Columns: [label, description, locator_map_image, instance_of, located_in_the_administrative_territorial_entity, shares_border_with, country, commons_category, coat_of_arms_image, twinned_administrative_body, located_in_time_zone, topics_main_category, page_banner, official_website, musicbrainz_area_id, freebase_id, category_of_associated_people, image, viaf_id, coordinate_location, population, area, quora_topic_id, geonames_id, inaturalist_place_id]\n- Table: political_border, Columns: [label, description, located_in_the_administrative_territorial_entity, instance_of, commons_category, coordinate_location, country, shares_border_with, topics_main_category, population, geonames_id, category_of_associated_people, viaf_id, official_website, musicbrainz_area_id, located_in_time_zone, part_of, official_language, yso_id, image, whos_on_first_id, freebase_id, coat_of_arms_image, store_norske_leksikon_id, page_banner]\n- Table: part, Columns: [label, description, quora_topic_id, viaf_id, nkcr_aut_id, topics_main_category, locator_map_image, store_norske_leksikon_id, commons_category, instance_of, has_parts, freebase_id, coordinate_location, worldcat_identities_id]\n- Table: wikimedia_category, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: administrative_territorial_entity, Columns: [label, description, dewey_decimal_classification, twinned_administrative_body, country, commons_category, instance_of, coat_of_arms_image, image, located_in_time_zone, located_in_the_administrative_territorial_entity, coordinate_location, page_banner, musicbrainz_area_id, topics_main_category, freebase_id, population, geonames_id, shares_border_with, category_of_associated_people, official_website, finnish_municipality_number, legislative_body, official_language, area, yso_id, store_norske_leksikon_id, archinform_location_id, viaf_id, whos_on_first_id, ysa_id]",
        "Response": "Table: twin_town"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (zip_code, area_code) VALUES (91746, 626);\nDatabase State:\n- Table: avoid, Columns: [zip_code, bad_alias]\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]",
        "Response": "Table: area_code"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID) VALUES ('222-52-5555', 'Smith', 'Mary', '1/1/06', 'US$42,500.00', 'F', 'Average', 1, 3);\nDatabase State:\n- Table: location, Columns: [locationID, locationcity, address, state, zipcode, officephone]\n- Table: Employees, Columns: [ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID]\n- Table: position, Columns: [positionID, positiontitle, educationrequired, minsalary, maxsalary]",
        "Response": "Table: Employees"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season) VALUES ('SC1', '2010-01-04', 'Partick', 'Morton', 1, 0, 'H', 2010);\nDatabase State:\n- Table: matchs, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Documents_Mailed (document_id, mailed_to_address_id, mailing_date) VALUES (2, 8, '1977-04-01 17:03:50');\nDatabase State:\n- Table: Ref_Document_Types, Columns: [document_type_code, document_type_description]\n- Table: Document_Drafts, Columns: [document_id, draft_number, draft_details]\n- Table: Draft_Copies, Columns: [document_id, draft_number, copy_number]\n- Table: Ref_Document_Status, Columns: [document_status_code, document_status_description]",
        "Response": "Table: Documents_Mailed"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student_Course_Registrations (student_id, course_id, registration_date) VALUES (141, 302, '2008-11-06 10:35:13');\nDatabase State:\n- Table: Courses, Columns: [course_id, course_name, course_description, other_details]\n- Table: Student_Course_Attendance, Columns: [student_id, course_id, date_of_attendance]\n- Table: Candidates, Columns: [candidate_id, candidate_details]\n- Table: People_Addresses, Columns: [person_address_id, person_id, address_id, date_from, date_to]\n- Table: Students, Columns: [student_id, student_details]\n- Table: Addresses, Columns: [address_id, line_1, line_2, city, zip_postcode, state_province_county, country]\n- Table: People, Columns: [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]",
        "Response": "Table: Student_Course_Registrations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO the_open_championship (label, description, instance_of, sport, winner, location, point_in_time, coordinate_location, freebase_id) VALUES ('1932 Open Championship', 'golf tournament held in 1932', 'The Open Championship', 'golf', 'Gene Sarazen', 'Prince''s Golf Club, Sandwich', '+1932-00-00T00:00:00Z', '51.296', '/m/04ld420');\nDatabase State:\n- Table: winner, Columns: [label, description, sex_or_gender, date_of_birth, freebase_id, instance_of, place_of_birth, country_of_citizenship, given_name, sport, family_name, occupation]",
        "Response": "Table: the_open_championship"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ballotpedia_id, bioguide_id, bioguide_previous_id, birthday_bio, cspan_id, fec_id, first_name, gender_bio, google_entity_id_id, govtrack_id, house_history_alternate_id, house_history_id, icpsr_id, last_name, lis_id, maplight_id, middle_name, nickname_name, official_full_name, opensecrets_id, religion_bio, suffix_name, thomas_id, votesmart_id, wikidata_id, wikipedia_id) VALUES (NULL, 'D000570', NULL, '1872-01-20', NULL, NULL, 'George', 'M', 'kg:/m/02rkg17', 403673, NULL, 12535.0, 2790.0, 'Durgan', NULL, NULL, 'Richard', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Q1508109', 'George R. Durgan');\nDatabase State:\n- Table: historical_terms, Columns: [address, bioguide, chamber, class, contact_form, district, end, fax, last, middle, name, office, party, party_affiliations, phone, relation, rss_url, start, state, state_rank, title, type, url]\n- Table: current_terms, Columns: [address, bioguide, caucus, chamber, class, contact_form, district, end, fax, last, name, office, party, party_affiliations, phone, relation, rss_url, start, state, state_rank, title, type, url]\n- Table: current, Columns: [ballotpedia_id, bioguide_id, birthday_bio, cspan_id, fec_id, first_name, gender_bio, google_entity_id_id, govtrack_id, house_history_id, icpsr_id, last_name, lis_id, maplight_id, middle_name, nickname_name, official_full_name, opensecrets_id, religion_bio, suffix_name, thomas_id, votesmart_id, wikidata_id, wikipedia_id]\n- Table: social_media, Columns: [bioguide, facebook, facebook_id, govtrack, instagram, instagram_id, thomas, twitter, twitter_id, youtube, youtube_id]",
        "Response": "Table: historical"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO citation (label, description, pubmed_id, instance_of, title, published_in, volume, issue, publication_date, pages, author_name_string, doi, language_of_work_or_name) VALUES ('Heterodimerization, trafficking and membrane topology of the two proteins, Ost alpha and Ost beta, that constitute the organic solute and steroid transporter', 'scientific journal article', '17650074', 'scholarly article', 'Heterodimerization, trafficking and membrane topology of the two proteins, Ost alpha and Ost beta, that constitute the organic solute and steroid transporter', 'Biochemical Journal', '407', '3', '+2007-11-01T00:00:00Z', '363\u2013372', 'Na Li', '10.1042/BJ20070716', 'English');\nDatabase State:\n- Table: citation, Columns: [label, description, pubmed_id, instance_of, title, published_in, volume, issue, publication_date, pages, author_name_string, doi, language_of_work_or_name]\n- Table: recycling_of_bile_acids_and_salts, Columns: [label, description, cites_work, instance_of, found_in_taxon, reactome_id, part_of, exact_match, has_parts]",
        "Response": "Table: citation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO new_zealand_grand_prix (label, description, pole_position, instance_of, point_in_time, country, winner, event_distance, fastest_lap, google_knowledge_graph_id) VALUES ('1958 New Zealand Grand Prix', 'New Zealand motor race', 'Jack Brabham', 'New Zealand Grand Prix', '+1958-01-11T00:00:00Z', 'New Zealand', 'Jack Brabham', 75.0, 'Jack Brabham', '/g/11bwh5jc87');\nDatabase State:\n- Table: family_name_identical_to_this_given_name, Columns: [label, description, instance_of, different_from, commons_category, native_label, writing_system, soundex, caverphone, cologne_phonetics, wolfram_language_entity_code, g\u00e9opatronyme_id, geneanet_family_name_id]\n- Table: place_of_birth, Columns: [label, description, commons_category, country, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, freebase_id, instance_of, geonames_id, image, population, quora_topic_id, postal_code, whos_on_first_id]\n- Table: given_name, Columns: [label, description, different_from, family_name_identical_to_this_given_name, native_label, language_of_work_or_name, commons_category, writing_system, instance_of, soundex, cologne_phonetics, caverphone, attested_in, said_to_be_the_same_as, nederlandse_voornamenbank_id]\n- Table: pole_position, Columns: [label, description, sex_or_gender, date_of_birth, instance_of, place_of_birth, image, country_of_citizenship, given_name, occupation, family_name, commons_category, sport, motorsportstatscom_driver_id, racing_reference_driver_id, driver_database_driver_id]",
        "Response": "Table: new_zealand_grand_prix"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of) VALUES ('Waihopai Station', 'satellite communications interception station in New Zealand', 'New Zealand', 'Marlborough District', '-41.576389', 'listening station');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, country, instance_of, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, freebase_id, commons_category, viaf_id, geonames_id, population, official_website, image, locator_map_image, openstreetmap_relation_id, area, whos_on_first_id, worldcat_identities_id]\n- Table: listening_station, Columns: [label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of]",
        "Response": "Table: listening_station"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO taxon (label, description, taxon_name, taxon_rank, instance_of, parent_taxon, ncbi_taxonomy_id, gbif_taxon_id, encyclopedia_of_life_id, itis_tsn, bacdive_id, gram_staining, mesh_descriptor_id, lpsn_url, microsoft_academic_id, freebase_id, openalex_id, catalogue_of_life_id, irmng_id) VALUES ('Fusobacterium nucleatum', 'species of bacterium', 'Fusobacterium nucleatum', 'species', 'taxon', 'Fusobacterium', '851', '3225878', '6380902.0', '958580.0', '5765.0', 'Gram-negative bacteria', 'D016967', 'https://lpsn.dsmz.de/species/fusobacterium-nucleatum', '2777349128.0', '/m/05pdbhl', 'C2777349128', '6K68F', '10032020.0');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, found_in_taxon, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: periplasmic_metal_binding_protein_tp34_type_superfamily, Columns: [label, description, subclass_of, uniprot_protein_id, found_in_taxon, encoded_by, instance_of, refseq_protein_id, part_of]\n- Table: encodes, Columns: [label, description, subclass_of, uniprot_protein_id, found_in_taxon, encoded_by, instance_of, refseq_protein_id, part_of]\n- Table: natural_product, Columns: [label, description, taxon_name, instance_of, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: BacteriaDatabase, Columns: [label, description, taxon_name, taxon_rank, instance_of, parent_taxon, ncbi_taxonomy_id, gbif_taxon_id, encyclopedia_of_life_id, itis_tsn, bacdive_id, gram_staining, mesh_descriptor_id, lpsn_url, microsoft_academic_id, freebase_id, openalex_id, catalogue_of_life_id, irmng_id]",
        "Response": "Table: BacteriaDatabase"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, genomic_end, strand_orientation, instance_of, genomic_start) VALUES ('site-specific tyrosine recombinase XerD SMc00691', 'microbial gene found in Sinorhizobium meliloti 1021', 'Sinorhizobium meliloti 1021', '1234356', 'gene', 'Site-specific tyrosine recombinase XerD SMc00691', 'SMc00691', '2887283', 'forward strand', 'gene', '2886348');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cars_data (Id) VALUES (220, '16.5', 8, 350.0, '180', 4380, 12.09999999999999965, 1976);\nDatabase State:\n- Table: model_list, Columns: [ModelId]\n- Table: cars_data, Columns: [Id]\n- Table: car_names, Columns: [MakeId]\n- Table: car_makers, Columns: [Id]\n- Table: countries, Columns: [CountryId]",
        "Response": "Table: cars_data"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, competition_class, short_name, sport, catalog_code) VALUES ('women''s single scull', 'competition class in rowing', 'competition class', 'open', 'W1x', 'rowing', '8a078108-6741-4ad1-ab5a-704194538227');\nDatabase State:\n- Table: competition_class, Columns: [label, description, instance_of, competition_class, short_name, sport, catalog_code]",
        "Response": "Table: competition_class"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('hypothetical protein Cj0705', 'microbial gene found in Campylobacter jejuni subsp. jejuni NCTC 11168 = ATCC 700819', '905024', 'gene', 'Hypothetical protein Cj0705', 'Campylobacter jejuni subsp. jejuni NCTC 11168 = ATCC 700819', 'forward strand', '663106', '662381', 'gene', 'Cj0705');\nDatabase State:\n- Table: gtp_cyclohydrolase_1_type_2_nif3, Columns: [label, description, encoded_by, uniprot_protein_id, found_in_taxon, part_of, instance_of, subclass_of, refseq_protein_id]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (name) VALUES ('student580');\nDatabase State:\n- Table: bool, Columns: [name]\n- Table: disabled, Columns: [name]\n- Table: no_payment_due, Columns: [name, bool]\n- Table: enrolled, Columns: [name, school, month]",
        "Response": "Table: disabled"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encodes (label, description, subclass_of, uniprot_protein_id, found_in_taxon, encoded_by, instance_of, refseq_protein_id, part_of) VALUES ('Hypothetical protein BMAA0881', 'microbial protein found in Burkholderia mallei ATCC 23344', 'protein', 'A0A0H2WD29', 'Burkholderia mallei ATCC 23344', 'hypothetical protein BMAA0881', 'protein', 'YP_105573', 'Periplasmic metal-binding protein Tp34-type');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO use (label, description, subclass_of, freebase_id, commons_category, image) VALUES ('basketball', 'inflated ball used for basketball games', 'inflatable ball', '/m/0frqg3', 'Basketball balls', 'Isolated basketball.png');\nDatabase State:\n- Table: wikidata_property_related_to_sport, Columns: [label, description, subclass_of, facet_of, instance_of]",
        "Response": "Table: use"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Product_in_Event_ID, Event_ID, Product_ID) VALUES (50, 14, 6);\nDatabase State:\n- Table: Parties, Columns: [Party_ID, Party_Details]\n- Table: Products_in_Events, Columns: [Product_in_Event_ID, Event_ID, Product_ID]\n- Table: Addresses, Columns: [Address_ID, address_details]",
        "Response": "Table: Products_in_Events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (region_id, game_platform_id, num_sales) VALUES (2, 14506, 0.4600000000000000199);\nDatabase State:\n- Table: publisher, Columns: [id, publisher_name]\n- Table: game_platform, Columns: [id, game_publisher_id, platform_id, release_year]\n- Table: region_sales, Columns: [region_id, game_platform_id, num_sales]\n- Table: genre, Columns: [id, genre_name]\n- Table: game, Columns: [id, genre_id, game_name]",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO product (Product_ID, Product_Name, Category, Sub_Category, Region) VALUES ('OFF-PA-10001954', 'Xerox 1964', 'Office Supplies', 'Paper', 'East');\nDatabase State:\n- Table: product, Columns: [Product_ID, Product_Name, Category, Sub_Category, Region]\n- Table: people, Columns: [Customer_ID, Customer_Name, Segment, Country, City, State, Postal_Code, Region]\n- Table: central_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]",
        "Response": "Table: product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO jurisdiction (label, description, dewey_decimal_classification, country, shares_border_with, capital, flag_image, named_after, iso_3166_2_code, commons_category, flag, coordinate_location, openstreetmap_relation_id, located_in_the_administrative_territorial_entity, official_website, page_banner, topics_main_category, curlie_id, musicbrainz_area_id, instance_of, legislative_body, freebase_id, gnis_id, fips_10_4_countries_and_regions, topics_main_wikimedia_portal, category_for_people_born_here, category_for_people_who_died_here, geonames_id, gnd_id, category_for_films_shot_at_this_location, category_of_people_buried_here, category_of_associated_people, office_held_by_head_of_government, inception, located_in_or_next_to_body_of_water, described_by_source, locator_map_image, viaf_id, pronunciation_audio, head_of_government, area, library_of_congress_authority_id, population, located_in_time_zone, bbc_things_id, quora_topic_id, isni, ringgold_id, highest_point, lowest_point, subreddit, short_name, nickname, motto_text, contains_the_administrative_territorial_entity, yso_id, elevation_above_sea_level, mesh_descriptor_id, us_national_archives_identifier, gacs_id, history_of_topic, encyclop\u00e6dia_britannica_online_id, fips_5_2_alpha_code_us_states, fips_5_2_numeric_code_us_states, geography_of_topic, demonym, wikimedia_outline, water_as_percent_of_area, coordinates_of_geographic_center, executive_body, foundational_text, highest_judicial_authority, coordinates_of_northernmost_point, getty_thesaurus_of_geographic_names_id, part_of, c_span_organization_id, native_label, archinform_location_id, geoshape, wolfram_language_entity_code, catholic_encyclopedia_id, official_symbol, comic_vine_id, maximum_temperature_record, loc_and_marc_vocabularies_id, language_used, whos_on_first_id, gran_enciclop\u00e8dia_catalana_id, omegawiki_defined_meaning, minimum_temperature_record, category_for_maps, larousse_id, treccanis_dizionario_di_storia_id, worldcat_identities_id, nkcr_aut_id, anthem, seal_image, has_seal_badge_or_sigil, kbpedia_id, rkd_thesaurus_id, hasc, interlingual_index_id, the_top_tens_id, economy_of_topic, open_civic_data_division_id, tripadvisor_id, google_maps_customer_id, google_news_topics_id, category_for_the_view_of_the_item, github_topic, wordnet_31_synset_id, demographics_of_topic, ballotpedia_id, inaturalist_place_id, archives_at, marriageable_age, compulsory_education_maximum_age, openstreetmap_zoom_level, topics_main_template, different_from, uk_parliament_thesaurus_id, online_pwn_encyclopedia_id, store_norske_leksikon_id, twitter_topic_id, wikisimpsons_id, related_category, den_store_danske_id, per_capita_income, mean_age, number_of_households, hashtag, national_library_of_israel_j9u_id, national_library_of_israel_id_old, idref_id, french_vikidia_id, english_vikidia_id, italian_vikidia_id) VALUES ('Oklahoma', 'state of the United States of America', '2--766', 'United States of America', 'Texas', 'Oklahoma City', 'Flag of Oklahoma.svg', 'Oklahoma Territory', 'US-OK', 'Oklahoma', 'flag of Oklahoma', '35.5', '161645', 'United States of America', 'https://www.ok.gov/', 'Banneroklahoma.jpg', 'Category:Oklahoma', 'Regional/North_America/United_States/Oklahoma/', 'd2083d84-09e2-4d45-8fc0-45eed33748b5', 'U.S. state', 'Oklahoma Legislature', '/m/05mph', '1102857', 'US40', 'Portal:Oklahoma', 'Category:Births in Oklahoma', 'Category:Death in Oklahoma', '4544379', '4102053-4', 'Category:Films shot in Oklahoma', 'Category:Burials in Oklahoma', 'Category:People from Oklahoma', 'Governor of Oklahoma', '+1907-11-16T00:00:00Z', 'Arkansas River', 'Catholic Encyclopedia', 'Oklahoma in United States.svg', '137038395', 'En-us-Oklahoma.ogg', 'Kevin Stitt', 181195.0, 'n79046257', 3959353.0, 'UTC\u221206:00', '35e36830-f0d2-4d49-b4e5-beb83f102954', 'Oklahoma-state-1', '0000 0004 0647 1356', '96246.0', 'Black Mesa', 'Little River', 'Oklahoma', 'OK', 'Sooner State', 'Labor omnia vincit', 'Greer County', '154204', NULL, 'D009825', '10045325.0', '8449', 'history of Oklahoma', 'place/Oklahoma-state', 'OK', '40', 'geography of Oklahoma', 'Oklahomie', 'outline of Oklahoma', 1.870000000000000106, '35.5889', 'Government of Oklahoma', 'Constitution of Oklahoma', 'Oklahoma Court of Criminal Appeals', '37.0', '7007707', 'contiguous United States', '10320.0', 'State of Oklahoma', '2880', 'Data:Oklahoma.map', 'Entity[\"AdministrativeDivision\", {\"Oklahoma\", \"UnitedStates\"}]', '11230c', 'Scissor-tailed Flycatcher', '4020-55803', 120.0, 'countries/oku', 'Wyandot', '85688585', '46982.0', '370160.0', -31.0, 'Category:Maps of Oklahoma', 'autre-region/wd/135990', 'oklahoma', 'lccn-n79046257', 'ge132305', 'nan', 'Seal of Oklahoma.svg', 'Great Seal of the State of Oklahoma', 'Oklahoma-State', '27112.0', 'US.OK', 'i84623', '256.0', 'economy of Oklahoma', 'ocd-division/country:us/state:ok', '28957.0', '6709465363899935304', 'CAAqIQgKIhtDQkFTRGdvSUwyMHZNRFZ0Y0dnU0FtVnVLQUFQAQ', 'Category:Views of Oklahoma', 'oklahoma', '09154334-n', 'demographics of Oklahoma', 'Oklahoma', '12', 'Oklahoma Department of Libraries', 18.0, 18.0, '6', 'Template:Oklahoma', 'Oklahoma', '13920', '3950457.0', 'Oklahoma', '1.2600322659600425e+18', '49984.0', 'Category:Oklahoma-related lists', 'Oklahoma', 29873.0, 36.70000000000000285, 1493569.0, 'Oklahoma', '9.870075618246052e+17', '975204.0', '032341547', 'Oklahoma', 'Oklahoma', 'Oklahoma');\nDatabase State:\n- Table: place_of_birth, Columns: [label, description, topics_main_category, instance_of, country, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, curlie_id, musicbrainz_area_id, gnd_id, viaf_id, library_of_congress_authority_id, freebase_id, locator_map_image, geonames_id, category_of_associated_people, capital_of, page_banner, elevation_above_sea_level, gnis_id, official_website, encyclop\u00e6dia_britannica_online_id, population, fips_55_3_locations_in_the_us, inception, local_dialing_code, quora_topic_id, area, us_national_archives_identifier, gran_enciclop\u00e8dia_catalana_id, archinform_location_id, whos_on_first_id, located_in_time_zone, worldcat_identities_id, factgrid_item_id, image, water_as_percent_of_area, national_library_of_israel_j9u_id, per_capita_income, number_of_households, postal_code]\n- Table: administrative_territorial_entity, Columns: [label, description, topics_main_category, instance_of, country, commons_category, located_in_the_administrative_territorial_entity, head_of_government, coordinate_location, curlie_id, musicbrainz_area_id, gnd_id, viaf_id, library_of_congress_authority_id, freebase_id, locator_map_image, geonames_id, category_for_people_who_died_here, category_of_associated_people, capital_of, page_banner, elevation_above_sea_level, gnis_id, official_website, facebook_places_id, encyclop\u00e6dia_britannica_online_id, population, fips_55_3_locations_in_the_us, inception, local_dialing_code, quora_topic_id, area, us_national_archives_identifier, gran_enciclop\u00e8dia_catalana_id, flag_image, archinform_location_id, whos_on_first_id, located_in_time_zone, worldcat_identities_id, interlingual_index_id, wordnet_31_synset_id, tripadvisor_id, google_maps_customer_id, ballotpedia_id, image, subreddit, water_as_percent_of_area, online_pwn_encyclopedia_id, store_norske_leksikon_id, national_library_of_israel_j9u_id, wikisimpsons_id, per_capita_income, number_of_households, hashtag]\n- Table: political_border, Columns: [label, description, capital, country, shares_border_with, named_after, commons_category, locator_map_image, coordinate_location, located_in_the_administrative_territorial_entity, official_website, topics_main_category, curlie_id, musicbrainz_area_id, instance_of, freebase_id, gnis_id, library_of_congress_authority_id, viaf_id, inception, geonames_id, category_of_associated_people, area, openstreetmap_relation_id, population, us_national_archives_identifier, contains_the_administrative_territorial_entity, water_as_percent_of_area, getty_thesaurus_of_geographic_names_id, image, native_label, archinform_location_id, wolfram_language_entity_code, whos_on_first_id, category_for_maps, worldcat_identities_id, hasc, inaturalist_place_id, national_library_of_israel_j9u_id, per_capita_income, number_of_households]\n- Table: headquarters, Columns: [label, description, commons_category, coordinate_location, country, located_in_the_administrative_territorial_entity, freebase_id, instance_of, image]\n- Table: place_of_death, Columns: [label, description, instance_of, category_combines_topics, category_contains, commons_category]\n- Table: legislature_of_a_us_state, Columns: [label, description, instance_of, topics_main_category, viaf_id, freebase_id, has_parts, country, applies_to_jurisdiction, official_website, described_by_source, snac_ark_id, headquarters_location]\n- Table: jurisdiction, Columns: [label, description, dewey_decimal_classification, country, shares_border_with, capital, flag_image, named_after, iso_3166_2_code, commons_category, flag, coordinate_location, openstreetmap_relation_id, located_in_the_administrative_territorial_entity, official_website, page_banner, topics_main_category, curlie_id, musicbrainz_area_id, instance_of, legislative_body, freebase_id, gnis_id, fips_10_4_countries_and_regions, topics_main_wikimedia_portal, category_for_people_born_here, category_for_people_who_died_here, geonames_id, gnd_id, category_for_films_shot_at_this_location, category_of_people_buried_here, category_of_associated_people, office_held_by_head_of_government, inception, located_in_or_next_to_body_of_water, described_by_source, locator_map_image, viaf_id, pronunciation_audio, head_of_government, area, library_of_congress_authority_id, population, located_in_time_zone, bbc_things_id, quora_topic_id, isni, ringgold_id, highest_point, lowest_point, subreddit, short_name, nickname, motto_text, contains_the_administrative_territorial_entity, yso_id, elevation_above_sea_level, mesh_descriptor_id, us_national_archives_identifier, gacs_id, history_of_topic, encyclop\u00e6dia_britannica_online_id, fips_5_2_alpha_code_us_states, fips_5_2_numeric_code_us_states, geography_of_topic, demonym, wikimedia_outline, water_as_percent_of_area, coordinates_of_geographic_center, executive_body, foundational_text, highest_judicial_authority, coordinates_of_northernmost_point, getty_thesaurus_of_geographic_names_id, part_of, c_span_organization_id, native_label, archinform_location_id, geoshape, wolfram_language_entity_code, catholic_encyclopedia_id, official_symbol, comic_vine_id, maximum_temperature_record, loc_and_marc_vocabularies_id, language_used, whos_on_first_id, gran_enciclop\u00e8dia_catalana_id, omegawiki_defined_meaning, minimum_temperature_record, category_for_maps, larousse_id, treccanis_dizionario_di_storia_id, worldcat_identities_id, nkcr_aut_id, anthem, seal_image, has_seal_badge_or_sigil, kbpedia_id, rkd_thesaurus_id, hasc, interlingual_index_id, the_top_tens_id, economy_of_topic, open_civic_data_division_id, tripadvisor_id, google_maps_customer_id, google_news_topics_id, category_for_the_view_of_the_item, github_topic, wordnet_31_synset_id, demographics_of_topic, ballotpedia_id, inaturalist_place_id, archives_at, marriageable_age, compulsory_education_maximum_age, openstreetmap_zoom_level, topics_main_template, different_from, uk_parliament_thesaurus_id, online_pwn_encyclopedia_id, store_norske_leksikon_id, twitter_topic_id, wikisimpsons_id, related_category, den_store_danske_id, per_capita_income, mean_age, number_of_households, hashtag, national_library_of_israel_j9u_id, national_library_of_israel_id_old, idref_id, french_vikidia_id, english_vikidia_id, italian_vikidia_id]\n- Table: head_of_government, Columns: [label, description, member_of_political_party, educated_at, instance_of, date_of_birth, sex_or_gender, country_of_citizenship, given_name, occupation, position_held, place_of_birth, family_name]\n- Table: administrative_centre, Columns: [label, description, country, shares_border_with, capital, commons_category, coordinate_location, located_in_the_administrative_territorial_entity, official_website, viaf_id, topics_main_category, instance_of, freebase_id, gnis_id, category_for_people_born_here, geonames_id, category_of_associated_people, inception, locator_map_image, openstreetmap_relation_id, population, area, us_national_archives_identifier, contains_the_administrative_territorial_entity, water_as_percent_of_area, getty_thesaurus_of_geographic_names_id, named_after, native_label, archinform_location_id, wolfram_language_entity_code, whos_on_first_id, category_for_maps, worldcat_identities_id, hasc, inaturalist_place_id, per_capita_income, number_of_households, image]",
        "Response": "Table: jurisdiction"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, brewery_id, abv, ibu, name, style, ounces) VALUES (1901, 75, 0.06199999999999999956, 68.0, 'Bent Hop Golden IPA', 'American IPA', 12.0);\nDatabase State:\n- Table: beers, Columns: [id, brewery_id, abv, ibu, name, style, ounces]",
        "Response": "Table: beers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('nucleotide-binding protein YE3147', 'microbial gene found in Yersinia enterocolitica subsp. enterocolitica 8081', 'Yersinia enterocolitica subsp. enterocolitica 8081', '4715205', 'gene', 'Nucleotide-binding protein YE3147', 'YE3147', 'gene', '3423651', 'reverse strand', '3423160');\nDatabase State:\n- Table: upf0234_n_terminal, Columns: [label, description, encoded_by, subclass_of, uniprot_protein_id, found_in_taxon, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO employee (emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date) VALUES ('R-M53550M', 'Roland', '', 'Mendel', 11, 150, '0736', '1991-09-05 00:00:00.0');\nDatabase State:\n- Table: pub_info, Columns: [pub_id, logo, pr_info]\n- Table: publishers, Columns: [pub_id, pub_name, city, state, country]\n- Table: Employees, Columns: [emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date]",
        "Response": "Table: Employees"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, found_in_taxon, subclass_of, biological_process, instance_of, refseq_protein_id, part_of) VALUES ('DNA processing protein DprA EF1652', 'microbial protein found in Enterococcus faecalis V583', 'DNA processing protein DprA EF1652', 'Q834J8', 'Enterococcus faecalis V583', 'protein', 'DNA mediated transformation', 'protein', 'NP_815360', 'DNA recombination-mediator protein A');\nDatabase State:\n- Table: dna_recombination_mediator_protein_a, Columns: [label, description, encoded_by, uniprot_protein_id, found_in_taxon, subclass_of, biological_process, instance_of, refseq_protein_id, part_of]\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: dna_recombination_mediator_protein_a"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO enrollments (Campus) VALUES (14, 2001, 18648, 15467);\nDatabase State:\n- Table: discipline_enrollments, Columns: [Campus]\n- Table: Student_Enrollment, Columns: [Campus]",
        "Response": "Table: Student_Enrollment"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO historical_terms (address, bioguide, chamber, class, contact_form, district, end, fax, last, middle, name, office, party, party_affiliations, phone, relation, rss_url, start, state, state_rank, title, type, url) VALUES (NULL, 'S000231', NULL, NULL, NULL, 16.0, '1903-03-03', NULL, NULL, NULL, NULL, NULL, 'Democrat', NULL, NULL, NULL, NULL, '1901-12-02', 'IL', NULL, NULL, 'rep', NULL);\nDatabase State:\n- Table: current_terms, Columns: [address, bioguide, caucus, chamber, class, contact_form, district, end, fax, last, name, office, party, party_affiliations, phone, relation, rss_url, start, state, state_rank, title, type, url]\n- Table: current, Columns: [ballotpedia_id, bioguide_id, birthday_bio, cspan_id, fec_id, first_name, gender_bio, google_entity_id_id, govtrack_id, house_history_id, icpsr_id, last_name, lis_id, maplight_id, middle_name, nickname_name, official_full_name, opensecrets_id, religion_bio, suffix_name, thomas_id, votesmart_id, wikidata_id, wikipedia_id]\n- Table: social_media, Columns: [bioguide, facebook, facebook_id, govtrack, instagram, instagram_id, thomas, twitter, twitter_id, youtube, youtube_id]",
        "Response": "Table: historical_terms"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO wrestler (Wrestler_ID, Name, Reign, Days_held, Location, Event) VALUES (6, 'The Great Sasuke \u00a7', '1', '99', 'Tokyo , Japan', 'Live event');\nDatabase State:\n- Table: Wrestlers, Columns: [Wrestler_ID, Name, Reign, Days_held, Location, Event]",
        "Response": "Table: Wrestlers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO national_parks_of_israel (label, description, instance_of, commons_category, coordinate_location, image, located_in_the_administrative_territorial_entity, geonames_id, country) VALUES ('Arbel National Park and Nature Reserve', 'nature reserve in Israel', 'nature reserve', 'Arbel National Park', '32.8275', 'nan', 'Northern District', '9618535.0', 'Israel');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, coordinate_location, freebase_id, instance_of, image, located_in_the_administrative_territorial_entity, commons_category, country, topics_main_category, area]",
        "Response": "Table: national_parks_of_israel"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO gentwevelgem (label, description, instance_of, sport, country, edition_number, point_in_time, follows, followed_by, winner, event_distance) VALUES ('1962 Gent\u2013Wevelgem', 'cycling race', 'Gent\u2013Wevelgem', 'cycle sport', 'Belgium', '24', '+1962-03-25T00:00:00Z', '1961 Gent\u2013Wevelgem', '1963 Gent\u2013Wevelgem', 'Rik Van Looy', 237.0);\nDatabase State:\n- Table: winner, Columns: [label, description, sex_or_gender, date_of_birth, instance_of, occupation, freebase_id, image, place_of_birth, country_of_citizenship, participant_in, given_name, member_of_sports_team, sport, cycling_archives_cyclist_id, procyclingstats_cyclist_id, cyclebase_cyclist_id, m\u00e9moire_du_cyclisme_cyclist_id]\n- Table: followed_by, Columns: [label, description, instance_of, sport, country, follows, followed_by, point_in_time, edition_number, winner, event_distance]",
        "Response": "Table: gentwevelgem"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO movie_cast (movie_id, person_id, character_name, gender_id, cast_order) VALUES (6961, 1709, 'Edward Fletcher-Wooten', 2, 3);\nDatabase State:\n- Table: movie_keywords, Columns: [movie_id, keyword_id]\n- Table: movie_company, Columns: [movie_id, company_id]\n- Table: production_country, Columns: [movie_id, country_id]",
        "Response": "Table: movie_cast"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Accounts (account_id, customer_id, account_name, other_account_details) VALUES (1, 6, '338', 'Regular');\nDatabase State:\n- Table: Financial_Transactions, Columns: [transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details]\n- Table: Accounts, Columns: [account_id, customer_id, account_name, other_account_details]\n- Table: Customers_Cards, Columns: [card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details]",
        "Response": "Table: Accounts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, category_combines_topics, category_contains) VALUES ('Category:Burials in the East of England', 'Wikimedia category', 'Wikimedia category', 'location of burial', 'human');\nDatabase State:\n- Table: source_of_information, Columns: [label, description, language_of_work_or_name, instance_of, publication_date, publisher, genre, image, country_of_origin]\n- Table: blaeus_atlas_maior_vol_5_england_bl_114h5, Columns: [label, description, instance_of, part_of, collection, inception, title, creator, inventory_number, publisher, place_of_publication, published_in, publication_date, location, image, copyright_status, main_subject]\n- Table: People, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: category_for_films_shot_at_this_location, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: topic, Columns: [label, description, coordinate_location, topics_main_category, commons_category, instance_of, freebase_id, image, geonames_id, country, encyclop\u00e6dia_britannica_online_id, locator_map_image, store_norske_leksikon_id, population, described_by_source, shares_border_with, vision_of_britain_place_id, located_in_the_administrative_territorial_entity]",
        "Response": "Table: People"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO order_history (history_id, order_id, status_id, status_date) VALUES (18511, 6586, 3, '2021-05-02 01:29:33');\nDatabase State:\n- Table: OrderStatusHistory, Columns: [history_id, order_id, status_id, status_date]\n- Table: customer_address, Columns: [customer_id, address_id, status_id]\n- Table: address_status, Columns: [status_id, address_status]\n- Table: cust_order, Columns: [order_id, order_date, customer_id, shipping_method_id, dest_address_id]\n- Table: country, Columns: [country_id, country_name]\n- Table: shipping_method, Columns: [method_id, method_name, cost]",
        "Response": "Table: OrderStatusHistory"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Teacher_ID, Name, Age, Hometown) VALUES (5, 'Kearsley Brown', '45', 'Kearsley Urban District');\nDatabase State:\n- Table: Staff, Columns: [Teacher_ID, Name, Age, Hometown]",
        "Response": "Table: Staff"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO movie (movie_id, title, budget, homepage, overview, popularity, release_date, revenue, runtime, movie_status, tagline, vote_average, vote_count) VALUES (593, '\u0421\u043e\u043b\u044f\u0440\u0438\u0441', 0, '', 'Ground control has been receiving strange transmissions from the three remaining residents of the Solaris space station. When cosmonaut and psychologist Kris Kelvin is sent to investigate, he experiences the strange phenomena that afflict the Solaris crew', 24.13227099999999937, '1972-03-20', 0, 167, 'Released', '', 7.700000000000000177, 357);\nDatabase State:\n- Table: Movies, Columns: [movie_id, title, budget, homepage, overview, popularity, release_date, revenue, runtime, movie_status, tagline, vote_average, vote_count]",
        "Response": "Table: Movies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO user (UserID, Gender) VALUES ('tw-744713', 'Male');\nDatabase State:\n- Table: user, Columns: [UserID, Gender]",
        "Response": "Table: user"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tsp_type_3_repeat (label, description, uniprot_protein_id, encoded_by, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of) VALUES ('Thrombospondin 2b', 'protein found in Danio rerio', 'E7F1S4', 'thbs2b', 'calcium ion binding', 'Thrombospondin type-1 (TSP1) repeat', 'Danio rerio', 'XP_009305066', 'protein', 'TSP type-3 repeat');\nDatabase State:\n- Table: ProteinRepeatFeatures, Columns: [label, description, uniprot_protein_id, encoded_by, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: ProteinRepeatFeatures"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violation (inspection_id, point_id, fine, inspector_comment) VALUES (1532898, 33, 0, 'ABATED.');\nDatabase State:\n- Table: Inspections, Columns: [inspection_id, point_id, fine, inspector_comment]",
        "Response": "Table: Inspections"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO medicine (id, name, Trade_Name, FDA_approved) VALUES (6, 'Clocapramine', 'Clofekton', 'No');\nDatabase State:\n- Table: Medications, Columns: [id, name, Trade_Name, FDA_approved]",
        "Response": "Table: Medications"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, coordinate_location, freebase_id, instance_of, located_in_the_administrative_territorial_entity, population) VALUES ('Kuri Rural District', 'rural district (dehestan) in the Central District of Jam County, Bushehr Province, Iran', 'Iran', '27.9', '/m/0nd48fs', 'rural district of Iran', 'Central District', NULL);\nDatabase State:\n- Table: Locations, Columns: [label, description, country, coordinate_location, freebase_id, instance_of, located_in_the_administrative_territorial_entity, population]\n- Table: buttress_dam, Columns: [label, description, commons_category, coordinate_location, instance_of, image, country, located_in_the_administrative_territorial_entity, drainage_basin, length]",
        "Response": "Table: Locations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (cust_id, cust_name, annual_revenue, cust_type, address, city, state, zip, phone) VALUES (3447, 'Sennett Semi-Trailer Inc', 46538609, 'manufacturer', '14193 Valley Boulevard', 'Fontana', 'CA', 92335.0, '(909) 428-8450');\nDatabase State:\n- Table: shipment, Columns: [ship_id, cust_id, weight, truck_id, driver_id, city_id, ship_date]\n- Table: city, Columns: [city_id, city_name, state, population, area]\n- Table: truck, Columns: [truck_id, make, model_year]\n- Table: Customers, Columns: [cust_id, cust_name, annual_revenue, cust_type, address, city, state, zip, phone]\n- Table: driver, Columns: [driver_id, first_name, last_name, address, city, state, zip_code, phone]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number) VALUES ('Legionella pneumophila subsp. pneumophila str. Philadelphia 1', 'bacterial strain', 'Legionella pneumophila subsp. pneumophila str. Philadelphia 1', 'Legionella pneumophila', '272624', 'strain', 'Gram-negative bacteria', 'GCA_000008485.1');\nDatabase State:\n- Table: Bacterial_Strains, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: Bacterial_Strains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (date, store_nbr, item_nbr, units) VALUES ('2012-02-19', 2, 13, 0);\nDatabase State:\n- Table: Weather_Sales, Columns: [date, store_nbr, item_nbr, units]",
        "Response": "Table: Weather_Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, sport, instance_of, follows, followed_by, edition_number, start_time, end_time, winner, country, subclass_of) VALUES ('2011 Baltic Chain Tour', 'cycling race', 'road bicycle racing', 'Baltic Chain Tour', 'nan', '2012 Baltic Chain Tour', '1.0', '+2011-08-16T00:00:00Z', '+2011-08-20T00:00:00Z', 'Erki P\u00fctsep', 'Estonia', 'NE');\nDatabase State:\n- Table: followed_by, Columns: [label, description, sport, instance_of, follows, followed_by, edition_number, start_time, end_time, winner, country, subclass_of]\n- Table: given_name, Columns: [label, description, instance_of, different_from, language_of_work_or_name, native_label, writing_system, soundex, caverphone, commons_category]\n- Table: follows, Columns: [label, description, sport, instance_of, followed_by, edition_number, winner, country, start_time, end_time, subclass_of, follows]\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, country, coordinate_location, locator_map_image, located_in_the_administrative_territorial_entity, area, population, geonames_id]",
        "Response": "Table: baltic_chain_tour"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO payment (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update) VALUES (854, 31, 1, 2233, 0.989999999999999992, '2005-06-18 03:57:36', '2006-02-15 22:12:36');\nDatabase State:\n- Table: inventory, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: address, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: film_category, Columns: [film_id, category_id, last_update]\n- Table: country, Columns: [country_id, country, last_update]\n- Table: actor, Columns: [actor_id, first_name, last_name, last_update]\n- Table: city, Columns: [city_id, city, country_id, last_update]\n- Table: film_actor, Columns: [actor_id, film_id, last_update]\n- Table: film, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]\n- Table: customer, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: store, Columns: [store_id, manager_staff_id, address_id, last_update]\n- Table: staff, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]\n- Table: rental, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]\n- Table: RentalPayments, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: language, Columns: [language_id, name, last_update]\n- Table: film_text, Columns: [film_id, title, description]",
        "Response": "Table: RentalPayments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Player_Attributes (id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes) VALUES (156182, 179540, 46495, '2007-02-22 00:00:00', 59, 68, 'right', 'medium', 'medium', 51, 49, 50, 61, 43, 62, 42, 34, 46, 64, 63, 64, 77, 57, 50, 53, 52, 62, 46, 54, 43, 22, 63, 48, 37, 16, 18, 22, 12, 8, 15, 14, 9);\nDatabase State:\n- Table: Player_Attributes, Columns: [id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes]",
        "Response": "Table: Player_Attributes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, flag_image, locator_map_image, shares_border_with, vision_of_britain_place_id, population, catalog_code, coordinate_location, factgrid_item_id, described_by_source, commons_category) VALUES ('Anglesey', 'historic county of Wales', 'historic county of Wales', 'United Kingdom', 'Flag of Anglesey.svg', 'Anglesey Brit Isles Sect 3.svg', 'Caernarfonshire', 'nan', 69744.0, 'AGL', '53.28333333333333', 'Q217672', 'nan', 'nan');\nDatabase State:\n- Table: chamber_tomb, Columns: [label, description, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, country, historic_county]\n- Table: political_border, Columns: [label, description, instance_of, country, geoshape, locator_map_image, shares_border_with, vision_of_britain_place_id, population, coordinate_location, catalog_code, factgrid_item_id, located_in_the_administrative_territorial_entity, commons_category]\n- Table: administrative_territorial_entity, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, country, coordinate_location, instance_of, freebase_id, geonames_id, openstreetmap_relation_id, image, whos_on_first_id]\n- Table: HistoricalCounties, Columns: [label, description, instance_of, country, flag_image, locator_map_image, shares_border_with, vision_of_britain_place_id, population, catalog_code, coordinate_location, factgrid_item_id, described_by_source, commons_category]",
        "Response": "Table: HistoricalCounties"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO ACCOUNTS (custid, name) VALUES (2, 'Wang');\nDatabase State:\n- Table: CHECKING, Columns: [custid, balance]\n- Table: SAVINGS, Columns: [custid, balance]",
        "Response": "Table: ACCOUNTS"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO mountain (id, name, Height, Prominence, Range, Country) VALUES (11, 'Chilalo', 4071.0, 610.0, 'Arsi Mountains', 'Ethiopia');\nDatabase State:\n- Table: Mountains, Columns: [id, name, Height, Prominence, Range, Country]",
        "Response": "Table: Mountains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO toxin_antitoxin_system_yafq_like_toxin (label, description, found_in_taxon, uniprot_protein_id, encoded_by, subclass_of, instance_of, refseq_protein_id, part_of) VALUES ('Hypothetical protein HI0711', 'microbial protein found in Haemophilus influenzae Rd KW20', 'Haemophilus influenzae Rd KW20', 'P44041', 'hypothetical protein HI0711', 'protein', 'protein', 'NP_438869', 'Toxin-antitoxin system, RelE/ParE toxin domain superfamily');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: toxin_antitoxin_system_yafq_like_toxin"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO u2base (userid, movieid, rating) VALUES (698, 2461618, '3');\nDatabase State:\n- Table: directors, Columns: [directorid, d_quality, avg_revenue]\n- Table: movies, Columns: [movieid, year, isEnglish, country, runningtime]\n- Table: users, Columns: [userid, age, u_gender, occupation]\n- Table: User_Movie_Ratings, Columns: [userid, movieid, rating]",
        "Response": "Table: User_Movie_Ratings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO place_of_birth (label, description, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, country, topics_main_category, freebase_id, geonames_id, instance_of, viaf_id, local_dialing_code, image, library_of_congress_authority_id, whos_on_first_id, worldcat_identities_id, national_library_of_israel_j9u_id, postal_code, population) VALUES ('Aberdeen', 'city in Aberdeen, Scotland, UK', 'Aberdeen', 'Aberdeen City', '57.15', 'United Kingdom', 'Category:Aberdeen', '/m/0rng', '2657832.0', 'city', '157104604', '1224.0', '3rd Aug 2012- Abdn Harbour 2.JPG', 'n80079501', '101750639.0', 'lccn-n80079501', '9.870075526064051e+17', 'AB10-AB13 (parte), AB15, AB16, AB22-AB25', 200680.0);\nDatabase State:\n- Table: place_of_birth, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, country, topics_main_category, freebase_id, geonames_id, instance_of, viaf_id, local_dialing_code, image, library_of_congress_authority_id, whos_on_first_id, worldcat_identities_id, national_library_of_israel_j9u_id, postal_code, population]",
        "Response": "Table: place_of_birth"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (document_id, draft_number, copy_number, employee_id) VALUES (2, 1, 4, 2);\nDatabase State:\n- Table: Roles, Columns: [role_code, role_description]\n- Table: Document_Circulation, Columns: [document_id, draft_number, copy_number, employee_id]",
        "Response": "Table: Document_Circulation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (character, voice_actor, movie) VALUES ('Kronk Pepikrankenitz', 'Patrick Warburton', 'The Emperor''s New Groove');\nDatabase State:\n- Table: voice_actors, Columns: [character, voice_actor, movie]\n- Table: characters, Columns: [movie_title, release_date, hero, villian, song]",
        "Response": "Table: voice_actors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO railway_coach (label, description, subclass_of, commons_category, operator, instance_of) VALUES ('RENFE Class 6000', 'nan', 'railway coach', 'Renfe Class 6000', 'Red Nacional de los Ferrocarriles Espa\u00f1oles', 'rolling stock class');\nDatabase State:\n- Table: country, Columns: [label, description, topics_main_wikimedia_portal, continent, instance_of, commons_category, library_of_congress_authority_id, idref_id, biblioth\u00e8que_nationale_de_france_id, gnd_id, coordinate_location, topics_main_category, freebase_id, inception, locator_map_image, flag_image, anthem, basic_form_of_government, legislative_body, currency, capital, category_of_associated_people, described_by_source, page_banner, commons_gallery, demonym, shares_border_with, encyclop\u00e6dia_britannica_online_id, population, quora_topic_id, yso_id, getty_thesaurus_of_geographic_names_id, stw_thesaurus_for_economics_id, us_national_archives_identifier, coat_of_arms, official_language, area, mesh_descriptor_id, great_russian_encyclopedia_online_id, native_label, part_of, viaf_id, klexikon_article_id, isni, gran_enciclop\u00e8dia_catalana_id, omegawiki_defined_meaning, category_for_maps, office_held_by_head_of_state, french_vikidia_id, language_used, member_of, nkcr_aut_id, worldcat_identities_id, coat_of_arms_image, replaces, diplomatic_relation, pm20_geo_code, interlingual_index_id, economy_of_topic, libris_uri, bhcl_uuid, wordnet_31_synset_id, idaigazetteer_id, store_norske_leksikon_id, den_store_danske_id, national_library_of_israel_j9u_id, demographics_of_topic, museum_digital_place_id, nese_id, brockhaus_enzyklop\u00e4die_online_id, on_focus_list_of_wikimedia_project, babelnet_id, country, short_name, head_of_state, motto_text, le_monde_diplomatique_subject_id, country_calling_code, flag, ndl_authority_id, geonames_id, unesco_thesaurus_id, ioc_country_code, gacs_id, contains_the_administrative_territorial_entity, kbpedia_id, uk_parliament_thesaurus_id, yle_topic_id, ysa_id, eu_knowledge_graph_item_id]\n- Table: Coaches, Columns: [label, description, subclass_of, commons_category, operator, instance_of]",
        "Response": "Table: Coaches"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO sales_in_weather (date, store_nbr, item_nbr, units) VALUES ('2013-03-25', 32, 59, 0);\nDatabase State:\n- Table: sales_in_weather, Columns: [date, store_nbr, item_nbr, units]",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO south_superstore (Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit) VALUES (11721, 'CA-2014-115882', '2016-09-14', '2016-09-17', 'First Class', 'DB-13555', 'South', 'OFF-PA-10001125', 74.35200000000000386, 3, 0.2000000000000000111, 23.23499999999999944);\nDatabase State:\n- Table: west_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: people, Columns: [Customer_ID, Customer_Name, Segment, Country, City, State, Postal_Code, Region]\n- Table: east_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: central_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: product, Columns: [Product_ID, Product_Name, Category, Sub_Category, Region]",
        "Response": "Table: south_superstore"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number) VALUES ('Mycobacterium smegmatis str. MC2 155', 'bacterial strain', 'strain', 'Mycobacterium smegmatis str. MC2 155', 'Mycobacterium smegmatis', '246196', 'gram-positive bacteria', 'GCA_000767605.1');\nDatabase State:\n- Table: ribosomal_protein_l29_l35_superfamily, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, cell_component, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: Taxa, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: Taxa"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO production (ID, model_year, country) VALUES (184, 1976, 2);\nDatabase State:\n- Table: price, Columns: [ID, price]\n- Table: Vehicles, Columns: [ID, model_year, country]",
        "Response": "Table: Vehicles"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO student (student_id, f_name, l_name, phone_number, email, intelligence, gpa, type) VALUES (20, 'Mireielle', 'Cornhill', '(909) 5089490', 'mcornhillj@hku.hk', 1, 3.200000000000000177, 'UG');\nDatabase State:\n- Table: registration, Columns: [course_id, student_id, grade, sat]\n- Table: course, Columns: [course_id, name, credit, diff]\n- Table: student, Columns: [student_id, f_name, l_name, phone_number, email, intelligence, gpa, type]\n- Table: RA, Columns: [student_id, capability, prof_id, salary]\n- Table: prof, Columns: [prof_id, gender, first_name, last_name, email, popularity, teachingability, graduate_from]",
        "Response": "Table: student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO ship (Ship_ID, Name, Type, Nationality, Tonnage) VALUES (7, 'Appam', 'Battle ship', 'United Kingdom', 7781);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: ship"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr) VALUES (2006, 'SDN', 'NL', 'brocado01', 25, 0, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\nDatabase State:\n- Table: home_game, Columns: [year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]\n- Table: batting, Columns: [player_id, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]\n- Table: pitching_postseason, Columns: [player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]\n- Table: fielding, Columns: [player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]\n- Table: player_award, Columns: [player_id, tie, notes]\n- Table: team, Columns: [year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]\n- Table: postseason, Columns: [year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]\n- Table: all_star, Columns: [player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]\n- Table: player_college, Columns: [player_id, college_id, year]\n- Table: player, Columns: [player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]\n- Table: fielding_outfield, Columns: [player_id, year, stint, glf, gcf, grf]\n- Table: pitching, Columns: [player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]\n- Table: manager_half, Columns: [player_id, year, team_id, league_id, inseason, half, g, w, l, rank]\n- Table: manager_award_vote, Columns: [award_id, year, league_id, player_id, points_won, points_max, votes_first]\n- Table: college, Columns: [college_id, name_full, city, state, country]\n- Table: salary, Columns: [year, team_id, league_id, player_id, salary]\n- Table: park, Columns: [park_id, park_name, park_alias, city, state, country]\n- Table: manager, Columns: [player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]\n- Table: team_franchise, Columns: [franchise_id, franchise_name, active, na_assoc]\n- Table: batting_postseason, Columns: [year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]\n- Table: player_award_vote, Columns: [award_id, year, league_id, player_id, points_won, points_max, votes_first]\n- Table: hall_of_fame, Columns: [player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]\n- Table: manager_award, Columns: [player_id, award_id, year, league_id, tie, notes]\n- Table: team_half, Columns: [year, league_id, team_id, half, div_id, div_win, rank, g, w, l]",
        "Response": "Table: appearances"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Date_received, Complaint_ID, rand_client, phonefinal, vru+line, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time) VALUES ('2017-06-07', NULL, NULL, '212-768-3248', NULL, NULL, NULL, NULL, NULL, NULL, '10:14:12', '10:17:09', '00:02:57');\nDatabase State:\n- Table: district, Columns: [district_id, city, state_abbrev, division]\n- Table: Call_center_log_entries, Columns: [Date_received, Complaint_ID, rand_client, phonefinal, vru+line, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time]",
        "Response": "Table: Call_center_log_entries"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion) VALUES (18.0, 'Total', 'France', 'Oil and gas', 216.1999999999999887, 15.90000000000000035, 213.0, 132.4000000000000056);\nDatabase State:\n- Table: people, Columns: [People_ID, Age, Name, Nationality, Graduation_College]\n- Table: Companies, Columns: [Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion]",
        "Response": "Table: Companies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Quantity (quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional) VALUES (1684, 526, 2260, 0.5, 0.5, 'cup(s)', 'sliced 1/8-inch thick', 'FALSE');\nDatabase State:\n- Table: Nutrition, Columns: [recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories]\n- Table: Ingredient, Columns: [ingredient_id, category, name, plural]\n- Table: RecipeIngredients, Columns: [quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional]",
        "Response": "Table: RecipeIngredients"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encodes (label, description, found_in_taxon, uniprot_protein_id, encoded_by, subclass_of, instance_of, refseq_protein_id, part_of) VALUES ('Hypothetical protein YE1929', 'microbial protein found in Yersinia enterocolitica subsp. enterocolitica 8081', 'Yersinia enterocolitica subsp. enterocolitica 8081', 'A1JMP7', 'hypothetical protein YE1929', 'protein', 'protein', 'YP_001006185', 'Toxin-antitoxin system, RelE/ParE toxin domain superfamily');\nDatabase State:\n- Table: toxin_antitoxin_system_yafq_like_toxin, Columns: [label, description, found_in_taxon, uniprot_protein_id, encoded_by, subclass_of, instance_of, refseq_protein_id, part_of]\n- Table: natural_product, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: ProteinEncodings, Columns: [label, description, found_in_taxon, uniprot_protein_id, encoded_by, subclass_of, instance_of, refseq_protein_id, part_of]\n- Table: taxon, Columns: [label, description, taxon_name, taxon_rank, parent_taxon, instance_of, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, bacdive_id, itis_tsn, gram_staining, jstor_topic_id, irmng_id, lpsn_url, mesh_descriptor_id, mesh_tree_code, microsoft_academic_id, openalex_id, catalogue_of_life_id]",
        "Response": "Table: ProteinEncodings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, instance_of, competition_class, part_of, follows, followed_by, point_in_time, sport) VALUES ('1970 European Rowing Championships \u2013 women''s single scull', 'rowing event', 'rowing event', 'women''s single scull', '1970 European Rowing Championships', '1969 European Rowing Championships \u2013 women''s single scull', '1971 European Rowing Championships \u2013 women''s single scull', '+1970-00-00T00:00:00Z', 'rowing');\nDatabase State:\n- Table: competition_class, Columns: [label, description, instance_of, competition_class, short_name, sport, catalog_code]\n- Table: followed_by, Columns: [label, description, instance_of, competition_class, part_of, described_at_url, follows, followed_by, point_in_time, sport]\n- Table: RowingEvents, Columns: [label, description, instance_of, competition_class, part_of, follows, followed_by, point_in_time, sport]",
        "Response": "Table: RowingEvents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (eid, aid) VALUES (556784565, 5);\nDatabase State:\n- Table: employee, Columns: [eid, name, salary]\n- Table: flight, Columns: [flno, origin, destination, distance, departure_date, arrival_date, price, aid]\n- Table: aircraft, Columns: [aid, name, distance]\n- Table: certificate, Columns: [eid, aid]",
        "Response": "Table: certificate"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ranking_date) VALUES (20001211, 492, 201390, 22, 22);\nDatabase State:\n- Table: matches, Columns: [best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year]\n- Table: rankings, Columns: [ranking_date]",
        "Response": "Table: rankings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (property_id, property_type_code, property_address, other_details) VALUES (445, 'flat', '04164 Raul Stream', 'USA');\nDatabase State:\n- Table: Services, Columns: [service_id, organization_id, service_type_code, service_details]\n- Table: Timed_Status_of_Things, Columns: [thing_id, Date_and_Date, Status_of_Thing_Code]\n- Table: Customers, Columns: [customer_id, customer_details]\n- Table: Customer_Event_Notes, Columns: [Customer_Event_Note_ID, Customer_Event_ID, service_type_code, resident_id, property_id, date_moved_in]\n- Table: RealEstate, Columns: [property_id, property_type_code, property_address, other_details]\n- Table: Residents, Columns: [resident_id, property_id, date_moved_in, date_moved_out, other_details]\n- Table: Customer_Events, Columns: [Customer_Event_ID, customer_id, date_moved_in, property_id, resident_id, thing_id]\n- Table: Things, Columns: [thing_id, organization_id, Type_of_Thing_Code, service_type_code, service_details]\n- Table: Residents_Services, Columns: [resident_id, service_id, date_moved_in, property_id, date_requested, date_provided, other_details]\n- Table: Timed_Locations_of_Things, Columns: [thing_id, Date_and_Time, Location_Code]",
        "Response": "Table: RealEstate"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('16S rRNA (cytosine(1402)-N(4))-methyltransferase AMED_6260', 'microbial gene found in Amycolatopsis mediterranei U32', '9440417.0', 'gene', '16S rRNA (cytosine(1402)-N(4))-methyltransferase AMED_6260', 'Amycolatopsis mediterranei U32', 'reverse strand', '6935722', '6934769', 'gene', 'AMED_6260');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('hypothetical protein SM_b21630', 'microbial gene found in Sinorhizobium meliloti 1021', '1237881', 'gene', 'Hypothetical protein SM_b21630', 'Sinorhizobium meliloti 1021', 'reverse strand', '1658990', '1657749', 'gene', 'SM_b21630');\nDatabase State:\n- Table: saccharopine_dehydrogenase_c_terminal_domain_protein_family, Columns: [label, description, encoded_by, uniprot_protein_id, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY) VALUES ('2018/8/3', 19977, 'N409UA', 2163, 14679, 1467903, 33570, 'SAN', 11618, 1161802, 31703, 'EWR', 1131, 1252, 81, 81, 2152, 113, 113, 0, NULL, 328, 360, 0, 0, 113, 0, 0);\nDatabase State:\n- Table: Flights, Columns: [FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY]\n- Table: Airports, Columns: [Code, Description]",
        "Response": "Table: Flights"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO ship (Ship_ID, Name, Type, Nationality, Tonnage) VALUES (1, 'Corbridge', 'Cargo ship', 'United Kingdom', 3687);\nDatabase State:\n- Table: mission, Columns: [Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
        "Response": "Table: ship"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO natural_product (label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, genbank_assembly_accession_number, gram_staining) VALUES ('Escherichia coli O157:H7 str. Sakai', 'bacterial strain', 'Escherichia coli O157:H7 str. Sakai', 'Escherichia coli', '386585', 'strain', 'GCA_000008865.1', 'Gram-negative bacteria');\nDatabase State:\n- Table: endoribonuclease_antitoxin_ghos_superfamily, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of]\n- Table: encodes, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of]\n- Table: Strains, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, genbank_assembly_accession_number, gram_staining]\n- Table: encoded_by, Columns: [label, description, subclass_of, entrez_gene_id, found_in_taxon, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: Strains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, coordinate_location, country, heritage_designation, instance_of, located_in_the_administrative_territorial_entity, national_heritage_list_for_england_number, historic_county, os_grid_reference) VALUES ('Ha Ha Approximately 60 Metres To South Of Wilsic Of Wilsic School With Gatepiers At East End', 'ha-ha in Stainton, Doncaster, South Yorkshire, UK', '53.456102', 'United Kingdom', 'Grade II listed building', 'ha-ha', 'Stainton', '1286240.0', 'Yorkshire', 'SK5646495818');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, country, located_in_the_administrative_territorial_entity, commons_category, coordinate_location, freebase_id, instance_of, geonames_id, gss_code_2011, toid, openstreetmap_relation_id]\n- Table: flag, Columns: [label, description, instance_of, image, applies_to_jurisdiction, country, freebase_id]\n- Table: ha_ha, Columns: [label, description, coordinate_location, country, heritage_designation, instance_of, located_in_the_administrative_territorial_entity, national_heritage_list_for_england_number, historic_county, os_grid_reference]",
        "Response": "Table: ha_ha"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO inspection (inspection_id, inspection_date, inspection_type, results, employee_id, license_no, followup_to) VALUES (250451, '2010-06-01', 'Complaint Re-Inspection', 'Fail', 143902, 69637, 58468);\nDatabase State:\n- Table: establishment, Columns: [license_no, dba_name, aka_name, facility_type, risk_level, address, city, state, zip, latitude, longitude, ward]\n- Table: inspection_point, Columns: [point_id, Description, category, code, fine, point_level]\n- Table: violation, Columns: [inspection_id, point_id, fine, inspector_comment]",
        "Response": "Table: inspection"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, subclass_of, described_by_source, series_ordinal, short_name) VALUES ('trust anchor LINK', 'type of resource record in the Domain Name System (DNS)', 'resource record', 'nan', '58', 'TALINK');\nDatabase State:\n- Table: source_of_information, Columns: [label, description, instance_of, rfc_id, title, language_of_work_or_name, publisher, publication_date, doi, author_name_string, number_of_pages, full_work_available_at_url, dblp_publication_id]\n- Table: DNS_Resource_Records, Columns: [label, description, subclass_of, described_by_source, series_ordinal, short_name]",
        "Response": "Table: DNS_Resource_Records"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, gene_ontology_id, subclass_of, exact_match, instance_of) VALUES ('RNA catabolic process', 'The chemical reactions and pathways resulting in the breakdown of RNA, ribonucleic acid, one of the two main type of nucleic acid, consisting of a long, unbranched macromolecule formed from ribonucleotides joined in 3'',5''-phosphodiester linkage.', 'GO:0006401', 'cellular macromolecule catabolic process', 'http://purl.obolibrary.org/obo/GO_0006401', 'biological process');\nDatabase State:\n- Table: positive_regulation_of_cellular_catabolic_process, Columns: [label, description, gene_ontology_id, subclass_of, regulates_molecular_biology, exact_match, instance_of]\n- Table: BiologicalProcesses, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]",
        "Response": "Table: BiologicalProcesses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, gram_staining, lpsn_url, microsoft_academic_id) VALUES ('Acinetobacter', 'genus of bacteria', 'Moraxellaceae', 'Acinetobacter', 'taxon', 'genus', '202.0', '/m/02x89n', '469.0', '3223263.0', '1029903.0', 'Gram-negative bacteria', 'http://www.bacterio.net/acinetobacter.html', '2778523567.0');\nDatabase State:\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, gram_staining, lpsn_url, microsoft_academic_id]",
        "Response": "Table: taxon"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO era_type_guanine_nucleotide_binding_g_domain_protein_family (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of) VALUES ('GTP-binding protein Era MSMEG_4493', 'microbial protein found in Mycolicibacterium smegmatis MC2 155', 'GTP-binding protein Era MSMEG_4493', 'A0R0S7', 'ribosome biogenesis', 'nucleotide binding', 'intracellular anatomical structure', 'Era-type guanine nucleotide-binding (G) domain', 'Mycobacterium smegmatis str. MC2 155', 'YP_888765', 'protein', 'K homology domain superfamily, prokaryotic type');\nDatabase State:\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, catalogue_of_life_id, gram_staining, lpsn_url, microsoft_academic_id]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, instance_of, ncbi_locus_tag, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: era_type_guanine_nucleotide_binding_g_domain_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Answer (AnswerText, SurveyID, UserID, QuestionID) VALUES ('33', 2017, 3107, 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Answer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SeasonStatus (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS) VALUES (9508, '2003-2004', 'Canada U20 ', 'WJC-20', 'Regular Season', 6, 1, 2, 3, 4, 1);\nDatabase State:\n- Table: weight_info, Columns: [weight_id, weight_in_kg, weight_in_lbs]\n- Table: SeasonStatus, Columns: [ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS]\n- Table: height_info, Columns: [height_id, height_in_cm, height_in_inch]",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Event_ID, Participant_ID) VALUES (96, 90);\nDatabase State:\n- Table: Participants_in_Events, Columns: [Event_ID, Participant_ID]",
        "Response": "Table: Participants_in_Events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO death (caused_by_ship_id, id, note, killed, injured) VALUES (5, 6, 'Dantewada, Chhattisgarh', 0, 0);\nDatabase State:\n- Table: battle, Columns: [id, name, date, bulgarian_commander, latin_commander, result]\n- Table: death, Columns: [caused_by_ship_id, id, note, killed, injured]\n- Table: ship, Columns: [lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship]",
        "Response": "Table: death"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Person (name, age, city, gender, job) VALUES ('Bob', 35, 'salt lake city', 'male', 'engineer');\nDatabase State:\n- Table: PersonFriend, Columns: [name, friend, year]",
        "Response": "Table: Person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Climber_ID, Name, Country, Time, Points, Mountain_ID) VALUES (3, 'Hans Luthringhauser', 'West Germany', '1:16.58.0', 10.0, 2);\nDatabase State:\n- Table: mountain, Columns: [Mountain_ID, Name, Height, Prominence, Range, Country]\n- Table: Climbers, Columns: [Climber_ID, Name, Country, Time, Points, Mountain_ID]",
        "Response": "Table: Climbers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity) VALUES (799221, 14, 5360, 374, 374);\nDatabase State:\n- Table: Employees, Columns: [EmployeeID, FirstName, MiddleInitial, LastName]\n- Table: SalesRecords, Columns: [SalesID, SalesPersonID, CustomerID, ProductID, Quantity]",
        "Response": "Table: SalesRecords"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (custid, name) VALUES (5, 'Granger');\nDatabase State:\n- Table: SAVINGS, Columns: [custid, balance]\n- Table: CUSTOMERS, Columns: [custid, name]\n- Table: CHECKING, Columns: [custid, balance]",
        "Response": "Table: CUSTOMERS"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO winner (label, description, sex_or_gender, date_of_birth, place_of_birth, country_of_citizenship, occupation, instance_of, freebase_id, given_name, sport, lpga_tour_golf_player_id, family_name) VALUES ('Lauri Merten', 'professional golfer', 'female', '+1960-07-06T00:00:00Z', 'Waukesha', 'United States of America', 'golfer', 'human', '/m/0bqrd3', 'Lauri', 'golf', 'lauri-merten/81627', 'Merten');\nDatabase State:\n- Table: winner, Columns: [label, description, sex_or_gender, date_of_birth, place_of_birth, country_of_citizenship, occupation, instance_of, freebase_id, given_name, sport, lpga_tour_golf_player_id, family_name]\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, locator_map_image, instance_of, freebase_id, gnis_id, population, geonames_id, official_website, area, shares_border_with, inception, image, viaf_id, archinform_location_id, category_of_associated_people, whos_on_first_id, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, openstreetmap_relation_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households, library_of_congress_authority_id]\n- Table: united_states_womens_open_championship, Columns: [label, description, coordinate_location, country, sport, instance_of, point_in_time, competition_class, location, freebase_id, winner]\n- Table: capital_city, Columns: [label, description, instance_of, country, commons_category, coordinate_location, located_in_the_administrative_territorial_entity, freebase_id, locator_map_image, image, geonames_id, elevation_above_sea_level, gnis_id, official_website, postal_code, fips_55_3_locations_in_the_us, local_dialing_code, area, capital_of, library_of_congress_authority_id, viaf_id, archinform_location_id, inception, whos_on_first_id, worldcat_identities_id, topics_main_category, population, water_as_percent_of_area, national_library_of_israel_j9u_id, per_capita_income, number_of_households, musicbrainz_area_id, category_of_associated_people, quora_topic_id]\n- Table: administrative_centre, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, locator_map_image, instance_of, freebase_id, gnis_id, population, geonames_id, official_website, area, named_after, shares_border_with, inception, capital, image, viaf_id, archinform_location_id, category_of_associated_people, whos_on_first_id, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, hasc, openstreetmap_relation_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households, library_of_congress_authority_id, national_library_of_israel_j9u_id]",
        "Response": "Table: winner"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, Music_Festival, Date_of_ceremony, Category, Volume, Result) VALUES (1, '34th England Academy Prize', '18 February 2011', 'Best Song', 1, 'Nominated');\nDatabase State:\n- Table: Awards, Columns: [ID, Music_Festival, Date_of_ceremony, Category, Volume, Result]\n- Table: artist, Columns: [Artist_ID, Artist, Age, Famous_Title, Famous_Release_date]",
        "Response": "Table: Awards"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO diamond_games (label, description, freebase_id, instance_of, follows, followed_by, country, sport, organizer, point_in_time, edition_number, start_time, end_time) VALUES ('2003 Proximus Diamond Games', 'tennis tournament', '/m/09gfztx', 'Diamond Games', '2002 Proximus Diamond Games', '2004 Proximus Diamond Games', 'Belgium', 'tennis', 'Women''s Tennis Association', '+2003-00-00T00:00:00Z', '2', '+2003-02-16T00:00:00Z', 'nan');\nDatabase State:\n- Table: followed_by, Columns: [label, description, instance_of, follows, country, sport, organizer, point_in_time, edition_number, start_time, end_time, freebase_id, followed_by]\n- Table: follows, Columns: [label, description, freebase_id, instance_of, follows, followed_by, country, sport, organizer, point_in_time, edition_number, start_time, end_time]",
        "Response": "Table: diamond_games"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id_restaurant, street_num, street_name, city) VALUES (105, 65, 'w main ave', 'morgan hill');\nDatabase State:\n- Table: geographic, Columns: [city, county, region]\n- Table: generalinfo, Columns: [id_restaurant, label, food_type, city, review]\n- Table: location, Columns: [id_restaurant, street_num, street_name, city]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO procedural_programming_language (label, description, instance_of, freebase_id, inception, programming_paradigm) VALUES ('Pic Micro Pascal', 'free Pascal cross compiler for PIC microcontrollers', 'procedural programming language', '/m/0cmd1th', 'nan', 'procedural programming');\nDatabase State:\n- Table: programming_paradigm, Columns: [label, description, freebase_id, instance_of, subclass_of, microsoft_academic_id]\n- Table: ProgrammingLanguages, Columns: [label, description, instance_of, freebase_id, inception, programming_paradigm]",
        "Response": "Table: ProgrammingLanguages"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1021, 'Andreou', 'George', 19, 'M', 520, 8722, 'NYC');\nDatabase State:\n- Table: Students, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Students"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO matchs (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season) VALUES ('SC1', '2006-12-02', 'Partick', 'Queen of Sth', 1, 1, 'D', 2007);\nDatabase State:\n- Table: matchs, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (staff_id, gender, first_name, last_name, email_address, phone_number) VALUES (115, '1', 'Lucie', 'Lowe', 'ohintz@example.org', '142-311-6503x206');\nDatabase State:\n- Table: Products, Columns: [product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price]\n- Table: Customers, Columns: [customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number]\n- Table: Complaints, Columns: [complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id]\n- Table: Staff, Columns: [staff_id, gender, first_name, last_name, email_address, phone_number]",
        "Response": "Table: Staff"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO list (LastName) VALUES ('VANVLIET', ' COLLIN', 0, 106);\nDatabase State:\n- Table: list, Columns: [LastName]",
        "Response": "Table: list"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, category_combines_topics, commons_category, category_contains) VALUES ('Category:People from Trondheim', 'Wikimedia category', 'Wikimedia category', 'Trondheim', 'People of Trondheim', 'human');\nDatabase State:\n- Table: administrative_centre, Columns: [label, description, locator_map_image, coat_of_arms_image, country, commons_category, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, freebase_id, geonames_id, capital, area, inaturalist_place_id]\n- Table: centre_of_oblast, Columns: [label, description, coat_of_arms, gnd_id, twinned_administrative_body, instance_of, commons_category, country, flag_image, coat_of_arms_image, postal_code, located_in_time_zone, local_dialing_code, coordinate_location, topics_main_category, page_banner, freebase_id, musicbrainz_area_id, inception, flag, official_website, category_for_people_who_died_here, geonames_id, category_of_associated_people, capital_of, viaf_id, described_by_source, locator_map_image, located_in_the_administrative_territorial_entity, elevation_above_sea_level, area, population, image, official_name, native_label, quora_topic_id, great_russian_encyclopedia_online_id, encyclop\u00e6dia_britannica_online_id, nkcr_aut_id, library_of_congress_authority_id, whos_on_first_id, national_library_of_israel_j9u_id, online_pwn_encyclopedia_id, koatuu_identifier, category_for_people_born_here, internet_encyclopedia_of_ukraine_id, on_focus_list_of_wikimedia_project, facebook_id]\n- Table: capital_city, Columns: [label, description, gnd_id, twinned_administrative_body, commons_category, instance_of, country, coat_of_arms_image, flag_image, viaf_id, postal_code, head_of_government, located_in_the_administrative_territorial_entity, coordinate_location, page_banner, topics_main_category, freebase_id, musicbrainz_area_id, dewey_decimal_classification, category_for_people_born_here, category_for_people_who_died_here, geonames_id, local_dialing_code, official_website, category_of_associated_people, described_by_source, elevation_above_sea_level, image, commons_gallery, population, quora_topic_id, area, native_label, official_name, located_in_time_zone, encyclop\u00e6dia_britannica_online_id, great_russian_encyclopedia_online_id, nkcr_aut_id, capital_of, whos_on_first_id, category_for_maps, worldcat_identities_id, factgrid_item_id, store_norske_leksikon_id, national_library_of_israel_j9u_id]\n- Table: Places, Columns: [label, description, instance_of, category_combines_topics, commons_category, category_contains]\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, iso_3166_2_code, capital, located_in_the_administrative_territorial_entity, country, population, coordinate_location, geonames_id, commons_category, image, locator_map_image, official_website, coat_of_arms_image, topics_main_category, area]\n- Table: twin_town, Columns: [label, description, gnd_id, twinned_administrative_body, commons_category, instance_of, country, coat_of_arms_image, flag_image, viaf_id, postal_code, head_of_government, located_in_the_administrative_territorial_entity, coordinate_location, page_banner, topics_main_category, freebase_id, musicbrainz_area_id, dewey_decimal_classification, category_for_people_born_here, category_for_people_who_died_here, geonames_id, local_dialing_code, official_website, category_of_associated_people, described_by_source, elevation_above_sea_level, image, commons_gallery, population, quora_topic_id, area, native_label, official_name, located_in_time_zone, encyclop\u00e6dia_britannica_online_id, archinform_location_id, great_russian_encyclopedia_online_id, nkcr_aut_id, capital_of, gran_enciclop\u00e8dia_catalana_id, whos_on_first_id, category_for_maps, worldcat_identities_id, factgrid_item_id, online_pwn_encyclopedia_id, store_norske_leksikon_id, national_library_of_israel_j9u_id]",
        "Response": "Table: Places"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, country, topics_main_category, instance_of, locator_map_image, area, located_in_the_administrative_territorial_entity, shares_border_with, coordinate_location, population, inaturalist_place_id, image, geonames_id, official_website, commons_category, capital, openstreetmap_relation_id) VALUES ('Lopik', 'municipality in the Netherlands', 'Netherlands', 'Category:Lopik', 'municipality of the Netherlands', 'Map - NL - Municipality code 0331 (2009).svg', 78.9200000000000017, 'Utrecht', 'Zederik', '51.9722', 14456.0, '17414.0', 'Polsbroek 2.jpg', '2751435.0', 'http://www.lopik.nl/', 'Lopik', 'Lopik', 'nan');\nDatabase State:\n- Table: family_name, Columns: [label, description, instance_of, different_from, commons_category, native_label, writing_system, soundex, caverphone, wolfram_language_entity_code, g\u00e9opatronyme_id, geneanet_family_name_id]\n- Table: Administrative_Districts, Columns: [label, description, country, topics_main_category, instance_of, locator_map_image, area, located_in_the_administrative_territorial_entity, shares_border_with, coordinate_location, population, inaturalist_place_id, image, geonames_id, official_website, commons_category, capital, openstreetmap_relation_id]\n- Table: place_of_birth, Columns: [label, description, commons_category, country, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, freebase_id, instance_of, geonames_id, image, population, quora_topic_id, postal_code, whos_on_first_id]\n- Table: new_zealand_grand_prix, Columns: [label, description, pole_position, instance_of, point_in_time, country, winner, event_distance, fastest_lap, google_knowledge_graph_id]\n- Table: winner, Columns: [label, description, sex_or_gender, instance_of, freebase_id, date_of_birth, place_of_birth, country_of_citizenship, occupation, sport, driver_database_driver_id, given_name, family_name, motorsportstatscom_driver_id, racing_reference_driver_id, commons_category, image]\n- Table: given_name, Columns: [label, description, different_from, family_name_identical_to_this_given_name, native_label, language_of_work_or_name, commons_category, writing_system, instance_of, soundex, cologne_phonetics, caverphone, attested_in, said_to_be_the_same_as, nederlandse_voornamenbank_id]\n- Table: pole_position, Columns: [label, description, sex_or_gender, date_of_birth, instance_of, place_of_birth, image, country_of_citizenship, given_name, occupation, family_name, commons_category, sport, motorsportstatscom_driver_id, racing_reference_driver_id, driver_database_driver_id]\n- Table: family_name_identical_to_this_given_name, Columns: [label, description, instance_of, different_from, commons_category, native_label, writing_system, soundex, caverphone, cologne_phonetics, wolfram_language_entity_code, g\u00e9opatronyme_id, geneanet_family_name_id]",
        "Response": "Table: Administrative_Districts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time) VALUES ('4', '5', 'Team Batista', 'Rhodes', 'Silver Spoon DDT', '13:06');\nDatabase State:\n- Table: wrestler, Columns: [Wrestler_ID, Name, Reign, Days_held, Location, Event]\n- Table: Elimination, Columns: [Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time]",
        "Response": "Table: Elimination"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Actor_ID, Name, Musical_ID, Character, Duration, age) VALUES (1, 'Ray Meagher', 1, 'Alf Stewart', '1988\u2014', 26);\nDatabase State:\n- Table: actor, Columns: [Actor_ID, Name, Musical_ID, Character, Duration, age]",
        "Response": "Table: actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude) VALUES (11409798, 'JB387250', '8/9/2018 15:35', '021XX N Dayton St', '820', 'APARTMENT', 'FALSE', 'FALSE', 1812, 18, 43, 7, '6', NULL, NULL);\nDatabase State:\n- Table: FBI_Code, Columns: [fbi_code_no, title, description, crime_against]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Staff (staff_id, staff_first_name, staff_last_name, other_staff_details) VALUES (4, 'Kayla', 'Klein', 'p');\nDatabase State:\n- Table: Problem_Status_Codes, Columns: [problem_status_code, problem_status_description]\n- Table: Product, Columns: [product_id, product_name, product_details]\n- Table: Problem_Category_Codes, Columns: [problem_category_code, problem_category_description]\n- Table: Problem_Log, Columns: [problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details]\n- Table: Problems, Columns: [problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details]",
        "Response": "Table: Staff"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (AnswerText, SurveyID, UserID, QuestionID) VALUES ('Male', 2016, 1990, 2);\nDatabase State:\n- Table: SurveyResponses, Columns: [AnswerText, SurveyID, UserID, QuestionID]\n- Table: Question, Columns: [questiontext, questionid]",
        "Response": "Table: SurveyResponses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Answer (AnswerText, SurveyID, UserID, QuestionID) VALUES ('Not applicable to me', 2016, 1419, 48);\nDatabase State:\n- Table: Answer, Columns: [AnswerText, SurveyID, UserID, QuestionID]\n- Table: Question, Columns: [questiontext, questionid]",
        "Response": "Table: Answer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (journalist_ID, Name, Nationality, Age, Years_working) VALUES (1, 'Herbert Swindells', 'England', '37', 10);\nDatabase State:\n- Table: Journalists, Columns: [journalist_ID, Name, Nationality, Age, Years_working]",
        "Response": "Table: Journalists"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO delimitation_orders_of_india_under_delimitation_act_2002 (label, description, instance_of, country, applies_to_jurisdiction, legal_citation_of_this_text, part_of, effective_date) VALUES ('Delimitation Order No. 21 under Delimitation Act, 2002', 'nan', 'proclamation', 'India', 'Maharashtra', 'O.N. 24 (E) dated 28 March 2006', 'Delimitation Orders of India under Delimitation Act, 2002', '+2008-02-19T00:00:00Z');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, coordinate_location, freebase_id, instance_of, country, contains_the_administrative_territorial_entity, located_in_the_administrative_territorial_entity]\n- Table: jurisdiction, Columns: [label, description, page_banner, country, commons_category, iso_3166_2_code, located_in_the_administrative_territorial_entity, coordinate_location, locator_map_image, shares_border_with, official_website, topics_main_category, gnd_id, freebase_id, fips_10_4_countries_and_regions, instance_of, geonames_id, musicbrainz_area_id, openstreetmap_relation_id, inception, getty_thesaurus_of_geographic_names_id, curlie_id, capital, encyclop\u00e6dia_britannica_online_id, head_of_government, population, area, native_label, location_map, subreddit, quora_topic_id, indian_census_area_code_2001, image, wikimedia_outline, category_of_associated_people, office_held_by_head_of_government, legislative_body, executive_body, coextensive_with, different_from, viaf_id, male_population, female_population, urban_population, rural_population, mdws_place_id, library_of_congress_authority_id, literate_population, illiterate_population, language_used, whos_on_first_id, nkcr_aut_id, category_for_maps, geoshape, wolfram_language_entity_code, kbpedia_id, hasc, economy_of_topic, inaturalist_place_id, store_norske_leksikon_id, national_library_of_israel_j9u_id, den_store_danske_id, online_pwn_encyclopedia_id, gran_enciclop\u00e8dia_catalana_id, head_of_state]\n- Table: executive_branch, Columns: [label, description, instance_of, country, part_of, applies_to_jurisdiction, has_parts, freebase_id]\n- Table: office_held_by_head_of_government, Columns: [label, description, instance_of, subclass_of, country, applies_to_jurisdiction, has_list, inception, part_of]\n- Table: political_border, Columns: [label, description, country, commons_category, iso_3166_2_code, located_in_the_administrative_territorial_entity, coordinate_location, locator_map_image, shares_border_with, official_website, topics_main_category, gnd_id, freebase_id, fips_10_4_countries_and_regions, musicbrainz_area_id, instance_of, geonames_id, page_banner, category_of_associated_people, getty_thesaurus_of_geographic_names_id, openstreetmap_relation_id, head_of_state, capital, encyclop\u00e6dia_britannica_online_id, curlie_id, inception, area, population, head_of_government, quora_topic_id, contains_the_administrative_territorial_entity, subreddit, indian_census_area_code_2001, gran_enciclop\u00e8dia_catalana_id, wikimedia_outline, legislative_body, office_held_by_head_of_government, executive_body, location_map, coextensive_with, different_from, viaf_id, male_population, female_population, urban_population, rural_population, mdws_place_id, library_of_congress_authority_id, native_label, literate_population, illiterate_population, language_used, image, whos_on_first_id, category_for_maps, geoshape, wolfram_language_entity_code, kbpedia_id, hasc, inaturalist_place_id, economy_of_topic, twitter_topic_id, store_norske_leksikon_id, den_store_danske_id, national_library_of_israel_j9u_id, online_pwn_encyclopedia_id, official_name, biblioth\u00e8que_nationale_de_france_id, nkcr_aut_id]",
        "Response": "Table: delimitation_orders_of_india_under_delimitation_act_2002"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO party (Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts) VALUES (7, 'In Qontrol', 'RAI Amsterdam', '2004', '2010', 7);\nDatabase State:\n- Table: Parties, Columns: [Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]",
        "Response": "Table: Parties"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO trains (id, direction) VALUES (18, 'west');\nDatabase State:\n- Table: cars, Columns: [id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num]\n- Table: trains, Columns: [id, direction]",
        "Response": "Table: trains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Player_Attributes (id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes) VALUES (32314, 186157, 187668, '2015-02-20 00:00:00', 63, 68, 'right', 'medium', 'medium', 57, 54, 57, 70, 49, 62, 51, 36, 62, 68, 69, 68, 66, 60, 73, 56, 61, 72, 66, 56, 59, 58, 47, 68, 46, 56, 57, 54, 8, 12, 9, 11, 10);\nDatabase State:\n- Table: Team, Columns: [id, team_api_id, team_fifa_api_id, team_long_name, team_short_name]\n- Table: League, Columns: [id, country_id, name]",
        "Response": "Table: Player_Attributes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (paper_id, word_cited_id) VALUES ('257383', 'word278');\nDatabase State:\n- Table: paper, Columns: [paper_id, class_label]\n- Table: content, Columns: [paper_id, word_cited_id]",
        "Response": "Table: content"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes) VALUES (148547, 200506, 202447, '2007-02-22 00:00:00', 61, 66, 'right', 'medium', 'medium', 60, 60, 39, 64, 54, 57, 46, 52, 63, 66, 66, 69, 70, 53, 72, 62, 67, 69, 53, 65, 53, 55, 52, 62, 62, 52, 59, 55, 13, 6, 13, 11, 9);\nDatabase State:\n- Table: League, Columns: [id, country_id, name]",
        "Response": "Table: Player_Attributes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Enrolled_in (StuID, CID, Grade) VALUES (1023, '600.333', 'B');\nDatabase State:\n- Table: Gradeconversion, Columns: [lettergrade, gradepoint]\n- Table: Member_of, Columns: [FacID, DNO, Appt_Type]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Course, Columns: [CID, CName, Credits, Instructor, Days, Hours, DNO]\n- Table: Minor_in, Columns: [StuID, DNO]",
        "Response": "Table: Enrolled_in"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, CID, Grade) VALUES (1008, '600.463', 'B');\nDatabase State:\n- Table: Member_of, Columns: [FacID, DNO, Appt_Type]\n- Table: Course, Columns: [CID, CName, Credits, Instructor, Days, Hours, DNO]\n- Table: Faculty, Columns: [FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]\n- Table: Gradeconversion, Columns: [lettergrade, gradepoint]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Department, Columns: [DNO, Division, DName, Room, Building, DPhone]\n- Table: Student_Courses, Columns: [StuID, CID, Grade]",
        "Response": "Table: Student_Courses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO yhch_yjgk_yial_family (label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of) VALUES ('Hypothetical protein ECs4094', 'microbial protein found in Escherichia coli O157:H7 str. Sakai', 'Q8X9H2', 'Escherichia coli O157:H7 str. Sakai', 'protein', 'hypothetical protein ECs4094', 'protein', 'NP_312121', 'YhcH/YjgK/YiaL family');\nDatabase State:\n- Table: Protein_Family, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of]\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: Protein_Family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO radix (label, description, instance_of, commons_category, numeric_value, unicode_character, kit_linked_open_numbers_id, prime_factor, pronunciation_audio, number_of_decimal_digits, code, omegawiki_defined_meaning, babelnet_id) VALUES ('22', 'natural number', 'natural number', '22 (number)', 22.0, '\u3252', '22', '2.0', 'Cs-22.ogg', 2.0, '\u0be8\u0bf0\u0be8', '7047.0', '00000082n');\nDatabase State:\n- Table: Numbers, Columns: [label, description, instance_of, commons_category, numeric_value, unicode_character, kit_linked_open_numbers_id, prime_factor, pronunciation_audio, number_of_decimal_digits, code, omegawiki_defined_meaning, babelnet_id]",
        "Response": "Table: Numbers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION) VALUES ('MKT/MGT', 'Marketing/Management', 'BUS', 106, 'KLR 126, Box 55', '3342');\nDatabase State:\n- Table: STUDENT, Columns: [STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]\n- Table: COURSE, Columns: [CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]\n- Table: PROFESSOR, Columns: [EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]\n- Table: EMPLOYEE, Columns: [EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB]\n- Table: CLASS, Columns: [CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]\n- Table: ENROLL, Columns: [CLASS_CODE, STU_NUM, ENROLL_GRADE]",
        "Response": "Table: DEPARTMENT"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO authors (au_id, au_lname, au_fname, phone, address, city, state, zip, contract) VALUES ('648-92-1872', 'Blotchet-Halls', 'Reginald', '503 745-6402', '55 Hillsdale Bl.', 'Corvallis', 'OR', '97330', '0');\nDatabase State:\n- Table: employee, Columns: [emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date]\n- Table: stores, Columns: [stor_id, stor_name, stor_address, city, state, zip]\n- Table: roysched, Columns: [title_id, lorange, hirange, royalty]\n- Table: sales, Columns: [stor_id, ord_num, ord_date, qty, payterms, title_id]\n- Table: publishers, Columns: [pub_id, pub_name, city, state, country]\n- Table: titles, Columns: [title_id, title, type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate]\n- Table: Authors, Columns: [au_id, au_lname, au_fname, phone, address, city, state, zip, contract]\n- Table: titleauthor, Columns: [au_id, title_id, au_ord, royaltyper]\n- Table: discounts, Columns: [discounttype, stor_id, lowqty, highqty, discount]\n- Table: pub_info, Columns: [pub_id, logo, pr_info]",
        "Response": "Table: Authors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit) VALUES (8012, 'CA-2017-157266', '2017-05-26', '2017-06-01', 'Standard Class', 'TB-21280', 'East', 'OFF-PA-10002689', 19.44000000000000127, 3, 0.0, 9.33120000000000083);\nDatabase State:\n- Table: people, Columns: [Customer_ID, Customer_Name, Segment, Country, City, State, Postal_Code, Region]\n- Table: west_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: central_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: east_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: south_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: product, Columns: [Product_ID, Product_Name, Category, Sub_Category, Region]",
        "Response": "Table: east_superstore"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (branch_ID, bname, no_of_customers, city, state) VALUES (3, 'broadway', 453, 'New York City', 'New York');\nDatabase State:\n- Table: Bank_Branches, Columns: [branch_ID, bname, no_of_customers, city, state]\n- Table: loan, Columns: [loan_ID, loan_type, cust_ID, branch_ID, amount]",
        "Response": "Table: Bank_Branches"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO game (stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition) VALUES (9, 9, 2009, '8 August 2009', 'Pakhtakor', 'Bunyodkor', '1\u20130', 'Cup');\nDatabase State:\n- Table: stadium, Columns: [id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]\n- Table: Matches, Columns: [stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition]\n- Table: injury_accident, Columns: [game_id, id, Player, Injury, Number_of_matches, Source]",
        "Response": "Table: Matches"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO price (ID, price) VALUES (57, 40000.0);\nDatabase State:\n- Table: price, Columns: [ID, price]\n- Table: data, Columns: [ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name]\n- Table: production, Columns: [ID, model_year, country]\n- Table: country, Columns: [origin, country]",
        "Response": "Table: price"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (f1, f2) VALUES (3, 6);\nDatabase State:\n- Table: user_profiles, Columns: [uid]\n- Table: follows, Columns: [f1, f2]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, coordinate_location, elevation_above_sea_level, image, located_in_the_administrative_territorial_entity, mountain_range, google_knowledge_graph_id, part_of) VALUES ('Pta\u010di vrchy', 'mountain in Czech Republic', 'mountain', 'Czech Republic', '50.8469', 1012.799999999999955, 'Pta\u010d\u00ed kupy z Holubn\u00edku.jpg', 'Hejnice', 'Jizera Mountains', '/g/121d1645', 'Jizera Mountains');\nDatabase State:\n- Table: jizera_mountains, Columns: [label, description, instance_of, country, coordinate_location, elevation_above_sea_level, image, located_in_the_administrative_territorial_entity, mountain_range, google_knowledge_graph_id, part_of]",
        "Response": "Table: jizera_mountains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movie_id, person_id, character_name, gender_id, cast_order) VALUES (9869, 2231, 'Lt. Cmdr. Robby Jackson', 2, 5);\nDatabase State:\n- Table: keyword, Columns: [keyword_id, keyword_name]\n- Table: genre, Columns: [genre_id, genre_name]\n- Table: movie_languages, Columns: [movie_id, language_id, language_role_id]\n- Table: movie_crew, Columns: [movie_id, person_id, department_id, job]\n- Table: movie_genres, Columns: [movie_id, genre_id]",
        "Response": "Table: movie_cast"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Classification (GeneID, Localization) VALUES ('G235628', 'nucleus');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Classification"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Rank, Club_ID, Gold, Silver, Bronze, Total) VALUES (6.0, 6, 2.0, 1.0, 0.0, 3.0);\nDatabase State:\n- Table: club_rank, Columns: [Rank, Club_ID, Gold, Silver, Bronze, Total]\n- Table: club, Columns: [Club_ID, name, Region, Start_year]\n- Table: player, Columns: [Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points]\n- Table: competition, Columns: [Competition_ID, Year, Competition_type, Country]\n- Table: competition_result, Columns: [Competition_ID, Club_ID_1, Club_ID_2, Score]",
        "Response": "Table: club_rank"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO dna_recombination_mediator_protein_a (label, description, encoded_by, uniprot_protein_id, found_in_taxon, subclass_of, biological_process, instance_of, refseq_protein_id, part_of) VALUES ('Polypeptide deformylase lmo1274', 'microbial protein found in Listeria monocytogenes EGD-e', 'polypeptide deformylase lmo1274', 'Q8Y7K3', 'Listeria monocytogenes EGD-e', 'protein', 'DNA mediated transformation', 'protein', 'NP_464799', 'DNA recombination-mediator protein A');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: Protein_DNA_Recombination_Mediator, Columns: [label, description, encoded_by, uniprot_protein_id, found_in_taxon, subclass_of, biological_process, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: Protein_DNA_Recombination_Mediator"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO people (People_ID, District, Name, Party, Age) VALUES (3, 'New York 3', 'Daniel Sickles', 'Democratic', 46);\nDatabase State:\n- Table: US_Representatives, Columns: [People_ID, District, Name, Party, Age]",
        "Response": "Table: US_Representatives"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes) VALUES (144319, 197965, 186748, '2015-01-23 00:00:00', 76, 79, 'right', 'medium', 'medium', 73, 72, 44, 74, 57, 78, 74, 74, 69, 79, 85, 79, 80, 75, 84, 78, 67, 72, 45, 74, 56, 45, 74, 75, 71, 31, 37, 39, 14, 13, 8, 8, 14);\nDatabase State:\n- Table: Player_Attributes, Columns: [id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes]\n- Table: Team, Columns: [id, team_api_id, team_fifa_api_id, team_long_name, team_short_name]\n- Table: Player, Columns: [id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight]\n- Table: League, Columns: [id, country_id, name]",
        "Response": "Table: Player_Attributes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID) VALUES ('tw-712335139808874498', 'Tuesday', 11, 22, 'en', 'TRUE', 177, 2, 0, 30, 0.0, 'RT @MallorcaJS: Encuentranos en Scaling your (web)app on AWS el martes 12 abr a las 19:00:http://www.meetup.com/MallorcaJS/events/229757938/?_xtd=gqFyqTE3NDgzMTY1MqFwpmlwaG9uZQ&from=ref', 2737, 'tw-2607623874');\nDatabase State:\n- Table: user, Columns: [UserID, Gender]\n- Table: twitter, Columns: [TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID]",
        "Response": "Table: twitter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details) VALUES (24, 8, 'PP', '2008-08-01 13:57:26', '1973-01-12 14:13:34', '');\nDatabase State:\n- Table: Ref_Template_Types, Columns: [Template_Type_Code, Template_Type_Description]\n- Table: Paragraphs, Columns: [Paragraph_ID, Document_ID, Paragraph_Text, Other_Details]\n- Table: DocumentTemplates, Columns: [Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details]\n- Table: Documents, Columns: [Document_ID, Template_ID, Document_Name, Document_Description, Other_Details]",
        "Response": "Table: DocumentTemplates"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO head_of_state (label, description, instance_of, sex_or_gender, date_of_birth, place_of_birth, name_in_native_language, commons_category, image, member_of_political_party, occupation, position_held, country_of_citizenship, educated_at, viaf_id) VALUES ('Mohamed al-Menfi', 'Libyan politician', 'human', 'male', '+1976-03-03T00:00:00Z', 'Tobruk', '\u0645\u062d\u0645\u062f \u064a\u0648\u0646\u0633 \u0627\u0644\u0645\u0646\u0641\u064a', 'Mohamed al-Menfi', 'Mohamed al-Menfi (cropped).jpg', 'independent politician', 'politician', 'Chairman of the Presidential Council', 'Libya', 'Tobruk University', 'nan');\nDatabase State:\n- Table: Leaders, Columns: [label, description, instance_of, sex_or_gender, date_of_birth, place_of_birth, name_in_native_language, commons_category, image, member_of_political_party, occupation, position_held, country_of_citizenship, educated_at, viaf_id]\n- Table: economy_of_africa, Columns: [label, description, topics_main_category, instance_of, commons_category, quora_topic_id, location, country, subclass_of, inflation_rate, nominal_gdp, nominal_gdp_per_capita, ppp_gdp_per_capita, gdp_ppp, real_gdp_growth_rate, store_norske_leksikon_id]",
        "Response": "Table: Leaders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO party (Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts) VALUES (5, 'Qlubtempo', 'Hemkade 48 Zaandam, Heineken Music Hall Amsterdam', '2001', '2007', 31);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: party"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee) VALUES (1, '09.1 9A', 1, 'Bates, Gail H. Gail H. Bates', 1, 2002.0, 'Appropriations');\nDatabase State:\n- Table: party, Columns: [Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate]\n- Table: county, Columns: [County_Id, County_name, Population, Zip_code]",
        "Response": "Table: election"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Train_ID, Train_Num, Name, From, Arrival, Railway_ID) VALUES (9, '11401', 'Nandigram Exp', 'Mumbai CST', '13:28', 10);\nDatabase State:\n- Table: railway, Columns: [Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber]\n- Table: train, Columns: [Train_ID, Train_Num, Name, From, Arrival, Railway_ID]",
        "Response": "Table: train"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO playlist_tracks (playlist_id, track_id) VALUES (1, 1434);\nDatabase State:\n- Table: artists, Columns: [id, name]\n- Table: tracks, Columns: [id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]\n- Table: genres, Columns: [id, name]\n- Table: employees, Columns: [id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]\n- Table: invoices, Columns: [id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total]\n- Table: playlist_tracks, Columns: [playlist_id, track_id]\n- Table: invoice_lines, Columns: [id, invoice_id, track_id, unit_price, quantity]\n- Table: albums, Columns: [id, title, artist_id]\n- Table: media_types, Columns: [id, name]\n- Table: playlists, Columns: [id, name]\n- Table: customers, Columns: [id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]",
        "Response": "Table: playlist_tracks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, performer, record_label, instance_of, musicbrainz_release_group_id, discogs_master_id, genre, followed_by, spotify_album_id, follows, distribution_format, publication_date, form_of_creative_work, part_of, apple_music_album_id_us_version, deezer_album_id, genius_album_id, youtube_playlist_id) VALUES ('Nero Nemesis', 'album by Booba', 'Booba', 'Tallac Records', 'album', '00e2061c-4f59-4e1a-8243-c57f81809629', '1218786.0', 'French hip hop', 'Autopsie 0', '6yEGlMQ1AkXeDPERJTv2aN', 'D.U.C', 'music streaming', '+2015-12-04T00:00:00Z', 'studio album', 'Booba discography', '1440833914.0', '11853434.0', 'Booba/Nero-nemesis', 'OLAK5uy_kvFEUdjzcRihBBtbeU56_FZzXoIoQjtIE');\nDatabase State:\n- Table: booba_discography, Columns: [label, description, instance_of, record_label, performer, follows, followed_by, genre, publication_date, form_of_creative_work, part_of, distribution_format, genius_album_id, deezer_album_id, youtube_playlist_id, spotify_album_id]\n- Table: followed_by, Columns: [label, description, performer, record_label, instance_of, musicbrainz_release_group_id, follows, followed_by, genre, publication_date, form_of_creative_work, part_of, distribution_format, apple_music_album_id_us_version, deezer_album_id, spotify_album_id, genius_album_id, youtube_playlist_id]\n- Table: follows, Columns: [label, description, performer, record_label, instance_of, musicbrainz_release_group_id, discogs_master_id, genre, followed_by, spotify_album_id, follows, distribution_format, publication_date, form_of_creative_work, part_of, apple_music_album_id_us_version, deezer_album_id, genius_album_id, youtube_playlist_id]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Document_Locations (Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To) VALUES (111, 'x', '1986-10-14 17:53:39', '2010-11-26 19:22:50');\nDatabase State:\n- Table: Ref_Calendar, Columns: [Calendar_Date, Day_Number]\n- Table: All_Documents, Columns: [Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details]\n- Table: Ref_Locations, Columns: [Location_Code, Location_Name, Location_Description]\n- Table: Ref_Document_Types, Columns: [Document_Type_Code, Document_Type_Name, Document_Type_Description]\n- Table: Document_Locations, Columns: [Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To]\n- Table: Roles, Columns: [Role_Code, Role_Name, Role_Description]\n- Table: Employees, Columns: [Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details]",
        "Response": "Table: Document_Locations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO players_teams (id, playerID, year, stint, tmID, lgID, GP, GS, minutes, points, oRebounds, dRebounds, rebounds, assists, steals, blocks, turnovers, PF, fgAttempted, fgMade, ftAttempted, ftMade, threeAttempted, threeMade, PostGP, PostGS, PostMinutes, PostPoints, PostoRebounds, PostdRebounds, PostRebounds, PostAssists, PostSteals, PostBlocks, PostTurnovers, PostPF, PostfgAttempted, PostfgMade, PostftAttempted, PostftMade, PostthreeAttempted, PostthreeMade, note) VALUES (20142, 'stevede01', 2001, 1, 'UTA', 'NBA', 67, 0, 1134, 325, 44, 87, 131, 116, 29, 24, 68, 82, 371, 143, 53, 37, 25, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL);\nDatabase State:\n- Table: draft, Columns: [id, draftYear, draftRound, draftSelection, draftOverall, tmID, firstName, lastName, suffixName, playerID, draftFrom, lgID]\n- Table: Players_Stats, Columns: [id, playerID, year, stint, tmID, lgID, GP, GS, minutes, points, oRebounds, dRebounds, rebounds, assists, steals, blocks, turnovers, PF, fgAttempted, fgMade, ftAttempted, ftMade, threeAttempted, threeMade, PostGP, PostGS, PostMinutes, PostPoints, PostoRebounds, PostdRebounds, PostRebounds, PostAssists, PostSteals, PostBlocks, PostTurnovers, PostPF, PostfgAttempted, PostfgMade, PostftAttempted, PostftMade, PostthreeAttempted, PostthreeMade, note]\n- Table: awards_players, Columns: [playerID, award, year, lgID, note, pos]",
        "Response": "Table: Players_Stats"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO train (Train_ID, Name, Time, Service) VALUES (6, 'Island Express', '11:15', 'Daily');\nDatabase State:\n- Table: train_station, Columns: [Train_ID, Station_ID]\n- Table: station, Columns: [Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms]\n- Table: Train_Schedule, Columns: [Train_ID, Name, Time, Service]",
        "Response": "Table: Train_Schedule"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO south_superstore (Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit) VALUES (10828, 'CA-2012-140718', '2014-07-02', '2014-07-04', 'First Class', 'FA-14230', 'South', 'OFF-PA-10002250', 9.39199999999999946, 2, 0.2000000000000000111, 3.2871999999999999);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: south_superstore"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, topics_main_category, instance_of, country, commons_category, located_in_the_administrative_territorial_entity, head_of_government, coordinate_location, curlie_id, musicbrainz_area_id, gnd_id, viaf_id, library_of_congress_authority_id, freebase_id, locator_map_image, geonames_id, category_for_people_who_died_here, category_of_associated_people, capital_of, page_banner, elevation_above_sea_level, gnis_id, official_website, facebook_places_id, encyclop\u00e6dia_britannica_online_id, population, fips_55_3_locations_in_the_us, inception, local_dialing_code, quora_topic_id, area, us_national_archives_identifier, gran_enciclop\u00e8dia_catalana_id, flag_image, archinform_location_id, whos_on_first_id, located_in_time_zone, worldcat_identities_id, interlingual_index_id, wordnet_31_synset_id, tripadvisor_id, google_maps_customer_id, ballotpedia_id, image, subreddit, water_as_percent_of_area, online_pwn_encyclopedia_id, store_norske_leksikon_id, national_library_of_israel_j9u_id, wikisimpsons_id, per_capita_income, number_of_households, hashtag) VALUES ('Nevada', 'state of the United States of America', 'Category:Nevada', 'U.S. state', 'United States of America', 'Nevada', 'United States of America', 'Joe Lombardo', '39.0', 'Regional/North_America/United_States/Nevada/', 'ab47b3b2-838d-463c-9907-30dcd3438d65', '4041996-4', '130694101', 'n79072716', '/m/059_c', 'Nevada in United States.svg', '5509151.0', 'Category:Death in Nevada', 'Category:People from Nevada', 'nan', 'Red Rock Canyon, Nevada banner.jpg', 1676.0, '1779793.0', 'https://nv.gov/', 'nan', 'place/Nevada-state', 3104614.0, 'nan', '+1864-10-31T00:00:00Z', 'nan', 'Nevada-state-1', 286380.0, '10045253.0', '45878.0', 'Flag of Nevada.svg', '3085.0', '85688531.0', 'Pacific Time Zone', 'lccn-n79072716', 'i84508', '09133059-n', '28949.0', '14935910583306589619', 'Nevada', 'nan', 'Nevada', 0.7199999999999999734, '3946930.0', 'Nevada', '9.870075643414052e+17', '49977.0', 32629.0, 1130011.0, 'Nevada');\nDatabase State:\n- Table: legislature_of_a_us_state, Columns: [label, description, instance_of, topics_main_category, viaf_id, freebase_id, has_parts, country, applies_to_jurisdiction, official_website, described_by_source, snac_ark_id, headquarters_location]\n- Table: place_of_death, Columns: [label, description, instance_of, category_combines_topics, category_contains, commons_category]\n- Table: head_of_government, Columns: [label, description, member_of_political_party, educated_at, instance_of, date_of_birth, sex_or_gender, country_of_citizenship, given_name, occupation, position_held, place_of_birth, family_name]\n- Table: administrative_centre, Columns: [label, description, country, shares_border_with, capital, commons_category, coordinate_location, located_in_the_administrative_territorial_entity, official_website, viaf_id, topics_main_category, instance_of, freebase_id, gnis_id, category_for_people_born_here, geonames_id, category_of_associated_people, inception, locator_map_image, openstreetmap_relation_id, population, area, us_national_archives_identifier, contains_the_administrative_territorial_entity, water_as_percent_of_area, getty_thesaurus_of_geographic_names_id, named_after, native_label, archinform_location_id, wolfram_language_entity_code, whos_on_first_id, category_for_maps, worldcat_identities_id, hasc, inaturalist_place_id, per_capita_income, number_of_households, image]\n- Table: jurisdiction, Columns: [label, description, dewey_decimal_classification, country, shares_border_with, capital, flag_image, named_after, iso_3166_2_code, commons_category, flag, coordinate_location, openstreetmap_relation_id, located_in_the_administrative_territorial_entity, official_website, page_banner, topics_main_category, curlie_id, musicbrainz_area_id, instance_of, legislative_body, freebase_id, gnis_id, fips_10_4_countries_and_regions, topics_main_wikimedia_portal, category_for_people_born_here, category_for_people_who_died_here, geonames_id, gnd_id, category_for_films_shot_at_this_location, category_of_people_buried_here, category_of_associated_people, office_held_by_head_of_government, inception, located_in_or_next_to_body_of_water, described_by_source, locator_map_image, viaf_id, pronunciation_audio, head_of_government, area, library_of_congress_authority_id, population, located_in_time_zone, bbc_things_id, quora_topic_id, isni, ringgold_id, highest_point, lowest_point, subreddit, short_name, nickname, motto_text, contains_the_administrative_territorial_entity, yso_id, elevation_above_sea_level, mesh_descriptor_id, us_national_archives_identifier, gacs_id, history_of_topic, encyclop\u00e6dia_britannica_online_id, fips_5_2_alpha_code_us_states, fips_5_2_numeric_code_us_states, geography_of_topic, demonym, wikimedia_outline, water_as_percent_of_area, coordinates_of_geographic_center, executive_body, foundational_text, highest_judicial_authority, coordinates_of_northernmost_point, getty_thesaurus_of_geographic_names_id, part_of, c_span_organization_id, native_label, archinform_location_id, geoshape, wolfram_language_entity_code, catholic_encyclopedia_id, official_symbol, comic_vine_id, maximum_temperature_record, loc_and_marc_vocabularies_id, language_used, whos_on_first_id, gran_enciclop\u00e8dia_catalana_id, omegawiki_defined_meaning, minimum_temperature_record, category_for_maps, larousse_id, treccanis_dizionario_di_storia_id, worldcat_identities_id, nkcr_aut_id, anthem, seal_image, has_seal_badge_or_sigil, kbpedia_id, rkd_thesaurus_id, hasc, interlingual_index_id, the_top_tens_id, economy_of_topic, open_civic_data_division_id, tripadvisor_id, google_maps_customer_id, google_news_topics_id, category_for_the_view_of_the_item, github_topic, wordnet_31_synset_id, demographics_of_topic, ballotpedia_id, inaturalist_place_id, archives_at, marriageable_age, compulsory_education_maximum_age, openstreetmap_zoom_level, topics_main_template, different_from, uk_parliament_thesaurus_id, online_pwn_encyclopedia_id, store_norske_leksikon_id, twitter_topic_id, wikisimpsons_id, related_category, den_store_danske_id, per_capita_income, mean_age, number_of_households, hashtag, national_library_of_israel_j9u_id, national_library_of_israel_id_old, idref_id, french_vikidia_id, english_vikidia_id, italian_vikidia_id]\n- Table: Counties, Columns: [label, description, topics_main_category, instance_of, country, commons_category, located_in_the_administrative_territorial_entity, head_of_government, coordinate_location, curlie_id, musicbrainz_area_id, gnd_id, viaf_id, library_of_congress_authority_id, freebase_id, locator_map_image, geonames_id, category_for_people_who_died_here, category_of_associated_people, capital_of, page_banner, elevation_above_sea_level, gnis_id, official_website, facebook_places_id, encyclop\u00e6dia_britannica_online_id, population, fips_55_3_locations_in_the_us, inception, local_dialing_code, quora_topic_id, area, us_national_archives_identifier, gran_enciclop\u00e8dia_catalana_id, flag_image, archinform_location_id, whos_on_first_id, located_in_time_zone, worldcat_identities_id, interlingual_index_id, wordnet_31_synset_id, tripadvisor_id, google_maps_customer_id, ballotpedia_id, image, subreddit, water_as_percent_of_area, online_pwn_encyclopedia_id, store_norske_leksikon_id, national_library_of_israel_j9u_id, wikisimpsons_id, per_capita_income, number_of_households, hashtag]",
        "Response": "Table: Counties"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cars (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num) VALUES (28, 8, 4, 'rectangle', 'short', 'not_double', 'none', 2, 'rectangle', 1);\nDatabase State:\n- Table: cars, Columns: [id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num]",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO ethnicGroup (Country, Name, Percentage) VALUES ('GUY', 'East Indian', 51.0);\nDatabase State:\n- Table: islandIn, Columns: [Island, Sea, Lake, River]\n- Table: city, Columns: [Name, Country, Province, Population, Longitude, Latitude]\n- Table: sea, Columns: [Name, Depth]\n- Table: geo_desert, Columns: [Desert, Country, Province]\n- Table: desert, Columns: [Name, Area, Longitude, Latitude]\n- Table: geo_island, Columns: [Island, Country, Province]\n- Table: population, Columns: [Country, Population_Growth, Infant_Mortality]\n- Table: geo_source, Columns: [River, Country, Province]\n- Table: economy, Columns: [Country, GDP, Agriculture, Service, Industry, Inflation]\n- Table: encompasses, Columns: [Country, Continent, Percentage]\n- Table: mountain, Columns: [Name, Mountains, Height, Type, Longitude, Latitude]\n- Table: geo_lake, Columns: [Lake, Country, Province]\n- Table: target, Columns: [Country, Target]",
        "Response": "Table: ethnicGroup"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode) VALUES ('Sony Mobile Communications', 'XPERIA T, XPERIA J', 'Full', 'joyn Hot Fixes', 'Approved (awarded 15.11.12)', 'X5', '1');\nDatabase State:\n- Table: phone, Columns: [Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode]",
        "Response": "Table: phone"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('flagellar basal-body rod protein FlgC RSP_0082', 'microbial gene found in Rhodobacter sphaeroides 2.4.1', 'Rhodobacter sphaeroides 2.4.1', '3719951', 'gene', 'Flagellar basal-body rod protein FlgC RSP_0082', 'RSP_0082', 'gene', '1792446', 'reverse strand', '1792030');\nDatabase State:\n- Table: Gene_Info, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: flagellar_basal_body_rod_protein_flgc, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, biological_process, cell_component, has_parts, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: Gene_Info"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO biological_process (label, description, gene_ontology_id, subclass_of, exact_match, instance_of) VALUES ('establishment of mitotic spindle orientation', 'A cell cycle process that sets the alignment of mitotic spindle relative to other cellular structures.', 'GO:0000132', 'establishment of spindle orientation', 'http://purl.obolibrary.org/obo/GO_0000132', 'biological process');\nDatabase State:\n- Table: orthology, Columns: [label, description, entrez_gene_id, subclass_of, ensembl_gene_id, homologene_id, chromosome, found_in_taxon, refseq_rna_id, ensembl_transcript_id, ortholog, exact_match, genomic_end, strand_orientation, genomic_start, instance_of, cytogenetic_location, expressed_in]\n- Table: Biological_Processes, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]",
        "Response": "Table: Biological_Processes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (inspection_id, point_id, fine, inspector_comment) VALUES (1214729, 34, 0, 'CORRECTED');\nDatabase State:\n- Table: establishment, Columns: [license_no, dba_name, aka_name, facility_type, risk_level, address, city, state, zip, latitude, longitude, ward]\n- Table: inspection, Columns: [inspection_id, inspection_date, inspection_type, results, employee_id, license_no, followup_to]\n- Table: violation, Columns: [inspection_id, point_id, fine, inspector_comment]\n- Table: employee, Columns: [employee_id, first_name, last_name, address, city, state, zip, phone, title, salary, supervisor]",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO order_history (history_id, order_id, status_id, status_date) VALUES (4205, 6349, 1, '2022-08-06 15:45:09');\nDatabase State:\n- Table: OrderStatusHistory, Columns: [history_id, order_id, status_id, status_date]\n- Table: publisher, Columns: [publisher_id, publisher_name]",
        "Response": "Table: OrderStatusHistory"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO source_of_information (label, description, instance_of, rfc_id, title, language_of_work_or_name, publisher, publication_date, doi, author_name_string, number_of_pages, full_work_available_at_url, dblp_publication_id) VALUES ('RFC 1876: A Means for Expressing Location Information in the Domain Name System', 'request for comments publication', 'Request for Comments', '1876', 'A Means for Expressing Location Information in the Domain Name System', 'English', 'Internet Engineering Task Force', '+1996-01-01T00:00:00Z', '10.17487/RFC1876', 'C. Davis', 18.0, 'https://tools.ietf.org/html/rfc1876', 'journals/rfc/rfc1876');\nDatabase State:\n- Table: resource_record, Columns: [label, description, subclass_of, described_by_source, series_ordinal, short_name]\n- Table: RFC_Publications, Columns: [label, description, instance_of, rfc_id, title, language_of_work_or_name, publisher, publication_date, doi, author_name_string, number_of_pages, full_work_available_at_url, dblp_publication_id]",
        "Response": "Table: RFC_Publications"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customer_Addresses (customer_id, address_id, date_from, date_to) VALUES (2, 9, '2017-12-11 05:00:22', '2018-03-20 20:52:34');\nDatabase State:\n- Table: Addresses, Columns: [address_id, address_details]\n- Table: Customers, Columns: [customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email]\n- Table: Product_Suppliers, Columns: [product_id, supplier_id, date_supplied_from, date_supplied_to, total_amount_purchased, total_value_purchased]\n- Table: Staff_Department_Assignments, Columns: [staff_id, department_id, date_assigned_from, job_title_code, date_assigned_to]\n- Table: Products, Columns: [product_id, product_type_code, product_name, product_price]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status_code, order_date]\n- Table: Order_Items, Columns: [order_item_id, order_id, product_id]\n- Table: Departments, Columns: [department_id, dept_store_id, department_name]\n- Table: Staff, Columns: [staff_id, staff_gender, staff_name]\n- Table: Department_Stores, Columns: [dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email]\n- Table: Supplier_Addresses, Columns: [supplier_id, address_id, date_from, date_to]\n- Table: Customer_Address_History, Columns: [customer_id, address_id, date_from, date_to]\n- Table: Department_Store_Chain, Columns: [dept_store_chain_id, dept_store_chain_name]",
        "Response": "Table: Customer_Address_History"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('hypothetical protein HI0227', 'microbial gene found in Haemophilus influenzae Rd KW20', 'Haemophilus influenzae Rd KW20', '951142', 'gene', 'Hypothetical protein HI0227', 'HI0227', 'gene', '257546', 'reverse strand', '257079');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO screen_mode (Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type) VALUES (3.0, '80 \u00d7 25', '640 \u00d7 200', 2.0, 16.0, '4000\u20137FFF', 'Text');\nDatabase State:\n- Table: phone, Columns: [Company_name, Hardware_Model_name, Accreditation_type, Accreditation_level, Date, chip_model, screen_mode]\n- Table: Screen_Configurations, Columns: [Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type]\n- Table: chip_model, Columns: [Model_name, Launch_year, RAM_MiB, ROM_MiB, Slots, WiFi, Bluetooth]",
        "Response": "Table: Screen_Configurations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encodes (label, description, ensembl_protein_id, found_in_taxon, uniprot_protein_id, encoded_by, refseq_protein_id, biological_process, molecular_function, cell_component, has_parts, instance_of, part_of) VALUES ('KIT proto-oncogene receptor tyrosine kinase', 'mammalian protein found in Mus musculus', 'ENSMUSP00000005815', 'house mouse', 'P05532', 'Kit', 'NP_001116205', 'melanocyte migration', 'stem cell factor receptor activity', 'membrane', 'Immunoglobulin subtype', 'protein', 'Immunoglobulin-like fold');\nDatabase State:\n- Table: biological_variant_of, Columns: [label, description, entrez_gene_id, subclass_of, ensembl_gene_id, ensembl_transcript_id, hgnc_gene_symbol, hgnc_id, homologene_id, refseq_rna_id, ortholog, image, encodes, found_in_taxon, exact_match, strand_orientation, genomic_end, genomic_start, chromosome, gene_atlas_image, instance_of, cytogenetic_location, omim_id, expressed_in, civic_gene_id, genetic_association]\n- Table: Proteins, Columns: [label, description, ensembl_protein_id, found_in_taxon, uniprot_protein_id, encoded_by, refseq_protein_id, biological_process, molecular_function, cell_component, has_parts, instance_of, part_of]",
        "Response": "Table: Proteins"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, collection, image, location, inception, inventory_number, height, width) VALUES ('\u8fd1\u4ee3  \u5085\u62b1\u77f3  \u6e58\u592b\u4eba  \u518a\u9801|Goddess of the River Xiang', 'album leaf by Fu Baoshi (MET, 1986.267.277)', 'album leaf', 'Metropolitan Museum of Art', 'nan', 'Metropolitan Museum of Art', '+1947-00-00T00:00:00Z', '1986.267.277', NULL, NULL);\nDatabase State:\n- Table: collection, Columns: [label, description, commons_category, coordinate_location, freebase_id, viaf_id, idref_id, isni, library_of_congress_authority_id, official_website, inception, image, located_in_the_administrative_territorial_entity, instance_of, commons_institution_page, country, biblioth\u00e8que_nationale_de_france_id, worldcat_identities_id, national_library_of_israel_j9u_id]",
        "Response": "Table: album_leaf"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO replacing_subject (label, description, inception, replaced_by, replaces, instance_of, applies_to_jurisdiction, dissolved_abolished_or_demolished_date) VALUES ('B\u0113rzi\u0146\u0161 cabinet', 'nan', '+2000-05-05T00:00:00Z', 'Rep\u0161e cabinet', '3rd \u0160\u0137\u0113le Cabinet', 'Government of Latvia', 'Latvia', '+2002-11-07T00:00:00Z');\nDatabase State:\n- Table: replaced_entity, Columns: [label, description, instance_of, replaced_by, replaces, applies_to_jurisdiction, dissolved_abolished_or_demolished_date, inception]",
        "Response": "Table: replacing_subject"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO games_competitor (id, games_id, person_id, age) VALUES (40484, 27, 30831, 29);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: games_competitor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO rental (rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update) VALUES (7286, '2005-07-27 12:23:49.0', 3452, 498, '2005-08-04 07:57:49.0', 1, '2006-02-15 21:30:53.0');\nDatabase State:\n- Table: actor, Columns: [actor_id, first_name, last_name, last_update]\n- Table: category, Columns: [category_id, name, last_update]\n- Table: staff, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]\n- Table: film_actor, Columns: [actor_id, film_id, last_update]\n- Table: film_text, Columns: [film_id, title, description]\n- Table: rental, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]\n- Table: customer, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: payment, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: inventory, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: city, Columns: [city_id, city, country_id, last_update]\n- Table: country, Columns: [country_id, country, last_update]\n- Table: film_category, Columns: [film_id, category_id, last_update]\n- Table: address, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: store, Columns: [store_id, manager_staff_id, address_id, last_update]",
        "Response": "Table: rental"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (RootBeerID, BrandID, ContainerType, LocationID, PurchaseDate) VALUES (106123, 10017, 'Can', 2, '2015-05-20');\nDatabase State:\n- Table: rootbeerbrand, Columns: [BrandID, BrandName, FirstBrewedYear, BreweryName, City, State, Country, Description, CaneSugar, CornSyrup, Honey, ArtificialSweetener, Caffeinated, Alcoholic, AvailableInCans, AvailableInBottles, AvailableInKegs, Website, FacebookPage, Twitter, WholesaleCost, CurrentRetailPrice]\n- Table: transaction, Columns: [TransactionID, CreditCardNumber, CustomerID, TransactionDate, CreditCardType, LocationID, RootBeerID, PurchasePrice]\n- Table: RootBeerPurchases, Columns: [RootBeerID, BrandID, ContainerType, LocationID, PurchaseDate]\n- Table: geolocation, Columns: [LocationID, Latitude, Longitude]\n- Table: location, Columns: [LocationID, LocationName, StreetAddress, City, State, ZipCode]\n- Table: customers, Columns: [CustomerID, First, Last, StreetAddress, City, State, ZipCode, Email, PhoneNumber, FirstPurchaseDate, SubscribedToEmailList, Gender]\n- Table: rootbeerreview, Columns: [CustomerID, BrandID, StarRating, ReviewDate, Review]",
        "Response": "Table: RootBeerPurchases"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, brewery_id, abv, ibu, name, style, ounces) VALUES (358, 160, 0.06700000000000000399, 47.0, 'Hop Knot IPA', 'American IPA', 12.0);\nDatabase State:\n- Table: breweries, Columns: [id, name, city, state]\n- Table: beers, Columns: [id, brewery_id, abv, ibu, name, style, ounces]",
        "Response": "Table: beers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO followed_by (label, description, instance_of, competition_class, part_of, described_at_url, follows, followed_by, point_in_time, sport) VALUES ('1973 European Rowing Championships \u2013 men''s coxed pair', 'rowing event', 'rowing event', 'men''s coxed pair', '1973 European Rowing Championships', 'http://www.worldrowing.com/events/1973-european-championships/mens-coxed-pair/', '1971 European Rowing Championships \u2013 men''s coxed pair', '2010 European Rowing Championships \u2013 men''s coxed pair', '+1973-00-00T00:00:00Z', 'rowing');\nDatabase State:\n- Table: competition_class, Columns: [label, description, instance_of, competition_class, short_name, sport, catalog_code]\n- Table: RowingEvents, Columns: [label, description, instance_of, competition_class, part_of, described_at_url, follows, followed_by, point_in_time, sport]\n- Table: 1971_european_rowing_championships, Columns: [label, description, instance_of, competition_class, part_of, described_at_url, follows, followed_by, point_in_time, sport]",
        "Response": "Table: RowingEvents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, gene_ontology_id, subclass_of, exact_match, instance_of) VALUES ('microtubule-based process', 'Any cellular process that depends upon or alters the microtubule cytoskeleton, that part of the cytoskeleton comprising microtubules and their associated proteins.', 'GO:0007017', 'cellular process', 'http://purl.obolibrary.org/obo/GO_0007017', 'biological process');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, ensembl_gene_id, ensembl_transcript_id, homologene_id, refseq_rna_id, ortholog, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, chromosome, instance_of, expressed_in]\n- Table: expressed_in, Columns: [label, description, subclass_of, foundational_model_of_anatomy_id, instance_of]\n- Table: biological_process, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]\n- Table: chromosome, Columns: [label, description, refseq_genome_id, found_in_taxon, instance_of]\n- Table: cellular_component, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]",
        "Response": "Table: biological_process"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, refseq_protein_id, found_in_taxon, encoded_by, cell_component, has_parts, instance_of, part_of) VALUES ('Bll5638', 'microbial protein found in Bradyrhizobium diazoefficiens USDA 110', 'Q89IJ6', 'NP_772278', 'Bradyrhizobium japonicum USDA 110', 'bll5638 bll5638', 'membrane', 'Glycosyltransferase RgtA/B/C/D-like', 'protein', 'membrane proteins');\nDatabase State:\n- Table: taxon, Columns: [label, description, taxon_name, taxon_rank, freebase_id, ncbi_taxonomy_id, parent_taxon, instance_of, gbif_taxon_id, itis_tsn, gram_staining, irmng_id, lpsn_url, microsoft_academic_id]\n- Table: natural_product, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]\n- Table: part, Columns: [label, description, instance_of, interpro_id]",
        "Response": "Table: glycosyltransferase_rgta_b_c_d_like_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO followed_by (label, description, instance_of, sport, country, follows, followed_by, point_in_time, edition_number, winner, event_distance) VALUES ('2017 Gent\u2013Wevelgem', 'cycling race', 'Gent\u2013Wevelgem', 'road bicycle racing', 'Belgium', '2016 Gent\u2013Wevelgem', '2018 Gent\u2013Wevelgem', '+2017-03-26T00:00:00Z', '79', 'Greg Van Avermaet', 249.1999999999999887);\nDatabase State:\n- Table: winner, Columns: [label, description, sex_or_gender, date_of_birth, instance_of, occupation, freebase_id, image, place_of_birth, country_of_citizenship, participant_in, given_name, member_of_sports_team, sport, cycling_archives_cyclist_id, procyclingstats_cyclist_id, cyclebase_cyclist_id, m\u00e9moire_du_cyclisme_cyclist_id]\n- Table: follows, Columns: [label, description, instance_of, sport, country, follows, followed_by, point_in_time, edition_number, winner, event_distance, google_knowledge_graph_id]\n- Table: GentWevelgemRaces, Columns: [label, description, instance_of, sport, country, follows, followed_by, point_in_time, edition_number, winner, event_distance]",
        "Response": "Table: GentWevelgemRaces"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (stor_id, ord_num, ord_date, qty, payterms, title_id) VALUES ('7067', 'P2121', '1992-06-15 00:00:00.0', 20, 'Net 30', 'TC4203');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SportsInfo (StuID, SportName, HoursPerWeek, GamesPlayed, OnScholarship) VALUES (1002, 'Football', 7, 20, 'Y');\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Video_Games, Columns: [GameID, GName, GType]\n- Table: StudentAthletes, Columns: [StuID, SportName, HoursPerWeek, GamesPlayed, OnScholarship]\n- Table: Plays_Games, Columns: [StuID, GameID, Hours_Played]",
        "Response": "Table: StudentAthletes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Asset_Parts (asset_id, part_id) VALUES (3, 2);\nDatabase State:\n- Table: Third_Party_Companies, Columns: [company_id, company_type, company_name, company_address, other_company_details]\n- Table: Parts, Columns: [part_id, part_name, chargeable_yn, chargeable_amount, other_part_details]\n- Table: Engineer_Skills, Columns: [engineer_id, skill_id]\n- Table: Fault_Log, Columns: [fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details]\n- Table: Assets, Columns: [asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details]\n- Table: Maintenance_Engineers, Columns: [engineer_id, company_id, first_name, last_name, other_details]\n- Table: Skills_Required_To_Fix, Columns: [part_fault_id, skill_id]\n- Table: Asset_Parts_Assignments, Columns: [asset_id, part_id]\n- Table: Skills, Columns: [skill_id, skill_code, skill_description]\n- Table: Staff, Columns: [staff_id, staff_name, gender, other_staff_details]",
        "Response": "Table: Asset_Parts_Assignments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO s100_cabp_9k_type_calcium_binding_subdomain_protein_family (label, description, encoded_by, uniprot_protein_id, ensembl_protein_id, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of) VALUES ('S100 calcium binding protein W', 'Protein found in Danio rerio', 's100w', 'A0A0R4IVA0', 'ENSDARP00000131329', 'calcium ion binding', 'nan', 'S100/CaBP-9k-type, calcium binding, subdomain', 'Danio rerio', 'NP_001313380', 'protein', 'Protein S100-A11');\nDatabase State:\n- Table: molecular_function, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]",
        "Response": "Table: s100_cabp_9k_type_calcium_binding_subdomain_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (eid, aid) VALUES (310454876, 8);\nDatabase State:\n- Table: flight, Columns: [flno, origin, destination, distance, departure_date, arrival_date, price, aid]",
        "Response": "Table: certificate"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result) VALUES (9, 1989, 'Dolores Klaich', 'Heavy Gilt', 'Naiad Press', 'Lesb. M/SF', 'Nom');\nDatabase State:\n- Table: Book_Awards, Columns: [book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result]\n- Table: movie, Columns: [movie_id, Title, Year, Director, Budget_million, Gross_worldwide]\n- Table: culture_company, Columns: [Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id]",
        "Response": "Table: Book_Awards"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, courseLevel) VALUES (67, 'Level_500');\nDatabase State:\n- Table: Courses, Columns: [course_id, courseLevel]\n- Table: advisedBy, Columns: [p_id, p_id_dummy]\n- Table: taughtBy, Columns: [course_id, p_id]",
        "Response": "Table: Courses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Products (product_id, product_name, product_details) VALUES (6, 'clothes', NULL);\nDatabase State:\n- Table: Orders, Columns: [order_id, customer_id, order_status, date_order_placed, order_details]\n- Table: Shipment_Items, Columns: [shipment_id, order_item_id]\n- Table: Invoices, Columns: [invoice_number, invoice_date, invoice_details]\n- Table: Order_Items, Columns: [order_item_id, product_id, order_id, order_item_status, order_item_details]\n- Table: Shipments, Columns: [shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details]\n- Table: Customers, Columns: [customer_id, customer_name, customer_details]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID) VALUES (90, 'Executive', 100, 1700);\nDatabase State:\n- Table: employees, Columns: [EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]\n- Table: countries, Columns: [COUNTRY_ID, COUNTRY_NAME, REGION_ID]\n- Table: job_history, Columns: [EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID]\n- Table: Departments, Columns: [DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]\n- Table: regions, Columns: [REGION_ID, REGION_NAME]\n- Table: jobs, Columns: [JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]",
        "Response": "Table: Departments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO head_of_government (label, description, place_of_birth, date_of_birth, country_of_citizenship, instance_of, sex_or_gender, position_held, member_of_political_party, image, occupation, given_name, whos_who_in_france_biography_id, twitter_username, languages_spoken_written_or_signed, google_knowledge_graph_id, social_media_followers) VALUES ('Dani\u00e8le Giazzi', 'French politician', 'Lausanne', '+1955-09-03T00:00:00Z', 'France', 'human', 'female', 'member of the regional council of \u00cele-de-France', 'The Republicans', 'Daniele-Giazzi.jpg', 'politician', 'Dani\u00e8le', 'daniele-giazzi_41059', 'danielegiazzi', 'French', '/g/1hb_fcszb', 3278.0);\nDatabase State:\n- Table: category_for_films_shot_at_this_location, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: city_gates_of_paris, Columns: [label, description, commons_category, coordinate_location, country, instance_of, part_of, located_in_the_administrative_territorial_entity, google_knowledge_graph_id]\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, shares_border_with, country, postal_code, insee_municipality_code, topics_main_category, page_banner, freebase_id, inception, replaces, geonames_id, category_for_films_shot_at_this_location, locator_map_image, image, official_website, population, head_of_government, openstreetmap_relation_id, gnd_id, biblioth\u00e8que_nationale_de_france_id, area, twitter_username, viaf_id, archinform_location_id, isni, annual_number_of_weddings, coat_of_arms_image, contains_the_administrative_territorial_entity, category_for_maps, worldcat_identities_id, gadm_id, detail_map, social_media_followers, facebook_id, factgrid_item_id]\n- Table: given_name, Columns: [label, description, instance_of, said_to_be_the_same_as, language_of_work_or_name, native_label, writing_system, nominis_given_name_id, commons_category, caverphone]",
        "Response": "Table: head_of_government"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee) VALUES (4, '12.1 12A', 3, 'Malone, James E. Jr. James E. Malone, Jr.', 2, 1994.0, 'Environmental Matters (Vice-Chair)');\nDatabase State:\n- Table: county, Columns: [County_Id, County_name, Population, Zip_code]\n- Table: party, Columns: [Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate]",
        "Response": "Table: election"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent) VALUES (9, 'Anhui Satellite TV', 'Anhui Television', 1.780000000000000026, 0.2000000000000000111);\nDatabase State:\n- Table: broadcast_share, Columns: [Channel_ID, Program_ID, Date, Share_in_percent]\n- Table: channel, Columns: [Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent]\n- Table: broadcast, Columns: [Channel_ID, Program_ID, Time_of_day]",
        "Response": "Table: channel"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO player (Player_ID, Player, Team, Age, Position, School_ID) VALUES (6, 'Kyle Skipworth', 'Florida Marlins', 14, 'Catcher', 2);\nDatabase State:\n- Table: school_details, Columns: [School_ID, Nickname, Colors, League, Class, Division]",
        "Response": "Table: player"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (date, store_nbr, item_nbr, units) VALUES ('2012-06-27', 14, 84, 0);\nDatabase State:\n- Table: weather, Columns: [station_nbr, date, tmax, tmin, tavg, depart, dewpoint, wetbulb, heat, cool, sunrise, sunset, codesum, snowfall, preciptotal, stnpressure, sealevel, resultspeed, resultdir, avgspeed]",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO ribosomal_protein_l29_l35_superfamily (label, description, uniprot_protein_id, encoded_by, biological_process, cell_component, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('50S ribosomal protein L29 lpg0337', 'microbial protein found in Legionella pneumophila subsp. pneumophila str. Philadelphia 1', 'Q5ZYN5', '50S ribosomal protein L29 lpg0337', 'protein biosynthesis', 'intracellular anatomical structure', 'structural constituent of ribosome', 'nan', 'Legionella pneumophila subsp. pneumophila str. Philadelphia 1', 'YP_094381', 'protein', 'Ribosomal protein L29/L35 superfamily', 'protein');\nDatabase State:\n- Table: RibosomalProteinSuperfamily, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, cell_component, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]",
        "Response": "Table: RibosomalProteinSuperfamily"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (MovieID, ActorID, Character_Name, creditOrder, pay, screentime) VALUES (283, 1691, 'Grace Connelly', 3, NULL, NULL);\nDatabase State:\n- Table: Movie_Cast, Columns: [MovieID, ActorID, Character_Name, creditOrder, pay, screentime]",
        "Response": "Table: Movie_Cast"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details) VALUES (1, 11, 11, 'Middleware', 'Solved', '2011-03-13 13:11:57', 't', 'k', 'p');\nDatabase State:\n- Table: Problem_Entries, Columns: [problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details]\n- Table: Problems, Columns: [problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details]",
        "Response": "Table: Problem_Entries"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, subclass_of, described_by_source, series_ordinal, short_name) VALUES ('domain name pointer', 'type of resource record in the Domain Name System (DNS)', 'resource record', 'RFC 1035: Domain names - implementation and specification', '12', 'PTR');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: resource_record"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Delivery_Routes (route_id, route_name, other_route_details) VALUES (13, 'Hermiston, Feeney and Daugherty', replace('54645 Ziemann Skyway Suite 987\\nLake Roderickstad, OH 77820','\\n',char(10)));\nDatabase State:\n- Table: Employees, Columns: [employee_id, employee_address_id, employee_name, employee_phone]\n- Table: Customer_Addresses, Columns: [customer_id, address_id, date_from, address_type, date_to]\n- Table: Addresses, Columns: [address_id, address_details, city, zip_postcode, state_province_county, country]\n- Table: Delivery_Information, Columns: [route_id, route_name, other_route_details]",
        "Response": "Table: Delivery_Information"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Song_ID, Title, Singer_ID, Sales, Highest_Position) VALUES (7, 'Left Outside Alone', 5, 275000.0, 3.0);\nDatabase State:\n- Table: singer, Columns: [Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]\n- Table: Songs, Columns: [Song_ID, Title, Singer_ID, Sales, Highest_Position]",
        "Response": "Table: Songs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales (SalesID, SalesPersonID, CustomerID, ProductID, Quantity) VALUES (1522226, 7, 13600, 31, 31);\nDatabase State:\n- Table: Customers, Columns: [CustomerID, FirstName, MiddleInitial, LastName]\n- Table: Employees, Columns: [EmployeeID, FirstName, MiddleInitial, LastName]\n- Table: Products, Columns: [ProductID, Name, Price]\n- Table: SalesRecords, Columns: [SalesID, SalesPersonID, CustomerID, ProductID, Quantity]",
        "Response": "Table: SalesRecords"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO rankings (ranking_date) VALUES (20070507, 264, 201291, 94, 0);\nDatabase State:\n- Table: players, Columns: [player_id, first_name, last_name, hand, birth_date, country_code]\n- Table: matches, Columns: [best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank, loser_rank_points, loser_seed, match_num, minutes, round, score, surface, tourney_date, tourney_id, tourney_level, tourney_name, winner_age, winner_entry, winner_hand, winner_ht, winner_id, winner_ioc, winner_name, winner_rank, winner_rank_points, winner_seed, year]\n- Table: Rankings_History, Columns: [ranking_date]",
        "Response": "Table: Rankings_History"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, refseq_protein_id, found_in_taxon, encoded_by, part_of, instance_of, uniprot_protein_id) VALUES ('Hypothetical protein SCO2375', 'microbial protein found in Streptomyces coelicolor A3(2)', 'NP_626621', 'Streptomyces coelicolor A3(2)', 'hypothetical protein SCO2375', 'Protein of unknown function DUF1023', 'protein', 'Q9RDQ9');\nDatabase State:\n- Table: encodes, Columns: [label, description, refseq_protein_id, found_in_taxon, encoded_by, part_of, instance_of, uniprot_protein_id]\n- Table: Mycobacterium_Tuberculosis_Prote, Columns: [label, description, refseq_protein_id, found_in_taxon, encoded_by, part_of, instance_of, uniprot_protein_id]\n- Table: encoded_by, Columns: [label, description, subclass_of, found_in_taxon, entrez_gene_id, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: Mycobacterium_Tuberculosis_Prote"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO yebc_like (label, description, uniprot_protein_id, encoded_by, biological_process, cell_component, found_in_taxon, refseq_protein_id, molecular_function, instance_of, part_of, subclass_of) VALUES ('Hypothetical protein Bfae_13930', 'microbial protein found in Brachybacterium faecium DSM 4810', 'C7MCB7', 'hypothetical protein Bfae_13930', 'transcription, DNA-templated', 'cytoplasm', 'Brachybacterium faecium DSM 4810', 'YP_003154814', 'DNA binding', 'protein', 'YebC-like', 'protein');\nDatabase State:\n- Table: Protein_YebC_like, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, cell_component, found_in_taxon, refseq_protein_id, molecular_function, instance_of, part_of, subclass_of]",
        "Response": "Table: Protein_YebC_like"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (artist_name, country, gender, preferred_genre) VALUES ('Farida', 'Bangladesh', 'Female', 'folk');\nDatabase State:\n- Table: song, Columns: [song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate]\n- Table: genre, Columns: [g_name, rating, most_popular_in]",
        "Response": "Table: artist"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Artwork_ID, Festival_ID, Result) VALUES (4, 1, 'Won');\nDatabase State:\n- Table: artwork, Columns: [Artwork_ID, Type, Name]",
        "Response": "Table: nomination"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO CHECKING (custid, balance) VALUES (5, 10000.0);\nDatabase State:\n- Table: ACCOUNTS, Columns: [custid, name]",
        "Response": "Table: CHECKING"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('nucleotide-binding protein BMA0373', 'microbial gene found in Burkholderia mallei ATCC 23344', 'Burkholderia mallei ATCC 23344', '3088088', 'gene', 'Nucleotide-binding protein BMA0373', 'BMA0373', 'gene', '396128', 'reverse strand', '395643');\nDatabase State:\n- Table: Genes, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, refseq_protein_id, found_in_taxon, encoded_by, part_of, instance_of, uniprot_protein_id) VALUES ('Hypothetical protein SCO3760', 'microbial protein found in Streptomyces coelicolor A3(2)', 'NP_627950', 'Streptomyces coelicolor A3(2)', 'hypothetical protein SCO3760', 'Protein of unknown function DUF1023', 'protein', 'Q9F2M1');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (case_number, race, gender, last_name, first_name, full_name) VALUES ('106454R', 'L', 'F', 'Delesantos', 'Amanda', 'Delesantos, Amanda');\nDatabase State:\n- Table: officers, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: subjects, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: incidents, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]",
        "Response": "Table: subjects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Crime (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude) VALUES (11486842, 'JB489007', '10/24/2018 22:44', '0000X E 118TH ST', '1310', 'RESIDENCE', 'FALSE', 'FALSE', 532, 5, 9, 53, '14', '41.67986213', '-87.6219566');\nDatabase State:\n- Table: Ward, Columns: [ward_no, alderman_first_name, alderman_last_name, alderman_name_suffix, ward_office_address, ward_office_zip, ward_email, ward_office_phone, ward_office_fax, city_hall_office_room, city_hall_office_phone, city_hall_office_fax, Population]\n- Table: Incidents, Columns: [report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude]\n- Table: Community_Area, Columns: [community_area_no, community_area_name, side, population]",
        "Response": "Table: Incidents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO location (id_restaurant, street_num, street_name, city) VALUES (240, 215, 'west portal avenue', 'san francisco');\nDatabase State:\n- Table: generalinfo, Columns: [id_restaurant, label, food_type, city, review]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Debate_ID, Affirmative, Negative, If_Affirmative_Win) VALUES (6, 5, 6, 'T');\nDatabase State:\n- Table: Debate_Participants, Columns: [Debate_ID, Affirmative, Negative, If_Affirmative_Win]\n- Table: people, Columns: [People_ID, District, Name, Party, Age]",
        "Response": "Table: Debate_Participants"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO takes (ID, course_id, sec_id, semester, year, grade) VALUES ('66106', '949', '1', 'Fall', 2007, 'B-');\nDatabase State:\n- Table: time_slot, Columns: [time_slot_id, day, start_hr, start_min, end_hr, end_min]\n- Table: department, Columns: [dept_name, building, budget]\n- Table: Enrollments, Columns: [ID, course_id, sec_id, semester, year, grade]\n- Table: student, Columns: [ID, name, dept_name, tot_cred]\n- Table: classroom, Columns: [building, room_number, capacity]\n- Table: advisor, Columns: [s_ID, i_ID]\n- Table: section, Columns: [course_id, sec_id, semester, year, building, room_number, time_slot_id]",
        "Response": "Table: Enrollments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (case_number, race, gender, last_name, first_name, full_name) VALUES ('371544W', 'W', 'M', 'Zoller', 'Jonathan', 'Zoller, Jonathan');\nDatabase State:\n- Table: subjects, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: incidents, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]",
        "Response": "Table: subjects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Quantity (quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional) VALUES (3915, 1041, 3528, 0.5, 0.5, 'pound(s)', 'or slices, cut in 1/2-inch strips', 'FALSE');\nDatabase State:\n- Table: Ingredient, Columns: [ingredient_id, category, name, plural]\n- Table: Nutrition, Columns: [recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories]\n- Table: Recipe, Columns: [recipe_id, title, subtitle, servings, yield_unit, prep_min, cook_min, stnd_min, source, intro, directions]",
        "Response": "Table: Quantity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO capital_city (label, description, country, coordinate_location, freebase_id, instance_of, geonames_id, elevation_above_sea_level, area, commons_category, population, located_in_the_administrative_territorial_entity, encyclop\u00e6dia_britannica_online_id, capital_of, whos_on_first_id, inaturalist_place_id, national_library_of_israel_j9u_id, located_in_time_zone, image) VALUES ('Yuscar\u00e1n', 'city in Honduras', 'Honduras', '13.941666666666665', '/m/06xgcx', 'city', '3600166', 1007.0, 332.0, 'Yuscar\u00e1n', 14144.0, 'El Para\u00edso Department', 'place/Yuscaran', 'El Para\u00edso Department', '1125983149', '31445.0', '9.870075552575052e+17', 'UTC\u221206:00', 'Yuscaran Honduras square.jpg');\nDatabase State:\n- Table: department_of_honduras, Columns: [label, description, commons_category, country, iso_3166_2_code, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, freebase_id, fips_10_4_countries_and_regions, instance_of, inception, geonames_id, capital, area, population, locator_map_image, getty_thesaurus_of_geographic_names_id, openstreetmap_relation_id, whos_on_first_id, geoshape, inaturalist_place_id, located_in_time_zone]",
        "Response": "Table: capital_city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details) VALUES (882, 207, 'Destiney', '(054)005-5168', 'jennyfer81@example.com', NULL);\nDatabase State:\n- Table: Customers, Columns: [Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details]\n- Table: Clients, Columns: [Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details]\n- Table: Ref_Payment_Methods, Columns: [payment_method_code, payment_method_description]\n- Table: Bookings, Columns: [Booking_ID, Customer_ID, Workshop_Group_ID, Status_Code, Store_ID, Order_Date, Planned_Delivery_Date, Actual_Delivery_Date, Other_Order_Details]\n- Table: Marketing_Regions, Columns: [Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details]\n- Table: Services, Columns: [Service_ID, Service_Type_Code, Workshop_Group_ID, Product_Description, Product_Name, Product_Price, Other_Product_Service_Details]\n- Table: Performers, Columns: [Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details]",
        "Response": "Table: Performers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO membership_register_branch (Member_ID, Branch_ID, Register_Year) VALUES (8, '8', '2016');\nDatabase State:\n- Table: member, Columns: [Member_ID, Card_Number, Name, Hometown, Level]\n- Table: purchase, Columns: [Member_ID, Branch_ID, Year, Total_pounds]\n- Table: branch, Columns: [Branch_ID, Name, Open_year, Address_road, City, membership_amount]",
        "Response": "Table: membership_register_branch"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Physician, Treatment, CertificationDate, CertificationExpires) VALUES (3, 7, '2008-01-01', '2008-12-31');\nDatabase State:\n- Table: Stay, Columns: [StayID, Patient, Room, StayStart, StayEnd]\n- Table: Nurse, Columns: [EmployeeID, Name, Position, Registered, SSN]\n- Table: Room, Columns: [RoomNumber, RoomType, BlockFloor]\n- Table: Appointment, Columns: [AppointmentID, Patient, Physician, Start, End, ExaminationRoom]\n- Table: Block, Columns: [BlockFloor, BlockCode]\n- Table: Patient, Columns: [SSN, Name, Address, Phone, InsuranceID, PCP]\n- Table: Department, Columns: [DepartmentID, Name, Head]\n- Table: On_Call, Columns: [Nurse, BlockFloor, OnCallStart, OnCallEnd]\n- Table: Prescribes, Columns: [Physician, Patient, Appointment]\n- Table: Physician_Certifications, Columns: [Physician, Treatment, CertificationDate, CertificationExpires]\n- Table: Medication, Columns: [Code, Name, Brand, Description]\n- Table: Procedures, Columns: [Code, Name, Cost]\n- Table: Affiliated_With, Columns: [Physician, Department, PrimaryAffiliation]\n- Table: Physician, Columns: [EmployeeID, Name, Position, SSN]\n- Table: Undergoes, Columns: [Patient, Procedures, Stay, DateUndergoes, Physician, AssistingNurse]",
        "Response": "Table: Physician_Certifications"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('CTP synthetase ECUMN_3111', 'microbial gene found in Escherichia coli UMN026', '7156247', 'gene', 'CTP synthetase ECUMN_3111', 'Escherichia coli UMN026', 'reverse strand', '3216726.0', '3215089.0', 'gene', 'ECUMN_3111');\nDatabase State:\n- Table: ctp_synthase_n_terminal_domain_protein_family, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (mID) VALUES (101, 'Gone with the Wind', 1939, 'Victor Fleming');\nDatabase State:\n- Table: Movie, Columns: [mID]\n- Table: Rating, Columns: [rID]",
        "Response": "Table: Movie"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO bacterial_transglutaminase_like_n_terminal_domain_protein_family (label, description, subclass_of, uniprot_protein_id, encoded_by, found_in_taxon, has_parts, instance_of, refseq_protein_id, part_of) VALUES ('Transglutaminase Rru_A1847', 'microbial protein found in Rhodospirillum rubrum ATCC 11170', 'protein', 'Q2RT98', 'transglutaminase Rru_A1847', 'Rhodospirillum rubrum ATCC 11170', 'Transglutaminase-like', 'protein', 'YP_426934', 'Papain-like cysteine peptidase superfamily');\nDatabase State:\n- Table: natural_product, Columns: [label, description, taxon_name, instance_of, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: bacterial_transglutaminase_like_n_terminal_domain_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, instance_of, freebase_id, image) VALUES ('Barossa Valley', 'valley and wine-producing region in South Australia', 'Barossa Valley', 'valley', '/m/017x7d', 'nan');\nDatabase State:\n- Table: given_name, Columns: [label, description, said_to_be_the_same_as, family_name_identical_to_this_given_name, instance_of, different_from, native_label, writing_system, soundex, cologne_phonetics, caverphone, commons_category, language_of_work_or_name]\n- Table: family_name, Columns: [label, description, caverphone, instance_of, soundex, native_label, writing_system, geneanet_family_name_id, different_from, g\u00e9opatronyme_id]\n- Table: Politicians, Columns: [label, description, commons_category, instance_of, freebase_id, image]",
        "Response": "Table: Politicians"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SAVINGS (custid, balance) VALUES (4, 60.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: SAVINGS"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO physical_location (label, description, commons_category, coordinate_location, freebase_id, viaf_id, idref_id, isni, nkcr_aut_id, library_of_congress_authority_id, official_website, inception, image, located_in_the_administrative_territorial_entity, instance_of, commons_institution_page, country, biblioth\u00e8que_nationale_de_france_id, worldcat_identities_id) VALUES ('Pergamon Museum', 'museum building in Berlin, part of the Museumsinsel, presents the Vorderasiatisches Museum, the Museum f\u00fcr Islamische Kunst and parts of the Antikensammlung', 'Pergamonmuseum', '52.521', '/m/01k4cq', '131008425', '077275713', '0000 0001 2315 5054', 'xx0015872', 'nr95006694', 'https://www.smb.museum/museen-einrichtungen/pergamonmuseum/', '+1910-01-01T00:00:00Z', 'Pergamonmuseum Front.jpg', 'Mitte', 'art museum', 'Pergamon Museum', 'Germany', '12042621c', 'viaf-131008425');\nDatabase State:\n- Table: collection, Columns: [label, description, commons_category, coordinate_location, freebase_id, viaf_id, idref_id, isni, library_of_congress_authority_id, official_website, inception, image, located_in_the_administrative_territorial_entity, instance_of, commons_institution_page, country, biblioth\u00e8que_nationale_de_france_id, worldcat_identities_id, national_library_of_israel_j9u_id]",
        "Response": "Table: physical_location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (name, organ) VALUES ('student902', 'army');\nDatabase State:\n- Table: enrolled, Columns: [name, school, month]\n- Table: no_payment_due, Columns: [name, bool]",
        "Response": "Table: enlist"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO train (Train_ID, Name, Time, Service) VALUES (7, 'Madurai Fast Passenger', '21:49', 'Daily');\nDatabase State:\n- Table: train, Columns: [Train_ID, Name, Time, Service]",
        "Response": "Table: train"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, Name, CountryCode, District, Population) VALUES (2340, 'Suwon', 'KOR', 'Kyonggi', 755550);\nDatabase State:\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, instance_of, part_of, applies_to_jurisdiction, follows, followed_by, austlii_id) VALUES ('Chapter VI of the Constitution of Australia', 'nan', 'Australia', 'nan', 'Constitution of Australia', 'Australia', 'Chapter V of the Constitution of Australia', 'nan', 'nan');\nDatabase State:\n- Table: followed_by, Columns: [label, description, applies_to_jurisdiction, part_of, country, follows, instance_of, austlii_id, followed_by]",
        "Response": "Table: constitution_of_australia"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, brewery_id, abv, ibu, name, style, ounces) VALUES (1771, 321, 0.05000000000000000277, 55.0, 'Lil SIPA', 'American IPA', 16.0);\nDatabase State:\n- Table: beers, Columns: [id, brewery_id, abv, ibu, name, style, ounces]",
        "Response": "Table: beers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO ribosomal_protein_l11_conserved_site_protein_family (label, description, encoded_by, uniprot_protein_id, molecular_function, biological_process, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('50S ribosomal protein L11 BN117_0010', 'microbial protein found in Bordetella parapertussis Bpp5', '50S ribosomal protein L11 BN117_0010', 'K0M7U5', 'RNA binding', 'protein biosynthesis', 'ribosome', 'Ribosomal protein L11, conserved site', 'Bordetella parapertussis Bpp5', 'YP_006894106', 'protein', 'Ribosomal protein L11/L12, N-terminal domain superfamily', 'protein');\nDatabase State:\n- Table: ribosomal_protein_l11_conserved_site_protein_family, Columns: [label, description, encoded_by, uniprot_protein_id, molecular_function, biological_process, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: ribosomal_protein_l11_conserved_site_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO device (Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform) VALUES (2, 'Apple', 'Verizon Wireless', '5.0.0.328', '5.0.0.328', 'iOS');\nDatabase State:\n- Table: shop, Columns: [Shop_ID, Shop_Name, Location, Open_Date, Open_Year]",
        "Response": "Table: device"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email) VALUES (9, 'Credit Card', '808', 'Yasmeen', replace('3558 Witting Meadow Apt. 483\\nLake Moriahbury, OH 91556-2122','\\n',char(10)), '587.398.2400x31176', 'ludwig54@example.net');\nDatabase State:\n- Table: Order_Items, Columns: [order_item_id, order_id, product_id]\n- Table: Customer_Details, Columns: [customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email]",
        "Response": "Table: Customer_Details"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO twitter (TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID) VALUES ('tw-683024845857226752', 'Friday', 13, 1, 'en', 'FALSE', 487, 0, 0, 45, 0.0, 'Why do people complain that S3 doesn''t have server-side clones? Ignoring its cross-region mirroring `aws s3 sync` does clones just fine ...', 3019, 'tw-37892604');\nDatabase State:\n- Table: Tweets, Columns: [TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, text, LocationID, UserID]\n- Table: user, Columns: [UserID, Gender]",
        "Response": "Table: Tweets"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, located_in_the_administrative_territorial_entity, instance_of, commons_category, coordinate_location, country, shares_border_with, topics_main_category, population, geonames_id, category_of_associated_people, viaf_id, official_website, musicbrainz_area_id, located_in_time_zone, part_of, official_language, yso_id, image, whos_on_first_id, freebase_id, coat_of_arms_image, store_norske_leksikon_id, page_banner) VALUES ('Bagno a Ripoli', 'Italian comune', 'Metropolitan City of Florence', 'comune of Italy', 'Bagno a Ripoli', '43.75', 'Italy', 'Fiesole', 'Category:Bagno a Ripoli', 25483.0, '6536819', 'Category:People from Bagno a Ripoli', '160115337', 'http://www.comune.bagno-a-ripoli.fi.it', '087a2dfb-50dd-46b5-a545-642b715013b4', 'UTC+01:00', 'nan', 'nan', 'nan', 'Bagno a Ripoli - Palazzo comunale.jpg', '101837111.0', '/m/0glc40', 'nan', 'nan', 'Wv Bagno a Ripoli banner.JPG');\nDatabase State:\n- Table: wikimedia_category, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, new_york_times_topic_id, babelnet_id, geonames_id, gnd_id, unicode_character, category_of_associated_people, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, coordinates_of_westernmost_point, geography_of_topic, iso_3166_1_alpha_3_code, office_held_by_head_of_government, isni, quora_topic_id, country, encyclop\u00e6dia_universalis_id, mesh_descriptor_id, guardian_topic_id, basic_form_of_government, musicbrainz_area_id, public_holiday, has_quality, coat_of_arms_image, uic_alphabetical_country_code, number_of_out_of_school_children, continent, insee_countries_and_foreign_territories_code, diplomatic_relation, inception, office_held_by_head_of_state, commons_gallery, legislative_body, iso_3166_1_numeric_code, nuts_code, history_of_topic, stw_thesaurus_for_economics_id, replaces, native_label, subreddit, located_in_or_next_to_body_of_water, capital, official_website, coat_of_arms, demonym, age_of_majority, national_library_of_israel_id_old, openstreetmap_relation_id, on_focus_list_of_wikimedia_project, wipo_st3, coordinates_of_northernmost_point, coordinates_of_easternmost_point, nkcr_aut_id, comic_vine_id, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, executive_body, compulsory_education_minimum_age, marriageable_age, topics_main_category, le_monde_diplomatique_subject_id, head_of_state, category_of_people_buried_here, locator_map_image, bbc_things_id, geoshape, dewey_decimal_classification, area, ituisoiec_object_identifier, head_of_government, ioc_country_code, member_of, fast_id, store_norske_leksikon_id, unemployment_rate, viaf_id, railway_traffic_side, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, category_for_films_shot_at_this_location, mains_voltage, official_name, located_in_time_zone, category_for_people_who_died_here, yso_id, anthem, highest_judicial_authority, life_expectancy, part_of, commons_category, top_level_internet_domain, shares_border_with, instance_of, highest_point, category_for_people_born_here, short_name, driving_side, uic_numerical_country_code, lowest_point, brockhaus_enzyklop\u00e4die_online_id, ipa_transcription, civicus_monitor_country_entry, official_language, pronunciation_audio, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, freebase_id, statoids_id, asc_leiden_thesaurus_id, library_of_congress_authority_id, curlie_id, flag, coordinate_location, fips_10_4_countries_and_regions, dagens_nyheter_topic_id, described_by_source, flag_image, iso_3166_1_alpha_2_code, maintained_by_wikiproject, iab_code, klexikon_article_id, loc_and_marc_vocabularies_id, language_used, whos_on_first_id, dr_topic_id, world_encyclopedia_of_puppetry_arts_id, gran_enciclop\u00e8dia_catalana_id, nese_id, omegawiki_defined_meaning, hds_id, treccani_id, gs1_country_code, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, treccanis_dizionario_di_storia_id, vat_rate, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, basque_vikidia_id, eurovoc_id, worldcat_identities_id, fandom_article_id, nalt_id, motto_text, open_data_portal, kbpedia_id, grove_art_online_id, gynopedia_id, rkd_thesaurus_id, interlingual_index_id, jewish_encyclopedia_id_russian, bbc_news_topic_id, inaturalist_place_id, economy_of_topic, edition_humboldt_digital_id, sapa_id, ysa_id, yle_topic_id, bhcl_uuid, tasteatlas_id, github_topic, uk_parliament_thesaurus_id, namuwiki_id, wordnet_31_synset_id, demographics_of_topic, cna_topic_id, joconde_location_id, zhihu_topic_id, idaigazetteer_id, encyclopedia_of_the_history_of_ukraine_id, armeniapedia_id, schoenberg_database_of_manuscripts_place_id, the_world_factbook_country_id, online_pwn_encyclopedia_id, larousse_id, colon_classification, national_library_of_israel_j9u_id, democracy_index, image_archive_herder_institute, der_spiegel_topic_id, gyldendals_teaterleksikon_id, museum_digital_place_id, wikisimpsons_id, krugosvet_article, den_store_danske_id, urban_electric_transit_country_id, biblioth\u00e8que_nationale_de_france_id, biblioteca_nacional_de_espa\u00f1a_id, hashtag, marine_regions_geographic_id, named_after, postimees_topic_id, m49_code, s\u00fcddeutsche_zeitung_topic_id, idref_id, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, central_bank, gini_coefficient, pm20_geo_code, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, different_from]\n- Table: Regions, Columns: [label, description, located_in_the_administrative_territorial_entity, instance_of, commons_category, coordinate_location, country, shares_border_with, topics_main_category, population, geonames_id, category_of_associated_people, viaf_id, official_website, musicbrainz_area_id, located_in_time_zone, part_of, official_language, yso_id, image, whos_on_first_id, freebase_id, coat_of_arms_image, store_norske_leksikon_id, page_banner]\n- Table: administrative_territorial_entity, Columns: [label, description, dewey_decimal_classification, twinned_administrative_body, country, commons_category, instance_of, coat_of_arms_image, image, located_in_time_zone, located_in_the_administrative_territorial_entity, coordinate_location, page_banner, musicbrainz_area_id, topics_main_category, freebase_id, population, geonames_id, shares_border_with, category_of_associated_people, official_website, finnish_municipality_number, legislative_body, official_language, area, yso_id, store_norske_leksikon_id, archinform_location_id, viaf_id, whos_on_first_id, ysa_id]\n- Table: parish_union, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, official_website, diocese]\n- Table: twin_town, Columns: [label, description, locator_map_image, instance_of, located_in_the_administrative_territorial_entity, shares_border_with, country, commons_category, coat_of_arms_image, twinned_administrative_body, located_in_time_zone, topics_main_category, page_banner, official_website, musicbrainz_area_id, freebase_id, category_of_associated_people, image, viaf_id, coordinate_location, population, area, quora_topic_id, geonames_id, inaturalist_place_id]\n- Table: part, Columns: [label, description, quora_topic_id, viaf_id, nkcr_aut_id, topics_main_category, locator_map_image, store_norske_leksikon_id, commons_category, instance_of, has_parts, freebase_id, coordinate_location, worldcat_identities_id]\n- Table: head_of_state, Columns: [label, description, freebase_id, religion_or_worldview, native_language, commons_category, member_of_political_party, instance_of, date_of_birth, place_of_birth, country_of_citizenship, occupation, given_name, position_held, languages_spoken_written_or_signed, viaf_id, library_of_congress_authority_id, idref_id, award_received, image, educated_at, family_name, spouse, gnd_id, name_in_native_language, isni, gran_enciclop\u00e8dia_catalana_id, signature, gtaa_id, residence, treccani_id, radio_radicale_person_id, munzinger_person_id, worldcat_identities_id, fast_id, sex_or_gender, candidacy_in_election, plwabn_id, store_norske_leksikon_id, nese_id, opensanctions_id, genicom_profile_id, topics_main_category, nkcr_aut_id]",
        "Response": "Table: Regions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, instance_of, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, freebase_id, commons_category, viaf_id, geonames_id, population, official_website, image, locator_map_image, openstreetmap_relation_id, area, whos_on_first_id, worldcat_identities_id) VALUES ('Egelsbach', 'municipality in Landkreis Offenbach in Hesse, Germany', 'Germany', 'Gemarkung', 'Offenbach', '49.969444444444', 'Category:Egelsbach', '/m/02rwrxm', 'Egelsbach', '126806495.0', '6553199', 11583.0, 'http://www.egelsbach.de/', 'Egelsbach Rathaus 20070904.jpg', 'Egelsbach in OF.svg', '659744', 14.81000000000000049, '101813541.0', 'viaf-243260885');\nDatabase State:\n- Table: listening_station, Columns: [label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, performer, record_label, instance_of, musicbrainz_release_group_id, discogs_master_id, genre, followed_by, spotify_album_id, follows, distribution_format, publication_date, form_of_creative_work, part_of, apple_music_album_id_us_version, deezer_album_id, genius_album_id, youtube_playlist_id) VALUES ('Autopsie Vol. 3', 'compilation album by Booba', 'Booba', 'Because Music', 'album', 'nan', '142121.0', 'French hip hop', 'Lunatic', 'nan', '0.9', 'music streaming', '+2009-06-29T00:00:00Z', 'compilation album', 'Booba discography', 'nan', 'nan', 'Booba/Autopsie-vol-3', 'OLAK5uy_mtlMSs-e_Clfv0X8s0-u87D5RgPg1NJ6g');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO event (label, description, instance_of, part_of, sport, competition_class, follows, number_of_participants, point_in_time, winner, olympedia_event_id, location, followed_by, country) VALUES ('judo at the 2020 Summer Olympics \u2013 women''s 78 kg', 'judo competition', 'Olympic sporting event', 'judo at the 2020 Summer Olympics', 'judo', 'women''s half heavyweight', 'judo at the 2016 Summer Olympics \u2013 women''s 78 kg', 24.0, '+2021-07-29T00:00:00Z', 'Shori Hamada', '18001424.0', 'Nippon Budokan', 'judo at the 2024 Summer Olympics \u2013 women''s 78 kg', 'Japan');\nDatabase State:\n- Table: followed_by, Columns: [label, description, instance_of, part_of, location, country, sport, point_in_time, follows, short_name, ijf_competition_id, judoinside_competition_id, organizer, followed_by, number_of_participants]\n- Table: event, Columns: [label, description, instance_of, part_of, sport, competition_class, follows, number_of_participants, point_in_time, winner, olympedia_event_id, location, followed_by, country]\n- Table: 2019_world_judo_championships, Columns: [label, description, instance_of, part_of, sport, follows, winner, location, google_knowledge_graph_id, followed_by, country, point_in_time, ijf_competition_id, judoinside_competition_id, short_name, number_of_participants]",
        "Response": "Table: event"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO AREA_CODE_STATE (area_code) VALUES (315, 'NY');\nDatabase State:\n- Table: AreaCodeStateMap, Columns: [area_code]",
        "Response": "Table: AreaCodeStateMap"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO chamber_tomb (label, description, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, country, historic_county) VALUES ('The Grey Mare and her Colts', 'dolmen in England', '50.6816', 'Long Bredy', 'archaeological site', 'United Kingdom', 'Dorset');\nDatabase State:\n- Table: chamber_tomb, Columns: [label, description, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, country, historic_county]",
        "Response": "Table: chamber_tomb"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ranking_date) VALUES (20121224, 551, 202640, 50, 11);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: rankings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, located_in_the_administrative_territorial_entity, postal_code, follows, followed_by, part_of, coordinate_location, google_knowledge_graph_id) VALUES ('Kusu service area', 'rest area in Kusu, Kusu district, Oita prefecture, Japan', 'rest area', 'Japan', 'Kusu', '879-4331', 'Amagase-Takatsuka interchange', 'Kusu interchange', 'Oita Expressway', '33.282558333333', '/g/122dm1rg');\nDatabase State:\n- Table: followed_by, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, postal_code, follows, followed_by, part_of, coordinate_location, google_knowledge_graph_id]\n- Table: administrative_territorial_entity, Columns: [label, description, dantai_code, commons_category, country, located_in_the_administrative_territorial_entity, coordinate_location, official_website, ndl_authority_id, instance_of, freebase_id, population, geonames_id, viaf_id, topics_main_category, corporate_number_japan, located_in_time_zone, name_in_kana, area, opencorporates_id, geonlp_id, image, locator_map_image, whos_on_first_id, flag_image, worldcat_identities_id, shares_border_with, inception, inaturalist_place_id]\n- Table: oita_expressway, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, postal_code, follows, followed_by, coordinate_location, part_of, google_knowledge_graph_id]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, part_of) VALUES ('Squadron 32', '1941\u20131944 Finnish Air Force fighter squadron', 'fighter squadron', 'Finland', 'Flying Regiment 1');\nDatabase State:\n- Table: part, Columns: [label, description, quora_topic_id, has_parts, commons_category, instance_of, freebase_id, part_of, topics_main_category, gnd_id, yso_id, coordinate_location, viaf_id]\n- Table: place_of_birth, Columns: [label, description, instance_of, commons_category, coordinate_location, topics_main_category, freebase_id, population, image, country, located_in_the_administrative_territorial_entity]\n- Table: fighter_squadron, Columns: [label, description, instance_of, country, part_of]\n- Table: country, Columns: [label, description, commons_category, gnd_id, freebase_id, idref_id, instance_of, locator_map_image, inception, topics_main_category, office_held_by_head_of_government, babelnet_id, store_norske_leksikon_id, isni, biblioth\u00e8que_nationale_de_france_id, viaf_id, worldcat_identities_id, quora_topic_id, continent, diplomatic_relation, demonym, flag_image, short_name, category_for_maps, nese_id, brockhaus_enzyklop\u00e4die_online_id, country, museum_digital_place_id, office_held_by_head_of_state, head_of_state, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, new_york_times_topic_id, geonames_id, unicode_character, category_of_associated_people, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, coordinates_of_westernmost_point, geography_of_topic, iso_3166_1_alpha_3_code, official_name, curlie_id, mesh_descriptor_id, basic_form_of_government, musicbrainz_area_id, has_quality, coat_of_arms_image, uic_alphabetical_country_code, number_of_out_of_school_children, insee_countries_and_foreign_territories_code, commons_gallery, legislative_body, civicus_monitor_country_entry, history_of_topic, stw_thesaurus_for_economics_id, official_language, subreddit, capital, coat_of_arms, geoshape, national_library_of_israel_id_old, openstreetmap_relation_id, wipo_st3, coordinates_of_northernmost_point, coordinates_of_easternmost_point, nkcr_aut_id, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, asc_leiden_thesaurus_id, marriageable_age, le_monde_diplomatique_subject_id, category_of_people_buried_here, bbc_things_id, age_of_majority, dewey_decimal_classification, on_focus_list_of_wikimedia_project, ituisoiec_object_identifier, head_of_government, ioc_country_code, member_of, fast_id, unemployment_rate, railway_traffic_side, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, category_for_people_who_died_here, yso_id, anthem, life_expectancy, gran_enciclop\u00e8dia_catalana_id, part_of, top_level_internet_domain, area, shares_border_with, highest_point, driving_side, uic_numerical_country_code, lowest_point, iso_3166_1_numeric_code, located_in_time_zone, giant_bomb_id, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, statoids_id, library_of_congress_authority_id, iso_3166_1_alpha_2_code, motto_text, flag, coordinate_location, fips_10_4_countries_and_regions, dagens_nyheter_topic_id, described_by_source, maintained_by_wikiproject, klexikon_article_id, iab_code, loc_and_marc_vocabularies_id, central_bank, language_used, comic_vine_id, treccanis_dizionario_di_storia_id, native_label, whos_on_first_id, dr_topic_id, inaturalist_place_id, omegawiki_defined_meaning, hds_id, gs1_country_code, culture, geonlp_id, analysis_policy_observatory_term_id, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, pronunciation_audio, eurovoc_id, open_data_portal, kbpedia_id, krugosvet_article, grove_art_online_id, replaces, rkd_thesaurus_id, interlingual_index_id, jewish_encyclopedia_id_russian, bbc_news_topic_id, economy_of_topic, the_top_tens_id, yle_topic_id, uk_parliament_thesaurus_id, tasteatlas_id, sapa_id, github_topic, wordnet_31_synset_id, demographics_of_topic, ysa_id, joconde_location_id, zhihu_topic_id, schoenberg_database_of_manuscripts_place_id, the_world_factbook_country_id, national_library_of_israel_j9u_id, colon_classification, democracy_index, namuwiki_id, der_spiegel_topic_id, wikisimpsons_id, den_store_danske_id, urban_electric_transit_country_id, postimees_topic_id, online_pwn_encyclopedia_id, m49_code, pm20_geo_code, s\u00fcddeutsche_zeitung_topic_id, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, vat_rate, hashtag, located_in_or_next_to_body_of_water, gini_coefficient, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, gynopedia_id]\n- Table: political_border, Columns: [label, description, population, viaf_id, geonames_id, musicbrainz_area_id, coat_of_arms_image, capital, geoshape, openstreetmap_relation_id, shares_border_with, flag_image, topics_main_category, locator_map_image, area, commons_category, instance_of, freebase_id, library_of_congress_authority_id, coordinate_location, country, whos_on_first_id, category_for_maps, inaturalist_place_id, national_library_of_israel_j9u_id, official_website, located_in_the_administrative_territorial_entity]\n- Table: head_of_state, Columns: [label, description, sex_or_gender, spouse, child, position_held, commons_category, library_of_congress_authority_id, viaf_id, isni, gnd_id, place_of_birth, country_of_citizenship, date_of_birth, instance_of, image, award_received, freebase_id, signature, religion_or_worldview, occupation, given_name, topics_main_category, name_in_native_language, languages_spoken_written_or_signed, fast_id, worldcat_identities_id, hrvatska_enciklopedija_id, store_norske_leksikon_id, den_store_danske_id, educated_at, munzinger_person_id, treccani_id, family_name, opensanctions_id]",
        "Response": "Table: fighter_squadron"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO district_court_in_the_czech_republic (label, description, instance_of, country, image, applies_to_jurisdiction, czech_registration_id, headquarters_location, legal_form, inception, official_name, official_website, isds_id) VALUES ('District Court in \u010cesk\u00fd Krumlov', 'nan', 'district court in the Czech Republic', 'Czech Republic', 'M\u011bstsk\u00fd soud \u010dk 1.jpg', '\u010cesk\u00fd Krumlov District', '24635', '\u010cesk\u00fd Krumlov', 'organisational unit of the state', '+1972-01-01T00:00:00Z', 'Okresn\u00ed soud v \u010cesk\u00e9m Krumlov\u011b', 'http://www.justice.cz/web/okresni-soud-v-ceskem-krumlove', 'mzvabvm');\nDatabase State:\n- Table: Courts, Columns: [label, description, instance_of, country, image, applies_to_jurisdiction, czech_registration_id, headquarters_location, legal_form, inception, official_name, official_website, isds_id]\n- Table: political_border, Columns: [label, description, commons_category, country, coat_of_arms_image, lau, instance_of, freebase_id, flag_image, shares_border_with, population, image, geonames_id, coordinate_location, elevation_above_sea_level, official_website, topics_main_category, postal_code, time_of_earliest_written_record, email_address, openstreetmap_relation_id, area, licence_plate_code, czech_registration_id, nkcr_aut_id, historical_region, whos_on_first_id, located_in_the_administrative_territorial_entity, geoshape, mapycz_id, isds_id, czech_municipality_id, number_of_houses, mean_age]\n- Table: jurisdiction, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, capital, locator_map_image, openstreetmap_relation_id, shares_border_with, country, coordinate_location, lau, topics_main_category, instance_of, iso_3166_2_code, freebase_id, geonames_id, viaf_id, image, population, area, musicbrainz_area_id, geoshape, mean_age, licence_plate_code, nkcr_aut_id, library_of_congress_authority_id, czech_district_id, category_for_maps, hasc, mapycz_id, inaturalist_place_id, number_of_houses, topics_main_template, contains_the_administrative_territorial_entity]",
        "Response": "Table: Courts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO member (Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address) VALUES (8, 'Reynolds, Richard', 'Black', 45, 24, 1, 'Waterbury');\nDatabase State:\n- Table: happy_hour, Columns: [HH_ID, Shop_ID, Month, Num_of_shaff_in_charge]\n- Table: member, Columns: [Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address]",
        "Response": "Table: member"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths) VALUES (6, 'Six', 'September18\u2013September25', 1002, 0.03899999999999999995, 2);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: storm"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('homospermidine synthase Atu3768', 'microbial gene found in Agrobacterium fabrum str. C58', '1135642', 'gene', 'Homospermidine synthase Atu3768', 'Agrobacterium fabrum str. C58', 'forward strand', '851747', '850302', 'gene', 'Atu3768');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO player (Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team) VALUES (10, 'Bae Nam-Ju', '2 (1988, 1990)', '1\u20133', '0\u20132', '1\u20131', 8);\nDatabase State:\n- Table: match_season, Columns: [Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College]\n- Table: country, Columns: [Country_id, Country_name, Capital, Official_native_language]\n- Table: team, Columns: [Team_id, Name]",
        "Response": "Table: player"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO head_of_government (label, description, place_of_birth, date_of_birth, country_of_citizenship, instance_of, sex_or_gender, position_held, member_of_political_party, image, occupation, given_name, whos_who_in_france_biography_id, twitter_username, languages_spoken_written_or_signed, google_knowledge_graph_id, social_media_followers) VALUES ('Philippe Goujon', 'French politician', '9th arrondissement of Paris', '+1954-04-30T00:00:00Z', 'France', 'human', 'male', 'member of the French National Assembly', 'Rally for the Republic', 'Philippegoujon.jpg', 'politician', 'Philippe', 'philippe-goujon_34256', 'Philippe_Goujon', 'French', 'nan', 19501.0);\nDatabase State:\n- Table: city_gates_of_paris, Columns: [label, description, commons_category, coordinate_location, country, instance_of, part_of, located_in_the_administrative_territorial_entity, google_knowledge_graph_id]\n- Table: given_name, Columns: [label, description, instance_of, said_to_be_the_same_as, language_of_work_or_name, native_label, writing_system, nominis_given_name_id, commons_category, caverphone]\n- Table: category_for_films_shot_at_this_location, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, shares_border_with, country, postal_code, insee_municipality_code, topics_main_category, page_banner, freebase_id, inception, replaces, geonames_id, category_for_films_shot_at_this_location, locator_map_image, image, official_website, population, head_of_government, openstreetmap_relation_id, gnd_id, biblioth\u00e8que_nationale_de_france_id, area, twitter_username, viaf_id, archinform_location_id, isni, annual_number_of_weddings, coat_of_arms_image, contains_the_administrative_territorial_entity, category_for_maps, worldcat_identities_id, gadm_id, detail_map, social_media_followers, facebook_id, factgrid_item_id]\n- Table: Politicians, Columns: [label, description, place_of_birth, date_of_birth, country_of_citizenship, instance_of, sex_or_gender, position_held, member_of_political_party, image, occupation, given_name, whos_who_in_france_biography_id, twitter_username, languages_spoken_written_or_signed, google_knowledge_graph_id, social_media_followers]",
        "Response": "Table: Politicians"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (customer_id, address_id, date_from, date_to) VALUES (2, 13, '2011-01-02 21:42:29', '2018-02-25 19:55:00');\nDatabase State:\n- Table: Addresses, Columns: [address_id, line_1_number_building, city, zip_postcode, state_province_county, country]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_date, order_status_code]\n- Table: Contacts, Columns: [contact_id, customer_id, gender, first_name, last_name, contact_phone]\n- Table: Customer_Address_History, Columns: [customer_id, address_id, date_from, date_to]\n- Table: Customers, Columns: [customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email]",
        "Response": "Table: Customer_Address_History"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, viaf_id, isni, library_of_congress_authority_id, gnd_id, country_of_citizenship, image, place_of_birth, date_of_birth, occupation, position_held, educated_at, instance_of, freebase_id, munzinger_person_id, languages_spoken_written_or_signed, given_name, fast_id, award_received, signature, spouse, name_in_native_language, encyclop\u00e6dia_britannica_online_id, religion_or_worldview, sex_or_gender, topics_main_category, worldcat_identities_id, store_norske_leksikon_id, child) VALUES ('Andr\u00e9s Manuel L\u00f3pez Obrador', 'president of Mexico', 'Andr\u00e9s Manuel L\u00f3pez Obrador', '6482401', '0000 0000 6701 4870', 'n88102570', '133945251', 'Mexico', 'LEN\u00cdN MORENO SE RE\u00daNE CON EL L\u00cdDER MEXICANO L\u00d3PEZ OBRADOR (36186836092) (cropped).jpg', 'Tepetit\u00e1n', '+1953-11-13T00:00:00Z', 'politician', 'Head of Mexico City government', 'National Autonomous University of Mexico', 'human', '/m/035m7s', '25308.0', 'Spanish', 'Manuel', '1488673.0', 'Ig Nobel Prize', 'Signature of Andr\u00e9s Manuel L\u00f3pez Obrador.svg', 'Beatriz Guti\u00e9rrez M\u00fcller', 'Andr\u00e9s Manuel L\u00f3pez Obrador', 'biography/Andres-Manuel-Lopez-Obrador', 'Catholicism', 'male', 'Category:Andr\u00e9s Manuel L\u00f3pez Obrador', 'lccn-n88102570', 'Andr\u00e9s_Manuel_L\u00f3pez_Obrador', 'Andr\u00e9s Manuel L\u00f3pez Beltr\u00e1n');\nDatabase State:\n- Table: department_store_chain, Columns: [label, description, country, instance_of]\n- Table: part, Columns: [label, description, commons_category, topics_main_category, freebase_id, gnd_id, viaf_id, instance_of, geonames_id, page_banner, quora_topic_id, has_parts, nkcr_aut_id, worldcat_identities_id, coordinate_location, locator_map_image, part_of, den_store_danske_id]\n- Table: place_of_birth, Columns: [label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of]\n- Table: given_name, Columns: [label, description, instance_of, native_label, soundex, cologne_phonetics, caverphone, writing_system, language_of_work_or_name, said_to_be_the_same_as, different_from, commons_category]\n- Table: Leaders, Columns: [label, description, commons_category, viaf_id, isni, library_of_congress_authority_id, gnd_id, country_of_citizenship, image, place_of_birth, date_of_birth, occupation, position_held, educated_at, instance_of, freebase_id, munzinger_person_id, languages_spoken_written_or_signed, given_name, fast_id, award_received, signature, spouse, name_in_native_language, encyclop\u00e6dia_britannica_online_id, religion_or_worldview, sex_or_gender, topics_main_category, worldcat_identities_id, store_norske_leksikon_id, child]",
        "Response": "Table: Leaders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (pub_id, pub_name, city, state, country) VALUES ('9901', 'GGG&G', 'M\u0081nchen', NULL, 'Germany');\nDatabase State:\n- Table: jobs, Columns: [job_id, job_desc, min_lvl, max_lvl]\n- Table: roysched, Columns: [title_id, lorange, hirange, royalty]\n- Table: authors, Columns: [au_id, au_lname, au_fname, phone, address, city, state, zip, contract]\n- Table: stores, Columns: [stor_id, stor_name, stor_address, city, state, zip]\n- Table: sales, Columns: [stor_id, ord_num, ord_date, qty, payterms, title_id]\n- Table: publishers, Columns: [pub_id, pub_name, city, state, country]\n- Table: pub_info, Columns: [pub_id, logo, pr_info]\n- Table: titles, Columns: [title_id, title, type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate]\n- Table: titleauthor, Columns: [au_id, title_id, au_ord, royaltyper]",
        "Response": "Table: publishers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO store (Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking) VALUES (5, 'Doaktown', 'City Mall', 28.73999999999999844, 793.0, 9);\nDatabase State:\n- Table: store_district, Columns: [Store_ID, District_ID]\n- Table: product, Columns: [product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface]\n- Table: store, Columns: [Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking]",
        "Response": "Table: store"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO rental (rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update) VALUES (7510, '2005-07-27 20:37:57', 1617, 257, '2005-08-01 17:14:57', 2, '2006-02-15 21:30:53');\nDatabase State:\n- Table: country, Columns: [country_id, country, last_update]\n- Table: store, Columns: [store_id, manager_staff_id, address_id, last_update]\n- Table: film_actor, Columns: [actor_id, film_id, last_update]\n- Table: actor, Columns: [actor_id, first_name, last_name, last_update]\n- Table: film_text, Columns: [film_id, title, description]\n- Table: staff, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]\n- Table: rental, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]\n- Table: address, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: category, Columns: [category_id, name, last_update]\n- Table: city, Columns: [city_id, city, country_id, last_update]\n- Table: payment, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: film, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]\n- Table: customer, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: film_category, Columns: [film_id, category_id, last_update]\n- Table: language, Columns: [language_id, name, last_update]\n- Table: inventory, Columns: [inventory_id, film_id, store_id, last_update]",
        "Response": "Table: rental"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('flagellar basal body rod protein FlgC BC1642', 'microbial gene found in Bacillus cereus ATCC 14579', 'Bacillus cereus ATCC 14579', '1203991', 'gene', 'Flagellar basal body rod protein FlgC BC1642', 'BC1642', 'gene', '1597759', 'forward strand', '1597346');\nDatabase State:\n- Table: flagellar_basal_body_rod_protein_flgc, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, biological_process, cell_component, has_parts, instance_of, refseq_protein_id, part_of]\n- Table: Genes, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO PersonFriend (name, friend, year) VALUES ('Alice', 'Bob', 10);\nDatabase State:\n- Table: Friendships, Columns: [name, friend, year]\n- Table: Person, Columns: [name, age, city, gender, job]",
        "Response": "Table: Friendships"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, commons_category, country, located_in_time_zone, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, page_banner, freebase_id, openstreetmap_relation_id, category_for_films_shot_at_this_location, nuts_code, category_for_people_who_died_here, official_website, curlie_id, contains_the_administrative_territorial_entity, locator_map_image, gss_code_2011, area, geonames_id, category_of_people_buried_here, image, category_of_associated_people, category_for_maps, shares_border_with, toid, population, uk_parliament_thesaurus_id, eu_knowledge_graph_item_id) VALUES ('North West England', 'region of England', 'region of England', 'North West England', 'United Kingdom', 'UTC\u00b100:00', 'England', '54.01666666666701', 'Category:North West England', 'NW England Banner 1.jpg', '/m/0jt34wk', '151261', 'Category:Films shot in North West England', 'UKD', 'Category:Deaths in North West England', 'http://www.nwra.gov.uk/', 'Regional/Europe/United_Kingdom/England/Regions/North_West/', 'Cheshire', 'North West England in England.svg', 'E12000002', 14165.0, '2641227', 'Category:Burials in North West England', 'Midland Hotel Manchester.jpg', 'Category:People from North West England', 'Category:Maps of North West England', 'West Midlands', '7000000000041431', 7341196.0, '12020.0', 'Q2554906');\nDatabase State:\n- Table: blaeus_atlas_maior_vol_5_england_bl_114h5, Columns: [label, description, instance_of, part_of, collection, inception, title, creator, inventory_number, publisher, place_of_publication, published_in, publication_date, location, image, copyright_status, main_subject]\n- Table: category_for_films_shot_at_this_location, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: source_of_information, Columns: [label, description, language_of_work_or_name, instance_of, publication_date, publisher, genre, image, country_of_origin]\n- Table: wikimedia_category, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: place_of_death, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: topic, Columns: [label, description, coordinate_location, topics_main_category, commons_category, instance_of, freebase_id, image, geonames_id, country, encyclop\u00e6dia_britannica_online_id, locator_map_image, store_norske_leksikon_id, population, described_by_source, shares_border_with, vision_of_britain_place_id, located_in_the_administrative_territorial_entity]\n- Table: political_border, Columns: [label, description, instance_of, commons_category, country, located_in_the_administrative_territorial_entity, coordinate_location, topics_main_category, page_banner, freebase_id, openstreetmap_relation_id, nuts_code, category_for_people_who_died_here, curlie_id, contains_the_administrative_territorial_entity, area, locator_map_image, geonames_id, category_of_people_buried_here, image, category_of_associated_people, shares_border_with, population, uk_parliament_thesaurus_id, eu_knowledge_graph_item_id]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO flights (Airline) VALUES (10, 1357, ' ATW', ' AMA');\nDatabase State:\n- Table: airlines, Columns: [uid]\n- Table: airports, Columns: [City]\n- Table: Airline_Flights, Columns: [Airline]",
        "Response": "Table: Airline_Flights"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (city_id, city_name, state, population, area) VALUES (623, 'Lancaster', 'California', 118718, 94.0);\nDatabase State:\n- Table: customer, Columns: [cust_id, cust_name, annual_revenue, cust_type, address, city, state, zip, phone]",
        "Response": "Table: city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO medicine_enzyme_interaction (enzyme_id, medicine_id, interaction_type) VALUES (3, 8, 'activitor');\nDatabase State:\n- Table: Medicine_Enzyme_Interactions, Columns: [enzyme_id, medicine_id, interaction_type]",
        "Response": "Table: Medicine_Enzyme_Interactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, named_after, part_of, instance_of) VALUES ('Kanne Horizon', 'nan', 'Kanne', 'Maastricht Formation', 'horizon');\nDatabase State:\n- Table: maastricht_formation, Columns: [label, description, named_after, part_of, instance_of]\n- Table: eponym, Columns: [label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of, commons_category, located_inon_physical_feature]",
        "Response": "Table: maastricht_formation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost) VALUES (10, 14, 11, 'prod_name', '7', 884.3999999999999773, 249.1899999999999978, NULL, 78.26000000000000511);\nDatabase State:\n- Table: Product_Categories, Columns: [production_type_code, product_type_description, vat_rating]\n- Table: Invoice_Line_Items, Columns: [order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost]\n- Table: Accounts, Columns: [account_id, customer_id, date_account_opened, account_name, other_account_details]\n- Table: Financial_Transactions, Columns: [transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details]",
        "Response": "Table: Invoice_Line_Items"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (region_id, game_platform_id, num_sales) VALUES (2, 10434, 0.05999999999999999778);\nDatabase State:\n- Table: game_platform, Columns: [id, game_publisher_id, platform_id, release_year]\n- Table: platform, Columns: [id, platform_name]",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Genes (GeneID, Essential, Class, Complex, Phenotype, Motif, Chromosome, Function, Localization) VALUES ('G235448', 'Non-Essential', '?', 'Intracellular transport complexes', 'Cell morphology and organelle mutants', '?', 8, 'PROTEIN DESTINATION', 'golgi');\nDatabase State:\n- Table: Interactions, Columns: [GeneID1, GeneID2, Type, Expression_Corr]\n- Table: Classification, Columns: [GeneID, Localization]\n- Table: Genes, Columns: [GeneID, Essential, Class, Complex, Phenotype, Motif, Chromosome, Function, Localization]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO winner (label, description, sex_or_gender, date_of_birth, freebase_id, instance_of, place_of_birth, country_of_citizenship, given_name, sport, family_name, occupation) VALUES ('Mungo Park', 'professional golfer', 'male', '+1836-10-22T00:00:00Z', '/m/0cwp1g', 'human', 'Inveresk', 'United Kingdom of Great Britain and Ireland', 'Mungo', 'golf', 'Park', 'golfer');\nDatabase State:\n- Table: Athletes, Columns: [label, description, sex_or_gender, date_of_birth, freebase_id, instance_of, place_of_birth, country_of_citizenship, given_name, sport, family_name, occupation]",
        "Response": "Table: Athletes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Rating (rID) VALUES (205, 108, 4, NULL);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Rating"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Products (product_id, product_name, product_details) VALUES (11, 'phone', NULL);\nDatabase State:\n- Table: Orders, Columns: [order_id, customer_id, order_status, date_order_placed, order_details]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (date, store_nbr, item_nbr, units) VALUES ('2014-10-31', 31, 105, 0);\nDatabase State:\n- Table: sales_in_weather, Columns: [date, store_nbr, item_nbr, units]",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Service_ID, Service_name) VALUES (4, 'Close a policy');\nDatabase State:\n- Table: Claims, Columns: [Claim_ID, FNOL_ID, Effective_Date]\n- Table: Services, Columns: [Service_ID, Service_name]\n- Table: Available_Policies, Columns: [Policy_ID, policy_type_code, Customer_Phone]\n- Table: Customers, Columns: [Customer_ID, Customer_name]\n- Table: Customers_Policies, Columns: [Customer_ID, Policy_ID, Date_Opened, Date_Closed]\n- Table: Settlements, Columns: [Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount]\n- Table: First_Notification_of_Loss, Columns: [FNOL_ID, Customer_ID, Policy_ID, Service_ID]",
        "Response": "Table: Services"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (architect_id, id, location, name, type, built_year, notes) VALUES (4, 6, 'Pousset', 'Moulin de Pousset', 'Grondzeiler', 1819, 'Molenechos (Dutch)');\nDatabase State:\n- Table: mill, Columns: [architect_id, id, location, name, type, built_year, notes]",
        "Response": "Table: mill"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO PersonFriend (name, friend, year) VALUES ('Zach', 'Dan', 12);\nDatabase State:\n- Table: Person, Columns: [name, age, city, gender, job]\n- Table: Friendships, Columns: [name, friend, year]",
        "Response": "Table: Friendships"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, student_id, grade, sat) VALUES (10, 14, 'A', 4);\nDatabase State:\n- Table: Student_Course_Grades, Columns: [course_id, student_id, grade, sat]",
        "Response": "Table: Student_Course_Grades"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('hypothetical protein Atu4170', 'microbial gene found in Agrobacterium fabrum str. C58', '1136044', 'gene', 'Hypothetical protein Atu4170', 'Agrobacterium fabrum str. C58', 'forward strand', '1289237', '1287999', 'gene', 'Atu4170');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: saccharopine_dehydrogenase_c_terminal_domain_protein_family, Columns: [label, description, encoded_by, uniprot_protein_id, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Has_Allergy (StuID, Allergy) VALUES (1025, 'Tree Pollen');\nDatabase State:\n- Table: Students_Allergies, Columns: [StuID, Allergy]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Allergy_Type, Columns: [Allergy, AllergyType]",
        "Response": "Table: Students_Allergies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('toxin of the YafQ-DinJ toxin-antitoxin system NGR_b09010', 'microbial gene found in Sinorhizobium fredii NGR234', 'Sinorhizobium fredii NGR234', '7788640', 'gene', 'Toxin of the YafQ-DinJ toxin-antitoxin system NGR_b09010', 'NGR_b09010', 'gene', '889814', 'forward strand', '889479');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO operate_company (id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding) VALUES (5, 'Cathay Pacific Cargo', 'Subsidiary', 'Cargo airline', 'Hong Kong', 100.0);\nDatabase State:\n- Table: airport, Columns: [id, City, Country, IATA, ICAO, name]\n- Table: flight, Columns: [id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id]\n- Table: operate_company, Columns: [id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding]",
        "Response": "Table: operate_company"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('50S ribosomal protein L11 BN117_0010', 'microbial gene found in Bordetella parapertussis Bpp5', '13888046', 'gene', '50S ribosomal protein L11 BN117_0010', 'Bordetella parapertussis Bpp5', 'forward strand', '9544.0', '9113.0', 'gene', 'BN117_0010');\nDatabase State:\n- Table: ribosomal_protein_l11_conserved_site_protein_family, Columns: [label, description, encoded_by, uniprot_protein_id, molecular_function, biological_process, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, menu_page_id, price, high_price, dish_id, created_at, updated_at, xpos, ypos) VALUES (1231103, 66906, 0.5999999999999999778, NULL, 3795, '2013-02-25 16:02:11 UTC', '2013-02-25 16:02:11 UTC', 0.1000000000000000055, 0.3191919999999999758);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: MenuItem"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, found_in_taxon, subclass_of, biological_process, instance_of, refseq_protein_id, part_of) VALUES ('DNA recombination-mediator protein A, SMF family CCNA_02529', 'microbial protein found in Caulobacter vibrioides NA1000', 'DNA recombination-mediator protein A, SMF family CCNA_02529', 'A0A0H3C9B5', 'Caulobacter crescentus NA1000', 'protein', 'DNA mediated transformation', 'protein', 'YP_002517902', 'DNA recombination-mediator protein A');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: dna_recombination_mediator_protein_a, Columns: [label, description, encoded_by, uniprot_protein_id, found_in_taxon, subclass_of, biological_process, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: dna_recombination_mediator_protein_a"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO players_teams (id, playerID, year, stint, tmID, lgID, GP, GS, minutes, points, oRebounds, dRebounds, rebounds, assists, steals, blocks, turnovers, PF, fgAttempted, fgMade, ftAttempted, ftMade, threeAttempted, threeMade, PostGP, PostGS, PostMinutes, PostPoints, PostoRebounds, PostdRebounds, PostRebounds, PostAssists, PostSteals, PostBlocks, PostTurnovers, PostPF, PostfgAttempted, PostfgMade, PostftAttempted, PostftMade, PostthreeAttempted, PostthreeMade, note) VALUES (2683, 'brownmi01', 1995, 1, 'PHI', 'NBA', 9, 0, 162, 26, 14, 23, 37, 3, 3, 2, 6, 24, 16, 9, 17, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL);\nDatabase State:\n- Table: awards_players, Columns: [playerID, award, year, lgID, note, pos]\n- Table: player_allstar, Columns: [playerID, last_name, first_name, season_id, conference, league_id, games_played, minutes, points, o_rebounds, d_rebounds, rebounds, assists, steals, blocks, turnovers, personal_fouls, fg_attempted, fg_made, ft_attempted, ft_made, three_attempted, three_made]\n- Table: players_teams, Columns: [id, playerID, year, stint, tmID, lgID, GP, GS, minutes, points, oRebounds, dRebounds, rebounds, assists, steals, blocks, turnovers, PF, fgAttempted, fgMade, ftAttempted, ftMade, threeAttempted, threeMade, PostGP, PostGS, PostMinutes, PostPoints, PostoRebounds, PostdRebounds, PostRebounds, PostAssists, PostSteals, PostBlocks, PostTurnovers, PostPF, PostfgAttempted, PostfgMade, PostftAttempted, PostftMade, PostthreeAttempted, PostthreeMade, note]\n- Table: awards_coaches, Columns: [id, year, coachID, award, lgID, note]",
        "Response": "Table: players_teams"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, sport, winner, location, point_in_time, coordinate_location, freebase_id) VALUES ('1897 Open Championship', 'golf tournament held in 1897', 'The Open Championship', 'golf', 'Harold Hilton', 'Royal Liverpool Golf Club, Hoylake', '+1897-00-00T00:00:00Z', '53.385', '/m/04lh41h');\nDatabase State:\n- Table: winner, Columns: [label, description, sex_or_gender, date_of_birth, freebase_id, instance_of, place_of_birth, country_of_citizenship, given_name, sport, family_name, occupation]\n- Table: Tournaments, Columns: [label, description, instance_of, sport, winner, location, point_in_time, coordinate_location, freebase_id]\n- Table: place_of_birth, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, country, topics_main_category, freebase_id, geonames_id, instance_of, viaf_id, local_dialing_code, image, library_of_congress_authority_id, whos_on_first_id, worldcat_identities_id, national_library_of_israel_j9u_id, postal_code, population]",
        "Response": "Table: Tournaments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO citation (label, description, pages, title, author_name_string, publication_date, issue, volume, published_in, instance_of, pubmed_id, doi, language_of_work_or_name) VALUES ('The distribution of heavy-chain isoforms of myosin in airways smooth muscle from adult and neonate humans', 'scientific journal article', '421\u2013426', 'The distribution of heavy-chain isoforms of myosin in airways smooth muscle from adult and neonate humans', 'M. A. Mohammad', '+1989-06-01T00:00:00Z', '2', '260', 'Biochemical Journal', 'scholarly article', '2764880', '10.1042/BJ2600421', 'English');\nDatabase State:\n- Table: Publications, Columns: [label, description, pages, title, author_name_string, publication_date, issue, volume, published_in, instance_of, pubmed_id, doi, language_of_work_or_name]\n- Table: publishing, Columns: [label, description, instance_of, official_website, freebase_id, issn, era_journal_id, oclc_control_number, coden, scopus_source_id, danish_bibliometric_research_indicator_bfi_snocno, danish_bibliometric_research_indicator_level, publisher, title, iso_4_abbreviation, opencitations_bibliographic_resource_id, nlm_unique_id, language_of_work_or_name, inception, country_of_origin, uniprot_journal_id, main_subject, jufo_id, acnp_journal_id, crossref_journal_id, issn_l, indexed_in_bibliographic_review, openalex_id, scilit_journal_id]\n- Table: smooth_muscle_contraction, Columns: [label, description, found_in_taxon, reactome_id, instance_of, part_of, exact_match, has_parts, cites_work]",
        "Response": "Table: Publications"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Answer (AnswerText, SurveyID, UserID, QuestionID) VALUES ('1', 2017, 2742, 7);\nDatabase State:\n- Table: Question, Columns: [questiontext, questionid]\n- Table: Survey, Columns: [SurveyID, Description]\n- Table: Answer, Columns: [AnswerText, SurveyID, UserID, QuestionID]",
        "Response": "Table: Answer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO batting (player_id, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp) VALUES ('doyleja01', 1899, 1, 'NY1', 'NL', 118, 448, 55, 134, 15, 7, 3, 76, 35, '', 33, '', '', 4, 3, '', '');\nDatabase State:\n- Table: player_college, Columns: [player_id, college_id, year]\n- Table: manager, Columns: [player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]\n- Table: batting, Columns: [player_id, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]\n- Table: manager_award_vote, Columns: [award_id, year, league_id, player_id, points_won, points_max, votes_first]\n- Table: hall_of_fame, Columns: [player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]\n- Table: player_award_vote, Columns: [award_id, year, league_id, player_id, points_won, points_max, votes_first]\n- Table: postseason, Columns: [year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]\n- Table: appearances, Columns: [year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]",
        "Response": "Table: batting"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, part_of, sport, country, follows, followed_by) VALUES ('2012 Venezuelan National Road Race Championships', 'nan', 'Venezuelan National Road Race Championships', '2012\u00a0national road cycling championships', 'road bicycle racing', 'Venezuela', '2011 Venezuelan National Road Race Championships', '2013 Venezuelan National Road Race Championships');\nDatabase State:\n- Table: part, Columns: [label, description, instance_of, follows, sport, has_parts, point_in_time, followed_by, subclass_of]\n- Table: CyclingChampionships, Columns: [label, description, instance_of, part_of, sport, country, follows, followed_by]",
        "Response": "Table: CyclingChampionships"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO games_competitor (id, games_id, person_id, age) VALUES (58285, 22, 44186, 17);\nDatabase State:\n- Table: games_competitor, Columns: [id, games_id, person_id, age]\n- Table: games_city, Columns: [games_id, city_id]\n- Table: sport, Columns: [id, sport_name]\n- Table: noc_region, Columns: [id, noc, region_name]\n- Table: city, Columns: [id, city_name]\n- Table: person_region, Columns: [person_id, region_id]",
        "Response": "Table: games_competitor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Users_Compliments (compliment_id, user_id, number_of_compliments) VALUES (6, 62301, 'Medium');\nDatabase State:\n- Table: User_ComplimentCounts, Columns: [compliment_id, user_id, number_of_compliments]\n- Table: Users, Columns: [user_id, user_yelping_since_year, user_average_stars, user_votes_funny, user_votes_useful, user_votes_cool, user_review_count, user_fans]\n- Table: Compliments, Columns: [compliment_id, compliment_type]",
        "Response": "Table: User_ComplimentCounts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, encoded_by, biological_process, cell_component, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('50S ribosomal protein L29 ECs4177', 'microbial protein found in Escherichia coli O157:H7 str. Sakai', 'P0A7M8', '50S ribosomal protein L29 ECs4177', 'nan', 'nan', 'nan', 'Ribosomal protein L29, conserved site', 'Escherichia coli O157:H7 str. Sakai', 'NP_312204', 'protein', 'Ribosomal protein L29/L35 superfamily', 'protein');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: ribosomal_protein_l29_l35_superfamily"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count) VALUES (9, 624, 'Studio', 'Apt. 940', 1, 4, '8');\nDatabase State:\n- Table: Apartment_Bookings, Columns: [apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date]\n- Table: Apartment_Buildings, Columns: [building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone]\n- Table: View_Unit_Status, Columns: [apt_id, apt_booking_id, status_date, available_yn]\n- Table: Guests, Columns: [guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth]\n- Table: Apartment_Facilities, Columns: [apt_id, facility_code]\n- Table: ResidentialUnits, Columns: [apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count]",
        "Response": "Table: ResidentialUnits"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movie_id, person_id, department_id, job) VALUES (50546, 34050, 4, 'Screenplay');\nDatabase State:\n- Table: person, Columns: [person_id, person_name]\n- Table: movie_genres, Columns: [movie_id, genre_id]",
        "Response": "Table: movie_crew"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS) VALUES (15719, '2000-2001', 'Guelph Storm', 'OHL', 'Playoffs', 4, 0, 1, 1, 8, -2);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO natural_product (label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number) VALUES ('Agrobacterium fabrum str. C58', 'nan', 'taxon', 'Agrobacterium fabrum str. C58', 'Agrobacterium tumefaciens', '176299', 'Gram-negative bacteria', 'GCA_000092025.1');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: natural_product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO book (Book_ID, Title, Issues, Writer) VALUES (4, 'BrainBanx', 6.0, 'Elaine Lee');\nDatabase State:\n- Table: publication, Columns: [Publication_ID, Book_ID, Publisher, Publication_Date, Price]\n- Table: ComicBooks, Columns: [Book_ID, Title, Issues, Writer]",
        "Response": "Table: ComicBooks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO regulates_molecular_biology (label, description, gene_ontology_id, subclass_of, exact_match, instance_of) VALUES ('glucosylceramide catabolic process', 'The chemical reactions and pathways resulting in the breakdown of glucosylceramides, any compound formed by the replacement of the glycosidic hydroxyl group of a cyclic form of glucose by a ceramide group.', 'GO:0006680', 'glycosylceramide catabolic process', 'http://purl.obolibrary.org/obo/GO_0006680', 'biological process');\nDatabase State:\n- Table: positive_regulation_of_cellular_catabolic_process, Columns: [label, description, gene_ontology_id, subclass_of, regulates_molecular_biology, exact_match, instance_of]",
        "Response": "Table: regulates_molecular_biology"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, image, corporate_number_japan, instance_of, located_in_the_administrative_territorial_entity, part_of, inception) VALUES ('Gyokurin-in', 'temple in Kita-ku, Ky\u014dto', 'Japan', 'Gyokurin-in.JPG', '5130005001224.0', 'Tatch\u016b', 'Kita-ku', 'Daitoku-ji', '+1603-00-00T00:00:00Z');\nDatabase State:\n- Table: political_border, Columns: [label, description, area, dantai_code, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, official_website, instance_of, freebase_id, population, musicbrainz_area_id, geonames_id, topics_main_category, shares_border_with, image, located_in_time_zone, viaf_id, geonlp_id, locator_map_image, openstreetmap_relation_id, facebook_id, whos_on_first_id, worldcat_identities_id, native_label, inception, name_in_kana, ndl_authority_id]\n- Table: part, Columns: [label, description, official_website, commons_category, coordinate_location, freebase_id, instance_of, country, ndl_authority_id, image, dedicated_to, located_in_the_administrative_territorial_entity, viaf_id, corporate_number_japan, religion_or_worldview, founded_by, inception, has_parts, tripadvisor_id, heritage_designation, japan_search_name_id, part_of]\n- Table: administrative_territorial_entity, Columns: [label, description, area, dantai_code, located_in_the_administrative_territorial_entity, country, commons_category, coordinate_location, instance_of, freebase_id, population, geonames_id, viaf_id, topics_main_category, image, located_in_time_zone, official_website, geonlp_id, locator_map_image, whos_on_first_id, worldcat_identities_id, inception, native_label, shares_border_with, name_in_kana]\n- Table: tatch\u016b, Columns: [label, description, country, image, corporate_number_japan, instance_of, located_in_the_administrative_territorial_entity, part_of, inception]",
        "Response": "Table: tatch\u016b"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Crime (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude) VALUES (11217034, 'JB132506', '1/28/2018 2:15', '065XX S DR MARTIN LUTHER KING JR DR', '810', 'HOTEL/MOTEL', 'TRUE', 'FALSE', 312, 3, 20, 42, '6', '41.77583464', '-87.61551514');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO new_zealand_grand_prix (label, description, pole_position, instance_of, point_in_time, country, winner, event_distance, fastest_lap, google_knowledge_graph_id) VALUES ('2017 New Zealand Grand Prix', 'New Zealand motor race', 'Jehan Daruvala', 'New Zealand Grand Prix', '+2017-00-00T00:00:00Z', 'New Zealand', 'Jehan Daruvala', NULL, 'Thomas Randle', '/g/11c6lwg1x9');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, country, topics_main_category, instance_of, locator_map_image, area, located_in_the_administrative_territorial_entity, shares_border_with, coordinate_location, population, inaturalist_place_id, image, geonames_id, official_website, commons_category, capital, openstreetmap_relation_id]\n- Table: pole_position, Columns: [label, description, sex_or_gender, date_of_birth, instance_of, place_of_birth, image, country_of_citizenship, given_name, occupation, family_name, commons_category, sport, motorsportstatscom_driver_id, racing_reference_driver_id, driver_database_driver_id]\n- Table: winner, Columns: [label, description, sex_or_gender, instance_of, freebase_id, date_of_birth, place_of_birth, country_of_citizenship, occupation, sport, driver_database_driver_id, given_name, family_name, motorsportstatscom_driver_id, racing_reference_driver_id, commons_category, image]\n- Table: performer_of_the_fastest_lap, Columns: [label, description, sex_or_gender, date_of_birth, freebase_id, instance_of, country_of_citizenship, given_name, occupation, place_of_birth, commons_category, driver_database_driver_id, image, sport, motorsportstatscom_driver_id, family_name]\n- Table: family_name_identical_to_this_given_name, Columns: [label, description, instance_of, different_from, commons_category, native_label, writing_system, soundex, caverphone, cologne_phonetics, wolfram_language_entity_code, g\u00e9opatronyme_id, geneanet_family_name_id]\n- Table: new_zealand_grand_prix, Columns: [label, description, pole_position, instance_of, point_in_time, country, winner, event_distance, fastest_lap, google_knowledge_graph_id]\n- Table: given_name, Columns: [label, description, different_from, family_name_identical_to_this_given_name, native_label, language_of_work_or_name, commons_category, writing_system, instance_of, soundex, cologne_phonetics, caverphone, attested_in, said_to_be_the_same_as, nederlandse_voornamenbank_id]\n- Table: family_name, Columns: [label, description, instance_of, different_from, commons_category, native_label, writing_system, soundex, caverphone, wolfram_language_entity_code, g\u00e9opatronyme_id, geneanet_family_name_id]",
        "Response": "Table: new_zealand_grand_prix"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Reviewer (rID) VALUES (203, 'Brittany Harris');\nDatabase State:\n- Table: Movie, Columns: [mID]\n- Table: Reviewer, Columns: [rID]",
        "Response": "Table: Reviewer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO historic_county (label, description, coordinate_location, country, freebase_id, located_in_the_administrative_territorial_entity, locator_map_image, instance_of, commons_category, catalog_code, shares_border_with, gazetteer_for_scotland_place_id, described_by_source, genuki_id, population, factgrid_item_id) VALUES ('Morayshire', 'historic and registration county of Scotland', '57.648423', 'United Kingdom', '/m/028ww7', 'Moray', 'Morayshire Brit Isles Sect 2.svg', 'registration county', 'Moray', 'MOY', 'Banffshire', 'counties/countyfirst18', 'Brockhaus and Efron Encyclopedic Dictionary', 'sct/MOR', 67647.0, 'Q217731');\nDatabase State:\n- Table: governing_body, Columns: [label, description, instance_of, country, bbc_things_id, uk_parliament_thesaurus_id, whatdotheyknow_organisation_id, inception, official_website, gss_code_2011, twitter_username, viaf_id, social_media_followers]",
        "Response": "Table: historic_county"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO volume (Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID) VALUES (1, '45:14 \u00a7', '27 December 1986 - 10 January', 3.0, ' The Way', 1);\nDatabase State:\n- Table: volume, Columns: [Volume_ID, Volume_Issue, Issue_Date, Weeks_on_Top, Song, Artist_ID]",
        "Response": "Table: volume"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO driver (Driver_ID, Name, Party, Home_city, Age) VALUES (11, 'Tim Larson', 'Dem', 'East Hartford', 36);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: driver"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Images (image_id, image_alt_text, image_name, image_url) VALUES (11, 'Name', 'data2', 'http://www.heller.com/1.jpg');\nDatabase State:\n- Table: Document_Structures, Columns: [document_structure_code, parent_document_structure_code, document_structure_description]\n- Table: Functional_Areas, Columns: [functional_area_code, parent_functional_area_code, functional_area_description]\n- Table: Users, Columns: [user_id, role_code, user_name, user_login, password]\n- Table: Document_Sections, Columns: [section_id, document_code, section_sequence, section_code, section_title]",
        "Response": "Table: Images"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (groupName, totalSnatched, artist, groupYear, releaseType, groupId, id) VALUES ('brainfreeze breaks', 496, 'cut chemist & dj shadow', 2001, 'compilation', 477725, 12868);\nDatabase State:\n- Table: tags, Columns: [index, id, tag]\n- Table: torrents, Columns: [groupName, totalSnatched, artist, groupYear, releaseType, groupId, id]",
        "Response": "Table: torrents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO expressed_in (label, description, subclass_of, instance_of, freebase_id, microsoft_academic_id, uberon_id) VALUES ('zone of skin', 'Any portion of the organ that covers that body and consists of a layer of epidermis and a layer of dermis.', 'nan', 'anatomical structure', 'nan', 'nan', '14.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: expressed_in"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO secretion_or_excretion (label, description, instance_of, taxon_name, taxon_rank, parent_taxon, this_taxon_is_source_of, image, freebase_id, plantlist_id, ncbi_taxonomy_id, ipni_plant_id, tropicos_id, grin_url, gbif_taxon_id, plants_of_the_world_online_id, world_flora_online_id, unii, open_tree_of_life_id, inaturalist_taxon_id, catalogue_of_life_id, taxon_common_name, described_by_source, has_use) VALUES ('Wolfiporia extensa', 'species of fungus', 'taxon', 'Wolfiporia extensa', 'species', 'Wolfiporia', 'Poria', 'Tuckahoe.jpg', '/m/03ctkrp', 'nan', 'nan', 'nan', 'nan', 'nan', '2549299.0', 'nan', 'nan', 'Y1I7Z6FF4R', '668093.0', '629251.0', '5C2YV', '\u832f\u82d3', 'Zhiwu Mingshi Tukao', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: secretion_or_excretion"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows) VALUES ('1967/1968 Swedish Junior Badminton Championships U19', 'badminton championships', 'Swedish Junior Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'Sweden', '+1968-00-00T00:00:00Z', '1968/1969 Swedish Junior Badminton Championships U19', 'national championship', '1967/1968 Swedish Junior Badminton Championships U19 \u2013 Men''s singles', '1966/1967 Swedish Junior Badminton Championships U19');\nDatabase State:\n- Table: follows, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of) VALUES ('Outer membrane protein precursor; OmpA family P60 FP0156', 'microbial gene found in Flavobacterium psychrophilum JIP02/86', '5299189', 'gene', 'Outer membrane protein precursor; OmpA family P60    FP0156', 'Flavobacterium psychrophilum JIP02/86', 'reverse strand', '202628.0', '201231.0', 'gene');\nDatabase State:\n- Table: tsp_type_3_repeat, Columns: [label, description, uniprot_protein_id, encoded_by, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: Genes, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (People_ID, Name, Height, Weight, Home_Town) VALUES (5, 'John Danks', 6.599999999999999645, 190.0, 'Beaver Dam, KY');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: people"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO list (LastName) VALUES ('AREHART', ' VERTIE', 3, 107);\nDatabase State:\n- Table: People, Columns: [LastName]",
        "Response": "Table: People"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (customerNumber, customerName, contactLastName, contactFirstName, phone, addressLine1, addressLine2, city, state, postalCode, country, salesRepEmployeeNumber, creditLimit) VALUES (385, 'Cruz & Sons Co.', 'Cruz', 'Arnold', '+63 2 555 3587', '15 McCallum Street', 'NatWest Center #13-03', 'Makati City', NULL, '1227 MM', 'Philippines', 1621, 81500.0);\nDatabase State:\n- Table: productlines, Columns: [productLine, textDescription, htmlDescription, image]\n- Table: employees, Columns: [employeeNumber, lastName, firstName, extension, email, officeCode, reportsTo, jobTitle]\n- Table: products, Columns: [productCode, productName, productLine, productScale, productVendor, productDescription, quantityInStock, buyPrice, MSRP]\n- Table: orderdetails, Columns: [orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber]\n- Table: orders, Columns: [orderNumber, orderDate, requiredDate, shippedDate, status, comments, customerNumber]\n- Table: offices, Columns: [officeCode, city, phone, addressLine1, addressLine2, state, country, postalCode, territory]\n- Table: payments, Columns: [customerNumber, checkNumber, paymentDate, amount]",
        "Response": "Table: customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1021, 'Andreou', 'George', 19, 'M', 520, 8722, 'NYC');\nDatabase State:\n- Table: Has_Pet, Columns: [StuID, PetID]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Pets, Columns: [PetID, PetType, pet_age, weight]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Extra_Runs (Match_Id, Over_Id, Ball_Id, Extra_Type_Id, Extra_Runs, Innings_No) VALUES (501246, 6, 4, 1, 1, 1);\nDatabase State:\n- Table: Extra_Type, Columns: [Extra_Id, Extra_Name]\n- Table: Outcome, Columns: [Outcome_Id, Outcome_Type]\n- Table: Win_By, Columns: [Win_Id, Win_Type]\n- Table: Rolee, Columns: [Role_Id, Role_Desc]\n- Table: City, Columns: [City_Id, City_Name, Country_id]\n- Table: Player_Match, Columns: [Match_Id, Player_Id, Role_Id, Team_Id]\n- Table: Wicket_Taken, Columns: [Match_Id, Over_Id, Ball_Id, Player_Out, Kind_Out, Fielders, Innings_No]\n- Table: Player, Columns: [Player_Id, Player_Name, DOB, Batting_hand, Bowling_skill, Country_Name]\n- Table: Ball_by_Ball, Columns: [Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler]\n- Table: Batting_Style, Columns: [Batting_Id, Batting_hand]\n- Table: Country, Columns: [Country_Id, Country_Name]",
        "Response": "Table: Extra_Runs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (account_id, customer_id, date_account_opened, account_name, other_account_details) VALUES (11, 13, '2012-07-09 23:40:15', '191', 'VIP');\nDatabase State:\n- Table: CustomerAccounts, Columns: [account_id, customer_id, date_account_opened, account_name, other_account_details]",
        "Response": "Table: CustomerAccounts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, pages, title, author_name_string, publication_date, issue, volume, published_in, instance_of, pubmed_id, doi, language_of_work_or_name) VALUES ('Tapasin enhances MHC class I peptide presentation according to peptide half-life', 'scientific article', '11737-42', 'Tapasin enhances MHC class I peptide presentation according to peptide half-life', 'Mark Howarth', '+2004-08-10T00:00:00Z', '32', '101', 'Proceedings of the National Academy of Sciences of the United States of America', 'scholarly article', '15286279', '10.1073/PNAS.0306294101', 'English');\nDatabase State:\n- Table: antigen_presentation_folding_assembly_and_peptide_loading_of_class_i_mhc, Columns: [label, description, cites_work, instance_of, found_in_taxon, reactome_id, part_of, exact_match, has_parts]\n- Table: citation, Columns: [label, description, pages, title, author_name_string, publication_date, issue, volume, published_in, instance_of, pubmed_id, doi, language_of_work_or_name]",
        "Response": "Table: citation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Book_ID, Title, Issues, Writer) VALUES (9, 'Michael Moorcock''s Multiverse', 12.0, 'Michael Moorcock');\nDatabase State:\n- Table: Comic_Books, Columns: [Book_ID, Title, Issues, Writer]",
        "Response": "Table: Comic_Books"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('nucleoside permease nupC CCNA_02171', 'microbial gene found in Caulobacter vibrioides NA1000', '7333421', 'protein-coding gene', 'Nucleoside permease nupC CCNA_02171', 'Caulobacter crescentus NA1000', 'reverse strand', '2324579.0', '2323299.0', 'gene', 'CCNA_02171');\nDatabase State:\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, commons_category, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, image, catalogue_of_life_id, gram_staining, lpsn_url, mesh_descriptor_id, microsoft_academic_id, openalex_id]\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: concentrative_nucleoside_transporter_n_terminal_domain_protein_family, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Church_ID, Male_ID, Female_ID, Year) VALUES (4, 7, 8, 2016);\nDatabase State:\n- Table: wedding, Columns: [Church_ID, Male_ID, Female_ID, Year]",
        "Response": "Table: wedding"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Ship (Ship_ID, Name, Type, Built_Year, Class, Flag) VALUES (4, 'HM Schooner Hotspur', 'Panamax', 1998.0, 'KR', 'Panama');\nDatabase State:\n- Table: Ships, Columns: [Ship_ID, Name, Type, Built_Year, Class, Flag]\n- Table: captain, Columns: [Captain_ID, Name, Ship_ID, age, Class, Rank]",
        "Response": "Table: Ships"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO beers (id, brewery_id, abv, ibu, name, style, ounces) VALUES (1078, 428, 0.04499999999999999834, 30.0, 'Schlafly IPA', 'American IPA', 12.0);\nDatabase State:\n- Table: BeerDatabase, Columns: [id, brewery_id, abv, ibu, name, style, ounces]",
        "Response": "Table: BeerDatabase"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO west_superstore (Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit) VALUES (15322, 'CA-2013-100244', '2015-09-21', '2015-09-25', 'Standard Class', 'GM-14695', 'West', 'OFF-BI-10003656', 271.9839999999999805, 2, 0.2000000000000000111, 88.39480000000000359);\nDatabase State:\n- Table: Sales, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO yhch_yjgk_yial_superfamily (label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of) VALUES ('Hypothetical protein EAE_09730', 'microbial protein found in Klebsiella aerogenes KCTC 2190', 'A0A0H3FN76', 'Enterobacter aerogenes KCTC 2190', 'protein', 'hypothetical protein EAE_09730', 'protein', 'YP_004592143', 'YhcH/YjgK/YiaL family');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: yhch_yjgk_yial_superfamily"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO injury_accident (game_id, id, Player, Injury, Number_of_matches, Source) VALUES (1, 1, 'Davide Santon', 'Clean-up surgery on his right knee', '12', 'inter.it');\nDatabase State:\n- Table: stadium, Columns: [id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage]\n- Table: Injured_Players, Columns: [game_id, id, Player, Injury, Number_of_matches, Source]",
        "Response": "Table: Injured_Players"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, coat_of_arms_image, located_in_the_administrative_territorial_entity, coordinate_location, commons_category, instance_of, image, area, geonames_id, ine_id_portugal, openstreetmap_relation_id, population, factgrid_item_id, flag_image, freebase_id, official_website, topics_main_category, postal_code, located_in_time_zone, contains_the_administrative_territorial_entity, shares_border_with, inaturalist_place_id) VALUES ('Ma\u00e7\u00e3o', 'municipality and town of Portugal', 'Portugal', 'MAC.png', 'Santar\u00e9m', '39.55', 'Ma\u00e7\u00e3o', 'municipality of Portugal', 'Aldeia do Pereiro de Ma\u00e7\u00e3o.jpg', 399.9800000000000181, '8010606.0', '1413', '5399551', 7338.0, 'Q359123', 'Pt-mac1.png', '/m/05yt4c', 'http://www.cm-macao.pt/', 'Category:Ma\u00e7\u00e3o', '6120', 'UTC\u00b100:00', 'Am\u00eandoa', 'Sardoal', '48974.0');\nDatabase State:\n- Table: linha_da_beira_baixa, Columns: [label, description, instance_of, country, part_of, coordinate_location, located_in_the_administrative_territorial_entity, located_in_time_zone, connecting_line, google_knowledge_graph_id, commons_category, image]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, located_in_the_administrative_territorial_entity, postal_code, follows, followed_by, part_of, coordinate_location, google_knowledge_graph_id) VALUES ('Asakura interchange', 'interchange in Asakura, Fukuoka prefecture, Japan', 'interchange', 'Japan', 'Asakura', '838-1303', 'Amagi interchange', 'Yamada service area', 'Oita Expressway', '33.381205555556', '/g/1212mct_');\nDatabase State:\n- Table: follows, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, postal_code, follows, followed_by, part_of, coordinate_location, google_knowledge_graph_id]\n- Table: administrative_territorial_entity, Columns: [label, description, dantai_code, commons_category, country, located_in_the_administrative_territorial_entity, coordinate_location, official_website, ndl_authority_id, instance_of, freebase_id, population, geonames_id, viaf_id, topics_main_category, corporate_number_japan, located_in_time_zone, name_in_kana, area, opencorporates_id, geonlp_id, image, locator_map_image, whos_on_first_id, flag_image, worldcat_identities_id, shares_border_with, inception, inaturalist_place_id]\n- Table: oita_expressway, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, postal_code, follows, followed_by, coordinate_location, part_of, google_knowledge_graph_id]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1035, 'Schmidt', 'Sarah', 26, 'F', 50, 5718, 'WAS');\nDatabase State:\n- Table: SportsInfo, Columns: [StuID, SportName, HoursPerWeek, GamesPlayed, OnScholarship]\n- Table: Video_Games, Columns: [GameID, GName, GType]\n- Table: Plays_Games, Columns: [StuID, GameID, Hours_Played]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO book (book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id) VALUES (3303, 'The Mother Tongue: English and How It Got That Way', '9780380715435', 1, 270, '1991-09-28', 2210);\nDatabase State:\n- Table: shipping_method, Columns: [method_id, method_name, cost]\n- Table: book_language, Columns: [language_id, language_code, language_name]\n- Table: customer, Columns: [customer_id, first_name, last_name, email]\n- Table: customer_address, Columns: [customer_id, address_id, status_id]",
        "Response": "Table: book"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, doi, instance_of, title, published_in, followed_by, publication_date, volume, part_of, main_subject, follows, author_name_string) VALUES ('Social media hashtags and campaigns showcasing female geoscientist selfies and stories', 'scholarly article by Laura Guertin published 7 August 2018 in Memoir / Geological Society of America', '10.1130/2018.1214(09)', 'scholarly article', 'Social media hashtags and campaigns showcasing female geoscientist selfies and stories', 'Memoir / Geological Society of America', 'Progress of women in the geosciences: Insight from a small liberal arts university', '+2018-08-07T00:00:00Z', '214', 'Women and Geology: Who Are We, Where Have We Come From, and Where Are We Going?', 'social media', 'How we look and what we see: Twenty years of women in GSA Today', 'Laura Guertin');\nDatabase State:\n- Table: women_and_geology_who_are_we_where_have_we_come_from_and_where_are_we_going, Columns: [label, description, doi, instance_of, title, published_in, followed_by, publication_date, volume, part_of, main_subject, follows, author_name_string]\n- Table: followed_by, Columns: [label, description, doi, instance_of, title, published_in, follows, followed_by, volume, publication_date, part_of, author_name_string]\n- Table: follows, Columns: [label, description, doi, instance_of, title, published_in, followed_by, publication_date, volume, part_of, follows, author_name_string]",
        "Response": "Table: women_and_geology_who_are_we_where_have_we_come_from_and_where_are_we_going"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO protected_zones_of_national_interest (label, description, coordinate_location, country, instance_of, area, described_at_url, inception, located_in_the_administrative_territorial_entity, code, location, geoshape, inaturalist_place_id, official_name) VALUES ('Kuebend\u00e4llchen', 'Nature reserve in Luxembourg', '49.514', 'Luxembourg', 'protected zones of national interest', 35.10000000000000142, 'http://legilux.public.lu/eli/etat/leg/rgd/1991/10/25/n5/jo', '+1991-10-25T00:00:00Z', 'Schengen', 'PS 11', 'Schengen', 'Data:ZPIN Kuebend\u00e4llchen\".map', '157369', 'Kuebend\u00e4llchen');\nDatabase State:\n- Table: physical_location, Columns: [label, description, commons_category, country, coordinate_location, instance_of, topics_main_category, freebase_id, geonames_id, shares_border_with, area, official_website, elevation_above_sea_level, population, lau, whos_on_first_id, inaturalist_place_id, located_in_the_administrative_territorial_entity]",
        "Response": "Table: protected_zones_of_national_interest"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO events (Date_received, Product, Sub_product, Issue, Sub_issue, Consumer_complaint_narrative, Tags, Consumer_consent_provided?, Submitted_via, Date_sent_to_company, Company_response_to_consumer, Timely_response?, Consumer_disputed?, Complaint_ID, Client_ID) VALUES ('2012-11-23', 'Bank account or service', 'Checking account', 'Account opening, closing, or management', NULL, NULL, NULL, 'N/A', 'Referral', '2012-11-27', 'Closed with explanation', 'Yes', 'No', 'CR0196465', 'C00003380');\nDatabase State:\n- Table: Consumer_Complaints, Columns: [Date_received, Product, Sub_product, Issue, Sub_issue, Consumer_complaint_narrative, Tags, Consumer_consent_provided?, Submitted_via, Date_sent_to_company, Company_response_to_consumer, Timely_response?, Consumer_disputed?, Complaint_ID, Client_ID]\n- Table: reviews, Columns: [Date, Stars, Reviews, Product, district_id]\n- Table: state, Columns: [StateCode, State, Region]\n- Table: callcenterlogs, Columns: [Date_received, Complaint_ID, rand_client, phonefinal, vru+line, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time]",
        "Response": "Table: Consumer_Complaints"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Business_Attributes (attribute_id, business_id, attribute_value) VALUES (71, 8369, 'false');\nDatabase State:\n- Table: Checkins, Columns: [business_id, day_id, label_time_0, label_time_1, label_time_2, label_time_3, label_time_4, label_time_5, label_time_6, label_time_7, label_time_8, label_time_9, label_time_10, label_time_11, label_time_12, label_time_13, label_time_14, label_time_15, label_time_16, label_time_17, label_time_18, label_time_19, label_time_20, label_time_21, label_time_22, label_time_23]\n- Table: Days, Columns: [day_id, day_of_week]\n- Table: Users_Compliments, Columns: [compliment_id, user_id, number_of_compliments]\n- Table: Tips, Columns: [business_id, user_id, likes, tip_length]\n- Table: Categories, Columns: [category_id, category_name]\n- Table: Users, Columns: [user_id, user_yelping_since_year, user_average_stars, user_votes_funny, user_votes_useful, user_votes_cool, user_review_count, user_fans]\n- Table: Compliments, Columns: [compliment_id, compliment_type]\n- Table: Years, Columns: [year_id, actual_year]\n- Table: Business_Info, Columns: [attribute_id, business_id, attribute_value]\n- Table: Business_Hours, Columns: [business_id, day_id, opening_time, closing_time]\n- Table: Business, Columns: [business_id, active, city, state, stars, review_count]\n- Table: Elite, Columns: [user_id, year_id]\n- Table: Business_Categories, Columns: [business_id, category_id]\n- Table: Attributes, Columns: [attribute_id, attribute_name]\n- Table: Reviews, Columns: [business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length]",
        "Response": "Table: Business_Info"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Election_ID, Representative_ID, Date, Votes, Vote_Percent, Seats, Place) VALUES (5, 7, '1953', 12422.0, 16.0, 7.0, 3.0);\nDatabase State:\n- Table: election, Columns: [Election_ID, Representative_ID, Date, Votes, Vote_Percent, Seats, Place]",
        "Response": "Table: election"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO country (label, description, topics_main_wikimedia_portal, continent, instance_of, commons_category, library_of_congress_authority_id, idref_id, biblioth\u00e8que_nationale_de_france_id, gnd_id, coordinate_location, topics_main_category, freebase_id, inception, locator_map_image, flag_image, anthem, basic_form_of_government, legislative_body, currency, capital, category_of_associated_people, described_by_source, page_banner, commons_gallery, demonym, shares_border_with, encyclop\u00e6dia_britannica_online_id, population, quora_topic_id, yso_id, getty_thesaurus_of_geographic_names_id, stw_thesaurus_for_economics_id, us_national_archives_identifier, coat_of_arms, official_language, area, mesh_descriptor_id, great_russian_encyclopedia_online_id, native_label, part_of, viaf_id, klexikon_article_id, isni, gran_enciclop\u00e8dia_catalana_id, omegawiki_defined_meaning, category_for_maps, office_held_by_head_of_state, french_vikidia_id, language_used, member_of, nkcr_aut_id, worldcat_identities_id, coat_of_arms_image, replaces, diplomatic_relation, pm20_geo_code, interlingual_index_id, economy_of_topic, libris_uri, bhcl_uuid, wordnet_31_synset_id, idaigazetteer_id, store_norske_leksikon_id, den_store_danske_id, national_library_of_israel_j9u_id, demographics_of_topic, museum_digital_place_id, nese_id, brockhaus_enzyklop\u00e4die_online_id, on_focus_list_of_wikimedia_project, babelnet_id, country, short_name, head_of_state, motto_text, le_monde_diplomatique_subject_id, country_calling_code, flag, ndl_authority_id, geonames_id, unesco_thesaurus_id, ioc_country_code, gacs_id, contains_the_administrative_territorial_entity, kbpedia_id, uk_parliament_thesaurus_id, yle_topic_id, ysa_id, eu_knowledge_graph_item_id) VALUES ('United States of America', 'country in North America', 'Italia', 'North America', 'country', 'United States', 'n78095330', '026376598', '118636082', '4078704-7', '39.828175', 'Category:United States', '/m/09c7w0', '+1784-05-12T00:00:00Z', 'USA orthographic.svg', 'Flag of the United States.svg', 'The Star-Spangled Banner', 'presidential system', 'United States Congress', 'United States dollar', 'Washington, D.C.', 'Category:American people', 'Small Brockhaus and Efron Encyclopedic Dictionary', 'Statue of Liberty light banner.jpg', 'United States', 'American', 'Canada', 'place/United-States', 331449281.0, 'The-United-States-of-America', '105078.0', '7012149.0', '17829-1', '10045728.0', 'Great Seal of the United States', 'English', 9826675.0, 'D014481', '3590227.0', 'United States of America', 'North America', '130168302', 'Vereinigte_Staaten_von_Amerika', '0000 0001 2331 5230', '25184.0', '6578.0', 'Category:Maps of the United States', 'President of the United States', '\u00c9tats-Unis', 'English', 'World Health Organization', 'ge128584', 'lccn-n78095330', 'Greater coat of arms of the United States.svg', 'Thirteen Colonies', 'Afghanistan', 'E15', 'i84182', 'economy of the United States', 'xv8b9vvg52nbbxp', 'c14926bc-96b3-4a7c-a343-9e1640b0f9a9', '09067337-n', '2086335.0', 'USA', 'USA', '9.870072691397052e+17', 'demographics of the United States', '2312', 'united-states', 'vereinigte-staaten-von-amerika', 'Wikipedia:List of articles all languages should have', '00003341n', 'United States of America', 'USA', 'Joe Biden', 'In God We Trust', 'pays/etatsunis', '1.0', 'flag of the United States', '871907.0', '6252001.0', 'concept806', 'USA', '322.0', 'Delaware', 'UnitedStatesOfAmerica', '13557.0', '18-193507', 'Y105078', 'Q373');\nDatabase State:\n- Table: country, Columns: [label, description, topics_main_wikimedia_portal, continent, instance_of, commons_category, library_of_congress_authority_id, idref_id, biblioth\u00e8que_nationale_de_france_id, gnd_id, coordinate_location, topics_main_category, freebase_id, inception, locator_map_image, flag_image, anthem, basic_form_of_government, legislative_body, currency, capital, category_of_associated_people, described_by_source, page_banner, commons_gallery, demonym, shares_border_with, encyclop\u00e6dia_britannica_online_id, population, quora_topic_id, yso_id, getty_thesaurus_of_geographic_names_id, stw_thesaurus_for_economics_id, us_national_archives_identifier, coat_of_arms, official_language, area, mesh_descriptor_id, great_russian_encyclopedia_online_id, native_label, part_of, viaf_id, klexikon_article_id, isni, gran_enciclop\u00e8dia_catalana_id, omegawiki_defined_meaning, category_for_maps, office_held_by_head_of_state, french_vikidia_id, language_used, member_of, nkcr_aut_id, worldcat_identities_id, coat_of_arms_image, replaces, diplomatic_relation, pm20_geo_code, interlingual_index_id, economy_of_topic, libris_uri, bhcl_uuid, wordnet_31_synset_id, idaigazetteer_id, store_norske_leksikon_id, den_store_danske_id, national_library_of_israel_j9u_id, demographics_of_topic, museum_digital_place_id, nese_id, brockhaus_enzyklop\u00e4die_online_id, on_focus_list_of_wikimedia_project, babelnet_id, country, short_name, head_of_state, motto_text, le_monde_diplomatique_subject_id, country_calling_code, flag, ndl_authority_id, geonames_id, unesco_thesaurus_id, ioc_country_code, gacs_id, contains_the_administrative_territorial_entity, kbpedia_id, uk_parliament_thesaurus_id, yle_topic_id, ysa_id, eu_knowledge_graph_item_id]\n- Table: operator, Columns: [label, description, commons_category, instance_of, freebase_id, viaf_id, library_of_congress_authority_id, inception, headquarters_location, country, industry, topics_main_category, worldcat_identities_id, replaces]\n- Table: replaced_entity, Columns: [label, description, instance_of, inception, country, replaced_by]\n- Table: railway_coach, Columns: [label, description, subclass_of, commons_category, operator, instance_of]",
        "Response": "Table: country"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (constructorStandingsId, raceId, constructorId, points, position, positionText, wins) VALUES (11173, 491, 55, 1.0, 12, '12', 0);\nDatabase State:\n- Table: constructorResults, Columns: [constructorResultsId, raceId, constructorId, points, status]\n- Table: qualifying, Columns: [qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3]\n- Table: status, Columns: [statusId, status]\n- Table: pitStops, Columns: [raceId, driverId, stop, lap, time, duration, milliseconds]\n- Table: lapTimes, Columns: [raceId, driverId, lap, position, time, milliseconds]\n- Table: results, Columns: [resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId]\n- Table: constructors, Columns: [constructorId, constructorRef, name, nationality, url]\n- Table: driverStandings, Columns: [driverStandingsId, raceId, driverId, points, position, positionText, wins]\n- Table: seasons, Columns: [year, url]\n- Table: races, Columns: [raceId, year, round, circuitId, name, date, time, url]\n- Table: circuits, Columns: [circuitId, circuitRef, name, location, country, lat, lng, alt, url]",
        "Response": "Table: constructorStandings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO RA (student_id, capability, prof_id, salary) VALUES (31, 3, 5, 'high');\nDatabase State:\n- Table: Research_Assignments, Columns: [student_id, capability, prof_id, salary]\n- Table: course, Columns: [course_id, name, credit, diff]\n- Table: registration, Columns: [course_id, student_id, grade, sat]",
        "Response": "Table: Research_Assignments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, coordinate_location, freebase_id, instance_of, image, located_in_the_administrative_territorial_entity, commons_category, country, topics_main_category, area) VALUES ('Central District', 'one of the six districts of Israel', '31.93333333', '/m/03gct3', 'districts of Israel', 'Ramla 6781a.jpg', 'Israel', 'Central District (Israel)', 'Israel', 'Category:Central District (Israel)', 1293.0);\nDatabase State:\n- Table: GeographicRegions, Columns: [label, description, coordinate_location, freebase_id, instance_of, image, located_in_the_administrative_territorial_entity, commons_category, country, topics_main_category, area]\n- Table: national_parks_of_israel, Columns: [label, description, instance_of, commons_category, coordinate_location, image, located_in_the_administrative_territorial_entity, geonames_id, country]",
        "Response": "Table: GeographicRegions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Teacher_ID, Name, Age, Hometown) VALUES (3, 'Vicente Carretero', '26', 'Farnworth Municipal Borough');\nDatabase State:\n- Table: teacher, Columns: [Teacher_ID, Name, Age, Hometown]",
        "Response": "Table: teacher"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, category, person, role, credited) VALUES ('S20-E19', 'Writing Credits', 'James L. Brooks', 'developer', 'true');\nDatabase State:\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Character_Award, Columns: [award_id, character]\n- Table: Credit, Columns: [episode_id, category, person, role, credited]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, person, role, episode_id, season, song, result]\n- Table: Episode, Columns: [episode_id, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO content (paper_id, word_cited_id) VALUES ('orr00smart', 'word2784');\nDatabase State:\n- Table: content, Columns: [paper_id, word_cited_id]",
        "Response": "Table: content"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (TransactionID, CreditCardNumber, CustomerID, TransactionDate, CreditCardType, LocationID, RootBeerID, PurchasePrice) VALUES (101601, 4024007159858587, 249779, '2015-06-05', 'Visa', 1, 101135, 3.0);\nDatabase State:\n- Table: RootBeerTransactions, Columns: [TransactionID, CreditCardNumber, CustomerID, TransactionDate, CreditCardType, LocationID, RootBeerID, PurchasePrice]",
        "Response": "Table: RootBeerTransactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO s_adenosyl_l_methionine_dependent_methyltransferase_mraw_recognition_domain_superfamily (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of, cell_component) VALUES ('S-adenosyl-methyltransferase MraW BC3918', 'microbial protein found in Bacillus cereus ATCC 14579', 'S-adenosyl-methyltransferase MraW BC3918', 'Q819P8', 'methylation', 'methyltransferase activity', 'Bacillus cereus ATCC 14579', 'NP_833638', 'protein', 'Ribosomal RNA small subunit methyltransferase H', 'protein', 'cytoplasm');\nDatabase State:\n- Table: Protein_Methyltransferase_Family, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of, cell_component]",
        "Response": "Table: Protein_Methyltransferase_Family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Product_Characteristics (product_id, characteristic_id, product_characteristic_value) VALUES (6, 10, 'high');\nDatabase State:\n- Table: Ref_Characteristic_Types, Columns: [characteristic_type_code, characteristic_type_description]\n- Table: Product_Characteristics, Columns: [product_id, characteristic_id, product_characteristic_value]\n- Table: Products, Columns: [product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details]\n- Table: Characteristics, Columns: [characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details]",
        "Response": "Table: Product_Characteristics"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO citation (label, description, pubmed_id, instance_of, title, published_in, volume, issue, publication_date, pages, author_name_string, doi, language_of_work_or_name) VALUES ('Transport of bile acids in multidrug-resistance-protein 3-overexpressing cells co-transfected with the ileal Na+-dependent bile-acid transporter', 'scientific article', '12220224', 'scholarly article', 'Transport of bile acids in multidrug-resistance-protein 3-overexpressing cells co-transfected with the ileal Na+-dependent bile-acid transporter', 'Biochemical Journal', '369', 'Pt 1', '+2003-01-01T00:00:00Z', '23-30', 'Tohru Saeki', '10.1042/BJ20021081', 'English');\nDatabase State:\n- Table: recycling_of_bile_acids_and_salts, Columns: [label, description, cites_work, instance_of, found_in_taxon, reactome_id, part_of, exact_match, has_parts]\n- Table: Publications, Columns: [label, description, pubmed_id, instance_of, title, published_in, volume, issue, publication_date, pages, author_name_string, doi, language_of_work_or_name]",
        "Response": "Table: Publications"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (organisation_id, organisation_type, organisation_details) VALUES (6, 'RES', 'dolorem');\nDatabase State:\n- Table: Grants, Columns: [grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]\n- Table: Document_Types, Columns: [document_type_code, document_description]\n- Table: Projects, Columns: [project_id, organisation_id, project_details]\n- Table: Project_Staff, Columns: [staff_id, project_id, role_code, date_from, date_to, other_details]",
        "Response": "Table: Organisations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Projects (Code, Name, Hours) VALUES ('Ast1', 'A Matter of Time', 112);\nDatabase State:\n- Table: Scientists, Columns: [SSN, Name]",
        "Response": "Table: Projects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address) VALUES (2, 'Breton, Robert', 'White', 67, 41, 4, 'Waterbury');\nDatabase State:\n- Table: happy_hour_member, Columns: [HH_ID, Member_ID, Total_amount]\n- Table: shop, Columns: [Shop_ID, Address, Num_of_staff, Score, Open_Year]\n- Table: happy_hour, Columns: [HH_ID, Shop_ID, Month, Num_of_shaff_in_charge]",
        "Response": "Table: member"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, name, Height, Prominence, Range, Country) VALUES (15, 'Weshema / Wasema?', 4030.0, 420.0, 'Bale Mountains', 'Ethiopia');\nDatabase State:\n- Table: photos, Columns: [id, mountain_id, color]\n- Table: camera_lens, Columns: [id, brand, name, focal_length_mm, max_aperture]",
        "Response": "Table: mountain"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Premises (premise_id, premises_type, premise_details) VALUES (11, 'Office', '00100 Green Mountains Apt. 653');\nDatabase State:\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges]\n- Table: Mailshot_Customers, Columns: [mailshot_id, customer_id, outcome_code, mailshot_customer_date]\n- Table: Mailshot_Campaigns, Columns: [mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date]\n- Table: Customer_Addresses, Columns: [customer_id, premise_id, date_address_from, address_type_code, date_address_to]",
        "Response": "Table: Premises"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, twinned_administrative_body, located_in_the_administrative_territorial_entity, country, instance_of, coat_of_arms_image, commons_category, coordinate_location, page_banner, topics_main_category, freebase_id, musicbrainz_area_id, geonames_id, gnd_id, category_for_people_who_died_here, category_of_associated_people, capital_of, viaf_id, image, official_website, commons_gallery, population, located_in_time_zone, elevation_above_sea_level, area, postal_code, encyclop\u00e6dia_britannica_online_id, great_russian_encyclopedia_online_id, located_in_or_next_to_body_of_water, archinform_location_id, official_name, whos_on_first_id, described_by_source, library_of_congress_authority_id, category_for_maps, nkcr_aut_id, worldcat_identities_id, locator_map_image, factgrid_item_id, national_library_of_israel_j9u_id, store_norske_leksikon_id, online_pwn_encyclopedia_id) VALUES ('Toledo', 'municipality in central Spain', 'Aachen', 'Toledo Province', 'Spain', 'municipality of Spain', 'Escudo de la ciudad de Toledo.svg', 'Toledo, Spain', '39.866666666667', 'Toledo, Spain banner.jpg', 'Category:Toledo, Spain', '/m/07q3s', '5c253919-3b81-463b-a5dc-887b6773d3e7', '6361828', '4078343-1', 'Category:Deaths in Toledo, Spain', 'Category:People from Toledo, Spain', 'Kingdom of Toledo', '133640606.0', 'Toledo (37737041515).jpg', 'https://www.toledo.es', 'Toledo', 85085.0, 'UTC+01:00', 529.0, 232.0999999999999944, '45001\u201345009', 'place/Toledo-Spain', '4195604.0', 'Tagus River', '5976.0', 'Toledo', '101748259', 'Brockhaus and Efron Encyclopedic Dictionary', 'n79021811', 'Category:Maps of Toledo, Spain', 'ge137898', 'lccn-n79021811', 'nan', 'Q164504', '9.870075549575052e+17', 'Toledo', '3987824.0');\nDatabase State:\n- Table: political_border, Columns: [label, description, country, located_in_the_administrative_territorial_entity, commons_category, coat_of_arms_image, coordinate_location, topics_main_category, instance_of, freebase_id, geonames_id, shares_border_with, official_website, area, capital, locator_map_image, population, archinform_location_id, openstreetmap_relation_id, inaturalist_place_id, image]\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, new_york_times_topic_id, babelnet_id, geonames_id, gnd_id, unicode_character, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, coordinates_of_westernmost_point, geography_of_topic, stw_thesaurus_for_economics_id, iso_3166_1_alpha_3_code, office_held_by_head_of_government, quora_topic_id, curlie_id, country, native_label, basic_form_of_government, musicbrainz_area_id, has_quality, coat_of_arms_image, uic_alphabetical_country_code, mesh_descriptor_id, located_in_or_next_to_body_of_water, insee_countries_and_foreign_territories_code, diplomatic_relation, highest_judicial_authority, ituisoiec_object_identifier, commons_gallery, inception, viaf_id, civicus_monitor_country_entry, nuts_code, history_of_topic, gran_enciclop\u00e8dia_catalana_id, freebase_id, replaces, subreddit, continent, capital, coat_of_arms, demonym, geoshape, openstreetmap_relation_id, wipo_st3, coordinates_of_northernmost_point, coordinates_of_easternmost_point, nkcr_aut_id, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, flag_image, marriageable_age, topics_main_category, le_monde_diplomatique_subject_id, head_of_state, biblioth\u00e8que_nationale_de_france_id, category_of_people_buried_here, locator_map_image, bbc_things_id, age_of_majority, dewey_decimal_classification, area, head_of_government, fast_id, ioc_country_code, member_of, official_name, unemployment_rate, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, gs1_country_code, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, located_in_time_zone, category_for_people_who_died_here, yso_id, anthem, office_held_by_head_of_state, life_expectancy, part_of, commons_category, top_level_internet_domain, shares_border_with, instance_of, highest_point, category_for_people_born_here, short_name, number_of_out_of_school_children, driving_side, uic_numerical_country_code, on_focus_list_of_wikimedia_project, lowest_point, treccani_id, iso_3166_1_numeric_code, official_language, pronunciation_audio, idref_id, giant_bomb_id, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, statoids_id, library_of_congress_authority_id, iso_3166_1_alpha_2_code, flag, coordinate_location, fips_10_4_countries_and_regions, described_by_source, isni, brockhaus_enzyklop\u00e4die_online_id, klexikon_article_id, loc_and_marc_vocabularies_id, language_used, iab_code, legislative_body, comic_vine_id, category_of_associated_people, whos_on_first_id, world_encyclopedia_of_puppetry_arts_id, dr_topic_id, inaturalist_place_id, omegawiki_defined_meaning, hds_id, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, online_pwn_encyclopedia_id, eurovoc_id, worldcat_identities_id, motto_text, open_data_portal, kbpedia_id, grove_art_online_id, store_norske_leksikon_id, rkd_thesaurus_id, pm20_geo_code, interlingual_index_id, jewish_encyclopedia_id_russian, central_bank, bbc_news_topic_id, economy_of_topic, tasteatlas_id, sapa_id, bhcl_uuid, uk_parliament_thesaurus_id, github_topic, wordnet_31_synset_id, namuwiki_id, demographics_of_topic, joconde_location_id, national_library_of_israel_j9u_id, zhihu_topic_id, idaigazetteer_id, krugosvet_article, schoenberg_database_of_manuscripts_place_id, the_world_factbook_country_id, colon_classification, democracy_index, nese_id, der_spiegel_topic_id, museum_digital_place_id, ysa_id, postimees_topic_id, yle_topic_id, wikisimpsons_id, den_store_danske_id, urban_electric_transit_country_id, hashtag, m49_code, s\u00fcddeutsche_zeitung_topic_id, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, gini_coefficient, official_website, nalt_id, national_library_of_israel_id_old, vat_rate]\n- Table: administrative_territorial_entity, Columns: [label, description, country, located_in_the_administrative_territorial_entity, coat_of_arms_image, capital, commons_category, coordinate_location, topics_main_category, instance_of, freebase_id, geonames_id, category_of_associated_people, openstreetmap_relation_id, official_website, shares_border_with, area, locator_map_image, population, inaturalist_place_id]\n- Table: place_of_death, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: head_of_state, Columns: [label, description, position_held, commons_category, instance_of, sex_or_gender, viaf_id, isni, occupation, given_name, date_of_birth, place_of_birth, country_of_citizenship, educated_at, signature, spouse, languages_spoken_written_or_signed, gnd_id, library_of_congress_authority_id, award_received, freebase_id, religion_or_worldview, name_in_native_language, treccani_id, munzinger_person_id, plwabn_id, worldcat_identities_id, fast_id, image, store_norske_leksikon_id, opensanctions_id, eu_knowledge_graph_item_id]",
        "Response": "Table: capital_city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO works_on (Essn, Pno, Hours) VALUES (999887777, 10, 10.0);\nDatabase State:\n- Table: Employee_Project_Hours, Columns: [Essn, Pno, Hours]",
        "Response": "Table: Employee_Project_Hours"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Users_Compliments (compliment_id, user_id, number_of_compliments) VALUES (2, 70284, 'Medium');\nDatabase State:\n- Table: Users_Compliments, Columns: [compliment_id, user_id, number_of_compliments]\n- Table: Checkins, Columns: [business_id, day_id, label_time_0, label_time_1, label_time_2, label_time_3, label_time_4, label_time_5, label_time_6, label_time_7, label_time_8, label_time_9, label_time_10, label_time_11, label_time_12, label_time_13, label_time_14, label_time_15, label_time_16, label_time_17, label_time_18, label_time_19, label_time_20, label_time_21, label_time_22, label_time_23]",
        "Response": "Table: Users_Compliments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, games_id, person_id, age) VALUES (130675, 12, 98527, 32);\nDatabase State:\n- Table: competitor_event, Columns: [event_id, competitor_id, medal_id]\n- Table: person_region, Columns: [person_id, region_id]\n- Table: Competitor_Games, Columns: [id, games_id, person_id, age]\n- Table: medal, Columns: [id, medal_name]\n- Table: sport, Columns: [id, sport_name]\n- Table: games_city, Columns: [games_id, city_id]\n- Table: noc_region, Columns: [id, noc, region_name]\n- Table: event, Columns: [id, sport_id, event_name]\n- Table: games, Columns: [id, games_year, games_name, season]\n- Table: person, Columns: [id, full_name, gender, height, weight]\n- Table: city, Columns: [id, city_name]",
        "Response": "Table: Competitor_Games"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO artist (artist_name, country, gender, preferred_genre) VALUES ('Topu', 'India', 'Female', 'modern');\nDatabase State:\n- Table: Musicians, Columns: [artist_name, country, gender, preferred_genre]\n- Table: genre, Columns: [g_name, rating, most_popular_in]",
        "Response": "Table: Musicians"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, place_of_birth, date_of_birth, country_of_citizenship, instance_of, sex_or_gender, position_held, member_of_political_party, image, occupation, given_name, whos_who_in_france_biography_id, twitter_username, languages_spoken_written_or_signed, google_knowledge_graph_id, social_media_followers) VALUES ('Catherine Baratti-Elbaz', 'French politician', 'Marseille', '+1969-07-14T00:00:00Z', 'France', 'human', 'female', 'Councillor of Paris', 'Socialist Party', 'nan', 'politician', 'Catherine', 'catherine-baratti-elbaz_76003', 'Baratti_Elbaz', 'French', '/g/11cs002b5y', 9477.0);\nDatabase State:\n- Table: head_of_government, Columns: [label, description, place_of_birth, date_of_birth, country_of_citizenship, instance_of, sex_or_gender, position_held, member_of_political_party, image, occupation, given_name, whos_who_in_france_biography_id, twitter_username, languages_spoken_written_or_signed, google_knowledge_graph_id, social_media_followers]\n- Table: category_for_films_shot_at_this_location, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, shares_border_with, country, postal_code, insee_municipality_code, topics_main_category, page_banner, freebase_id, inception, replaces, geonames_id, category_for_films_shot_at_this_location, locator_map_image, image, official_website, population, head_of_government, openstreetmap_relation_id, gnd_id, biblioth\u00e8que_nationale_de_france_id, area, twitter_username, viaf_id, archinform_location_id, isni, annual_number_of_weddings, coat_of_arms_image, contains_the_administrative_territorial_entity, category_for_maps, worldcat_identities_id, gadm_id, detail_map, social_media_followers, facebook_id, factgrid_item_id]",
        "Response": "Table: head_of_government"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tonekabon_county (label, description, instance_of, country, located_in_the_administrative_territorial_entity, part_of, coordinate_location, freebase_id) VALUES ('Goli Jan Rural District', 'rural district in Mazandaran, Iran', 'rural district of Iran', 'Iran', 'Central District', 'Tonekabon County', '36.75', '/m/0yqhwzv');\nDatabase State:\n- Table: tonekabon_county, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, part_of, coordinate_location, freebase_id]",
        "Response": "Table: tonekabon_county"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (semester_id, semester_name, semester_description, other_details) VALUES (5, 'spring 2018', 'c', NULL);\nDatabase State:\n- Table: Degree_Programs, Columns: [degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details]\n- Table: Courses, Columns: [course_id, course_name, course_description, other_details]\n- Table: Departments, Columns: [department_id, department_name, department_description, other_details]\n- Table: Transcripts, Columns: [transcript_id, transcript_date, other_details]\n- Table: Addresses, Columns: [address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details]\n- Table: Student_Enrolment, Columns: [student_enrolment_id, degree_program_id, semester_id, student_id, other_details]\n- Table: Transcript_Contents, Columns: [student_course_id, transcript_id]\n- Table: Student_Enrolment_Courses, Columns: [student_course_id, course_id, student_enrolment_id]\n- Table: Sections, Columns: [section_id, course_id, section_name, section_description, other_details]\n- Table: Students, Columns: [student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details]",
        "Response": "Table: Semesters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tonekabon_county (label, description, instance_of, country, located_in_the_administrative_territorial_entity, part_of, coordinate_location, freebase_id) VALUES ('Palangabad-e Olya', 'village in Iran', 'village', 'Iran', 'Tameshkol Rural District', 'Tonekabon County', '36.72666667', '/m/0yqm4yh');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, country, instance_of, coordinate_location, freebase_id]\n- Table: GeographicLocations, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, part_of, coordinate_location, freebase_id]",
        "Response": "Table: GeographicLocations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, instance_of) VALUES ('HEMA', 'Dutch discount retail chain', 'Germany', 'retail chain');\nDatabase State:\n- Table: Department_Store_Chains, Columns: [label, description, country, instance_of]\n- Table: part, Columns: [label, description, commons_category, topics_main_category, freebase_id, gnd_id, viaf_id, instance_of, geonames_id, page_banner, quora_topic_id, has_parts, nkcr_aut_id, worldcat_identities_id, coordinate_location, locator_map_image, part_of, den_store_danske_id]",
        "Response": "Table: Department_Store_Chains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross) VALUES ('Hannah Montana/Miley Cyrus: Best of B\u2026', 'Feb 1, 2008', 'Concert/Performance', 'G', '$65,281,781', '$76,646,993');\nDatabase State:\n- Table: BoxOfficePerformance, Columns: [movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross]",
        "Response": "Table: BoxOfficePerformance"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Airlines (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY) VALUES ('2018/8/27', 20397, 'N229PS', 5589, 11057, 1105703, 31057, 'CLT', 10208, 1020803, 30208, 'AGS', 2025, 2031, 6, 6, 2129, 4, 4, 0, NULL, 60, 58, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Air_Carriers, Columns: [Code, Description]\n- Table: Airlines, Columns: [FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO historic_county (label, description, commons_category, coordinate_location, locator_map_image, instance_of, country, population, flag_image, shares_border_with, flag, catalog_code, factgrid_item_id, part_of, different_from) VALUES ('Buckinghamshire', 'historic county of England', 'Buckinghamshire', '51.8280222469', 'Buckinghamshire Brit Isles Sect 5.svg', 'historic county of England', 'United Kingdom', 916262.0, 'Flag of Buckinghamshire.svg', 'Middlesex', 'flag of Buckinghamshire', 'BUC', 'Q217682', 'England', 'Buckinghamshire');\nDatabase State:\n- Table: political_border, Columns: [label, description, instance_of, country, locator_map_image, flag_image, shares_border_with, population, coordinate_location, catalog_code, commons_category, part_of, factgrid_item_id, flag, vision_of_britain_place_id]\n- Table: administrative_territorial_entity, Columns: [label, description, country, located_in_the_administrative_territorial_entity, commons_category, coordinate_location, freebase_id, instance_of, geonames_id, gss_code_2011, toid, openstreetmap_relation_id]\n- Table: flag, Columns: [label, description, instance_of, image, applies_to_jurisdiction, country, freebase_id]\n- Table: jurisdiction, Columns: [label, description, instance_of, country, locator_map_image, flag_image, shares_border_with, population, different_from, coordinate_location, catalog_code, commons_category, part_of, factgrid_item_id, flag]\n- Table: ha_ha, Columns: [label, description, coordinate_location, country, heritage_designation, instance_of, located_in_the_administrative_territorial_entity, national_heritage_list_for_england_number, historic_county, os_grid_reference]",
        "Response": "Table: historic_county"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO customer (cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state) VALUES ('3', 'Owen', 'saving', 800000, 0, 210, 3, 'New York');\nDatabase State:\n- Table: bank, Columns: [branch_ID, bname, no_of_customers, city, state]\n- Table: loan, Columns: [loan_ID, loan_type, cust_ID, branch_ID, amount]",
        "Response": "Table: customer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id_restaurant, street_num, street_name, city) VALUES (897, 1723, 'sutter', 'san francisco');\nDatabase State:\n- Table: generalinfo, Columns: [id_restaurant, label, food_type, city, review]\n- Table: RestaurantsLocations, Columns: [id_restaurant, street_num, street_name, city]\n- Table: geographic, Columns: [city, county, region]",
        "Response": "Table: RestaurantsLocations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO government_of_latvia (label, description, inception, replaced_by, replaces, instance_of, applies_to_jurisdiction, dissolved_abolished_or_demolished_date) VALUES ('First Godmanis cabinet', 'nan', '+1990-05-07T00:00:00Z', 'nan', 'nan', 'Government of Latvia', 'Latvia', '+1993-08-03T00:00:00Z');\nDatabase State:\n- Table: replacing_subject, Columns: [label, description, inception, replaced_by, replaces, instance_of, applies_to_jurisdiction, dissolved_abolished_or_demolished_date]\n- Table: replaced_entity, Columns: [label, description, instance_of, replaced_by, replaces, applies_to_jurisdiction, dissolved_abolished_or_demolished_date, inception]",
        "Response": "Table: government_of_latvia"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO medicine_enzyme_interaction (enzyme_id, medicine_id, interaction_type) VALUES (5, 20, 'activitor');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: medicine_enzyme_interaction"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, category, person, role, credited) VALUES ('S20-E17', 'Sound Department', 'Terry Greene', 'dialogue sound editor', 'true');\nDatabase State:\n- Table: Episode, Columns: [episode_id, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Episodes_Crew, Columns: [episode_id, category, person, role, credited]\n- Table: Character_Award, Columns: [award_id, character]",
        "Response": "Table: Episodes_Crew"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO paragraphs (id, ParagraphNum, PlainText, character_id, chapter_id) VALUES (643959, 956, 'Ay, and old York, and yet not satisfied.', 680, 19018);\nDatabase State:\n- Table: characters, Columns: [id, CharName, Abbrev, Description]\n- Table: book_content, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]\n- Table: works, Columns: [id, Title, LongTitle, Date, GenreType]\n- Table: chapters, Columns: [id, Act, Scene, Description, work_id]",
        "Response": "Table: book_content"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Students (student_id, student_details) VALUES (141, 'Nikhil');\nDatabase State:\n- Table: Candidate_Assessments, Columns: [candidate_id, qualification, assessment_date, asessment_outcome_code]\n- Table: Student_Course_Registrations, Columns: [student_id, course_id, registration_date]\n- Table: Addresses, Columns: [address_id, line_1, line_2, city, zip_postcode, state_province_county, country]\n- Table: Courses, Columns: [course_id, course_name, course_description, other_details]\n- Table: Student_Info, Columns: [student_id, student_details]\n- Table: People_Addresses, Columns: [person_address_id, person_id, address_id, date_from, date_to]\n- Table: Student_Course_Attendance, Columns: [student_id, course_id, date_of_attendance]\n- Table: People, Columns: [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]\n- Table: Candidates, Columns: [candidate_id, candidate_details]",
        "Response": "Table: Student_Info"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, located_in_the_administrative_territorial_entity, postal_code, follows, followed_by, part_of, coordinate_location, google_knowledge_graph_id) VALUES ('Beppu interchange', 'interchange in Beppu, Oita prefecture, Japan', 'interchange', 'Japan', 'Beppu', '874-0849', 'Beppuwan service area', 'Oita interchange', 'Higashi-Kyushu Expressway', '33.294780555556', '/g/121fx2j7');\nDatabase State:\n- Table: followed_by, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, postal_code, follows, followed_by, part_of, coordinate_location, google_knowledge_graph_id]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO location (id_restaurant, street_num, street_name, city) VALUES (2901, 841, 'n branciforte ave', 'santa cruz');\nDatabase State:\n- Table: generalinfo, Columns: [id_restaurant, label, food_type, city, review]\n- Table: location, Columns: [id_restaurant, street_num, street_name, city]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (School_Id, School_Year, Class_A, Class_AA) VALUES (4, '2008-09', 'Winters', 'Dimmitt');\nDatabase State:\n- Table: school, Columns: [School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors]",
        "Response": "Table: school_performance"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EVENTID, REFID, EVENT_DATE, AMOUNT) VALUES (2095738, 220420, '2007-05-02 12:00:00.0', 10.16399999999999971);\nDatabase State:\n- Table: Demog, Columns: [GEOID, INHABITANTS_K, INCOME_K, A_VAR1, A_VAR2, A_VAR3, A_VAR4, A_VAR5, A_VAR6, A_VAR7, A_VAR8, A_VAR9, A_VAR10, A_VAR11, A_VAR12, A_VAR13, A_VAR14, A_VAR15, A_VAR16, A_VAR17, A_VAR18]\n- Table: Customers, Columns: [ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age]\n- Table: Transactions, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]",
        "Response": "Table: Transactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost) VALUES ('SO - 0002421', 'In-Store', 'WARE-NMK1003', '10/27/18', '2/23/19', '2/26/19', '2/28/19', 'USD', 8, 27, 195, 17, 3, 0.1000000000000000055, '6,472.20', '3,818.60');\nDatabase State:\n- Table: Customers, Columns: [CustomerID, Customer_Names]\n- Table: Products, Columns: [ProductID, Product_Name]\n- Table: Sales_Team, Columns: [SalesTeamID, Sales_Team, Region]\n- Table: Store_Locations, Columns: [StoreID, City_Name, County, StateCode, State, Type, Latitude, Longitude, AreaCode, Population, Household_Income, Median_Income, Land_Area, Water_Area, Time_Zone]\n- Table: Regions, Columns: [StateCode, State, Region]\n- Table: Sales_Orders, Columns: [OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost]",
        "Response": "Table: Sales_Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO coach (Coach_ID, Coach_name, Gender, Club_ID, Rank) VALUES (4, 'James Wong', 'M', 3, 4);\nDatabase State:\n- Table: Coaches, Columns: [Coach_ID, Coach_name, Gender, Club_ID, Rank]\n- Table: player_coach, Columns: [Player_ID, Coach_ID, Starting_year]\n- Table: player, Columns: [Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank]",
        "Response": "Table: Coaches"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (District_ID, District_name, Headquartered_City, City_Population, City_Area) VALUES (11, 'Hafizabad District', 'Hafizabad City', 165936.0, 10.0);\nDatabase State:\n- Table: store_product, Columns: [Store_ID, Product_ID]\n- Table: district, Columns: [District_ID, District_name, Headquartered_City, City_Population, City_Area]",
        "Response": "Table: district"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (date, store_nbr, item_nbr, units) VALUES ('2014-03-29', 25, 39, 0);\nDatabase State:\n- Table: weather, Columns: [station_nbr, date, tmax, tmin, tavg, depart, dewpoint, wetbulb, heat, cool, sunrise, sunset, codesum, snowfall, preciptotal, stnpressure, sealevel, resultspeed, resultdir, avgspeed]\n- Table: Weather_Sales, Columns: [date, store_nbr, item_nbr, units]",
        "Response": "Table: Weather_Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Country, Organization, Type) VALUES ('MK', 'WTrO', 'observer');\nDatabase State:\n- Table: language, Columns: [Country, Name, Percentage]\n- Table: geo_river, Columns: [River, Country, Province]\n- Table: ethnicGroup, Columns: [Country, Name, Percentage]\n- Table: sea, Columns: [Name, Depth]\n- Table: province, Columns: [Name, Country, Population, Area, Capital, CapProv]\n- Table: Organizations_Membership, Columns: [Country, Organization, Type]\n- Table: continent, Columns: [Name, Area]\n- Table: geo_source, Columns: [River, Country, Province]\n- Table: organization, Columns: [Abbreviation, Name, City, Country, Province, Established]\n- Table: population, Columns: [Country, Population_Growth, Infant_Mortality]",
        "Response": "Table: Organizations_Membership"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, model_year, country) VALUES (390, 1982, 1);\nDatabase State:\n- Table: Vehicles, Columns: [ID, model_year, country]\n- Table: country, Columns: [origin, country]",
        "Response": "Table: Vehicles"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date) VALUES (299, 857, 'Uniformed', '2018-03-13 12:30:19', '2018-01-22 05:24:10');\nDatabase State:\n- Table: Customers, Columns: [Customer_ID, Customer_Details]\n- Table: Claims_Processing_Stages, Columns: [Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description]\n- Table: Claims_Documents, Columns: [Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date]\n- Table: Claims_Processing, Columns: [Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID]",
        "Response": "Table: Policies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity) VALUES (6502018, 7, 6560, 126, 631);\nDatabase State:\n- Table: Employees, Columns: [EmployeeID, FirstName, MiddleInitial, LastName]\n- Table: Sales, Columns: [SalesID, SalesPersonID, CustomerID, ProductID, Quantity]\n- Table: Products, Columns: [ProductID, Name, Price]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, menu_page_id, price, high_price, dish_id, created_at, updated_at, xpos, ypos) VALUES (912534, 63414, 0.1499999999999999945, NULL, 183736, '2012-05-02 03:36:53 UTC', '2012-05-02 03:36:53 UTC', 0.1685709999999999987, 0.6406899999999999818);\nDatabase State:\n- Table: MenuItems, Columns: [id, menu_page_id, price, high_price, dish_id, created_at, updated_at, xpos, ypos]\n- Table: Dish, Columns: [id, name, description, menus_appeared, times_appeared, first_appeared, last_appeared, lowest_price, highest_price]\n- Table: Menu, Columns: [id, name, sponsor, event, venue, place, physical_description, occasion, notes, call_number, keywords, language, date, location, location_type, currency, currency_symbol, status, page_count, dish_count]\n- Table: MenuPage, Columns: [id, menu_id, page_number, image_id, full_height, full_width, uuid]",
        "Response": "Table: MenuItems"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO accelerator_compatible_browser (accelerator_id, browser_id, compatible_since_year) VALUES (3, 3, 2008);\nDatabase State:\n- Table: browser, Columns: [id, name, market_share]",
        "Response": "Table: accelerator_compatible_browser"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, locator_map_image, instance_of, freebase_id, gnis_id, population, geonames_id, official_website, area, shares_border_with, inception, image, viaf_id, archinform_location_id, category_of_associated_people, whos_on_first_id, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, openstreetmap_relation_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households, library_of_congress_authority_id) VALUES ('Atlantic County', 'county in New Jersey, United States', 'New Jersey', 'Atlantic County, New Jersey', 'United States of America', '39.47', 'Category:Atlantic County, New Jersey', 'Map of New Jersey highlighting Atlantic County.svg', 'county of New Jersey', '/m/0n5kc', '882270.0', 274534.0, '4500561.0', 'http://www.aclink.org/', 1739.0, 'Burlington County', '+1837-02-00T00:00:00Z', 'AtlanticCityAirport.png', '139537081.0', '20048.0', 'Category:People from Atlantic County, New Jersey', '102083869.0', 'Category:Maps of Atlantic County, New Jersey', 17.28000000000000113, 'Atlantic County', 'Entity[\"AdministrativeDivision\", {\"AtlanticCounty\", \"NewJersey\", \"UnitedStates\"}]', 'lccn-n78083389', '2560066.0', '1002157.0', '181.0', 34175.0, 101103.0, 'nan');\nDatabase State:\n- Table: united_states_womens_open_championship, Columns: [label, description, coordinate_location, country, sport, instance_of, point_in_time, competition_class, location, freebase_id, winner]\n- Table: political_border, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, locator_map_image, instance_of, freebase_id, gnis_id, population, geonames_id, official_website, area, named_after, shares_border_with, inception, capital, image, viaf_id, archinform_location_id, category_of_associated_people, whos_on_first_id, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, hasc, openstreetmap_relation_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households, library_of_congress_authority_id, national_library_of_israel_j9u_id]\n- Table: physical_location, Columns: [label, description, country, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, freebase_id]\n- Table: winner, Columns: [label, description, sex_or_gender, date_of_birth, place_of_birth, country_of_citizenship, occupation, instance_of, freebase_id, given_name, sport, lpga_tour_golf_player_id, family_name]\n- Table: capital_city, Columns: [label, description, instance_of, country, commons_category, coordinate_location, located_in_the_administrative_territorial_entity, freebase_id, locator_map_image, image, geonames_id, elevation_above_sea_level, gnis_id, official_website, postal_code, fips_55_3_locations_in_the_us, local_dialing_code, area, capital_of, library_of_congress_authority_id, viaf_id, archinform_location_id, inception, whos_on_first_id, worldcat_identities_id, topics_main_category, population, water_as_percent_of_area, national_library_of_israel_j9u_id, per_capita_income, number_of_households, musicbrainz_area_id, category_of_associated_people, quora_topic_id]\n- Table: Counties, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, locator_map_image, instance_of, freebase_id, gnis_id, population, geonames_id, official_website, area, shares_border_with, inception, image, viaf_id, archinform_location_id, category_of_associated_people, whos_on_first_id, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, openstreetmap_relation_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households, library_of_congress_authority_id]",
        "Response": "Table: Counties"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, coordinate_location, country, sport, instance_of, point_in_time, competition_class, location, freebase_id, winner) VALUES ('1990 U.S. Women''s Open Golf Championship', 'golf tournament', '34.005', 'United States of America', 'golf', 'United States Women''s Open Championship', '+1990-00-00T00:00:00Z', 'women''s golf', 'Atlanta Athletic Club', '/m/0gkxsfm', 'Betsy King');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, locator_map_image, instance_of, freebase_id, gnis_id, population, geonames_id, official_website, area, shares_border_with, inception, image, viaf_id, archinform_location_id, category_of_associated_people, whos_on_first_id, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, openstreetmap_relation_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households, library_of_congress_authority_id]\n- Table: physical_location, Columns: [label, description, country, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, freebase_id]\n- Table: united_states_womens_open_championship, Columns: [label, description, coordinate_location, country, sport, instance_of, point_in_time, competition_class, location, freebase_id, winner]\n- Table: administrative_centre, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, locator_map_image, instance_of, freebase_id, gnis_id, population, geonames_id, official_website, area, named_after, shares_border_with, inception, capital, image, viaf_id, archinform_location_id, category_of_associated_people, whos_on_first_id, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, hasc, openstreetmap_relation_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households, library_of_congress_authority_id, national_library_of_israel_j9u_id]",
        "Response": "Table: united_states_womens_open_championship"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO City (ID, Name, CountryCode, District, Population) VALUES (1724, 'Yaizu', 'JPN', 'Shizuoka', 117258);\nDatabase State:\n- Table: Cities, Columns: [ID, Name, CountryCode, District, Population]",
        "Response": "Table: Cities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (case_number, race, gender, last_name, first_name, full_name) VALUES ('32587A', 'W', 'M', 'McCluskey', 'William', 'McCluskey, William');\nDatabase State:\n- Table: subjects, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: officers, Columns: [case_number, race, gender, last_name, first_name, full_name]",
        "Response": "Table: officers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO photos (id, mountain_id, color) VALUES (8, 7, 12, 'Black/White', 'wolfs');\nDatabase State:\n- Table: photos, Columns: [id, mountain_id, color]",
        "Response": "Table: photos"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO national_parks_of_israel (label, description, instance_of, commons_category, coordinate_location, image, located_in_the_administrative_territorial_entity, geonames_id, country) VALUES ('Hurvat Amudim', 'nan', 'archaeological site', 'Sdeh Amudim', '32.815214', 'Sdeh Amudim (cropped).JPG', 'Tiberias', 'nan', 'Israel');\nDatabase State:\n- Table: National_Parks, Columns: [label, description, instance_of, commons_category, coordinate_location, image, located_in_the_administrative_territorial_entity, geonames_id, country]",
        "Response": "Table: National_Parks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, commons_category, category_combines_topics, category_contains) VALUES ('Category:Burials in Mississippi', 'Wikimedia category', 'Wikimedia category', 'Burials in Mississippi', 'location of burial', 'human');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, seal_image, dewey_decimal_classification, topics_main_wikimedia_portal, country, capital, shares_border_with, flag_image, flag, iso_3166_2_code, commons_category, locator_map_image, located_in_time_zone, head_of_government, openstreetmap_relation_id, located_in_the_administrative_territorial_entity, coordinate_location, official_website, topics_main_category, page_banner, curlie_id, musicbrainz_area_id, instance_of, legislative_body, freebase_id, contains_the_administrative_territorial_entity, gnis_id, fips_10_4_countries_and_regions, inception, category_for_people_born_here, category_for_people_who_died_here, geonames_id, gnd_id, category_for_films_shot_at_this_location, category_of_people_buried_here, category_of_associated_people, office_held_by_head_of_government, viaf_id, library_of_congress_authority_id, population, nickname, topics_main_template, ballotpedia_id, described_by_source, geography_of_topic, encyclop\u00e6dia_britannica_online_id, has_seal_badge_or_sigil, pronunciation_audio, gran_enciclop\u00e8dia_catalana_id, area, quora_topic_id, bbc_things_id, yso_id, short_name, demonym, subreddit, motto_text, highest_point, lowest_point, history_of_topic, elevation_above_sea_level, us_national_archives_identifier, gacs_id, mesh_descriptor_id, archives_at, official_symbol, fips_5_2_alpha_code_us_states, fips_5_2_numeric_code_us_states, wikimedia_outline, water_as_percent_of_area, named_after, coordinates_of_geographic_center, executive_body, foundational_text, highest_judicial_authority, getty_thesaurus_of_geographic_names_id, part_of, c_span_organization_id, native_label, idref_id, archinform_location_id, national_library_of_israel_id_old, geoshape, wolfram_language_entity_code, nkcr_aut_id, different_from, comic_vine_id, maximum_temperature_record, loc_and_marc_vocabularies_id, language_used, anthem, whos_on_first_id, store_norske_leksikon_id, located_in_or_next_to_body_of_water, omegawiki_defined_meaning, minimum_temperature_record, category_for_maps, larousse_id, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, italian_vikidia_id, worldcat_identities_id, isni, kbpedia_id, rkd_thesaurus_id, hasc, interlingual_index_id, the_top_tens_id, economy_of_topic, google_maps_customer_id, tripadvisor_id, open_civic_data_division_id, google_news_topics_id, category_for_the_view_of_the_item, github_topic, uk_parliament_thesaurus_id, wordnet_31_synset_id, demographics_of_topic, coordinates_of_northernmost_point, coordinates_of_southernmost_point, inaturalist_place_id, marriageable_age, compulsory_education_maximum_age, twitter_topic_id, openstreetmap_zoom_level, online_pwn_encyclopedia_id, wikisimpsons_id, related_category, den_store_danske_id, per_capita_income, mean_age, number_of_households, hashtag, national_library_of_israel_j9u_id, ringgold_id, catholic_encyclopedia_id]\n- Table: eponym, Columns: [label, description, freebase_id, instance_of]\n- Table: aspect_of_history, Columns: [label, description, part_of, commons_category, topics_main_category, dewey_decimal_classification, instance_of, facet_of, library_of_congress_authority_id, national_library_of_israel_j9u_id]\n- Table: state_park_of_the_united_states, Columns: [label, description, subclass_of, located_in_the_administrative_territorial_entity, country, topics_main_category, has_list]\n- Table: Burials_by_State, Columns: [label, description, instance_of, commons_category, category_combines_topics, category_contains]",
        "Response": "Table: Burials_by_State"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Customer_ID, Customer_name) VALUES (756, 'Mr. Randal Lynch III');\nDatabase State:\n- Table: Subscribers, Columns: [Customer_ID, Customer_name]\n- Table: Customers_Policies, Columns: [Customer_ID, Policy_ID, Date_Opened, Date_Closed]\n- Table: Settlements, Columns: [Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount]\n- Table: Available_Policies, Columns: [Policy_ID, policy_type_code, Customer_Phone]\n- Table: First_Notification_of_Loss, Columns: [FNOL_ID, Customer_ID, Policy_ID, Service_ID]\n- Table: Claims, Columns: [Claim_ID, FNOL_ID, Effective_Date]",
        "Response": "Table: Subscribers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (year, lgID, tmID, oppID, W, L, T, OTL) VALUES (2005, 'NHL', 'CBS', 'VAN', 1, 3, NULL, '0');\nDatabase State:\n- Table: Goalies, Columns: [playerID, year, stint, tmID, lgID, GP, Min, W, L, T/OL, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA]\n- Table: ScoringSC, Columns: [playerID, year, tmID, lgID, pos, GP, G, A, Pts, PIM]\n- Table: TeamVsTeam, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]",
        "Response": "Table: TeamVsTeam"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO musical (Musical_ID, Name, Year, Award, Category, Nominee, Result) VALUES (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated');\nDatabase State:\n- Table: Awards, Columns: [Musical_ID, Name, Year, Award, Category, Nominee, Result]",
        "Response": "Table: Awards"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO gas_station (Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name) VALUES (10, 2008, 'Maindy Ave', 'Luke Rowe', 'TonyBristow', 'Chris Pyatt');\nDatabase State:\n- Table: station_company, Columns: [Station_ID, Company_ID, Rank_of_the_Year]\n- Table: gas_station, Columns: [Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]",
        "Response": "Table: gas_station"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic) VALUES (5, 2, 'Aibonito', 83.5, 7.299999999999999823, 0.2000000000000000111, 0.0, 9.0, 99.2999999999999972);\nDatabase State:\n- Table: city, Columns: [City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic]\n- Table: county_public_safety, Columns: [County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location]",
        "Response": "Table: city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Airlines (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY) VALUES ('2018/8/25', 19790, 'N351NB', 2744, 11298, 1129806, 30194, 'DFW', 12478, 1247805, 31703, 'JFK', 912, 905, -7, 0, 1341, -14, 0, 0, NULL, 223, 216, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Airlines, Columns: [FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY]\n- Table: Air_Carriers, Columns: [Code, Description]\n- Table: Airports, Columns: [Code, Description]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO capital_city (label, description, gnd_id, twinned_administrative_body, commons_category, instance_of, country, coat_of_arms_image, flag_image, viaf_id, postal_code, head_of_government, located_in_the_administrative_territorial_entity, coordinate_location, page_banner, topics_main_category, freebase_id, musicbrainz_area_id, dewey_decimal_classification, category_for_people_born_here, category_for_people_who_died_here, geonames_id, local_dialing_code, official_website, category_of_associated_people, described_by_source, elevation_above_sea_level, image, commons_gallery, population, quora_topic_id, area, native_label, official_name, located_in_time_zone, encyclop\u00e6dia_britannica_online_id, great_russian_encyclopedia_online_id, nkcr_aut_id, capital_of, whos_on_first_id, category_for_maps, worldcat_identities_id, factgrid_item_id, store_norske_leksikon_id, national_library_of_israel_j9u_id) VALUES ('Mahilio\u016d', 'capital city of Mogilev Region in eastern Belarus, on the Dnieper River', '4384842-4', 'Bardejov', 'Mahilio\u016d', 'city of oblast subordinance', 'Belarus', 'Coat of Arms of Mahilo\u016d.svg', 'Flag of Mahilo\u016d.svg', '133699699', '212000\u2013212999', 'nan', 'Mogilev Region', '53.90894', 'Mahilyow banner.jpg', 'Category:Mogilev', '/m/0159fw', 'b1330c44-b2d9-49e8-8ff9-1cdaa34670e3', '2--4782', 'Category:Births in Mahilio\u016d', 'Category:Deaths in Mogilyov', '625665', '8222', 'http://city.mogilev.by', 'Category:People from Mogilev', 'Sytin Military Encyclopedia', 192.0, 'Mahilio\u016d Montage (2017).jpg', 'nan', 355436.0, 'Mogilev-Minsk-Belarus', 119.0, '\u041c\u0430\u0433\u0456\u043b\u0451\u045e', '\u041c\u0430\u0433\u0456\u043b\u0451\u045e', 'UTC+03:00', 'place/Mahilyow-Belarus', '2221339.0', 'ge271723', 'Mogilev Region', '421174901', 'Category:Maps of Mahilio\u016d', 'lccn-n81059016', 'Q88361', 'Mahiljou', '9.870075645817052e+17');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, iso_3166_2_code, capital, located_in_the_administrative_territorial_entity, country, population, coordinate_location, geonames_id, commons_category, image, locator_map_image, official_website, coat_of_arms_image, topics_main_category, area]\n- Table: centre_of_oblast, Columns: [label, description, coat_of_arms, gnd_id, twinned_administrative_body, instance_of, commons_category, country, flag_image, coat_of_arms_image, postal_code, located_in_time_zone, local_dialing_code, coordinate_location, topics_main_category, page_banner, freebase_id, musicbrainz_area_id, inception, flag, official_website, category_for_people_who_died_here, geonames_id, category_of_associated_people, capital_of, viaf_id, described_by_source, locator_map_image, located_in_the_administrative_territorial_entity, elevation_above_sea_level, area, population, image, official_name, native_label, quora_topic_id, great_russian_encyclopedia_online_id, encyclop\u00e6dia_britannica_online_id, nkcr_aut_id, library_of_congress_authority_id, whos_on_first_id, national_library_of_israel_j9u_id, online_pwn_encyclopedia_id, koatuu_identifier, category_for_people_born_here, internet_encyclopedia_of_ukraine_id, on_focus_list_of_wikimedia_project, facebook_id]\n- Table: twin_town, Columns: [label, description, gnd_id, twinned_administrative_body, commons_category, instance_of, country, coat_of_arms_image, flag_image, viaf_id, postal_code, head_of_government, located_in_the_administrative_territorial_entity, coordinate_location, page_banner, topics_main_category, freebase_id, musicbrainz_area_id, dewey_decimal_classification, category_for_people_born_here, category_for_people_who_died_here, geonames_id, local_dialing_code, official_website, category_of_associated_people, described_by_source, elevation_above_sea_level, image, commons_gallery, population, quora_topic_id, area, native_label, official_name, located_in_time_zone, encyclop\u00e6dia_britannica_online_id, archinform_location_id, great_russian_encyclopedia_online_id, nkcr_aut_id, capital_of, gran_enciclop\u00e8dia_catalana_id, whos_on_first_id, category_for_maps, worldcat_identities_id, factgrid_item_id, online_pwn_encyclopedia_id, store_norske_leksikon_id, national_library_of_israel_j9u_id]",
        "Response": "Table: capital_city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of) VALUES ('thrombospondin type 3 repeat-containing OmpA/MotB protein Psyr_2097', 'microbial gene found in Pseudomonas syringae pv. syringae B728a', '3367611', 'gene', 'Thrombospondin type 3 repeat-containing OmpA/MotB protein Psyr_2097', 'Pseudomonas syringae pv. syringae B728a', 'forward strand', '2445748.0', '2444714.0', 'gene');\nDatabase State:\n- Table: tsp_type_3_repeat, Columns: [label, description, uniprot_protein_id, encoded_by, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO customer (customer_id, first_name, last_name, email) VALUES (90, 'Lucas', 'Wyldbore', 'lwyldbore2h@github.io');\nDatabase State:\n- Table: address_status, Columns: [status_id, address_status]\n- Table: Users, Columns: [customer_id, first_name, last_name, email]\n- Table: book_language, Columns: [language_id, language_code, language_name]\n- Table: country, Columns: [country_id, country_name]\n- Table: book_author, Columns: [book_id, author_id]\n- Table: address, Columns: [address_id, street_number, street_name, city, country_id]\n- Table: publisher, Columns: [publisher_id, publisher_name]\n- Table: author, Columns: [author_id, author_name]\n- Table: order_status, Columns: [status_id, status_value]\n- Table: cust_order, Columns: [order_id, order_date, customer_id, shipping_method_id, dest_address_id]\n- Table: book, Columns: [book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id]",
        "Response": "Table: Users"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details) VALUES (14, 12, 11, 'Jordy', 'Osborne', 'Rempel', '(605)919-3594x3661', 'gracie29@example.com', '34458427', '2004-12-24 12:36:46', '1999-08-24 00:07:10', 'et');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Students"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (inspection_id, point_id, fine, inspector_comment) VALUES (1978374, 36, 100, 'LIGHT SHIELDS ABOVE FRONT FOOD PREP AREA MISSING END CAPS. INSTRUCTED TO PROVIDE.');\nDatabase State:\n- Table: inspection, Columns: [inspection_id, inspection_date, inspection_type, results, employee_id, license_no, followup_to]",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tatch\u016b (label, description, country, image, corporate_number_japan, instance_of, located_in_the_administrative_territorial_entity, part_of, inception) VALUES ('Daisen-in', 'sub-temple of Daitoku-ji, Kyoto, Japan', 'Japan', 'Daisen-in-1999-100.jpg', '2130005001219.0', 'Tatch\u016b', 'Kita-ku', 'Daitoku-ji', '+1509-00-00T00:00:00Z');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, area, dantai_code, located_in_the_administrative_territorial_entity, country, commons_category, coordinate_location, instance_of, freebase_id, population, geonames_id, viaf_id, topics_main_category, image, located_in_time_zone, official_website, geonlp_id, locator_map_image, whos_on_first_id, worldcat_identities_id, inception, native_label, shares_border_with, name_in_kana]",
        "Response": "Table: tatch\u016b"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id_restaurant, label, food_type, city, review) VALUES (7741, 'shakers pizza', 'pizza', 'newark', 2.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: generalinfo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO war_in_popular_culture (label, description, instance_of, main_subject, subclass_of) VALUES ('Trojan War in popular culture', 'nan', 'cultural depiction', 'Trojan War', 'war in popular culture');\nDatabase State:\n- Table: war_in_popular_culture, Columns: [label, description, instance_of, main_subject, subclass_of]\n- Table: topic, Columns: [label, description, instance_of, start_time, end_time, gnd_id, commons_category, topics_main_category, freebase_id, image, location, library_of_congress_authority_id, participant, encyclop\u00e6dia_britannica_online_id, part_of, nkcr_aut_id, national_library_of_israel_j9u_id]",
        "Response": "Table: war_in_popular_culture"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (locationID, locationcity, address, state, zipcode, officephone) VALUES (4, 'Miami', '210 Biscayne Blvd', 'FL', 33103, '(305)787-9999');\nDatabase State:\n- Table: location, Columns: [locationID, locationcity, address, state, zipcode, officephone]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO given_name (label, description, said_to_be_the_same_as, family_name_identical_to_this_given_name, instance_of, different_from, native_label, writing_system, soundex, cologne_phonetics, caverphone, commons_category, language_of_work_or_name) VALUES ('Rowland', 'male given name', 'nan', 'Rowland', 'male given name', 'Rowland', 'Rowland', 'Latin script', 'R453', '73562.0', 'RLNT11', 'Rowland (given name)', 'English');\nDatabase State:\n- Table: family_name_identical_to_this_given_name, Columns: [label, description, instance_of, different_from, said_to_be_the_same_as, native_label, writing_system, soundex, cologne_phonetics, caverphone, g\u00e9opatronyme_id, geneanet_family_name_id]\n- Table: given_name, Columns: [label, description, said_to_be_the_same_as, family_name_identical_to_this_given_name, instance_of, different_from, native_label, writing_system, soundex, cologne_phonetics, caverphone, commons_category, language_of_work_or_name]\n- Table: eponym, Columns: [label, description, commons_category, instance_of, freebase_id, image]\n- Table: south_australian_house_of_assembly_by_election, Columns: [label, description, instance_of, office_contested, point_in_time, country, applies_to_jurisdiction, successful_candidate, candidate]",
        "Response": "Table: given_name"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales (SalesID, SalesPersonID, CustomerID, ProductID, Quantity) VALUES (3990862, 12, 16240, 300, 300);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO winner (label, description, instance_of, sex_or_gender, occupation, country_of_citizenship, date_of_birth, judoinside_judoka_id, place_of_birth, sport, participant_in, ijf_judoka_id, given_name, instagram_username) VALUES ('Guram Tushishvili', 'Georgian judoka', 'human', 'male', 'judoka', 'Georgia', '+1995-02-05T00:00:00Z', '75563.0', 'Kojori', 'judo', 'judo at the 2020 Summer Olympics \u2013 men''s +100 kg', '8178.0', 'Guram', 'nan');\nDatabase State:\n- Table: political_border, Columns: [label, description, shares_border_with, commons_category, country, flag_image, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, instance_of, freebase_id, locator_map_image, geonames_id, musicbrainz_area_id, openstreetmap_relation_id, official_website, population, area, located_in_time_zone, coat_of_arms_image, whos_on_first_id, inaturalist_place_id, image, viaf_id, worldcat_identities_id]\n- Table: followed_by, Columns: [label, description, instance_of, part_of, location, country, sport, point_in_time, follows, short_name, ijf_competition_id, judoinside_competition_id, organizer, followed_by, number_of_participants]\n- Table: Athletes, Columns: [label, description, instance_of, sex_or_gender, occupation, country_of_citizenship, date_of_birth, judoinside_judoka_id, place_of_birth, sport, participant_in, ijf_judoka_id, given_name, instagram_username]\n- Table: 2019_world_judo_championships, Columns: [label, description, instance_of, part_of, sport, follows, winner, location, google_knowledge_graph_id, followed_by, country, point_in_time, ijf_competition_id, judoinside_competition_id, short_name, number_of_participants]\n- Table: follows, Columns: [label, description, instance_of, point_in_time, sport, followed_by, follows, winner, location, google_knowledge_graph_id, country, part_of, number_of_participants, ijf_competition_id, judoinside_competition_id, short_name]\n- Table: event, Columns: [label, description, instance_of, part_of, sport, competition_class, follows, number_of_participants, point_in_time, winner, olympedia_event_id, location, followed_by, country]\n- Table: place_of_birth, Columns: [label, description, commons_category, country, coordinate_location, page_banner, freebase_id, twinned_administrative_body, geonames_id, instance_of, image, quora_topic_id, topics_main_category, located_in_the_administrative_territorial_entity, located_in_time_zone, population, whos_on_first_id, native_label, national_library_of_israel_j9u_id, flag_image, coat_of_arms_image, gnd_id, viaf_id, musicbrainz_area_id, head_of_government, official_website, category_of_associated_people, shares_border_with, area, library_of_congress_authority_id, archinform_location_id, locator_map_image, worldcat_identities_id]\n- Table: administrative_territorial_entity, Columns: [label, description, population, viaf_id, geonames_id, gnd_id, isni, country, musicbrainz_area_id, capital, geoshape, openstreetmap_relation_id, shares_border_with, topics_main_category, locator_map_image, area, page_banner, commons_category, instance_of, category_for_people_born_here, located_in_time_zone, contains_the_administrative_territorial_entity, freebase_id, library_of_congress_authority_id, coordinate_location, category_for_maps, worldcat_identities_id, inaturalist_place_id, national_library_of_israel_j9u_id, head_of_government, image, named_after, located_in_the_administrative_territorial_entity]\n- Table: capital_city, Columns: [label, description, twinned_administrative_body, page_banner, country, instance_of, flag_image, coat_of_arms_image, commons_category, postal_code, located_in_time_zone, coordinate_location, located_in_the_administrative_territorial_entity, gnd_id, topics_main_category, viaf_id, commons_gallery, musicbrainz_area_id, freebase_id, population, image, category_for_people_who_died_here, geonames_id, head_of_government, official_website, category_of_associated_people, described_by_source, elevation_above_sea_level, openstreetmap_relation_id, shares_border_with, located_in_or_next_to_body_of_water, encyclop\u00e6dia_britannica_online_id, area, library_of_congress_authority_id, quora_topic_id, official_name, native_label, inception, great_russian_encyclopedia_online_id, archinform_location_id, nkcr_aut_id, locator_map_image, getty_thesaurus_of_geographic_names_id, whos_on_first_id, gran_enciclop\u00e8dia_catalana_id, category_for_maps, worldcat_identities_id, inaturalist_place_id, den_store_danske_id, store_norske_leksikon_id, social_media_followers, national_library_of_israel_j9u_id, online_pwn_encyclopedia_id, twitter_username, nese_id, capital_of, office_held_by_head_of_government]",
        "Response": "Table: Athletes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO yebc_like (label, description, uniprot_protein_id, encoded_by, biological_process, cell_component, found_in_taxon, refseq_protein_id, molecular_function, instance_of, part_of, subclass_of) VALUES ('Hypothetical protein BT9727_0453', 'microbial protein found in [Bacillus thuringiensis] serovar konkukian str. 97-27', 'Q6HNR9', 'hypothetical protein BT9727_0453', 'transcription, DNA-templated', 'cytoplasm', 'Bacillus thuringiensis serovar konkukian str. 97-27', 'YP_034801', 'DNA binding', 'protein', 'YebC-like', 'protein');\nDatabase State:\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: Proteins, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, cell_component, found_in_taxon, refseq_protein_id, molecular_function, instance_of, part_of, subclass_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, genomic_start, strand_orientation, genomic_end, instance_of, ncbi_locus_tag]",
        "Response": "Table: Proteins"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Ship (Ship_ID, Name, Type, Built_Year, Class, Flag) VALUES (5, 'HMS Destiny', 'Panamax', 1998.0, 'KR', 'Panama');\nDatabase State:\n- Table: captain, Columns: [Captain_ID, Name, Ship_ID, age, Class, Rank]",
        "Response": "Table: Ship"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion) VALUES (6.0, 'HSBC', 'UK', 'Banking', 102.0, 16.19999999999999929, 2550.0, 164.3000000000000113);\nDatabase State:\n- Table: people, Columns: [People_ID, Age, Name, Nationality, Graduation_College]\n- Table: company, Columns: [Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion]\n- Table: employment, Columns: [Company_ID, People_ID, Year_working]",
        "Response": "Table: company"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, person_id, category, role, credited) VALUES ('tt0629422', 'nm0794914', 'Produced by', 'supervising producer', 'true');\nDatabase State:\n- Table: Episodes_Crew, Columns: [episode_id, person_id, category, role, credited]\n- Table: Person, Columns: [person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Episode, Columns: [episode_id, series, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Keyword, Columns: [episode_id, keyword]",
        "Response": "Table: Episodes_Crew"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customers_Cards (card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details) VALUES (3, 6, 'Debit', '348237249146948', '2014-08-01 14:26:45', '2018-03-24 15:29:00', '4916210554814');\nDatabase State:\n- Table: Customers, Columns: [customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details]\n- Table: Customers_Cards, Columns: [card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details]",
        "Response": "Table: Customers_Cards"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, coordinate_location, country, located_in_the_administrative_territorial_entity, image, instance_of, heritage_designation) VALUES ('Katowice old train station waiting room', 'cultural heritage monument in Katowice', 'Katowice old train station waiting room', '50.25735191159004', 'Poland', 'Katowice', 'Katowice old train station waiting room 2021.jpg', 'waiting room', 'immovable monument');\nDatabase State:\n- Table: waiting_room, Columns: [label, description, commons_category, coordinate_location, country, located_in_the_administrative_territorial_entity, image, instance_of, heritage_designation]",
        "Response": "Table: waiting_room"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO sokeikakketsuto (label, description, instance_of, natural_product_of_taxon, kegg_id, pubchem_substance_id_sid, subclass_of, part_of) VALUES ('peach pit', 'pit (or stone) from the fruit of Prunus persica', 'crude drug', 'peach', 'D06769', '47208420', 'kampo herb', 'daiobotampito');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: sokeikakketsuto"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (People_ID, Nationality, Name, Birth_Date, Height) VALUES (5, 'Russia', 'Yevgeni Sivozhelez', 'August 8, 1986', 196.0);\nDatabase State:\n- Table: Athletes, Columns: [People_ID, Nationality, Name, Birth_Date, Height]",
        "Response": "Table: Athletes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, person_id, category, role, credited) VALUES ('tt0629398', 'nm0891840', 'Cast', 'Gabriel', 'true');\nDatabase State:\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Person, Columns: [person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Episode, Columns: [episode_id, series, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, series, episode_id, person_id, role, result]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, gene_ontology_id, subclass_of, regulates_molecular_biology, exact_match, instance_of) VALUES ('positive regulation of receptor catabolic process', 'Any process that activates or increases the frequency, rate or extent of receptor catabolic process.', 'GO:2000646', 'regulation of receptor catabolic process', 'receptor catabolic process', 'http://purl.obolibrary.org/obo/GO_2000646', 'biological process');\nDatabase State:\n- Table: regulates_molecular_biology, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]\n- Table: Cellular_Catabolic_Process_Regulations, Columns: [label, description, gene_ontology_id, subclass_of, regulates_molecular_biology, exact_match, instance_of]",
        "Response": "Table: Cellular_Catabolic_Process_Regulations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO dipeptidase_1 (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('Dipeptidase Atu2519', 'microbial protein found in Agrobacterium fabrum str. C58', 'dipeptidase Atu2519', 'Q7CWV4', 'proteolysis', 'dipeptidase activity', 'Agrobacterium fabrum str. C58', 'NP_355465', 'protein', 'Dipeptidase 1', 'protein');\nDatabase State:\n- Table: Proteins, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: Proteins"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO City (ID, Name, CountryCode, District, Population) VALUES (4001, 'Gilbert', 'USA', 'Arizona', 109697);\nDatabase State:\n- Table: City, Columns: [ID, Name, CountryCode, District, Population]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details) VALUES ('633', 148, 'Elwyn', '388.863.3459x0915', 'ggrant@example.com', NULL);\nDatabase State:\n- Table: Stores, Columns: [Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details]\n- Table: Addresses, Columns: [Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details]\n- Table: Bookings, Columns: [Booking_ID, Customer_ID, Workshop_Group_ID, Status_Code, Store_ID, Order_Date, Planned_Delivery_Date, Actual_Delivery_Date, Other_Order_Details]\n- Table: Order_Items, Columns: [Order_Item_ID, Order_ID, Product_ID, Order_Quantity, Other_Item_Details]\n- Table: Ref_Service_Types, Columns: [Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description]\n- Table: Ref_Payment_Methods, Columns: [payment_method_code, payment_method_description]\n- Table: Drama_Workshop_Groups, Columns: [Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details]\n- Table: Performers, Columns: [Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details]\n- Table: Performers_in_Bookings, Columns: [Order_ID, Performer_ID]\n- Table: Marketing_Regions, Columns: [Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details]\n- Table: Products, Columns: [Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details]\n- Table: Services, Columns: [Service_ID, Service_Type_Code, Workshop_Group_ID, Product_Description, Product_Name, Product_Price, Other_Product_Service_Details]\n- Table: Bookings_Services, Columns: [Order_ID, Product_ID]\n- Table: Clients, Columns: [Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details]\n- Table: Invoices, Columns: [Invoice_ID, Order_ID, payment_method_code, Product_ID, Order_Quantity, Other_Item_Details, Order_Item_ID]\n- Table: Customer_Orders, Columns: [Order_ID, Customer_ID, Store_ID, Order_Date, Planned_Delivery_Date, Actual_Delivery_Date, Other_Order_Details]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO mathematical_society (label, description, instance_of, country, official_website) VALUES ('Institute of Mathematical Statistics', 'international learned society for mathematical statistics', 'mathematical society', 'United States of America', 'http://www.imstat.org');\nDatabase State:\n- Table: Mathematical_Societies, Columns: [label, description, instance_of, country, official_website]\n- Table: head_of_state, Columns: [label, description, sex_or_gender, commons_category, viaf_id, library_of_congress_authority_id, gnd_id, date_of_birth, member_of_political_party, instance_of, place_of_birth, occupation, country_of_citizenship, position_held, given_name, image, languages_spoken_written_or_signed, educated_at, family_name, name_in_native_language, worldcat_identities_id, opensanctions_id]",
        "Response": "Table: Mathematical_Societies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO orderdetails (orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber) VALUES (10249, 'S24_2841', 20, 54.81000000000000227, 1);\nDatabase State:\n- Table: customers, Columns: [customerNumber, customerName, contactLastName, contactFirstName, phone, addressLine1, addressLine2, city, state, postalCode, country, salesRepEmployeeNumber, creditLimit]\n- Table: orders, Columns: [orderNumber, orderDate, requiredDate, shippedDate, status, comments, customerNumber]\n- Table: products, Columns: [productCode, productName, productLine, productScale, productVendor, productDescription, quantityInStock, buyPrice, MSRP]\n- Table: payments, Columns: [customerNumber, checkNumber, paymentDate, amount]\n- Table: productlines, Columns: [productLine, textDescription, htmlDescription, image]\n- Table: Order_Products, Columns: [orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber]",
        "Response": "Table: Order_Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (university_id, ranking_criteria_id, year, score) VALUES (159, 20, 2014, 57);\nDatabase State:\n- Table: university_year, Columns: [university_id, year, num_students, student_staff_ratio, pct_international_students, pct_female_students]\n- Table: ranking_criteria, Columns: [id, ranking_system_id, criteria_name]\n- Table: university_ranking_year, Columns: [university_id, ranking_criteria_id, year, score]\n- Table: ranking_system, Columns: [id, system_name]\n- Table: country, Columns: [id, country_name]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, part_of, collection, inception, title, creator, inventory_number, publisher, place_of_publication, published_in, publication_date, location, image, copyright_status, main_subject) VALUES ('Cvmbria, Vulgo Cumberland (Joan Blaeu, 1667) BL 114.h*.5 (54)', 'British Library copy of map from 1667 Atlas Maior by Joan Blaeu', 'individual copy of a map', 'Blaeu''s Atlas Maior, Vol 5 (England) - BL 114.h*.5', 'British Library', '+1667-00-00T00:00:00Z', 'Cvmbria, Vulgo Cumberland', 'Joan Blaeu', '114.h*.5 (54)', 'Joan Blaeu', 'Amsterdam', 'Blaeu''s Atlas Maior (1667) BL 114.h*.1-12', '+1667-00-00T00:00:00Z', 'British Library', 'Cvmbria, Vulgo Cumberland - Atlas Maior, vol 5, map 54 - Joan Blaeu, 1667 - BL 114.h(star).5.(54).jpg', 'public domain', 'Cumberland');\nDatabase State:\n- Table: Maps_of_England_from_Blaeu's, Columns: [label, description, instance_of, part_of, collection, inception, title, creator, inventory_number, publisher, place_of_publication, published_in, publication_date, location, image, copyright_status, main_subject]",
        "Response": "Table: Maps_of_England_from_Blaeu's"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, located_in_the_administrative_territorial_entity, part_of, follows, followed_by, coordinate_location) VALUES ('Torre Zozzoli', 'tower in Lizzano, Italy', 'tower', 'Italy', 'Taranto', 'Coastal towers in Salento', 'Torre Canneto', 'Torre Castelluccia', '40.330448');\nDatabase State:\n- Table: follows, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, part_of, follows, followed_by, coordinate_location]\n- Table: coastal_towers_in_salento, Columns: [label, description, country, image, instance_of, coordinate_location, located_in_the_administrative_territorial_entity, part_of, follows, followed_by]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Scientist, Project) VALUES (222364883, 'Ast3');\nDatabase State:\n- Table: AssignedTo, Columns: [Scientist, Project]\n- Table: Projects, Columns: [Code, Name, Hours]",
        "Response": "Table: AssignedTo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, instance_of, located_in_the_administrative_territorial_entity, heritage_designation, coordinate_location) VALUES ('field monument in F\u00fcssen (D-7-8429-0053)', 'Cultural heritage monument in Bavaria, Germany', 'Germany', 'Bodendenkmal', 'F\u00fcssen', 'archaeological heritage monument in Bavaria', '47.58689');\nDatabase State:\n- Table: part, Columns: [label, description, coordinate_location, country, instance_of, located_in_the_administrative_territorial_entity]\n- Table: administrative_territorial_entity, Columns: [label, description, population, geonames_id, gnd_id, licence_plate_code, country, bavarikon_id, coat_of_arms_image, german_municipality_key, viaf_id, freebase_id, official_website, openstreetmap_relation_id, topics_main_category, locator_map_image, area, archinform_location_id, local_dialing_code, commons_category, elevation_above_sea_level, instance_of, coordinate_location, located_in_the_administrative_territorial_entity, postal_code, image, whos_on_first_id, factgrid_item_id, located_in_time_zone, german_regional_key, part_of]",
        "Response": "Table: plague_pit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, found_in_taxon, encoded_by, subclass_of, cell_component, molecular_function, biological_process, instance_of, refseq_protein_id, part_of) VALUES ('Dithiobiotin synthetase ECL_02958', 'microbial protein found in Enterobacter cloacae subsp. cloacae ATCC 13047', 'A0A0H3CPQ2', 'Enterobacter cloacae subsp. cloacae ATCC 13047', 'dithiobiotin synthetase ECL_02958', 'protein', 'cytoplasm', 'nucleotide binding', 'biotin biosynthetic process', 'protein', 'YP_003613443', 'Dethiobiotin synthase BioD');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: dethiobiotin_synthase_biod"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num) VALUES (2, 1, 2, 'rectangle', 'long', 'not_double', 'none', 3, 'hexagon', 1);\nDatabase State:\n- Table: cars, Columns: [id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num]",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed) VALUES (9, 2, '0', 'BUL', 'MED', 'Bessie', '4', '2012-05-31 08:01:36', '1', '3.52', '2018-01-17 11:44:16', '2018-02-25 23:45:30', '2018-03-25 06:46:07');\nDatabase State:\n- Table: Treatments, Columns: [treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment]\n- Table: Breeds, Columns: [breed_code, breed_name]\n- Table: Dogs, Columns: [dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed]\n- Table: Professionals, Columns: [professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number]\n- Table: Owners, Columns: [owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number]\n- Table: Treatment_Types, Columns: [treatment_type_code, treatment_type_description]\n- Table: Sizes, Columns: [size_code, size_description]",
        "Response": "Table: Dogs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO breweries (id, name, city, state) VALUES (52, 'Pipeworks Brewing Company', 'Chicago', 'IL');\nDatabase State:\n- Table: breweries, Columns: [id, name, city, state]",
        "Response": "Table: breweries"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customers_Cards (card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details) VALUES (6, 10, 'Debit', '5102229294602335', '2017-01-01 13:34:04', '2018-03-11 01:12:33', '5513587359761653');\nDatabase State:\n- Table: CardInformation, Columns: [card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details]\n- Table: Financial_Transactions, Columns: [transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details]",
        "Response": "Table: CardInformation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score) VALUES (936, 18, 2015, 974);\nDatabase State:\n- Table: university_ranking_year, Columns: [university_id, ranking_criteria_id, year, score]\n- Table: country, Columns: [id, country_name]\n- Table: university_year, Columns: [university_id, year, num_students, student_staff_ratio, pct_international_students, pct_female_students]\n- Table: ranking_system, Columns: [id, system_name]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, located_in_the_administrative_territorial_entity, part_of, coordinate_location, freebase_id) VALUES ('Mian Sara, Mazandaran', 'village in Iran', 'village', 'Iran', 'Baladeh Rural District', 'Tonekabon County', '37.088611', '/m/0yqkq5z');\nDatabase State:\n- Table: tonekabon_county, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, part_of, coordinate_location, freebase_id]",
        "Response": "Table: tonekabon_county"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO mission (Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate) VALUES (1, 1, 'VMV-1', 1930, 'Germany', 25, 'Decommissioned 1950');\nDatabase State:\n- Table: ship, Columns: [Ship_ID, Name, Type, Nationality, Tonnage]\n- Table: mission, Columns: [Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]",
        "Response": "Table: mission"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO listening_station (label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of) VALUES ('Wick Y Station', 'listening station in Highland, Scotland, UK', 'United Kingdom', 'Highland', '58.46806', 'listening station');\nDatabase State:\n- Table: Radio_Stations, Columns: [label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of]",
        "Response": "Table: Radio_Stations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO employee (Fname, Minit, Lname, Ssn, Bdate, Address, Sex, Salary, Super_ssn) VALUES ('Franklin', 'T', 'Wong', 333445555, '1955-12-08', '638 Voss, Houston, TX', 'M', 40000, 888665555, 5);\nDatabase State:\n- Table: works_on, Columns: [Essn, Pno, Hours]\n- Table: Employees, Columns: [Fname, Minit, Lname, Ssn, Bdate, Address, Sex, Salary, Super_ssn]\n- Table: dept_locations, Columns: [Dnumber, Dlocation]\n- Table: department, Columns: [Dname, Dnumber, Mgr_ssn, Mgr_start_date]",
        "Response": "Table: Employees"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movie_id, person_id, department_id, job) VALUES (201088, 17962, 3, 'Co-Producer');\nDatabase State:\n- Table: department, Columns: [department_id, department_name]\n- Table: gender, Columns: [gender_id, gender]\n- Table: movie_languages, Columns: [movie_id, language_id, language_role_id]\n- Table: movie_genres, Columns: [movie_id, genre_id]\n- Table: language_role, Columns: [role_id, language_role]\n- Table: movie, Columns: [movie_id, title, budget, homepage, overview, popularity, release_date, revenue, runtime, movie_status, tagline, vote_average, vote_count]\n- Table: production_company, Columns: [company_id, company_name]\n- Table: production_country, Columns: [movie_id, country_id]\n- Table: movie_company, Columns: [movie_id, company_id]\n- Table: movie_crew, Columns: [movie_id, person_id, department_id, job]\n- Table: person, Columns: [person_id, person_name]\n- Table: language, Columns: [language_id, language_code, language_name]\n- Table: genre, Columns: [genre_id, genre_name]\n- Table: movie_cast, Columns: [movie_id, person_id, character_name, gender_id, cast_order]\n- Table: country, Columns: [country_id, country_iso_code, country_name]\n- Table: movie_keywords, Columns: [movie_id, keyword_id]\n- Table: keyword, Columns: [keyword_id, keyword_name]",
        "Response": "Table: movie_crew"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, encoded_by, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of) VALUES ('Na+ dependent nucleoside transporter BT9727_4916', 'microbial protein found in [Bacillus thuringiensis] serovar konkukian str. 97-27', 'Q6HB51', 'Na+ dependent nucleoside transporter BT9727_4916', 'nucleoside transmembrane transport', 'nucleoside transmembrane transporter activity', 'membrane', 'Concentrative nucleoside transporter C-terminal domain', 'Bacillus thuringiensis serovar konkukian str. 97-27', 'YP_039225', 'protein', 'Concentrative nucleoside transporter, metazoan/bacterial');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: concentrative_nucleoside_transporter_n_terminal_domain_protein_family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, locator_map_image, instance_of, freebase_id, gnis_id, population, geonames_id, official_website, area, named_after, shares_border_with, inception, capital, image, viaf_id, archinform_location_id, category_of_associated_people, whos_on_first_id, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, hasc, openstreetmap_relation_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households, library_of_congress_authority_id, national_library_of_israel_j9u_id) VALUES ('South Carolina', 'state of the United States of America', 'United States of America', 'South Carolina', 'United States of America', '34.0', 'Category:South Carolina', 'South Carolina in United States.svg', 'U.S. state', '/m/06yxd', '1779799.0', 5118425.0, '4597040', 'https://www.sc.gov/', 82931.0, 'Province of Carolina', 'North Carolina', '+1788-05-23T00:00:00Z', 'Columbia', 'Ravenel Bridge at night from Mt Pleasant.jpg', '126093597.0', '4144.0', 'Category:People from South Carolina', '85688683.0', 'Category:Maps of South Carolina', 6.120000000000000106, 'State of South Carolina', 'Entity[\"AdministrativeDivision\", {\"SouthCarolina\", \"UnitedStates\"}]', 'lccn-n79022914', 'US.SC', '224040.0', '7007712.0', '43', 30727.0, 1961481.0, 'n79022914', '9.870075549543052e+17');\nDatabase State:\n- Table: administrative_centre, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, locator_map_image, instance_of, freebase_id, gnis_id, population, geonames_id, official_website, area, named_after, shares_border_with, inception, capital, image, viaf_id, archinform_location_id, category_of_associated_people, whos_on_first_id, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, hasc, openstreetmap_relation_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households, library_of_congress_authority_id, national_library_of_israel_j9u_id]",
        "Response": "Table: administrative_centre"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (order_id, product_id, order_quantity) VALUES (10, 2, '5');\nDatabase State:\n- Table: Addresses, Columns: [address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status, order_date, order_details]\n- Table: Order_Products, Columns: [order_id, product_id, order_quantity]\n- Table: Products, Columns: [product_id, product_details]\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, date_became_customer, other_customer_details]",
        "Response": "Table: Order_Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (university_id, ranking_criteria_id, year, score) VALUES (1060, 5, 2013, 41);\nDatabase State:\n- Table: UniversityRanking, Columns: [university_id, ranking_criteria_id, year, score]",
        "Response": "Table: UniversityRanking"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, uniprot_protein_id, encoded_by, subclass_of, instance_of, refseq_protein_id, part_of) VALUES ('Hypothetical protein THEYE_A0284', 'microbial protein found in Thermodesulfovibrio yellowstonii DSM 11347', 'Thermodesulfovibrio yellowstonii DSM 11347', 'B5YIH3', 'hypothetical protein THEYE_A0284', 'protein', 'protein', 'YP_002248132', 'Toxin-antitoxin system, RelE/ParE toxin domain superfamily');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: taxon, Columns: [label, description, taxon_name, taxon_rank, parent_taxon, instance_of, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, bacdive_id, itis_tsn, gram_staining, jstor_topic_id, irmng_id, lpsn_url, mesh_descriptor_id, mesh_tree_code, microsoft_academic_id, openalex_id, catalogue_of_life_id]\n- Table: Protein_Toxins, Columns: [label, description, found_in_taxon, uniprot_protein_id, encoded_by, subclass_of, instance_of, refseq_protein_id, part_of]\n- Table: encodes, Columns: [label, description, found_in_taxon, uniprot_protein_id, encoded_by, subclass_of, instance_of, refseq_protein_id, part_of]\n- Table: natural_product, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: Protein_Toxins"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, freebase_id, instance_of, geonames_id, official_website, image, viaf_id) VALUES ('Lisbon', 'capital city of Portugal', 'Portugal', 'Lisbon', 'Lisbon', '38.708042', '/m/04llb', 'capital city', '2267057.0', 'http://www.cm-lisboa.pt/', 'Montagem de Lisboa.png', '124321959.0');\nDatabase State:\n- Table: Locations, Columns: [label, description, country, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, freebase_id, instance_of, geonames_id, official_website, image, viaf_id]",
        "Response": "Table: Locations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, day_id, label_time_0, label_time_1, label_time_2, label_time_3, label_time_4, label_time_5, label_time_6, label_time_7, label_time_8, label_time_9, label_time_10, label_time_11, label_time_12, label_time_13, label_time_14, label_time_15, label_time_16, label_time_17, label_time_18, label_time_19, label_time_20, label_time_21, label_time_22, label_time_23) VALUES (13363, 1, 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'Low', 'None', 'None', 'None', 'Low', 'None', 'None', 'None', 'Low', 'None', 'None', 'Low', 'None', 'None', 'None', 'None', 'None');\nDatabase State:\n- Table: BusinessCheckins, Columns: [business_id, day_id, label_time_0, label_time_1, label_time_2, label_time_3, label_time_4, label_time_5, label_time_6, label_time_7, label_time_8, label_time_9, label_time_10, label_time_11, label_time_12, label_time_13, label_time_14, label_time_15, label_time_16, label_time_17, label_time_18, label_time_19, label_time_20, label_time_21, label_time_22, label_time_23]",
        "Response": "Table: BusinessCheckins"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional) VALUES (5662, 1197, 1289, 0.75, 0.75, 'pound(s)', NULL, 'FALSE');\nDatabase State:\n- Table: Ingredient, Columns: [ingredient_id, category, name, plural]\n- Table: Nutrition, Columns: [recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories]\n- Table: Recipe, Columns: [recipe_id, title, subtitle, servings, yield_unit, prep_min, cook_min, stnd_min, source, intro, directions]\n- Table: Quantity, Columns: [quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional]",
        "Response": "Table: Quantity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, subclass_of, found_in_taxon, entrez_gene_id, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('transglutaminase BPSS0498', 'microbial gene found in Burkholderia pseudomallei K96243', 'gene', 'Burkholderia pseudomallei K96243', '3096842', 'BPSS0498', 'Transglutaminase BPSS0498', 'gene', '677279', 'forward strand', '676323');\nDatabase State:\n- Table: bacterial_transglutaminase_like_n_terminal_domain_protein_family, Columns: [label, description, subclass_of, uniprot_protein_id, encoded_by, found_in_taxon, has_parts, instance_of, refseq_protein_id, part_of]\n- Table: taxon, Columns: [label, description, taxon_rank, parent_taxon, taxon_name, instance_of, ncbi_taxonomy_id, gbif_taxon_id, itis_tsn, gram_staining, irmng_id, lpsn_url, catalogue_of_life_id]\n- Table: encoded_by, Columns: [label, description, subclass_of, found_in_taxon, entrez_gene_id, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (inspection_id, point_id, fine, inspector_comment) VALUES (635075, 6, 500, 'All employees who handle food shall wash their hands as often as necessary to maintain a high degree of personal cleanliness and should conform to hygienic practices prescribed by the Board of Health.OBSERVED FOOD HANDLERS PERFORMING MULTIPLE TASKS AND NOT WASHING HANDS I.E. RINSING HANDS IN THE 3 COMP SINK THEN RETURNED TO SERVE CUSTOMERS ALSO OBSERVED SOAP,TOWEL DISPENSER HUNG ON WALL AT FAR RIGHT OVER THE 3 COMP SINK-MUST REMOVE AND PLACE DIRECTLY OVER EXPOSED HANDSINK FOR HANDWASHING.CRITICAL VIOLATION 7-38-010(A).');\nDatabase State:\n- Table: FoodViolations, Columns: [inspection_id, point_id, fine, inspector_comment]\n- Table: inspection_point, Columns: [point_id, Description, category, code, fine, point_level]",
        "Response": "Table: FoodViolations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO family_name (label, description, instance_of, different_from, commons_category, native_label, writing_system, soundex, caverphone, wolfram_language_entity_code, g\u00e9opatronyme_id, geneanet_family_name_id) VALUES ('Norris', 'family name', 'family name', 'Norris', 'Norris (surname)', 'Norris', 'Latin script', 'N620', 'NRS111', 'Entity[\"Surname\", \"Norris\"]', 'NORRIS', 'NORRIS');\nDatabase State:\n- Table: performer_of_the_fastest_lap, Columns: [label, description, sex_or_gender, date_of_birth, freebase_id, instance_of, country_of_citizenship, given_name, occupation, place_of_birth, commons_category, driver_database_driver_id, image, sport, motorsportstatscom_driver_id, family_name]\n- Table: new_zealand_grand_prix, Columns: [label, description, pole_position, instance_of, point_in_time, country, winner, event_distance, fastest_lap, google_knowledge_graph_id]\n- Table: given_name, Columns: [label, description, different_from, family_name_identical_to_this_given_name, native_label, language_of_work_or_name, commons_category, writing_system, instance_of, soundex, cologne_phonetics, caverphone, attested_in, said_to_be_the_same_as, nederlandse_voornamenbank_id]\n- Table: Surnames, Columns: [label, description, instance_of, different_from, commons_category, native_label, writing_system, soundex, caverphone, wolfram_language_entity_code, g\u00e9opatronyme_id, geneanet_family_name_id]\n- Table: family_name_identical_to_this_given_name, Columns: [label, description, instance_of, different_from, commons_category, native_label, writing_system, soundex, caverphone, cologne_phonetics, wolfram_language_entity_code, g\u00e9opatronyme_id, geneanet_family_name_id]\n- Table: place_of_birth, Columns: [label, description, commons_category, country, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, freebase_id, instance_of, geonames_id, image, population, quora_topic_id, postal_code, whos_on_first_id]\n- Table: winner, Columns: [label, description, sex_or_gender, instance_of, freebase_id, date_of_birth, place_of_birth, country_of_citizenship, occupation, sport, driver_database_driver_id, given_name, family_name, motorsportstatscom_driver_id, racing_reference_driver_id, commons_category, image]",
        "Response": "Table: Surnames"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, Name, CountryCode, District, Population) VALUES (579, 'Ovalle', 'CHL', 'Coquimbo', 94854);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, sport, instance_of, followed_by, edition_number, winner, country, start_time, end_time, subclass_of, follows) VALUES ('2014 Baltic Chain Tour', 'cycling race', 'road bicycle racing', 'Baltic Chain Tour', '2015 Baltic Chain Tour', '4', 'Mathieu van der Poel', 'Estonia', '+2014-08-20T00:00:00Z', '+2014-08-24T00:00:00Z', '2.2', '2013 Baltic Chain Tour');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, country, coordinate_location, locator_map_image, located_in_the_administrative_territorial_entity, area, population, geonames_id]\n- Table: winner, Columns: [label, description, sex_or_gender, commons_category, date_of_birth, occupation, instance_of, image, country_of_citizenship, participant_in, given_name, sport, place_of_birth, cq_ranking_male_cyclist_id, cycling_archives_cyclist_id, procyclingstats_cyclist_id, member_of_sports_team, family_name, firstcycling_rider_id, uci_rider_id]\n- Table: place_of_birth, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coat_of_arms_image, coordinate_location, instance_of, topics_main_category, freebase_id, musicbrainz_area_id, geonames_id, category_of_associated_people, viaf_id, image, official_website, population, capital_of, area, official_name, quora_topic_id, native_label, postal_code, located_in_time_zone, whos_on_first_id]\n- Table: baltic_chain_tour, Columns: [label, description, sport, instance_of, follows, followed_by, edition_number, start_time, end_time, winner, country, subclass_of]\n- Table: sports_team, Columns: [label, description, instance_of, sport, uci_code_of_cycling_team, country, official_name, has_parts, inception, official_website]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID) VALUES ('000-01-0000', 'Milgrom', 'Patricia', '10/1/04', 'US$57,500.00', 'F', 'Average', 2, 2);\nDatabase State:\n- Table: employee, Columns: [ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID]\n- Table: position, Columns: [positionID, positiontitle, educationrequired, minsalary, maxsalary]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, position_held, commons_category, instance_of, sex_or_gender, viaf_id, isni, occupation, given_name, date_of_birth, place_of_birth, country_of_citizenship, educated_at, signature, spouse, languages_spoken_written_or_signed, gnd_id, library_of_congress_authority_id, award_received, freebase_id, religion_or_worldview, name_in_native_language, treccani_id, munzinger_person_id, plwabn_id, worldcat_identities_id, fast_id, image, store_norske_leksikon_id, opensanctions_id, eu_knowledge_graph_item_id) VALUES ('Joe Biden', 'president of the United States since 2021', 'President of the United States', 'Joe Biden', 'human', 'male', '55438660', '0000 0001 1444 6482', 'politician', 'Joe', '+1942-11-20T00:00:00Z', 'St. Mary''s Hospital', 'United States of America', 'Syracuse University', 'Joe Biden Signature.svg', 'Neilia Hunter', 'English', '124301649', 'n80016125', 'Order of the Three Stars, 2nd Class', '/m/012gx2', 'Catholicism', 'Joseph Robinette Biden Jr.', 'biden-joseph-robinette-jr', '23818', '9810613821905606.0', 'lccn-n80016125', '50071.0', 'Joe Biden presidential portrait.jpg', 'Joe_Biden', 'Q6279', 'nan');\nDatabase State:\n- Table: part, Columns: [label, description, commons_category, topics_main_category, gnd_id, freebase_id, instance_of, quora_topic_id, coordinate_location, has_parts, viaf_id, locator_map_image, worldcat_identities_id, den_store_danske_id]\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, new_york_times_topic_id, babelnet_id, geonames_id, gnd_id, unicode_character, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, coordinates_of_westernmost_point, geography_of_topic, stw_thesaurus_for_economics_id, iso_3166_1_alpha_3_code, office_held_by_head_of_government, quora_topic_id, curlie_id, country, native_label, basic_form_of_government, musicbrainz_area_id, has_quality, coat_of_arms_image, uic_alphabetical_country_code, mesh_descriptor_id, located_in_or_next_to_body_of_water, insee_countries_and_foreign_territories_code, diplomatic_relation, highest_judicial_authority, ituisoiec_object_identifier, commons_gallery, inception, viaf_id, civicus_monitor_country_entry, nuts_code, history_of_topic, gran_enciclop\u00e8dia_catalana_id, freebase_id, replaces, subreddit, continent, capital, coat_of_arms, demonym, geoshape, openstreetmap_relation_id, wipo_st3, coordinates_of_northernmost_point, coordinates_of_easternmost_point, nkcr_aut_id, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, flag_image, marriageable_age, topics_main_category, le_monde_diplomatique_subject_id, head_of_state, biblioth\u00e8que_nationale_de_france_id, category_of_people_buried_here, locator_map_image, bbc_things_id, age_of_majority, dewey_decimal_classification, area, head_of_government, fast_id, ioc_country_code, member_of, official_name, unemployment_rate, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, gs1_country_code, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, located_in_time_zone, category_for_people_who_died_here, yso_id, anthem, office_held_by_head_of_state, life_expectancy, part_of, commons_category, top_level_internet_domain, shares_border_with, instance_of, highest_point, category_for_people_born_here, short_name, number_of_out_of_school_children, driving_side, uic_numerical_country_code, on_focus_list_of_wikimedia_project, lowest_point, treccani_id, iso_3166_1_numeric_code, official_language, pronunciation_audio, idref_id, giant_bomb_id, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, statoids_id, library_of_congress_authority_id, iso_3166_1_alpha_2_code, flag, coordinate_location, fips_10_4_countries_and_regions, described_by_source, isni, brockhaus_enzyklop\u00e4die_online_id, klexikon_article_id, loc_and_marc_vocabularies_id, language_used, iab_code, legislative_body, comic_vine_id, category_of_associated_people, whos_on_first_id, world_encyclopedia_of_puppetry_arts_id, dr_topic_id, inaturalist_place_id, omegawiki_defined_meaning, hds_id, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, online_pwn_encyclopedia_id, eurovoc_id, worldcat_identities_id, motto_text, open_data_portal, kbpedia_id, grove_art_online_id, store_norske_leksikon_id, rkd_thesaurus_id, pm20_geo_code, interlingual_index_id, jewish_encyclopedia_id_russian, central_bank, bbc_news_topic_id, economy_of_topic, tasteatlas_id, sapa_id, bhcl_uuid, uk_parliament_thesaurus_id, github_topic, wordnet_31_synset_id, namuwiki_id, demographics_of_topic, joconde_location_id, national_library_of_israel_j9u_id, zhihu_topic_id, idaigazetteer_id, krugosvet_article, schoenberg_database_of_manuscripts_place_id, the_world_factbook_country_id, colon_classification, democracy_index, nese_id, der_spiegel_topic_id, museum_digital_place_id, ysa_id, postimees_topic_id, yle_topic_id, wikisimpsons_id, den_store_danske_id, urban_electric_transit_country_id, hashtag, m49_code, s\u00fcddeutsche_zeitung_topic_id, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, gini_coefficient, official_website, nalt_id, national_library_of_israel_id_old, vat_rate]\n- Table: multilateral_trading_facility, Columns: [label, description, country, instance_of, mic_market_code, official_website]\n- Table: administrative_territorial_entity, Columns: [label, description, country, located_in_the_administrative_territorial_entity, coat_of_arms_image, capital, commons_category, coordinate_location, topics_main_category, instance_of, freebase_id, geonames_id, category_of_associated_people, openstreetmap_relation_id, official_website, shares_border_with, area, locator_map_image, population, inaturalist_place_id]",
        "Response": "Table: head_of_state"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (registration_id, date_test_taken, test_result) VALUES (2, '2018-03-19 14:48:12', 'Pass');\nDatabase State:\n- Table: Subjects, Columns: [subject_id, subject_name]\n- Table: Courses, Columns: [course_id, author_id, subject_id, course_name, course_description]\n- Table: Student_Course_Enrolment, Columns: [registration_id, student_id, course_id, date_of_enrolment, date_of_completion]\n- Table: Students, Columns: [student_id, date_of_registration, date_of_latest_logon, login_name, password, personal_name, middle_name, family_name]\n- Table: Course_Authors_and_Tutors, Columns: [author_id, author_tutor_ATB, login_name, password, personal_name, middle_name, family_name, gender_mf, address_line_1]",
        "Response": "Table: Student_Tests_Taken"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, score, date, type) VALUES (63047, 92, '2014-08-01', 'Routine - Unscheduled');\nDatabase State:\n- Table: inspections, Columns: [business_id, score, date, type]\n- Table: violations, Columns: [business_id, date, violation_type_id, risk_category, description]\n- Table: businesses, Columns: [business_id, name, address, city, postal_code, latitude, longitude, phone_number, tax_code, business_certificate, application_date, owner_name, owner_address, owner_city, owner_state, owner_zip]",
        "Response": "Table: inspections"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, ensembl_protein_id, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of) VALUES ('Repetin', 'mammalian protein found in Rattus norvegicus', 'Rptn', 'D3ZRF0', 'ENSRNOP00000025249', 'calcium ion binding', 'cornified envelope', 'S100/CaBP-9k-type, calcium binding, subdomain', 'brown rat', 'XP_227371', 'protein', 'Repetin');\nDatabase State:\n- Table: part, Columns: [label, description, interpro_id, instance_of, subclass_of]\n- Table: chromosome, Columns: [label, description, refseq_genome_id, found_in_taxon, instance_of]\n- Table: s100_cabp_9k_type_calcium_binding_subdomain_protein_family, Columns: [label, description, encoded_by, uniprot_protein_id, ensembl_protein_id, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: expressed_in, Columns: [label, description, subclass_of, instance_of, uberon_id]\n- Table: molecular_function, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]\n- Table: cellular_component, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories) VALUES (875, 8.099999999999999645, 11.74000000000000021, 0.0, 4.709999999999999965, 2.919999999999999929, 18.28000000000000113, 122.0, 0.1199999999999999956, 2.319999999999999841, 500.1999999999999887, 0.0, 38.56000000000000227, 34.82000000000000028, 26.62000000000000099, 121.7300000000000039);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Nutrition"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, freebase_id, inception, programming_paradigm) VALUES ('eC', 'object-oriented programming language, defined as a super-set of the C language', 'procedural programming language', 'nan', '+2004-00-00T00:00:00Z', 'multi-paradigm programming');\nDatabase State:\n- Table: programming_paradigm, Columns: [label, description, freebase_id, instance_of, subclass_of, microsoft_academic_id]",
        "Response": "Table: procedural_programming_language"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Premises (premise_id, premises_type, premise_details) VALUES (14, 'Residence', '5109 Jules Squares Apt. 082');\nDatabase State:\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password]\n- Table: Products, Columns: [product_id, product_category, product_name]\n- Table: Properties, Columns: [premise_id, premises_type, premise_details]\n- Table: Mailshot_Campaigns, Columns: [mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date]\n- Table: Order_Items, Columns: [item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity]",
        "Response": "Table: Properties"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, freebase_id, instance_of) VALUES ('friend', 'someone who a person has a friendship with', 'nan', 'nan');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, seal_image, dewey_decimal_classification, topics_main_wikimedia_portal, country, capital, shares_border_with, flag_image, flag, iso_3166_2_code, commons_category, locator_map_image, located_in_time_zone, head_of_government, openstreetmap_relation_id, located_in_the_administrative_territorial_entity, coordinate_location, official_website, topics_main_category, page_banner, curlie_id, musicbrainz_area_id, instance_of, legislative_body, freebase_id, contains_the_administrative_territorial_entity, gnis_id, fips_10_4_countries_and_regions, inception, category_for_people_born_here, category_for_people_who_died_here, geonames_id, gnd_id, category_for_films_shot_at_this_location, category_of_people_buried_here, category_of_associated_people, office_held_by_head_of_government, viaf_id, library_of_congress_authority_id, population, nickname, topics_main_template, ballotpedia_id, described_by_source, geography_of_topic, encyclop\u00e6dia_britannica_online_id, has_seal_badge_or_sigil, pronunciation_audio, gran_enciclop\u00e8dia_catalana_id, area, quora_topic_id, bbc_things_id, yso_id, short_name, demonym, subreddit, motto_text, highest_point, lowest_point, history_of_topic, elevation_above_sea_level, us_national_archives_identifier, gacs_id, mesh_descriptor_id, archives_at, official_symbol, fips_5_2_alpha_code_us_states, fips_5_2_numeric_code_us_states, wikimedia_outline, water_as_percent_of_area, named_after, coordinates_of_geographic_center, executive_body, foundational_text, highest_judicial_authority, getty_thesaurus_of_geographic_names_id, part_of, c_span_organization_id, native_label, idref_id, archinform_location_id, national_library_of_israel_id_old, geoshape, wolfram_language_entity_code, nkcr_aut_id, different_from, comic_vine_id, maximum_temperature_record, loc_and_marc_vocabularies_id, language_used, anthem, whos_on_first_id, store_norske_leksikon_id, located_in_or_next_to_body_of_water, omegawiki_defined_meaning, minimum_temperature_record, category_for_maps, larousse_id, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, italian_vikidia_id, worldcat_identities_id, isni, kbpedia_id, rkd_thesaurus_id, hasc, interlingual_index_id, the_top_tens_id, economy_of_topic, google_maps_customer_id, tripadvisor_id, open_civic_data_division_id, google_news_topics_id, category_for_the_view_of_the_item, github_topic, uk_parliament_thesaurus_id, wordnet_31_synset_id, demographics_of_topic, coordinates_of_northernmost_point, coordinates_of_southernmost_point, inaturalist_place_id, marriageable_age, compulsory_education_maximum_age, twitter_topic_id, openstreetmap_zoom_level, online_pwn_encyclopedia_id, wikisimpsons_id, related_category, den_store_danske_id, per_capita_income, mean_age, number_of_households, hashtag, national_library_of_israel_j9u_id, ringgold_id, catholic_encyclopedia_id]\n- Table: facet_of, Columns: [label, description, seal_image, dewey_decimal_classification, topics_main_wikimedia_portal, country, capital, shares_border_with, flag_image, flag, iso_3166_2_code, commons_category, locator_map_image, located_in_time_zone, head_of_government, openstreetmap_relation_id, located_in_the_administrative_territorial_entity, coordinate_location, official_website, topics_main_category, page_banner, curlie_id, musicbrainz_area_id, instance_of, legislative_body, freebase_id, contains_the_administrative_territorial_entity, gnis_id, fips_10_4_countries_and_regions, inception, category_for_people_born_here, category_for_people_who_died_here, geonames_id, gnd_id, category_for_films_shot_at_this_location, category_of_people_buried_here, category_of_associated_people, office_held_by_head_of_government, viaf_id, library_of_congress_authority_id, population, nickname, topics_main_template, ballotpedia_id, described_by_source, geography_of_topic, encyclop\u00e6dia_britannica_online_id, has_seal_badge_or_sigil, pronunciation_audio, gran_enciclop\u00e8dia_catalana_id, area, quora_topic_id, bbc_things_id, yso_id, short_name, demonym, subreddit, motto_text, highest_point, lowest_point, history_of_topic, elevation_above_sea_level, us_national_archives_identifier, gacs_id, mesh_descriptor_id, archives_at, official_symbol, fips_5_2_alpha_code_us_states, fips_5_2_numeric_code_us_states, wikimedia_outline, water_as_percent_of_area, named_after, coordinates_of_geographic_center, executive_body, foundational_text, highest_judicial_authority, getty_thesaurus_of_geographic_names_id, part_of, c_span_organization_id, native_label, idref_id, archinform_location_id, national_library_of_israel_id_old, geoshape, wolfram_language_entity_code, nkcr_aut_id, different_from, comic_vine_id, maximum_temperature_record, loc_and_marc_vocabularies_id, language_used, anthem, whos_on_first_id, store_norske_leksikon_id, located_in_or_next_to_body_of_water, omegawiki_defined_meaning, minimum_temperature_record, category_for_maps, larousse_id, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, italian_vikidia_id, worldcat_identities_id, isni, kbpedia_id, rkd_thesaurus_id, hasc, interlingual_index_id, the_top_tens_id, economy_of_topic, google_maps_customer_id, tripadvisor_id, open_civic_data_division_id, google_news_topics_id, category_for_the_view_of_the_item, github_topic, uk_parliament_thesaurus_id, wordnet_31_synset_id, demographics_of_topic, coordinates_of_northernmost_point, coordinates_of_southernmost_point, inaturalist_place_id, marriageable_age, compulsory_education_maximum_age, twitter_topic_id, openstreetmap_zoom_level, online_pwn_encyclopedia_id, wikisimpsons_id, related_category, den_store_danske_id, per_capita_income, mean_age, number_of_households, hashtag, national_library_of_israel_j9u_id, ringgold_id, catholic_encyclopedia_id]\n- Table: state_park_of_the_united_states, Columns: [label, description, subclass_of, located_in_the_administrative_territorial_entity, country, topics_main_category, has_list]\n- Table: Eponyms, Columns: [label, description, freebase_id, instance_of]\n- Table: aspect_of_history, Columns: [label, description, part_of, commons_category, topics_main_category, dewey_decimal_classification, instance_of, facet_of, library_of_congress_authority_id, national_library_of_israel_j9u_id]\n- Table: place_of_birth, Columns: [label, description, instance_of, category_combines_topics, commons_category, category_contains]\n- Table: wikimedia_category, Columns: [label, description, instance_of, commons_category, category_combines_topics, category_contains]\n- Table: economy_of_region, Columns: [label, description, commons_category, topics_main_category, instance_of, location, country, subclass_of, nominal_gdp]",
        "Response": "Table: Eponyms"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EVENTID, REFID, EVENT_DATE, AMOUNT) VALUES (949864, 99884, '2007-04-16 12:00:00.0', 10.24799999999999933);\nDatabase State:\n- Table: Demog, Columns: [GEOID, INHABITANTS_K, INCOME_K, A_VAR1, A_VAR2, A_VAR3, A_VAR4, A_VAR5, A_VAR6, A_VAR7, A_VAR8, A_VAR9, A_VAR10, A_VAR11, A_VAR12, A_VAR13, A_VAR14, A_VAR15, A_VAR16, A_VAR17, A_VAR18]\n- Table: Mailings1_2, Columns: [REFID, REF_DATE, RESPONSE]\n- Table: Customers, Columns: [ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age]\n- Table: mailings3, Columns: [REFID, REF_DATE, RESPONSE]\n- Table: Transactions, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]",
        "Response": "Table: Transactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (a_id) VALUES (4, 2, 7, 10, 7);\nDatabase State:\n- Table: trust, Columns: [source_u_id]\n- Table: useracct, Columns: [u_id]\n- Table: Reviews, Columns: [a_id]",
        "Response": "Table: Reviews"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO location (locationID, locationcity, address, state, zipcode, officephone) VALUES (1, 'Atlanta', '450 Peachtree Rd', 'GA', 30316, '(404)333-5555');\nDatabase State:\n- Table: position, Columns: [positionID, positiontitle, educationrequired, minsalary, maxsalary]\n- Table: Locations, Columns: [locationID, locationcity, address, state, zipcode, officephone]",
        "Response": "Table: Locations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Mailshot_Customers (mailshot_id, customer_id, outcome_code, mailshot_customer_date) VALUES (20, 11, 'Order', '2018-03-01 21:39:07');\nDatabase State:\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password]",
        "Response": "Table: Mailshot_Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tonekabon_county (label, description, instance_of, country, located_in_the_administrative_territorial_entity, part_of, coordinate_location, freebase_id) VALUES ('Moslemabad, Mazandaran', 'village in Iran', 'village', 'Iran', 'Goli Jan Rural District', 'Tonekabon County', '34.672222', '/m/0yqmg87');\nDatabase State:\n- Table: tonekabon_county, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, part_of, coordinate_location, freebase_id]\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, country, instance_of, coordinate_location, freebase_id]",
        "Response": "Table: tonekabon_county"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (stor_id, ord_num, ord_date, qty, payterms, title_id) VALUES ('7066', 'QA7442.3', '1994-09-13 00:00:00.0', 75, 'ON invoice', 'PS2091');\nDatabase State:\n- Table: titles, Columns: [title_id, title, type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate]\n- Table: BookSales, Columns: [stor_id, ord_num, ord_date, qty, payterms, title_id]\n- Table: publishers, Columns: [pub_id, pub_name, city, state, country]\n- Table: discounts, Columns: [discounttype, stor_id, lowqty, highqty, discount]\n- Table: stores, Columns: [stor_id, stor_name, stor_address, city, state, zip]\n- Table: pub_info, Columns: [pub_id, logo, pr_info]\n- Table: roysched, Columns: [title_id, lorange, hirange, royalty]\n- Table: authors, Columns: [au_id, au_lname, au_fname, phone, address, city, state, zip, contract]\n- Table: employee, Columns: [emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date]\n- Table: titleauthor, Columns: [au_id, title_id, au_ord, royaltyper]\n- Table: jobs, Columns: [job_id, job_desc, min_lvl, max_lvl]",
        "Response": "Table: BookSales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Purchases (purchase_transaction_id, purchase_details) VALUES (12, 'h');\nDatabase State:\n- Table: Purchases, Columns: [purchase_transaction_id, purchase_details]\n- Table: Transactions_Lots, Columns: [transaction_id, lot_id]\n- Table: Transactions, Columns: [transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details]",
        "Response": "Table: Purchases"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1028, 'Rugh', 'Eric', 20, 'M', 550, 2311, 'ROC');\nDatabase State:\n- Table: Video_Games, Columns: [GameID, GName, GType]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Plays_Games, Columns: [StuID, GameID, Hours_Played]\n- Table: SportsInfo, Columns: [StuID, SportName, HoursPerWeek, GamesPlayed, OnScholarship]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO badminton_club (label, description, instance_of, sport, country) VALUES ('Delhi Smashers', 'badminton franchise', 'sports team', 'badminton', 'India');\nDatabase State:\n- Table: part, Columns: [label, description, commons_category, topics_main_category, freebase_id, gnd_id, viaf_id, instance_of, quora_topic_id, has_parts, coordinate_location, locator_map_image]\n- Table: place_of_birth, Columns: [label, description, country, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, freebase_id, instance_of, geonames_id, official_website, image, viaf_id]\n- Table: BadmintonClubs, Columns: [label, description, instance_of, sport, country]\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, instance_of, freebase_id, geonames_id, shares_border_with, official_website, capital, locator_map_image, head_of_government, archinform_location_id, inaturalist_place_id, whos_on_first_id, area, population]\n- Table: country, Columns: [label, description, great_russian_encyclopedia_online_id, coordinates_of_southernmost_point, new_york_times_topic_id, gnd_id, category_of_associated_people, emergency_phone_number, electrical_plug_type, licence_plate_code, hashtag, babelnet_id, office_held_by_head_of_government, curlie_id, native_label, musicbrainz_area_id, public_holiday, insee_countries_and_foreign_territories_code, vat_rate, diplomatic_relation, flag_image, commons_gallery, viaf_id, history_of_topic, located_in_or_next_to_body_of_water, capital, subreddit, openstreetmap_relation_id, mobile_country_code, maritime_identification_digits, nkcr_aut_id, asc_leiden_thesaurus_id, marriageable_age, category_of_people_buried_here, motto_text, geoshape, coordinates_of_easternmost_point, le_monde_diplomatique_subject_id, marine_regions_geographic_id, member_of, unemployment_rate, located_in_time_zone, category_for_people_who_died_here, yso_id, office_held_by_head_of_state, commons_category, shares_border_with, us_national_archives_identifier, nalt_id, treccani_id, iso_3166_1_numeric_code, coordinates_of_westernmost_point, country_calling_code, stw_thesaurus_for_economics_id, statoids_id, flag, fips_10_4_countries_and_regions, isni, nese_id, maintained_by_wikiproject, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, wikimedia_outline, ndl_authority_id, currency, geonames_id, unicode_character, unesco_thesaurus_id, geography_of_topic, iso_3166_1_alpha_3_code, official_name, quora_topic_id, mesh_descriptor_id, basic_form_of_government, coat_of_arms_image, ituisoiec_object_identifier, legislative_body, nuts_code, freebase_id, official_language, replaces, continent, coat_of_arms, age_of_majority, on_focus_list_of_wikimedia_project, wipo_st3, coordinates_of_northernmost_point, has_quality, iso_3166_1_alpha_2_code, total_fertility_rate, area, store_norske_leksikon_id, compulsory_education_minimum_age, different_from, topics_main_category, biblioth\u00e8que_nationale_de_france_id, locator_map_image, bbc_things_id, head_of_government, ioc_country_code, fast_id, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, anthem, highest_judicial_authority, life_expectancy, top_level_internet_domain, instance_of, highest_point, category_for_people_born_here, driving_side, lowest_point, civicus_monitor_country_entry, pronunciation_audio, idref_id, contains_the_administrative_territorial_entity, itu_letter_code, library_of_congress_authority_id, coordinate_location, described_by_source, brockhaus_enzyklop\u00e4die_online_id, iab_code, klexikon_article_id, loc_and_marc_vocabularies_id, language_used, dr_topic_id, world_encyclopedia_of_puppetry_arts_id, gran_enciclop\u00e8dia_catalana_id, whos_on_first_id, inaturalist_place_id, omegawiki_defined_meaning, hds_id, gs1_country_code, culture, geonlp_id, analysis_policy_observatory_term_id, category_for_maps, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, italian_vikidia_id, larousse_id, worldcat_identities_id, eurovoc_id, part_of, open_data_portal, kbpedia_id, inception, rkd_thesaurus_id, pm20_geo_code, interlingual_index_id, jewish_encyclopedia_id_russian, economy_of_topic, uk_parliament_thesaurus_id, edition_humboldt_digital_id, tasteatlas_id, sapa_id, bhcl_uuid, github_topic, namuwiki_id, wordnet_31_synset_id, demographics_of_topic, ysa_id, yle_topic_id, bbc_news_topic_id, joconde_location_id, topics_main_template, armeniapedia_id, zhihu_topic_id, idaigazetteer_id, den_store_danske_id, krugosvet_article, schoenberg_database_of_manuscripts_place_id, colon_classification, national_library_of_israel_j9u_id, democracy_index, online_pwn_encyclopedia_id, postimees_topic_id, head_of_state, der_spiegel_topic_id, google_arts_culture_entity_id, museum_digital_place_id, wikisimpsons_id, urban_electric_transit_country_id, m49_code, short_name, demonym, s\u00fcddeutsche_zeitung_topic_id, country, official_website, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, central_bank, gini_coefficient, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, dewey_decimal_classification, giant_bomb_id, number_of_out_of_school_children, the_top_tens_id, grove_art_online_id, the_world_factbook_country_id]",
        "Response": "Table: BadmintonClubs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales_Orders (OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost) VALUES ('SO - 0001080', 'Distributor', 'WARE-MKL1006', '7/19/18', '9/23/18', '10/5/18', '10/13/18', 'USD', 25, 31, 339, 5, 6, 0.05000000000000000277, '3,886.00', '2,215.02');\nDatabase State:\n- Table: Products, Columns: [ProductID, Product_Name]",
        "Response": "Table: Sales_Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cinema (Cinema_ID, Name, Openning_year, Capacity, Location) VALUES (4, 'Glenmore', 2009, 305, 'County Clare');\nDatabase State:\n- Table: cinema, Columns: [Cinema_ID, Name, Openning_year, Capacity, Location]\n- Table: schedule, Columns: [Cinema_ID, Film_ID, Date, Show_times_per_day, Price]",
        "Response": "Table: cinema"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (year, lgID, tmID, oppID, W, L, T, OTL) VALUES (1977, 'WHA', 'QUN', 'CIN', 3, 8, 0, NULL);\nDatabase State:\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: Scoring, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, +/_, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, Post+/_, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]",
        "Response": "Table: TeamVsTeam"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, ensembl_gene_id, refseq_rna_id, ensembl_transcript_id, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, chromosome, instance_of, expressed_in) VALUES ('LOXL3', 'protein-coding gene in the species Homo sapiens', '84695', 'ENSG00000115318', 'XM_011533134', 'ENST00000484369', 'Lysyl oxidase like 3', 'Homo sapiens', 'reverse strand', '74555690.0', '74759541.0', 'human chromosome 2', 'gene', 'tibia');\nDatabase State:\n- Table: biological_process, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, ensembl_gene_id, refseq_rna_id, ensembl_transcript_id, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, chromosome, instance_of, expressed_in]\n- Table: encodes, Columns: [label, description, uniprot_protein_id, encoded_by, ensembl_protein_id, biological_process, cell_component, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]\n- Table: chromosome, Columns: [label, description, refseq_genome_id, found_in_taxon, instance_of]\n- Table: expressed_in, Columns: [label, description, subclass_of, instance_of, freebase_id, microsoft_academic_id, uberon_id]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO person (name) VALUES ('student295');\nDatabase State:\n- Table: no_payment_due, Columns: [name, bool]\n- Table: longest_absense_from_school, Columns: [name, month]\n- Table: bool, Columns: [name]\n- Table: male, Columns: [name]\n- Table: filed_for_bankrupcy, Columns: [name]\n- Table: disabled, Columns: [name]\n- Table: enrolled, Columns: [name, school, month]\n- Table: enlist, Columns: [name, organ]",
        "Response": "Table: person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, +/_, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, Post+/_, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG) VALUES ('bellawa01', 1909, 1, 'MOS', 'NHA', NULL, 8, 3, 0, 3, 2, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: PlayerStats, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, +/_, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, Post+/_, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]\n- Table: TeamsPost, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: TeamsSC, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM]\n- Table: TeamVsTeam, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]\n- Table: HOF, Columns: [year, hofID, name, category]\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: TeamsHalf, Columns: [year, lgID, tmID, half, rank, G, W, L, T, GF, GA]\n- Table: CombinedShutouts, Columns: [year, month, date, tmID, oppID, R/P, IDgoalie1, IDgoalie2]\n- Table: GoaliesSC, Columns: [playerID, year, tmID, lgID, GP, Min, W, L, T, SHO, GA]\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]\n- Table: ScoringShootout, Columns: [playerID, year, stint, tmID, S, G, GDG]\n- Table: Master, Columns: [playerID, coachID, hofID, firstName, lastName, nameNote, nameGiven, nameNick, height, weight, shootCatch, legendsID, ihdbID, hrefID, firstNHL, lastNHL, firstWHA, lastWHA, pos, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity, deathYear, deathMon, deathDay, deathCountry, deathState, deathCity]\n- Table: GoaliesShootout, Columns: [playerID, year, stint, tmID, W, L, SA, GA]\n- Table: SeriesPost, Columns: [year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L, T, GoalsWinner, GoalsLoser, note]\n- Table: ScoringSC, Columns: [playerID, year, tmID, lgID, pos, GP, G, A, Pts, PIM]\n- Table: Teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: ScoringSup, Columns: [playerID, year, PPA, SHA]\n- Table: AwardsMisc, Columns: [name, ID, award, year, lgID, note]\n- Table: Goalies, Columns: [playerID, year, stint, tmID, lgID, GP, Min, W, L, T/OL, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA]\n- Table: Coaches, Columns: [coachID, year, tmID, lgID, stint, notes, g, w, l, t, postg, postw, postl, postt]",
        "Response": "Table: PlayerStats"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id) VALUES ('1', 'Dakota State University', 'Madison, South Dakota', 1881.0, 'Public', 3102, 'Trojans', 'none', '1');\nDatabase State:\n- Table: building, Columns: [building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors]\n- Table: Universities, Columns: [Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id]",
        "Response": "Table: Universities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO host (Host_ID, Name, Nationality, Age) VALUES (5, 'Ed Davis', 'United States', '45');\nDatabase State:\n- Table: party_host, Columns: [Party_ID, Host_ID, Is_Main_in_Charge]\n- Table: host, Columns: [Host_ID, Name, Nationality, Age]",
        "Response": "Table: host"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Products (Code, Name, Price, Manufacturer) VALUES (1, 'Hard drive', 240, 5);\nDatabase State:\n- Table: ProductCatalog, Columns: [Code, Name, Price, Manufacturer]",
        "Response": "Table: ProductCatalog"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('L-threonine aldolase MSMEG_4454', 'microbial gene found in Mycolicibacterium smegmatis MC2 155', '4536092', 'gene', 'L-threonine aldolase MSMEG_4454', 'Mycobacterium smegmatis str. MC2 155', 'forward strand', '4534419', '4533403', 'gene', 'MSMEG_4454');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO district_court_in_the_czech_republic (label, description, instance_of, country, image, applies_to_jurisdiction, czech_registration_id, headquarters_location, legal_form, inception, official_name, official_website, isds_id) VALUES ('District Court in Opava', 'nan', 'district court in the Czech Republic', 'Czech Republic', 'Opava, okresn\u00ed soud (1).jpg', 'Opava District', '25259', 'Opava', 'organisational unit of the state', '+1974-01-01T00:00:00Z', 'nan', 'https://www.justice.cz/web/okresni-soud-v-opave/', 'g2xaesr');\nDatabase State:\n- Table: source_of_information, Columns: [label, description, commons_category, language_of_work_or_name, instance_of, title, publication_date]\n- Table: jurisdiction, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, capital, locator_map_image, openstreetmap_relation_id, shares_border_with, country, coordinate_location, lau, topics_main_category, instance_of, iso_3166_2_code, freebase_id, geonames_id, viaf_id, image, population, area, musicbrainz_area_id, geoshape, mean_age, licence_plate_code, nkcr_aut_id, library_of_congress_authority_id, czech_district_id, category_for_maps, hasc, mapycz_id, inaturalist_place_id, number_of_houses, topics_main_template, contains_the_administrative_territorial_entity]\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, population, country, capital, located_in_the_administrative_territorial_entity, coordinate_location, area, contains_the_administrative_territorial_entity, locator_map_image, number_of_houses, mean_age, mapycz_id, commons_category, iso_3166_2_code, openstreetmap_relation_id, lau, topics_main_category, freebase_id, geonames_id, musicbrainz_area_id, image, geoshape, nkcr_aut_id, licence_plate_code, shares_border_with, viaf_id, czech_district_id, category_for_maps, hasc, inaturalist_place_id, topics_main_template, library_of_congress_authority_id]\n- Table: headquarters, Columns: [label, description, twinned_administrative_body, commons_category, image, flag_image, coat_of_arms_image, country, topics_main_category, lau, instance_of, freebase_id, population, category_for_people_born_here, geonames_id, shares_border_with, gnd_id, category_for_people_who_died_here, coordinate_location, category_of_associated_people, viaf_id, capital_of, postal_code, official_website, described_by_source, head_of_government, elevation_above_sea_level, contains_the_administrative_territorial_entity, time_of_earliest_written_record, email_address, openstreetmap_relation_id, official_name, czech_registration_id, archinform_location_id, area, licence_plate_code, nkcr_aut_id, image_archive_herder_institute, library_of_congress_authority_id, historical_region, whos_on_first_id, category_for_maps, located_in_the_administrative_territorial_entity, geoshape, mapycz_id, category_for_the_view_of_the_item, bhcl_uuid, isds_id, czech_municipality_id, native_label, number_of_houses, mean_age, national_library_of_israel_j9u_id]",
        "Response": "Table: district_court_in_the_czech_republic"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO fighter_squadron (label, description, instance_of, country, part_of) VALUES ('92. Fighter Squadron', 'former Swedish Air Force unit', 'fighter squadron', 'Sweden', 'G\u00f6ta Air Wing');\nDatabase State:\n- Table: country, Columns: [label, description, commons_category, gnd_id, freebase_id, idref_id, instance_of, locator_map_image, inception, topics_main_category, office_held_by_head_of_government, babelnet_id, store_norske_leksikon_id, isni, biblioth\u00e8que_nationale_de_france_id, viaf_id, worldcat_identities_id, quora_topic_id, continent, diplomatic_relation, demonym, flag_image, short_name, category_for_maps, nese_id, brockhaus_enzyklop\u00e4die_online_id, country, museum_digital_place_id, office_held_by_head_of_state, head_of_state, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, new_york_times_topic_id, geonames_id, unicode_character, category_of_associated_people, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, coordinates_of_westernmost_point, geography_of_topic, iso_3166_1_alpha_3_code, official_name, curlie_id, mesh_descriptor_id, basic_form_of_government, musicbrainz_area_id, has_quality, coat_of_arms_image, uic_alphabetical_country_code, number_of_out_of_school_children, insee_countries_and_foreign_territories_code, commons_gallery, legislative_body, civicus_monitor_country_entry, history_of_topic, stw_thesaurus_for_economics_id, official_language, subreddit, capital, coat_of_arms, geoshape, national_library_of_israel_id_old, openstreetmap_relation_id, wipo_st3, coordinates_of_northernmost_point, coordinates_of_easternmost_point, nkcr_aut_id, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, asc_leiden_thesaurus_id, marriageable_age, le_monde_diplomatique_subject_id, category_of_people_buried_here, bbc_things_id, age_of_majority, dewey_decimal_classification, on_focus_list_of_wikimedia_project, ituisoiec_object_identifier, head_of_government, ioc_country_code, member_of, fast_id, unemployment_rate, railway_traffic_side, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, category_for_people_who_died_here, yso_id, anthem, life_expectancy, gran_enciclop\u00e8dia_catalana_id, part_of, top_level_internet_domain, area, shares_border_with, highest_point, driving_side, uic_numerical_country_code, lowest_point, iso_3166_1_numeric_code, located_in_time_zone, giant_bomb_id, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, statoids_id, library_of_congress_authority_id, iso_3166_1_alpha_2_code, motto_text, flag, coordinate_location, fips_10_4_countries_and_regions, dagens_nyheter_topic_id, described_by_source, maintained_by_wikiproject, klexikon_article_id, iab_code, loc_and_marc_vocabularies_id, central_bank, language_used, comic_vine_id, treccanis_dizionario_di_storia_id, native_label, whos_on_first_id, dr_topic_id, inaturalist_place_id, omegawiki_defined_meaning, hds_id, gs1_country_code, culture, geonlp_id, analysis_policy_observatory_term_id, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, pronunciation_audio, eurovoc_id, open_data_portal, kbpedia_id, krugosvet_article, grove_art_online_id, replaces, rkd_thesaurus_id, interlingual_index_id, jewish_encyclopedia_id_russian, bbc_news_topic_id, economy_of_topic, the_top_tens_id, yle_topic_id, uk_parliament_thesaurus_id, tasteatlas_id, sapa_id, github_topic, wordnet_31_synset_id, demographics_of_topic, ysa_id, joconde_location_id, zhihu_topic_id, schoenberg_database_of_manuscripts_place_id, the_world_factbook_country_id, national_library_of_israel_j9u_id, colon_classification, democracy_index, namuwiki_id, der_spiegel_topic_id, wikisimpsons_id, den_store_danske_id, urban_electric_transit_country_id, postimees_topic_id, online_pwn_encyclopedia_id, m49_code, pm20_geo_code, s\u00fcddeutsche_zeitung_topic_id, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, vat_rate, hashtag, located_in_or_next_to_body_of_water, gini_coefficient, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, gynopedia_id]\n- Table: place_of_birth, Columns: [label, description, instance_of, commons_category, coordinate_location, topics_main_category, freebase_id, population, image, country, located_in_the_administrative_territorial_entity]\n- Table: FighterUnits, Columns: [label, description, instance_of, country, part_of]\n- Table: administrative_territorial_entity, Columns: [label, description, category_of_associated_people, musicbrainz_area_id, viaf_id, capital, openstreetmap_relation_id, located_in_time_zone, commons_category, shares_border_with, population, geonames_id, coat_of_arms_image, freebase_id, area, topics_main_category, locator_map_image, instance_of, category_for_people_born_here, coordinate_location, inaturalist_place_id, image, country, located_in_the_administrative_territorial_entity]\n- Table: political_border, Columns: [label, description, population, viaf_id, geonames_id, musicbrainz_area_id, coat_of_arms_image, capital, geoshape, openstreetmap_relation_id, shares_border_with, flag_image, topics_main_category, locator_map_image, area, commons_category, instance_of, freebase_id, library_of_congress_authority_id, coordinate_location, country, whos_on_first_id, category_for_maps, inaturalist_place_id, national_library_of_israel_j9u_id, official_website, located_in_the_administrative_territorial_entity]\n- Table: head_of_state, Columns: [label, description, sex_or_gender, spouse, child, position_held, commons_category, library_of_congress_authority_id, viaf_id, isni, gnd_id, place_of_birth, country_of_citizenship, date_of_birth, instance_of, image, award_received, freebase_id, signature, religion_or_worldview, occupation, given_name, topics_main_category, name_in_native_language, languages_spoken_written_or_signed, fast_id, worldcat_identities_id, hrvatska_enciklopedija_id, store_norske_leksikon_id, den_store_danske_id, educated_at, munzinger_person_id, treccani_id, family_name, opensanctions_id]\n- Table: part, Columns: [label, description, quora_topic_id, has_parts, commons_category, instance_of, freebase_id, part_of, topics_main_category, gnd_id, yso_id, coordinate_location, viaf_id]",
        "Response": "Table: FighterUnits"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details) VALUES (6, 2, 'PPT', '1975-05-20 22:51:19', '1992-05-02 20:06:11', '');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Templates"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO games_competitor (id, games_id, person_id, age) VALUES (17924, 17, 13730, 18);\nDatabase State:\n- Table: person, Columns: [id, full_name, gender, height, weight]\n- Table: city, Columns: [id, city_name]\n- Table: games, Columns: [id, games_year, games_name, season]\n- Table: games_city, Columns: [games_id, city_id]\n- Table: sport, Columns: [id, sport_name]\n- Table: noc_region, Columns: [id, noc, region_name]",
        "Response": "Table: games_competitor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (name, bool) VALUES ('student755', 'neg');\nDatabase State:\n- Table: Student_Payment_Status, Columns: [name, bool]\n- Table: unemployed, Columns: [name]",
        "Response": "Table: Student_Payment_Status"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, freebase_id, inception, programming_paradigm) VALUES ('Short Code', 'one of the first higher-level languages ever developed for an electronic computer', 'programming language', '/m/0dc4km', '+1950-01-01T00:00:00Z', 'procedural programming');\nDatabase State:\n- Table: procedural_programming_language, Columns: [label, description, instance_of, freebase_id, inception, programming_paradigm]\n- Table: programming_paradigm, Columns: [label, description, freebase_id, instance_of, subclass_of, microsoft_academic_id]",
        "Response": "Table: procedural_programming_language"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Crime (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude) VALUES (11465530, 'JB460780', '10/3/2018 8:00', '018XX S KILDARE AVE', '560', 'SIDEWALK', 'FALSE', 'FALSE', 1012, 10, 24, 29, '08A', '41.85643072', '-87.73255902');\nDatabase State:\n- Table: District, Columns: [district_no, district_name, address, zip_code, commander, email, phone, fax, tty, twitter]\n- Table: Crime, Columns: [report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude]\n- Table: Community_Area, Columns: [community_area_no, community_area_name, side, population]\n- Table: Neighborhood, Columns: [neighborhood_name, community_area_no]\n- Table: Ward, Columns: [ward_no, alderman_first_name, alderman_last_name, alderman_name_suffix, ward_office_address, ward_office_zip, ward_email, ward_office_phone, ward_office_fax, city_hall_office_room, city_hall_office_phone, city_hall_office_fax, Population]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (service_id, service_type_code, service_name, service_descriptio) VALUES (3, 'Education', 'Education', 'Health');\nDatabase State:\n- Table: Parties, Columns: [party_id, payment_method_code, party_phone, party_email]\n- Table: Organization_Contact_Individuals, Columns: [individual_id, organization_id, date_contact_from, date_contact_to]\n- Table: Party_Services, Columns: [booking_id, customer_id, service_id, service_datetime, booking_made_date]\n- Table: Forms, Columns: [form_id, form_type_code, service_id, form_number, form_name, form_description]\n- Table: Addresses, Columns: [address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country]\n- Table: Services, Columns: [service_id, service_type_code, service_name, service_descriptio]",
        "Response": "Table: Services"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, doi, instance_of, title, published_in, followed_by, publication_date, volume, part_of, follows, author_name_string) VALUES ('Taboos, stowaways, and chief scientists: A brief history of women in oceanography', 'scholarly article by Katherine Lewandowski published in August 2018', '10.1130/2018.1214(03)', 'scholarly article', 'Taboos, stowaways, and chief scientists: A brief history of women in oceanography', 'Memoir / Geological Society of America', 'Katherine Greacen Nelson: Advocate for the public appreciation of earth science', '+2018-08-07T00:00:00Z', '214', 'Women and Geology: Who Are We, Where Have We Come From, and Where Are We Going?', 'How female geologists were written out of history: The micropaleontology breakthrough', 'Katherine Lewandowski');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO list (LastName) VALUES ('PINNELL', ' ROBBY', 3, 107);\nDatabase State:\n- Table: teachers, Columns: [LastName]\n- Table: list, Columns: [LastName]",
        "Response": "Table: list"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, playerID, year, stint, tmID, lgID, GP, GS, minutes, points, oRebounds, dRebounds, rebounds, assists, steals, blocks, turnovers, PF, fgAttempted, fgMade, ftAttempted, ftMade, threeAttempted, threeMade, PostGP, PostGS, PostMinutes, PostPoints, PostoRebounds, PostdRebounds, PostRebounds, PostAssists, PostSteals, PostBlocks, PostTurnovers, PostPF, PostfgAttempted, PostfgMade, PostftAttempted, PostftMade, PostthreeAttempted, PostthreeMade, note) VALUES (17585, 'richaja01', 2011, 1, 'CHA', 'NBA', 54, 54, 1591, 629, 36, 158, 194, 107, 53, 22, 60, 91, 596, 243, 69, 41, 277, 102, 5, 5, 148, 57, 4, 15, 19, 5, 6, 2, 6, 7, 53, 21, 12, 5, 27, 10, NULL);\nDatabase State:\n- Table: series_post, Columns: [id, year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L]\n- Table: draft, Columns: [id, draftYear, draftRound, draftSelection, draftOverall, tmID, firstName, lastName, suffixName, playerID, draftFrom, lgID]\n- Table: coaches, Columns: [coachID, year, tmID, lgID, stint, won, lost, post_wins, post_losses]\n- Table: player_allstar, Columns: [playerID, last_name, first_name, season_id, conference, league_id, games_played, minutes, points, o_rebounds, d_rebounds, rebounds, assists, steals, blocks, turnovers, personal_fouls, fg_attempted, fg_made, ft_attempted, ft_made, three_attempted, three_made]",
        "Response": "Table: players_teams"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO flagellar_basal_body_rod_protein_flgc (label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, biological_process, cell_component, has_parts, instance_of, refseq_protein_id, part_of) VALUES ('Flagellar basal body rod protein FlgC CA_C2164', 'microbial protein found in Clostridium acetobutylicum ATCC 824', 'Q97H49', 'Clostridium acetobutylicum ATCC 824', 'protein', 'flagellar basal body rod protein FlgC CA_C2164', 'bacterial-type flagellum-dependent cell motility', 'bacterial-type flagellum basal body', 'Flagellar basal body rod protein, N-terminal', 'protein', 'NP_348782', 'Flagellar basal-body rod protein FlgC');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: flagellar_basal_body_rod_protein_flgc"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Player_ID, Player, Team, Age, Position, School_ID) VALUES (9, 'Aaron Crow *', 'Washington Nationals', 16, 'Right-handed pitcher', 1);\nDatabase State:\n- Table: player, Columns: [Player_ID, Player, Team, Age, Position, School_ID]\n- Table: school_performance, Columns: [School_Id, School_Year, Class_A, Class_AA]\n- Table: school, Columns: [School_ID, School, Location, Enrollment, Founded, Denomination, Boys_or_Girls, Day_or_Boarding, Year_Entered_Competition, School_Colors]",
        "Response": "Table: player"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO flagellar_basal_body_rod_protein_flgc (label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, biological_process, cell_component, has_parts, instance_of, refseq_protein_id, part_of) VALUES ('Flagellar basal body rod protein FlgC SMc03028', 'microbial protein found in Sinorhizobium meliloti 1021', 'Q52944', 'Sinorhizobium meliloti 1021', 'protein', 'flagellar basal body rod protein FlgC SMc03028', 'bacterial-type flagellum-dependent cell motility', 'bacterial-type flagellum basal body', 'Flagellar basal body rod protein, conserved site', 'protein', 'NP_384766', 'Flagellar basal-body rod protein FlgC');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: Flagellar_Basal_Body_Rod_Prote, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, biological_process, cell_component, has_parts, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: Flagellar_Basal_Body_Rod_Prote"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id_restaurant, street_num, street_name, city) VALUES (2469, 6970, 'mckinley ave', 'sebastopol');\nDatabase State:\n- Table: geographic, Columns: [city, county, region]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, doi, instance_of, title, published_in, followed_by, publication_date, volume, part_of, follows, author_name_string) VALUES ('How we look and what we see: Twenty years of women in GSA Today', 'nan', '10.1130/2018.1214(08)', 'scholarly article', 'How we look and what we see: Twenty years of women in GSA Today', 'Memoir / Geological Society of America', 'Social media hashtags and campaigns showcasing female geoscientist selfies and stories', '+2018-08-07T00:00:00Z', '214', 'nan', 'Hollywood representations of women in geology: Women geoscientists in film (1986\u20132016)', 'Mindy A. Kimball');\nDatabase State:\n- Table: followed_by, Columns: [label, description, doi, instance_of, title, published_in, follows, followed_by, volume, publication_date, part_of, author_name_string]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Financial_Transactions (transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details) VALUES (6, 958, 12, 6, 'Refund', '2018-03-24 11:48:28', 1967.75, NULL, NULL);\nDatabase State:\n- Table: Customers, Columns: [customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details]\n- Table: Payment_History, Columns: [transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details]\n- Table: Accounts, Columns: [account_id, customer_id, account_name, other_account_details]\n- Table: Customers_Cards, Columns: [card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details]",
        "Response": "Table: Payment_History"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, instance_of, genomic_start, genomic_end, ncbi_locus_tag) VALUES ('glucose-6-phosphate 1-dehydrogenase KVU_1124', 'microbial gene found in Ketogulonicigenium vulgare WSH-001', '12373995', 'protein-coding gene', 'Glucose-6-phosphate 1-dehydrogenase KVU_1124', 'Ketogulonicigenium vulgare WSH-001', 'reverse strand', 'gene', '1180608', '1182056', 'KVU_1124');\nDatabase State:\n- Table: glucose_6_phosphate_dehydrogenase_c_terminal_domain_protein_family, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO journalist (journalist_ID, Name, Nationality, Age, Years_working) VALUES (5, 'Fred Chandler', 'England', '34', 6);\nDatabase State:\n- Table: news_report, Columns: [journalist_ID, Event_ID, Work_Type]\n- Table: journalist, Columns: [journalist_ID, Name, Nationality, Age, Years_working]",
        "Response": "Table: journalist"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Code) VALUES (56475, 'TAA', '07-FEB-10', '08-FEB-10', 93.75, 'KLIGER', 'TRICIA', 1, 0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Reservations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (GeneID1, GeneID2, Type, Expression_Corr) VALUES ('G235597', 'G235165', 'Genetic-Physical', 0.6893899180000000459);\nDatabase State:\n- Table: Classification, Columns: [GeneID, Localization]\n- Table: Interactions, Columns: [GeneID1, GeneID2, Type, Expression_Corr]",
        "Response": "Table: Interactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, official_website, wikidata_property) VALUES ('Professorenkatalog der Universit\u00e4t Leipzig', 'database of university professors at the University of Leipzig', 'database', 'https://www.uni-leipzig.de/unigeschichte/professorenkatalog/', 'Sirius');\nDatabase State:\n- Table: wikidata_property, Columns: [label, description, image, instance_of, freebase_id, commons_category]\n- Table: Professors, Columns: [label, description, instance_of, official_website, wikidata_property]",
        "Response": "Table: Professors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1009, 'Tai', 'Eric', 19, 'M', 600, 2192, 'YYZ');\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO orthology (label, description, entrez_gene_id, subclass_of, ensembl_gene_id, homologene_id, chromosome, found_in_taxon, refseq_rna_id, ensembl_transcript_id, ortholog, exact_match, genomic_end, strand_orientation, genomic_start, instance_of, cytogenetic_location, expressed_in) VALUES ('Dnah3', 'protein-coding gene in the species Mus musculus', '381917.0', 'protein-coding gene', 'ENSMUSG00000052273', '19674.0', 'mouse chromosome 7', 'house mouse', 'NM_001370806', 'ENSMUST00000046993', 'DNAH3', 'http://identifiers.org/ncbigene/381917', '119694503.0', 'reverse strand', '119521894.0', 'gene', '7|7 F2', 'spermatid');\nDatabase State:\n- Table: cellular_component, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]\n- Table: Genes, Columns: [label, description, entrez_gene_id, subclass_of, ensembl_gene_id, homologene_id, chromosome, found_in_taxon, refseq_rna_id, ensembl_transcript_id, ortholog, exact_match, genomic_end, strand_orientation, genomic_start, instance_of, cytogenetic_location, expressed_in]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Staff (staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff) VALUES (2, 3, 'santos45', 'Camylle', 'Icie', 'Weissnat', '2015-08-01 13:22:43', '2016-06-06 08:54:28', '2018-03-10 15:25:00');\nDatabase State:\n- Table: Staff, Columns: [staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff]\n- Table: Customers, Columns: [customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number, cell_mobile_phone_number]\n- Table: Lessons, Columns: [lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price]\n- Table: Customer_Payments, Columns: [customer_id, datetime_payment, payment_method_code, amount_payment]\n- Table: Vehicles, Columns: [vehicle_id, vehicle_details]\n- Table: Addresses, Columns: [address_id, line_1_number_building, city, zip_postcode, state_province_county, country]",
        "Response": "Table: Staff"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO bridge (architect_id, id, name, location, length_meters, length_feet) VALUES (2, 2, 'Landscape Arch', 'Arches National Park , Utah , USA', 88.0, 290.0);\nDatabase State:\n- Table: architect, Columns: [id, name, nationality, gender]\n- Table: bridge, Columns: [architect_id, id, name, location, length_meters, length_feet]",
        "Response": "Table: bridge"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO titleauthor (au_id, title_id, au_ord, royaltyper) VALUES ('648-92-1872', 'TC4203', 1, 100);\nDatabase State:\n- Table: titleauthor, Columns: [au_id, title_id, au_ord, royaltyper]",
        "Response": "Table: titleauthor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Visitors (Tourist_ID, Tourist_Details) VALUES (779, 'Wayne');\nDatabase State:\n- Table: Theme_Parks, Columns: [Theme_Park_ID, Theme_Park_Details]\n- Table: Features, Columns: [Feature_ID, Feature_Details]\n- Table: Staff, Columns: [Staff_ID, Tourist_Attraction_ID, Name, Other_Details]\n- Table: Tourist_Attractions, Columns: [Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details]\n- Table: Photos, Columns: [Photo_ID, Tourist_Attraction_ID, Name, Description, Filename, Other_Details]\n- Table: Shops, Columns: [Shop_ID, Shop_Details]\n- Table: Royal_Family, Columns: [Royal_Family_ID, Royal_Family_Details]\n- Table: Tourist_Attraction_Features, Columns: [Tourist_Attraction_ID, Feature_ID]\n- Table: Ref_Attraction_Types, Columns: [Attraction_Type_Code, Attraction_Type_Description]\n- Table: Visitors, Columns: [Tourist_ID, Tourist_Details]\n- Table: Street_Markets, Columns: [Market_ID, Market_Details]\n- Table: Hotels, Columns: [hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details]\n- Table: Ref_Hotel_Star_Ratings, Columns: [star_rating_code, star_rating_description]",
        "Response": "Table: Visitors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, rfc_id, title, language_of_work_or_name, publisher, publication_date, doi, author_name_string, number_of_pages, full_work_available_at_url, dblp_publication_id) VALUES ('RFC 3755: Legacy Resolver Compatibility for Delegation Signer (DS)', 'request for comments publication', 'Request for Comments', '3755', 'Legacy Resolver Compatibility for Delegation Signer (DS)', 'English', 'Internet Engineering Task Force', '+2004-05-01T00:00:00Z', '10.17487/RFC3755', 'S. Weiler', 9.0, 'https://tools.ietf.org/html/rfc3755', 'journals/rfc/rfc3755');\nDatabase State:\n- Table: resource_record, Columns: [label, description, subclass_of, described_by_source, series_ordinal, short_name]",
        "Response": "Table: source_of_information"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO coastal_towers_in_salento (label, description, country, image, instance_of, coordinate_location, located_in_the_administrative_territorial_entity, part_of, follows, followed_by) VALUES ('Torre Montelungo', 'tower', 'Italy', 'nan', 'tower', 'nan', 'nan', 'Coastal towers in Salento', 'Torre di Porto Novaglie', 'Torre Santa Maria di Leuca');\nDatabase State:\n- Table: follows, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, part_of, follows, followed_by, coordinate_location]\n- Table: coastal_towers_in_salento, Columns: [label, description, country, image, instance_of, coordinate_location, located_in_the_administrative_territorial_entity, part_of, follows, followed_by]\n- Table: administrative_territorial_entity, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, postal_code, local_dialing_code, located_in_time_zone, image, coordinate_location, country, instance_of, freebase_id, geonames_id, elevation_above_sea_level, whos_on_first_id]\n- Table: followed_by, Columns: [label, description, country, image, instance_of, part_of, located_in_the_administrative_territorial_entity, follows, followed_by, coordinate_location]",
        "Response": "Table: coastal_towers_in_salento"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO followed_by (label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, follows, followed_by, competition_class, has_parts) VALUES ('2015 Ontario Badminton Championships', 'badminton championships', 'Ontario Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'Canada', '+2015-00-00T00:00:00Z', '2014 Ontario Badminton Championships', '2016 Ontario Badminton Championships', 'national championship', '2015 Ontario Badminton Championships \u2013 Men''s singles');\nDatabase State:\n- Table: Ontario_Badminton_Championships_History, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, follows, followed_by, competition_class, has_parts]",
        "Response": "Table: Ontario_Badminton_Championships_History"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO gtp_cyclohydrolase_1_type_2_nif3 (label, description, encoded_by, uniprot_protein_id, found_in_taxon, part_of, instance_of, subclass_of, refseq_protein_id) VALUES ('Putative hydrolase-oxidase NRG857_03170', 'microbial protein found in Escherichia coli O83:H1 str. NRG 857C', 'putative hydrolase-oxidase NRG857_03170', 'A0A0H3EEN4', 'Escherichia coli O83:H1 str. NRG 857C', 'GTP cyclohydrolase 1 type 2/Nif3', 'protein', 'protein', 'YP_006118999');\nDatabase State:\n- Table: gtp_cyclohydrolase_1_type_2_nif3, Columns: [label, description, encoded_by, uniprot_protein_id, found_in_taxon, part_of, instance_of, subclass_of, refseq_protein_id]",
        "Response": "Table: gtp_cyclohydrolase_1_type_2_nif3"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit) VALUES (7027, 'CA-2014-117394', '2016-09-04', '2016-09-10', 'Standard Class', 'MM-17920', 'East', 'TEC-AC-10000199', 19.03999999999999915, 4, 0.2000000000000000111, -1.427999999999999937);\nDatabase State:\n- Table: central_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: people, Columns: [Customer_ID, Customer_Name, Segment, Country, City, State, Postal_Code, Region]\n- Table: East_Superstore_Orders, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]",
        "Response": "Table: East_Superstore_Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, image, taxon_name, taxon_rank, freebase_id, tropicos_id, ipni_plant_id, parent_taxon, instance_of, ncbi_taxonomy_id, flora_of_china_id, grin_url, gbif_taxon_id, taxon_common_name, plants_of_the_world_online_id, irmng_id, topics_main_category, inaturalist_taxon_id, encyclopedia_of_life_id, described_by_source, world_flora_online_id, open_tree_of_life_id, catalogue_of_life_id) VALUES ('Zingiber', 'genus of plants', 'Zingiber', 'Koeh-146-no text.jpg', 'Zingiber', 'genus', '/m/02l4ht', '50113236.0', '327297-2', 'Zingiberaceae', 'taxon', '4650.0', '135325.0', 'https://npgsweb.ars-grin.gov/gringlobal/taxonomygenus.aspx?id=13047', '2756693.0', 'ginger', 'urn:lsid:ipni.org:names:327297-2', '1064460.0', 'Category:Zingiber', '122972.0', '29233.0', 'Brockhaus and Efron Encyclopedic Dictionary', 'wfo-4000041232', '730913.0', '8W4TG');\nDatabase State:\n- Table: natural_product, Columns: [label, description, instance_of, natural_product_of_taxon, kegg_id, pubchem_substance_id_sid, subclass_of, part_of]\n- Table: taxon, Columns: [label, description, commons_category, image, taxon_name, taxon_rank, freebase_id, tropicos_id, ipni_plant_id, parent_taxon, instance_of, ncbi_taxonomy_id, flora_of_china_id, grin_url, gbif_taxon_id, taxon_common_name, plants_of_the_world_online_id, irmng_id, topics_main_category, inaturalist_taxon_id, encyclopedia_of_life_id, described_by_source, world_flora_online_id, open_tree_of_life_id, catalogue_of_life_id]",
        "Response": "Table: taxon"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost) VALUES ('SO - 0003720', 'Distributor', 'WARE-UHY1004', '5/15/19', '7/31/19', '8/20/19', '8/26/19', 'USD', 23, 11, 215, 12, 2, 0.07499999999999999723, '2,345.00', '1,664.95');\nDatabase State:\n- Table: Products, Columns: [ProductID, Product_Name]\n- Table: Customers, Columns: [CustomerID, Customer_Names]\n- Table: Sales_Orders, Columns: [OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost]\n- Table: Sales_Team, Columns: [SalesTeamID, Sales_Team, Region]\n- Table: Store_Locations, Columns: [StoreID, City_Name, County, StateCode, State, Type, Latitude, Longitude, AreaCode, Population, Household_Income, Median_Income, Land_Area, Water_Area, Time_Zone]",
        "Response": "Table: Sales_Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO natural_product (label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number) VALUES ('Bordetella pertussis Tohama I', 'bacterial strain', 'strain', 'Bordetella pertussis Tohama I', 'Bordetella pertussis', '257313', 'Gram-negative bacteria', 'GCA_000195715.1');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, instance_of, ncbi_locus_tag, genomic_end, strand_orientation, genomic_start]\n- Table: era_type_guanine_nucleotide_binding_g_domain_protein_family, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: natural_product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO events (Date_received, Product, Sub_product, Issue, Sub_issue, Consumer_complaint_narrative, Tags, Consumer_consent_provided?, Submitted_via, Date_sent_to_company, Company_response_to_consumer, Timely_response?, Consumer_disputed?, Complaint_ID, Client_ID) VALUES ('2015-07-09', 'Bank account or service', 'Checking account', 'Problems caused by my funds being low', NULL, NULL, NULL, 'Consent not provided', 'Web', '2015-07-09', 'Closed with monetary relief', 'Yes', 'No', 'CR1459361', 'C00005445');\nDatabase State:\n- Table: district, Columns: [district_id, city, state_abbrev, division]\n- Table: events, Columns: [Date_received, Product, Sub_product, Issue, Sub_issue, Consumer_complaint_narrative, Tags, Consumer_consent_provided?, Submitted_via, Date_sent_to_company, Company_response_to_consumer, Timely_response?, Consumer_disputed?, Complaint_ID, Client_ID]\n- Table: state, Columns: [StateCode, State, Region]",
        "Response": "Table: events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship) VALUES (1, 'Liliane Bettencourt', 1944.0, 30.0, 'France');\nDatabase State:\n- Table: song, Columns: [Song_ID, Title, Singer_ID, Sales, Highest_Position]\n- Table: Wealthy_Singers, Columns: [Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship]",
        "Response": "Table: Wealthy_Singers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber) VALUES (10273, 'S18_3259', 47, 87.73000000000000397, 15);\nDatabase State:\n- Table: orderdetails, Columns: [orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber]\n- Table: products, Columns: [productCode, productName, productLine, productScale, productVendor, productDescription, quantityInStock, buyPrice, MSRP]\n- Table: employees, Columns: [employeeNumber, lastName, firstName, extension, email, officeCode, reportsTo, jobTitle]\n- Table: customers, Columns: [customerNumber, customerName, contactLastName, contactFirstName, phone, addressLine1, addressLine2, city, state, postalCode, country, salesRepEmployeeNumber, creditLimit]\n- Table: offices, Columns: [officeCode, city, phone, addressLine1, addressLine2, state, country, postalCode, territory]",
        "Response": "Table: orderdetails"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, applies_to_jurisdiction, part_of, country, follows, instance_of, austlii_id, followed_by) VALUES ('Section 54 of the Constitution of Australia', 'section of The Commonwealth of Australia Constitution Act 1900', 'Australia', 'Constitution of Australia', 'Australia', 'Section 53 of the Constitution of Australia', 'law', 'au/legis/cth/consol_act/coaca430/s54', 'Section 55 of the Constitution of Australia');\nDatabase State:\n- Table: constitution_of_australia, Columns: [label, description, country, instance_of, part_of, applies_to_jurisdiction, follows, followed_by, austlii_id]\n- Table: followed_by, Columns: [label, description, applies_to_jurisdiction, part_of, country, follows, instance_of, austlii_id, followed_by]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO followed_by (label, description, applies_to_jurisdiction, part_of, country, follows, instance_of, austlii_id, followed_by) VALUES ('Section 6 of the Constitution of Australia', 'nan', 'Australia', 'Constitution of Australia', 'Australia', 'Section 5 of the Constitution of Australia', 'article of constitution', 'au/legis/cth/consol_act/coaca430/xx6', 'Section 7 of the Constitution of Australia');\nDatabase State:\n- Table: AustralianConstitutionSections, Columns: [label, description, applies_to_jurisdiction, part_of, country, follows, instance_of, austlii_id, followed_by]\n- Table: constitution_of_australia, Columns: [label, description, country, instance_of, part_of, applies_to_jurisdiction, follows, followed_by, austlii_id]",
        "Response": "Table: AustralianConstitutionSections"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, found_in_taxon, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('hypothetical protein p1ECUMN_0042', 'microbial gene found in Escherichia coli UMN026', '7144333', 'Escherichia coli UMN026', 'gene', 'Hypothetical protein p1ECUMN_0042', 'p1ECUMN_0042', 'gene', '36068', 'reverse strand', '35538');\nDatabase State:\n- Table: taxon, Columns: [label, description, taxon_name, taxon_rank, instance_of, parent_taxon, ncbi_taxonomy_id, gbif_taxon_id, encyclopedia_of_life_id, itis_tsn, bacdive_id, gram_staining, mesh_descriptor_id, lpsn_url, microsoft_academic_id, freebase_id, openalex_id, catalogue_of_life_id, irmng_id]\n- Table: natural_product, Columns: [label, description, taxon_name, instance_of, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: periplasmic_metal_binding_protein_tp34_type_superfamily, Columns: [label, description, subclass_of, uniprot_protein_id, found_in_taxon, encoded_by, instance_of, refseq_protein_id, part_of]\n- Table: Genes, Columns: [label, description, entrez_gene_id, found_in_taxon, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]\n- Table: encodes, Columns: [label, description, subclass_of, uniprot_protein_id, found_in_taxon, encoded_by, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO adjacent_station (label, description, commons_category, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, image, date_of_official_opening, historic_county, state_of_use, transport_network, connecting_service, adjacent_station) VALUES ('Imperial War Museum tram stop', 'Manchester Metrolink tram stop', 'nan', 'United Kingdom', '53.4688', 'Manchester Metrolink tram stop', 'Trafford', 'nan', 'nan', 'Lancashire', 'in use', 'Manchester Metrolink', 'Trafford Centre to Cornbrook', 'Wharfside tram stop');\nDatabase State:\n- Table: Metrolink_Stations, Columns: [label, description, commons_category, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, image, date_of_official_opening, historic_county, state_of_use, transport_network, connecting_service, adjacent_station]",
        "Response": "Table: Metrolink_Stations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO DEPARTMENT (DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION) VALUES ('BIOL', 'Biology', 'A&SCI', 387, 'AAK 230, Box 415', '4117');\nDatabase State:\n- Table: ENROLL, Columns: [CLASS_CODE, STU_NUM, ENROLL_GRADE]\n- Table: STUDENT, Columns: [STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]\n- Table: PROFESSOR, Columns: [EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]\n- Table: DEPARTMENT, Columns: [DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]\n- Table: CLASS, Columns: [CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]",
        "Response": "Table: DEPARTMENT"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, ensembl_gene_id, homologene_id, chromosome, found_in_taxon, refseq_rna_id, ensembl_transcript_id, encodes, ortholog, exact_match, strand_orientation, instance_of, cytogenetic_location, genomic_start, genomic_end, expressed_in) VALUES ('Slc35b1', 'protein-coding gene in the species Rattus norvegicus', '287642.0', 'protein-coding gene', 'ENSRNOG00000004510', '4252.0', 'rat chromosome 10', 'brown rat', 'NM_199081', 'ENSRNOT00000006179', 'Solute carrier family 35, member B1', 'Slc35b1', 'http://identifiers.org/ncbigene/287642', 'forward strand', 'gene', '10q26', '83201311', '83208605', 'pancreas');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: orthology"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats) VALUES (8, 1934, 2546.90000000000009, 2197.300000000000182, 5277.5, 156.5, 46.70000000000000284, 2518.0, 4236.699999999999819, 2197.09999999999991);\nDatabase State:\n- Table: competition_record, Columns: [Competition_ID, Farm_ID, Rank]\n- Table: farm_competition, Columns: [Competition_ID, Year, Theme, Host_city_ID, Hosts]\n- Table: city, Columns: [City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking]\n- Table: farm, Columns: [Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats]",
        "Response": "Table: farm"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Actor_ID, Name, Musical_ID, Character, Duration, age) VALUES (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992\u2014', 22);\nDatabase State:\n- Table: actor, Columns: [Actor_ID, Name, Musical_ID, Character, Duration, age]",
        "Response": "Table: actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO catalogus_professorum (label, description, instance_of, official_website, wikidata_property) VALUES ('Catalogus Professorum (TU Berlin)', 'biographical database of university professors at the Technical University of Berlin', 'catalogus professorum', 'https://cp.tu-berlin.de/', 'Penna in Teverina');\nDatabase State:\n- Table: wikidata_property, Columns: [label, description, image, instance_of, freebase_id, commons_category]\n- Table: catalogus_professorum, Columns: [label, description, instance_of, official_website, wikidata_property]",
        "Response": "Table: catalogus_professorum"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO MenuItem (id, menu_page_id, price, high_price, dish_id, created_at, updated_at, xpos, ypos) VALUES (405946, 35146, 0.25, NULL, 4658, '2011-06-27 23:17:13 UTC', '2011-06-27 23:17:13 UTC', 0.7571430000000000104, 0.4161199999999999899);\nDatabase State:\n- Table: MenuItem, Columns: [id, menu_page_id, price, high_price, dish_id, created_at, updated_at, xpos, ypos]",
        "Response": "Table: MenuItem"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, image, instance_of, freebase_id, commons_category) VALUES ('Rough Night in Jericho', '1967 western film by Arnold Laven', 'nan', 'film', '/m/03ynpv0', 'nan');\nDatabase State:\n- Table: wikidata_property, Columns: [label, description, image, instance_of, freebase_id, commons_category]\n- Table: catalogus_professorum, Columns: [label, description, instance_of, official_website, wikidata_property]",
        "Response": "Table: wikidata_property"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO head_of_government (label, description, place_of_birth, date_of_birth, country_of_citizenship, instance_of, sex_or_gender, position_held, member_of_political_party, image, occupation, given_name, whos_who_in_france_biography_id, twitter_username, languages_spoken_written_or_signed, google_knowledge_graph_id, social_media_followers) VALUES ('J\u00e9r\u00f4me Coumet', 'French politician', 'Paris', '+1967-01-22T00:00:00Z', 'France', 'human', 'male', 'arrondissement mayor', 'Socialist Party', 'J\u00e9r\u00f4me Coumet.jpg', 'politician', 'J\u00e9r\u00f4me', 'jerome-coumet_64091', 'jerome_coumet', 'French', '/g/121v2cfx', 12904.0);\nDatabase State:\n- Table: category_for_films_shot_at_this_location, Columns: [label, description, instance_of, category_combines_topics, category_contains]\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, commons_category, located_in_the_administrative_territorial_entity, coordinate_location, shares_border_with, country, postal_code, insee_municipality_code, topics_main_category, page_banner, freebase_id, inception, replaces, geonames_id, category_for_films_shot_at_this_location, locator_map_image, image, official_website, population, head_of_government, openstreetmap_relation_id, gnd_id, biblioth\u00e8que_nationale_de_france_id, area, twitter_username, viaf_id, archinform_location_id, isni, annual_number_of_weddings, coat_of_arms_image, contains_the_administrative_territorial_entity, category_for_maps, worldcat_identities_id, gadm_id, detail_map, social_media_followers, facebook_id, factgrid_item_id]\n- Table: given_name, Columns: [label, description, instance_of, said_to_be_the_same_as, language_of_work_or_name, native_label, writing_system, nominis_given_name_id, commons_category, caverphone]\n- Table: city_gates_of_paris, Columns: [label, description, commons_category, coordinate_location, country, instance_of, part_of, located_in_the_administrative_territorial_entity, google_knowledge_graph_id]",
        "Response": "Table: head_of_government"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO player (Player_ID, Player, Team, Age, Position, School_ID) VALUES (7, 'Yonder Alonso', 'Cincinnati Reds', 15, 'First baseman', 1);\nDatabase State:\n- Table: Players, Columns: [Player_ID, Player, Team, Age, Position, School_ID]",
        "Response": "Table: Players"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops) VALUES (5, 2000.0, 'Chevrolet', 38, 24);\nDatabase State:\n- Table: Manufacturers, Columns: [Manufacturer_ID, Open_Year, Name, Num_of_Factories, Num_of_Shops]",
        "Response": "Table: Manufacturers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, commons_category, numeric_value, unicode_character, kit_linked_open_numbers_id, prime_factor, pronunciation_audio, number_of_decimal_digits, code, omegawiki_defined_meaning, babelnet_id) VALUES ('30', 'natural number', 'natural number', '30 (number)', 30.0, '\u325a', '30', '2.0', 'Nl-dertig.ogg', 2.0, '\u0be9\u0bf0', '7017.0', '00000104n');\nDatabase State:\n- Table: prime_factor, Columns: [label, description, instance_of, commons_category, numeric_value, unicode_character, kit_linked_open_numbers_id, prime_factor, encyclop\u00e6dia_britannica_online_id, label_in_sign_language, pronunciation_audio, number_of_decimal_digits, code, spoken_text_audio, code_image, omegawiki_defined_meaning, babelnet_id, personality_database_profile_id, factgrid_item_id, pixiv_encyclopedia_id, image]",
        "Response": "Table: radix"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1023, 'Shieber', 'David', 20, 'M', 520, 8722, 'NYC');\nDatabase State:\n- Table: Dorm_amenity, Columns: [amenid, amenity_name]\n- Table: Dorm, Columns: [dormid, dorm_name, student_capacity, gender]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (region_id, game_platform_id, num_sales) VALUES (4, 12105, 0.02999999999999999889);\nDatabase State:\n- Table: publisher, Columns: [id, publisher_name]\n- Table: genre, Columns: [id, genre_name]\n- Table: game_publisher, Columns: [id, game_id, publisher_id]\n- Table: region, Columns: [id, region_name]",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO death (caused_by_ship_id, id, note, killed, injured) VALUES (5, 12, 'Bokaro, Jharkhand', 14, 0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: death"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SeasonStatus (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS) VALUES (9480, '2003-2004', 'Univ. of Notre Dame', 'NCAA', 'Regular Season', 39, 2, 10, 12, 28, 7);\nDatabase State:\n- Table: weight_info, Columns: [weight_id, weight_in_kg, weight_in_lbs]\n- Table: PlayerInfo, Columns: [ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0]\n- Table: height_info, Columns: [height_id, height_in_cm, height_in_inch]",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO biological_process (label, description, gene_ontology_id, subclass_of, exact_match, instance_of) VALUES ('3''-phosphoadenosine 5''-phosphosulfate transport', 'The directed movement of 3''-phosphoadenosine 5''-phosphosulfate, a naturally occurring mixed anhydride synthesized from adenosine 5''-phosphosulfate, into, out of or within a cell, or between cells, by means of some agent such as a transporter or pore.', 'GO:0046963', 'purine ribonucleotide transport', 'http://purl.obolibrary.org/obo/GO_0046963', 'biological process');\nDatabase State:\n- Table: biological_process, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]",
        "Response": "Table: biological_process"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO national_parks_of_israel (label, description, instance_of, commons_category, coordinate_location, image, located_in_the_administrative_territorial_entity, geonames_id, country) VALUES ('Qumran', 'archaeological site in the Palestinian Authority, West Bank', 'archaeological site', 'Qumran', '31.74105', 'Kumeran4.jpg', 'Kalya', '282303.0', 'State of Palestine');\nDatabase State:\n- Table: National_Parks, Columns: [label, description, instance_of, commons_category, coordinate_location, image, located_in_the_administrative_territorial_entity, geonames_id, country]",
        "Response": "Table: National_Parks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber) VALUES (10145, 'S10_1678', 45, 76.56000000000000227, 6);\nDatabase State:\n- Table: productlines, Columns: [productLine, textDescription, htmlDescription, image]\n- Table: orderdetails, Columns: [orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber]",
        "Response": "Table: orderdetails"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO county_public_safety (County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location) VALUES (2, 'Burnaby', 204320, 253, 808, 100, 123.0, 'RCMP', 'East');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: county_public_safety"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, point_in_time, sport, followed_by, follows, winner, location, google_knowledge_graph_id, country, part_of, number_of_participants, ijf_competition_id, judoinside_competition_id, short_name) VALUES ('2017 World Judo Championships \u2013 mixed team', 'judo competition', 'World Team Judo Championships', '+2017-09-03T00:00:00Z', 'judo', '2018 World Judo Championships \u2013 mixed team', '2015 World Judo Championships \u2013 men''s team', 'Japan', 'L\u00e1szl\u00f3 Papp Budapest Sports Arena', 'nan', 'Hungary', '2017 World Judo Championships', 227.0, '1559', '1988', 'Budapest 2017');\nDatabase State:\n- Table: place_of_birth, Columns: [label, description, commons_category, country, coordinate_location, page_banner, freebase_id, twinned_administrative_body, geonames_id, instance_of, image, quora_topic_id, topics_main_category, located_in_the_administrative_territorial_entity, located_in_time_zone, population, whos_on_first_id, native_label, national_library_of_israel_j9u_id, flag_image, coat_of_arms_image, gnd_id, viaf_id, musicbrainz_area_id, head_of_government, official_website, category_of_associated_people, shares_border_with, area, library_of_congress_authority_id, archinform_location_id, locator_map_image, worldcat_identities_id]\n- Table: administrative_territorial_entity, Columns: [label, description, population, viaf_id, geonames_id, gnd_id, isni, country, musicbrainz_area_id, capital, geoshape, openstreetmap_relation_id, shares_border_with, topics_main_category, locator_map_image, area, page_banner, commons_category, instance_of, category_for_people_born_here, located_in_time_zone, contains_the_administrative_territorial_entity, freebase_id, library_of_congress_authority_id, coordinate_location, category_for_maps, worldcat_identities_id, inaturalist_place_id, national_library_of_israel_j9u_id, head_of_government, image, named_after, located_in_the_administrative_territorial_entity]\n- Table: political_border, Columns: [label, description, shares_border_with, commons_category, country, flag_image, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, instance_of, freebase_id, locator_map_image, geonames_id, musicbrainz_area_id, openstreetmap_relation_id, official_website, population, area, located_in_time_zone, coat_of_arms_image, whos_on_first_id, inaturalist_place_id, image, viaf_id, worldcat_identities_id]\n- Table: event, Columns: [label, description, instance_of, part_of, sport, competition_class, follows, number_of_participants, point_in_time, winner, olympedia_event_id, location, followed_by, country]\n- Table: 2019_world_judo_championships, Columns: [label, description, instance_of, part_of, sport, follows, winner, location, google_knowledge_graph_id, followed_by, country, point_in_time, ijf_competition_id, judoinside_competition_id, short_name, number_of_participants]\n- Table: capital_city, Columns: [label, description, twinned_administrative_body, page_banner, country, instance_of, flag_image, coat_of_arms_image, commons_category, postal_code, located_in_time_zone, coordinate_location, located_in_the_administrative_territorial_entity, gnd_id, topics_main_category, viaf_id, commons_gallery, musicbrainz_area_id, freebase_id, population, image, category_for_people_who_died_here, geonames_id, head_of_government, official_website, category_of_associated_people, described_by_source, elevation_above_sea_level, openstreetmap_relation_id, shares_border_with, located_in_or_next_to_body_of_water, encyclop\u00e6dia_britannica_online_id, area, library_of_congress_authority_id, quora_topic_id, official_name, native_label, inception, great_russian_encyclopedia_online_id, archinform_location_id, nkcr_aut_id, locator_map_image, getty_thesaurus_of_geographic_names_id, whos_on_first_id, gran_enciclop\u00e8dia_catalana_id, category_for_maps, worldcat_identities_id, inaturalist_place_id, den_store_danske_id, store_norske_leksikon_id, social_media_followers, national_library_of_israel_j9u_id, online_pwn_encyclopedia_id, twitter_username, nese_id, capital_of, office_held_by_head_of_government]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, ensembl_gene_id, ensembl_transcript_id, hgnc_gene_symbol, hgnc_id, homologene_id, refseq_rna_id, ortholog, image, encodes, found_in_taxon, exact_match, strand_orientation, genomic_end, genomic_start, chromosome, gene_atlas_image, instance_of, cytogenetic_location, omim_id, expressed_in, civic_gene_id, genetic_association) VALUES ('MLH1', 'protein-coding gene in the species Homo sapiens', '4292', 'protein-coding gene', 'ENSG00000076242', 'nan', 'MLH1', '7127', '208', 'XM_011533727', 'Mlh1', 'nan', 'MutL homolog 1', 'Homo sapiens', 'http://identifiers.org/ncbigene/4292', 'nan', 'nan', 'nan', 'nan', 'PBB GE MLH1 202520 s at fs.png', 'gene', 'nan', '120436', 'nan', '3532', 'Mismatch repair cancer syndrome');\nDatabase State:\n- Table: encodes, Columns: [label, description, ensembl_protein_id, found_in_taxon, uniprot_protein_id, encoded_by, refseq_protein_id, biological_process, molecular_function, cell_component, has_parts, instance_of, part_of]\n- Table: inframe_deletion, Columns: [label, description, biological_variant_of, chromosome, civic_variant_id, genomic_start, genomic_end, instance_of]\n- Table: orthology, Columns: [label, description, entrez_gene_id, subclass_of, ensembl_gene_id, homologene_id, chromosome, found_in_taxon, refseq_rna_id, ensembl_transcript_id, encodes, mouse_genome_informatics_id, ortholog, exact_match, mgi_gene_symbol, strand_orientation, instance_of, cytogenetic_location, genomic_start, genomic_end, expressed_in]\n- Table: biological_variant_of, Columns: [label, description, entrez_gene_id, subclass_of, ensembl_gene_id, ensembl_transcript_id, hgnc_gene_symbol, hgnc_id, homologene_id, refseq_rna_id, ortholog, image, encodes, found_in_taxon, exact_match, strand_orientation, genomic_end, genomic_start, chromosome, gene_atlas_image, instance_of, cytogenetic_location, omim_id, expressed_in, civic_gene_id, genetic_association]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, ensembl_gene_id, homologene_id, chromosome, found_in_taxon, refseq_rna_id, ensembl_transcript_id, encodes, mouse_genome_informatics_id, ortholog, exact_match, mgi_gene_symbol, strand_orientation, instance_of, cytogenetic_location, genomic_start, genomic_end, expressed_in]",
        "Response": "Table: biological_variant_of"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO film_market_estimation (Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year) VALUES (7, 53.0, 53.0, 4, 'Mass suicide', 1, 1994);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: film_market_estimation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Airline) VALUES (12, 1231, ' CVO', ' ANC');\nDatabase State:\n- Table: airports, Columns: [City]\n- Table: airlines, Columns: [uid]",
        "Response": "Table: flights"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO MenuItem (id, menu_page_id, price, high_price, dish_id, created_at, updated_at, xpos, ypos) VALUES (1290128, 68647, 1.0, NULL, 2334, '2013-05-18 15:42:07 UTC', '2013-05-18 15:42:07 UTC', 0.4253330000000000166, 0.6257610000000000116);\nDatabase State:\n- Table: Menu, Columns: [id, name, sponsor, event, venue, place, physical_description, occasion, notes, call_number, keywords, language, date, location, location_type, currency, currency_symbol, status, page_count, dish_count]\n- Table: Dish, Columns: [id, name, description, menus_appeared, times_appeared, first_appeared, last_appeared, lowest_price, highest_price]\n- Table: MenuPage, Columns: [id, menu_id, page_number, image_id, full_height, full_width, uuid]",
        "Response": "Table: MenuItem"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, freebase_id, inception, programming_paradigm) VALUES ('PL/Lua', 'implementation of the Lua programming language for PostgreSQL database systems', 'domain-specific language', 'nan', 'nan', 'procedural programming');\nDatabase State:\n- Table: Programming_Languages, Columns: [label, description, instance_of, freebase_id, inception, programming_paradigm]",
        "Response": "Table: Programming_Languages"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO political_border (label, description, located_in_the_administrative_territorial_entity, instance_of, commons_category, coordinate_location, country, shares_border_with, topics_main_category, population, geonames_id, category_of_associated_people, viaf_id, official_website, musicbrainz_area_id, located_in_time_zone, part_of, official_language, yso_id, image, whos_on_first_id, freebase_id, coat_of_arms_image, store_norske_leksikon_id, page_banner) VALUES ('Jiangsu', 'province of China', 'People''s Republic of China', 'province of the People''s Republic of China', 'Jiangsu', '33.0', 'People''s Republic of China', 'Shandong', 'Category:Jiangsu', 84748016.0, '1806260', 'Category:People of Jiangsu', '239002748', 'http://www.jiangsu.gov.cn', '54862a0b-a330-4a9c-8634-50d3c89d2c34', 'UTC+08:00', 'nan', 'nan', 'nan', 'Tongli village, Jiangsu, China.jpg', '85669827.0', '/m/0166c7', 'nan', 'Jiangsu', 'Jiangsu Page Banner.png');\nDatabase State:\n- Table: political_border, Columns: [label, description, located_in_the_administrative_territorial_entity, instance_of, commons_category, coordinate_location, country, shares_border_with, topics_main_category, population, geonames_id, category_of_associated_people, viaf_id, official_website, musicbrainz_area_id, located_in_time_zone, part_of, official_language, yso_id, image, whos_on_first_id, freebase_id, coat_of_arms_image, store_norske_leksikon_id, page_banner]\n- Table: place_of_birth, Columns: [label, description, twinned_administrative_body, located_in_the_administrative_territorial_entity, commons_category, country, postal_code, located_in_time_zone, locator_map_image, topics_main_category, official_website, instance_of, freebase_id, gnd_id, musicbrainz_area_id, dewey_decimal_classification, category_for_people_who_died_here, category_of_associated_people, image, capital_of, elevation_above_sea_level, commons_gallery, viaf_id, facebook_places_id, coordinate_location, library_of_congress_authority_id, described_by_source, population, openstreetmap_relation_id, encyclop\u00e6dia_britannica_online_id, area, head_of_government, quora_topic_id, archinform_location_id, geonames_id, whos_on_first_id, official_name, nkcr_aut_id, worldcat_identities_id, native_label, national_library_of_israel_j9u_id, online_pwn_encyclopedia_id, store_norske_leksikon_id, category_for_maps]\n- Table: twin_town, Columns: [label, description, locator_map_image, instance_of, located_in_the_administrative_territorial_entity, shares_border_with, country, commons_category, coat_of_arms_image, twinned_administrative_body, located_in_time_zone, topics_main_category, page_banner, official_website, musicbrainz_area_id, freebase_id, category_of_associated_people, image, viaf_id, coordinate_location, population, area, quora_topic_id, geonames_id, inaturalist_place_id]\n- Table: administrative_territorial_entity, Columns: [label, description, dewey_decimal_classification, twinned_administrative_body, country, commons_category, instance_of, coat_of_arms_image, image, located_in_time_zone, located_in_the_administrative_territorial_entity, coordinate_location, page_banner, musicbrainz_area_id, topics_main_category, freebase_id, population, geonames_id, shares_border_with, category_of_associated_people, official_website, finnish_municipality_number, legislative_body, official_language, area, yso_id, store_norske_leksikon_id, archinform_location_id, viaf_id, whos_on_first_id, ysa_id]\n- Table: parish_union, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, official_website, diocese]",
        "Response": "Table: political_border"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('hypothetical protein ECL_01183', 'microbial gene found in Enterobacter cloacae subsp. cloacae ATCC 13047', 'Enterobacter cloacae subsp. cloacae ATCC 13047', '9123687', 'gene', 'Hypothetical protein ECL_01183', 'ECL_01183', 'gene', '1217153', 'forward strand', '1216662');\nDatabase State:\n- Table: Genes, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, located_in_the_administrative_territorial_entity, commons_category, instance_of, located_in_time_zone, coordinate_location, freebase_id, geonames_id, elevation_above_sea_level, image, postal_code, local_dialing_code, capital_of, quora_topic_id, whos_on_first_id, area) VALUES ('Nashik', 'city in western India in the state of Maharashtra', 'India', 'Nashik district', 'Nashik', 'big city', 'UTC+05:30', '20.0', '/m/037vkk', '1261731.0', 660.0, 'Nashik Old City.jpg', '422001', '253.0', 'Nashik district', 'Nashik-Maharashtra-India-1', '102029219.0', 300.0);\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, country, coordinate_location, located_in_the_administrative_territorial_entity, capital, topics_main_category, instance_of, freebase_id, geonames_id, commons_category, shares_border_with, located_in_time_zone, official_website, locator_map_image, area, indian_census_area_code_2011, population, male_population, female_population, number_of_households, urban_population, rural_population, library_of_congress_authority_id, literate_population, illiterate_population, geoshape, viaf_id, wolfram_language_entity_code, inaturalist_place_id]\n- Table: capital_city, Columns: [label, description, country, located_in_the_administrative_territorial_entity, commons_category, instance_of, located_in_time_zone, coordinate_location, freebase_id, geonames_id, elevation_above_sea_level, image, postal_code, local_dialing_code, capital_of, quora_topic_id, whos_on_first_id, area]\n- Table: tjsb_sahakari_bank_branch, Columns: [label, description, operator, country, located_in_the_administrative_territorial_entity, indian_financial_system_code, instance_of]",
        "Response": "Table: capital_city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO players_teams (id, playerID, year, stint, tmID, lgID, GP, GS, minutes, points, oRebounds, dRebounds, rebounds, assists, steals, blocks, turnovers, PF, fgAttempted, fgMade, ftAttempted, ftMade, threeAttempted, threeMade, PostGP, PostGS, PostMinutes, PostPoints, PostoRebounds, PostdRebounds, PostRebounds, PostAssists, PostSteals, PostBlocks, PostTurnovers, PostPF, PostfgAttempted, PostfgMade, PostftAttempted, PostftMade, PostthreeAttempted, PostthreeMade, note) VALUES (15880, 'olsenbu01', 1968, 1, 'BOS', 'NBA', 7, 0, 43, 14, 0, 0, 14, 4, 0, 0, 0, 6, 19, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL);\nDatabase State:\n- Table: series_post, Columns: [id, year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L]\n- Table: teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, confRank, playoff, name, o_fgm, o_ftm, o_pts, d_pts, homeWon, homeLost, awayWon, awayLost, won, lost, games, arena]\n- Table: draft, Columns: [id, draftYear, draftRound, draftSelection, draftOverall, tmID, firstName, lastName, suffixName, playerID, draftFrom, lgID]\n- Table: coaches, Columns: [coachID, year, tmID, lgID, stint, won, lost, post_wins, post_losses]\n- Table: player_allstar, Columns: [playerID, last_name, first_name, season_id, conference, league_id, games_played, minutes, points, o_rebounds, d_rebounds, rebounds, assists, steals, blocks, turnovers, personal_fouls, fg_attempted, fg_made, ft_attempted, ft_made, three_attempted, three_made]\n- Table: PlayersStatistics, Columns: [id, playerID, year, stint, tmID, lgID, GP, GS, minutes, points, oRebounds, dRebounds, rebounds, assists, steals, blocks, turnovers, PF, fgAttempted, fgMade, ftAttempted, ftMade, threeAttempted, threeMade, PostGP, PostGS, PostMinutes, PostPoints, PostoRebounds, PostdRebounds, PostRebounds, PostAssists, PostSteals, PostBlocks, PostTurnovers, PostPF, PostfgAttempted, PostfgMade, PostftAttempted, PostftMade, PostthreeAttempted, PostthreeMade, note]\n- Table: players, Columns: [playerID, useFirst, firstName, middleName, lastName, nameGiven, fullGivenName, nameSuffix, nameNick, pos, firstseason, lastseason, height, weight, college, collegeOther, birthDate, birthCity, birthState, birthCountry, highSchool, hsCity, hsState, hsCountry, deathDate, race]",
        "Response": "Table: PlayersStatistics"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, instance_of) VALUES ('The Broadway', 'defunct department store chain', 'United States of America', 'department store chain');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, instance_of, freebase_id, geonames_id, inception, official_website, locator_map_image, inaturalist_place_id, area, population]\n- Table: Department_Store_Chains, Columns: [label, description, country, instance_of]\n- Table: part, Columns: [label, description, commons_category, topics_main_category, freebase_id, gnd_id, viaf_id, instance_of, geonames_id, page_banner, quora_topic_id, has_parts, nkcr_aut_id, worldcat_identities_id, coordinate_location, locator_map_image, part_of, den_store_danske_id]",
        "Response": "Table: Department_Store_Chains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, applies_to_jurisdiction, part_of, country, followed_by, instance_of, austlii_id, follows) VALUES ('Section 39 of the Constitution of Australia', 'nan', 'Australia', 'Constitution of Australia', 'Australia', 'Section 40 of the Constitution of Australia', 'article of constitution', 'au/legis/cth/consol_act/coaca430/s39', 'Section 38 of the Constitution of Australia');\nDatabase State:\n- Table: constitution_of_australia, Columns: [label, description, country, instance_of, part_of, applies_to_jurisdiction, follows, followed_by, austlii_id]\n- Table: followed_by, Columns: [label, description, applies_to_jurisdiction, part_of, country, follows, instance_of, austlii_id, followed_by]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, field_of_this_occupation, topics_main_category, instance_of, commons_category, female_form_of_label, subclass_of) VALUES ('Australian rules football player', 'sportsperson taking part in Australian-rules football competitions', 'Australian rules football', 'Category:Players of Australian rules football', 'profession', 'Australian rules football players', 'joueuse de football australien', 'athlete');\nDatabase State:\n- Table: wikidata_property_related_to_sport, Columns: [label, description, subclass_of, facet_of, instance_of]\n- Table: use, Columns: [label, description, subclass_of, freebase_id, commons_category, image]",
        "Response": "Table: intentional_human_activity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Host_ID, Name, Nationality, Age) VALUES (7, 'Carlos Delfino', 'Argentina', '30');\nDatabase State:\n- Table: party, Columns: [Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts]\n- Table: Players, Columns: [Host_ID, Name, Nationality, Age]",
        "Response": "Table: Players"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO editor (Editor_ID, Name, Age) VALUES (8, 'Gra\u017cyna Wolszczak', 54.0);\nDatabase State:\n- Table: editors, Columns: [Editor_ID, Name, Age]",
        "Response": "Table: editors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, image, historic_county, state_of_use, transport_network, connecting_service, adjacent_station) VALUES ('Newton Heath and Moston tram stop', 'light rail stop in Manchester', 'United Kingdom', '53.50425', 'Manchester Metrolink tram stop', 'Manchester', 'NWM Metrolink.jpg', 'Lancashire', 'in use', 'Manchester Metrolink', 'East Didsbury to Shaw and Crompton', 'Failsworth tram stop');\nDatabase State:\n- Table: TransportStops, Columns: [label, description, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, image, historic_county, state_of_use, transport_network, connecting_service, adjacent_station]\n- Table: adjacent_station, Columns: [label, description, commons_category, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, image, date_of_official_opening, historic_county, state_of_use, transport_network, connecting_service, adjacent_station]\n- Table: administrative_territorial_entity, Columns: [label, description, instance_of, located_in_the_administrative_territorial_entity, geonames_id, toid, country, coordinate_location, whos_on_first_id, topics_main_category, commons_category, image, musicbrainz_area_id, freebase_id]",
        "Response": "Table: TransportStops"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO paragraphs (id, ParagraphNum, PlainText, character_id, chapter_id) VALUES (638618, 2061, replace('So many journeys may the sun and moon\\n Make us again count o''er ere love be done!\\n But woe is me! you are so sick of late,\\n So far from cheer and from your former state.\\n That I distrust you. Yet, though I distrust,\\n Discomfort you, my lord, it nothing must;\\n For women''s fear and love holds quantity,\\n In neither aught, or in extremity.\\n Now what my love is, proof hath made you know;\\n And as my love is siz''d, my fear is so.\\n Where love is great, the littlest doubts are fear;\\n Where little fears grow great, great love grows there.','\\n',char(10)), 528, 18883);\nDatabase State:\n- Table: works, Columns: [id, Title, LongTitle, Date, GenreType]\n- Table: characters, Columns: [id, CharName, Abbrev, Description]\n- Table: paragraphs, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]\n- Table: chapters, Columns: [id, Act, Scene, Description, work_id]",
        "Response": "Table: paragraphs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO orderdetails (orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber) VALUES (10291, 'S18_4600', 48, 96.8599999999999995, 5);\nDatabase State:\n- Table: orderdetails, Columns: [orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber]\n- Table: productlines, Columns: [productLine, textDescription, htmlDescription, image]",
        "Response": "Table: orderdetails"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO citation (label, description, pages, title, author_name_string, publication_date, issue, volume, published_in, instance_of, pubmed_id, doi, language_of_work_or_name) VALUES ('The ABC-transporter signature motif is required for peptide translocation but not peptide binding by TAP', 'scientific journal article', '422-427', 'The ABC-transporter signature motif is required for peptide translocation but not peptide binding by TAP', 'Eric W. Hewitt', '+2003-02-01T00:00:00Z', '2', '33', 'European Journal of Immunology', 'scholarly article', '12645939', '10.1002/IMMU.200310016', 'English');\nDatabase State:\n- Table: antigen_presentation_folding_assembly_and_peptide_loading_of_class_i_mhc, Columns: [label, description, cites_work, instance_of, found_in_taxon, reactome_id, part_of, exact_match, has_parts]",
        "Response": "Table: citation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO male (name) VALUES ('student553');\nDatabase State:\n- Table: Students, Columns: [name]\n- Table: enrolled, Columns: [name, school, month]\n- Table: person, Columns: [name]",
        "Response": "Table: Students"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire) VALUES (13, 2, 'good', 'Laury', 'Lemke', '1', '2017-03-18 04:37:59', '2018-03-18 17:35:43');\nDatabase State:\n- Table: Payments, Columns: [payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid]\n- Table: Products_for_Hire, Columns: [product_id, product_type_code, daily_hire_cost, product_name, product_description]\n- Table: CustomerData, Columns: [customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire]",
        "Response": "Table: CustomerData"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO gas_station (Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name) VALUES (6, 2004, 'Herne Ave', 'Tom Whit', 'Simon Gaywood', 'Tony Gibb');\nDatabase State:\n- Table: Gas_Station_Details, Columns: [Station_ID, Open_Year, Location, Manager_Name, Vice_Manager_Name, Representative_Name]\n- Table: company, Columns: [Company_ID, Rank, Company, Headquarters, Main_Industry, Sales_billion, Profits_billion, Assets_billion, Market_Value]",
        "Response": "Table: Gas_Station_Details"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, coordinate_location, freebase_id, viaf_id, idref_id, isni, library_of_congress_authority_id, official_website, inception, image, located_in_the_administrative_territorial_entity, instance_of, commons_institution_page, country, biblioth\u00e8que_nationale_de_france_id, worldcat_identities_id, national_library_of_israel_j9u_id) VALUES ('Arthur M. Sackler Gallery', 'museum of Asian art in Washington, D.C.', 'Arthur M. Sackler Gallery', '38.888', '/m/024g7s', '139247290', '029572606', '0000 0001 2291 4004', 'n85298520', 'http://www.asia.si.edu/', '+1987-00-00T00:00:00Z', 'Sackler Gallery.jpg', 'Washington, D.C.', 'art museum', 'Arthur M. Sackler Gallery', 'United States of America', '12117016w', 'lccn-n85298520', '9.870072578253052e+17');\nDatabase State:\n- Table: collection, Columns: [label, description, commons_category, coordinate_location, freebase_id, viaf_id, idref_id, isni, library_of_congress_authority_id, official_website, inception, image, located_in_the_administrative_territorial_entity, instance_of, commons_institution_page, country, biblioth\u00e8que_nationale_de_france_id, worldcat_identities_id, national_library_of_israel_j9u_id]",
        "Response": "Table: collection"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details) VALUES ('712', 266, 'Alek', '398.352.1753', 'terry.nels@example.com', NULL);\nDatabase State:\n- Table: Customers, Columns: [Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details]\n- Table: Invoices, Columns: [Invoice_ID, Order_ID, payment_method_code, Product_ID, Order_Quantity, Other_Item_Details, Order_Item_ID]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (f1, f2) VALUES (3, 4);\nDatabase State:\n- Table: tweets, Columns: [id, uid, text, createdate]\n- Table: user_profiles, Columns: [uid]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Web_client_accelerator (id, name, Operating_system, Client, Connection) VALUES (19, 'Ziproxy', 'Unix (Linux, *BSD, Mac OS X, others)', 'ISP', 'Any');\nDatabase State:\n- Table: browser, Columns: [id, name, market_share]\n- Table: Accelerator_Configurations, Columns: [id, name, Operating_system, Client, Connection]\n- Table: accelerator_compatible_browser, Columns: [accelerator_id, browser_id, compatible_since_year]",
        "Response": "Table: Accelerator_Configurations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, coordinate_location, country, instance_of, located_in_the_administrative_territorial_entity) VALUES ('Uusimaa', 'electoral district in Finland', 'nan', 'Finland', 'electoral district of Finland', 'Uusimaa');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, population, geonames_id, gnd_id, licence_plate_code, country, bavarikon_id, coat_of_arms_image, german_municipality_key, viaf_id, freebase_id, official_website, openstreetmap_relation_id, topics_main_category, locator_map_image, area, archinform_location_id, local_dialing_code, commons_category, elevation_above_sea_level, instance_of, coordinate_location, located_in_the_administrative_territorial_entity, postal_code, image, whos_on_first_id, factgrid_item_id, located_in_time_zone, german_regional_key, part_of]\n- Table: part, Columns: [label, description, coordinate_location, country, instance_of, located_in_the_administrative_territorial_entity]\n- Table: plague_pit, Columns: [label, description, country, instance_of, located_in_the_administrative_territorial_entity, heritage_designation, coordinate_location]",
        "Response": "Table: part"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, competition_class, short_name, sport, catalog_code) VALUES ('women''s double scull', 'competition class in rowing', 'competition class', 'open', 'W2x', 'rowing', '16946db9-72f2-4375-a797-a26fd485dd26');\nDatabase State:\n- Table: competition_class, Columns: [label, description, instance_of, competition_class, short_name, sport, catalog_code]\n- Table: 1971_european_rowing_championships, Columns: [label, description, instance_of, competition_class, part_of, described_at_url, follows, followed_by, point_in_time, sport]",
        "Response": "Table: competition_class"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, courseLevel) VALUES (36, 'Level_500');\nDatabase State:\n- Table: person, Columns: [p_id, professor, student, hasPosition, inPhase, yearsInProgram]\n- Table: taughtBy, Columns: [course_id, p_id]\n- Table: advisedBy, Columns: [p_id, p_id_dummy]",
        "Response": "Table: course"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO publication (Publication_ID, Book_ID, Publisher, Publication_Date, Price) VALUES (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0);\nDatabase State:\n- Table: Book_Publications, Columns: [Publication_ID, Book_ID, Publisher, Publication_Date, Price]",
        "Response": "Table: Book_Publications"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (No) VALUES (483, 'Zinfandel', 'Artezin', 'Amador-Mendocino-Sonoma Counties', 'California', 'Zinfandel', 2008, 18, 87, 5856, 'now');\nDatabase State:\n- Table: appellations, Columns: [No]\n- Table: grapes, Columns: [ID]",
        "Response": "Table: wine"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (GeneID1, GeneID2, Type, Expression_Corr) VALUES ('G234334', 'G234368', 'Genetic', -0.1015115459999999942);\nDatabase State:\n- Table: Interactions, Columns: [GeneID1, GeneID2, Type, Expression_Corr]\n- Table: Genes, Columns: [GeneID, Essential, Class, Complex, Phenotype, Motif, Chromosome, Function, Localization]",
        "Response": "Table: Interactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO region_sales (region_id, game_platform_id, num_sales) VALUES (3, 5740, 0.07000000000000000667);\nDatabase State:\n- Table: game_platform, Columns: [id, game_publisher_id, platform_id, release_year]",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (MovieID, ActorID, Character_Name, creditOrder, pay, screentime) VALUES (325, 1891, 'Deacon Moss', 5, NULL, NULL);\nDatabase State:\n- Table: movie, Columns: [MovieID, Title, MPAA_Rating, Budget, Gross, Release_Date, Genre, Runtime, Rating, Rating_Count, Summary]\n- Table: Cast, Columns: [MovieID, ActorID, Character_Name, creditOrder, pay, screentime]\n- Table: actor, Columns: [ActorID, Name, Date_of_Birth, Birth_City, Birth_Country, Height_(Inches), Biography, Gender, Ethnicity, NetWorth]",
        "Response": "Table: Cast"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO course (Course_ID, Staring_Date, Course) VALUES (5, '10 May', 'Bible');\nDatabase State:\n- Table: course_arrange, Columns: [Course_ID, Teacher_ID, Grade]",
        "Response": "Table: course"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (product_id, product_name, product_details) VALUES (7, 'clothes', NULL);\nDatabase State:\n- Table: Products, Columns: [product_id, product_name, product_details]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories) VALUES (1113, 61.74000000000000198, 14.30000000000000071, 0.0, 12.91999999999999993, 3.549999999999999823, 166.0200000000000102, 313.7099999999999796, 3.129999999999999894, 3.100000000000000088, 175.4399999999999978, 0.75, 13.60999999999999944, 27.64999999999999858, 58.74000000000000198, 420.3999999999999773);\nDatabase State:\n- Table: Nutrition, Columns: [recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories]",
        "Response": "Table: Nutrition"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EVENTID, REFID, EVENT_DATE, AMOUNT) VALUES (3192762, 336003, '2007-04-18 12:00:00.0', 14.33099999999999952);\nDatabase State:\n- Table: Transactions, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]",
        "Response": "Table: Transactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1031, 'Smith', 'Sarah', 20, 'F', 550, 8772, 'PHL');\nDatabase State:\n- Table: Restaurant_Type, Columns: [ResTypeID, ResTypeName, ResTypeDescription]\n- Table: Restaurant, Columns: [ResID, ResName, Address, Rating]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Visits_Restaurant, Columns: [StuID, ResID, Time, Spent]\n- Table: Type_Of_Restaurant, Columns: [ResID, ResTypeID]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (university_id, ranking_criteria_id, year, score) VALUES (227, 19, 2014, 220);\nDatabase State:\n- Table: university, Columns: [id, country_id, university_name]\n- Table: country, Columns: [id, country_name]\n- Table: university_ranking_year, Columns: [university_id, ranking_criteria_id, year, score]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, course_id, sec_id, semester, year, grade) VALUES ('64222', '802', '1', 'Spring', 2003, 'B+');\nDatabase State:\n- Table: instructor, Columns: [ID, name, dept_name, salary]\n- Table: advisor, Columns: [s_ID, i_ID]\n- Table: course, Columns: [course_id, title, dept_name, credits]\n- Table: section, Columns: [course_id, sec_id, semester, year, building, room_number, time_slot_id]\n- Table: Student_Course_Grades, Columns: [ID, course_id, sec_id, semester, year, grade]\n- Table: classroom, Columns: [building, room_number, capacity]",
        "Response": "Table: Student_Course_Grades"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (customer_id, payment_method, customer_name, date_became_customer, other_customer_details) VALUES (9, 'Cheque', 'Devin Mills', '2018-03-05 16:52:51', NULL);\nDatabase State:\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, date_became_customer, other_customer_details]\n- Table: Order_Items, Columns: [order_id, product_id, order_quantity]\n- Table: Customer_Addresses, Columns: [customer_id, address_id, date_address_from, address_type, date_address_to]\n- Table: Addresses, Columns: [address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status, order_date, order_details]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('MesJ/Ycf62 family protein SAG0014', 'microbial gene found in Streptococcus agalactiae 2603V/R', 'Streptococcus agalactiae 2603V/R', '1012732', 'gene', 'MesJ/Ycf62 family protein SAG0014', 'SAG0014', 'gene', '13364', 'forward strand', '12090');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO taxon (label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, gram_staining, lpsn_url, microsoft_academic_id) VALUES ('Mesorhizobium', 'genus of bacteria', 'Phyllobacteriaceae', 'Mesorhizobium', 'taxon', 'genus', '957570.0', '/m/0cmd0mt', '68287.0', '3220966.0', '1059226.0', 'Gram-negative bacteria', 'http://www.bacterio.net/mesorhizobium.html', '2777301280.0');\nDatabase State:\n- Table: dipeptidase_1, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: encodes, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: taxon"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score) VALUES (157, 12, 2012, 33);\nDatabase State:\n- Table: university_year, Columns: [university_id, year, num_students, student_staff_ratio, pct_international_students, pct_female_students]\n- Table: country, Columns: [id, country_name]\n- Table: ranking_criteria, Columns: [id, ranking_system_id, criteria_name]\n- Table: university, Columns: [id, country_id, university_name]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO party (Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name) VALUES (2, 'Kojo Botsio (MP)', '1958', '1959', 2, 'Progress Party');\nDatabase State:\n- Table: party_events, Columns: [Event_ID, Event_Name, Party_ID, Member_in_charge_ID]\n- Table: Ministers, Columns: [Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]\n- Table: member, Columns: [Member_ID, Member_Name, Party_ID, In_office]",
        "Response": "Table: Ministers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO part (label, description, instance_of, kegg_id, pubchem_substance_id_sid, has_parts) VALUES ('chotosan', 'Kampo drug', 'Chinese herbology', 'D07012', '51091354', 'Pinelliae Tuber');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: part"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO trains (id, direction) VALUES (6, 'east');\nDatabase State:\n- Table: cars, Columns: [id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num]",
        "Response": "Table: trains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Staff_ID, Staff_Details) VALUES (987, 'Gideon');\nDatabase State:\n- Table: Employees, Columns: [Staff_ID, Staff_Details]\n- Table: Policies, Columns: [Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date]\n- Table: Claims_Processing, Columns: [Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID]\n- Table: Customers, Columns: [Customer_ID, Customer_Details]\n- Table: Claim_Headers, Columns: [Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad]",
        "Response": "Table: Employees"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tweets (id, uid, text, createdate) VALUES (8, 4, 'I feel tired and don''t want to write SQLs.', '2018-03-12 02:30:30');\nDatabase State:\n- Table: user_profiles, Columns: [uid]\n- Table: follows, Columns: [f1, f2]",
        "Response": "Table: tweets"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Order_Items (order_id, product_id, order_quantity) VALUES (8, 1, '7');\nDatabase State:\n- Table: Addresses, Columns: [address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details]\n- Table: Products, Columns: [product_id, product_details]\n- Table: Customer_Contact_Channels, Columns: [customer_id, channel_code, active_from_date, active_to_date, contact_number]\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, date_became_customer, other_customer_details]\n- Table: Order_Products, Columns: [order_id, product_id, order_quantity]",
        "Response": "Table: Order_Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, population, geonames_id, gnd_id, licence_plate_code, country, bavarikon_id, coat_of_arms_image, german_municipality_key, viaf_id, freebase_id, official_website, openstreetmap_relation_id, topics_main_category, locator_map_image, area, archinform_location_id, local_dialing_code, commons_category, elevation_above_sea_level, instance_of, coordinate_location, located_in_the_administrative_territorial_entity, postal_code, image, whos_on_first_id, factgrid_item_id, located_in_time_zone, german_regional_key, part_of) VALUES ('Hergensweiler', 'municipality of Germany', 1886.0, '6557195', '4504549-5', 'LI', 'Germany', 'ODB_A00000708', 'Wappen von Hergensweiler.svg', '9776115.0', '235663415.0', '/m/02q4h04', 'http://www.hergensweiler.de', '959435.0', 'Category:Hergensweiler', 'Hergensweiler in LI.svg', 12.08999999999999986, 'nan', '8388.0', 'Hergensweiler', 520.0, 'non-urban municipality of Germany', '47.616666666667', 'Lindau', '88138', 'Hergensweiler Pfarrkirche.jpg', '101853685', 'Q86237', 'UTC+01:00', '97765735115.0', 'Verwaltungsgemeinschaft Sigmarszell');\nDatabase State:\n- Table: part, Columns: [label, description, coordinate_location, country, instance_of, located_in_the_administrative_territorial_entity]\n- Table: plague_pit, Columns: [label, description, country, instance_of, located_in_the_administrative_territorial_entity, heritage_designation, coordinate_location]\n- Table: Municipalities, Columns: [label, description, population, geonames_id, gnd_id, licence_plate_code, country, bavarikon_id, coat_of_arms_image, german_municipality_key, viaf_id, freebase_id, official_website, openstreetmap_relation_id, topics_main_category, locator_map_image, area, archinform_location_id, local_dialing_code, commons_category, elevation_above_sea_level, instance_of, coordinate_location, located_in_the_administrative_territorial_entity, postal_code, image, whos_on_first_id, factgrid_item_id, located_in_time_zone, german_regional_key, part_of]",
        "Response": "Table: Municipalities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO inspections (business_id, score, date, type) VALUES (70207, NULL, '2016-06-10', 'Structural Inspection');\nDatabase State:\n- Table: businesses, Columns: [business_id, name, address, city, postal_code, latitude, longitude, phone_number, tax_code, business_certificate, application_date, owner_name, owner_address, owner_city, owner_state, owner_zip]\n- Table: Inspection_History, Columns: [business_id, score, date, type]",
        "Response": "Table: Inspection_History"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO inspection (inspection_id, inspection_date, inspection_type, results, employee_id, license_no, followup_to) VALUES (580962, '2011-05-17', 'License', 'Fail', 143902, 2008835, NULL);\nDatabase State:\n- Table: inspection_point, Columns: [point_id, Description, category, code, fine, point_level]\n- Table: employee, Columns: [employee_id, first_name, last_name, address, city, state, zip, phone, title, salary, supervisor]\n- Table: establishment, Columns: [license_no, dba_name, aka_name, facility_type, risk_level, address, city, state, zip, latitude, longitude, ward]\n- Table: violation, Columns: [inspection_id, point_id, fine, inspector_comment]",
        "Response": "Table: inspection"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO product (Product_ID, Product_Name, Category, Sub_Category, Region) VALUES ('TEC-CO-10004722', 'Canon imageCLASS 2200 Advanced Copier', 'Technology', 'Copiers', 'West');\nDatabase State:\n- Table: west_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: Product_List, Columns: [Product_ID, Product_Name, Category, Sub_Category, Region]\n- Table: people, Columns: [Customer_ID, Customer_Name, Segment, Country, City, State, Postal_Code, Region]\n- Table: south_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: east_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]\n- Table: central_superstore, Columns: [Row_ID, Order_ID, Order_Date, Ship_Date, Ship_Mode, Customer_ID, Region, Product_ID, Sales, Quantity, Discount, Profit]",
        "Response": "Table: Product_List"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, located_in_the_administrative_territorial_entity, country, instance_of, coordinate_location, freebase_id) VALUES ('Baladeh Rural District', 'rural district in Mazandaran, Iran', 'Khorramabad District', 'Iran', 'rural district of Iran', '36.71666666666667', '/m/0yqmqdh');\nDatabase State:\n- Table: Administrative Territories, Columns: [label, description, located_in_the_administrative_territorial_entity, country, instance_of, coordinate_location, freebase_id]",
        "Response": "Table: Administrative Territories"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO fighter_squadron (label, description, instance_of, country, part_of) VALUES ('1st Squadron', 'Albanian Air Force fighter squadron of Aviation Regiment 4010', 'fighter squadron', 'nan', 'Aviation Regiment 4010');\nDatabase State:\n- Table: fighter_squadron, Columns: [label, description, instance_of, country, part_of]",
        "Response": "Table: fighter_squadron"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1027, 'Brody', 'Paul', 18, 'M', 520, 8723, 'LOS');\nDatabase State:\n- Table: EnrolledStudents, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: EnrolledStudents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, molecular_function, biological_process, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('50S ribosomal protein L11 PA4274', 'microbial protein found in Pseudomonas aeruginosa PAO1', '50S ribosomal protein L11 PA4274', 'Q9HWC5', 'RNA binding', 'ribosomal large subunit assembly', 'ribosome', 'Ribosomal protein L11, conserved site', 'Pseudomonas aeruginosa PAO1', 'NP_252964', 'protein', 'Ribosomal protein L11/L12, N-terminal domain superfamily', 'protein');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: Protein_Family, Columns: [label, description, encoded_by, uniprot_protein_id, molecular_function, biological_process, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: Protein_Family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO state_park_of_the_united_states (label, description, subclass_of, located_in_the_administrative_territorial_entity, country, topics_main_category, has_list) VALUES ('Louisiana state park', 'nan', 'state park of the United States', 'Louisiana', 'United States of America', 'Category:State parks of Louisiana', 'list of Louisiana state parks');\nDatabase State:\n- Table: aspect_of_history, Columns: [label, description, part_of, commons_category, topics_main_category, dewey_decimal_classification, instance_of, facet_of, library_of_congress_authority_id, national_library_of_israel_j9u_id]\n- Table: place_of_birth, Columns: [label, description, instance_of, category_combines_topics, commons_category, category_contains]\n- Table: state_park_of_the_united_states, Columns: [label, description, subclass_of, located_in_the_administrative_territorial_entity, country, topics_main_category, has_list]\n- Table: eponym, Columns: [label, description, freebase_id, instance_of]\n- Table: geography, Columns: [label, description, topics_main_category, subclass_of, instance_of]\n- Table: administrative_territorial_entity, Columns: [label, description, seal_image, dewey_decimal_classification, topics_main_wikimedia_portal, country, capital, shares_border_with, flag_image, flag, iso_3166_2_code, commons_category, locator_map_image, located_in_time_zone, head_of_government, openstreetmap_relation_id, located_in_the_administrative_territorial_entity, coordinate_location, official_website, topics_main_category, page_banner, curlie_id, musicbrainz_area_id, instance_of, legislative_body, freebase_id, contains_the_administrative_territorial_entity, gnis_id, fips_10_4_countries_and_regions, inception, category_for_people_born_here, category_for_people_who_died_here, geonames_id, gnd_id, category_for_films_shot_at_this_location, category_of_people_buried_here, category_of_associated_people, office_held_by_head_of_government, viaf_id, library_of_congress_authority_id, population, nickname, topics_main_template, ballotpedia_id, described_by_source, geography_of_topic, encyclop\u00e6dia_britannica_online_id, has_seal_badge_or_sigil, pronunciation_audio, gran_enciclop\u00e8dia_catalana_id, area, quora_topic_id, bbc_things_id, yso_id, short_name, demonym, subreddit, motto_text, highest_point, lowest_point, history_of_topic, elevation_above_sea_level, us_national_archives_identifier, gacs_id, mesh_descriptor_id, archives_at, official_symbol, fips_5_2_alpha_code_us_states, fips_5_2_numeric_code_us_states, wikimedia_outline, water_as_percent_of_area, named_after, coordinates_of_geographic_center, executive_body, foundational_text, highest_judicial_authority, getty_thesaurus_of_geographic_names_id, part_of, c_span_organization_id, native_label, idref_id, archinform_location_id, national_library_of_israel_id_old, geoshape, wolfram_language_entity_code, nkcr_aut_id, different_from, comic_vine_id, maximum_temperature_record, loc_and_marc_vocabularies_id, language_used, anthem, whos_on_first_id, store_norske_leksikon_id, located_in_or_next_to_body_of_water, omegawiki_defined_meaning, minimum_temperature_record, category_for_maps, larousse_id, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, italian_vikidia_id, worldcat_identities_id, isni, kbpedia_id, rkd_thesaurus_id, hasc, interlingual_index_id, the_top_tens_id, economy_of_topic, google_maps_customer_id, tripadvisor_id, open_civic_data_division_id, google_news_topics_id, category_for_the_view_of_the_item, github_topic, uk_parliament_thesaurus_id, wordnet_31_synset_id, demographics_of_topic, coordinates_of_northernmost_point, coordinates_of_southernmost_point, inaturalist_place_id, marriageable_age, compulsory_education_maximum_age, twitter_topic_id, openstreetmap_zoom_level, online_pwn_encyclopedia_id, wikisimpsons_id, related_category, den_store_danske_id, per_capita_income, mean_age, number_of_households, hashtag, national_library_of_israel_j9u_id, ringgold_id, catholic_encyclopedia_id]\n- Table: wikimedia_category, Columns: [label, description, instance_of, commons_category, category_combines_topics, category_contains]\n- Table: economy_of_region, Columns: [label, description, commons_category, topics_main_category, instance_of, location, country, subclass_of, nominal_gdp]",
        "Response": "Table: state_park_of_the_united_states"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Projects (Code, Name, Hours) VALUES ('Ast2', 'A Puzzling Parallax', 299);\nDatabase State:\n- Table: ResearchProjects, Columns: [Code, Name, Hours]",
        "Response": "Table: ResearchProjects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('CTP synthase Taci_1250', 'microbial protein found in Thermanaerovibrio acidaminovorans DSM 6589', 'CTP synthase Taci_1250', 'D1B640', 'pyrimidine nucleotide biosynthetic process', 'nucleotide binding', 'Glutamine amidotransferase domain', 'Thermanaerovibrio acidaminovorans DSM 6589', 'YP_003317763', 'protein', 'Class I glutamine amidotransferase-like', 'protein');\nDatabase State:\n- Table: Protein_CTP_Synthase, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: Protein_CTP_Synthase"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO u2base (userid, movieid, rating) VALUES (3618, 2459856, '3');\nDatabase State:\n- Table: users, Columns: [userid, age, u_gender, occupation]\n- Table: directors, Columns: [directorid, d_quality, avg_revenue]\n- Table: movies2actors, Columns: [movieid, actorid, cast_num]",
        "Response": "Table: u2base"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY) VALUES ('2018/8/31', 20237, 'N41104', 4736, 13930, 1393006, 30977, 'ORD', 15380, 1538005, 35380, 'TVC', 745, 744, -1, 0, 947, -9, 0, 0, NULL, 71, 63, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderNumber, Sales_Channel, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, Order_Quantity, Discount_Applied, Unit_Price, Unit_Cost) VALUES ('SO - 0003022', 'Distributor', 'WARE-NBV1002', '2/4/19', '5/8/19', '5/28/19', '6/4/19', 'USD', 21, 25, 74, 38, 3, 0.05000000000000000277, '2,680.00', '1,956.40');\nDatabase State:\n- Table: Regions, Columns: [StateCode, State, Region]\n- Table: Store_Locations, Columns: [StoreID, City_Name, County, StateCode, State, Type, Latitude, Longitude, AreaCode, Population, Household_Income, Median_Income, Land_Area, Water_Area, Time_Zone]\n- Table: Customers, Columns: [CustomerID, Customer_Names]",
        "Response": "Table: Sales_Orders"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Answer (AnswerText, SurveyID, UserID, QuestionID) VALUES ('0', 2014, 446, 5);\nDatabase State:\n- Table: Answer, Columns: [AnswerText, SurveyID, UserID, QuestionID]",
        "Response": "Table: Answer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO artist (artist_name, country, gender, preferred_genre) VALUES ('Michel', 'UK', 'Male', 'pop');\nDatabase State:\n- Table: artist, Columns: [artist_name, country, gender, preferred_genre]\n- Table: song, Columns: [song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate]\n- Table: genre, Columns: [g_name, rating, most_popular_in]",
        "Response": "Table: artist"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (FacID, Lname, Fname, Rank, Sex, Phone, Room, Building) VALUES (2311, 'Priebe', 'Carey', 'AsstProf', 'M', 6953, '288', 'Krieger');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Faculty"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tatch\u016b (label, description, country, image, corporate_number_japan, instance_of, located_in_the_administrative_territorial_entity, part_of, inception) VALUES ('Shunk\u014d-in', 'zen Buddhist temple in Kyoto, Japan', 'Japan', 'Myoshinj shunkoin02s2000.jpg', '5130005001158.0', 'Tatch\u016b', 'Uky\u014d-ku', 'My\u014dshin-ji', '+1590-00-00T00:00:00Z');\nDatabase State:\n- Table: political_border, Columns: [label, description, area, dantai_code, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, official_website, instance_of, freebase_id, population, musicbrainz_area_id, geonames_id, topics_main_category, shares_border_with, image, located_in_time_zone, viaf_id, geonlp_id, locator_map_image, openstreetmap_relation_id, facebook_id, whos_on_first_id, worldcat_identities_id, native_label, inception, name_in_kana, ndl_authority_id]\n- Table: part, Columns: [label, description, official_website, commons_category, coordinate_location, freebase_id, instance_of, country, ndl_authority_id, image, dedicated_to, located_in_the_administrative_territorial_entity, viaf_id, corporate_number_japan, religion_or_worldview, founded_by, inception, has_parts, tripadvisor_id, heritage_designation, japan_search_name_id, part_of]",
        "Response": "Table: tatch\u016b"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO item (i_id) VALUES (2, 'apple');\nDatabase State:\n- Table: trust, Columns: [source_u_id]",
        "Response": "Table: item"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, cites_work, instance_of, found_in_taxon, reactome_id, part_of, exact_match, has_parts) VALUES ('SLC10A2 transports bile salts and acids and Na+ from extracellular region to cytosol', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-194187)', 'Enterohepatic bile salt transporters in normal physiology and liver disease', 'biological process', 'Homo sapiens', 'R-HSA-194187', 'Recycling of bile acids and salts', 'https://identifiers.org/reactome:R-HSA-194187', 'bile salts and acids [extracellular region]');\nDatabase State:\n- Table: citation, Columns: [label, description, pubmed_id, instance_of, title, published_in, volume, issue, publication_date, pages, author_name_string, doi, language_of_work_or_name]",
        "Response": "Table: recycling_of_bile_acids_and_salts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO student (student_id, f_name, l_name, phone_number, email, intelligence, gpa, type) VALUES (9, 'Hadley', 'Czaja', '(407) 7992976', 'hczaja8@hku.hk', 2, 2.399999999999999912, 'TPG');\nDatabase State:\n- Table: registration, Columns: [course_id, student_id, grade, sat]\n- Table: RA, Columns: [student_id, capability, prof_id, salary]\n- Table: prof, Columns: [prof_id, gender, first_name, last_name, email, popularity, teachingability, graduate_from]\n- Table: student, Columns: [student_id, f_name, l_name, phone_number, email, intelligence, gpa, type]",
        "Response": "Table: student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, cites_work, instance_of, found_in_taxon, reactome_id, part_of, exact_match, has_parts) VALUES ('Expression of peptide bound class I MHC on cell surface', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-983427)', 'Selective export of MHC class I molecules from the ER after their dissociation from TAP', 'biological process', 'Homo sapiens', 'R-HSA-983427', 'Antigen Presentation: Folding, assembly and peptide loading of class I MHC', 'https://identifiers.org/reactome:R-HSA-983427', 'Antigen peptide bound class I MHC [Golgi membrane]');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: antigen_presentation_folding_assembly_and_peptide_loading_of_class_i_mhc"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, approved_by, spdx_license_id, short_name, topics_main_template, instance_of) VALUES ('GNU General Public License, version 3.0 or later', 'latest or (at your option) any later version version of the GNU GPL (version 3), free software license with copyleft', 'Open Source Initiative', 'GPL-3.0-or-later', 'GPL-3.0-or-later', 'Template:GPLv3 or later', 'copyleft free software license');\nDatabase State:\n- Table: file_converter, Columns: [label, description, instance_of, copyright_license, copyright_status]",
        "Response": "Table: license"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO stadium (Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average) VALUES (3, 'East Fife', 'Bayview Stadium', 2000, 1980, 533, 864);\nDatabase State:\n- Table: stadium, Columns: [Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average]\n- Table: singer_in_concert, Columns: [concert_ID, Singer_ID]\n- Table: singer, Columns: [Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male]",
        "Response": "Table: stadium"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO paragraphs (id, ParagraphNum, PlainText, character_id, chapter_id) VALUES (658883, 353, 'Up.', 1072, 19355);\nDatabase State:\n- Table: book_content, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]",
        "Response": "Table: book_content"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, country, coat_of_arms_image, coordinate_location, instance_of, topics_main_category, freebase_id, geonames_id, viaf_id, elevation_above_sea_level, shares_border_with, area, official_website, image, population, lau, whos_on_first_id, inaturalist_place_id, located_in_the_administrative_territorial_entity, capital) VALUES ('Langsur', 'municipality of Germany', 'Langsur', 'Germany', 'DEU Langsur COA.svg', '49.724722222222', 'non-urban municipality of Germany', 'Category:Langsur', '/m/02z09xz', '6554759', '248298680', 154.0, 'Rosport-Mompach', 11.91999999999999993, 'http://www.langsur.de', 'Langsur.JPG', 1717.0, 'nan', '101855621', 'nan', 'Trier-Saarburg', 'nan');\nDatabase State:\n- Table: Municipalities, Columns: [label, description, commons_category, country, coat_of_arms_image, coordinate_location, instance_of, topics_main_category, freebase_id, geonames_id, viaf_id, elevation_above_sea_level, shares_border_with, area, official_website, image, population, lau, whos_on_first_id, inaturalist_place_id, located_in_the_administrative_territorial_entity, capital]\n- Table: administrative_centre, Columns: [label, description, commons_category, coordinate_location, country, instance_of, topics_main_category, freebase_id, geonames_id, viaf_id, elevation_above_sea_level, population, shares_border_with, area, official_website, coat_of_arms_image, lau, whos_on_first_id, capital, inaturalist_place_id, located_in_the_administrative_territorial_entity, image]",
        "Response": "Table: Municipalities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, coordinate_location, country, located_in_the_administrative_territorial_entity, image, instance_of, heritage_designation) VALUES ('K\u00e4seglocke', 'nan', 'K\u00e4seglocke (Dresden)', '51.0511', 'Germany', 'Dresden', 'Warteh\u00e4uschen K\u00e4seglocke Postplatz Dresden.JPG', 'waiting room', 'cultural heritage monument in Germany');\nDatabase State:\n- Table: Heritage_Locations, Columns: [label, description, commons_category, coordinate_location, country, located_in_the_administrative_territorial_entity, image, instance_of, heritage_designation]",
        "Response": "Table: Heritage_Locations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO enzyme (id, name, Location, Product, Chromosome, OMIM, Porphyria) VALUES (1, 'ALA synthase', 'Mitochondrion', '\u03b4-Aminolevulinic acid', '3p21.1', 125290, 'none');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: enzyme"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO phone_market (Market_ID, Phone_ID, Num_of_stock) VALUES (1, '1', 2232);\nDatabase State:\n- Table: phone, Columns: [Name, Phone_ID, Memory_in_G, Carrier, Price]\n- Table: market, Columns: [Market_ID, District, Num_of_employees, Num_of_shops, Ranking]",
        "Response": "Table: phone_market"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name) VALUES (4, 'Imoru Egala (MP)', '1960', '1961', 4, 'Convention Union Party');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: party"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Ingredient (ingredient_id, category, name, plural) VALUES (789, 'soups', 'condensed chicken broth', NULL);\nDatabase State:\n- Table: IngredientDetails, Columns: [ingredient_id, category, name, plural]\n- Table: Recipe, Columns: [recipe_id, title, subtitle, servings, yield_unit, prep_min, cook_min, stnd_min, source, intro, directions]\n- Table: Quantity, Columns: [quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional]",
        "Response": "Table: IngredientDetails"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading) VALUES (3, 'CH-47D Chinook', 'Tandem rotor helicopter', '50,000 lb (22,680 kg)', '5,655 ft\u00b2 (526 m\u00b2)', '8.8 lb/ft\u00b2 (43 kg/m\u00b2)');\nDatabase State:\n- Table: Aircrafts, Columns: [Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading]",
        "Response": "Table: Aircrafts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding, amount_of_refund) VALUES (8, 11, 'Provisional', '0', '2016-09-26 01:09:20', '2018-03-24 21:21:32', '746', 303.3000000000000113, 61.54999999999999716, 68.01999999999999603, 145.6299999999999955);\nDatabase State:\n- Table: View_Product_Availability, Columns: [product_id, booking_id, status_date, available_yn]\n- Table: Payments, Columns: [payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid]\n- Table: Discount_Coupons, Columns: [coupon_id, date_issued, coupon_amount]\n- Table: Rentals, Columns: [booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding, amount_of_refund]\n- Table: Products_Booked, Columns: [booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount]\n- Table: Products_for_Hire, Columns: [product_id, product_type_code, daily_hire_cost, product_name, product_description]",
        "Response": "Table: Rentals"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, category, person, role, credited) VALUES ('S20-E17', 'Editorial Department', 'Larry Field', 'telecine', 'true');\nDatabase State:\n- Table: Episode, Columns: [episode_id, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Episode_Credits, Columns: [episode_id, category, person, role, credited]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, person, role, episode_id, season, song, result]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Character_Award, Columns: [award_id, character]\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Keyword, Columns: [episode_id, keyword]",
        "Response": "Table: Episode_Credits"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO inspections (business_id, score, date, type) VALUES (2955, NULL, '2016-06-10', 'Reinspection/Followup');\nDatabase State:\n- Table: violations, Columns: [business_id, date, violation_type_id, risk_category, description]\n- Table: inspections, Columns: [business_id, score, date, type]\n- Table: businesses, Columns: [business_id, name, address, city, postal_code, latitude, longitude, phone_number, tax_code, business_certificate, application_date, owner_name, owner_address, owner_city, owner_state, owner_zip]",
        "Response": "Table: inspections"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, instance_of, located_in_the_administrative_territorial_entity, heritage_designation, coordinate_location) VALUES ('Rakaja', 'nan', 'Finland', 'plague pit', 'Viitasaari', 'registered archaeological site in Finland', '63.19865042');\nDatabase State:\n- Table: part, Columns: [label, description, coordinate_location, country, instance_of, located_in_the_administrative_territorial_entity]\n- Table: administrative_territorial_entity, Columns: [label, description, population, geonames_id, gnd_id, licence_plate_code, country, bavarikon_id, coat_of_arms_image, german_municipality_key, viaf_id, freebase_id, official_website, openstreetmap_relation_id, topics_main_category, locator_map_image, area, archinform_location_id, local_dialing_code, commons_category, elevation_above_sea_level, instance_of, coordinate_location, located_in_the_administrative_territorial_entity, postal_code, image, whos_on_first_id, factgrid_item_id, located_in_time_zone, german_regional_key, part_of]",
        "Response": "Table: plague_pit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (document_id, document_type_code, grant_id, sent_date, response_received_date, other_details) VALUES (15, 'APP', 8, '1981-08-06 14:56:55', '1999-06-01 18:41:00', '');\nDatabase State:\n- Table: Organisations, Columns: [organisation_id, organisation_type, organisation_details]\n- Table: Tasks, Columns: [task_id, project_id, task_details, eg_Agree_Objectives]\n- Table: Document_Types, Columns: [document_type_code, document_description]\n- Table: Projects, Columns: [project_id, organisation_id, project_details]\n- Table: Project_Outcomes, Columns: [project_id, outcome_code, outcome_details]",
        "Response": "Table: Documents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (university_id, ranking_criteria_id, year, score) VALUES (32, 3, 2014, 48);\nDatabase State:\n- Table: university_ranking_year, Columns: [university_id, ranking_criteria_id, year, score]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Properties (property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details) VALUES (12, 'Apartment', '2016-05-24 09:57:45', '1980-07-08 16:13:17', 'ten tower', replace('743 Ephraim Greens\\nAnniemouth, HI 47084-3853','\\n',char(10)), 5, 305, 2, 456840888.1600000263, 'qui', 'autem', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Other_Property_Features, Columns: [property_id, feature_id, property_feature_description]\n- Table: Ref_Feature_Types, Columns: [feature_type_code, feature_type_name]",
        "Response": "Table: Properties"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ship_id, cust_id, weight, truck_id, driver_id, city_id, ship_date) VALUES (1782, 1092, 945.0, 3, 26, 307, '2017-09-05');\nDatabase State:\n- Table: Shipments, Columns: [ship_id, cust_id, weight, truck_id, driver_id, city_id, ship_date]",
        "Response": "Table: Shipments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Region_ID, Region_name, Date, Label, Format, Catalogue) VALUES (2, 'United Kingdom', '1 July 2002', 'Parlophone', '2\u00d7 LP', '539 9821');\nDatabase State:\n- Table: party_events, Columns: [Event_ID, Event_Name, Party_ID, Member_in_charge_ID]\n- Table: member, Columns: [Member_ID, Member_Name, Party_ID, In_office]\n- Table: party, Columns: [Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name]",
        "Response": "Table: region"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, found_in_taxon, instance_of, ensembl_gene_id, refseq_rna_id, encodes) VALUES ('UQCRFS1P1', 'pseudogene in the species Homo sapiens', '100128525', 'Homo sapiens', 'pseudogene', 'ENSG00000226085', 'nan', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO trip (id, duration, start_date, start_station_name, end_date, end_station_name, bike_id, subscription_type, zip_code) VALUES (902504, 24430, '8/24/2015 11:08', 'Davis at Jackson', 42, '8/24/2015 17:55', 'Davis at Jackson', 42, 630, 'Customer', 94596);\nDatabase State:\n- Table: trip, Columns: [id, duration, start_date, start_station_name, end_date, end_station_name, bike_id, subscription_type, zip_code]",
        "Response": "Table: trip"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ActorID, Name, Date_of_Birth, Birth_City, Birth_Country, Height_(Inches), Biography, Gender, Ethnicity, NetWorth) VALUES (760, 'Sam Anderson', '1984-0-0', 'England', 'UK', 61, 'Samuel Anderson was born in 1984 in England. He is an actor and producer, known for The History Boys (2006), Witless (2016) and The Lady in the Van (2015).', NULL, NULL, NULL);\nDatabase State:\n- Table: characters, Columns: [MovieID, ActorID, Character_Name, creditOrder, pay, screentime]",
        "Response": "Table: actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent) VALUES (2, 1999, 4979, 2.0, 2134, 2.0, '42.9');\nDatabase State:\n- Table: budget, Columns: [School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent]\n- Table: School, Columns: [School_id, School_name, Location, Mascot, Enrollment, IHSAA_Class, IHSAA_Football_Class, County]",
        "Response": "Table: budget"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (case_number, race, gender, last_name, first_name, full_name) VALUES ('871096R', 'B', 'M', 'Lockett', 'Clarence', 'Lockett, Clarence');\nDatabase State:\n- Table: incidents, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]\n- Table: officers, Columns: [case_number, race, gender, last_name, first_name, full_name]",
        "Response": "Table: officers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO manager (Manager_ID, Name, Country, Working_year_starts, Age, Level) VALUES (5, 'Sandy Lyle', 'Scotland', '1985', 48, 8);\nDatabase State:\n- Table: railway_manage, Columns: [Railway_ID, Manager_ID, From_Year]\n- Table: train, Columns: [Train_ID, Train_Num, Name, From, Arrival, Railway_ID]\n- Table: Executives, Columns: [Manager_ID, Name, Country, Working_year_starts, Age, Level]\n- Table: railway, Columns: [Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber]",
        "Response": "Table: Executives"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (book_id, author_id) VALUES (9980, 8988);\nDatabase State:\n- Table: cust_order, Columns: [order_id, order_date, customer_id, shipping_method_id, dest_address_id]\n- Table: book_language, Columns: [language_id, language_code, language_name]\n- Table: customer_address, Columns: [customer_id, address_id, status_id]\n- Table: order_line, Columns: [line_id, order_id, book_id, price]\n- Table: author, Columns: [author_id, author_name]\n- Table: shipping_method, Columns: [method_id, method_name, cost]\n- Table: book_authors, Columns: [book_id, author_id]\n- Table: address_status, Columns: [status_id, address_status]\n- Table: order_status, Columns: [status_id, status_value]\n- Table: publisher, Columns: [publisher_id, publisher_name]\n- Table: address, Columns: [address_id, street_number, street_name, city, country_id]\n- Table: country, Columns: [country_id, country_name]\n- Table: order_history, Columns: [history_id, order_id, status_id, status_date]\n- Table: book, Columns: [book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id]",
        "Response": "Table: book_authors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, part_of, event_distance, competition_class, point_in_time, sport, followed_by, follows, freebase_id) VALUES ('rowing at the 2010 Asian Games \u2013 lightweight men''s coxless four', 'rowing event', 'rowing event', 'rowing at the 2010 Asian Games', 2000.0, 'lightweight men''s coxless four', '+2010-00-00T00:00:00Z', 'rowing', 'rowing at the 2018 Asian Games \u2013 lightweight men''s coxless four', 'rowing at the 2002 Asian Games \u2013 lightweight men''s coxless four', '/m/0w30rhc');\nDatabase State:\n- Table: rowing_at_the_2010_asian_games, Columns: [label, description, instance_of, part_of, event_distance, competition_class, point_in_time, sport, followed_by, follows, freebase_id]\n- Table: followed_by, Columns: [label, description, instance_of, part_of, event_distance, competition_class, point_in_time, sport, follows, location, freebase_id, followed_by]",
        "Response": "Table: rowing_at_the_2010_asian_games"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Publication_ID, Book_ID, Publisher, Publication_Date, Price) VALUES (1, 1, 'Pearson', 'August 2008', 15000000.0);\nDatabase State:\n- Table: BookPublications, Columns: [Publication_ID, Book_ID, Publisher, Publication_Date, Price]",
        "Response": "Table: BookPublications"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, coordinate_location, country, located_in_the_administrative_territorial_entity, image, instance_of, heritage_designation) VALUES ('Nairn, Cawdor Road, Railway Station, Highland Railway Museum', 'architectural structure in Highland, Scotland, UK', 'nan', '57.5801', 'United Kingdom', 'Highland', 'Nairn railway station museum.jpg', 'waiting room', 'category B listed building');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: waiting_room"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO employee (ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID) VALUES ('000-02-2222', 'Adams', 'Sandy', '1/15/01', 'US$19,500.00', 'F', 'Average', 3, 1);\nDatabase State:\n- Table: employee, Columns: [ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, image, historic_county, state_of_use, transport_network, connecting_service, adjacent_station) VALUES ('Failsworth tram stop', 'Manchester Metrolink tram stop', 'United Kingdom', '53.51063055555556', 'Manchester Metrolink tram stop', 'Oldham', 'Failsworth Metrolink station construction.jpg', 'Lancashire', 'in use', 'Manchester Metrolink', 'East Didsbury to Shaw and Crompton', 'Hollinwood tram stop');\nDatabase State:\n- Table: TransportStops, Columns: [label, description, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, image, historic_county, state_of_use, transport_network, connecting_service, adjacent_station]",
        "Response": "Table: TransportStops"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO customer (cust_id, cust_name, annual_revenue, cust_type, address, city, state, zip, phone) VALUES (618, 'Great Dane Trailers Inc', 18681984, 'wholesaler', '5231 West Beaver Street', 'Jacksonville', 'FL', 32254.0, '(904) 786-3300');\nDatabase State:\n- Table: city, Columns: [city_id, city_name, state, population, area]\n- Table: Customers, Columns: [cust_id, cust_name, annual_revenue, cust_type, address, city, state, zip, phone]\n- Table: shipment, Columns: [ship_id, cust_id, weight, truck_id, driver_id, city_id, ship_date]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, instance_of, part_of, applies_to_jurisdiction, follows, followed_by, austlii_id) VALUES ('Section 34 of the Constitution of Australia', 'section of The Commonwealth of Australia Constitution Act 1900', 'Australia', 'law', 'Constitution of Australia', 'Australia', 'Section 33 of the Constitution of Australia', 'Section 35 of the Constitution of Australia', 'au/legis/cth/consol_act/coaca430/s34');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: constitution_of_australia"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Projects (Code, Name, Hours) VALUES ('Che2', 'A Soluble Separation Solution', 778);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Projects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, refseq_protein_id, found_in_taxon, encoded_by, part_of, instance_of, uniprot_protein_id) VALUES ('hypothetical protein    MSMEG_0365', 'microbial protein found in Mycobacterium smegmatis str. MC2 155', 'YP_884778', 'Mycobacterium smegmatis str. MC2 155', 'hypothetical protein MSMEG_0365', 'Type VII secretion system ESAT-6-like', 'protein', 'A0QPE0');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, subclass_of, found_in_taxon, entrez_gene_id, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: protein_of_unknown_function_duf1023"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO natural_product (label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, genbank_assembly_accession_number, gram_staining) VALUES ('Bacteroides thetaiotaomicron VPI-5482', 'nan', 'taxon', 'Bacteroides thetaiotaomicron VPI-5482', 'Bacteroides thetaiotaomicron', '226186', 'GCA_000011065.1', 'Gram-negative bacteria');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, catalogue_of_life_id, gram_staining, lpsn_url, microsoft_academic_id]\n- Table: encodes, Columns: [label, description, encoded_by, uniprot_protein_id, molecular_function, biological_process, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: Bacteria, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, genbank_assembly_accession_number, gram_staining]",
        "Response": "Table: Bacteria"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, courseLevel) VALUES (167, 'Level_500');\nDatabase State:\n- Table: course, Columns: [course_id, courseLevel]\n- Table: advisedBy, Columns: [p_id, p_id_dummy]",
        "Response": "Table: course"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler) VALUES (336040, 1, 5, 1, 4, 1, 1, 100, 25, 105);\nDatabase State:\n- Table: Venue, Columns: [Venue_Id, Venue_Name, City_Id]\n- Table: Out_Type, Columns: [Out_Id, Out_Name]\n- Table: Extra_Type, Columns: [Extra_Id, Extra_Name]\n- Table: Player, Columns: [Player_Id, Player_Name, DOB, Batting_hand, Bowling_skill, Country_Name]\n- Table: Extra_Runs, Columns: [Match_Id, Over_Id, Ball_Id, Extra_Type_Id, Extra_Runs, Innings_No]\n- Table: Wicket_Taken, Columns: [Match_Id, Over_Id, Ball_Id, Player_Out, Kind_Out, Fielders, Innings_No]\n- Table: Rolee, Columns: [Role_Id, Role_Desc]\n- Table: Win_By, Columns: [Win_Id, Win_Type]\n- Table: Player_Match, Columns: [Match_Id, Player_Id, Role_Id, Team_Id]\n- Table: Season, Columns: [Season_Id, Man_of_the_Series, Orange_Cap, Purple_Cap, Season_Year]\n- Table: Match, Columns: [Match_Id, Team_1, Team_2, Match_Date, Season_Id, Venue_Id, Toss_Winner, Toss_Decide, Win_Type, Win_Margin, Outcome_type, Match_Winner, Man_of_the_Match]\n- Table: Outcome, Columns: [Outcome_Id, Outcome_Type]\n- Table: Batting_Style, Columns: [Batting_Id, Batting_hand]\n- Table: Batsman_Scored, Columns: [Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No]\n- Table: Umpire, Columns: [Umpire_Id, Umpire_Name, Umpire_Country]\n- Table: Country, Columns: [Country_Id, Country_Name]\n- Table: Bowling_Style, Columns: [Bowling_Id, Bowling_skill]\n- Table: Ball_by_Ball, Columns: [Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler]\n- Table: Team, Columns: [Team_Id, Team_Name]",
        "Response": "Table: Ball_by_Ball"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, date_of_birth, sex_or_gender, position_held, given_name, occupation, country_of_citizenship, family_name, languages_spoken_written_or_signed, candidacy_in_election, freebase_id, sa_parliament_member_id) VALUES ('1990 Custance state by-election', 'South Australian state by-election', 'South Australian House of Assembly by-election', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', '/m/05fb0ws', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: candidate"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO protected_zones_of_national_interest (label, description, coordinate_location, country, instance_of, area, described_at_url, inception, located_in_the_administrative_territorial_entity, code, location, geoshape, inaturalist_place_id, official_name) VALUES ('Strombierg', 'Nature reserve in Luxembourg', '49.462', 'Luxembourg', 'protected zones of national interest', 29.19999999999999929, 'http://legilux.public.lu/eli/etat/leg/rgd/1993/04/20/n1/jo', '+1993-04-20T00:00:00Z', 'Schengen', 'RF 11', 'Schengen', 'Data:ZPIN Strombierg.map', '157313', 'Strombierg');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, commons_category, country, coat_of_arms_image, coordinate_location, instance_of, topics_main_category, freebase_id, geonames_id, viaf_id, shares_border_with, area, official_website, elevation_above_sea_level, population, capital, lau, whos_on_first_id, category_for_the_view_of_the_item, inaturalist_place_id, located_in_the_administrative_territorial_entity]\n- Table: capital_city, Columns: [label, description, country, instance_of, capital_of, population]\n- Table: physical_location, Columns: [label, description, commons_category, country, coordinate_location, instance_of, topics_main_category, freebase_id, geonames_id, shares_border_with, area, official_website, elevation_above_sea_level, population, lau, whos_on_first_id, inaturalist_place_id, located_in_the_administrative_territorial_entity]\n- Table: political_border, Columns: [label, description, commons_category, country, coat_of_arms_image, coordinate_location, instance_of, topics_main_category, freebase_id, geonames_id, viaf_id, elevation_above_sea_level, shares_border_with, area, official_website, image, population, lau, whos_on_first_id, inaturalist_place_id, located_in_the_administrative_territorial_entity, capital]\n- Table: administrative_centre, Columns: [label, description, commons_category, coordinate_location, country, instance_of, topics_main_category, freebase_id, geonames_id, viaf_id, elevation_above_sea_level, population, shares_border_with, area, official_website, coat_of_arms_image, lau, whos_on_first_id, capital, inaturalist_place_id, located_in_the_administrative_territorial_entity, image]",
        "Response": "Table: protected_zones_of_national_interest"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (prof_id, gender, first_name, last_name, email, popularity, teachingability, graduate_from) VALUES (7, 'Female', 'Millie', 'Cunningham', 'mcunningham6@stanford.edu', 2, 5, 'Massachusetts Institute of Technology');\nDatabase State:\n- Table: course, Columns: [course_id, name, credit, diff]\n- Table: registration, Columns: [course_id, student_id, grade, sat]\n- Table: RA, Columns: [student_id, capability, prof_id, salary]\n- Table: student, Columns: [student_id, f_name, l_name, phone_number, email, intelligence, gpa, type]\n- Table: prof, Columns: [prof_id, gender, first_name, last_name, email, popularity, teachingability, graduate_from]",
        "Response": "Table: prof"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Track_ID, Name, Location, Seating, Year_Opened) VALUES (2, 'Chicagoland Speedway', 'Joliet, IL', 75000.0, 2001.0);\nDatabase State:\n- Table: race, Columns: [Race_ID, Name, Class, Date, Track_ID]",
        "Response": "Table: track"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (book_id, author_id) VALUES (6297, 1309);\nDatabase State:\n- Table: customer, Columns: [customer_id, first_name, last_name, email]\n- Table: country, Columns: [country_id, country_name]\n- Table: book, Columns: [book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id]\n- Table: address, Columns: [address_id, street_number, street_name, city, country_id]\n- Table: book_language, Columns: [language_id, language_code, language_name]\n- Table: order_status, Columns: [status_id, status_value]\n- Table: book_authors, Columns: [book_id, author_id]",
        "Response": "Table: book_authors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (date, store_nbr, item_nbr, units) VALUES ('2014-04-16', 22, 12, 0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (region_id, game_platform_id, num_sales) VALUES (1, 6859, 0.0);\nDatabase State:\n- Table: genre, Columns: [id, genre_name]\n- Table: platform, Columns: [id, platform_name]\n- Table: GameRegionSales, Columns: [region_id, game_platform_id, num_sales]\n- Table: publisher, Columns: [id, publisher_name]\n- Table: region, Columns: [id, region_name]\n- Table: game, Columns: [id, genre_id, game_name]\n- Table: game_platform, Columns: [id, game_publisher_id, platform_id, release_year]",
        "Response": "Table: GameRegionSales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO EMPLOYEE (EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB) VALUES (105, 'Heffington', 'Arnelle', 'B', 'PROF', '1991-7-1', '1950-11-2');\nDatabase State:\n- Table: ENROLL, Columns: [CLASS_CODE, STU_NUM, ENROLL_GRADE]\n- Table: EMPLOYEE, Columns: [EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB]\n- Table: PROFESSOR, Columns: [EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]\n- Table: STUDENT, Columns: [STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]",
        "Response": "Table: EMPLOYEE"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO national_parks_of_israel (label, description, instance_of, commons_category, coordinate_location, image, located_in_the_administrative_territorial_entity, geonames_id, country) VALUES ('Tel Hazor', 'Archeological site in Israel', 'ancient city', 'Hatzor', '33.018333333333', 'Tel hatzor.JPG', 'Northern District', '293365.0', 'Israel');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: national_parks_of_israel"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO paragraphs (id, ParagraphNum, PlainText, character_id, chapter_id) VALUES (642994, 835, replace('Poor soul, God''s goodness hath been great to thee:\\nLet never day nor night unhallow''d pass,\\nBut still remember what the Lord hath done.','\\n',char(10)), 574, 18993);\nDatabase State:\n- Table: chapters, Columns: [id, Act, Scene, Description, work_id]\n- Table: book_text, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]\n- Table: works, Columns: [id, Title, LongTitle, Date, GenreType]",
        "Response": "Table: book_text"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO actor (ActorID, Name, Date_of_Birth, Birth_City, Birth_Country, Height_(Inches), Biography, Gender, Ethnicity, NetWorth) VALUES (2436, 'Nick Frost', '1972-03-28', 'Hornchurch', 'UK', 68, 'Nick Frost is an English actor, screenwriter and comedian. He is known for his work in the series of British comedic genre films The Three Flavours Cornetto trilogy, Shaun of the Dead (2004), Hot Fuzz (2007), and The World''s End (2013). He also co-starred in Paul (2011), with frequent collaborator and friend Simon Pegg. Nicholas John \"Nick\" Frost ...', NULL, NULL, NULL);\nDatabase State:\n- Table: Celebrities, Columns: [ActorID, Name, Date_of_Birth, Birth_City, Birth_Country, Height_(Inches), Biography, Gender, Ethnicity, NetWorth]",
        "Response": "Table: Celebrities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1016, 'Schwartz', 'Mark', 17, 'M', 600, 2192, 'DET');\nDatabase State:\n- Table: Pets, Columns: [PetID, PetType, pet_age, weight]\n- Table: Has_Pet, Columns: [StuID, PetID]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Answer (AnswerText, SurveyID, UserID, QuestionID) VALUES ('1', 2016, 2559, 22);\nDatabase State:\n- Table: Survey, Columns: [SurveyID, Description]",
        "Response": "Table: Answer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (playerID, award, year, lgID, note, pos) VALUES ('cousybo01', 'All-NBA First Team', 1953, 'NBA', NULL, NULL);\nDatabase State:\n- Table: awards_coaches, Columns: [id, year, coachID, award, lgID, note]\n- Table: teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, confRank, playoff, name, o_fgm, o_ftm, o_pts, d_pts, homeWon, homeLost, awayWon, awayLost, won, lost, games, arena]\n- Table: players_teams, Columns: [id, playerID, year, stint, tmID, lgID, GP, GS, minutes, points, oRebounds, dRebounds, rebounds, assists, steals, blocks, turnovers, PF, fgAttempted, fgMade, ftAttempted, ftMade, threeAttempted, threeMade, PostGP, PostGS, PostMinutes, PostPoints, PostoRebounds, PostdRebounds, PostRebounds, PostAssists, PostSteals, PostBlocks, PostTurnovers, PostPF, PostfgAttempted, PostfgMade, PostftAttempted, PostftMade, PostthreeAttempted, PostthreeMade, note]\n- Table: series_post, Columns: [id, year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L]\n- Table: coaches, Columns: [coachID, year, tmID, lgID, stint, won, lost, post_wins, post_losses]\n- Table: players, Columns: [playerID, useFirst, firstName, middleName, lastName, nameGiven, fullGivenName, nameSuffix, nameNick, pos, firstseason, lastseason, height, weight, college, collegeOther, birthDate, birthCity, birthState, birthCountry, highSchool, hsCity, hsState, hsCountry, deathDate, race]\n- Table: draft, Columns: [id, draftYear, draftRound, draftSelection, draftOverall, tmID, firstName, lastName, suffixName, playerID, draftFrom, lgID]",
        "Response": "Table: awards_players"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Shop_ID, Employee_ID, Start_from, Is_full_time) VALUES (4, 4, '2012', 'T');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: hiring"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movie_id, Title, Year, Director, Budget_million, Gross_worldwide) VALUES (4, 'Jill Rips', 2000, 'Anthony Hickox', 4.0, 456774);\nDatabase State:\n- Table: culture_company, Columns: [Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id]\n- Table: book_club, Columns: [book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result]\n- Table: Films, Columns: [movie_id, Title, Year, Director, Budget_million, Gross_worldwide]",
        "Response": "Table: Films"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (truck_id, truck_licence_number, truck_details) VALUES (10, '47865', 'Holly');\nDatabase State:\n- Table: Order_Deliveries, Columns: [location_code, actual_order_id, delivery_status_code, driver_employee_id, truck_id, delivery_date]\n- Table: Employees, Columns: [employee_id, employee_address_id, employee_name, employee_phone]\n- Table: Trucks, Columns: [truck_id, truck_licence_number, truck_details]\n- Table: Delivery_Route_Locations, Columns: [location_code, route_id, location_address_id, location_name]",
        "Response": "Table: Trucks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding, amount_of_refund) VALUES (15, 9, 'Provisional', '1', '2017-04-28 08:35:56', '2018-01-18 23:54:44', '994', 306.259999999999991, 78.31000000000000227, 93.8799999999999955, 124.9500000000000028);\nDatabase State:\n- Table: Discount_Coupons, Columns: [coupon_id, date_issued, coupon_amount]\n- Table: Bookings, Columns: [booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding, amount_of_refund]\n- Table: View_Product_Availability, Columns: [product_id, booking_id, status_date, available_yn]",
        "Response": "Table: Bookings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, country, topics_main_category, commons_category, geonames_id, population, area, image, freebase_id, openstreetmap_relation_id, whos_on_first_id) VALUES ('Copeland', 'local government district and borough in western Cumbria, England', '54.431', 'non-metropolitan district', 'Cumbria', 'United Kingdom', 'Category:Borough of Copeland', 'Borough of Copeland', '7290665.0', 68424.0, 731.741899999999987, 'Whitehaven Town - geograph.org.uk - 1274629.jpg', '/m/029rrq', '178136.0', 'nan');\nDatabase State:\n- Table: waiting_room, Columns: [label, description, commons_category, coordinate_location, country, located_in_the_administrative_territorial_entity, image, instance_of, heritage_designation]\n- Table: Cities, Columns: [label, description, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, country, topics_main_category, commons_category, geonames_id, population, area, image, freebase_id, openstreetmap_relation_id, whos_on_first_id]",
        "Response": "Table: Cities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO inspections (business_id, score, date, type) VALUES (2053, 90, '2015-07-30', 'Routine - Unscheduled');\nDatabase State:\n- Table: inspections, Columns: [business_id, score, date, type]",
        "Response": "Table: inspections"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross) VALUES ('Mars Needs Moms', 'Mar 11, 2011', 'Adventure', 'PG', '$21,392,758', '$22,741,603');\nDatabase State:\n- Table: voice_actors, Columns: [character, voice_actor, movie]\n- Table: revenue, Columns: [Year, Studio_Entertainment[NI_1], Disney_Consumer_Products[NI_2], Disney_Interactive[NI_3][Rev_1], Walt_Disney_Parks_and_Resorts, Disney_Media_Networks, Total]\n- Table: characters, Columns: [movie_title, release_date, hero, villian, song]\n- Table: director, Columns: [name, director]",
        "Response": "Table: movies_total_gross"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, taxon_rank, parent_taxon, taxon_name, instance_of, ncbi_taxonomy_id, gbif_taxon_id, itis_tsn, gram_staining, irmng_id, lpsn_url, catalogue_of_life_id) VALUES ('Bradyrhizobium', 'genus of bacteria', 'genus', 'Bradyrhizobiaceae', 'Bradyrhizobium', 'taxon', '374.0', '3221031.0', '956850.0', 'Gram-negative bacteria', '1063563.0', 'http://www.bacterio.net/bradyrhizobium.html', '3CR4');\nDatabase State:\n- Table: natural_product, Columns: [label, description, taxon_name, instance_of, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: taxon, Columns: [label, description, taxon_rank, parent_taxon, taxon_name, instance_of, ncbi_taxonomy_id, gbif_taxon_id, itis_tsn, gram_staining, irmng_id, lpsn_url, catalogue_of_life_id]\n- Table: encoded_by, Columns: [label, description, subclass_of, found_in_taxon, entrez_gene_id, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: taxon"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO breweries (id, name, city, state) VALUES (437, 'Brooklyn Brewery', 'Brooklyn', 'NY');\nDatabase State:\n- Table: beers, Columns: [id, brewery_id, abv, ibu, name, style, ounces]\n- Table: breweries, Columns: [id, name, city, state]",
        "Response": "Table: breweries"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO user_profiles (uid) VALUES (4, 'Susan', replace('susan@gmail.com\\n','\\n',char(10)), 1, 100);\nDatabase State:\n- Table: user_profiles, Columns: [uid]",
        "Response": "Table: user_profiles"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (case_number, race, gender, last_name, first_name, full_name) VALUES ('266084V', 'B', 'M', 'Swify', 'Amir', 'Swify, Amir');\nDatabase State:\n- Table: Defendants, Columns: [case_number, race, gender, last_name, first_name, full_name]",
        "Response": "Table: Defendants"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (student_id) VALUES (1934, 1304);\nDatabase State:\n- Table: Likes, Columns: [student_id]\n- Table: Highschooler, Columns: [ID]\n- Table: Student_Friends, Columns: [student_id]",
        "Response": "Table: Student_Friends"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO student (student_id, f_name, l_name, phone_number, email, intelligence, gpa, type) VALUES (37, 'Silvano', 'Daly', '(146) 4601553', 'sdaly10@hku.hk', 2, 3.799999999999999823, 'RPG');\nDatabase State:\n- Table: course, Columns: [course_id, name, credit, diff]\n- Table: registration, Columns: [course_id, student_id, grade, sat]\n- Table: prof, Columns: [prof_id, gender, first_name, last_name, email, popularity, teachingability, graduate_from]\n- Table: RA, Columns: [student_id, capability, prof_id, salary]",
        "Response": "Table: student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (project_id, outcome_code, outcome_details) VALUES (3, 'Patent', NULL);\nDatabase State:\n- Table: Organisation_Types, Columns: [organisation_type, organisation_type_description]",
        "Response": "Table: Project_Outcomes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO events (Date_received, Product, Sub_product, Issue, Sub_issue, Consumer_complaint_narrative, Tags, Consumer_consent_provided?, Submitted_via, Date_sent_to_company, Company_response_to_consumer, Timely_response?, Consumer_disputed?, Complaint_ID, Client_ID) VALUES ('2015-07-27', 'Bank account or service', '(CD) Certificate of deposit', 'Account opening, closing, or management', NULL, NULL, NULL, 'N/A', 'Referral', '2015-08-13', 'Closed with explanation', 'Yes', 'No', 'CR1488604', 'C00000738');\nDatabase State:\n- Table: callcenterlogs, Columns: [Date_received, Complaint_ID, rand_client, phonefinal, vru+line, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time]\n- Table: client, Columns: [client_id, sex, day, month, year, age, social, first, middle, last, phone, email, address_1, address_2, city, state, zipcode, district_id]\n- Table: reviews, Columns: [Date, Stars, Reviews, Product, district_id]\n- Table: state, Columns: [StateCode, State, Region]\n- Table: district, Columns: [district_id, city, state_abbrev, division]",
        "Response": "Table: events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Apartment_Buildings (building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone) VALUES (790, 'Biltmore Plaza', 'Biltmore Plaza', 'Duplex', replace('489 Josh Orchard Apt. 998\\nSipesview, DE 69053','\\n',char(10)), 'Sydni', '544-148-5565x2847');\nDatabase State:\n- Table: View_Unit_Status, Columns: [apt_id, apt_booking_id, status_date, available_yn]\n- Table: Apartment_Buildings, Columns: [building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone]",
        "Response": "Table: Apartment_Buildings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, collection, image, location, inception, inventory_number, height, width) VALUES ('A Couple in Amorous Embrace', 'nan', 'watercolor painting', 'Los Angeles County Museum of Art', 'Abdullah Bukhari - A Couple in Amorous Embrace - LACMA M.85.237.49.jpg', 'nan', '+1744-00-00T00:00:00Z', 'M.85.237.49', 17.10000000000000143, 11.69999999999999929);\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, twinned_administrative_body, located_in_the_administrative_territorial_entity, country, coordinate_location, freebase_id, instance_of, geonames_id, topics_main_category, commons_category, official_website, image, page_banner, population, area, locator_map_image, openstreetmap_relation_id, postal_code, whos_on_first_id, elevation_above_sea_level, gnd_id, musicbrainz_area_id, library_of_congress_authority_id, category_of_associated_people, inception, head_of_government, quora_topic_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, viaf_id, different_from, rkd_thesaurus_id, national_library_of_israel_j9u_id, worldcat_identities_id]\n- Table: collection, Columns: [label, description, commons_category, coordinate_location, freebase_id, viaf_id, idref_id, isni, library_of_congress_authority_id, official_website, inception, image, located_in_the_administrative_territorial_entity, instance_of, commons_institution_page, country, biblioth\u00e8que_nationale_de_france_id, worldcat_identities_id, national_library_of_israel_j9u_id]",
        "Response": "Table: album_leaf"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO perpetrator (Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured) VALUES (3, 4, '05.21 May 21', 1938.0, 'Kaio', 'Japan', 30, 3);\nDatabase State:\n- Table: ViolentIncidents, Columns: [Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured]",
        "Response": "Table: ViolentIncidents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO population (Country, Population_Growth, Infant_Mortality) VALUES ('THA', 1.030000000000000026, 33.39999999999999858);\nDatabase State:\n- Table: geo_estuary, Columns: [River, Country, Province]\n- Table: continent, Columns: [Name, Area]\n- Table: city, Columns: [Name, Country, Province, Population, Longitude, Latitude]\n- Table: isMember, Columns: [Country, Organization, Type]\n- Table: geo_sea, Columns: [Sea, Country, Province]\n- Table: locatedOn, Columns: [City, Province, Country, Island]\n- Table: sea, Columns: [Name, Depth]\n- Table: politics, Columns: [Country, Independence, Dependent, Government]\n- Table: island, Columns: [Name, Islands, Area, Height, Type, Longitude, Latitude]\n- Table: target, Columns: [Country, Target]\n- Table: World_Statistics, Columns: [Country, Population_Growth, Infant_Mortality]\n- Table: country, Columns: [Name, Code, Capital, Province, Area, Population]\n- Table: province, Columns: [Name, Country, Population, Area, Capital, CapProv]\n- Table: river, Columns: [Name, River, Lake, Sea, Length, SourceLongitude, SourceLatitude, Mountains, SourceAltitude, EstuaryLongitude, EstuaryLatitude]\n- Table: organization, Columns: [Abbreviation, Name, City, Country, Province, Established]\n- Table: mountain, Columns: [Name, Mountains, Height, Type, Longitude, Latitude]\n- Table: located, Columns: [City, Province, Country, River, Lake, Sea]\n- Table: lake, Columns: [Name, Area, Depth, Altitude, Type, River, Longitude, Latitude]\n- Table: mountainOnIsland, Columns: [Mountain, Island]\n- Table: encompasses, Columns: [Country, Continent, Percentage]\n- Table: geo_island, Columns: [Island, Country, Province]",
        "Response": "Table: World_Statistics"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO orthology (label, description, entrez_gene_id, subclass_of, ensembl_gene_id, homologene_id, chromosome, found_in_taxon, refseq_rna_id, ensembl_transcript_id, encodes, mouse_genome_informatics_id, ortholog, exact_match, mgi_gene_symbol, strand_orientation, instance_of, cytogenetic_location, genomic_start, genomic_end, expressed_in) VALUES ('Mlh1', 'protein-coding gene in the species Mus musculus', '17350', 'protein-coding gene', 'ENSMUSG00000032498', '208', 'mouse chromosome 9', 'house mouse', 'NM_026810', 'ENSMUST00000035079', 'MutL homolog 1', 'MGI:101938', 'MLH1', 'http://identifiers.org/ncbigene/17350', 'Mlh1', 'reverse strand', 'gene', '9 F3|9 60.92 cM', '111057296', '111100859', 'saccule');\nDatabase State:\n- Table: biological_variant_of, Columns: [label, description, entrez_gene_id, subclass_of, ensembl_gene_id, ensembl_transcript_id, hgnc_gene_symbol, hgnc_id, homologene_id, refseq_rna_id, ortholog, image, encodes, found_in_taxon, exact_match, strand_orientation, genomic_end, genomic_start, chromosome, gene_atlas_image, instance_of, cytogenetic_location, omim_id, expressed_in, civic_gene_id, genetic_association]",
        "Response": "Table: orthology"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO person_region (person_id, region_id) VALUES (67920, 110);\nDatabase State:\n- Table: competitor_event, Columns: [event_id, competitor_id, medal_id]\n- Table: games_city, Columns: [games_id, city_id]\n- Table: sport, Columns: [id, sport_name]",
        "Response": "Table: person_region"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO rootbeer (RootBeerID, BrandID, ContainerType, LocationID, PurchaseDate) VALUES (100265, 10002, 'Bottle', 2, '2015-04-02');\nDatabase State:\n- Table: transaction, Columns: [TransactionID, CreditCardNumber, CustomerID, TransactionDate, CreditCardType, LocationID, RootBeerID, PurchasePrice]\n- Table: rootbeerreview, Columns: [CustomerID, BrandID, StarRating, ReviewDate, Review]\n- Table: RootBeerPurchases, Columns: [RootBeerID, BrandID, ContainerType, LocationID, PurchaseDate]\n- Table: location, Columns: [LocationID, LocationName, StreetAddress, City, State, ZipCode]\n- Table: rootbeerbrand, Columns: [BrandID, BrandName, FirstBrewedYear, BreweryName, City, State, Country, Description, CaneSugar, CornSyrup, Honey, ArtificialSweetener, Caffeinated, Alcoholic, AvailableInCans, AvailableInBottles, AvailableInKegs, Website, FacebookPage, Twitter, WholesaleCost, CurrentRetailPrice]\n- Table: customers, Columns: [CustomerID, First, Last, StreetAddress, City, State, ZipCode, Email, PhoneNumber, FirstPurchaseDate, SubscribedToEmailList, Gender]",
        "Response": "Table: RootBeerPurchases"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO inspection (inspection_id, inspection_date, inspection_type, results, employee_id, license_no, followup_to) VALUES (543237, '2011-02-24', 'Canvass', 'Pass', 153225, 25381, NULL);\nDatabase State:\n- Table: inspection, Columns: [inspection_id, inspection_date, inspection_type, results, employee_id, license_no, followup_to]",
        "Response": "Table: inspection"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, part_of, location, country, sport, point_in_time, follows, short_name, ijf_competition_id, judoinside_competition_id, organizer, followed_by, number_of_participants) VALUES ('2019 World Judo Championships \u2013 men''s 100 kg', 'judo competition', '2019 World Judo Championships', '2019 World Judo Championships', 'Nippon Budokan', 'Japan', 'judo', '+2019-08-30T00:00:00Z', '2018 World Judo Championships \u2013 men''s 100 kg', 'Tokyo 2019', '1751/draw?id_weight=6', '13500/judo-matches?cId=100', 'nan', '2021 World Judo Championships \u2013 Men''s 100 kg', 60.0);\nDatabase State:\n- Table: 2019_world_judo_championships, Columns: [label, description, instance_of, part_of, sport, follows, winner, location, google_knowledge_graph_id, followed_by, country, point_in_time, ijf_competition_id, judoinside_competition_id, short_name, number_of_participants]\n- Table: political_border, Columns: [label, description, shares_border_with, commons_category, country, flag_image, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, instance_of, freebase_id, locator_map_image, geonames_id, musicbrainz_area_id, openstreetmap_relation_id, official_website, population, area, located_in_time_zone, coat_of_arms_image, whos_on_first_id, inaturalist_place_id, image, viaf_id, worldcat_identities_id]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Policies (Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date) VALUES (507, 858, 'Uniformed', '2017-03-19 03:11:19', '2017-11-01 00:41:27');\nDatabase State:\n- Table: Claims_Documents, Columns: [Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date]",
        "Response": "Table: Policies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO PlayerInfo (ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0) VALUES (14962, 'Brent Regner', '1989-05-17', 1989, 5, 17, 'Westlock, AB, CAN', 'Canada', 71, 190, 'D', 'R', 2008, 5, 137, 'Columbus Blue Jackets', 203, 0, 0, 'no');\nDatabase State:\n- Table: SeasonStatus, Columns: [ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS]\n- Table: weight_info, Columns: [weight_id, weight_in_kg, weight_in_lbs]",
        "Response": "Table: PlayerInfo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO visitor (ID, Name, Level_of_membership, Age) VALUES (2, 'Guti Midfielder', 5, 28);\nDatabase State:\n- Table: visit, Columns: [Museum_ID, visitor_ID, Num_of_Ticket, Total_spent]\n- Table: museum, Columns: [Museum_ID, Name, Num_of_Staff, Open_Year]\n- Table: Members, Columns: [ID, Name, Level_of_membership, Age]",
        "Response": "Table: Members"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, entrez_gene_id, ensembl_gene_id, ensembl_transcript_id, homologene_id, refseq_rna_id, ortholog, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, chromosome, instance_of, expressed_in) VALUES ('SLC35B1', 'protein-coding gene in the species Homo sapiens', '10237', 'ENSG00000121073', 'ENST00000515850', '4252.0', 'XM_011524180', 'Slc35b1', 'Solute carrier family 35 member B1', 'Homo sapiens', 'reverse strand', '49709014', '47778305', 'human chromosome 17', 'gene', 'islet of Langerhans');\nDatabase State:\n- Table: encodes, Columns: [label, description, ensembl_protein_id, found_in_taxon, uniprot_protein_id, encoded_by, refseq_protein_id, biological_process, cell_component, molecular_function, instance_of, part_of]\n- Table: expressed_in, Columns: [label, description, foundational_model_of_anatomy_id, instance_of, uberon_id, subclass_of]\n- Table: uaa_transporter, Columns: [label, description, ensembl_protein_id, uniprot_protein_id, encoded_by, biological_process, molecular_function, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encodes (label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('Dipeptidase SMc01524', 'microbial protein found in Sinorhizobium meliloti 1021', 'dipeptidase SMc01524', 'Q92N25', 'proteolysis', 'dipeptidase activity', 'Sinorhizobium meliloti 1021', 'NP_386520', 'protein', 'Dipeptidase 1', 'protein');\nDatabase State:\n- Table: Protein_Enzymes, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: dipeptidase_1, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, gram_staining, lpsn_url, microsoft_academic_id]",
        "Response": "Table: Protein_Enzymes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (journalist_ID, Name, Nationality, Age, Years_working) VALUES (9, 'Jack Meaney', 'England', '37', 8);\nDatabase State:\n- Table: journalist, Columns: [journalist_ID, Name, Nationality, Age, Years_working]",
        "Response": "Table: journalist"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, instance_of, capital_of, population) VALUES ('Heffingen', 'human settlement in Luxembourg', 'Luxembourg', 'locality', 'Heffingen', 1166.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: capital_city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO procedural_programming_language (label, description, instance_of, freebase_id, inception, programming_paradigm) VALUES ('Standard ML', 'programming language', 'programming language', '/m/0pkgc', '+1983-00-00T00:00:00Z', 'procedural programming');\nDatabase State:\n- Table: procedural_programming_language, Columns: [label, description, instance_of, freebase_id, inception, programming_paradigm]",
        "Response": "Table: procedural_programming_language"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO screen_mode (Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type) VALUES (2.0, '20 \u00d7 32', '160 \u00d7 256', 8.0, 20.0, '3000\u20137FFF', 'Graphics');\nDatabase State:\n- Table: screen_mode, Columns: [Graphics_mode, Char_cells, Pixels, Hardware_colours, used_kb, map, Type]",
        "Response": "Table: screen_mode"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, coordinate_location, freebase_id, located_in_the_administrative_territorial_entity, instance_of, geonames_id, whos_on_first_id) VALUES ('Bilabrin', 'village in N''Guigmi, Niger', 'Niger', '14.4278', 'nan', 'N''Guigmi', 'village', '2446901.0', 'nan');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, country, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, freebase_id, inaturalist_place_id, geonames_id]\n- Table: economy_of_africa, Columns: [label, description, topics_main_category, instance_of, commons_category, quora_topic_id, location, country, subclass_of, inflation_rate, nominal_gdp, nominal_gdp_per_capita, ppp_gdp_per_capita, gdp_ppp, real_gdp_growth_rate, store_norske_leksikon_id]\n- Table: head_of_state, Columns: [label, description, instance_of, sex_or_gender, date_of_birth, place_of_birth, name_in_native_language, commons_category, image, member_of_political_party, occupation, position_held, country_of_citizenship, educated_at, viaf_id]\n- Table: country, Columns: [label, description, dewey_decimal_classification, continent, capital, instance_of, shares_border_with, head_of_state, official_language, currency, top_level_internet_domain, flag_image, anthem, flag, iso_3166_1_alpha_2_code, iso_3166_1_alpha_3_code, iso_3166_1_numeric_code, commons_category, coat_of_arms_image, head_of_government, coordinate_location, contains_the_administrative_territorial_entity, member_of, topics_main_category, locator_map_image, page_banner, coat_of_arms, country_calling_code, ndl_authority_id, curlie_id, ioc_country_code, musicbrainz_area_id, country, freebase_id, fips_10_4_countries_and_regions, highest_point, geonames_id, gnd_id, category_for_people_who_died_here, located_in_time_zone, category_for_films_shot_at_this_location, category_of_associated_people, population, diplomatic_relation, topics_main_wikimedia_portal, commons_gallery, lowest_point, mobile_country_code, demonym, driving_side, geography_of_topic, mains_voltage, electrical_plug_type, legislative_body, history_of_topic, encyclop\u00e6dia_britannica_online_id, coordinates_of_northernmost_point, new_york_times_topic_id, area, human_development_index, quora_topic_id, insee_countries_and_foreign_territories_code, short_name, le_monde_diplomatique_subject_id, unesco_thesaurus_id, coordinates_of_southernmost_point, coordinates_of_easternmost_point, coordinates_of_westernmost_point, office_held_by_head_of_government, yso_id, getty_thesaurus_of_geographic_names_id, stw_thesaurus_for_economics_id, openstreetmap_relation_id, licence_plate_code, us_national_archives_identifier, subreddit, gacs_id, encyclop\u00e6dia_universalis_id, mesh_descriptor_id, gran_enciclop\u00e8dia_catalana_id, office_held_by_head_of_state, has_quality, total_fertility_rate, motto_text, maritime_identification_digits, great_russian_encyclopedia_online_id, wikimedia_outline, civicus_monitor_country_entry, geoshape, brockhaus_enzyklop\u00e4die_online_id, isni, ituisoiec_object_identifier, archinform_location_id, national_library_of_israel_id_old, idref_id, biblioth\u00e8que_nationale_de_france_id, viaf_id, life_expectancy, nkcr_aut_id, statoids_id, itu_letter_code, wipo_st3, inception, asc_leiden_thesaurus_id, emergency_phone_number, unicode_character, iab_code, klexikon_article_id, library_of_congress_authority_id, loc_and_marc_vocabularies_id, part_of, official_name, language_used, comic_vine_id, whos_on_first_id, treccanis_dizionario_di_storia_id, omegawiki_defined_meaning, hds_id, pronunciation_audio, culture, geonlp_id, category_for_maps, french_vikidia_id, spanish_vikidia_id, eurovoc_id, worldcat_identities_id, kbpedia_id, bti_status_index, bti_governance_index, rkd_thesaurus_id, interlingual_index_id, tasteatlas_id, economy_of_topic, uk_parliament_thesaurus_id, wordnet_31_synset_id, demographics_of_topic, inaturalist_place_id, krugosvet_article, idaigazetteer_id, the_world_factbook_country_id, national_library_of_israel_j9u_id, store_norske_leksikon_id, democracy_index, catalan_vikidia_id, museum_digital_place_id, ysa_id, yle_topic_id, postimees_topic_id, den_store_danske_id, bbc_news_topic_id, m49_code, online_pwn_encyclopedia_id, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, central_bank, hashtag, on_focus_list_of_wikimedia_project, gini_coefficient, obo_gazetteer_id, openstreetmap_element, namuwiki_id, official_website, bbc_things_id, fast_id, dr_topic_id, native_label]\n- Table: physical_location, Columns: [label, description, dewey_decimal_classification, continent, capital, instance_of, shares_border_with, head_of_state, official_language, currency, top_level_internet_domain, flag_image, anthem, flag, iso_3166_1_alpha_2_code, iso_3166_1_alpha_3_code, iso_3166_1_numeric_code, commons_category, coat_of_arms_image, head_of_government, coordinate_location, contains_the_administrative_territorial_entity, member_of, topics_main_category, locator_map_image, page_banner, coat_of_arms, country_calling_code, ndl_authority_id, curlie_id, ioc_country_code, musicbrainz_area_id, country, freebase_id, fips_10_4_countries_and_regions, highest_point, geonames_id, gnd_id, category_for_people_who_died_here, located_in_time_zone, category_for_films_shot_at_this_location, category_of_associated_people, population, diplomatic_relation, topics_main_wikimedia_portal, commons_gallery, lowest_point, mobile_country_code, demonym, driving_side, geography_of_topic, mains_voltage, electrical_plug_type, legislative_body, history_of_topic, encyclop\u00e6dia_britannica_online_id, coordinates_of_northernmost_point, new_york_times_topic_id, area, human_development_index, quora_topic_id, insee_countries_and_foreign_territories_code, short_name, le_monde_diplomatique_subject_id, unesco_thesaurus_id, coordinates_of_southernmost_point, coordinates_of_easternmost_point, coordinates_of_westernmost_point, office_held_by_head_of_government, yso_id, getty_thesaurus_of_geographic_names_id, stw_thesaurus_for_economics_id, openstreetmap_relation_id, licence_plate_code, us_national_archives_identifier, subreddit, gacs_id, encyclop\u00e6dia_universalis_id, mesh_descriptor_id, gran_enciclop\u00e8dia_catalana_id, office_held_by_head_of_state, has_quality, total_fertility_rate, motto_text, maritime_identification_digits, great_russian_encyclopedia_online_id, wikimedia_outline, civicus_monitor_country_entry, geoshape, brockhaus_enzyklop\u00e4die_online_id, isni, ituisoiec_object_identifier, archinform_location_id, national_library_of_israel_id_old, idref_id, biblioth\u00e8que_nationale_de_france_id, viaf_id, life_expectancy, nkcr_aut_id, statoids_id, itu_letter_code, wipo_st3, inception, asc_leiden_thesaurus_id, emergency_phone_number, unicode_character, iab_code, klexikon_article_id, library_of_congress_authority_id, loc_and_marc_vocabularies_id, part_of, official_name, language_used, comic_vine_id, whos_on_first_id, treccanis_dizionario_di_storia_id, omegawiki_defined_meaning, hds_id, pronunciation_audio, culture, geonlp_id, category_for_maps, french_vikidia_id, spanish_vikidia_id, eurovoc_id, worldcat_identities_id, kbpedia_id, bti_status_index, bti_governance_index, rkd_thesaurus_id, interlingual_index_id, tasteatlas_id, economy_of_topic, uk_parliament_thesaurus_id, wordnet_31_synset_id, demographics_of_topic, inaturalist_place_id, krugosvet_article, idaigazetteer_id, the_world_factbook_country_id, national_library_of_israel_j9u_id, store_norske_leksikon_id, democracy_index, catalan_vikidia_id, museum_digital_place_id, ysa_id, yle_topic_id, postimees_topic_id, den_store_danske_id, bbc_news_topic_id, m49_code, online_pwn_encyclopedia_id, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, central_bank, hashtag, on_focus_list_of_wikimedia_project, gini_coefficient, obo_gazetteer_id, openstreetmap_element, namuwiki_id, official_website, bbc_things_id, fast_id, dr_topic_id, native_label]",
        "Response": "Table: place_of_birth"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, bncf_thesaurus_id, topics_main_category, freebase_id, subclass_of, library_of_congress_authority_id, quora_topic_id, jstor_topic_id, image, uses, gnd_id, practiced_by, yso_id, national_library_of_israel_j9u_id, nkcr_aut_id, on_focus_list_of_wikimedia_project, openstreetmap_tag_or_key, instance_of, kbpedia_id) VALUES ('chess', 'strategy board game', 'Chess', '8465.0', 'Category:Chess', '/m/01lb5', 'sequential game', 'sh85023121', 'Chess', 'chess', 'Opening chess position from black side.jpg', 'chessboard', '4051891-7', 'chess player', '2757.0', '9.870072850675052e+17', 'ph116822', 'Wikipedia:List of articles all languages should have', 'Tag:sport=chess', 'board game', 'Chess');\nDatabase State:\n- Table: Sports, Columns: [label, description, commons_category, bncf_thesaurus_id, topics_main_category, freebase_id, subclass_of, library_of_congress_authority_id, quora_topic_id, jstor_topic_id, image, uses, gnd_id, practiced_by, yso_id, national_library_of_israel_j9u_id, nkcr_aut_id, on_focus_list_of_wikimedia_project, openstreetmap_tag_or_key, instance_of, kbpedia_id]\n- Table: wikidata_property_related_to_sport, Columns: [label, description, subclass_of, facet_of, instance_of]",
        "Response": "Table: Sports"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO breweries (id, name, city, state) VALUES (166, 'Oskar Blues Brewery', 'Longmont', 'CO');\nDatabase State:\n- Table: beers, Columns: [id, brewery_id, abv, ibu, name, style, ounces]\n- Table: breweries, Columns: [id, name, city, state]",
        "Response": "Table: breweries"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1019, 'Pang', 'Arthur', 18, 'M', 600, 2192, 'WAS');\nDatabase State:\n- Table: Has_Pet, Columns: [StuID, PetID]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Pets, Columns: [PetID, PetType, pet_age, weight]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, Name, Level_of_membership, Age) VALUES (1, 'Gonzalo Higua\u00edn ', 8, 35);\nDatabase State:\n- Table: museum, Columns: [Museum_ID, Name, Num_of_Staff, Open_Year]\n- Table: visit, Columns: [Museum_ID, visitor_ID, Num_of_Ticket, Total_spent]",
        "Response": "Table: visitor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO lake (Name, Area, Depth, Altitude, Type, River, Longitude, Latitude) VALUES ('Great Salt Lake', 4400.0, 10.0, 1279.0, NULL, NULL, -112.5999999999999944, 41.14999999999999858);\nDatabase State:\n- Table: encompasses, Columns: [Country, Continent, Percentage]\n- Table: sea, Columns: [Name, Depth]\n- Table: geo_sea, Columns: [Sea, Country, Province]\n- Table: geo_source, Columns: [River, Country, Province]\n- Table: mergesWith, Columns: [Sea1, Sea2]\n- Table: mountain, Columns: [Name, Mountains, Height, Type, Longitude, Latitude]\n- Table: religion, Columns: [Country, Name, Percentage]\n- Table: city, Columns: [Name, Country, Province, Population, Longitude, Latitude]\n- Table: isMember, Columns: [Country, Organization, Type]\n- Table: organization, Columns: [Abbreviation, Name, City, Country, Province, Established]\n- Table: language, Columns: [Country, Name, Percentage]\n- Table: continent, Columns: [Name, Area]\n- Table: target, Columns: [Country, Target]\n- Table: geo_island, Columns: [Island, Country, Province]\n- Table: mountainOnIsland, Columns: [Mountain, Island]\n- Table: geo_mountain, Columns: [Mountain, Country, Province]\n- Table: economy, Columns: [Country, GDP, Agriculture, Service, Industry, Inflation]\n- Table: ethnicGroup, Columns: [Country, Name, Percentage]\n- Table: geo_river, Columns: [River, Country, Province]\n- Table: located, Columns: [City, Province, Country, River, Lake, Sea]\n- Table: geo_estuary, Columns: [River, Country, Province]\n- Table: locatedOn, Columns: [City, Province, Country, Island]\n- Table: politics, Columns: [Country, Independence, Dependent, Government]\n- Table: islandIn, Columns: [Island, Sea, Lake, River]\n- Table: island, Columns: [Name, Islands, Area, Height, Type, Longitude, Latitude]\n- Table: province, Columns: [Name, Country, Population, Area, Capital, CapProv]\n- Table: population, Columns: [Country, Population_Growth, Infant_Mortality]\n- Table: borders, Columns: [Country1, Country2, Length]\n- Table: Lakes, Columns: [Name, Area, Depth, Altitude, Type, River, Longitude, Latitude]\n- Table: desert, Columns: [Name, Area, Longitude, Latitude]\n- Table: geo_desert, Columns: [Desert, Country, Province]\n- Table: geo_lake, Columns: [Lake, Country, Province]\n- Table: river, Columns: [Name, River, Lake, Sea, Length, SourceLongitude, SourceLatitude, Mountains, SourceAltitude, EstuaryLongitude, EstuaryLatitude]\n- Table: country, Columns: [Name, Code, Capital, Province, Area, Population]",
        "Response": "Table: Lakes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows) VALUES ('2011 Ontario Badminton Championships', 'badminton championships', 'Ontario Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'Canada', '+2011-00-00T00:00:00Z', '2012 Ontario Badminton Championships', 'national championship', '2011 Ontario Badminton Championships \u2013 Men''s singles', '2010 Ontario Badminton Championships');\nDatabase State:\n- Table: Ontario_Badminton_Championships_History, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows]\n- Table: followed_by, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, follows, followed_by, competition_class, has_parts]\n- Table: follows, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows]",
        "Response": "Table: Ontario_Badminton_Championships_History"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Artist_ID, Artist, Age, Famous_Title, Famous_Release_date) VALUES (4, 'Black Flame', 18, 'Imperivm', 'June 23, 2008');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: artist"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (endowment_id, School_id, donator_name, amount) VALUES (7, 4, 'Santiago', 8.849999999999999645);\nDatabase State:\n- Table: budget, Columns: [School_id, Year, Budgeted, total_budget_percent_budgeted, Invested, total_budget_percent_invested, Budget_invested_percent]",
        "Response": "Table: endowment"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Account_ID, Statement_ID, Account_Details) VALUES (61, 57, '930.14');\nDatabase State:\n- Table: Documents, Columns: [Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details]\n- Table: Ref_Document_Types, Columns: [Document_Type_Code, Document_Type_Name, Document_Type_Description]\n- Table: Accounts, Columns: [Account_ID, Statement_ID, Account_Details]\n- Table: Statements, Columns: [Statement_ID, Statement_Details]\n- Table: Projects, Columns: [Project_ID, Project_Details]\n- Table: Ref_Budget_Codes, Columns: [Budget_Type_Code, Budget_Type_Description]\n- Table: Documents_with_Expenses, Columns: [Document_ID, Budget_Type_Code, Document_Details]",
        "Response": "Table: Accounts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity) VALUES (4143493, 8, 9600, 80, 80);\nDatabase State:\n- Table: Products, Columns: [ProductID, Name, Price]\n- Table: Employees, Columns: [EmployeeID, FirstName, MiddleInitial, LastName]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Train_ID, Name, Time, Service) VALUES (2, 'Guruvayur Express', '22:10', 'Daily');\nDatabase State:\n- Table: Train_Schedule, Columns: [Train_ID, Name, Time, Service]\n- Table: train_station, Columns: [Train_ID, Station_ID]",
        "Response": "Table: Train_Schedule"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO content (paper_id, word_cited_id) VALUES ('kiciman00using', 'word3515');\nDatabase State:\n- Table: content, Columns: [paper_id, word_cited_id]\n- Table: cites, Columns: [cited_paper_id, citing_paper_id]",
        "Response": "Table: content"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (authID, lname, fname) VALUES (52, 'James', 'Daniel W. H.');\nDatabase State:\n- Table: Authorship, Columns: [authID, instID, paperID, authOrder]\n- Table: Inst, Columns: [instID, name, country]\n- Table: Papers, Columns: [paperID, title]",
        "Response": "Table: Authors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO taxon (label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, gram_staining, lpsn_url, microsoft_academic_id) VALUES ('Klebsiella pneumoniae', 'species of bacterium', 'Klebsiella', 'Klebsiella pneumoniae', 'taxon', 'species', '9751.0', '/m/02nkxb', '573.0', '3221874.0', '10997609.0', 'Gram-negative bacteria', 'http://www.bacterio.net/klebsiella.html#pneumoniae', '2776933286.0');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: encodes, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, gram_staining, lpsn_url, microsoft_academic_id]\n- Table: dipeptidase_1, Columns: [label, description, encoded_by, uniprot_protein_id, biological_process, molecular_function, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: taxon"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, instance_of, country, located_in_the_administrative_territorial_entity, part_of, follows, followed_by, coordinate_location) VALUES ('Torre di Porto Novaglie', 'torre scomparsa', 'coastal tower', 'Italy', 'nan', 'Coastal towers in Salento', 'Torre del Ricco', 'Torre Montelungo', 'nan');\nDatabase State:\n- Table: follows, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, part_of, follows, followed_by, coordinate_location]\n- Table: coastal_towers_in_salento, Columns: [label, description, country, image, instance_of, coordinate_location, located_in_the_administrative_territorial_entity, part_of, follows, followed_by]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customer_Addresses (customer_id, address_id, date_address_from, address_type, date_address_to) VALUES (2, 14, '2010-12-26 08:52:50', 'Residential', '1979-07-16 18:22:39');\nDatabase State:\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status, order_date, order_details]\n- Table: Products, Columns: [product_id, product_details]\n- Table: Customer_Addresses, Columns: [customer_id, address_id, date_address_from, address_type, date_address_to]\n- Table: Customer_Contact_Channels, Columns: [customer_id, channel_code, active_from_date, active_to_date, contact_number]\n- Table: Order_Items, Columns: [order_id, product_id, order_quantity]\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, date_became_customer, other_customer_details]",
        "Response": "Table: Customer_Addresses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, course_id, sec_id, semester, year, grade) VALUES ('24116', '735', '2', 'Spring', 2010, 'C-');\nDatabase State:\n- Table: Student_Course_Grades, Columns: [ID, course_id, sec_id, semester, year, grade]\n- Table: section, Columns: [course_id, sec_id, semester, year, building, room_number, time_slot_id]",
        "Response": "Table: Student_Course_Grades"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (transaction_id, lot_id) VALUES (2, 11);\nDatabase State:\n- Table: Lots, Columns: [lot_id, investor_id, lot_details]\n- Table: Transaction_Lot_Assignments, Columns: [transaction_id, lot_id]\n- Table: Ref_Transaction_Types, Columns: [transaction_type_code, transaction_type_description]",
        "Response": "Table: Transaction_Lot_Assignments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encodes (label, description, encoded_by, uniprot_protein_id, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of, transporter_classification_database_id) VALUES ('Twin-arginine translocase TatA/TatE family subunit MXAN_RS14335', 'microbial protein found in Myxococcus xanthus DK 1622', 'twin-arginine translocase TatA/TatE family subunit MXAN_RS14335', 'Q1D854', 'plasma membrane', 'Myxococcus xanthus DK 1622', 'WP_011553016', 'protein', 'Sec-independent protein translocase protein TatA/E', '2.A.64.1.2');\nDatabase State:\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, commons_category, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, image, catalogue_of_life_id, mesh_descriptor_id, microsoft_academic_id, openalex_id]\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id]\n- Table: part, Columns: [label, description, interpro_id, instance_of, subclass_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: encodes, Columns: [label, description, encoded_by, uniprot_protein_id, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of, transporter_classification_database_id]\n- Table: porter, Columns: [label, description, encoded_by, uniprot_protein_id, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of, transporter_classification_database_id]\n- Table: cellular_component, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (MovieID, ActorID, Character_Name, creditOrder, pay, screentime) VALUES (33, 251, 'Ivan Putin', 8, NULL, NULL);\nDatabase State:\n- Table: actor, Columns: [ActorID, Name, Date_of_Birth, Birth_City, Birth_Country, Height_(Inches), Biography, Gender, Ethnicity, NetWorth]",
        "Response": "Table: characters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, instance_of, part_of, event_distance, competition_class, point_in_time, sport, followed_by, location, freebase_id, follows) VALUES ('rowing at the 2002 Asian Games \u2013 men''s coxed eight', 'rowing event', 'rowing event', 'rowing at the 2002 Asian Games', 2000.0, 'men''s eight', '+2002-00-00T00:00:00Z', 'rowing', 'rowing at the 2010 Asian Games \u2013 men''s coxed eight', 'Nakdong River', '/m/0w1f45s', 'nan');\nDatabase State:\n- Table: follows, Columns: [label, description, instance_of, part_of, event_distance, competition_class, point_in_time, sport, followed_by, location, freebase_id, follows]\n- Table: rowing_at_the_2010_asian_games, Columns: [label, description, instance_of, part_of, event_distance, competition_class, point_in_time, sport, followed_by, follows, freebase_id]\n- Table: competition_class, Columns: [label, description, instance_of, competition_class, short_name, sport, catalog_code]\n- Table: followed_by, Columns: [label, description, instance_of, part_of, event_distance, competition_class, point_in_time, sport, follows, location, freebase_id, followed_by]",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, encoded_by, ensembl_protein_id, biological_process, cell_component, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of) VALUES ('Lysyl oxidase-like 2 Dmel_CG4402', 'Protein found in Drosophila melanogaster', 'Q9W2C9', 'Loxl2', 'FBpp0071659', 'receptor-mediated endocytosis', 'membrane', 'protein-lysine 6-oxidase activity', 'SRCR-like domain', 'Drosophila melanogaster', 'NP_523806', 'protein', 'Lysyl oxidase');\nDatabase State:\n- Table: Proteins, Columns: [label, description, uniprot_protein_id, encoded_by, ensembl_protein_id, biological_process, cell_component, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: Proteins"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO competition_class (label, description, instance_of, competition_class, short_name, sport, catalog_code) VALUES ('men''s eight', 'competition class in rowing', 'competition class', 'open', 'M8+', 'rowing', '532b264c-47e1-4d35-928a-85d9733928d0');\nDatabase State:\n- Table: 1971_european_rowing_championships, Columns: [label, description, instance_of, competition_class, part_of, described_at_url, follows, followed_by, point_in_time, sport]\n- Table: follows, Columns: [label, description, instance_of, competition_class, part_of, follows, followed_by, point_in_time, sport]\n- Table: followed_by, Columns: [label, description, instance_of, competition_class, part_of, described_at_url, follows, followed_by, point_in_time, sport]\n- Table: Rowing_Competition_Classes, Columns: [label, description, instance_of, competition_class, short_name, sport, catalog_code]",
        "Response": "Table: Rowing_Competition_Classes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movie_id, person_id, department_id, job) VALUES (585, 12890, 2, 'Director');\nDatabase State:\n- Table: keyword, Columns: [keyword_id, keyword_name]\n- Table: movie_crew, Columns: [movie_id, person_id, department_id, job]\n- Table: movie_keywords, Columns: [movie_id, keyword_id]",
        "Response": "Table: movie_crew"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, ParagraphNum, PlainText, character_id, chapter_id) VALUES (664476, 204, 'That you may ruminate.', 709, 19613);\nDatabase State:\n- Table: paragraphs, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]\n- Table: chapters, Columns: [id, Act, Scene, Description, work_id]",
        "Response": "Table: paragraphs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id) VALUES ('0', 'Ave Maria University', 'Ave Maria, Florida', 1998.0, 'Private', 1200, 'Gyrenes', 'The Sun', '1');\nDatabase State:\n- Table: Universities, Columns: [Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id]\n- Table: building, Columns: [building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors]\n- Table: protein, Columns: [common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id]",
        "Response": "Table: Universities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, direction) VALUES (8, 'east');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: trains"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO airport (id, City, Country, IATA, ICAO, name) VALUES (8, 'Boston', 'United States', 'BOS', 'KBOS', 'Logan International Airport');\nDatabase State:\n- Table: operate_company, Columns: [id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding]\n- Table: airport, Columns: [id, City, Country, IATA, ICAO, name]",
        "Response": "Table: airport"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO rental (rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update) VALUES (2408, '2005-06-18 16:50:44.0', 258, 87, '2005-06-19 20:11:44.0', 1, '2006-02-15 21:30:53.0');\nDatabase State:\n- Table: customer, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: country, Columns: [country_id, country, last_update]\n- Table: store, Columns: [store_id, manager_staff_id, address_id, last_update]\n- Table: inventory, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: film_actor, Columns: [actor_id, film_id, last_update]\n- Table: film_text, Columns: [film_id, title, description]\n- Table: actor, Columns: [actor_id, first_name, last_name, last_update]\n- Table: category, Columns: [category_id, name, last_update]\n- Table: city, Columns: [city_id, city, country_id, last_update]\n- Table: payment, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: rental, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]\n- Table: staff, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]",
        "Response": "Table: rental"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows) VALUES ('1974/1975 Swedish Junior Badminton Championships U19', 'badminton championships', 'Swedish Junior Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'Sweden', '+1975-00-00T00:00:00Z', '1975/1976 Swedish Junior Badminton Championships U19', 'national championship', '1974/1975 Swedish Junior Badminton Championships U19 \u2013 Men''s singles', '1973/1974 Swedish Junior Badminton Championships U19');\nDatabase State:\n- Table: Badminton_Championships, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows]",
        "Response": "Table: Badminton_Championships"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Products (product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details) VALUES (15, '2', 'Herbs', 'laurel', '', '57857', 'ut', NULL);\nDatabase State:\n- Table: Ref_Product_Categories, Columns: [product_category_code, product_category_description, unit_of_measure]\n- Table: ProductInventory, Columns: [product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details]",
        "Response": "Table: ProductInventory"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, located_in_the_administrative_territorial_entity, postal_code, follows, followed_by, part_of, coordinate_location, google_knowledge_graph_id) VALUES ('Oita-mera interchange', 'interchange in Oita, Oita prefecture, Japan', 'interchange', 'Japan', '\u014cita', '870-0943', 'Oita-mitsuyoshi interchange', 'Oita-Matsuoka parking area', 'Higashi-Kyushu Expressway', '33.199347222222', '/g/1234t946');\nDatabase State:\n- Table: oita_expressway, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, postal_code, follows, followed_by, coordinate_location, part_of, google_knowledge_graph_id]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Film_ID, Title, Studio, Director, Gross_in_dollar) VALUES (2, 'Tootsie', 'Columbia', 'Sydney Pollack', 177200000);\nDatabase State:\n- Table: market, Columns: [Market_ID, Country, Number_cities]\n- Table: film, Columns: [Film_ID, Title, Studio, Director, Gross_in_dollar]\n- Table: film_market_estimation, Columns: [Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year]",
        "Response": "Table: film"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (River, Country, Province) VALUES ('March', 'CZ', 'Jihomoravsky');\nDatabase State:\n- Table: lake, Columns: [Name, Area, Depth, Altitude, Type, River, Longitude, Latitude]\n- Table: mountain, Columns: [Name, Mountains, Height, Type, Longitude, Latitude]\n- Table: country, Columns: [Name, Code, Capital, Province, Area, Population]\n- Table: located, Columns: [City, Province, Country, River, Lake, Sea]\n- Table: island, Columns: [Name, Islands, Area, Height, Type, Longitude, Latitude]\n- Table: geo_source, Columns: [River, Country, Province]\n- Table: locatedOn, Columns: [City, Province, Country, Island]\n- Table: organization, Columns: [Abbreviation, Name, City, Country, Province, Established]\n- Table: geo_lake, Columns: [Lake, Country, Province]\n- Table: sea, Columns: [Name, Depth]\n- Table: population, Columns: [Country, Population_Growth, Infant_Mortality]\n- Table: borders, Columns: [Country1, Country2, Length]\n- Table: language, Columns: [Country, Name, Percentage]\n- Table: politics, Columns: [Country, Independence, Dependent, Government]\n- Table: province, Columns: [Name, Country, Population, Area, Capital, CapProv]\n- Table: economy, Columns: [Country, GDP, Agriculture, Service, Industry, Inflation]\n- Table: religion, Columns: [Country, Name, Percentage]\n- Table: geo_estuary, Columns: [River, Country, Province]\n- Table: geo_mountain, Columns: [Mountain, Country, Province]",
        "Response": "Table: geo_river"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Member_ID, Branch_ID, Register_Year) VALUES (5, '5', '2016');\nDatabase State:\n- Table: purchase, Columns: [Member_ID, Branch_ID, Year, Total_pounds]\n- Table: member, Columns: [Member_ID, Card_Number, Name, Hometown, Level]\n- Table: branch, Columns: [Branch_ID, Name, Open_year, Address_road, City, membership_amount]\n- Table: Membership_Register, Columns: [Member_ID, Branch_ID, Register_Year]",
        "Response": "Table: Membership_Register"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO journal_committee (Editor_ID, Journal_ID, Work_Type) VALUES (1, 13, 'Photo');\nDatabase State:\n- Table: journal, Columns: [Journal_ID, Date, Theme, Sales]\n- Table: editor, Columns: [Editor_ID, Name, Age]\n- Table: journal_committee, Columns: [Editor_ID, Journal_ID, Work_Type]",
        "Response": "Table: journal_committee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO coastal_towers_in_salento (label, description, country, image, instance_of, coordinate_location, located_in_the_administrative_territorial_entity, part_of, follows, followed_by) VALUES ('Torre Uluzzo', 'tower', 'Italy', 'Torre uluzzo cellulare.jpg', 'tower', '40.15861111', 'Nard\u00f2', 'Coastal towers in Salento', 'Torre Santa Maria dell''Alto', 'Torre Inserraglio');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: coastal_towers_in_salento"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, sport, country, follows, followed_by, point_in_time, edition_number, winner, event_distance) VALUES ('1961 Gent\u2013Wevelgem', 'cycling race', 'Gent\u2013Wevelgem', 'cycle sport', 'Belgium', '1960 Gent\u2013Wevelgem', '1962 Gent\u2013Wevelgem', '+1961-04-16T00:00:00Z', '23', 'Frans Aerenhouts', 231.0);\nDatabase State:\n- Table: GentWevelgemResults, Columns: [label, description, instance_of, sport, country, follows, followed_by, point_in_time, edition_number, winner, event_distance]",
        "Response": "Table: GentWevelgemResults"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, category, person, role, credited) VALUES ('S20-E10', 'Cast', 'Harry Shearer', 'Principal Dondelinger', 'true');\nDatabase State:\n- Table: Episode_Credits, Columns: [episode_id, category, person, role, credited]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, person, role, episode_id, season, song, result]\n- Table: Episode, Columns: [episode_id, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]",
        "Response": "Table: Episode_Credits"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, found_in_taxon, refseq_protein_id, encoded_by, subclass_of, has_parts, cell_component, molecular_function, biological_process, part_of, instance_of) VALUES ('Site-specific tyrosine recombinase XerD EAE_02815', 'microbial protein found in Klebsiella aerogenes KCTC 2190', 'A0A0H3FJD6', 'Enterobacter aerogenes KCTC 2190', 'YP_004590777', 'site-specific tyrosine recombinase XerD EAE_02815', 'protein', 'Integrase, catalytic domain', 'cytoplasm', 'site-specific recombinase activity', 'DNA integration', 'DNA breaking-rejoining enzyme, catalytic core', 'protein');\nDatabase State:\n- Table: ProteinCharacteristics, Columns: [label, description, uniprot_protein_id, found_in_taxon, refseq_protein_id, encoded_by, subclass_of, has_parts, cell_component, molecular_function, biological_process, part_of, instance_of]\n- Table: natural_product, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, genomic_end, strand_orientation, instance_of, genomic_start]",
        "Response": "Table: ProteinCharacteristics"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO place_of_birth (label, description, instance_of, commons_category, coordinate_location, topics_main_category, freebase_id, population, image, country, located_in_the_administrative_territorial_entity) VALUES ('Rrogozhin\u00eb', 'town in Albania', 'town', 'Rrogozhin\u00eb', '41.076111111111', 'Category:Rrogozhin\u00eb', '/m/026144q', 7049.0, 'Rrogozhina.jpg', 'Albania', 'Rrogozhin\u00eb municipality');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: place_of_birth"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO historical (ballotpedia_id, bioguide_id, bioguide_previous_id, birthday_bio, cspan_id, fec_id, first_name, gender_bio, google_entity_id_id, govtrack_id, house_history_alternate_id, house_history_id, icpsr_id, last_name, lis_id, maplight_id, middle_name, nickname_name, official_full_name, opensecrets_id, religion_bio, suffix_name, thomas_id, votesmart_id, wikidata_id, wikipedia_id) VALUES (NULL, 'B000682', NULL, '1932-10-21', NULL, NULL, 'David', 'M', 'kg:/m/02rtn6d', 401644, NULL, 9666.0, 14005.0, 'Bowen', NULL, NULL, 'Reece', NULL, NULL, NULL, NULL, NULL, '00115', NULL, 'Q283357', 'David R. Bowen');\nDatabase State:\n- Table: social_media, Columns: [bioguide, facebook, facebook_id, govtrack, instagram, instagram_id, thomas, twitter, twitter_id, youtube, youtube_id]",
        "Response": "Table: historical"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, area, dantai_code, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, official_website, instance_of, freebase_id, population, musicbrainz_area_id, geonames_id, topics_main_category, shares_border_with, image, located_in_time_zone, viaf_id, geonlp_id, locator_map_image, openstreetmap_relation_id, facebook_id, whos_on_first_id, worldcat_identities_id, native_label, inception, name_in_kana, ndl_authority_id) VALUES ('Uji', 'city in Kyoto Prefecture, Japan', 67.54999999999999716, '262048', 'Kyoto Prefecture', 'Uji, Kyoto', 'Japan', '34.88436111111111', 'https://www.city.uji.kyoto.jp/', 'city of Japan', '/m/01fmf0', 179626.0, '42a5246e-e681-4ab8-9d1d-e7e6e068122b', '1849362', 'Category:Uji, Kyoto', 'Kyoto', 'Byodoin Phoenix Hall Uji 2009.jpg', 'UTC+09:00', '124331428', 'hSTzRV', 'Uji in Kyoto Prefecture Ja.svg', '358602.0', 'ujicity', '102031271.0', 'lccn-n80060534', '\u5b87\u6cbb\u5e02', '+1951-03-01T00:00:00Z', '\u3046\u3058\u3057', '308214.0');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, area, dantai_code, located_in_the_administrative_territorial_entity, country, commons_category, coordinate_location, instance_of, freebase_id, population, geonames_id, viaf_id, topics_main_category, image, located_in_time_zone, official_website, geonlp_id, locator_map_image, whos_on_first_id, worldcat_identities_id, inception, native_label, shares_border_with, name_in_kana]\n- Table: political_border, Columns: [label, description, area, dantai_code, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, official_website, instance_of, freebase_id, population, musicbrainz_area_id, geonames_id, topics_main_category, shares_border_with, image, located_in_time_zone, viaf_id, geonlp_id, locator_map_image, openstreetmap_relation_id, facebook_id, whos_on_first_id, worldcat_identities_id, native_label, inception, name_in_kana, ndl_authority_id]\n- Table: tatch\u016b, Columns: [label, description, country, image, corporate_number_japan, instance_of, located_in_the_administrative_territorial_entity, part_of, inception]\n- Table: part, Columns: [label, description, official_website, commons_category, coordinate_location, freebase_id, instance_of, country, ndl_authority_id, image, dedicated_to, located_in_the_administrative_territorial_entity, viaf_id, corporate_number_japan, religion_or_worldview, founded_by, inception, has_parts, tripadvisor_id, heritage_designation, japan_search_name_id, part_of]",
        "Response": "Table: political_border"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO employee (ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID) VALUES ('222-23-2222', 'Marlin', 'Bill', '3/28/77', 'US$125,000.00', 'M', NULL, 2, 4);\nDatabase State:\n- Table: employee, Columns: [ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID]\n- Table: location, Columns: [locationID, locationcity, address, state, zipcode, officephone]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO station_company (Station_ID, Company_ID, Rank_of_the_Year) VALUES (6, 6, 3);\nDatabase State:\n- Table: station_company, Columns: [Station_ID, Company_ID, Rank_of_the_Year]",
        "Response": "Table: station_company"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, subclass_of, commons_category, operator, instance_of) VALUES ('California Zephyr dome-coach cars', 'class of 18 dome-coaches used on the California Zephyr (1949\u20131970)', 'railway coach', 'nan', 'Chicago, Burlington and Quincy Railroad', 'rolling stock class');\nDatabase State:\n- Table: country, Columns: [label, description, topics_main_wikimedia_portal, continent, instance_of, commons_category, library_of_congress_authority_id, idref_id, biblioth\u00e8que_nationale_de_france_id, gnd_id, coordinate_location, topics_main_category, freebase_id, inception, locator_map_image, flag_image, anthem, basic_form_of_government, legislative_body, currency, capital, category_of_associated_people, described_by_source, page_banner, commons_gallery, demonym, shares_border_with, encyclop\u00e6dia_britannica_online_id, population, quora_topic_id, yso_id, getty_thesaurus_of_geographic_names_id, stw_thesaurus_for_economics_id, us_national_archives_identifier, coat_of_arms, official_language, area, mesh_descriptor_id, great_russian_encyclopedia_online_id, native_label, part_of, viaf_id, klexikon_article_id, isni, gran_enciclop\u00e8dia_catalana_id, omegawiki_defined_meaning, category_for_maps, office_held_by_head_of_state, french_vikidia_id, language_used, member_of, nkcr_aut_id, worldcat_identities_id, coat_of_arms_image, replaces, diplomatic_relation, pm20_geo_code, interlingual_index_id, economy_of_topic, libris_uri, bhcl_uuid, wordnet_31_synset_id, idaigazetteer_id, store_norske_leksikon_id, den_store_danske_id, national_library_of_israel_j9u_id, demographics_of_topic, museum_digital_place_id, nese_id, brockhaus_enzyklop\u00e4die_online_id, on_focus_list_of_wikimedia_project, babelnet_id, country, short_name, head_of_state, motto_text, le_monde_diplomatique_subject_id, country_calling_code, flag, ndl_authority_id, geonames_id, unesco_thesaurus_id, ioc_country_code, gacs_id, contains_the_administrative_territorial_entity, kbpedia_id, uk_parliament_thesaurus_id, yle_topic_id, ysa_id, eu_knowledge_graph_item_id]\n- Table: Coaches, Columns: [label, description, subclass_of, commons_category, operator, instance_of]\n- Table: replaced_entity, Columns: [label, description, instance_of, inception, country, replaced_by]",
        "Response": "Table: Coaches"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO diamond_games (label, description, freebase_id, instance_of, follows, followed_by, country, sport, organizer, point_in_time, edition_number, start_time, end_time) VALUES ('2004 Proximus Diamond Games', 'tennis tournament', '/m/09g8x3c', 'Diamond Games', '2003 Proximus Diamond Games', '2005 Proximus Diamond Games', 'Belgium', 'tennis', 'Women''s Tennis Association', '+2004-00-00T00:00:00Z', '3', '+2004-02-14T00:00:00Z', '+2004-02-22T00:00:00Z');\nDatabase State:\n- Table: follows, Columns: [label, description, freebase_id, instance_of, follows, followed_by, country, sport, organizer, point_in_time, edition_number, start_time, end_time]\n- Table: TennisTournaments, Columns: [label, description, freebase_id, instance_of, follows, followed_by, country, sport, organizer, point_in_time, edition_number, start_time, end_time]",
        "Response": "Table: TennisTournaments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Lessons (lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price) VALUES (15, 3, 'Cancelled', 8, 1, '2018-03-06 21:48:51', '9', 340.0);\nDatabase State:\n- Table: Customers, Columns: [customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number, cell_mobile_phone_number]\n- Table: Lessons, Columns: [lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price]",
        "Response": "Table: Lessons"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (userid, movieid, rating) VALUES (3884, 2327740, '2');\nDatabase State:\n- Table: User_Movie_Ratings, Columns: [userid, movieid, rating]\n- Table: users, Columns: [userid, age, u_gender, occupation]",
        "Response": "Table: User_Movie_Ratings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ship_id, cust_id, weight, truck_id, driver_id, city_id, ship_date) VALUES (1027, 4469, 7758.0, 4, 30, 112, '2016-03-22');\nDatabase State:\n- Table: city, Columns: [city_id, city_name, state, population, area]\n- Table: truck, Columns: [truck_id, make, model_year]\n- Table: shipment, Columns: [ship_id, cust_id, weight, truck_id, driver_id, city_id, ship_date]",
        "Response": "Table: shipment"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO physical_location (label, description, country, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, freebase_id) VALUES ('Muskogee', 'city in Oklahoma, USA', 'United States of America', '35.7466', 'Muskogee County', 'city in the United States', '/m/0z843');\nDatabase State:\n- Table: administrative_centre, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, locator_map_image, instance_of, freebase_id, gnis_id, population, geonames_id, official_website, area, named_after, shares_border_with, inception, capital, image, viaf_id, archinform_location_id, category_of_associated_people, whos_on_first_id, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, hasc, openstreetmap_relation_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households, library_of_congress_authority_id, national_library_of_israel_j9u_id]\n- Table: winner, Columns: [label, description, sex_or_gender, date_of_birth, place_of_birth, country_of_citizenship, occupation, instance_of, freebase_id, given_name, sport, lpga_tour_golf_player_id, family_name]\n- Table: political_border, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, locator_map_image, instance_of, freebase_id, gnis_id, population, geonames_id, official_website, area, named_after, shares_border_with, inception, capital, image, viaf_id, archinform_location_id, category_of_associated_people, whos_on_first_id, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, hasc, openstreetmap_relation_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households, library_of_congress_authority_id, national_library_of_israel_j9u_id]\n- Table: GolfCourses, Columns: [label, description, country, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, freebase_id]\n- Table: united_states_womens_open_championship, Columns: [label, description, coordinate_location, country, sport, instance_of, point_in_time, competition_class, location, freebase_id, winner]\n- Table: capital_city, Columns: [label, description, instance_of, country, commons_category, coordinate_location, located_in_the_administrative_territorial_entity, freebase_id, locator_map_image, image, geonames_id, elevation_above_sea_level, gnis_id, official_website, postal_code, fips_55_3_locations_in_the_us, local_dialing_code, area, capital_of, library_of_congress_authority_id, viaf_id, archinform_location_id, inception, whos_on_first_id, worldcat_identities_id, topics_main_category, population, water_as_percent_of_area, national_library_of_israel_j9u_id, per_capita_income, number_of_households, musicbrainz_area_id, category_of_associated_people, quora_topic_id]\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, topics_main_category, locator_map_image, instance_of, freebase_id, gnis_id, population, geonames_id, official_website, area, shares_border_with, inception, image, viaf_id, archinform_location_id, category_of_associated_people, whos_on_first_id, category_for_maps, water_as_percent_of_area, native_label, wolfram_language_entity_code, worldcat_identities_id, openstreetmap_relation_id, getty_thesaurus_of_geographic_names_id, inaturalist_place_id, per_capita_income, number_of_households, library_of_congress_authority_id]",
        "Response": "Table: GolfCourses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, instance_of, genomic_start, genomic_end, ncbi_locus_tag) VALUES ('glucose-6-phosphate 1-dehydrogenase Psyr_1120', 'microbial gene found in Pseudomonas syringae pv. syringae B728a', '3366614', 'gene', 'Glucose-6-phosphate 1-dehydrogenase Psyr_1120', 'Pseudomonas syringae pv. syringae B728a', 'forward strand', 'gene', '1269241', '1270710', 'Psyr_1120');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO works_on (Essn, Pno, Hours) VALUES (987987987, 10, 35.0);\nDatabase State:\n- Table: works_on, Columns: [Essn, Pno, Hours]\n- Table: employee, Columns: [Fname, Minit, Lname, Ssn, Bdate, Address, Sex, Salary, Super_ssn]",
        "Response": "Table: works_on"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Cartoon (id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel) VALUES (10.0, 'The Eyes of Despero!', 'Ben Jones', 'J. M. DeMatteis', 'February6,2009', 110.0, '728');\nDatabase State:\n- Table: TV_Channel, Columns: [id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option]\n- Table: BatmanEpisodes, Columns: [id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel]",
        "Response": "Table: BatmanEpisodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width) VALUES (11, 1, 3, 6, 9, 'Diet Pepsi', '49 jg', 808.3099999999999454, 643.7699999999999819, 515.6200000000000045, '9', '8', '3', '3');\nDatabase State:\n- Table: Catalog_Contents, Columns: [catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width]",
        "Response": "Table: Catalog_Contents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO film_market_estimation (Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year) VALUES (3, 3000.0, 80400.0, 3, 'Mass human sacrifice', 3, 1487);\nDatabase State:\n- Table: film, Columns: [Film_ID, Title, Studio, Director, Gross_in_dollar]\n- Table: market, Columns: [Market_ID, Country, Number_cities]\n- Table: film_market_estimation, Columns: [Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year]",
        "Response": "Table: film_market_estimation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO railway (Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber) VALUES (3, 'GNRD', 'GNR Doncaster', '1902', '4-4-2', 'Barrow Hill', '1975-7005');\nDatabase State:\n- Table: manager, Columns: [Manager_ID, Name, Country, Working_year_starts, Age, Level]\n- Table: train, Columns: [Train_ID, Train_Num, Name, From, Arrival, Railway_ID]\n- Table: railway_manage, Columns: [Railway_ID, Manager_ID, From_Year]",
        "Response": "Table: railway"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (concert_ID, concert_Name, Theme, Stadium_ID, Year) VALUES (3, 'Home Visits', 'Bleeding Love', '2', '2015');\nDatabase State:\n- Table: concert, Columns: [concert_ID, concert_Name, Theme, Stadium_ID, Year]",
        "Response": "Table: concert"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Council_Tax (council_tax_id, cmi_cross_ref_id) VALUES (7, 102);\nDatabase State:\n- Table: Council_Tax, Columns: [council_tax_id, cmi_cross_ref_id]\n- Table: Parking_Fines, Columns: [council_tax_id, cmi_cross_ref_id]\n- Table: Benefits_Overpayments, Columns: [council_tax_id, cmi_cross_ref_id]\n- Table: Business_Rates, Columns: [business_rates_id, cmi_cross_ref_id]",
        "Response": "Table: Council_Tax"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of, commons_category, located_inon_physical_feature) VALUES ('Carri\u00e8re du Romont', 'quarry near Eben-Emael, Belgium', 'Belgium', 'Bassenge', '50.785992', 'limestone quarry', 'Carri\u00e8re du Romont', 'Haspengouws Plateau');\nDatabase State:\n- Table: maastricht_formation, Columns: [label, description, named_after, part_of, instance_of]",
        "Response": "Table: eponym"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, encoded_by, ensembl_protein_id, biological_process, cell_component, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of) VALUES ('Lysyl oxidase', 'mammalian protein found in Mus musculus', 'P28301', 'Lox', 'ENSMUSP00000025409', 'lung development', 'collagen', 'oxidoreductase activity, acting on the CH-NH2 group of donors, oxygen as acceptor', 'Lysyl oxidase, conserved site', 'house mouse', 'NP_001273110', 'protein', 'Lysyl oxidase');\nDatabase State:\n- Table: chromosome, Columns: [label, description, refseq_genome_id, found_in_taxon, instance_of]\n- Table: biological_process, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, ensembl_gene_id, refseq_rna_id, ensembl_transcript_id, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, chromosome, instance_of, expressed_in]\n- Table: expressed_in, Columns: [label, description, subclass_of, instance_of, freebase_id, microsoft_academic_id, uberon_id]",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details) VALUES (7, 7, 'PUR', '1990-12-02 09:03:38', 822.8029999999999973, '1522', NULL);\nDatabase State:\n- Table: Transactions_Lots, Columns: [transaction_id, lot_id]\n- Table: Ref_Transaction_Types, Columns: [transaction_type_code, transaction_type_description]\n- Table: Sales, Columns: [sales_transaction_id, sales_details]\n- Table: Investors, Columns: [investor_id, Investor_details]\n- Table: Lots, Columns: [lot_id, investor_id, lot_details]\n- Table: Investor_Transactions, Columns: [transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details]\n- Table: Purchases, Columns: [purchase_transaction_id, purchase_details]",
        "Response": "Table: Investor_Transactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO winner (label, description, instance_of, sex_or_gender, occupation, country_of_citizenship, date_of_birth, judoinside_judoka_id, place_of_birth, sport, participant_in, ijf_judoka_id, given_name, instagram_username) VALUES ('Japan', 'island country in East Asia', 'sovereign state', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'G4 nations', 'nan', 'nan', 'nan');\nDatabase State:\n- Table: Athletes, Columns: [label, description, instance_of, sex_or_gender, occupation, country_of_citizenship, date_of_birth, judoinside_judoka_id, place_of_birth, sport, participant_in, ijf_judoka_id, given_name, instagram_username]\n- Table: event, Columns: [label, description, instance_of, part_of, sport, competition_class, follows, number_of_participants, point_in_time, winner, olympedia_event_id, location, followed_by, country]\n- Table: administrative_territorial_entity, Columns: [label, description, population, viaf_id, geonames_id, gnd_id, isni, country, musicbrainz_area_id, capital, geoshape, openstreetmap_relation_id, shares_border_with, topics_main_category, locator_map_image, area, page_banner, commons_category, instance_of, category_for_people_born_here, located_in_time_zone, contains_the_administrative_territorial_entity, freebase_id, library_of_congress_authority_id, coordinate_location, category_for_maps, worldcat_identities_id, inaturalist_place_id, national_library_of_israel_j9u_id, head_of_government, image, named_after, located_in_the_administrative_territorial_entity]\n- Table: 2019_world_judo_championships, Columns: [label, description, instance_of, part_of, sport, follows, winner, location, google_knowledge_graph_id, followed_by, country, point_in_time, ijf_competition_id, judoinside_competition_id, short_name, number_of_participants]\n- Table: place_of_birth, Columns: [label, description, commons_category, country, coordinate_location, page_banner, freebase_id, twinned_administrative_body, geonames_id, instance_of, image, quora_topic_id, topics_main_category, located_in_the_administrative_territorial_entity, located_in_time_zone, population, whos_on_first_id, native_label, national_library_of_israel_j9u_id, flag_image, coat_of_arms_image, gnd_id, viaf_id, musicbrainz_area_id, head_of_government, official_website, category_of_associated_people, shares_border_with, area, library_of_congress_authority_id, archinform_location_id, locator_map_image, worldcat_identities_id]\n- Table: capital_city, Columns: [label, description, twinned_administrative_body, page_banner, country, instance_of, flag_image, coat_of_arms_image, commons_category, postal_code, located_in_time_zone, coordinate_location, located_in_the_administrative_territorial_entity, gnd_id, topics_main_category, viaf_id, commons_gallery, musicbrainz_area_id, freebase_id, population, image, category_for_people_who_died_here, geonames_id, head_of_government, official_website, category_of_associated_people, described_by_source, elevation_above_sea_level, openstreetmap_relation_id, shares_border_with, located_in_or_next_to_body_of_water, encyclop\u00e6dia_britannica_online_id, area, library_of_congress_authority_id, quora_topic_id, official_name, native_label, inception, great_russian_encyclopedia_online_id, archinform_location_id, nkcr_aut_id, locator_map_image, getty_thesaurus_of_geographic_names_id, whos_on_first_id, gran_enciclop\u00e8dia_catalana_id, category_for_maps, worldcat_identities_id, inaturalist_place_id, den_store_danske_id, store_norske_leksikon_id, social_media_followers, national_library_of_israel_j9u_id, online_pwn_encyclopedia_id, twitter_username, nese_id, capital_of, office_held_by_head_of_government]\n- Table: follows, Columns: [label, description, instance_of, point_in_time, sport, followed_by, follows, winner, location, google_knowledge_graph_id, country, part_of, number_of_participants, ijf_competition_id, judoinside_competition_id, short_name]\n- Table: followed_by, Columns: [label, description, instance_of, part_of, location, country, sport, point_in_time, follows, short_name, ijf_competition_id, judoinside_competition_id, organizer, followed_by, number_of_participants]\n- Table: political_border, Columns: [label, description, shares_border_with, commons_category, country, flag_image, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, instance_of, freebase_id, locator_map_image, geonames_id, musicbrainz_area_id, openstreetmap_relation_id, official_website, population, area, located_in_time_zone, coat_of_arms_image, whos_on_first_id, inaturalist_place_id, image, viaf_id, worldcat_identities_id]",
        "Response": "Table: Athletes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO car_names (MakeId) VALUES (67, 'volkswagen', 'volkswagen type 3');\nDatabase State:\n- Table: CarModels, Columns: [MakeId]\n- Table: cars_data, Columns: [Id]",
        "Response": "Table: CarModels"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY) VALUES ('2018/8/14', 20304, 'N810SK', 3678, 14869, 1486903, 34614, 'SLC', 10849, 1084905, 30849, 'BZN', 1105, 1102, -3, 0, 1229, -3, 0, 0, NULL, 87, 87, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Election_ID, Representative_ID, Date, Votes, Vote_Percent, Seats, Place) VALUES (3, 4, '1946', 13049.0, 19.5, 10.0, 2.0);\nDatabase State:\n- Table: election, Columns: [Election_ID, Representative_ID, Date, Votes, Vote_Percent, Seats, Place]",
        "Response": "Table: election"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encodes (label, description, subclass_of, uniprot_protein_id, encoded_by, found_in_taxon, has_parts, instance_of, refseq_protein_id, part_of) VALUES ('Hypothetical protein ML0607', 'microbial protein found in Mycobacterium leprae TN', 'protein', 'Q49757', 'hypothetical protein ML0607', 'Mycobacterium leprae TN', 'Bacterial transglutaminase-like, N-terminal', 'protein', 'NP_301512', 'Papain-like cysteine peptidase superfamily');\nDatabase State:\n- Table: encodes, Columns: [label, description, subclass_of, uniprot_protein_id, encoded_by, found_in_taxon, has_parts, instance_of, refseq_protein_id, part_of]",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO diamond_games (label, description, freebase_id, instance_of, follows, followed_by, country, sport, organizer, point_in_time, edition_number, start_time, end_time) VALUES ('2002 Proximus Diamond Games', 'tennis tournament', '/m/09gm9p2', 'Diamond Games', '2001 TennisCup Vlaanderen', '2003 Proximus Diamond Games', 'Belgium', 'tennis', 'Women''s Tennis Association', '+2002-00-00T00:00:00Z', '2', '+2002-02-09T00:00:00Z', '+2002-02-17T00:00:00Z');\nDatabase State:\n- Table: diamond_games, Columns: [label, description, freebase_id, instance_of, follows, followed_by, country, sport, organizer, point_in_time, edition_number, start_time, end_time]",
        "Response": "Table: diamond_games"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO company (Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion) VALUES (5.0, 'Industrial and Commercial Bank of China', 'China', 'Banking', 82.59999999999999431, 25.10000000000000142, 2039.09999999999991, 237.4000000000000056);\nDatabase State:\n- Table: employment, Columns: [Company_ID, People_ID, Year_working]\n- Table: people, Columns: [People_ID, Age, Name, Nationality, Graduation_College]\n- Table: company, Columns: [Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion]",
        "Response": "Table: company"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO publishing (label, description, instance_of, official_website, freebase_id, issn, era_journal_id, oclc_control_number, coden, scopus_source_id, danish_bibliometric_research_indicator_bfi_snocno, danish_bibliometric_research_indicator_level, publisher, title, iso_4_abbreviation, opencitations_bibliographic_resource_id, nlm_unique_id, language_of_work_or_name, inception, country_of_origin, uniprot_journal_id, main_subject, jufo_id, acnp_journal_id, crossref_journal_id, issn_l, indexed_in_bibliographic_review, openalex_id, scilit_journal_id) VALUES ('Journal of Pharmacology and Experimental Therapeutics', 'journal', 'scientific journal', 'https://jpet.aspetjournals.org/', '/m/05c3d3p', '0022-3565', '14806', '1606914.0', 'JPETAB', '23086', '5884', '2', 'American Society for Pharmacology and Experimental Therapeutics', 'Journal of Pharmacology and Experimental Therapeutics', 'J. Pharm. Exp. Ther.', '22573', '0376362', 'English', '+1909-01-01T00:00:00Z', 'United States of America', '1175', 'pharmacology', '61331', '2350', '12116', '0022-3565', 'Scopus', 'V102125482', '44846.0');\nDatabase State:\n- Table: citation, Columns: [label, description, pages, title, author_name_string, publication_date, issue, volume, published_in, instance_of, pubmed_id, doi, language_of_work_or_name]\n- Table: Journals, Columns: [label, description, instance_of, official_website, freebase_id, issn, era_journal_id, oclc_control_number, coden, scopus_source_id, danish_bibliometric_research_indicator_bfi_snocno, danish_bibliometric_research_indicator_level, publisher, title, iso_4_abbreviation, opencitations_bibliographic_resource_id, nlm_unique_id, language_of_work_or_name, inception, country_of_origin, uniprot_journal_id, main_subject, jufo_id, acnp_journal_id, crossref_journal_id, issn_l, indexed_in_bibliographic_review, openalex_id, scilit_journal_id]\n- Table: smooth_muscle_contraction, Columns: [label, description, found_in_taxon, reactome_id, instance_of, part_of, exact_match, has_parts, cites_work]",
        "Response": "Table: Journals"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, CID, Grade) VALUES (1016, '050.203', 'D-');\nDatabase State:\n- Table: Minor_in, Columns: [StuID, DNO]\n- Table: Gradeconversion, Columns: [lettergrade, gradepoint]\n- Table: Faculty, Columns: [FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]\n- Table: Enrolled_in, Columns: [StuID, CID, Grade]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Enrolled_in"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ingredient_id, category, name, plural) VALUES (2527, 'spices and seasonings', 'dried parsley', NULL);\nDatabase State:\n- Table: Recipe, Columns: [recipe_id, title, subtitle, servings, yield_unit, prep_min, cook_min, stnd_min, source, intro, directions]\n- Table: Nutrition, Columns: [recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories]\n- Table: Quantity, Columns: [quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional]",
        "Response": "Table: Ingredient"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, encoded_by, uniprot_protein_id, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of, transporter_classification_database_id) VALUES ('Any1p YMR010W', 'fungal protein found in Saccharomyces cerevisiae S288c', 'ANY1', 'Q03687', 'membrane', 'Saccharomyces cerevisiae S288c', 'NP_013723', 'protein', 'porter', '2.A.43.2.13');\nDatabase State:\n- Table: cellular_component, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: encodes, Columns: [label, description, encoded_by, uniprot_protein_id, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of, transporter_classification_database_id]\n- Table: part, Columns: [label, description, interpro_id, instance_of, subclass_of]\n- Table: porter, Columns: [label, description, encoded_by, uniprot_protein_id, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of, transporter_classification_database_id]\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, commons_category, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, image, catalogue_of_life_id, mesh_descriptor_id, microsoft_academic_id, openalex_id]",
        "Response": "Table: encodes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO fighter_squadron (label, description, instance_of, country, part_of) VALUES ('2nd Tactical Fighter Squadron', 'Royal Bahraini Air Force flying unit', 'fighter squadron', 'nan', '1st Fighter Wing');\nDatabase State:\n- Table: country, Columns: [label, description, commons_category, gnd_id, freebase_id, idref_id, instance_of, locator_map_image, inception, topics_main_category, office_held_by_head_of_government, babelnet_id, store_norske_leksikon_id, isni, biblioth\u00e8que_nationale_de_france_id, viaf_id, worldcat_identities_id, quora_topic_id, continent, diplomatic_relation, demonym, flag_image, short_name, category_for_maps, nese_id, brockhaus_enzyklop\u00e4die_online_id, country, museum_digital_place_id, office_held_by_head_of_state, head_of_state, great_russian_encyclopedia_online_id, population, getty_thesaurus_of_geographic_names_id, topics_main_wikimedia_portal, coordinates_of_southernmost_point, wikimedia_outline, ndl_authority_id, currency, new_york_times_topic_id, geonames_id, unicode_character, category_of_associated_people, emergency_phone_number, unesco_thesaurus_id, electrical_plug_type, licence_plate_code, coordinates_of_westernmost_point, geography_of_topic, iso_3166_1_alpha_3_code, official_name, curlie_id, mesh_descriptor_id, basic_form_of_government, musicbrainz_area_id, has_quality, coat_of_arms_image, uic_alphabetical_country_code, number_of_out_of_school_children, insee_countries_and_foreign_territories_code, commons_gallery, legislative_body, civicus_monitor_country_entry, history_of_topic, stw_thesaurus_for_economics_id, official_language, subreddit, capital, coat_of_arms, geoshape, national_library_of_israel_id_old, openstreetmap_relation_id, wipo_st3, coordinates_of_northernmost_point, coordinates_of_easternmost_point, nkcr_aut_id, mobile_country_code, total_fertility_rate, maritime_identification_digits, us_national_archives_identifier, asc_leiden_thesaurus_id, marriageable_age, le_monde_diplomatique_subject_id, category_of_people_buried_here, bbc_things_id, age_of_majority, dewey_decimal_classification, on_focus_list_of_wikimedia_project, ituisoiec_object_identifier, head_of_government, ioc_country_code, member_of, fast_id, unemployment_rate, railway_traffic_side, gacs_id, archinform_location_id, encyclop\u00e6dia_britannica_online_id, page_banner, category_for_films_shot_at_this_location, mains_voltage, executive_body, category_for_people_who_died_here, yso_id, anthem, life_expectancy, gran_enciclop\u00e8dia_catalana_id, part_of, top_level_internet_domain, area, shares_border_with, highest_point, driving_side, uic_numerical_country_code, lowest_point, iso_3166_1_numeric_code, located_in_time_zone, giant_bomb_id, contains_the_administrative_territorial_entity, itu_letter_code, country_calling_code, statoids_id, library_of_congress_authority_id, iso_3166_1_alpha_2_code, motto_text, flag, coordinate_location, fips_10_4_countries_and_regions, dagens_nyheter_topic_id, described_by_source, maintained_by_wikiproject, klexikon_article_id, iab_code, loc_and_marc_vocabularies_id, central_bank, language_used, comic_vine_id, treccanis_dizionario_di_storia_id, native_label, whos_on_first_id, dr_topic_id, inaturalist_place_id, omegawiki_defined_meaning, hds_id, gs1_country_code, culture, geonlp_id, analysis_policy_observatory_term_id, french_vikidia_id, english_vikidia_id, spanish_vikidia_id, pronunciation_audio, eurovoc_id, open_data_portal, kbpedia_id, krugosvet_article, grove_art_online_id, replaces, rkd_thesaurus_id, interlingual_index_id, jewish_encyclopedia_id_russian, bbc_news_topic_id, economy_of_topic, the_top_tens_id, yle_topic_id, uk_parliament_thesaurus_id, tasteatlas_id, sapa_id, github_topic, wordnet_31_synset_id, demographics_of_topic, ysa_id, joconde_location_id, zhihu_topic_id, schoenberg_database_of_manuscripts_place_id, the_world_factbook_country_id, national_library_of_israel_j9u_id, colon_classification, democracy_index, namuwiki_id, der_spiegel_topic_id, wikisimpsons_id, den_store_danske_id, urban_electric_transit_country_id, postimees_topic_id, online_pwn_encyclopedia_id, m49_code, pm20_geo_code, s\u00fcddeutsche_zeitung_topic_id, alltrails_trail_id, human_development_index, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, vat_rate, hashtag, located_in_or_next_to_body_of_water, gini_coefficient, obo_gazetteer_id, openstreetmap_element, happy_planet_index_score, gynopedia_id]\n- Table: part, Columns: [label, description, quora_topic_id, has_parts, commons_category, instance_of, freebase_id, part_of, topics_main_category, gnd_id, yso_id, coordinate_location, viaf_id]\n- Table: place_of_birth, Columns: [label, description, instance_of, commons_category, coordinate_location, topics_main_category, freebase_id, population, image, country, located_in_the_administrative_territorial_entity]\n- Table: administrative_territorial_entity, Columns: [label, description, category_of_associated_people, musicbrainz_area_id, viaf_id, capital, openstreetmap_relation_id, located_in_time_zone, commons_category, shares_border_with, population, geonames_id, coat_of_arms_image, freebase_id, area, topics_main_category, locator_map_image, instance_of, category_for_people_born_here, coordinate_location, inaturalist_place_id, image, country, located_in_the_administrative_territorial_entity]",
        "Response": "Table: fighter_squadron"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO linha_da_beira_baixa (label, description, instance_of, country, part_of, coordinate_location, located_in_the_administrative_territorial_entity, located_in_time_zone, connecting_line, google_knowledge_graph_id, commons_category, image) VALUES ('Alvega - Ortiga Halt', 'railway halt in Portugal', 'railway station', 'Portugal', 'Linha da Beira Baixa', '39.47238333', 'Ma\u00e7\u00e3o', 'Western European Time', 'Linha da Beira Baixa', '/g/11x1nxdql', 'Alvega - Ortiga Halt', 'Alvega-Ortiga.JPG');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: linha_da_beira_baixa"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO broadcast (Channel_ID, Program_ID, Time_of_day) VALUES (10, 4, 'Night');\nDatabase State:\n- Table: broadcast_share, Columns: [Channel_ID, Program_ID, Date, Share_in_percent]\n- Table: broadcast, Columns: [Channel_ID, Program_ID, Time_of_day]\n- Table: program, Columns: [Program_ID, Name, Origin, Launch, Owner]\n- Table: channel, Columns: [Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent]",
        "Response": "Table: broadcast"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, country, coordinate_location, freebase_id, instance_of, located_in_the_administrative_territorial_entity, population) VALUES ('Esparragalejo', 'municipality of Spain', 'Spain', '38.943611111111', '/m/02z7lqr', 'municipality of Spain', 'Badajoz Province', 1480.0);\nDatabase State:\n- Table: Locations, Columns: [label, description, country, coordinate_location, freebase_id, instance_of, located_in_the_administrative_territorial_entity, population]\n- Table: buttress_dam, Columns: [label, description, commons_category, coordinate_location, instance_of, image, country, located_in_the_administrative_territorial_entity, drainage_basin, length]",
        "Response": "Table: Locations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO natural_product (label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, genbank_assembly_accession_number, gram_staining) VALUES ('Clostridium botulinum A str. ATCC 3502', 'bacterial strain', 'strain', 'Clostridium botulinum A str. ATCC 3502', 'Clostridium botulinum', '413999', 'GCA_000063585.1', 'gram-positive bacteria');\nDatabase State:\n- Table: taxon, Columns: [label, description, parent_taxon, taxon_name, instance_of, taxon_rank, itis_tsn, freebase_id, ncbi_taxonomy_id, gbif_taxon_id, irmng_id, catalogue_of_life_id, gram_staining, lpsn_url, microsoft_academic_id]\n- Table: aromatic_amino_acid_beta_eliminating_lyase_threonine_aldolase_family, Columns: [label, description, encoded_by, uniprot_protein_id, molecular_function, biological_process, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: encodes, Columns: [label, description, encoded_by, uniprot_protein_id, molecular_function, biological_process, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, genbank_assembly_accession_number, gram_staining]",
        "Response": "Table: natural_product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO matchs (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season) VALUES ('E1', '2006-08-08', 'Leicester', 'Burnley', 0, 1, 'A', 2007);\nDatabase State:\n- Table: divisions, Columns: [division, name, country]\n- Table: FootballMatches, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]",
        "Response": "Table: FootballMatches"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Documents_to_be_Destroyed (Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details) VALUES (11, 55, 173, '2010-11-26 19:22:50', '1986-10-14 17:53:39', NULL);\nDatabase State:\n- Table: Roles, Columns: [Role_Code, Role_Name, Role_Description]\n- Table: Ref_Calendar, Columns: [Calendar_Date, Day_Number]\n- Table: All_Documents, Columns: [Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details]",
        "Response": "Table: Documents_to_be_Destroyed"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO eponym (label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of, commons_category, located_inon_physical_feature) VALUES ('Gronsveld', 'town in the Netherlands', 'Netherlands', 'Eijsden-Margraten', '50.8086', 'village', 'Gronsveld', 'valley of the Meuse');\nDatabase State:\n- Table: maastricht_formation, Columns: [label, description, named_after, part_of, instance_of]\n- Table: eponym, Columns: [label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of, commons_category, located_inon_physical_feature]",
        "Response": "Table: eponym"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO body_builder (Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total) VALUES (3, 3, 140.0, 175.0, 315.0);\nDatabase State:\n- Table: body_builder, Columns: [Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total]",
        "Response": "Table: body_builder"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id) VALUES ('porkworm', 'surface antigen repeat family protein', 937.5, 'XP_003380263.1', 2030.0, '36%', '9');\nDatabase State:\n- Table: Institution, Columns: [Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id]\n- Table: Proteins, Columns: [common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id]",
        "Response": "Table: Proteins"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO generalinfo (id_restaurant, label, food_type, city, review) VALUES (3742, 'three dragons restaurant', 'chinese', 'san rafael', 2.0);\nDatabase State:\n- Table: generalinfo, Columns: [id_restaurant, label, food_type, city, review]\n- Table: location, Columns: [id_restaurant, street_num, street_name, city]",
        "Response": "Table: generalinfo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number) VALUES ('Deinococcus radiodurans R1', 'bacterial strain', 'Deinococcus radiodurans R1', 'Deinococcus radiodurans', '243230', 'strain', 'Gram-negative bacteria', 'GCA_001638825.1');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: natural_product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO capital_city (label, description, country, coordinate_location, freebase_id, instance_of, geonames_id, elevation_above_sea_level, area, commons_category, population, located_in_the_administrative_territorial_entity, encyclop\u00e6dia_britannica_online_id, capital_of, whos_on_first_id, inaturalist_place_id, national_library_of_israel_j9u_id, located_in_time_zone, image) VALUES ('Gracias', 'city in Honduras', 'Honduras', '14.58333333', '/m/04y6d_', 'city', '3609587', 800.0, 449.1000000000000227, 'Gracias, Lempira', 47622.0, 'Lempira Department', 'place/Gracias-Honduras', 'Lempira Department', '1141906011', '31524.0', '9.870074780527052e+17', 'UTC\u221206:00', 'Fuerte San Crist\u00f3bal Gracias Honduras 01.jpg');\nDatabase State:\n- Table: department_of_honduras, Columns: [label, description, commons_category, country, iso_3166_2_code, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, freebase_id, fips_10_4_countries_and_regions, instance_of, inception, geonames_id, capital, area, population, locator_map_image, getty_thesaurus_of_geographic_names_id, openstreetmap_relation_id, whos_on_first_id, geoshape, inaturalist_place_id, located_in_time_zone]\n- Table: administrative_centre, Columns: [label, description, commons_category, country, iso_3166_2_code, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, freebase_id, fips_10_4_countries_and_regions, instance_of, inception, geonames_id, capital, area, population, locator_map_image, getty_thesaurus_of_geographic_names_id, language_used, openstreetmap_relation_id, whos_on_first_id, gran_enciclop\u00e8dia_catalana_id, geoshape, inaturalist_place_id, located_in_time_zone]\n- Table: capital_city, Columns: [label, description, country, coordinate_location, freebase_id, instance_of, geonames_id, elevation_above_sea_level, area, commons_category, population, located_in_the_administrative_territorial_entity, encyclop\u00e6dia_britannica_online_id, capital_of, whos_on_first_id, inaturalist_place_id, national_library_of_israel_j9u_id, located_in_time_zone, image]",
        "Response": "Table: capital_city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, genomic_end, strand_orientation, instance_of, genomic_start) VALUES ('site-specific tyrosine recombinase XerD MXAN_RS18670', 'microbial gene found in Myxococcus xanthus DK 1622', 'Myxococcus xanthus DK 1622', '4104775', 'gene', 'Site-specific tyrosine recombinase XerD MXAN_RS18670', 'MXAN_RS18670', '4624194', 'reverse strand', 'gene', '4623262');\nDatabase State:\n- Table: tyrosine_recombinase_xerd, Columns: [label, description, uniprot_protein_id, found_in_taxon, refseq_protein_id, encoded_by, subclass_of, has_parts, cell_component, molecular_function, biological_process, part_of, instance_of]\n- Table: natural_product, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO player (Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team) VALUES (7, 'Lim Yong-Kyu (288)', '3 (2009\u20132011)', '7\u20136', '5\u20136', '2\u20130', 6);\nDatabase State:\n- Table: match_season, Columns: [Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College]\n- Table: country, Columns: [Country_id, Country_name, Capital, Official_native_language]\n- Table: team, Columns: [Team_id, Name]",
        "Response": "Table: player"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Nurse (EmployeeID, Name, Position, Registered, SSN) VALUES (103, 'Paul Flowers', 'Nurse', 0, 333333330);\nDatabase State:\n- Table: Patient, Columns: [SSN, Name, Address, Phone, InsuranceID, PCP]\n- Table: Appointment, Columns: [AppointmentID, Patient, Physician, Start, End, ExaminationRoom]\n- Table: Room, Columns: [RoomNumber, RoomType, BlockFloor]\n- Table: Physician, Columns: [EmployeeID, Name, Position, SSN]\n- Table: Department, Columns: [DepartmentID, Name, Head]\n- Table: Medication, Columns: [Code, Name, Brand, Description]\n- Table: On_Call, Columns: [Nurse, BlockFloor, OnCallStart, OnCallEnd]",
        "Response": "Table: Nurse"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (city_id, city_name, state, population, area) VALUES (579, 'Temple', 'Texas', 54514, 65.40000000000000569);\nDatabase State:\n- Table: shipment, Columns: [ship_id, cust_id, weight, truck_id, driver_id, city_id, ship_date]\n- Table: driver, Columns: [driver_id, first_name, last_name, address, city, state, zip_code, phone]\n- Table: US_Cities, Columns: [city_id, city_name, state, population, area]\n- Table: truck, Columns: [truck_id, make, model_year]\n- Table: customer, Columns: [cust_id, cust_name, annual_revenue, cust_type, address, city, state, zip, phone]",
        "Response": "Table: US_Cities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO culture_company (Company_name, Type, Incorporated_in, Group_Equity_Shareholding, book_club_id, movie_id) VALUES ('Culture China', 'Corporate', 'China', 18.76999999999999958, '1', '2');\nDatabase State:\n- Table: movie, Columns: [movie_id, Title, Year, Director, Budget_million, Gross_worldwide]\n- Table: book_club, Columns: [book_club_id, Year, Author_or_Editor, Book_Title, Publisher, Category, Result]",
        "Response": "Table: culture_company"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO payment (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update) VALUES (4005, 147, 2, 14641, 0.989999999999999992, '2005-08-21 19:05:23.0', '2006-02-15 22:13:27.0');\nDatabase State:\n- Table: customer, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: film_actor, Columns: [actor_id, film_id, last_update]\n- Table: film, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]\n- Table: store, Columns: [store_id, manager_staff_id, address_id, last_update]\n- Table: actor, Columns: [actor_id, first_name, last_name, last_update]\n- Table: category, Columns: [category_id, name, last_update]\n- Table: language, Columns: [language_id, name, last_update]\n- Table: staff, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]\n- Table: city, Columns: [city_id, city, country_id, last_update]\n- Table: RentalPayments, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: rental, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]\n- Table: country, Columns: [country_id, country, last_update]",
        "Response": "Table: RentalPayments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales (EVENTID, REFID, EVENT_DATE, AMOUNT) VALUES (195909, 20604, '2006-11-24 12:00:00.0', 13.83399999999999964);\nDatabase State:\n- Table: Demog, Columns: [GEOID, INHABITANTS_K, INCOME_K, A_VAR1, A_VAR2, A_VAR3, A_VAR4, A_VAR5, A_VAR6, A_VAR7, A_VAR8, A_VAR9, A_VAR10, A_VAR11, A_VAR12, A_VAR13, A_VAR14, A_VAR15, A_VAR16, A_VAR17, A_VAR18]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO TV_Channel (id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option) VALUES ('701', 'Sky Music', 'Italy', 'Italian', 'music', '4:3', 'no', 'no', 'Sky Famiglia');\nDatabase State:\n- Table: TV_series, Columns: [id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel]\n- Table: TV_Channel, Columns: [id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option]\n- Table: Cartoon, Columns: [id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel]",
        "Response": "Table: TV_Channel"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO drifter (label, description, instance_of, country, located_in_the_administrative_territorial_entity, coordinate_location, significant_event, described_by_source, canmore_id, historic_county) VALUES ('Strathgarry', 'Shipwreck off the Scottish Coast, imported from Canmore Nov 2020', 'drifter', 'United Kingdom', 'Orkney Islands', '58.82820281432363', 'shipwrecking', 'Canmore', '102243.0', 'Orkney Islands');\nDatabase State:\n- Table: drifter, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, coordinate_location, significant_event, described_by_source, canmore_id, historic_county]",
        "Response": "Table: drifter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO department_store_chain (label, description, country, instance_of) VALUES ('Parisian', 'defunct American department store chain', 'United States of America', 'business');\nDatabase State:\n- Table: part, Columns: [label, description, commons_category, topics_main_category, freebase_id, gnd_id, viaf_id, instance_of, geonames_id, page_banner, quora_topic_id, has_parts, nkcr_aut_id, worldcat_identities_id, coordinate_location, locator_map_image, part_of, den_store_danske_id]\n- Table: place_of_birth, Columns: [label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of]\n- Table: administrative_territorial_entity, Columns: [label, description, located_in_the_administrative_territorial_entity, commons_category, country, coordinate_location, instance_of, freebase_id, geonames_id, inception, official_website, locator_map_image, inaturalist_place_id, area, population]\n- Table: department_store_chain, Columns: [label, description, country, instance_of]",
        "Response": "Table: department_store_chain"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Batsman_Scored (Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No) VALUES (501243, 13, 1, 1, 2);\nDatabase State:\n- Table: Match, Columns: [Match_Id, Team_1, Team_2, Match_Date, Season_Id, Venue_Id, Toss_Winner, Toss_Decide, Win_Type, Win_Margin, Outcome_type, Match_Winner, Man_of_the_Match]\n- Table: Extra_Type, Columns: [Extra_Id, Extra_Name]\n- Table: Venue, Columns: [Venue_Id, Venue_Name, City_Id]\n- Table: Out_Type, Columns: [Out_Id, Out_Name]\n- Table: City, Columns: [City_Id, City_Name, Country_id]\n- Table: Umpire, Columns: [Umpire_Id, Umpire_Name, Umpire_Country]",
        "Response": "Table: Batsman_Scored"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, commons_category, located_in_the_administrative_territorial_entity, lau, instance_of, freebase_id, country, coat_of_arms_image, shares_border_with, population, image, geonames_id, coordinate_location, topics_main_category, postal_code, official_website, elevation_above_sea_level, time_of_earliest_written_record, email_address, nkcr_aut_id, openstreetmap_relation_id, area, licence_plate_code, czech_registration_id, historical_region, whos_on_first_id, geoshape, mapycz_id, isds_id, czech_municipality_id, number_of_houses, mean_age, flag_image) VALUES ('Bed\u0159ichov', 'village in Jablonec nad Nisou District of Liberec region', 'Bed\u0159ichov (Jablonec nad Nisou District)', 'Jablonec nad Nisou District', 'CZ563536', 'municipality of the Czech Republic', '/m/05b0wjm', 'Czech Republic', 'Bedrichov (Jablonec nad Nisou) CoA CZ.svg', 'Josef\u016fv D\u016fl', 345.0, 'Skipiste Bedrichov 2006.jpg', '3079588.0', '50.791143875392', 'Category:Bed\u0159ichov (Jablonec nad Nisou District)', '468\u00a012', 'http://www.bedrichov.cz/', 707.0, '+1602-01-01T00:00:00Z', 'mailto:obec@bedrichov.cz', 'xx0044270', '438933.0', 24.26028200000000012, 'JN', '525511.0', 'Bohemia', '1125919777.0', 'Data:Map of Bed\u0159ichov, Jablonec nad Nisou District.map', 'muni&id=1783', '97abtyg', '563536.0', 159.0, 39.60000000000000142, 'Flag of Bedrichov (Jablonec nad Nisou).svg');\nDatabase State:\n- Table: jizera_mountains, Columns: [label, description, instance_of, country, coordinate_location, elevation_above_sea_level, image, located_in_the_administrative_territorial_entity, mountain_range, google_knowledge_graph_id, part_of]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (city_id, city_name, state, population, area) VALUES (525, 'Long Beach', 'California', 461522, 50.39999999999999858);\nDatabase State:\n- Table: shipment, Columns: [ship_id, cust_id, weight, truck_id, driver_id, city_id, ship_date]\n- Table: truck, Columns: [truck_id, make, model_year]\n- Table: driver, Columns: [driver_id, first_name, last_name, address, city, state, zip_code, phone]",
        "Response": "Table: city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, p_id) VALUES (108, 279);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: taughtBy"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY) VALUES ('SH_CLERK', 'Shipping Clerk', 2500, 5500);\nDatabase State:\n- Table: locations, Columns: [LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID]\n- Table: employees, Columns: [EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID]\n- Table: Salaries, Columns: [JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY]\n- Table: departments, Columns: [DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID]",
        "Response": "Table: Salaries"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Representative_ID, Name, State, Party, Lifespan) VALUES (7, 'James L. Quinn', 'Pennsylvania', 'Democratic', '1875\u20131960');\nDatabase State:\n- Table: election, Columns: [Election_ID, Representative_ID, Date, Votes, Vote_Percent, Seats, Place]",
        "Response": "Table: representative"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO paragraphs (id, ParagraphNum, PlainText, character_id, chapter_id) VALUES (653746, 696, 'In faith, lady, you have a merry heart.', 329, 19229);\nDatabase State:\n- Table: book_text, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]",
        "Response": "Table: book_text"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (City_ID, City, Hanzi, Hanyu_Pinyin, Regional_Population, GDP) VALUES (9, 'Changzhou ( Jiangsu )', '\u5e38\u5dde', 'Ch\u00e1ngzh\u014du', 4591972, 358.0400000000000204);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, pubmed_id, instance_of, published_in, volume, issue, pages, author_name_string, cites_work, doi, publication_date, title) VALUES ('Molecular cloning of a DEG/ENaC sodium channel cDNA from human testis', 'scientific article', '9571199', 'scholarly article', 'Biochemical and Biophysical Research Communications', '245', '2', '589-93', 'K Ishibashi', 'An SH3 binding region in the epithelial Na+ channel (alpha rENaC) mediates its localization at the apical membrane', '10.1006/BBRC.1998.8483', '+1998-04-17T00:00:00Z', 'Molecular cloning of a DEG/ENaC sodium channel cDNA from human testis');\nDatabase State:\n- Table: publisher, Columns: [label, description, official_website, country, instance_of, isni, ringgold_id, headquarters_location, inception, microsoft_academic_id, library_of_congress_authority_id, romeo_publisher_id, viaf_id, worldcat_identities_id, freebase_id, publons_publisher_id]\n- Table: Publications, Columns: [label, description, pubmed_id, instance_of, published_in, volume, issue, pages, author_name_string, cites_work, doi, publication_date, title]",
        "Response": "Table: Publications"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, instance_of, part_of, event_distance, competition_class, point_in_time, sport, followed_by, location, freebase_id, follows) VALUES ('rowing at the 2006 Asian Games \u2013 men''s single sculls', 'rowing event', 'rowing event', 'rowing at the 2006 Asian Games', 1000.0, 'men''s single scull', '+2006-00-00T00:00:00Z', 'rowing', 'rowing at the 2010 Asian Games \u2013 men''s single sculls', 'West Bay Lagoon', '/m/0w1c_py', 'rowing at the 2002 Asian Games \u2013 men''s single sculls');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1007, 'Apap', 'Lisa', 18, 'F', 600, 8918, 'PIT');\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Voting_record, Columns: [StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (year, lgID, tmID, oppID, W, L, T, OTL) VALUES (1996, 'NHL', 'TBL', 'FLO', 1, 2, 2, NULL);\nDatabase State:\n- Table: abbrev, Columns: [Type, Code, Fullname]\n- Table: Goalies, Columns: [playerID, year, stint, tmID, lgID, GP, Min, W, L, T/OL, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA]\n- Table: HOF, Columns: [year, hofID, name, category]\n- Table: ScoringShootout, Columns: [playerID, year, stint, tmID, S, G, GDG]\n- Table: GoaliesSC, Columns: [playerID, year, tmID, lgID, GP, Min, W, L, T, SHO, GA]\n- Table: ScoringSC, Columns: [playerID, year, tmID, lgID, pos, GP, G, A, Pts, PIM]\n- Table: Master, Columns: [playerID, coachID, hofID, firstName, lastName, nameNote, nameGiven, nameNick, height, weight, shootCatch, legendsID, ihdbID, hrefID, firstNHL, lastNHL, firstWHA, lastWHA, pos, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity, deathYear, deathMon, deathDay, deathCountry, deathState, deathCity]\n- Table: AwardsPlayers, Columns: [playerID, award, year, lgID, note, pos]\n- Table: Scoring, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, +/_, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, Post+/_, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: TeamsHalf, Columns: [year, lgID, tmID, half, rank, G, W, L, T, GF, GA]\n- Table: Coaches, Columns: [coachID, year, tmID, lgID, stint, notes, g, w, l, t, postg, postw, postl, postt]\n- Table: Teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: TeamsSC, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM]\n- Table: NHLGameResults, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]\n- Table: ScoringSup, Columns: [playerID, year, PPA, SHA]\n- Table: TeamsPost, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]\n- Table: AwardsMisc, Columns: [name, ID, award, year, lgID, note]",
        "Response": "Table: NHLGameResults"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO MenuItem (id, menu_page_id, price, high_price, dish_id, created_at, updated_at, xpos, ypos) VALUES (971418, 62728, 0.4500000000000000111, NULL, 5797, '2012-06-16 02:17:20 UTC', '2012-06-16 02:17:20 UTC', 0.2142860000000000042, 0.8489179999999999505);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: MenuItem"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Player_Match (Match_Id, Player_Id, Role_Id, Team_Id) VALUES (729290, 255, 3, 5);\nDatabase State:\n- Table: Batting_Style, Columns: [Batting_Id, Batting_hand]\n- Table: Venue, Columns: [Venue_Id, Venue_Name, City_Id]\n- Table: Player_Match, Columns: [Match_Id, Player_Id, Role_Id, Team_Id]\n- Table: Extra_Runs, Columns: [Match_Id, Over_Id, Ball_Id, Extra_Type_Id, Extra_Runs, Innings_No]\n- Table: Out_Type, Columns: [Out_Id, Out_Name]\n- Table: Ball_by_Ball, Columns: [Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler]\n- Table: Wicket_Taken, Columns: [Match_Id, Over_Id, Ball_Id, Player_Out, Kind_Out, Fielders, Innings_No]\n- Table: Outcome, Columns: [Outcome_Id, Outcome_Type]\n- Table: Bowling_Style, Columns: [Bowling_Id, Bowling_skill]\n- Table: Match, Columns: [Match_Id, Team_1, Team_2, Match_Date, Season_Id, Venue_Id, Toss_Winner, Toss_Decide, Win_Type, Win_Margin, Outcome_type, Match_Winner, Man_of_the_Match]\n- Table: City, Columns: [City_Id, City_Name, Country_id]",
        "Response": "Table: Player_Match"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO competition_result (Competition_ID, Club_ID_1, Club_ID_2, Score) VALUES (6, 1, 6, '10:11');\nDatabase State:\n- Table: competition, Columns: [Competition_ID, Year, Competition_type, Country]\n- Table: competition_result, Columns: [Competition_ID, Club_ID_1, Club_ID_2, Score]",
        "Response": "Table: competition_result"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO programming_paradigm (label, description, freebase_id, instance_of, subclass_of, microsoft_academic_id) VALUES ('structured programming', 'programming paradigm aimed at improving clarity, quality, and development time by using control structures', '/m/06w_b', 'computer programming', 'programming paradigm', '77781355.0');\nDatabase State:\n- Table: Programming_Paradigms, Columns: [label, description, freebase_id, instance_of, subclass_of, microsoft_academic_id]",
        "Response": "Table: Programming_Paradigms"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('dethiobiotin synthetase FTT_0934c', 'microbial gene found in Francisella tularensis subsp. tularensis SCHU S4', 'Francisella tularensis subsp. tularensis SCHU S4', '3190963', 'gene', 'FTT_0934c', 'dethiobiotin synthetase    FTT_0934c', 'gene', '946556', 'reverse strand', '945879');\nDatabase State:\n- Table: Genes, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Documents (document_code, document_structure_code, document_type_code, access_count, document_name) VALUES ('958', '8', 'Book', 3769, 'Learning Database');\nDatabase State:\n- Table: Document_Sections_Images, Columns: [section_id, image_id]\n- Table: Functional_Areas, Columns: [functional_area_code, parent_functional_area_code, functional_area_description]\n- Table: Document_Structures, Columns: [document_structure_code, parent_document_structure_code, document_structure_description]",
        "Response": "Table: Documents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO inframe_deletion (label, description, biological_variant_of, chromosome, civic_variant_id, genomic_start, genomic_end, instance_of) VALUES ('MLH1 K618DEL', 'genetic variant', 'MLH1', 'human chromosome 3', '733', '37089130.0', '37089132.0', 'Inframe Deletion');\nDatabase State:\n- Table: inframe_deletion, Columns: [label, description, biological_variant_of, chromosome, civic_variant_id, genomic_start, genomic_end, instance_of]",
        "Response": "Table: inframe_deletion"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, uniprot_protein_id, encoded_by, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of) VALUES ('Broadly selective sodium/nucleoside transporter hfCNT RB9943', 'microbial protein found in Rhodopirellula baltica SH 1', 'Q7UKU0', 'broadly selective sodium/nucleoside transporter hfCNT RB9943', 'nucleoside transmembrane transport', 'nucleoside transmembrane transporter activity', 'integral component of plasma membrane', 'Nucleoside transporter/FeoB GTPase, Gate domain', 'Rhodopirellula baltica SH 1', 'NP_869156', 'protein', 'Concentrative nucleoside transporter');\nDatabase State:\n- Table: Protein_Transporters, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, molecular_function, cell_component, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of]",
        "Response": "Table: Protein_Transporters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, coordinate_location, freebase_id, instance_of, image, located_in_the_administrative_territorial_entity, commons_category, country, topics_main_category, area) VALUES ('Acre Subdistrict', 'subdistrict of Mandatory Palestine', '32.928098', '/m/0vpk1n7', 'subdistrict of Mandatory Palestine', 'nan', 'Mandatory Palestine', 'nan', 'Mandatory Palestine', 'Category:District of Acre', 799.6630000000000109);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, name, date, bulgarian_commander, latin_commander, result) VALUES (8, 'Siege of Constantinople', '1235', 'Ivan Asen II', 'John of Brienne', 'Two Year Truce');\nDatabase State:\n- Table: ship, Columns: [lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship]\n- Table: death, Columns: [caused_by_ship_id, id, note, killed, injured]\n- Table: battle, Columns: [id, name, date, bulgarian_commander, latin_commander, result]",
        "Response": "Table: battle"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violations (business_id, date, violation_type_id, risk_category, description) VALUES (847, '2014-09-19', '103157', 'Low Risk', 'Food safety certificate or food handler card not available');\nDatabase State:\n- Table: businesses, Columns: [business_id, name, address, city, postal_code, latitude, longitude, phone_number, tax_code, business_certificate, application_date, owner_name, owner_address, owner_city, owner_state, owner_zip]\n- Table: BusinessViolations, Columns: [business_id, date, violation_type_id, risk_category, description]",
        "Response": "Table: BusinessViolations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Participates_in (stuid, actid) VALUES (1030, 780);\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Participates_in"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO saccharopine_dehydrogenase_c_terminal_domain_protein_family (label, description, encoded_by, uniprot_protein_id, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of) VALUES ('Homospermidine synthase PSPTO_1868', 'microbial protein found in Pseudomonas syringae pv. tomato str. DC3000', 'homospermidine synthase PSPTO_1868', 'Q885G6', 'oxidoreductase activity', 'Saccharopine dehydrogenase, C-terminal', 'Pseudomonas syringae pv. tomato str. DC3000', 'NP_791691', 'protein', 'Homospermidine synthase-like, C-terminal', 'protein');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: Protein_Family, Columns: [label, description, encoded_by, uniprot_protein_id, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of, subclass_of]",
        "Response": "Table: Protein_Family"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tjsb_sahakari_bank_branch (label, description, operator, country, located_in_the_administrative_territorial_entity, indian_financial_system_code, instance_of) VALUES ('TJSB Sahakari Bank, Ahemdabad Branch', 'branch of TJSB Sahakari Bank', 'TJSB Sahakari Bank', 'India', 'Ahmedabad district', 'TJSB0000100', 'TJSB Sahakari Bank branch');\nDatabase State:\n- Table: tjsb_sahakari_bank_branch, Columns: [label, description, operator, country, located_in_the_administrative_territorial_entity, indian_financial_system_code, instance_of]",
        "Response": "Table: tjsb_sahakari_bank_branch"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO poker_player (Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings) VALUES (5, 7, 26.0, 3.0, 154.0, 142800.0);\nDatabase State:\n- Table: PokerPlayers, Columns: [Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings]\n- Table: people, Columns: [People_ID, Nationality, Name, Birth_Date, Height]",
        "Response": "Table: PokerPlayers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, applies_to_jurisdiction, legal_citation_of_this_text, part_of, effective_date) VALUES ('Delimitation Order No. 39 under Delimitation Act, 2002', 'nan', 'proclamation', 'India', 'Haryana', 'O.N. 18 (E) dated 15 February 2007', 'Delimitation Orders of India under Delimitation Act, 2002', '+2008-02-19T00:00:00Z');\nDatabase State:\n- Table: political_border, Columns: [label, description, country, commons_category, iso_3166_2_code, located_in_the_administrative_territorial_entity, coordinate_location, locator_map_image, shares_border_with, official_website, topics_main_category, gnd_id, freebase_id, fips_10_4_countries_and_regions, musicbrainz_area_id, instance_of, geonames_id, page_banner, category_of_associated_people, getty_thesaurus_of_geographic_names_id, openstreetmap_relation_id, head_of_state, capital, encyclop\u00e6dia_britannica_online_id, curlie_id, inception, area, population, head_of_government, quora_topic_id, contains_the_administrative_territorial_entity, subreddit, indian_census_area_code_2001, gran_enciclop\u00e8dia_catalana_id, wikimedia_outline, legislative_body, office_held_by_head_of_government, executive_body, location_map, coextensive_with, different_from, viaf_id, male_population, female_population, urban_population, rural_population, mdws_place_id, library_of_congress_authority_id, native_label, literate_population, illiterate_population, language_used, image, whos_on_first_id, category_for_maps, geoshape, wolfram_language_entity_code, kbpedia_id, hasc, inaturalist_place_id, economy_of_topic, twitter_topic_id, store_norske_leksikon_id, den_store_danske_id, national_library_of_israel_j9u_id, online_pwn_encyclopedia_id, official_name, biblioth\u00e8que_nationale_de_france_id, nkcr_aut_id]\n- Table: capital_city, Columns: [label, description, instance_of, located_in_the_administrative_territorial_entity, country, coordinate_location, topics_main_category, freebase_id, image, geonames_id, gnd_id, elevation_above_sea_level, category_of_associated_people, capital_of, viaf_id, postal_code, local_dialing_code, population, official_website, quora_topic_id, area, page_banner, native_label, commons_category, authority, library_of_congress_authority_id, gran_enciclop\u00e8dia_catalana_id, whos_on_first_id, category_for_maps, worldcat_identities_id, store_norske_leksikon_id, national_library_of_israel_j9u_id, located_in_time_zone, encyclop\u00e6dia_britannica_online_id]\n- Table: office_held_by_head_of_government, Columns: [label, description, instance_of, subclass_of, country, applies_to_jurisdiction, has_list, inception, part_of]",
        "Response": "Table: delimitation_orders_of_india_under_delimitation_act_2002"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO followed_by (label, description, instance_of, part_of, sport, country, follows, followed_by) VALUES ('2023 Venezuelan National Road Race Championships', 'nan', 'Venezuelan National Road Race Championships', '2023 national road cycling championships', 'road bicycle racing', 'Venezuela', '2022 Venezuelan National Road Race Championships', 'nan');\nDatabase State:\n- Table: part, Columns: [label, description, instance_of, follows, sport, has_parts, point_in_time, followed_by, subclass_of]\n- Table: CyclingChampionships, Columns: [label, description, instance_of, part_of, sport, country, follows, followed_by]",
        "Response": "Table: CyclingChampionships"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO body_builder (Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total) VALUES (2, 2, 137.5, 177.5, 315.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: body_builder"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Likes (student_id) VALUES (1782, 1709);\nDatabase State:\n- Table: Highschooler, Columns: [ID]",
        "Response": "Table: Likes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO winner (label, description, instance_of, sex_or_gender, occupation, country_of_citizenship, date_of_birth, judoinside_judoka_id, place_of_birth, sport, participant_in, ijf_judoka_id, given_name, instagram_username) VALUES ('Madeleine Malonga', 'French judoka', 'human', 'female', 'judoka', 'France', '+1993-12-25T00:00:00Z', '54259.0', 'Soisy-sous-Montmorency', 'judo', 'judo at the 2020 Summer Olympics \u2013 women''s 78 kg', '3788.0', 'Madeleine', 'mado_m');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, population, viaf_id, geonames_id, gnd_id, isni, country, musicbrainz_area_id, capital, geoshape, openstreetmap_relation_id, shares_border_with, topics_main_category, locator_map_image, area, page_banner, commons_category, instance_of, category_for_people_born_here, located_in_time_zone, contains_the_administrative_territorial_entity, freebase_id, library_of_congress_authority_id, coordinate_location, category_for_maps, worldcat_identities_id, inaturalist_place_id, national_library_of_israel_j9u_id, head_of_government, image, named_after, located_in_the_administrative_territorial_entity]\n- Table: 2019_world_judo_championships, Columns: [label, description, instance_of, part_of, sport, follows, winner, location, google_knowledge_graph_id, followed_by, country, point_in_time, ijf_competition_id, judoinside_competition_id, short_name, number_of_participants]\n- Table: followed_by, Columns: [label, description, instance_of, part_of, location, country, sport, point_in_time, follows, short_name, ijf_competition_id, judoinside_competition_id, organizer, followed_by, number_of_participants]\n- Table: place_of_birth, Columns: [label, description, commons_category, country, coordinate_location, page_banner, freebase_id, twinned_administrative_body, geonames_id, instance_of, image, quora_topic_id, topics_main_category, located_in_the_administrative_territorial_entity, located_in_time_zone, population, whos_on_first_id, native_label, national_library_of_israel_j9u_id, flag_image, coat_of_arms_image, gnd_id, viaf_id, musicbrainz_area_id, head_of_government, official_website, category_of_associated_people, shares_border_with, area, library_of_congress_authority_id, archinform_location_id, locator_map_image, worldcat_identities_id]\n- Table: winner, Columns: [label, description, instance_of, sex_or_gender, occupation, country_of_citizenship, date_of_birth, judoinside_judoka_id, place_of_birth, sport, participant_in, ijf_judoka_id, given_name, instagram_username]\n- Table: event, Columns: [label, description, instance_of, part_of, sport, competition_class, follows, number_of_participants, point_in_time, winner, olympedia_event_id, location, followed_by, country]\n- Table: political_border, Columns: [label, description, shares_border_with, commons_category, country, flag_image, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, instance_of, freebase_id, locator_map_image, geonames_id, musicbrainz_area_id, openstreetmap_relation_id, official_website, population, area, located_in_time_zone, coat_of_arms_image, whos_on_first_id, inaturalist_place_id, image, viaf_id, worldcat_identities_id]\n- Table: follows, Columns: [label, description, instance_of, point_in_time, sport, followed_by, follows, winner, location, google_knowledge_graph_id, country, part_of, number_of_participants, ijf_competition_id, judoinside_competition_id, short_name]\n- Table: capital_city, Columns: [label, description, twinned_administrative_body, page_banner, country, instance_of, flag_image, coat_of_arms_image, commons_category, postal_code, located_in_time_zone, coordinate_location, located_in_the_administrative_territorial_entity, gnd_id, topics_main_category, viaf_id, commons_gallery, musicbrainz_area_id, freebase_id, population, image, category_for_people_who_died_here, geonames_id, head_of_government, official_website, category_of_associated_people, described_by_source, elevation_above_sea_level, openstreetmap_relation_id, shares_border_with, located_in_or_next_to_body_of_water, encyclop\u00e6dia_britannica_online_id, area, library_of_congress_authority_id, quora_topic_id, official_name, native_label, inception, great_russian_encyclopedia_online_id, archinform_location_id, nkcr_aut_id, locator_map_image, getty_thesaurus_of_geographic_names_id, whos_on_first_id, gran_enciclop\u00e8dia_catalana_id, category_for_maps, worldcat_identities_id, inaturalist_place_id, den_store_danske_id, store_norske_leksikon_id, social_media_followers, national_library_of_israel_j9u_id, online_pwn_encyclopedia_id, twitter_username, nese_id, capital_of, office_held_by_head_of_government]",
        "Response": "Table: winner"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (locationID, locationcity, address, state, zipcode, officephone) VALUES (2, 'Boston', '3 Commons Blvd', 'MA', 2190, '(617)123-4444');\nDatabase State:\n- Table: position, Columns: [positionID, positiontitle, educationrequired, minsalary, maxsalary]\n- Table: location, Columns: [locationID, locationcity, address, state, zipcode, officephone]\n- Table: employee, Columns: [ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO natural_product (label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, genbank_assembly_accession_number, gram_staining) VALUES ('Escherichia coli O104:H4 str. 2011C-3493', 'bacterial strain', 'Escherichia coli O104:H4 str. 2011C-3493', 'Escherichia coli', '1133852', 'strain', 'GCA_000299455.1', 'Gram-negative bacteria');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: natural_product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, part_of, coordinate_location, located_in_the_administrative_territorial_entity, located_in_time_zone, connecting_line, google_knowledge_graph_id, commons_category, image) VALUES ('R\u00f3d\u00e3o Train Station', 'railway station in Portugal', 'railway station', 'Portugal', 'Linha da Beira Baixa', '39.65509444', 'Vila Velha de R\u00f3d\u00e3o', 'Western European Time', 'Linha da Beira Baixa', '/g/121tb_38', 'R\u00f3d\u00e3o Train Station', 'R\u00f3d\u00e3o - Constru\u00e7\u00e3o de passagem superior (4117876497).jpg');\nDatabase State:\n- Table: linha_da_beira_baixa, Columns: [label, description, instance_of, country, part_of, coordinate_location, located_in_the_administrative_territorial_entity, located_in_time_zone, connecting_line, google_knowledge_graph_id, commons_category, image]",
        "Response": "Table: linha_da_beira_baixa"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (film_id, title, description) VALUES (344, 'FURY MURDER', 'A Lacklusture Reflection of a Boat And a Forensic Psychologist who must Fight a Waitress in A Monastery');\nDatabase State:\n- Table: film_text, Columns: [film_id, title, description]\n- Table: film_category, Columns: [film_id, category_id, last_update]\n- Table: film_actor, Columns: [actor_id, film_id, last_update]\n- Table: language, Columns: [language_id, name, last_update]\n- Table: inventory, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: film, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]\n- Table: address, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: staff, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]\n- Table: actor, Columns: [actor_id, first_name, last_name, last_update]\n- Table: country, Columns: [country_id, country, last_update]\n- Table: store, Columns: [store_id, manager_staff_id, address_id, last_update]\n- Table: category, Columns: [category_id, name, last_update]\n- Table: payment, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: customer, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]",
        "Response": "Table: film_text"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO longest_absense_from_school (name, month) VALUES ('student530', 6);\nDatabase State:\n- Table: disabled, Columns: [name]\n- Table: enlist, Columns: [name, organ]\n- Table: longest_absense_from_school, Columns: [name, month]\n- Table: enrolled, Columns: [name, school, month]",
        "Response": "Table: longest_absense_from_school"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Highschooler (ID) VALUES (1689, 'Gabriel', 9);\nDatabase State:\n- Table: Likes, Columns: [student_id]\n- Table: Students, Columns: [ID]",
        "Response": "Table: Students"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO ha_ha (label, description, coordinate_location, country, heritage_designation, instance_of, located_in_the_administrative_territorial_entity, national_heritage_list_for_england_number, historic_county, os_grid_reference) VALUES ('Ha-ha Wall', 'ha-ha in Helmsley, Ryedale, England, UK', '54.24', 'United Kingdom', 'Grade II* listed building', 'ha-ha', 'Helmsley', '1149268.0', 'Yorkshire', 'SE6043183100');\nDatabase State:\n- Table: historic_county, Columns: [label, description, commons_category, coordinate_location, locator_map_image, instance_of, country, population, flag_image, shares_border_with, flag, catalog_code, factgrid_item_id, part_of, different_from]\n- Table: flag, Columns: [label, description, instance_of, image, applies_to_jurisdiction, country, freebase_id]\n- Table: Historic_Hahas, Columns: [label, description, coordinate_location, country, heritage_designation, instance_of, located_in_the_administrative_territorial_entity, national_heritage_list_for_england_number, historic_county, os_grid_reference]\n- Table: political_border, Columns: [label, description, instance_of, country, locator_map_image, flag_image, shares_border_with, population, coordinate_location, catalog_code, commons_category, part_of, factgrid_item_id, flag, vision_of_britain_place_id]",
        "Response": "Table: Historic_Hahas"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (playlist_id, track_id) VALUES (8, 2606);\nDatabase State:\n- Table: tracks, Columns: [id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]\n- Table: playlist_tracks, Columns: [playlist_id, track_id]\n- Table: artists, Columns: [id, name]\n- Table: genres, Columns: [id, name]\n- Table: customers, Columns: [id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]",
        "Response": "Table: playlist_tracks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO basketball_match (Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral) VALUES (1, 1, 'North Carolina', '14\u20132', '.875', '6\u20132', '8\u20130', '35\u20132', 0.945999999999999953, '14\u20132', '13\u20130', '9\u20131');\nDatabase State:\n- Table: ACC_Team_Statistics, Columns: [Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral]",
        "Response": "Table: ACC_Team_Statistics"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, Name, CountryCode, District, Population) VALUES (3880, 'Shreveport', 'USA', 'Louisiana', 200145);\nDatabase State:\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, found_in_taxon, entrez_gene_id, subclass_of, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('putative dethiobiotin synthetase b1593', 'microbial gene found in Escherichia coli str. K-12 substr. MG1655', 'Escherichia coli str. K-12 substr. MG1655', '944927', 'gene', 'b1593', 'Putative dethiobiotin synthetase b1593', 'gene', '1667218', 'reverse strand', '1666523');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO channel (Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent) VALUES (1, 'CCTV-1', 'CCTV', 4.900000000000000355, 0.5400000000000000355);\nDatabase State:\n- Table: broadcast, Columns: [Channel_ID, Program_ID, Time_of_day]\n- Table: channel, Columns: [Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent]\n- Table: program, Columns: [Program_ID, Name, Origin, Launch, Owner]\n- Table: broadcast_share, Columns: [Channel_ID, Program_ID, Date, Share_in_percent]",
        "Response": "Table: channel"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO employee (ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID) VALUES ('245-67-8910', 'Johanson', 'Sandy', '6/2/05', 'US$69,000.00', 'F', NULL, 1, 6);\nDatabase State:\n- Table: position, Columns: [positionID, positiontitle, educationrequired, minsalary, maxsalary]\n- Table: location, Columns: [locationID, locationcity, address, state, zipcode, officephone]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO beers (id, brewery_id, abv, ibu, name, style, ounces) VALUES (1728, 118, 0.08500000000000000611, 110.0, 'Red Cockaded Ale', 'American Double / Imperial IPA', 12.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: beers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO place_of_birth (label, description, country, coordinate_location, freebase_id, located_in_the_administrative_territorial_entity, instance_of, geonames_id, whos_on_first_id) VALUES ('Afagnan', 'town', 'Togo', '6.4939168', 'nan', 'Lacs', 'town', 'nan', 'nan');\nDatabase State:\n- Table: country, Columns: [label, description, dewey_decimal_classification, continent, capital, instance_of, shares_border_with, head_of_state, official_language, currency, top_level_internet_domain, flag_image, anthem, flag, iso_3166_1_alpha_2_code, iso_3166_1_alpha_3_code, iso_3166_1_numeric_code, commons_category, coat_of_arms_image, head_of_government, coordinate_location, contains_the_administrative_territorial_entity, member_of, topics_main_category, locator_map_image, page_banner, coat_of_arms, country_calling_code, ndl_authority_id, curlie_id, ioc_country_code, musicbrainz_area_id, country, freebase_id, fips_10_4_countries_and_regions, highest_point, geonames_id, gnd_id, category_for_people_who_died_here, located_in_time_zone, category_for_films_shot_at_this_location, category_of_associated_people, population, diplomatic_relation, topics_main_wikimedia_portal, commons_gallery, lowest_point, mobile_country_code, demonym, driving_side, geography_of_topic, mains_voltage, electrical_plug_type, legislative_body, history_of_topic, encyclop\u00e6dia_britannica_online_id, coordinates_of_northernmost_point, new_york_times_topic_id, area, human_development_index, quora_topic_id, insee_countries_and_foreign_territories_code, short_name, le_monde_diplomatique_subject_id, unesco_thesaurus_id, coordinates_of_southernmost_point, coordinates_of_easternmost_point, coordinates_of_westernmost_point, office_held_by_head_of_government, yso_id, getty_thesaurus_of_geographic_names_id, stw_thesaurus_for_economics_id, openstreetmap_relation_id, licence_plate_code, us_national_archives_identifier, subreddit, gacs_id, encyclop\u00e6dia_universalis_id, mesh_descriptor_id, gran_enciclop\u00e8dia_catalana_id, office_held_by_head_of_state, has_quality, total_fertility_rate, motto_text, maritime_identification_digits, great_russian_encyclopedia_online_id, wikimedia_outline, civicus_monitor_country_entry, geoshape, brockhaus_enzyklop\u00e4die_online_id, isni, ituisoiec_object_identifier, archinform_location_id, national_library_of_israel_id_old, idref_id, biblioth\u00e8que_nationale_de_france_id, viaf_id, life_expectancy, nkcr_aut_id, statoids_id, itu_letter_code, wipo_st3, inception, asc_leiden_thesaurus_id, emergency_phone_number, unicode_character, iab_code, klexikon_article_id, library_of_congress_authority_id, loc_and_marc_vocabularies_id, part_of, official_name, language_used, comic_vine_id, whos_on_first_id, treccanis_dizionario_di_storia_id, omegawiki_defined_meaning, hds_id, pronunciation_audio, culture, geonlp_id, category_for_maps, french_vikidia_id, spanish_vikidia_id, eurovoc_id, worldcat_identities_id, kbpedia_id, bti_status_index, bti_governance_index, rkd_thesaurus_id, interlingual_index_id, tasteatlas_id, economy_of_topic, uk_parliament_thesaurus_id, wordnet_31_synset_id, demographics_of_topic, inaturalist_place_id, krugosvet_article, idaigazetteer_id, the_world_factbook_country_id, national_library_of_israel_j9u_id, store_norske_leksikon_id, democracy_index, catalan_vikidia_id, museum_digital_place_id, ysa_id, yle_topic_id, postimees_topic_id, den_store_danske_id, bbc_news_topic_id, m49_code, online_pwn_encyclopedia_id, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, central_bank, hashtag, on_focus_list_of_wikimedia_project, gini_coefficient, obo_gazetteer_id, openstreetmap_element, namuwiki_id, official_website, bbc_things_id, fast_id, dr_topic_id, native_label]\n- Table: economy_of_africa, Columns: [label, description, topics_main_category, instance_of, commons_category, quora_topic_id, location, country, subclass_of, inflation_rate, nominal_gdp, nominal_gdp_per_capita, ppp_gdp_per_capita, gdp_ppp, real_gdp_growth_rate, store_norske_leksikon_id]\n- Table: place_of_birth, Columns: [label, description, country, coordinate_location, freebase_id, located_in_the_administrative_territorial_entity, instance_of, geonames_id, whos_on_first_id]\n- Table: administrative_territorial_entity, Columns: [label, description, country, coordinate_location, located_in_the_administrative_territorial_entity, instance_of, freebase_id, inaturalist_place_id, geonames_id]\n- Table: physical_location, Columns: [label, description, dewey_decimal_classification, continent, capital, instance_of, shares_border_with, head_of_state, official_language, currency, top_level_internet_domain, flag_image, anthem, flag, iso_3166_1_alpha_2_code, iso_3166_1_alpha_3_code, iso_3166_1_numeric_code, commons_category, coat_of_arms_image, head_of_government, coordinate_location, contains_the_administrative_territorial_entity, member_of, topics_main_category, locator_map_image, page_banner, coat_of_arms, country_calling_code, ndl_authority_id, curlie_id, ioc_country_code, musicbrainz_area_id, country, freebase_id, fips_10_4_countries_and_regions, highest_point, geonames_id, gnd_id, category_for_people_who_died_here, located_in_time_zone, category_for_films_shot_at_this_location, category_of_associated_people, population, diplomatic_relation, topics_main_wikimedia_portal, commons_gallery, lowest_point, mobile_country_code, demonym, driving_side, geography_of_topic, mains_voltage, electrical_plug_type, legislative_body, history_of_topic, encyclop\u00e6dia_britannica_online_id, coordinates_of_northernmost_point, new_york_times_topic_id, area, human_development_index, quora_topic_id, insee_countries_and_foreign_territories_code, short_name, le_monde_diplomatique_subject_id, unesco_thesaurus_id, coordinates_of_southernmost_point, coordinates_of_easternmost_point, coordinates_of_westernmost_point, office_held_by_head_of_government, yso_id, getty_thesaurus_of_geographic_names_id, stw_thesaurus_for_economics_id, openstreetmap_relation_id, licence_plate_code, us_national_archives_identifier, subreddit, gacs_id, encyclop\u00e6dia_universalis_id, mesh_descriptor_id, gran_enciclop\u00e8dia_catalana_id, office_held_by_head_of_state, has_quality, total_fertility_rate, motto_text, maritime_identification_digits, great_russian_encyclopedia_online_id, wikimedia_outline, civicus_monitor_country_entry, geoshape, brockhaus_enzyklop\u00e4die_online_id, isni, ituisoiec_object_identifier, archinform_location_id, national_library_of_israel_id_old, idref_id, biblioth\u00e8que_nationale_de_france_id, viaf_id, life_expectancy, nkcr_aut_id, statoids_id, itu_letter_code, wipo_st3, inception, asc_leiden_thesaurus_id, emergency_phone_number, unicode_character, iab_code, klexikon_article_id, library_of_congress_authority_id, loc_and_marc_vocabularies_id, part_of, official_name, language_used, comic_vine_id, whos_on_first_id, treccanis_dizionario_di_storia_id, omegawiki_defined_meaning, hds_id, pronunciation_audio, culture, geonlp_id, category_for_maps, french_vikidia_id, spanish_vikidia_id, eurovoc_id, worldcat_identities_id, kbpedia_id, bti_status_index, bti_governance_index, rkd_thesaurus_id, interlingual_index_id, tasteatlas_id, economy_of_topic, uk_parliament_thesaurus_id, wordnet_31_synset_id, demographics_of_topic, inaturalist_place_id, krugosvet_article, idaigazetteer_id, the_world_factbook_country_id, national_library_of_israel_j9u_id, store_norske_leksikon_id, democracy_index, catalan_vikidia_id, museum_digital_place_id, ysa_id, yle_topic_id, postimees_topic_id, den_store_danske_id, bbc_news_topic_id, m49_code, online_pwn_encyclopedia_id, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, central_bank, hashtag, on_focus_list_of_wikimedia_project, gini_coefficient, obo_gazetteer_id, openstreetmap_element, namuwiki_id, official_website, bbc_things_id, fast_id, dr_topic_id, native_label]",
        "Response": "Table: place_of_birth"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, instance_of, genomic_start, genomic_end, ncbi_locus_tag) VALUES ('glucose-6-phosphate 1-dehydrogenase AMED_2806', 'microbial gene found in Amycolatopsis mediterranei U32', '9437011', 'gene', 'Glucose-6-phosphate 1-dehydrogenase AMED_2806', 'Amycolatopsis mediterranei U32', 'reverse strand', 'gene', '2997135', '2998658', 'AMED_2806');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, instance_of, genomic_start, genomic_end, ncbi_locus_tag]\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('cryptic beta-D-galactosidase subunit beta ECUMN_3560', 'microbial gene found in Escherichia coli UMN026', 'Escherichia coli UMN026', '7156219', 'gene', 'Cryptic beta-D-galactosidase subunit beta ECUMN_3560', 'ECUMN_3560', 'gene', '3680886', 'forward strand', '3680437');\nDatabase State:\n- Table: natural_product, Columns: [label, description, taxon_name, parent_taxon, ncbi_taxonomy_id, instance_of, gram_staining, genbank_assembly_accession_number]\n- Table: yhch_yjgk_yial_superfamily, Columns: [label, description, uniprot_protein_id, found_in_taxon, subclass_of, encoded_by, instance_of, refseq_protein_id, part_of]\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Products (Code, Name, Price, Manufacturer) VALUES (7, 'CD drive', 90, 2);\nDatabase State:\n- Table: Manufacturers, Columns: [Code, Name, Headquarter, Founder, Revenue]\n- Table: Electronics, Columns: [Code, Name, Price, Manufacturer]",
        "Response": "Table: Electronics"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cars (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num) VALUES (16, 5, 2, 'rectangle', 'long', 'not_double', 'flat', 3, 'rectangle', 1);\nDatabase State:\n- Table: trains, Columns: [id, direction]",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO customers (customerNumber, customerName, contactLastName, contactFirstName, phone, addressLine1, addressLine2, city, state, postalCode, country, salesRepEmployeeNumber, creditLimit) VALUES (386, 'L''ordine Souveniers', 'Moroni', 'Maurizio ', '0522-556555', 'Strada Provinciale 124', NULL, 'Reggio Emilia', NULL, '42100', 'Italy', 1401, 121400.0);\nDatabase State:\n- Table: orders, Columns: [orderNumber, orderDate, requiredDate, shippedDate, status, comments, customerNumber]\n- Table: ClientInformation, Columns: [customerNumber, customerName, contactLastName, contactFirstName, phone, addressLine1, addressLine2, city, state, postalCode, country, salesRepEmployeeNumber, creditLimit]",
        "Response": "Table: ClientInformation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, subclass_of, found_in_taxon, entrez_gene_id, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('hypothetical protein Rv2409c', 'microbial gene found in Mycobacterium tuberculosis H37Rv', 'gene', 'Mycobacterium tuberculosis H37Rv', '885674', 'Rv2409c', 'Hypothetical protein Rv2409c', 'gene', '2707332', 'reverse strand', '2706493');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, subclass_of, found_in_taxon, entrez_gene_id, ncbi_locus_tag, encodes, instance_of, genomic_end, strand_orientation, genomic_start]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, commons_category, numeric_value, unicode_character, kit_linked_open_numbers_id, prime_factor, pronunciation_audio, number_of_decimal_digits, code, omegawiki_defined_meaning, babelnet_id) VALUES ('26', 'natural number', 'natural number', '26 (number)', 26.0, '\u3256', '26', '2.0', 'Cs-26.ogg', 2.0, '\u0be8\u0bf0\u0bec', '7051.0', '00000090n');\nDatabase State:\n- Table: Numbers, Columns: [label, description, instance_of, commons_category, numeric_value, unicode_character, kit_linked_open_numbers_id, prime_factor, pronunciation_audio, number_of_decimal_digits, code, omegawiki_defined_meaning, babelnet_id]",
        "Response": "Table: Numbers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity) VALUES (2634615, 6, 5200, 197, 702);\nDatabase State:\n- Table: Employees, Columns: [EmployeeID, FirstName, MiddleInitial, LastName]\n- Table: Customers, Columns: [CustomerID, FirstName, MiddleInitial, LastName]\n- Table: Products, Columns: [ProductID, Name, Price]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age) VALUES (120484, 'Male', 'Married-civ-spouse', 51, 6, 'Machine-op-inspct', 22);\nDatabase State:\n- Table: Mailings1_2, Columns: [REFID, REF_DATE, RESPONSE]\n- Table: Sales, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]\n- Table: mailings3, Columns: [REFID, REF_DATE, RESPONSE]\n- Table: Demog, Columns: [GEOID, INHABITANTS_K, INCOME_K, A_VAR1, A_VAR2, A_VAR3, A_VAR4, A_VAR5, A_VAR6, A_VAR7, A_VAR8, A_VAR9, A_VAR10, A_VAR11, A_VAR12, A_VAR13, A_VAR14, A_VAR15, A_VAR16, A_VAR17, A_VAR18]\n- Table: Demographics, Columns: [ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age]",
        "Response": "Table: Demographics"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No) VALUES (598075, 10, 4, 1, 1);\nDatabase State:\n- Table: Season, Columns: [Season_Id, Man_of_the_Series, Orange_Cap, Purple_Cap, Season_Year]\n- Table: Batting_Style, Columns: [Batting_Id, Batting_hand]\n- Table: Toss_Decision, Columns: [Toss_Id, Toss_Name]\n- Table: Rolee, Columns: [Role_Id, Role_Desc]\n- Table: Wicket_Taken, Columns: [Match_Id, Over_Id, Ball_Id, Player_Out, Kind_Out, Fielders, Innings_No]\n- Table: City, Columns: [City_Id, City_Name, Country_id]\n- Table: Umpire, Columns: [Umpire_Id, Umpire_Name, Umpire_Country]\n- Table: Team, Columns: [Team_Id, Team_Name]",
        "Response": "Table: Batsman_Scored"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, country, iso_3166_2_code, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, freebase_id, fips_10_4_countries_and_regions, instance_of, inception, geonames_id, capital, area, population, locator_map_image, getty_thesaurus_of_geographic_names_id, openstreetmap_relation_id, whos_on_first_id, geoshape, inaturalist_place_id, located_in_time_zone) VALUES ('Santa B\u00e1rbara Department', 'department of Honduras', 'Santa B\u00e1rbara Department, Honduras', 'Honduras', 'HN-SB', '14.916666666667', 'Honduras', 'Category:Santa B\u00e1rbara Department, Honduras', '/m/02pn8v', 'HO16', 'department of Honduras', '+1825-00-00T00:00:00Z', '3601689', 'Santa B\u00e1rbara', 5024.0, 421337.0, 'Santa Barbara in Honduras.svg', '1000751.0', '4627395', '85671905.0', 'Data:Honduras/Santa B\u00e1rbara.map', '10754', 'UTC\u221206:00');\nDatabase State:\n- Table: administrative_centre, Columns: [label, description, commons_category, country, iso_3166_2_code, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, freebase_id, fips_10_4_countries_and_regions, instance_of, inception, geonames_id, capital, area, population, locator_map_image, getty_thesaurus_of_geographic_names_id, language_used, openstreetmap_relation_id, whos_on_first_id, gran_enciclop\u00e8dia_catalana_id, geoshape, inaturalist_place_id, located_in_time_zone]\n- Table: capital_city, Columns: [label, description, country, coordinate_location, freebase_id, instance_of, geonames_id, elevation_above_sea_level, area, commons_category, population, located_in_the_administrative_territorial_entity, encyclop\u00e6dia_britannica_online_id, capital_of, whos_on_first_id, inaturalist_place_id, national_library_of_israel_j9u_id, located_in_time_zone, image]\n- Table: department_of_honduras, Columns: [label, description, commons_category, country, iso_3166_2_code, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, freebase_id, fips_10_4_countries_and_regions, instance_of, inception, geonames_id, capital, area, population, locator_map_image, getty_thesaurus_of_geographic_names_id, openstreetmap_relation_id, whos_on_first_id, geoshape, inaturalist_place_id, located_in_time_zone]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customer_Policies (Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date) VALUES (738, 8, 'Travel', '2018-06-16', '2017-12-04');\nDatabase State:\n- Table: Customer_Policies, Columns: [Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date]",
        "Response": "Table: Customer_Policies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, country, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, instance_of, freebase_id, geonames_id, shares_border_with, official_website, capital, locator_map_image, area, indian_census_area_code_2011, population, male_population, female_population, number_of_households, urban_population, rural_population, literate_population, illiterate_population, geoshape, wolfram_language_entity_code, inaturalist_place_id, located_in_time_zone) VALUES ('Mumbai Suburban district', 'district of Maharashtra in India', 'Mumbai Suburban district', 'India', '19.05', 'Konkan division', 'Category:Mumbai Suburban district', 'district of India', '/m/07m3wx', '8347322.0', 'Mumbai City district', 'http://mumbaisuburban.gov.in/', 'Bandra', 'Mumbai Suburban in Maharashtra (India).svg', 446.0, '518.0', 9356962.0, 5031323.0, 4325639.0, 2105604.0, 9356962.0, 0.0, 7575485.0, 1781477.0, 'Data:India/Maharashtra/Mumbai Suburban.map', 'Entity[\"AdministrativeDivision\", {\"MumbaiSuburban\", \"Maharashtra\", \"India\"}]', '100677', 'UTC+05:30');\nDatabase State:\n- Table: Districts, Columns: [label, description, commons_category, country, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, instance_of, freebase_id, geonames_id, shares_border_with, official_website, capital, locator_map_image, area, indian_census_area_code_2011, population, male_population, female_population, number_of_households, urban_population, rural_population, literate_population, illiterate_population, geoshape, wolfram_language_entity_code, inaturalist_place_id, located_in_time_zone]\n- Table: capital_city, Columns: [label, description, country, located_in_the_administrative_territorial_entity, commons_category, instance_of, located_in_time_zone, coordinate_location, freebase_id, geonames_id, elevation_above_sea_level, image, postal_code, local_dialing_code, capital_of, quora_topic_id, whos_on_first_id, area]\n- Table: administrative_territorial_entity, Columns: [label, description, country, coordinate_location, located_in_the_administrative_territorial_entity, capital, topics_main_category, instance_of, freebase_id, geonames_id, commons_category, shares_border_with, located_in_time_zone, official_website, locator_map_image, area, indian_census_area_code_2011, population, male_population, female_population, number_of_households, urban_population, rural_population, library_of_congress_authority_id, literate_population, illiterate_population, geoshape, viaf_id, wolfram_language_entity_code, inaturalist_place_id]\n- Table: tjsb_sahakari_bank_branch, Columns: [label, description, operator, country, located_in_the_administrative_territorial_entity, indian_financial_system_code, instance_of]",
        "Response": "Table: Districts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO MenuItem (id, menu_page_id, price, high_price, dish_id, created_at, updated_at, xpos, ypos) VALUES (1349678, 76542, 0.4000000000000000222, NULL, 1742, '2014-09-07 22:04:36 UTC', '2014-09-07 22:04:36 UTC', 0.6586670000000000024, 0.8538090000000000401);\nDatabase State:\n- Table: Menu, Columns: [id, name, sponsor, event, venue, place, physical_description, occasion, notes, call_number, keywords, language, date, location, location_type, currency, currency_symbol, status, page_count, dish_count]\n- Table: MenuPage, Columns: [id, menu_id, page_number, image_id, full_height, full_width, uuid]\n- Table: MenuItems, Columns: [id, menu_page_id, price, high_price, dish_id, created_at, updated_at, xpos, ypos]",
        "Response": "Table: MenuItems"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, instance_of, genomic_end, strand_orientation, genomic_start) VALUES ('beta-D-galactosidase CA_C0836', 'microbial gene found in Clostridium acetobutylicum ATCC 824', 'Clostridium acetobutylicum ATCC 824', '1117019', 'gene', 'Beta-D-galactosidase CA_C0836', 'CA_C0836', 'gene', '967278', 'forward strand', '966820');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO city (City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic) VALUES (1, 1, 'Adjuntas', 93.0999999999999944, 3.100000000000000088, 0.2999999999999999889, 0.0, 3.399999999999999912, 99.5999999999999944);\nDatabase State:\n- Table: Demographics, Columns: [City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic]\n- Table: county_public_safety, Columns: [County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location]",
        "Response": "Table: Demographics"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, sport, country) VALUES ('Pune Pistons', 'badminton club', 'sports team', 'badminton', 'India');\nDatabase State:\n- Table: badminton_club, Columns: [label, description, instance_of, sport, country]",
        "Response": "Table: badminton_club"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO characters (MovieID, ActorID, Character_Name, creditOrder, pay, screentime) VALUES (104, 713, 'Niko', 6, NULL, NULL);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: characters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO roller_coaster (Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status) VALUES (5, 'Twister', 'Gr\u00f6na Lund', 2, 1574.0, 50.0, '37.9', '2011', 'Operating');\nDatabase State:\n- Table: country, Columns: [Country_ID, Name, Population, Area, Languages]\n- Table: roller_coaster, Columns: [Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status]",
        "Response": "Table: roller_coaster"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, located_in_the_administrative_territorial_entity, lau, instance_of, freebase_id, country, coat_of_arms_image, shares_border_with, population, image, geonames_id, coordinate_location, topics_main_category, postal_code, official_website, elevation_above_sea_level, time_of_earliest_written_record, email_address, nkcr_aut_id, openstreetmap_relation_id, area, licence_plate_code, czech_registration_id, historical_region, whos_on_first_id, geoshape, mapycz_id, isds_id, czech_municipality_id, number_of_houses, mean_age, flag_image) VALUES ('Horn\u00ed Maxov', 'village in Jablonec nad Nisou District of Liberec region', 'Horn\u00ed Maxov', 'Lu\u010dany nad Nisou', 'nan', 'cadastral area in the Czech Republic', '/m/0p3rhh6', 'Czech Republic', 'nan', 'nan', 160.0, 'Horni Maxov in 2011 (5).jpg', 'nan', '50.76416667', 'nan', '46844', 'nan', NULL, '+1687-01-01T00:00:00Z', 'nan', 'xx0044524', '430720.0', 2.644000000000000127, 'nan', 'nan', 'Bohemia', '1125897333.0', 'nan', 'ward&id=6100', 'nan', 'nan', 64.0, NULL, 'nan');\nDatabase State:\n- Table: jizera_mountains, Columns: [label, description, instance_of, country, coordinate_location, elevation_above_sea_level, image, located_in_the_administrative_territorial_entity, mountain_range, google_knowledge_graph_id, part_of]\n- Table: administrative_territorial_entity, Columns: [label, description, commons_category, located_in_the_administrative_territorial_entity, lau, instance_of, freebase_id, country, coat_of_arms_image, shares_border_with, population, image, geonames_id, coordinate_location, topics_main_category, postal_code, official_website, elevation_above_sea_level, time_of_earliest_written_record, email_address, nkcr_aut_id, openstreetmap_relation_id, area, licence_plate_code, czech_registration_id, historical_region, whos_on_first_id, geoshape, mapycz_id, isds_id, czech_municipality_id, number_of_houses, mean_age, flag_image]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO historical (ballotpedia_id, bioguide_id, bioguide_previous_id, birthday_bio, cspan_id, fec_id, first_name, gender_bio, google_entity_id_id, govtrack_id, house_history_alternate_id, house_history_id, icpsr_id, last_name, lis_id, maplight_id, middle_name, nickname_name, official_full_name, opensecrets_id, religion_bio, suffix_name, thomas_id, votesmart_id, wikidata_id, wikipedia_id) VALUES (NULL, 'S001038', NULL, '1881-03-04', NULL, NULL, 'Henry', 'M', 'kg:/m/02rhhcy', 410494, NULL, 22420.0, 9057.0, 'Stubbs', NULL, NULL, 'Elbert', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'Q1606698', 'Henry E. Stubbs');\nDatabase State:\n- Table: historical, Columns: [ballotpedia_id, bioguide_id, bioguide_previous_id, birthday_bio, cspan_id, fec_id, first_name, gender_bio, google_entity_id_id, govtrack_id, house_history_alternate_id, house_history_id, icpsr_id, last_name, lis_id, maplight_id, middle_name, nickname_name, official_full_name, opensecrets_id, religion_bio, suffix_name, thomas_id, votesmart_id, wikidata_id, wikipedia_id]\n- Table: historical_terms, Columns: [address, bioguide, chamber, class, contact_form, district, end, fax, last, middle, name, office, party, party_affiliations, phone, relation, rss_url, start, state, state_rank, title, type, url]\n- Table: social_media, Columns: [bioguide, facebook, facebook_id, govtrack, instagram, instagram_id, thomas, twitter, twitter_id, youtube, youtube_id]\n- Table: current, Columns: [ballotpedia_id, bioguide_id, birthday_bio, cspan_id, fec_id, first_name, gender_bio, google_entity_id_id, govtrack_id, house_history_id, icpsr_id, last_name, lis_id, maplight_id, middle_name, nickname_name, official_full_name, opensecrets_id, religion_bio, suffix_name, thomas_id, votesmart_id, wikidata_id, wikipedia_id]",
        "Response": "Table: historical"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO license (label, description, approved_by, spdx_license_id, short_name, topics_main_template, instance_of) VALUES ('ImageMagick License', 'free software license', 'Free Software Foundation', 'ImageMagick', 'ImageMagick', 'nan', 'free software license');\nDatabase State:\n- Table: license, Columns: [label, description, approved_by, spdx_license_id, short_name, topics_main_template, instance_of]\n- Table: file_converter, Columns: [label, description, instance_of, copyright_license, copyright_status]",
        "Response": "Table: license"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO followed_by (label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, follows, followed_by, competition_class, has_parts) VALUES ('2030/2031 Swedish Junior Badminton Championships U19', 'badminton championships', 'Swedish Junior Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'Sweden', '+2031-00-00T00:00:00Z', '2029/2030 Swedish Junior Badminton Championships U19', '2031/2032 Swedish Junior Badminton Championships U19', 'national championship', 'nan');\nDatabase State:\n- Table: followed_by, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, follows, followed_by, competition_class, has_parts]\n- Table: follows, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows]",
        "Response": "Table: followed_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student_Enrolment (student_enrolment_id, degree_program_id, semester_id, student_id, other_details) VALUES (15, 2, 4, 6, NULL);\nDatabase State:\n- Table: Semesters, Columns: [semester_id, semester_name, semester_description, other_details]\n- Table: Student_Enrolment_Courses, Columns: [student_course_id, course_id, student_enrolment_id]\n- Table: Departments, Columns: [department_id, department_name, department_description, other_details]\n- Table: Addresses, Columns: [address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details]\n- Table: Enrolments, Columns: [student_enrolment_id, degree_program_id, semester_id, student_id, other_details]\n- Table: Sections, Columns: [section_id, course_id, section_name, section_description, other_details]\n- Table: Transcript_Contents, Columns: [student_course_id, transcript_id]\n- Table: Transcripts, Columns: [transcript_id, transcript_date, other_details]\n- Table: Degree_Programs, Columns: [degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details]\n- Table: Students, Columns: [student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details]",
        "Response": "Table: Enrolments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tsp_type_3_repeat (label, description, uniprot_protein_id, encoded_by, molecular_function, has_parts, found_in_taxon, refseq_protein_id, instance_of, part_of) VALUES ('VWA domain-containing protein MXAN_RS06460', 'microbial protein found in Myxococcus xanthus DK 1622', 'Q1DCN1', 'VWA domain-containing protein MXAN_RS06460', 'calcium ion binding', 'von Willebrand factor, type A', 'Myxococcus xanthus DK 1622', 'WP_011551452', 'protein', 'von Willebrand factor A-like domain superfamily');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: tsp_type_3_repeat"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (MovieID, ActorID, Character_Name, creditOrder, pay, screentime) VALUES (322, 971, 'Hitch', 1, NULL, NULL);\nDatabase State:\n- Table: characters, Columns: [MovieID, ActorID, Character_Name, creditOrder, pay, screentime]\n- Table: actor, Columns: [ActorID, Name, Date_of_Birth, Birth_City, Birth_Country, Height_(Inches), Biography, Gender, Ethnicity, NetWorth]\n- Table: movie, Columns: [MovieID, Title, MPAA_Rating, Budget, Gross, Release_Date, Genre, Runtime, Rating, Rating_Count, Summary]",
        "Response": "Table: characters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Properties (property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details) VALUES (4, 'Field', '2017-09-14 15:49:23', '2003-02-27 18:17:11', 'riverside', replace('49578 Ayden Mountains\\nNew Russellhaven, UT 46626','\\n',char(10)), 6, 192374065.8000000119, 15.16999999999999993, 4514.806999999999789, 'nesciunt', 'adipisci', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Other_Available_Features, Columns: [feature_id, feature_type_code, feature_name, feature_description]\n- Table: Other_Property_Features, Columns: [property_id, feature_id, property_feature_description]",
        "Response": "Table: Properties"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO natural_product (label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number) VALUES ('Escherichia coli O157:H7 str. Sakai', 'bacterial strain', 'strain', 'Escherichia coli O157:H7 str. Sakai', 'Escherichia coli', '386585', 'Gram-negative bacteria', 'GCA_000008865.1');\nDatabase State:\n- Table: natural_product, Columns: [label, description, instance_of, taxon_name, parent_taxon, ncbi_taxonomy_id, gram_staining, genbank_assembly_accession_number]\n- Table: yebc_like, Columns: [label, description, uniprot_protein_id, encoded_by, biological_process, cell_component, found_in_taxon, refseq_protein_id, molecular_function, instance_of, part_of, subclass_of]\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, genomic_start, strand_orientation, genomic_end, instance_of, ncbi_locus_tag]",
        "Response": "Table: natural_product"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (person_id, region_id) VALUES (130238, 163);\nDatabase State:\n- Table: noc_region, Columns: [id, noc, region_name]\n- Table: games_competitor, Columns: [id, games_id, person_id, age]\n- Table: games, Columns: [id, games_year, games_name, season]\n- Table: event, Columns: [id, sport_id, event_name]",
        "Response": "Table: person_region"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, inception, replaced_by, replaces, instance_of, applies_to_jurisdiction, dissolved_abolished_or_demolished_date) VALUES ('Emsis Cabinet', 'nan', '+2004-03-09T00:00:00Z', 'First Kalv\u012btis cabinet', 'Rep\u0161e cabinet', 'Government of Latvia', 'Latvia', '+2004-12-02T00:00:00Z');\nDatabase State:\n- Table: replaced_entity, Columns: [label, description, instance_of, replaced_by, replaces, applies_to_jurisdiction, dissolved_abolished_or_demolished_date, inception]",
        "Response": "Table: replacing_subject"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude) VALUES (11210181, 'JB124564', '1/21/2018 18:57', '079XX S ELLIS AVE', '560', 'APARTMENT', 'FALSE', 'FALSE', 624, 6, 8, 44, '08A', '41.75043349', '-87.60031125');\nDatabase State:\n- Table: Neighborhood, Columns: [neighborhood_name, community_area_no]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (People_ID, Name, Country, Is_Male, Age) VALUES (1, 'Mike Weir', 'Canada', 'T', 34);\nDatabase State:\n- Table: people, Columns: [People_ID, Name, Country, Is_Male, Age]",
        "Response": "Table: people"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO capital_city (label, description, country, coordinate_location, freebase_id, instance_of, geonames_id, elevation_above_sea_level, area, commons_category, population, located_in_the_administrative_territorial_entity, encyclop\u00e6dia_britannica_online_id, capital_of, whos_on_first_id, inaturalist_place_id, national_library_of_israel_j9u_id, located_in_time_zone, image) VALUES ('Trujillo', 'city in Honduras', 'Honduras', '15.918611111111112', '/m/0752zy', 'city', '3600592', 15.0, 955.200000000000045, 'Trujillo, Col\u00f3n', 60.55799999999999983, 'Col\u00f3n Department', 'place/Trujillo-Honduras', 'Col\u00f3n Department', '421186499', '31370.0', '9.870075503011052e+17', 'UTC\u221206:00', '20160323 180753 Richtone(HDR).jpg');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, commons_category, country, iso_3166_2_code, coordinate_location, located_in_the_administrative_territorial_entity, topics_main_category, freebase_id, fips_10_4_countries_and_regions, instance_of, inception, geonames_id, capital, area, population, locator_map_image, getty_thesaurus_of_geographic_names_id, openstreetmap_relation_id, whos_on_first_id, geoshape, inaturalist_place_id, located_in_time_zone]",
        "Response": "Table: capital_city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity) VALUES (2381636, 18, 17760, 137, 642);\nDatabase State:\n- Table: Employees, Columns: [EmployeeID, FirstName, MiddleInitial, LastName]\n- Table: Customers, Columns: [CustomerID, FirstName, MiddleInitial, LastName]\n- Table: Products, Columns: [ProductID, Name, Price]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (GeneID, Essential, Class, Complex, Phenotype, Motif, Chromosome, Function, Localization) VALUES ('G234715', 'Essential', 'Polymerases', 'Transcription complexes/Transcriptosome', 'Cell cycle defects', '?', 12, 'CELL GROWTH, CELL DIVISION AND DNA SYNTHESIS', 'nucleus');\nDatabase State:\n- Table: Genes, Columns: [GeneID, Essential, Class, Complex, Phenotype, Motif, Chromosome, Function, Localization]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO content (paper_id, word_cited_id) VALUES ('squire99improving', 'word806');\nDatabase State:\n- Table: content, Columns: [paper_id, word_cited_id]\n- Table: paper, Columns: [paper_id, class_label]",
        "Response": "Table: content"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, population, geonames_id, country, capital, locator_map_image, area, commons_category, instance_of, coordinate_location, official_website, located_in_the_administrative_territorial_entity) VALUES ('Community of Madrid', 'autonomous community of Spain', 6751251.0, '3117732.0', 'Spain', 'Madrid', 'Madrid in Spain.svg', 8028.0, 'Community of Madrid', 'autonomous community of Spain', '40.42526', 'http://www.madrid.org/', 'Spain');\nDatabase State:\n- Table: administrative_territorial_entity, Columns: [label, description, population, geonames_id, country, capital, locator_map_image, area, commons_category, instance_of, coordinate_location, official_website, located_in_the_administrative_territorial_entity]\n- Table: part, Columns: [label, description, part_of, commons_category, topics_main_category, freebase_id, instance_of, quora_topic_id, coordinate_location, has_parts, nkcr_aut_id, viaf_id, locator_map_image]\n- Table: head_of_state, Columns: [label, description, sex_or_gender, commons_category, viaf_id, library_of_congress_authority_id, gnd_id, date_of_birth, member_of_political_party, instance_of, place_of_birth, occupation, country_of_citizenship, position_held, given_name, image, languages_spoken_written_or_signed, educated_at, family_name, name_in_native_language, worldcat_identities_id, opensanctions_id]\n- Table: place_of_birth, Columns: [label, description, instance_of, country, commons_category, gnd_id, viaf_id, coordinate_location, topics_main_category, official_website, freebase_id, geonames_id, population, area, located_in_the_administrative_territorial_entity, elevation_above_sea_level, image, whos_on_first_id]",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO swedish_junior_badminton_championships (label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows) VALUES ('1947/1948 Swedish Junior Badminton Championships U19', 'badminton championships', 'Swedish Junior Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'Sweden', '+1948-00-00T00:00:00Z', '1948/1949 Swedish Junior Badminton Championships U19', 'national championship', '1947/1948 Swedish Junior Badminton Championships U19 \u2013 Men''s singles', '1946/1947 Swedish Junior Badminton Championships U19');\nDatabase State:\n- Table: follows, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, followed_by, competition_class, has_parts, follows]\n- Table: followed_by, Columns: [label, description, instance_of, on_focus_list_of_wikimedia_project, sport, country, point_in_time, follows, followed_by, competition_class, has_parts]",
        "Response": "Table: swedish_junior_badminton_championships"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, dewey_decimal_classification, continent, capital, instance_of, shares_border_with, head_of_state, official_language, currency, top_level_internet_domain, flag_image, anthem, flag, iso_3166_1_alpha_2_code, iso_3166_1_alpha_3_code, iso_3166_1_numeric_code, commons_category, coat_of_arms_image, head_of_government, coordinate_location, contains_the_administrative_territorial_entity, member_of, topics_main_category, locator_map_image, page_banner, coat_of_arms, country_calling_code, ndl_authority_id, curlie_id, ioc_country_code, musicbrainz_area_id, country, freebase_id, fips_10_4_countries_and_regions, highest_point, geonames_id, gnd_id, category_for_people_who_died_here, located_in_time_zone, category_for_films_shot_at_this_location, category_of_associated_people, population, diplomatic_relation, topics_main_wikimedia_portal, commons_gallery, lowest_point, mobile_country_code, demonym, driving_side, geography_of_topic, mains_voltage, electrical_plug_type, legislative_body, history_of_topic, encyclop\u00e6dia_britannica_online_id, coordinates_of_northernmost_point, new_york_times_topic_id, area, human_development_index, quora_topic_id, insee_countries_and_foreign_territories_code, short_name, le_monde_diplomatique_subject_id, unesco_thesaurus_id, coordinates_of_southernmost_point, coordinates_of_easternmost_point, coordinates_of_westernmost_point, office_held_by_head_of_government, yso_id, getty_thesaurus_of_geographic_names_id, stw_thesaurus_for_economics_id, openstreetmap_relation_id, licence_plate_code, us_national_archives_identifier, subreddit, gacs_id, encyclop\u00e6dia_universalis_id, mesh_descriptor_id, gran_enciclop\u00e8dia_catalana_id, office_held_by_head_of_state, has_quality, total_fertility_rate, motto_text, maritime_identification_digits, great_russian_encyclopedia_online_id, wikimedia_outline, civicus_monitor_country_entry, geoshape, brockhaus_enzyklop\u00e4die_online_id, isni, ituisoiec_object_identifier, archinform_location_id, national_library_of_israel_id_old, idref_id, biblioth\u00e8que_nationale_de_france_id, viaf_id, life_expectancy, nkcr_aut_id, statoids_id, itu_letter_code, wipo_st3, inception, asc_leiden_thesaurus_id, emergency_phone_number, unicode_character, iab_code, klexikon_article_id, library_of_congress_authority_id, loc_and_marc_vocabularies_id, part_of, official_name, language_used, comic_vine_id, whos_on_first_id, treccanis_dizionario_di_storia_id, omegawiki_defined_meaning, hds_id, pronunciation_audio, culture, geonlp_id, category_for_maps, french_vikidia_id, spanish_vikidia_id, eurovoc_id, worldcat_identities_id, kbpedia_id, bti_status_index, bti_governance_index, rkd_thesaurus_id, interlingual_index_id, tasteatlas_id, economy_of_topic, uk_parliament_thesaurus_id, wordnet_31_synset_id, demographics_of_topic, inaturalist_place_id, krugosvet_article, idaigazetteer_id, the_world_factbook_country_id, national_library_of_israel_j9u_id, store_norske_leksikon_id, democracy_index, catalan_vikidia_id, museum_digital_place_id, ysa_id, yle_topic_id, postimees_topic_id, den_store_danske_id, bbc_news_topic_id, m49_code, online_pwn_encyclopedia_id, national_historical_museums_of_sweden_id, eu_knowledge_graph_item_id, central_bank, hashtag, on_focus_list_of_wikimedia_project, gini_coefficient, obo_gazetteer_id, openstreetmap_element, namuwiki_id, official_website, bbc_things_id, fast_id, dr_topic_id, native_label) VALUES ('Mauritania', 'sovereign state in West Africa and North Africa', '2--661', 'Africa', 'Nouakchott', 'Islamic Republic', 'Senegal', 'Mohamed Ould Ghazouani', 'Arabic', 'Mauritanian ouguiya', '.mr', 'Flag of Mauritania.svg', 'National anthem of Mauritania', 'flag of Mauritania', 'MR', 'MRT', '478.0', 'Mauritania', 'Seal of Mauritania (2018).svg', 'Mohamed Ould Bilal', '21.0', 'Adrar Region', 'United Nations', 'Category:Mauritania', 'Mauritania (orthographic projection).svg', 'Nouakchott (Mauritania) banner Minaret.jpg', 'Seal of Mauritania', '222.0', '567850.0', 'Regional/Africa/Mauritania/', 'MTN', '657e69c5-cda0-3592-9d39-85b55610bc40', 'Mauritania', '/m/04vjh', 'MR', 'Kediet ej Jill', '2378080.0', '4038051-8', 'Category:Death in Mauritania', 'UTC\u00b100:00', 'Category:Films shot in Mauritania', 'Category:Mauritanian people', 4614974.0, 'United States of America', 'Portal:Mauritania', '\u0645\u0648\u0631\u064a\u062a\u0627\u0646\u064a\u0627 / Mauritanie', 'Sebkha de Ndrhamcha', '609.0', 'Mauritanian', 'right', 'geography of Mauritania', 220.0, 'Europlug', 'Mauritanian Parliament', 'history of Mauritania', 'place/mauritania', '27.3', 'destination/mauritania', 1030700.0, 0.5560000000000000497, 'Mauritania', '99336.0', '\ud83c\uddf2\ud83c\uddf7', 'pays/mauritanie', 'concept721', '14.721', '25.0', '20.771388888889', 'Prime Minister of Mauritania', '109169.0', '1000176.0', '17713-6', '192763.0', 'RIM', '10035751.0', 'Mauritania', '82.0', 'mauritanie', 'D008435', '41494.0', 'President of Mauritania', 'not-free country', 4.602999999999999759, '\u0634\u0631\u0641 \u0625\u062e\u0627\u0621 \u0639\u062f\u0644', '654.0', '2151265.0', 'outline of Mauritania', 'mauritania', 'Data:Mauritania.map', 'mauretanien', '0000 0001 2260 0320', '2.16.478', '6042.0', 'nan', '028045939', '119960187', '143005264.0', 63.23799999999999955, 'ge129980', 'umr', 'MTN', 'MR', '+1960-11-28T00:00:00Z', '294924582', '101.0', '\ud83c\uddf2\ud83c\uddf7', '1352.0', 'Mauretanien', 'n79061287', 'countries/mu', 'West Africa', 'Islamic Republic of Mauritania', 'Modern Standard Arabic', '4020-61179', '85632679.0', 'mauritania', '8072.0', '3457.0', 'Lb-Mauretanien.ogg', 'culture of Mauritania', '774QOA', 'Category:Maps of Mauritania', 'Mauritanie', 'Mauritania', '1842.0', 'lccn-n79061287', 'Mauritania', 4.410000000000000142, 5.389999999999999681, '24695.0', 'i83819', 'mauritania', 'economy of Mauritania', '11572.0', '08989171-n', 'demographics of Mauritania', '7133.0', 'strany_mira/MAVRITANIYA.html', '2353207.0', 'mauritania', '9.870075620862052e+17', 'Mauritania', 3.919999999999999929, 'nan', 'nan', 'Y109169', '18-82999', '41052.0', 'Mauretanien', 'cnx753jejv7t', '478.0', '4169099.0', 'geo/270F843F-1E7F-4E8E-93DA-31430AB69A65', 'Q1031', 'Central Bank of Mauritania', 'Mauritania', 'Wikipedia:Vital articles/Level/4', 32.60000000000000142, '583.0', 'node/424316493', '\ubaa8\ub9ac\ud0c0\ub2c8', 'nan', '9058b9bd-194a-4343-b8dd-15214d886b97', '1205364.0', 'mauretanien', '\u0627\u0644\u062c\u0645\u0647\u0648\u0631\u064a\u0629 \u0627\u0644\u0625\u0633\u0644\u0627\u0645\u064a\u0629 \u0627\u0644\u0645\u0648\u0631\u064a\u062a\u0627\u0646\u064a\u0629');\nDatabase State:\n- Table: head_of_state, Columns: [label, description, instance_of, sex_or_gender, date_of_birth, place_of_birth, name_in_native_language, commons_category, image, member_of_political_party, occupation, position_held, country_of_citizenship, educated_at, viaf_id]\n- Table: economy_of_africa, Columns: [label, description, topics_main_category, instance_of, commons_category, quora_topic_id, location, country, subclass_of, inflation_rate, nominal_gdp, nominal_gdp_per_capita, ppp_gdp_per_capita, gdp_ppp, real_gdp_growth_rate, store_norske_leksikon_id]",
        "Response": "Table: physical_location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, country, located_in_the_administrative_territorial_entity, coordinate_location, instance_of, commons_category, located_inon_physical_feature) VALUES ('Sint Pieter', 'former municipality in Limburg and neighbourhood in Maastricht, Netherlands', 'Netherlands', 'Maastricht', '50.8258', 'neighborhood', 'Sint Pieter, Maastricht', 'Mount Saint Peter');\nDatabase State:\n- Table: maastricht_formation, Columns: [label, description, named_after, part_of, instance_of]",
        "Response": "Table: eponym"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, country, coat_of_arms_image, located_in_the_administrative_territorial_entity, coordinate_location, commons_category, instance_of, image, area, geonames_id, ine_id_portugal, openstreetmap_relation_id, population, factgrid_item_id, flag_image, freebase_id, official_website, topics_main_category, postal_code, located_in_time_zone, contains_the_administrative_territorial_entity, shares_border_with, inaturalist_place_id) VALUES ('Barroca', 'civil parish in Fund\u00e3o', 'Portugal', 'FND-barroca.png', 'Fund\u00e3o', '40.1075', 'Barroca (Fund\u00e3o)', 'freguesia of Portugal', 'nan', 23.10000000000000142, '8011687.0', '50408', '5385270', NULL, 'Q357988', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan', 'nan');\nDatabase State:\n- Table: linha_da_beira_baixa, Columns: [label, description, instance_of, country, part_of, coordinate_location, located_in_the_administrative_territorial_entity, located_in_time_zone, connecting_line, google_knowledge_graph_id, commons_category, image]\n- Table: political_border, Columns: [label, description, flag_image, coat_of_arms_image, commons_category, located_in_the_administrative_territorial_entity, country, coordinate_location, instance_of, freebase_id, topics_main_category, geonames_id, shares_border_with, official_website, postal_code, contains_the_administrative_territorial_entity, population, area, ine_id_portugal, openstreetmap_relation_id, whos_on_first_id, image, pronunciation_audio, inaturalist_place_id, factgrid_item_id, eu_knowledge_graph_item_id, viaf_id, located_in_time_zone, gnd_id]\n- Table: PortugueseMunicipalities, Columns: [label, description, country, coat_of_arms_image, located_in_the_administrative_territorial_entity, coordinate_location, commons_category, instance_of, image, area, geonames_id, ine_id_portugal, openstreetmap_relation_id, population, factgrid_item_id, flag_image, freebase_id, official_website, topics_main_category, postal_code, located_in_time_zone, contains_the_administrative_territorial_entity, shares_border_with, inaturalist_place_id]",
        "Response": "Table: PortugueseMunicipalities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Product_Categories (production_type_code, product_type_description, vat_rating) VALUES ('DVDs', 'Dvd products', 11.40000000000000035);\nDatabase State:\n- Table: Accounts, Columns: [account_id, customer_id, date_account_opened, account_name, other_account_details]\n- Table: Invoice_Line_Items, Columns: [order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost]\n- Table: Financial_Transactions, Columns: [transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details]\n- Table: Orders, Columns: [order_id, customer_id, date_order_placed, order_details]\n- Table: Products, Columns: [product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size]",
        "Response": "Table: Product_Categories"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO u2base (userid, movieid, rating) VALUES (802, 2312852, '4');\nDatabase State:\n- Table: user_ratings, Columns: [userid, movieid, rating]\n- Table: movies, Columns: [movieid, year, isEnglish, country, runningtime]\n- Table: directors, Columns: [directorid, d_quality, avg_revenue]",
        "Response": "Table: user_ratings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length) VALUES (4747, 42448, 1, 'None', 'Low', 'Low', 'Medium');\nDatabase State:\n- Table: Users_Compliments, Columns: [compliment_id, user_id, number_of_compliments]\n- Table: Checkins, Columns: [business_id, day_id, label_time_0, label_time_1, label_time_2, label_time_3, label_time_4, label_time_5, label_time_6, label_time_7, label_time_8, label_time_9, label_time_10, label_time_11, label_time_12, label_time_13, label_time_14, label_time_15, label_time_16, label_time_17, label_time_18, label_time_19, label_time_20, label_time_21, label_time_22, label_time_23]\n- Table: Business_Hours, Columns: [business_id, day_id, opening_time, closing_time]\n- Table: Business_Categories, Columns: [business_id, category_id]\n- Table: Days, Columns: [day_id, day_of_week]\n- Table: Categories, Columns: [category_id, category_name]\n- Table: Business, Columns: [business_id, active, city, state, stars, review_count]\n- Table: Elite, Columns: [user_id, year_id]",
        "Response": "Table: Reviews"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Payments (Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment) VALUES (774, 527, 'MasterCard', '2018-01-28', 319142);\nDatabase State:\n- Table: Settlements, Columns: [Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID]\n- Table: Claims, Columns: [Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]",
        "Response": "Table: Payments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO City (ID, Name, CountryCode, District, Population) VALUES (1127, 'Nizamabad', 'IND', 'Andhra Pradesh', 241034);\nDatabase State:\n- Table: Cities, Columns: [ID, Name, CountryCode, District, Population]\n- Table: CountryLanguage, Columns: [CountryCode, Language, IsOfficial, Percentage]\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]",
        "Response": "Table: Cities"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate) VALUES (2, 2, 'VMV-2', 1930, 'Germany', 25, 'Decommissioned 1950');\nDatabase State:\n- Table: mission, Columns: [Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate]\n- Table: ship, Columns: [Ship_ID, Name, Type, Nationality, Tonnage]",
        "Response": "Table: mission"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Claims (Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled) VALUES (423, 552, '2016-08-12', '2018-01-27', 79134, 1724);\nDatabase State:\n- Table: Claims, Columns: [Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]",
        "Response": "Table: Claims"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO area_code (zip_code, area_code) VALUES (20773, 301);\nDatabase State:\n- Table: CBSA, Columns: [CBSA, CBSA_name, CBSA_type]\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]\n- Table: state, Columns: [abbreviation, name]\n- Table: zip_congress, Columns: [zip_code, district]\n- Table: avoid, Columns: [zip_code, bad_alias]\n- Table: alias, Columns: [zip_code, alias]\n- Table: country, Columns: [zip_code, county, state]\n- Table: zip_data, Columns: [zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, 1st_quarter_payroll, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA]",
        "Response": "Table: area_code"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, located_in_the_administrative_territorial_entity, country, coordinate_location, instance_of, freebase_id, geonames_id, openstreetmap_relation_id, image, whos_on_first_id) VALUES ('Anglesey', 'island in north-west Wales, UK', 'Anglesey', 'Isle of Anglesey', 'United Kingdom', '53.293975', 'island', '/m/0_6c', '2657310.0', '6045326.0', 'View from the Anglesey Coastal Path (geograph 6222502).jpg', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Timed_Status_of_Things (thing_id, Date_and_Date, Status_of_Thing_Code) VALUES (92, '2017-09-27 01:35:51', 'Close');\nDatabase State:\n- Table: Timed_Status_of_Things, Columns: [thing_id, Date_and_Date, Status_of_Thing_Code]",
        "Response": "Table: Timed_Status_of_Things"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (case_number, race, gender, last_name, first_name, full_name) VALUES ('117903Y', 'B', 'M', 'Spicer', 'Oscar', 'Spicer, Oscar');\nDatabase State:\n- Table: officers, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: incidents, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]\n- Table: Suspects, Columns: [case_number, race, gender, last_name, first_name, full_name]",
        "Response": "Table: Suspects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO course (course_id, courseLevel) VALUES (51, 'Level_400');\nDatabase State:\n- Table: taughtBy, Columns: [course_id, p_id]",
        "Response": "Table: course"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional) VALUES (731, 299, 738, 1.0, 1.0, 'teaspoon(s)', NULL, 'FALSE');\nDatabase State:\n- Table: Nutrition, Columns: [recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories]",
        "Response": "Table: Quantity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violations (business_id, date, violation_type_id, risk_category, description) VALUES (87149, '2016-04-05', '103149', 'Low Risk', 'Wiping cloths not clean or properly stored or inadequate sanitizer');\nDatabase State:\n- Table: BusinessViolations, Columns: [business_id, date, violation_type_id, risk_category, description]",
        "Response": "Table: BusinessViolations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO competitor_event (event_id, competitor_id, medal_id) VALUES (274, 142978, 3);\nDatabase State:\n- Table: Competitor_Medals, Columns: [event_id, competitor_id, medal_id]\n- Table: games_city, Columns: [games_id, city_id]\n- Table: person, Columns: [id, full_name, gender, height, weight]\n- Table: noc_region, Columns: [id, noc, region_name]\n- Table: games_competitor, Columns: [id, games_id, person_id, age]\n- Table: city, Columns: [id, city_name]\n- Table: games, Columns: [id, games_year, games_name, season]\n- Table: event, Columns: [id, sport_id, event_name]\n- Table: sport, Columns: [id, sport_name]",
        "Response": "Table: Competitor_Medals"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, person_id, category, role, credited) VALUES ('tt0629248', 'nm0658861', 'Cast', 'EMS Technician', 'true');\nDatabase State:\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Episode, Columns: [episode_id, series, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, series, episode_id, person_id, role, result]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Person, Columns: [person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber) VALUES (10262, 'S700_2047', 44, 83.28000000000000113, 13);\nDatabase State:\n- Table: orders, Columns: [orderNumber, orderDate, requiredDate, shippedDate, status, comments, customerNumber]\n- Table: customers, Columns: [customerNumber, customerName, contactLastName, contactFirstName, phone, addressLine1, addressLine2, city, state, postalCode, country, salesRepEmployeeNumber, creditLimit]\n- Table: offices, Columns: [officeCode, city, phone, addressLine1, addressLine2, state, country, postalCode, territory]\n- Table: Order_Products, Columns: [orderNumber, productCode, quantityOrdered, priceEach, orderLineNumber]\n- Table: payments, Columns: [customerNumber, checkNumber, paymentDate, amount]",
        "Response": "Table: Order_Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO people (People_ID, Name, Height, Weight, Birth_Date, Birth_Place) VALUES (3, 'Al Montoya', 195.0, 100.0, 'February 13, 1985', 'Glenview, Illinois');\nDatabase State:\n- Table: body_builder, Columns: [Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total]\n- Table: Athletes, Columns: [People_ID, Name, Height, Weight, Birth_Date, Birth_Place]",
        "Response": "Table: Athletes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Furniture_ID, Name, Num_of_Component, Market_Rate) VALUES (7, 'Dining set', 12, 0.5);\nDatabase State:\n- Table: furniture, Columns: [Furniture_ID, Name, Num_of_Component, Market_Rate]\n- Table: furniture_manufacte, Columns: [Manufacturer_ID, Furniture_ID, Price_in_Dollar]",
        "Response": "Table: furniture"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO paragraphs (id, ParagraphNum, PlainText, character_id, chapter_id) VALUES (656448, 2105, 'I beseech your honour, one piece for me.', 190, 19300);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: paragraphs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO basketball_match (Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home, All_Road, All_Neutral) VALUES (2, 2, 'Duke', '13\u20133', '.813', '7\u20131', '6\u20132', '28\u20136', 0.8239999999999999548, '15\u20131', '8\u20132', '5\u20133');\nDatabase State:\n- Table: university, Columns: [School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference]",
        "Response": "Table: basketball_match"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, located_in_the_administrative_territorial_entity, coordinate_location, significant_event, described_by_source, canmore_id, historic_county) VALUES ('Victory - Canmore 321929', 'Shipwreck off the Scottish Coast, imported from Canmore Nov 2020', 'drifter', 'United Kingdom', 'Aberdeenshire', '57.61364413211759', 'shipwrecking', 'Canmore', '321929.0', 'Aberdeenshire');\nDatabase State:\n- Table: historic_county, Columns: [label, description, coordinate_location, country, freebase_id, located_in_the_administrative_territorial_entity, locator_map_image, instance_of, commons_category, catalog_code, shares_border_with, gazetteer_for_scotland_place_id, described_by_source, genuki_id, population, factgrid_item_id]\n- Table: capital_city, Columns: [label, description, commons_category, country, coordinate_location, instance_of, located_in_the_administrative_territorial_entity, topics_main_category, curlie_id, page_banner, musicbrainz_area_id, freebase_id, image, geonames_id, gnd_id, woeid, local_dialing_code, located_in_time_zone, vision_of_britain_place_id, toid, encyclop\u00e6dia_britannica_online_id, capital_of, population, postal_code, library_of_congress_authority_id, viaf_id, whos_on_first_id, vision_of_britain_unit_id, gazetteer_for_scotland_place_id, gss_code_2011, historic_county, worldcat_identities_id, described_by_source, factgrid_item_id, national_library_of_israel_j9u_id, store_norske_leksikon_id, os_grid_reference]\n- Table: Shipwrecks, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, coordinate_location, significant_event, described_by_source, canmore_id, historic_county]\n- Table: political_border, Columns: [label, description, commons_category, coordinate_location, country, freebase_id, located_in_the_administrative_territorial_entity, instance_of, population, shares_border_with, vision_of_britain_place_id, locator_map_image, described_by_source, catalog_code, factgrid_item_id]\n- Table: governing_body, Columns: [label, description, instance_of, country, bbc_things_id, uk_parliament_thesaurus_id, whatdotheyknow_organisation_id, inception, official_website, gss_code_2011, twitter_username, viaf_id, social_media_followers]",
        "Response": "Table: Shipwrecks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO course (course_id, name, credit, diff) VALUES (5, 'Intro to BlockChain', 3, 5);\nDatabase State:\n- Table: course, Columns: [course_id, name, credit, diff]\n- Table: RA, Columns: [student_id, capability, prof_id, salary]",
        "Response": "Table: course"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (CountryCode) VALUES ('LTU', 'Polish', 'F', 7.0);\nDatabase State:\n- Table: city, Columns: [ID]",
        "Response": "Table: countrylanguage"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (address_id, address_details) VALUES (7, replace('69482 Renner Ville Suite 653\\nLangworthborough, OH 95195','\\n',char(10)));\nDatabase State:\n- Table: Customer_Addresses, Columns: [customer_id, address_id, date_from, date_to]\n- Table: Customer_Orders, Columns: [order_id, customer_id, order_status_code, order_date]\n- Table: Departments, Columns: [department_id, dept_store_id, department_name]\n- Table: Department_Stores, Columns: [dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email]\n- Table: Products, Columns: [product_id, product_type_code, product_name, product_price]\n- Table: Department_Store_Chain, Columns: [dept_store_chain_id, dept_store_chain_name]\n- Table: Order_Items, Columns: [order_item_id, order_id, product_id]\n- Table: Staff_Department_Assignments, Columns: [staff_id, department_id, date_assigned_from, job_title_code, date_assigned_to]\n- Table: Suppliers, Columns: [supplier_id, supplier_name, supplier_phone]\n- Table: Supplier_Addresses, Columns: [supplier_id, address_id, date_from, date_to]\n- Table: Product_Suppliers, Columns: [product_id, supplier_id, date_supplied_from, date_supplied_to, total_amount_purchased, total_value_purchased]\n- Table: Customers, Columns: [customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email]\n- Table: Addresses, Columns: [address_id, address_details]\n- Table: Staff, Columns: [staff_id, staff_gender, staff_name]",
        "Response": "Table: Addresses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customer_Master_Index (master_customer_id, cmi_details) VALUES (4, 'Schmidt, Kertzmann and Lubowitz');\nDatabase State:\n- Table: Benefits_Overpayments, Columns: [council_tax_id, cmi_cross_ref_id]\n- Table: CMI_Cross_References, Columns: [cmi_cross_ref_id, master_customer_id, source_system_code]\n- Table: Parking_Fines, Columns: [council_tax_id, cmi_cross_ref_id]\n- Table: Rent_Arrears, Columns: [council_tax_id, cmi_cross_ref_id]",
        "Response": "Table: Customer_Master_Index"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO production (ID, model_year, country) VALUES (286, 1977, 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: production"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (GeneID, Essential, Class, Complex, Phenotype, Motif, Chromosome, Function, Localization) VALUES ('G235426', 'Essential', '?', 'Ribonucleoside-diphosphate reductase', 'Conditional phenotypes', 'PS00368', 7, 'CELL RESCUE, DEFENSE, CELL DEATH AND AGEING', 'nucleus');\nDatabase State:\n- Table: GenomicData, Columns: [GeneID, Essential, Class, Complex, Phenotype, Motif, Chromosome, Function, Localization]",
        "Response": "Table: GenomicData"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (CountryCode, Language, IsOfficial, Percentage) VALUES ('LBR', 'Grebo', 'F', 8.900000000000000355);\nDatabase State:\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]\n- Table: City, Columns: [ID, Name, CountryCode, District, Population]\n- Table: CountryLanguage, Columns: [CountryCode, Language, IsOfficial, Percentage]",
        "Response": "Table: CountryLanguage"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Party_ID, Event_ID, Role_Code) VALUES (4, 1, 'Organizer');\nDatabase State:\n- Table: Event_Participants, Columns: [Party_ID, Event_ID, Role_Code]",
        "Response": "Table: Event_Participants"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Country, Name, Percentage) VALUES ('SLO', 'Muslim', 1.0);\nDatabase State:\n- Table: geo_river, Columns: [River, Country, Province]\n- Table: lake, Columns: [Name, Area, Depth, Altitude, Type, River, Longitude, Latitude]\n- Table: desert, Columns: [Name, Area, Longitude, Latitude]\n- Table: ethnicGroup, Columns: [Country, Name, Percentage]\n- Table: sea, Columns: [Name, Depth]\n- Table: population, Columns: [Country, Population_Growth, Infant_Mortality]\n- Table: economy, Columns: [Country, GDP, Agriculture, Service, Industry, Inflation]\n- Table: river, Columns: [Name, River, Lake, Sea, Length, SourceLongitude, SourceLatitude, Mountains, SourceAltitude, EstuaryLongitude, EstuaryLatitude]\n- Table: encompasses, Columns: [Country, Continent, Percentage]\n- Table: religion, Columns: [Country, Name, Percentage]\n- Table: geo_island, Columns: [Island, Country, Province]\n- Table: located, Columns: [City, Province, Country, River, Lake, Sea]\n- Table: target, Columns: [Country, Target]\n- Table: island, Columns: [Name, Islands, Area, Height, Type, Longitude, Latitude]\n- Table: geo_mountain, Columns: [Mountain, Country, Province]\n- Table: borders, Columns: [Country1, Country2, Length]\n- Table: mountainOnIsland, Columns: [Mountain, Island]\n- Table: islandIn, Columns: [Island, Sea, Lake, River]\n- Table: organization, Columns: [Abbreviation, Name, City, Country, Province, Established]\n- Table: mountain, Columns: [Name, Mountains, Height, Type, Longitude, Latitude]\n- Table: geo_estuary, Columns: [River, Country, Province]\n- Table: province, Columns: [Name, Country, Population, Area, Capital, CapProv]\n- Table: city, Columns: [Name, Country, Province, Population, Longitude, Latitude]\n- Table: mergesWith, Columns: [Sea1, Sea2]\n- Table: continent, Columns: [Name, Area]\n- Table: politics, Columns: [Country, Independence, Dependent, Government]\n- Table: geo_source, Columns: [River, Country, Province]\n- Table: language, Columns: [Country, Name, Percentage]",
        "Response": "Table: ethnicGroup"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (address, bioguide, chamber, class, contact_form, district, end, fax, last, middle, name, office, party, party_affiliations, phone, relation, rss_url, start, state, state_rank, title, type, url) VALUES (NULL, 'A000099', NULL, NULL, NULL, 18.0, '1821-03-03', NULL, NULL, NULL, NULL, NULL, 'Republican', NULL, NULL, NULL, NULL, '1819-12-06', 'VA', NULL, NULL, 'rep', NULL);\nDatabase State:\n- Table: CongressMembers, Columns: [address, bioguide, chamber, class, contact_form, district, end, fax, last, middle, name, office, party, party_affiliations, phone, relation, rss_url, start, state, state_rank, title, type, url]",
        "Response": "Table: CongressMembers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Lessons (lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price) VALUES (1, 6, 'Cancelled', 8, 3, '2018-02-28 10:55:36', '5', 199.0);\nDatabase State:\n- Table: Vehicles, Columns: [vehicle_id, vehicle_details]\n- Table: Staff, Columns: [staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff]\n- Table: LessonsHistory, Columns: [lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price]\n- Table: Customer_Payments, Columns: [customer_id, datetime_payment, payment_method_code, amount_payment]",
        "Response": "Table: LessonsHistory"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (No) VALUES (335, 'Chardonnay', 'Acacia', 'Carneros', 'California', 'Chardonnay', 2007, 22, 87, 70200, 'now');\nDatabase State:\n- Table: wine, Columns: [No]",
        "Response": "Table: wine"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO administrative_territorial_entity (label, description, instance_of, population, country, capital, located_in_the_administrative_territorial_entity, coordinate_location, area, contains_the_administrative_territorial_entity, locator_map_image, number_of_houses, mean_age, mapycz_id, commons_category, iso_3166_2_code, openstreetmap_relation_id, lau, topics_main_category, freebase_id, geonames_id, musicbrainz_area_id, image, geoshape, nkcr_aut_id, licence_plate_code, shares_border_with, viaf_id, czech_district_id, category_for_maps, hasc, inaturalist_place_id, topics_main_template, library_of_congress_authority_id) VALUES ('Beroun District', 'District in the Central Bohemian Region of the Czech Republic', 'districts of the Czech Republic', 96624.0, 'Czech Republic', 'Beroun', 'Central Bohemian Region', '49.963333333333', 703.7100000000000363, 'Zdice', 'Okres beroun.png', 28107.0, 41.10000000000000142, 'dist&id=49', 'Beroun District', 'CZ-202', '442335.0', 'CZ0202', 'Category:Beroun District', '/m/02wxqmf', '3079466.0', '2b5060f2-e317-4f6a-8de5-8aa9e479d8d2', 'Beroun CZ main square 01.JPG', 'Data:Czech Republic/Beroun.map', 'ge134061', 'BE', 'Rakovn\u00edk District', '144238209', '3202.0', 'Category:Maps of Beroun District', 'CZ.SK.BE', '98309.0', 'Template:Beroun District', 'n79131669');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: administrative_territorial_entity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encodes (label, description, ensembl_protein_id, found_in_taxon, uniprot_protein_id, encoded_by, refseq_protein_id, biological_process, cell_component, molecular_function, instance_of, part_of) VALUES ('UDP-galactose transporter, putative', 'nan', 'nan', 'Plasmodium gallinaceum', 'nan', 'UGT', 'nan', 'transmembrane transport', 'nan', 'nan', 'protein', 'nan');\nDatabase State:\n- Table: Protein_Information, Columns: [label, description, ensembl_protein_id, found_in_taxon, uniprot_protein_id, encoded_by, refseq_protein_id, biological_process, cell_component, molecular_function, instance_of, part_of]\n- Table: biological_process, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]",
        "Response": "Table: Protein_Information"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Debate_ID, Date, Venue, Num_of_Audience) VALUES (5, 'January 12, 2017', 'Dubai , UAE', 313);\nDatabase State:\n- Table: debate, Columns: [Debate_ID, Date, Venue, Num_of_Audience]",
        "Response": "Table: debate"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, genomic_end, strand_orientation, instance_of, genomic_start) VALUES ('dolichyl-phosphate-mannose-protein mannosyltransferase family protein PSPTO_5588', 'microbial gene found in Pseudomonas syringae pv. tomato str. DC3000', 'Pseudomonas syringae pv. tomato str. DC3000', '1187280', 'gene', 'Dolichyl-phosphate-mannose-protein mannosyltransferase family protein PSPTO_5588', 'PSPTO_5588', '6369062', 'forward strand', 'gene', '6367332');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, genomic_end, strand_orientation, instance_of, genomic_start]\n- Table: encodes, Columns: [label, description, uniprot_protein_id, refseq_protein_id, found_in_taxon, encoded_by, cell_component, has_parts, instance_of, part_of]\n- Table: taxon, Columns: [label, description, taxon_name, taxon_rank, freebase_id, ncbi_taxonomy_id, parent_taxon, instance_of, gbif_taxon_id, itis_tsn, gram_staining, irmng_id, lpsn_url, microsoft_academic_id]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO follows (label, description, freebase_id, instance_of, follows, followed_by, country, sport, organizer, point_in_time, edition_number, start_time, end_time) VALUES ('1999 Belgian Open', 'tennis tournament edition', '/m/0hqzxgr', 'Diamond Games', '1993 Belgian Ladies Open', '2000 Mexx Sport Benelux Open', 'Belgium', 'tennis', 'Women''s Tennis Association', '+1999-00-00T00:00:00Z', '6', '+1999-05-08T00:00:00Z', '+1999-05-16T00:00:00Z');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: follows"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO railway_coach (label, description, subclass_of, commons_category, operator, instance_of) VALUES ('RENFE Class Costa', 'nan', 'railway coach', 'nan', 'Red Nacional de los Ferrocarriles Espa\u00f1oles', 'rolling stock class');\nDatabase State:\n- Table: country, Columns: [label, description, topics_main_wikimedia_portal, continent, instance_of, commons_category, library_of_congress_authority_id, idref_id, biblioth\u00e8que_nationale_de_france_id, gnd_id, coordinate_location, topics_main_category, freebase_id, inception, locator_map_image, flag_image, anthem, basic_form_of_government, legislative_body, currency, capital, category_of_associated_people, described_by_source, page_banner, commons_gallery, demonym, shares_border_with, encyclop\u00e6dia_britannica_online_id, population, quora_topic_id, yso_id, getty_thesaurus_of_geographic_names_id, stw_thesaurus_for_economics_id, us_national_archives_identifier, coat_of_arms, official_language, area, mesh_descriptor_id, great_russian_encyclopedia_online_id, native_label, part_of, viaf_id, klexikon_article_id, isni, gran_enciclop\u00e8dia_catalana_id, omegawiki_defined_meaning, category_for_maps, office_held_by_head_of_state, french_vikidia_id, language_used, member_of, nkcr_aut_id, worldcat_identities_id, coat_of_arms_image, replaces, diplomatic_relation, pm20_geo_code, interlingual_index_id, economy_of_topic, libris_uri, bhcl_uuid, wordnet_31_synset_id, idaigazetteer_id, store_norske_leksikon_id, den_store_danske_id, national_library_of_israel_j9u_id, demographics_of_topic, museum_digital_place_id, nese_id, brockhaus_enzyklop\u00e4die_online_id, on_focus_list_of_wikimedia_project, babelnet_id, country, short_name, head_of_state, motto_text, le_monde_diplomatique_subject_id, country_calling_code, flag, ndl_authority_id, geonames_id, unesco_thesaurus_id, ioc_country_code, gacs_id, contains_the_administrative_territorial_entity, kbpedia_id, uk_parliament_thesaurus_id, yle_topic_id, ysa_id, eu_knowledge_graph_item_id]",
        "Response": "Table: railway_coach"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, instance_of, country, located_in_the_administrative_territorial_entity, official_website, diocese) VALUES ('Kuopio Parish Union', 'Lutheran parish union in Northern Savonia, Finland', 'parish union', 'Finland', 'Northern Savonia', 'https://www.kuopionseurakunnat.fi/', 'Diocese of Kuopio');\nDatabase State:\n- Table: political_border, Columns: [label, description, located_in_the_administrative_territorial_entity, instance_of, commons_category, coordinate_location, country, shares_border_with, topics_main_category, population, geonames_id, category_of_associated_people, viaf_id, official_website, musicbrainz_area_id, located_in_time_zone, part_of, official_language, yso_id, image, whos_on_first_id, freebase_id, coat_of_arms_image, store_norske_leksikon_id, page_banner]\n- Table: twin_town, Columns: [label, description, locator_map_image, instance_of, located_in_the_administrative_territorial_entity, shares_border_with, country, commons_category, coat_of_arms_image, twinned_administrative_body, located_in_time_zone, topics_main_category, page_banner, official_website, musicbrainz_area_id, freebase_id, category_of_associated_people, image, viaf_id, coordinate_location, population, area, quora_topic_id, geonames_id, inaturalist_place_id]\n- Table: head_of_state, Columns: [label, description, freebase_id, religion_or_worldview, native_language, commons_category, member_of_political_party, instance_of, date_of_birth, place_of_birth, country_of_citizenship, occupation, given_name, position_held, languages_spoken_written_or_signed, viaf_id, library_of_congress_authority_id, idref_id, award_received, image, educated_at, family_name, spouse, gnd_id, name_in_native_language, isni, gran_enciclop\u00e8dia_catalana_id, signature, gtaa_id, residence, treccani_id, radio_radicale_person_id, munzinger_person_id, worldcat_identities_id, fast_id, sex_or_gender, candidacy_in_election, plwabn_id, store_norske_leksikon_id, nese_id, opensanctions_id, genicom_profile_id, topics_main_category, nkcr_aut_id]\n- Table: parish_union, Columns: [label, description, instance_of, country, located_in_the_administrative_territorial_entity, official_website, diocese]\n- Table: part, Columns: [label, description, quora_topic_id, viaf_id, nkcr_aut_id, topics_main_category, locator_map_image, store_norske_leksikon_id, commons_category, instance_of, has_parts, freebase_id, coordinate_location, worldcat_identities_id]",
        "Response": "Table: parish_union"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO company (Company_ID, Name, Headquarters, Industry, Sales_in_Billion, Profits_in_Billion, Assets_in_Billion, Market_Value_in_Billion) VALUES (3.0, 'General Electric', 'USA', 'Conglomerate', 147.3000000000000113, 14.19999999999999929, 717.2000000000000454, 213.6999999999999887);\nDatabase State:\n- Table: people, Columns: [People_ID, Age, Name, Nationality, Graduation_College]\n- Table: employment, Columns: [Company_ID, People_ID, Year_working]",
        "Response": "Table: company"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code) VALUES (1024, 'Prater', 'Stacy', 18, 'F', 540, 7271, 'BAL');\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Member_of_club, Columns: [StuID, ClubID, Position]\n- Table: Club, Columns: [ClubID, ClubName, ClubDesc, ClubLocation]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag) VALUES ('glutamate:sodium symporter b3653', 'microbial gene found in Escherichia coli str. K-12 substr. MG1655', '948166.0', 'gene', 'Glutamate:sodium symporter b3653', 'Escherichia coli str. K-12 substr. MG1655', 'reverse strand', '3828664', '3827459', 'gene', 'b3653');\nDatabase State:\n- Table: encoded_by, Columns: [label, description, entrez_gene_id, subclass_of, encodes, found_in_taxon, strand_orientation, genomic_end, genomic_start, instance_of, ncbi_locus_tag]\n- Table: cellular_component, Columns: [label, description, gene_ontology_id, subclass_of, exact_match, instance_of]\n- Table: porter, Columns: [label, description, encoded_by, uniprot_protein_id, cell_component, found_in_taxon, refseq_protein_id, instance_of, part_of, transporter_classification_database_id]",
        "Response": "Table: encoded_by"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO encoded_by (label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, genomic_end, strand_orientation, instance_of, genomic_start) VALUES ('site-specific recombinase b2894', 'microbial gene found in Escherichia coli str. K-12 substr. MG1655', 'Escherichia coli str. K-12 substr. MG1655', '947362', 'gene', 'Site-specific recombinase b2894', 'b2894', '3039742', 'reverse strand', 'gene', '3038846');\nDatabase State:\n- Table: Genes, Columns: [label, description, found_in_taxon, entrez_gene_id, subclass_of, encodes, ncbi_locus_tag, genomic_end, strand_orientation, instance_of, genomic_start]",
        "Response": "Table: Genes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (label, description, commons_category, topics_main_category, instance_of, location, country, subclass_of, nominal_gdp) VALUES ('economy of Colorado', 'economy of the state of the United States', 'Economy of Colorado', 'Category:Economy of Colorado', 'economy of region', 'Colorado', 'United States of America', 'economy of the United States', 390098700000.0);\nDatabase State:\n- Table: place_of_birth, Columns: [label, description, instance_of, category_combines_topics, commons_category, category_contains]\n- Table: aspect_of_history, Columns: [label, description, part_of, commons_category, topics_main_category, dewey_decimal_classification, instance_of, facet_of, library_of_congress_authority_id, national_library_of_israel_j9u_id]\n- Table: administrative_territorial_entity, Columns: [label, description, seal_image, dewey_decimal_classification, topics_main_wikimedia_portal, country, capital, shares_border_with, flag_image, flag, iso_3166_2_code, commons_category, locator_map_image, located_in_time_zone, head_of_government, openstreetmap_relation_id, located_in_the_administrative_territorial_entity, coordinate_location, official_website, topics_main_category, page_banner, curlie_id, musicbrainz_area_id, instance_of, legislative_body, freebase_id, contains_the_administrative_territorial_entity, gnis_id, fips_10_4_countries_and_regions, inception, category_for_people_born_here, category_for_people_who_died_here, geonames_id, gnd_id, category_for_films_shot_at_this_location, category_of_people_buried_here, category_of_associated_people, office_held_by_head_of_government, viaf_id, library_of_congress_authority_id, population, nickname, topics_main_template, ballotpedia_id, described_by_source, geography_of_topic, encyclop\u00e6dia_britannica_online_id, has_seal_badge_or_sigil, pronunciation_audio, gran_enciclop\u00e8dia_catalana_id, area, quora_topic_id, bbc_things_id, yso_id, short_name, demonym, subreddit, motto_text, highest_point, lowest_point, history_of_topic, elevation_above_sea_level, us_national_archives_identifier, gacs_id, mesh_descriptor_id, archives_at, official_symbol, fips_5_2_alpha_code_us_states, fips_5_2_numeric_code_us_states, wikimedia_outline, water_as_percent_of_area, named_after, coordinates_of_geographic_center, executive_body, foundational_text, highest_judicial_authority, getty_thesaurus_of_geographic_names_id, part_of, c_span_organization_id, native_label, idref_id, archinform_location_id, national_library_of_israel_id_old, geoshape, wolfram_language_entity_code, nkcr_aut_id, different_from, comic_vine_id, maximum_temperature_record, loc_and_marc_vocabularies_id, language_used, anthem, whos_on_first_id, store_norske_leksikon_id, located_in_or_next_to_body_of_water, omegawiki_defined_meaning, minimum_temperature_record, category_for_maps, larousse_id, treccanis_dizionario_di_storia_id, french_vikidia_id, english_vikidia_id, italian_vikidia_id, worldcat_identities_id, isni, kbpedia_id, rkd_thesaurus_id, hasc, interlingual_index_id, the_top_tens_id, economy_of_topic, google_maps_customer_id, tripadvisor_id, open_civic_data_division_id, google_news_topics_id, category_for_the_view_of_the_item, github_topic, uk_parliament_thesaurus_id, wordnet_31_synset_id, demographics_of_topic, coordinates_of_northernmost_point, coordinates_of_southernmost_point, inaturalist_place_id, marriageable_age, compulsory_education_maximum_age, twitter_topic_id, openstreetmap_zoom_level, online_pwn_encyclopedia_id, wikisimpsons_id, related_category, den_store_danske_id, per_capita_income, mean_age, number_of_households, hashtag, national_library_of_israel_j9u_id, ringgold_id, catholic_encyclopedia_id]\n- Table: eponym, Columns: [label, description, freebase_id, instance_of]",
        "Response": "Table: economy_of_region"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO election (Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee) VALUES (8, '13', 3, 'Turner, Frank S. Frank S. Turner', 7, 1994.0, 'Ways and Means');\nDatabase State:\n- Table: election, Columns: [Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee]",
        "Response": "Table: election"
    }
]