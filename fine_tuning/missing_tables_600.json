[
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (case_number, race, gender, last_name, first_name, full_name)  VALUES ('223423V', 'L', 'M', 'Gonzalez', 'Margarito', 'Gonzalez, Margarito');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: officers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `budget` (`School_id`, `Year`, `Budgeted`, `total_budget_percent_budgeted`, `Invested`, `total_budget_percent_invested`, `Budget_invested_percent`)  VALUES (2, 2001, 6803, 2.0, 8335, 2.0, '122.5');\nDatabase State:\n- Table: `endowment`, Columns: [`endowment_id`, `School_id`, `donator_name`, `amount`]\n- Table: `School`, Columns: [`School_id`, `School_name`, `Location`, `Mascot`, `Enrollment`, `IHSAA_Class`, `IHSAA_Football_Class`, `County`]\n- Table: `budget`, Columns: [`School_id`, `Year`, `Budgeted`, `total_budget_percent_budgeted`, `Invested`, `total_budget_percent_invested`, `Budget_invested_percent`]",
        "Response": "Table: `budget`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Hypothetical protein BN112_4771', 'microbial protein found in Bordetella bronchiseptica 253', 'protein', 'A0A0C6PEF1', 'Bordetella bronchiseptica 253', 'hypothetical protein BN112_4771', 'protein', 'YP_006970800', 'Periplasmic metal-binding protein Tp34-type');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `instance_of`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `found_in_taxon`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `instance_of`, `parent_taxon`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `encyclopedia_of_life_id`, `itis_tsn`, `bacdive_id`, `gram_staining`, `mesh_descriptor_id`, `lpsn_url`, `microsoft_academic_id`, `freebase_id`, `openalex_id`, `catalogue_of_life_id`, `irmng_id`]\n- Table: `periplasmic_metal_binding_protein_tp34_type_superfamily`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Sales` (EVENTID, REFID, EVENT_DATE, AMOUNT)  VALUES (2685940, 282588, '2007-05-24 12:00:00.0', 14.83900000000000041);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Sales`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Products_Booked (booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount)  VALUES (1, 2, '1', '0', 5, 110.2000000000000028);\nDatabase State:\n- Table: Products_for_Hire, Columns: [product_id, product_type_code, daily_hire_cost, product_name, product_description]\n- Table: Payments, Columns: [payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid]",
        "Response": "Table: Products_Booked"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO customer (cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state)  VALUES ('3', 'Owen', 'saving', 800000, 0, 210, 3, 'New York');\nDatabase State:\n- Table: customer, Columns: [cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state]",
        "Response": "Table: customer"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `uniprot_protein_id`, `refseq_protein_id`, `found_in_taxon`, `encoded_by`, `cell_component`, `has_parts`, `instance_of`, `part_of`)  VALUES ('Dolichyl-phosphate-mannose-protein mannosyltransferase CBO0299', 'microbial protein found in Clostridium botulinum A str. ATCC 3502', 'A5HYJ2', 'YP_001252842', 'Clostridium botulinum A str. ATCC 3502', 'dolichyl-phosphate-mannose-protein mannosyltransferase CBO0299', 'nan', 'Glycosyltransferase RgtA/B/C/D-like', 'protein', 'Glycosyltransferase RgtA/B/C/D-like, protein family');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `freebase_id`, `ncbi_taxonomy_id`, `parent_taxon`, `instance_of`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `part`, Columns: [`label`, `description`, `instance_of`, `interpro_id`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `sport`, `instance_of`, `follows`, `followed_by`, `edition_number`, `start_time`, `end_time`, `winner`, `country`, `subclass_of`)  VALUES ('Baltic Chain Tour 2022', 'nan', 'road bicycle racing', 'Baltic Chain Tour', '2021 Baltic Chain Tour', 'nan', 'nan', '+2022-08-18T00:00:00Z', '+2022-08-21T00:00:00Z', 'Rait \u00c4rm', 'Estonia', '2.2');\nDatabase State:\n- Table: `winner`, Columns: [`label`, `description`, `sex_or_gender`, `commons_category`, `date_of_birth`, `occupation`, `instance_of`, `image`, `country_of_citizenship`, `participant_in`, `given_name`, `sport`, `place_of_birth`, `cq_ranking_male_cyclist_id`, `cycling_archives_cyclist_id`, `procyclingstats_cyclist_id`, `member_of_sports_team`, `family_name`, `firstcycling_rider_id`, `uci_rider_id`]\n- Table: `follows`, Columns: [`label`, `description`, `sport`, `instance_of`, `followed_by`, `edition_number`, `winner`, `country`, `start_time`, `end_time`, `subclass_of`, `follows`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `coat_of_arms_image`, `coordinate_location`, `instance_of`, `topics_main_category`, `freebase_id`, `musicbrainz_area_id`, `geonames_id`, `category_of_associated_people`, `viaf_id`, `image`, `official_website`, `population`, `capital_of`, `area`, `official_name`, `quora_topic_id`, `native_label`, `postal_code`, `located_in_time_zone`, `whos_on_first_id`]\n- Table: `baltic_chain_tour`, Columns: [`label`, `description`, `sport`, `instance_of`, `follows`, `followed_by`, `edition_number`, `start_time`, `end_time`, `winner`, `country`, `subclass_of`]",
        "Response": "Table: `baltic_chain_tour`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `ensembl_transcript_id`, `refseq_rna_id`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `cytogenetic_location`, `expressed_in`)  VALUES ('Npm3', 'protein-coding gene in the species Rattus norvegicus', '502389', 'ENSRNOG00000017622', 'ENSRNOT00000023963', 'XM_577868', 'Nucleophosmin/nucleoplasmin, 3', 'brown rat', 'reverse strand', '244597591', '244595644', 'Rattus norvegicus chromosome 1', 'gene', '1q54', 'ovary');\nDatabase State:\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `ensembl_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `ensembl_transcript_id`, `refseq_rna_id`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `cytogenetic_location`, `expressed_in`]\n- Table: `nucleoplasmin_core_domain_superfamily`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `ensembl_protein_id`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `book_club` (`book_club_id`, `Year`, `Author_or_Editor`, `Book_Title`, `Publisher`, `Category`, `Result`)  VALUES (6, 1989, 'Antoinette Azolakov', 'Skiptrace', 'Banned Books', 'Lesb. M/SF', 'Won');\nDatabase State:\n- Table: `movie`, Columns: [`movie_id`, `Title`, `Year`, `Director`, `Budget_million`, `Gross_worldwide`]\n- Table: `book_club`, Columns: [`book_club_id`, `Year`, `Author_or_Editor`, `Book_Title`, `Publisher`, `Category`, `Result`]\n- Table: `culture_company`, Columns: [`Company_name`, `Type`, `Incorporated_in`, `Group_Equity_Shareholding`, `book_club_id`, `movie_id`]",
        "Response": "Table: `book_club`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `commons_category`, `country`, `coordinate_location`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `located_in_the_administrative_territorial_entity`, `image`, `locator_map_image`, `whos_on_first_id`, `area`, `official_website`, `population`)  VALUES ('Renfrewshire', 'council area in Scotland', 'Renfrewshire', 'United Kingdom', '55.877277', 'Category:Renfrewshire', 'Scottish council area', '/m/0124d8', '2639494.0', 'Scotland', 'Renfrewshire county.jpg', 'RenfrewshireTraditional.png', '85684039.0', 261.487799999999993, 'http://www.renfrewshire.gov.uk/', 179100.0);\nDatabase State:\n- Table: `head_of_state`, Columns: [`label`, `description`, `instance_of`, `sex_or_gender`, `given_name`, `country_of_citizenship`, `occupation`, `date_of_birth`, `place_of_birth`, `position_held`, `image`, `commons_category`, `spouse`, `educated_at`, `opensanctions_id`, `child`, `library_of_congress_authority_id`, `gnd_id`, `award_received`, `viaf_id`, `topics_main_category`, `freebase_id`, `religion_or_worldview`, `munzinger_person_id`, `languages_spoken_written_or_signed`, `fast_id`, `signature`, `encyclop\u00e6dia_britannica_online_id`, `worldcat_identities_id`, `isni`, `den_store_danske_id`, `store_norske_leksikon_id`, `name_in_native_language`]\n- Table: `box_girder_bridge`, Columns: [`label`, `description`, `country`, `coordinate_location`, `instance_of`, `located_in_the_administrative_territorial_entity`, `length`, `carries`]\n- Table: `cargo`, Columns: [`label`, `description`, `country`, `instance_of`, `commons_category`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `coordinate_location`, `instance_of`, `located_in_the_administrative_territorial_entity`, `country`, `commons_category`, `freebase_id`, `image`]\n- Table: `part`, Columns: [`label`, `description`, `topics_main_category`, `commons_category`, `freebase_id`, `geonames_id`, `instance_of`, `quora_topic_id`, `coordinate_location`, `has_parts`, `locator_map_image`, `viaf_id`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `commons_category`, `country`, `coordinate_location`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `located_in_the_administrative_territorial_entity`, `image`, `locator_map_image`, `whos_on_first_id`, `area`, `official_website`, `population`]\n- Table: `country`, Columns: [`label`, `description`, `continent`, `capital`, `official_language`, `flag_image`, `anthem`, `head_of_state`, `instance_of`, `top_level_internet_domain`, `iso_3166_1_alpha_2_code`, `iso_3166_1_alpha_3_code`, `flag`, `commons_category`, `iso_3166_1_numeric_code`, `coordinate_location`, `contains_the_administrative_territorial_entity`, `member_of`, `coat_of_arms_image`, `coat_of_arms`, `currency`, `topics_main_category`, `country_calling_code`, `ndl_authority_id`, `page_banner`, `gnd_id`, `curlie_id`, `ioc_country_code`, `musicbrainz_area_id`, `freebase_id`, `fips_10_4_countries_and_regions`, `highest_point`, `geonames_id`, `located_in_time_zone`, `openstreetmap_relation_id`, `category_for_films_shot_at_this_location`, `category_of_associated_people`, `population`, `topics_main_wikimedia_portal`, `office_held_by_head_of_government`, `diplomatic_relation`, `official_website`, `commons_gallery`, `lowest_point`, `mobile_country_code`, `demonym`, `inception`, `driving_side`, `geography_of_topic`, `described_by_source`, `locator_map_image`, `electrical_plug_type`, `mains_voltage`, `emergency_phone_number`, `encyclop\u00e6dia_britannica_online_id`, `coordinates_of_northernmost_point`, `new_york_times_topic_id`, `area`, `marriageable_age`, `quora_topic_id`, `insee_countries_and_foreign_territories_code`, `short_name`, `unesco_thesaurus_id`, `head_of_government`, `yso_id`, `getty_thesaurus_of_geographic_names_id`, `stw_thesaurus_for_economics_id`, `legislative_body`, `language_used`, `us_national_archives_identifier`, `gacs_id`, `mesh_descriptor_id`, `babelnet_id`, `number_of_out_of_school_children`, `office_held_by_head_of_state`, `has_quality`, `great_russian_encyclopedia_online_id`, `total_fertility_rate`, `maritime_identification_digits`, `history_of_topic`, `category_for_people_who_died_here`, `wikimedia_outline`, `highest_judicial_authority`, `executive_body`, `civicus_monitor_country_entry`, `geoshape`, `brockhaus_enzyklop\u00e4die_online_id`, `shares_border_with`, `fast_id`, `bbc_things_id`, `library_of_congress_authority_id`, `biblioth\u00e8que_nationale_de_france_id`, `ituisoiec_object_identifier`, `archinform_location_id`, `part_of`, `life_expectancy`, `nkcr_aut_id`, `statoids_id`, `wipo_st3`, `viaf_id`, `unicode_character`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `official_name`, `iab_code`, `comic_vine_id`, `coordinates_of_easternmost_point`, `coordinates_of_westernmost_point`, `gran_enciclop\u00e8dia_catalana_id`, `whos_on_first_id`, `the_top_tens_id`, `omegawiki_defined_meaning`, `geonlp_id`, `category_for_maps`, `treccanis_dizionario_di_storia_id`, `french_vikidia_id`, `pronunciation_audio`, `eurovoc_id`, `worldcat_identities_id`, `native_label`, `kbpedia_id`, `grove_art_online_id`, `subreddit`, `interlingual_index_id`, `economy_of_topic`, `tasteatlas_id`, `uk_parliament_thesaurus_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `inaturalist_place_id`, `country`, `located_in_or_next_to_body_of_water`, `topics_main_template`, `the_world_factbook_country_id`, `national_library_of_israel_j9u_id`, `store_norske_leksikon_id`, `ysa_id`, `yle_topic_id`, `postimees_topic_id`, `category_of_people_buried_here`, `coordinates_of_southernmost_point`, `krugosvet_article`, `den_store_danske_id`, `bbc_news_topic_id`, `m49_code`, `online_pwn_encyclopedia_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `hashtag`, `on_focus_list_of_wikimedia_project`, `obo_gazetteer_id`, `openstreetmap_element`, `namuwiki_id`, `licence_plate_code`, `gini_coefficient`, `public_holiday`, `le_monde_diplomatique_subject_id`, `unemployment_rate`, `railway_traffic_side`, `nalt_id`, `dagens_nyheter_topic_id`, `isni`, `nese_id`, `guardian_topic_id`, `basic_form_of_government`, `age_of_majority`, `national_library_of_israel_id_old`, `compulsory_education_minimum_age`, `central_bank`, `category_for_people_born_here`, `idref_id`, `itu_letter_code`, `asc_leiden_thesaurus_id`, `world_encyclopedia_of_puppetry_arts_id`, `dr_topic_id`, `hds_id`, `gs1_country_code`, `culture`, `analysis_policy_observatory_term_id`, `vat_rate`, `english_vikidia_id`, `spanish_vikidia_id`, `open_data_portal`, `rkd_thesaurus_id`, `jewish_encyclopedia_id_russian`, `edition_humboldt_digital_id`, `sapa_id`, `bhcl_uuid`, `github_topic`, `zhihu_topic_id`, `joconde_location_id`, `idaigazetteer_id`, `encyclopedia_of_the_history_of_ukraine_id`, `larousse_id`, `treccani_id`, `schoenberg_database_of_manuscripts_place_id`, `dewey_decimal_classification`, `democracy_index`, `der_spiegel_topic_id`, `wikisimpsons_id`, `urban_electric_transit_country_id`, `pm20_geo_code`, `happy_planet_index_score`, `motto_text`, `gynopedia_id`, `colon_classification`, `museum_digital_place_id`, `alltrails_trail_id`, `armeniapedia_id`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `natural_product` (`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Escherichia coli O157:H7 str. Sakai', 'bacterial strain', 'strain', 'Escherichia coli O157:H7 str. Sakai', 'Escherichia coli', '386585', 'Gram-negative bacteria', 'GCA_000008865.1');\nDatabase State:\n- Table: `ribonucleotide_reductase_small_subunit`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`enzyme_id`, `medicine_id`, `interaction_type`)  VALUES (2, 3, 'inhibitor');\nDatabase State:\n- Table: `medicine_enzyme_interaction`, Columns: [`enzyme_id`, `medicine_id`, `interaction_type`]\n- Table: `medicine`, Columns: [`id`, `name`, `Trade_Name`, `FDA_approved`]",
        "Response": "Table: `medicine_enzyme_interaction`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (customer_id, channel_code, active_from_date, active_to_date, contact_number)  VALUES (13, 'Fax', '2017-10-29 04:16:39', '2018-03-08 17:19:29', '496-074-8589x5477');\nDatabase State:\n- Table: Customer_Addresses, Columns: [customer_id, address_id, date_address_from, address_type, date_address_to]\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, date_became_customer, other_customer_details]\n- Table: Order_Items, Columns: [order_id, product_id, order_quantity]\n- Table: Customer_Contact_Channels, Columns: [customer_id, channel_code, active_from_date, active_to_date, contact_number]",
        "Response": "Table: Customer_Contact_Channels"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Other_Property_Features (property_id, feature_id, property_feature_description)  VALUES (15, 3, 'dolorem');\nDatabase State:\n- Table: Ref_Feature_Types, Columns: [feature_type_code, feature_type_name]",
        "Response": "Table: Other_Property_Features"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional)  VALUES (4574, 1113, 3480, 0.25, 0.25, 'cup(s)', 'finely diced', 'FALSE');\nDatabase State:\n- Table: Ingredient, Columns: [ingredient_id, category, name, plural]\n- Table: Recipe, Columns: [recipe_id, title, subtitle, servings, yield_unit, prep_min, cook_min, stnd_min, source, intro, directions]",
        "Response": "Table: Quantity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customers (customer_id, payment_method, customer_name, date_became_customer, other_customer_details)  VALUES (4, 'Credit Card', 'Prof. Alexzander Hamill', '2018-02-24 00:20:18', 'VIP');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth)  VALUES (1685, 'Tyrese Gibson', '1978-12-30', 'Watts', 'USA', 61, 'Tyrese Darnell Gibson was born December 30, 1978 in Watts, Los Angeles, California, where he was raised. He is an RB singer, songwriter, actor, author, television producer and model. He is well known for his actor role as Roman Pearce in the The Fast and Furious movie franchise. Other popular movies Tyrese has acted in are Death Race, ...', NULL, NULL, '$6,000,000.00');\nDatabase State:\n- Table: movie, Columns: [MovieID, Title, `MPAA Rating`, Budget, Gross, `Release Date`, Genre, Runtime, Rating, `Rating Count`, Summary]\n- Table: actor, Columns: [ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth]",
        "Response": "Table: actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `homologene_id`, `refseq_rna_id`, `entrez_gene_id`, `ortholog`, `encodes`, `instance_of`, `found_in_taxon`, `ensembl_gene_id`, `ensembl_transcript_id`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `expressed_in`)  VALUES ('sec-24.1', 'protein-coding gene in the species Caenorhabditis elegans', '3615.0', 'NM_069777', '178078.0', 'SFB3', 'Yeast SEC homolog CELE_F12F6.6', 'gene', 'Caenorhabditis elegans', 'WBGene00004755', 'F12F6.6.1', 'reverse strand', '11566194.0', '11561986.0', 'Caenorhabditis elegans chromosome IV', 'embryo');\nDatabase State:\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `adf_h_gelsolin_like_domain_superfamily`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `cell_component`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `ensembl_protein_id`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `homologene_id`, `refseq_rna_id`, `entrez_gene_id`, `ortholog`, `encodes`, `instance_of`, `found_in_taxon`, `ensembl_gene_id`, `ensembl_transcript_id`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `expressed_in`]\n- Table: `part`, Columns: [`label`, `description`, `interpro_id`, `instance_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `camera_lens` (`id`, `brand`, `name`, `focal_length_mm`, `max_aperture`)  VALUES (3, 'Olympus', 'Olympus M.Zuiko Digital ED 75mm f/1.8', 75.0, 1.800000000000000044);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `camera_lens`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (UserID, Gender)  VALUES ('tw-9453382', 'Unknown');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: user"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO song (song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate)  VALUES ('Tumi robe nirobe', 'Shrikanta', 'India', 1, 'tagore', 8, 'bangla', '28-AUG-2011', 1080);\nDatabase State:\n- Table: files, Columns: [f_id, artist_name, file_size, duration, formats]\n- Table: song, Columns: [song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate]\n- Table: genre, Columns: [g_name, rating, most_popular_in]\n- Table: artist, Columns: [artist_name, country, gender, preferred_genre]",
        "Response": "Table: song"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO region_sales (region_id, game_platform_id, num_sales)  VALUES (1, 3068, 0.0);\nDatabase State:\n- Table: region_sales, Columns: [region_id, game_platform_id, num_sales]\n- Table: region, Columns: [id, region_name]\n- Table: game, Columns: [id, genre_id, game_name]\n- Table: game_publisher, Columns: [id, game_id, publisher_id]\n- Table: platform, Columns: [id, platform_name]",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update)  VALUES (5291, '2005-07-09 15:15:02', 1367, 194, '2005-07-15 10:22:02', 2, '2006-02-15 21:30:53');\nDatabase State:\n- Table: payment, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: country, Columns: [country_id, country, last_update]",
        "Response": "Table: rental"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname)  VALUES ('nm0772049', 'Barry M. Schkolnick', NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Keyword, Columns: [episode_id, keyword]",
        "Response": "Table: Person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (year, lgID, tmID, oppID, W, L, T, OTL)  VALUES (1984, 'NHL', 'PHI', 'MNS', 3, 0, 0, NULL);\nDatabase State:\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]\n- Table: CombinedShutouts, Columns: [year, month, date, tmID, oppID, `R/P`, IDgoalie1, IDgoalie2]\n- Table: Goalies, Columns: [playerID, year, stint, tmID, lgID, GP, Min, W, L, `T/OL`, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA]\n- Table: HOF, Columns: [year, hofID, name, category]\n- Table: SeriesPost, Columns: [year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L, T, GoalsWinner, GoalsLoser, note]\n- Table: TeamsPost, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: AwardsMisc, Columns: [name, ID, award, year, lgID, note]\n- Table: Coaches, Columns: [coachID, year, tmID, lgID, stint, notes, g, w, l, t, postg, postw, postl, postt]\n- Table: Scoring, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, `+/-`, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, `Post+/-`, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]\n- Table: ScoringSup, Columns: [playerID, year, PPA, SHA]\n- Table: AwardsPlayers, Columns: [playerID, award, year, lgID, note, pos]\n- Table: ScoringShootout, Columns: [playerID, year, stint, tmID, S, G, GDG]\n- Table: Master, Columns: [playerID, coachID, hofID, firstName, lastName, nameNote, nameGiven, nameNick, height, weight, shootCatch, legendsID, ihdbID, hrefID, firstNHL, lastNHL, firstWHA, lastWHA, pos, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity, deathYear, deathMon, deathDay, deathCountry, deathState, deathCity]\n- Table: Teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: ScoringSC, Columns: [playerID, year, tmID, lgID, pos, GP, G, A, Pts, PIM]\n- Table: TeamsSC, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM]\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]",
        "Response": "Table: TeamVsTeam"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Artist_ID`, `Artist`, `Age`, `Famous_Title`, `Famous_Release_date`)  VALUES (3, 'Ophiolatry', 22, 'Antievangelistical Process (re-release)', '2009');\nDatabase State:\n- Table: `artist`, Columns: [`Artist_ID`, `Artist`, `Age`, `Famous_Title`, `Famous_Release_date`]\n- Table: `volume`, Columns: [`Volume_ID`, `Volume_Issue`, `Issue_Date`, `Weeks_on_Top`, `Song`, `Artist_ID`]\n- Table: `music_festival`, Columns: [`ID`, `Music_Festival`, `Date_of_ceremony`, `Category`, `Volume`, `Result`]",
        "Response": "Table: `artist`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit)  VALUES (14145, 'CA-2011-133830', '2013-12-05', '2013-12-10', 'Standard Class', 'RL-19615', 'West', 'OFF-PA-10001363', 49.11999999999999745, 4, 0.0, 23.08640000000000114);\nDatabase State:\n- Table: central_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]\n- Table: south_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]\n- Table: east_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]",
        "Response": "Table: west_superstore"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`ranking_date`)  VALUES (20120604, 1199, 206291, 4, 2);\nDatabase State:\n- Table: players, Columns: [`player_id`, `first_name`, `last_name`, `hand`, `birth_date`, `country_code`]\n- Table: rankings, Columns: [`ranking_date`]\n- Table: matches, Columns: [`best_of`, `draw_size`, `loser_age`, `loser_entry`, `loser_hand`, `loser_ht`, `loser_id`, `loser_ioc`, `loser_name`, `loser_rank`, `loser_rank_points`, `loser_seed`, `match_num`, `minutes`, `round`, `score`, `surface`, `tourney_date`, `tourney_id`, `tourney_level`, `tourney_name`, `winner_age`, `winner_entry`, `winner_hand`, `winner_ht`, `winner_id`, `winner_ioc`, `winner_name`, `winner_rank`, `winner_rank_points`, `winner_seed`, `year`]",
        "Response": "Table: rankings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (student_id)  VALUES (1709, 1689);\nDatabase State:\n- Table: Friend, Columns: [student_id]\n- Table: Likes, Columns: [student_id]",
        "Response": "Table: Likes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Competition_ID`, `Year`, `Competition_type`, `Country`)  VALUES (2, 2006.0, 'Friendly', 'Spain');\nDatabase State:\n- Table: `competition_result`, Columns: [`Competition_ID`, `Club_ID_1`, `Club_ID_2`, `Score`]\n- Table: `competition`, Columns: [`Competition_ID`, `Year`, `Competition_type`, `Country`]",
        "Response": "Table: `competition`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`)  VALUES ('helicase EF3217', 'microbial gene found in Enterococcus faecalis V583', 'Enterococcus faecalis V583', '1202054', 'gene', 'Helicase EF3217', 'EF3217', '3089834', 'reverse strand', 'gene', '3086940');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Museum_ID`, `visitor_ID`, `Num_of_Ticket`, `Total_spent`)  VALUES (8, '6', 2, 19.98000000000000042);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `visit`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violation (inspection_id, point_id, fine, inspector_comment)  VALUES (1387804, 40, 100, 'PROVIDE A THERMOMETER INSIDE THE 2 DOOR REACH-IN COOLER WHERE MILK IS STORED NEAR FRONT COUNTER');\nDatabase State:\n- Table: employee, Columns: [employee_id, first_name, last_name, address, city, state, zip, phone, title, salary, supervisor]\n- Table: inspection_point, Columns: [point_id, Description, category, code, fine, point_level]\n- Table: establishment, Columns: [license_no, dba_name, aka_name, facility_type, risk_level, address, city, state, zip, latitude, longitude, ward]",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Tourist_ID, Tourist_Details)  VALUES (359, 'Newell');\nDatabase State:\n- Table: Photos, Columns: [Photo_ID, Tourist_Attraction_ID, Name, Description, Filename, Other_Details]\n- Table: Visits, Columns: [Visit_ID, Tourist_Attraction_ID, Tourist_ID, Visit_Date, Visit_Details]\n- Table: Features, Columns: [Feature_ID, Feature_Details]\n- Table: Locations, Columns: [Location_ID, Location_Name, Address, Other_Details]\n- Table: Tourist_Attractions, Columns: [Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details]\n- Table: Visitors, Columns: [Tourist_ID, Tourist_Details]\n- Table: Tourist_Attraction_Features, Columns: [Tourist_Attraction_ID, Feature_ID]\n- Table: Ref_Hotel_Star_Ratings, Columns: [star_rating_code, star_rating_description]",
        "Response": "Table: Visitors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, Name, CountryCode, District, Population)  VALUES (1891, 'Peking', 'CHN', 'Peking', 7472000);\nDatabase State:\n- Table: City, Columns: [ID, Name, CountryCode, District, Population]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO institution_grads (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (209038, 2013, 'B', 'A', '2y all', '18', 'NULL', '4', 'NULL', '22.2');\nDatabase State:\n- Table: institution_grads, Columns: [unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate]",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `paragraphs` (id, ParagraphNum, PlainText, character_id, chapter_id)  VALUES (651709, 13, replace('Ay, that I do; and have done any time these three\\nhundred years.','\\n',char(10)), 1085, 19194);\nDatabase State:\n- Table: `paragraphs`, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]\n- Table: `characters`, Columns: [id, CharName, Abbrev, Description]\n- Table: `works`, Columns: [id, Title, LongTitle, Date, GenreType]\n- Table: `chapters`, Columns: [id, Act, Scene, Description, work_id]",
        "Response": "Table: `paragraphs`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Clients (Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details)  VALUES (426, 383, 'alba04@example.com', 'Bettye', '(604)849-0214', NULL);\nDatabase State:\n- Table: Ref_Payment_Methods, Columns: [payment_method_code, payment_method_description]\n- Table: Performers, Columns: [Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details]\n- Table: Performers_in_Bookings, Columns: [Order_ID, Performer_ID]\n- Table: Order_Items, Columns: [Order_Item_ID, Order_ID, Product_ID, Order_Quantity, Other_Item_Details]\n- Table: Ref_Service_Types, Columns: [Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description]\n- Table: Customer_Orders, Columns: [Order_ID, Customer_ID, Store_ID, Order_Date, Planned_Delivery_Date, Actual_Delivery_Date, Other_Order_Details]\n- Table: Clients, Columns: [Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details]\n- Table: Drama_Workshop_Groups, Columns: [Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details]\n- Table: Invoices, Columns: [Invoice_ID, Order_ID, payment_method_code, Product_ID, Order_Quantity, Other_Item_Details, Order_Item_ID]\n- Table: Bookings, Columns: [Booking_ID, Customer_ID, Workshop_Group_ID, Status_Code, Store_ID, Order_Date, Planned_Delivery_Date, Actual_Delivery_Date, Other_Order_Details]",
        "Response": "Table: Clients"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Timed_Locations_of_Things (thing_id, Date_and_Time, Location_Code)  VALUES (85, '2017-11-26 00:13:44', '1537 Schmeler G');\nDatabase State:\n- Table: Properties, Columns: [property_id, property_type_code, property_address, other_details]\n- Table: Customer_Event_Notes, Columns: [Customer_Event_Note_ID, Customer_Event_ID, service_type_code, resident_id, property_id, date_moved_in]",
        "Response": "Table: Timed_Locations_of_Things"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Station_ID`, `Name`, `Annual_entry_exit`, `Annual_interchanges`, `Total_Passengers`, `Location`, `Main_Services`, `Number_of_Platforms`)  VALUES (10, 'East Croydon', 20.55099999999999837, 6.341000000000000191, 26.89199999999999946, 'London', 'Brighton Main Line', 6);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `station`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `ensembl_transcript_id`, `homologene_id`, `refseq_rna_id`, `ortholog`, `encodes`, `found_in_taxon`, `exact_match`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `expressed_in`)  VALUES ('PDCL', 'protein-coding gene in the species Homo sapiens', '5082', 'protein-coding gene', 'ENSG00000136940', 'ENST00000436632', '38043.0', 'NM_005388', 'Pdcl', 'Phosducin like', 'Homo sapiens', 'http://identifiers.org/ncbigene/5082', 'reverse strand', '125590910.0', '122798389.0', 'human chromosome 9', 'gene', 'endothelial cell');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (event_id, competitor_id, medal_id)  VALUES (149, 124186, 4);\nDatabase State:\n- Table: event, Columns: [id, sport_id, event_name]\n- Table: games_city, Columns: [games_id, city_id]\n- Table: person_region, Columns: [person_id, region_id]\n- Table: sport, Columns: [id, sport_name]",
        "Response": "Table: competitor_event"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO IMG_REL (IMG_ID, PRED_CLASS_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID)  VALUES (2399316, 149, 11, 3);\nDatabase State:\n- Table: IMG_REL, Columns: [IMG_ID, PRED_CLASS_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID]",
        "Response": "Table: IMG_REL"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (1911802, 4, 10720, 243, 748);\nDatabase State:\n- Table: Employees, Columns: [EmployeeID, FirstName, MiddleInitial, LastName]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `phone` (`Company_name`, `Hardware_Model_name`, `Accreditation_type`, `Accreditation_level`, `Date`, `chip_model`, `screen_mode`)  VALUES ('Huawei Technologies Co.Ltd.', 'U8815 Asura', 'Provisional', 'joyn', 'Approved (valid until 03.05.13)', 'X50 Standard', '3');\nDatabase State:\n- Table: `phone`, Columns: [`Company_name`, `Hardware_Model_name`, `Accreditation_type`, `Accreditation_level`, `Date`, `chip_model`, `screen_mode`]\n- Table: `screen_mode`, Columns: [`Graphics_mode`, `Char_cells`, `Pixels`, `Hardware_colours`, `used_kb`, `map`, `Type`]\n- Table: `chip_model`, Columns: [`Model_name`, `Launch_year`, `RAM_MiB`, `ROM_MiB`, `Slots`, `WiFi`, `Bluetooth`]",
        "Response": "Table: `phone`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('6-phosphofructokinase Mb3035c', 'microbial protein found in Mycobacterium bovis AF2122/97', '6-phosphofructokinase Mb3035c', 'P65691', 'fructose 6-phosphate metabolic process', 'nucleotide binding', 'cytoplasm', 'Phosphofructokinase domain', 'Mycobacterium bovis AF2122/97', 'NP_856680', 'protein', 'Phosphofructokinase superfamily');\nDatabase State:\n- Table: `phosphofructokinase_conserved_site_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `phosphofructokinase_conserved_site_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Location_ID, Other_Details)  VALUES (1, 'Rowe PLC');\nDatabase State:\n- Table: Assets, Columns: [Asset_ID, Other_Details]\n- Table: Events, Columns: [Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID]\n- Table: Channels, Columns: [Channel_ID, Other_Details]",
        "Response": "Table: Locations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (movieid, actorid, cast_num)  VALUES (2261353, 778082, 3);\nDatabase State:\n- Table: `movies2directors`, Columns: [movieid, directorid, genre]\n- Table: `movies`, Columns: [movieid, year, isEnglish, country, runningtime]",
        "Response": "Table: `movies2actors`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `waltham_forest_london_borough_council_election` (`label`, `description`, `instance_of`, `country`, `point_in_time`, `freebase_id`, `part_of`)  VALUES ('2022 Waltham Forest London Borough Council election', '2022 local election in Waltham Forest', 'Waltham Forest London Borough Council election', 'United Kingdom', '+2022-05-05T00:00:00Z', 'nan', '2022 United Kingdom local elections');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `waltham_forest_london_borough_council_election`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email)  VALUES (6, 'Direct Debit', '838', 'Cheyenne', '058 Ben Street Apt. 034', '009-136-4509x19635', 'rhayes@example.org');\nDatabase State:\n- Table: Customer_Address_History, Columns: [customer_id, address_id, date_from, date_to]\n- Table: Order_Items, Columns: [order_item_id, order_id, product_id, order_quantity]\n- Table: Customers, Columns: [customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email]",
        "Response": "Table: Customers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `event` (`Event_ID`, `Date`, `Venue`, `Name`, `Event_Attendance`)  VALUES (5, '9 April 2014', 'Hispano', 'Special Exhibition', 225);\nDatabase State:\n- Table: `event`, Columns: [`Event_ID`, `Date`, `Venue`, `Name`, `Event_Attendance`]\n- Table: `news_report`, Columns: [`journalist_ID`, `Event_ID`, `Work_Type`]\n- Table: `journalist`, Columns: [`journalist_ID`, `Name`, `Nationality`, `Age`, `Years_working`]",
        "Response": "Table: `event`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `employee` (`Employee_ID`, `Name`, `Age`, `City`)  VALUES (9, 'Steve Borthwick', 32, 'Bath');\nDatabase State:\n- Table: `evaluation`, Columns: [`Employee_ID`, `Year_awarded`, `Bonus`]\n- Table: `employee`, Columns: [`Employee_ID`, `Name`, `Age`, `City`]\n- Table: `shop`, Columns: [`Shop_ID`, `Name`, `Location`, `District`, `Number_products`, `Manager_name`]\n- Table: `hiring`, Columns: [`Shop_ID`, `Employee_ID`, `Start_from`, `Is_full_time`]",
        "Response": "Table: `employee`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `torrents` (groupName, totalSnatched, artist, groupYear, releaseType, groupId, id)  VALUES ('es el momento / tempus fugit', 6, 't.o.f.', 1998, 'single', 72470863, 7841);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `torrents`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('Yes', 2016, 2186, 31);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Answer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM)  VALUES (324291, 'Robertson', 'Gerald', 'T', '1973-4-8', 120, 'Sr', 3.870000000000000106, 0, 'EDU', '2267', 311);\nDatabase State:\n- Table: EMPLOYEE, Columns: [EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB]\n- Table: COURSE, Columns: [CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]\n- Table: CLASS, Columns: [CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]\n- Table: DEPARTMENT, Columns: [DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]\n- Table: STUDENT, Columns: [STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE, STU_PHONE, PROF_NUM]\n- Table: ENROLL, Columns: [CLASS_CODE, STU_NUM, ENROLL_GRADE]\n- Table: PROFESSOR, Columns: [EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE]",
        "Response": "Table: STUDENT"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `flight` (`id`, `Vehicle_Flight_number`, `Date`, `Pilot`, `Velocity`, `Altitude`, `airport_id`, `company_id`)  VALUES (5, 'M2-F1 #14', 'November 8, 1963', 'Thompson', 240.0, 3650.0, 4, 5);\nDatabase State:\n- Table: `flight`, Columns: [`id`, `Vehicle_Flight_number`, `Date`, `Pilot`, `Velocity`, `Altitude`, `airport_id`, `company_id`]",
        "Response": "Table: `flight`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Addresses (address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country)  VALUES (7, '34580 Mireille Crescent Suite 776', 'Cletusbury', '215', 'Georgia', 'USA');\nDatabase State:\n- Table: Addresses, Columns: [address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country]\n- Table: Organizations, Columns: [organization_id, date_formed, organization_name, uk_vat_number]",
        "Response": "Table: Addresses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (positionID, positiontitle, educationrequired, minsalary, maxsalary)  VALUES (1, 'Account Representative', '4 year degree', 'US$25,000.00', 'US$75,000.00');\nDatabase State:\n- Table: position, Columns: [positionID, positiontitle, educationrequired, minsalary, maxsalary]\n- Table: location, Columns: [locationID, locationcity, address, state, zipcode, officephone]",
        "Response": "Table: position"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Code, Name, Price, Manufacturer)  VALUES (9, 'Toner cartridge', 66, 3);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `uniprot_protein_id`, `ensembl_protein_id`, `encoded_by`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Retinal degeneration 3, GUCY2D regulator', 'Protein found in Danio rerio', 'A1L2C8', 'ENSDARP00000049863', 'rd3', 'Danio rerio', 'NP_001074100', 'protein', 'Retinal degeneration protein 3');\nDatabase State:\n- Table: `retinal_degeneration_protein_3`, Columns: [`label`, `description`, `uniprot_protein_id`, `ensembl_protein_id`, `encoded_by`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Artwork_ID`, `Type`, `Name`)  VALUES (5, 'Presenter Music/Variety Show', 'Boys');\nDatabase State:\n- Table: artwork, Columns: [`Artwork_ID`, `Type`, `Name`]\n- Table: nomination, Columns: [`Artwork_ID`, `Festival_ID`, `Result`]\n- Table: `festival_detail`, Columns: [`Festival_ID`, `Festival_Name`, `Chair_Name`, `Location`, `Year`, `Num_of_Audience`]",
        "Response": "Table: artwork"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO incidents (case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers)  VALUES ('100577T', '2007/2/12', '3847 Timberglen Road, #3116', 'Deceased', 'Handgun', 'Mims, Carlton B/M', 1, 'Ragsdale, Barry W/M');\nDatabase State:\n- Table: officers, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: incidents, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]",
        "Response": "Table: incidents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO employee (eid, name, salary)  VALUES (619023588, 'Jennifer Thomas', 54921);\nDatabase State:\n- Table: employee, Columns: [eid, name, salary]\n- Table: aircraft, Columns: [aid, name, distance]\n- Table: flight, Columns: [flno, origin, destination, distance, departure_date, arrival_date, price, aid]\n- Table: certificate, Columns: [eid, aid]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Thermosynechococcus elongatus BP-1', 'nan', 'strain', 'Thermosynechococcus elongatus BP-1', 'Thermosynechococcus elongatus', '197221', 'Gram-negative bacteria', 'GCA_000011345.1');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (region_id, game_platform_id, num_sales)  VALUES (3, 13606, 0.04000000000000000083);\nDatabase State:\n- Table: region, Columns: [id, region_name]\n- Table: game_platform, Columns: [id, game_publisher_id, platform_id, release_year]\n- Table: platform, Columns: [id, platform_name]\n- Table: region_sales, Columns: [region_id, game_platform_id, num_sales]",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO institution_grads (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (451848, 2013, 'F', 'X', '4y bach', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO status (station_id, bikes_available, docks_available, time)  VALUES (32, 5, 6, '2015-06-02 14:20:03');\nDatabase State:\n- Table: weather, Columns: [date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code]\n- Table: status, Columns: [station_id, bikes_available, docks_available, time]\n- Table: station, Columns: [id, name, lat, long, dock_count, city, installation_date]\n- Table: trip, Columns: [id, duration, start_date, start_station_name, end_date, end_station_name, bike_id, subscription_type, zip_code]",
        "Response": "Table: status"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`)  VALUES ('Thermosynechococcus elongatus', 'species of Cyanobacteria', 'Thermosynechococcus', 'Thermosynechococcus elongatus', 'taxon', 'species', 'nan', 'nan', '146786.0', 'nan', '11827968.0', 'Gram-negative bacteria', 'https://lpsn.dsmz.de/species/thermosynechococcus-elongatus', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (name, friend, year)  VALUES ('Alice', 'Bob', 10);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: PersonFriend"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('G1', '2015-05-03', 'Xanthi', 'Asteras Tripolis', 0, 0, 'D', 2015);\nDatabase State:\n- Table: divisions, Columns: [division, name, country]\n- Table: matchs, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `pa14_domain_protein_family` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('PA14 domain-containing protein Caur_0648', 'microbial protein found in Chloroflexus aurantiacus J-10-fl', 'PA14 domain-containing protein Caur_0648', 'A9WFF0', 'nan', 'PA14 domain', 'Chloroflexus aurantiacus J-10-fl', 'YP_001634277', 'protein', 'Peptidase C70, AvrRpt2');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`]\n- Table: `molecular_function`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `pa14_domain_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `pa14_domain_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (area_code)  VALUES (575, 'NM');\nDatabase State:\n- Table: VOTES, Columns: [vote_id]\n- Table: CONTESTANTS, Columns: [contestant_number]",
        "Response": "Table: AREA_CODE_STATE"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violations (business_id, date, violation_type_id, risk_category, description)  VALUES (3286, '2014-11-24', '103114', 'High Risk', 'High risk vermin infestation');\nDatabase State:\n- Table: inspections, Columns: [business_id, score, date, type]\n- Table: violations, Columns: [business_id, date, violation_type_id, risk_category, description]",
        "Response": "Table: violations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count)  VALUES (2, 624, 'Flat', 'Apt. 585', 2, 4, '5');\nDatabase State:\n- Table: Guests, Columns: [guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth]\n- Table: Apartments, Columns: [apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count]\n- Table: Apartment_Facilities, Columns: [apt_id, facility_code]\n- Table: Apartment_Buildings, Columns: [building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone]",
        "Response": "Table: Apartments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (student_id, capability, prof_id, salary)  VALUES (31, 3, 6, 'free');\nDatabase State:\n- Table: RA, Columns: [student_id, capability, prof_id, salary]",
        "Response": "Table: RA"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `follows` (`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `followed_by`, `competition_class`, `follows`)  VALUES ('1985 Poona District & Metropolitan Junior Badminton Championships', 'badminton championships', 'Poona District & Metropolitan Junior Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'India', '+1985-00-00T00:00:00Z', '1986 Poona District & Metropolitan Junior Badminton Championships', 'national championship', '1984 Poona District & Metropolitan Junior Badminton Championships');\nDatabase State:\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `followed_by`, `competition_class`, `follows`]\n- Table: `poona_district_metropolitan_junior_badminton_championships`, Columns: [`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `followed_by`, `competition_class`, `follows`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, VALUE, UNITS)  VALUES ('2012-05-19', 'bb37785c-2684-4be2-95ec-45d9be2ae84e', 'f94e2c54-5059-438a-b0af-d00d93d3cfaf', '2093-3', 'Total Cholesterol', 181.0, 'mg/dL');\nDatabase State:\n- Table: immunizations, Columns: [DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: medications, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: all_prevalences, Columns: [ITEM, `POPULATION TYPE`, OCCURRENCES, `POPULATION COUNT`, `PREVALENCE RATE`, `PREVALENCE PERCENTAGE`]\n- Table: encounters, Columns: [ID, DATE, PATIENT, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: `claims`, Columns: [ID, PATIENT, BILLABLEPERIOD, ORGANIZATION, ENCOUNTER, DIAGNOSIS, TOTAL]\n- Table: observations, Columns: [DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, VALUE, UNITS]\n- Table: allergies, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: careplans, Columns: [ID, START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: conditions, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: patients, Columns: [patient, birthdate, deathdate, ssn, drivers, passport, prefix, first, last, suffix, maiden, marital, race, ethnicity, gender, birthplace, address]\n- Table: procedures, Columns: [DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]",
        "Response": "Table: observations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Document_Locations (Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To)  VALUES (230, 'e', '1972-03-31 09:47:22', '1987-11-05 06:11:22');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Document_Locations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `wrestler` (`Wrestler_ID`, `Name`, `Reign`, `Days_held`, `Location`, `Event`)  VALUES (8, 'Jushin Liger \u00a7', '1', '183', 'Tokyo , Japan', 'Wrestling World 1997');\nDatabase State:\n- Table: `wrestler`, Columns: [`Wrestler_ID`, `Name`, `Reign`, `Days_held`, `Location`, `Event`]",
        "Response": "Table: `wrestler`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Scientist, Project)  VALUES (631231482, 'Ast3');\nDatabase State:\n- Table: Scientists, Columns: [SSN, Name]\n- Table: AssignedTo, Columns: [Scientist, Project]\n- Table: Projects, Columns: [Code, Name, Hours]",
        "Response": "Table: AssignedTo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `browser` (`id`, `name`, `market_share`)  VALUES (2, 'Firefox', 18.10999999999999944);\nDatabase State:\n- Table: `Web_client_accelerator`, Columns: [`id`, `name`, `Operating_system`, `Client`, `Connection`]\n- Table: `accelerator_compatible_browser`, Columns: [`accelerator_id`, `browser_id`, `compatible_since_year`]\n- Table: `browser`, Columns: [`id`, `name`, `market_share`]",
        "Response": "Table: `browser`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (zip_code, district)  VALUES (61925, 'IL-13');\nDatabase State:\n- Table: avoid, Columns: [zip_code, bad_alias]\n- Table: area_code, Columns: [zip_code, area_code]\n- Table: alias, Columns: [zip_code, alias]\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]",
        "Response": "Table: zip_congress"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `cust_order` (order_id, order_date, customer_id, shipping_method_id, dest_address_id)  VALUES (1022, '2022-08-22 04:43:59', 505, 1, 301);\nDatabase State:\n- Table: author, Columns: [author_id, author_name]\n- Table: `order_history`, Columns: [history_id, order_id, status_id, status_date]\n- Table: address, Columns: [address_id, street_number, street_name, city, country_id]\n- Table: book_language, Columns: [language_id, language_code, language_name]\n- Table: country, Columns: [country_id, country_name]\n- Table: order_status, Columns: [status_id, status_value]\n- Table: `cust_order`, Columns: [order_id, order_date, customer_id, shipping_method_id, dest_address_id]\n- Table: publisher, Columns: [publisher_id, publisher_name]\n- Table: customer, Columns: [customer_id, first_name, last_name, email]\n- Table: book, Columns: [book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id]\n- Table: `order_line`, Columns: [line_id, order_id, book_id, price]\n- Table: address_status, Columns: [status_id, address_status]\n- Table: book_author, Columns: [book_id, author_id]\n- Table: shipping_method, Columns: [method_id, method_name, cost]",
        "Response": "Table: `cust_order`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('adenylate kinase LBA0312', 'microbial gene found in Lactobacillus acidophilus NCFM', '3252668', 'gene', 'Adenylate kinase LBA0312', 'Lactobacillus acidophilus NCFM', 'forward strand', '301583', '300914', 'gene', 'LBA0312');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID)  VALUES (512, 801, '2016-05-18', '2018-02-11', 82506, 1737, 133);\nDatabase State:\n- Table: Customers, Columns: [Customer_ID, Customer_Details]\n- Table: Payments, Columns: [Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment]\n- Table: Customer_Policies, Columns: [Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date]",
        "Response": "Table: Settlements"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`City_ID`, `Official_Name`, `Status`, `Area_km_2`, `Population`, `Census_Ranking`)  VALUES (5, 'Aroostook', 'Village', 2.240000000000000214, 351.0, '3460 of 5008');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `city`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (zip_code, bad_alias)  VALUES (2917, 'Esmond');\nDatabase State:\n- Table: state, Columns: [abbreviation, name]\n- Table: country, Columns: [zip_code, county, state]",
        "Response": "Table: avoid"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `competition_class`, `part_of`, `described_at_url`, `location`, `event_distance`, `follows`, `followed_by`, `point_in_time`, `sport`)  VALUES ('2015 World Rowing U23 Championships \u2013 U23 men''s eight', 'rowing event', 'rowing event', 'U23 men''s eight', '2015 World Rowing U23 Championships', 'http://www.worldrowing.com/events/2015-world-rowing-under-23-championships/u23-mens-eight/', 'Plovdiv Rowing Venue', 2000.0, '2014 World Rowing U23 Championships \u2013 U23 men''s eight', '2016 World Rowing U23 Championships \u2013 U23 men''s eight', '+2015-00-00T00:00:00Z', 'rowing');\nDatabase State:\n- Table: `competition_class`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `short_name`, `sport`, `catalog_code`]\n- Table: `2016_world_rowing_u23_championships`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `part_of`, `described_at_url`, `location`, `event_distance`, `follows`, `followed_by`, `point_in_time`, `sport`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `part_of`, `described_at_url`, `location`, `event_distance`, `follows`, `followed_by`, `point_in_time`, `sport`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `womens_national_rugby_union_team` (`label`, `description`, `instance_of`, `sport`, `authority`, `country`, `inception`, `freebase_id`, `competition_class`)  VALUES ('Australia women''s national rugby union team', 'nan', 'women''s national rugby union team', 'rugby union', 'Rugby Australia', 'Australia', '+1994-09-02T00:00:00Z', '/m/0gthnq', 'women''s rugby union');\nDatabase State:\n- Table: `headquarters`, Columns: [`label`, `description`, `page_banner`, `country`, `commons_category`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `official_website`, `topics_main_category`, `freebase_id`, `twinned_administrative_body`, `instance_of`, `gnd_id`, `musicbrainz_area_id`, `category_for_people_born_here`, `geonames_id`, `category_for_people_who_died_here`, `category_of_associated_people`, `capital_of`, `viaf_id`, `image`, `elevation_above_sea_level`, `commons_gallery`, `population`, `area`, `library_of_congress_authority_id`, `located_in_time_zone`, `quora_topic_id`, `official_name`, `us_national_archives_identifier`, `native_label`, `encyclop\u00e6dia_universalis_id`, `demonym`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `great_russian_encyclopedia_online_id`, `gran_enciclop\u00e8dia_catalana_id`, `whos_on_first_id`, `french_vikidia_id`, `locator_map_image`, `worldcat_identities_id`, `interlingual_index_id`, `wordnet_31_synset_id`, `factgrid_item_id`, `yso_id`, `store_norske_leksikon_id`, `online_pwn_encyclopedia_id`, `den_store_danske_id`, `national_library_of_israel_j9u_id`, `described_by_source`]\n- Table: `womens_national_rugby_union_team`, Columns: [`label`, `description`, `instance_of`, `sport`, `authority`, `country`, `inception`, `freebase_id`, `competition_class`]",
        "Response": "Table: `womens_national_rugby_union_team`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `coordinate_location`, `freebase_id`, `instance_of`, `geonames_id`, `elevation_above_sea_level`, `area`, `commons_category`, `population`, `located_in_the_administrative_territorial_entity`, `encyclop\u00e6dia_britannica_online_id`, `capital_of`, `whos_on_first_id`, `inaturalist_place_id`, `national_library_of_israel_j9u_id`, `located_in_time_zone`, `image`)  VALUES ('Choluteca', 'city in Honduras', 'Honduras', '13.301111111111114', '/m/0752bd', 'big city', '3613529', 40.0, 1.072000000000000063, 'Choluteca', 152.5190000000000054, 'Choluteca Department', 'place/Choluteca', 'Choluteca Department', '421193149', '31346.0', '9.870075572372052e+17', 'UTC\u221206:00', 'Puente Colgante de Choluteca.jpg');\nDatabase State:\n- Table: `department_of_honduras`, Columns: [`label`, `description`, `commons_category`, `country`, `iso_3166_2_code`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `freebase_id`, `fips_10_4_countries_and_regions`, `instance_of`, `inception`, `geonames_id`, `capital`, `area`, `population`, `locator_map_image`, `getty_thesaurus_of_geographic_names_id`, `openstreetmap_relation_id`, `whos_on_first_id`, `geoshape`, `inaturalist_place_id`, `located_in_time_zone`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `commons_category`, `country`, `iso_3166_2_code`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `freebase_id`, `fips_10_4_countries_and_regions`, `instance_of`, `inception`, `geonames_id`, `capital`, `area`, `population`, `locator_map_image`, `getty_thesaurus_of_geographic_names_id`, `openstreetmap_relation_id`, `whos_on_first_id`, `geoshape`, `inaturalist_place_id`, `located_in_time_zone`]\n- Table: `capital_city`, Columns: [`label`, `description`, `country`, `coordinate_location`, `freebase_id`, `instance_of`, `geonames_id`, `elevation_above_sea_level`, `area`, `commons_category`, `population`, `located_in_the_administrative_territorial_entity`, `encyclop\u00e6dia_britannica_online_id`, `capital_of`, `whos_on_first_id`, `inaturalist_place_id`, `national_library_of_israel_j9u_id`, `located_in_time_zone`, `image`]\n- Table: `administrative_centre`, Columns: [`label`, `description`, `commons_category`, `country`, `iso_3166_2_code`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `freebase_id`, `fips_10_4_countries_and_regions`, `instance_of`, `inception`, `geonames_id`, `capital`, `area`, `population`, `locator_map_image`, `getty_thesaurus_of_geographic_names_id`, `language_used`, `openstreetmap_relation_id`, `whos_on_first_id`, `gran_enciclop\u00e8dia_catalana_id`, `geoshape`, `inaturalist_place_id`, `located_in_time_zone`]",
        "Response": "Table: `capital_city`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity)  VALUES ('Dr. Panda Town: Vacation', 'Why everyone kept saying needs money? I got free I love game addictive', 'Positive', '0.125', '0.6749999999999999');\nDatabase State:\n- Table: `user_reviews`, Columns: [App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity]\n- Table: `playstore`, Columns: [App, Category, Rating, Reviews, Size, Installs, Type, Price, `Content Rating`, Genres]",
        "Response": "Table: `user_reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('ATP synthase F0F1 subunit gamma SMU_1529', 'microbial gene found in Streptococcus mutans UA159', '1028773', 'gene', 'ATP synthase F0F1 subunit gamma SMU_1529', 'Streptococcus mutans UA159', 'reverse strand', '1456003', '1455125', 'gene', 'SMU_1529');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (cmi_cross_ref_id, master_customer_id, source_system_code)  VALUES (100, 4, 'Rent');\nDatabase State:\n- Table: Council_Tax, Columns: [council_tax_id, cmi_cross_ref_id]\n- Table: Benefits_Overpayments, Columns: [council_tax_id, cmi_cross_ref_id]\n- Table: Parking_Fines, Columns: [council_tax_id, cmi_cross_ref_id]",
        "Response": "Table: CMI_Cross_References"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Faculty_Participates_in (FacID, actid)  VALUES (1121, 770);\nDatabase State:\n- Table: Faculty, Columns: [FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]\n- Table: Faculty_Participates_in, Columns: [FacID, actid]\n- Table: Activity, Columns: [actid, activity_name]",
        "Response": "Table: Faculty_Participates_in"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `ybhb_ybcl` (`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `subclass_of`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Kinase inhibitor STM1081', 'microbial protein found in Salmonella enterica subsp. enterica serovar Typhimurium str. LT2', 'Salmonella enterica subsp. enterica serovar Typhimurium str. LT2', 'Q8ZQ63', 'kinase inhibitor STM1081', 'protein', 'protein', 'NP_460055', 'PEBP-like superfamily');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `ybhb_ybcl`, Columns: [`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `subclass_of`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `ybhb_ybcl`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (client_id, sex, day, month, year, age, social, first, middle, last, phone, email, address_1, address_2, city, state, zipcode, district_id)  VALUES ('C00003279', 'Female', 4, 8, 1974, 45, '819-25-4267', 'Anaya', 'Adalie', 'Davison', '248-570-2876', 'anaya.davison@gmail.com', '4 Creek Drive', NULL, 'Warwick', 'RI', 40887, 66);\nDatabase State:\n- Table: callcenterlogs, Columns: [`Date received`, `Complaint ID`, `rand client`, phonefinal, `vru+line`, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time]\n- Table: client, Columns: [client_id, sex, day, month, year, age, social, first, middle, last, phone, email, address_1, address_2, city, state, zipcode, district_id]",
        "Response": "Table: client"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('translation elongation factor P SRU_0935', 'microbial gene found in Salinibacter ruber DSM 13855', 'Salinibacter ruber DSM 13855', '3850651', 'gene', 'SRU_0935', 'Translation elongation factor P SRU_0935', 'gene', '1200516', 'forward strand', '1199938');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('SARP family transcriptional regulator/ATPase AMED_6363', 'microbial gene found in Amycolatopsis mediterranei U32', '9440520', 'gene', 'SARP family transcriptional regulator/ATPase AMED_6363', 'Amycolatopsis mediterranei U32', 'forward strand', '7038982', '7035956', 'gene', 'AMED_6363');\nDatabase State:\n- Table: `nb_arc_domain_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`]\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `station_company` (`Station_ID`, `Company_ID`, `Rank_of_the_Year`)  VALUES (11, 1, 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `station_company`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS)  VALUES (9234, '2003-2004', 'Czech Republic U18', 'WJC-18', 'Regular Season', 7, 1, 1, 2, 2, 2);\nDatabase State:\n- Table: PlayerInfo, Columns: [ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0]\n- Table: height_info, Columns: [height_id, height_in_cm, height_in_inch]",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Products (ProductID, ProductName, SupplierID, CategoryID, Unit, Price)  VALUES (57, 'Ravioli Angelo', 26, 5, '24 - 250 g pkgs.', 19.5);\nDatabase State:\n- Table: Shippers, Columns: [ShipperID, ShipperName, Phone]\n- Table: Suppliers, Columns: [SupplierID, SupplierName, ContactName, Address, City, PostalCode, Country, Phone]\n- Table: Employees, Columns: [EmployeeID, LastName, FirstName, BirthDate, Photo, Notes]\n- Table: Products, Columns: [ProductID, ProductName, SupplierID, CategoryID, Unit, Price]\n- Table: Categories, Columns: [CategoryID, CategoryName, Description]\n- Table: Orders, Columns: [OrderID, CustomerID, EmployeeID, OrderDate, ShipperID]\n- Table: Customers, Columns: [CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `taxon_rank`, `taxon_name`, `parent_taxon`, `freebase_id`, `instance_of`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`, `irmng_id`)  VALUES ('Rhodobacter', 'genus of bacteria', 'genus', 'Rhodobacter', 'Rhodobacteraceae', '/m/02x7_w8', 'taxon', '1060.0', '3221142.0', '957960.0', 'Gram-negative bacteria', 'http://www.bacterio.net/rhodobacter.html', '2777850835.0', '1355188.0');\nDatabase State:\n- Table: `transaldolase_type_3b_putative`, Columns: [`label`, `description`, `found_in_taxon`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Perpetrator_ID`, `People_ID`, `Date`, `Year`, `Location`, `Country`, `Killed`, `Injured`)  VALUES (3, 4, '05.21 May 21', 1938.0, 'Kaio', 'Japan', 30, 3);\nDatabase State:\n- Table: `people`, Columns: [`People_ID`, `Name`, `Height`, `Weight`, `Home Town`]",
        "Response": "Table: `perpetrator`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1014, 'Norris', 'Charles', 18, 'M', 600, 8741, 'DAL');\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Web_client_accelerator` (`id`, `name`, `Operating_system`, `Client`, `Connection`)  VALUES (7, 'Heigh Speed', 'Windows', 'All', 'Any');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Web_client_accelerator`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Campus`)  VALUES (7, 1994, 21839, 15414);\nDatabase State:\n- Table: `Campuses`, Columns: [`Id`]\n- Table: `degrees`, Columns: [`Year`, `Campus`]",
        "Response": "Table: `enrollments`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `repair` (`repair_ID`, `name`, `Launch_Date`, `Notes`)  VALUES (3, 'Discoverer 3', '03 Jun 2009', 'repair failed. Failed to achieve orbit');\nDatabase State:\n- Table: `repair_assignment`, Columns: [`technician_id`, `repair_ID`, `Machine_ID`]\n- Table: `repair`, Columns: [`repair_ID`, `name`, `Launch_Date`, `Notes`]\n- Table: `machine`, Columns: [`Machine_ID`, `Making_Year`, `Class`, `Team`, `Machine_series`, `value_points`, `quality_rank`]\n- Table: `technician`, Columns: [`technician_id`, `Name`, `Team`, `Starting_Year`, `Age`]",
        "Response": "Table: `repair`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (zip_code, bad_alias)  VALUES (39479, 'Eminence');\nDatabase State:\n- Table: avoid, Columns: [zip_code, bad_alias]\n- Table: area_code, Columns: [zip_code, area_code]",
        "Response": "Table: avoid"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth)  VALUES (2237, 'Julie White', '1961-06-04', 'San Diego', 'USA', 68, 'Julie White was born on June 4, 1961 in San Diego, California, USA as Julie Karen White. She is an actress, known for Transformers: Revenge of the Fallen (2009), Transformers (2007) and Transformers: Dark of the Moon (2011). She was previously married to Christopher Conner and Carl Pandel.', NULL, NULL, '$3,000,000.00');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO city (ID)  VALUES (865, 'San Jose', 'PHL', 'Central Luzon', 108254);\nDatabase State:\n- Table: city, Columns: [ID]\n- Table: countrylanguage, Columns: [CountryCode]",
        "Response": "Table: city"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `scalarane_sesterterpenoid` (`label`, `description`, `instance_of`, `isomeric_smiles`, `inchikey`, `mass`, `pubchem_cid`, `canonical_smiles`, `inchi`, `chemical_formula`, `found_in_taxon`)  VALUES ('12-alpha-O-Acetylhyrtiolide', 'chemical compound', 'chemical compound', 'CC(=O)O[C@H]1C[C@@H]2[C@@]3(C)CCCC(C)(C)[C@@H]3CC[C@@]2(C)[C@@H]2C[C@@H](O)C3=C([C@H](O)OC3=O)[C@@]12C', 'RGURHVHMFJDSOE-WECKTULJSA-N', 460.2824889999999983, '21578971', 'O=C1OC(O)C2=C1C(O)CC3C2(C)C(OC(=O)C)CC4C5(C)CCCC(C)(C)C5CCC34C', 'InChI=1S/C27H40O6/c1-14(28)32-19-13-17-25(4)10-7-9-24(2,3)16(25)8-11-26(17,5)18-12-15(29)20-21(27(18,19)6)23(31)33-22(20)30/h15-19,23,29,31H,7-13H2,1-6H3/t15-,16+,17-,18+,19+,23-,25+,26-,27-/m1/s1', 'C\u2082\u2087H\u2084\u2080O\u2086', 'Hyrtios erectus');\nDatabase State:\n- Table: `scalarane_sesterterpenoid`, Columns: [`label`, `description`, `instance_of`, `isomeric_smiles`, `inchikey`, `mass`, `pubchem_cid`, `canonical_smiles`, `inchi`, `chemical_formula`, `found_in_taxon`]",
        "Response": "Table: `scalarane_sesterterpenoid`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Business_Attributes` (attribute_id, business_id, attribute_value)  VALUES (38, 367, 'false');\nDatabase State:\n- Table: Days, Columns: [day_id, day_of_week]\n- Table: `Elite`, Columns: [user_id, year_id]",
        "Response": "Table: `Business_Attributes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SeasonStatus (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS)  VALUES (12513, '2006-2007', 'Des Moines Buccaneers', 'USHL', 'Playoffs', 8, 6, 5, 11, 6, 1);\nDatabase State:\n- Table: PlayerInfo, Columns: [ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0]\n- Table: height_info, Columns: [height_id, height_in_cm, height_in_inch]",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id_restaurant, label, food_type, city, review)  VALUES (8011, 'willow street wood fired pizza', 'pizza', 'san jose', 3.399999999999999912);\nDatabase State:\n- Table: geographic, Columns: [city, county, region]\n- Table: location, Columns: [id_restaurant, street_num, street_name, city]\n- Table: generalinfo, Columns: [id_restaurant, label, food_type, city, review]",
        "Response": "Table: generalinfo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name)  VALUES (1, 'Oscar', 'Hosea', '1-925-696-5232', 'amie.okuneva@example.org', '6956 Lia Plaza', 'Maggio');\nDatabase State:\n- Table: Party_Addresses, Columns: [party_id, address_id, date_address_from, address_type_code, date_address_to]\n- Table: Addresses, Columns: [address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country]\n- Table: Party_Services, Columns: [booking_id, customer_id, service_id, service_datetime, booking_made_date]\n- Table: Parties, Columns: [party_id, payment_method_code, party_phone, party_email]\n- Table: Individuals, Columns: [individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name]\n- Table: Services, Columns: [service_id, service_type_code, service_name, service_descriptio]\n- Table: Organization_Contact_Individuals, Columns: [individual_id, organization_id, date_contact_from, date_contact_to]\n- Table: Party_Forms, Columns: [party_id, form_id, date_completion_started, form_status_code, date_fully_completed]\n- Table: Forms, Columns: [form_id, form_type_code, service_id, form_number, form_name, form_description]\n- Table: Organizations, Columns: [organization_id, date_formed, organization_name, uk_vat_number]",
        "Response": "Table: Individuals"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `singer` (`Singer_ID`, `Name`, `Birth_Year`, `Net_Worth_Millions`, `Citizenship`)  VALUES (8, 'Abigail Johnson', 1961.0, 12.69999999999999929, 'United States');\nDatabase State:\n- Table: `song`, Columns: [`Song_ID`, `Title`, `Singer_ID`, `Sales`, `Highest_Position`]",
        "Response": "Table: `singer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (case_number, race, gender, last_name, first_name, full_name)  VALUES ('154621A', 'W', 'M', 'Freeman', 'Eric', 'Freeman, Eric');\nDatabase State:\n- Table: incidents, Columns: [case_number, date, location, subject_statuses, subject_weapon, subjects, subject_count, officers]\n- Table: officers, Columns: [case_number, race, gender, last_name, first_name, full_name]\n- Table: subjects, Columns: [case_number, race, gender, last_name, first_name, full_name]",
        "Response": "Table: officers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `ribosomal_protein_l19_superfamily` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`, `has_parts`)  VALUES ('50S ribosomal protein L19 HMPREF0351_11831', 'microbial protein found in Enterococcus faecium DO', '50S ribosomal protein L19 HMPREF0351_11831', 'I3U367', 'protein biosynthesis', 'structural constituent of ribosome', 'ribosome', 'Enterococcus faecium DO', 'YP_006376437', 'protein', 'Ribosomal protein L19', 'protein', 'Ribosomal protein L19, conserved site');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `ribosomal_protein_l19_superfamily`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('dethiobiotin synthetase RB5694', 'microbial gene found in Rhodopirellula baltica SH 1', 'Rhodopirellula baltica SH 1', '1790199', 'gene', 'RB5694', 'Dethiobiotin synthetase RB5694', 'gene', '2971416', 'reverse strand', '2970631');\nDatabase State:\n- Table: `dethiobiotin_synthase_biod`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `subclass_of`, `cell_component`, `molecular_function`, `biological_process`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Member_ID`, `Member_Name`, `Party_ID`, `In_office`)  VALUES (12, 'Kerry Bartlett', '1', '1996\u20132007');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `member`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `found_in_taxon`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Glutamate synthase large subunit KPHS_47640', 'microbial protein found in Klebsiella pneumoniae subsp. pneumoniae HS11286', 'protein', 'Klebsiella pneumoniae subsp. pneumoniae HS11286', 'glutamate synthase large subunit KPHS_47640', 'A0A0H3GY60', 'glutamate biosynthetic process', 'catalytic activity', 'Glutamate synthase, alpha subunit, C-terminal', 'protein', 'YP_005229064', 'Nucleophile aminohydrolases, N-terminal');\nDatabase State:\n- Table: `glutamate_synthase_central_n_protein_family`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]",
        "Response": "Table: `glutamate_synthase_central_n_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cars (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num)  VALUES (19, 6, 2, 'hexagon', 'short', 'not_double', 'flat', 2, 'circle', 1);\nDatabase State:\n- Table: cars, Columns: [id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num]\n- Table: trains, Columns: [id, direction]",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, category, person, role, credited)  VALUES ('S20-E6', 'Other crew', 'Lisa Walder', 'assistant:  james l. brooks', 'true');\nDatabase State:\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: `Episode`, Columns: [episode_id, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Character_Award, Columns: [award_id, character]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Mesorhizobium ciceri biovar biserrulae WSM1271', 'bacterial strain', 'taxon', 'Mesorhizobium ciceri biovar biserrulae WSM1271', 'Mesorhizobium ciceri', '765698', 'Gram-negative bacteria', 'GCA_000185905.1');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `proline_dehydrogenase_domain_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Predicted gene 7030', 'mammalian protein found in Mus musculus', 'Q0WXH6', 'Gm7030', 'antigen processing and presentation of peptide antigen via MHC class I', 'plasma membrane', 'Immunoglobulin C1-set', 'house mouse', 'NP_001170938', 'protein', 'Immunoglobulin-like fold');\nDatabase State:\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `refseq_rna_id`, `encodes`, `found_in_taxon`, `instance_of`]\n- Table: `mhc_class_i_alpha_chain_alpha1_alpha2_domains_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `mhc_class_i_alpha_chain_alpha1_alpha2_domains_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `sport`, `organizer`, `point_in_time`, `part_of`, `located_in_the_administrative_territorial_entity`, `country`, `edition_number`, `followed_by`, `has_parts`, `google_knowledge_graph_id`)  VALUES ('2000 Family Circle Cup', 'women''s tennis tournament', 'Charleston Open', 'tennis', 'Women''s Tennis Association', '+2000-00-00T00:00:00Z', '2000 WTA Tour', 'Hilton Head Island', 'United States of America', '28', '2001 Family Circle Cup', '2000 Family Circle Cup \u2013 singles', 'nan');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `sport`, `point_in_time`, `instance_of`, `edition_number`, `country`, `follows`, `followed_by`, `has_parts`, `located_in_the_administrative_territorial_entity`, `organizer`, `part_of`]\n- Table: `given_name`, Columns: [`label`, `description`, `language_of_work_or_name`, `instance_of`, `said_to_be_the_same_as`, `native_label`, `writing_system`, `soundex`, `cologne_phonetics`, `caverphone`, `commons_category`]",
        "Response": "Table: `2000_wta_tour`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`)  VALUES ('catecholamine secretion', 'The regulated release of catecholamines by a cell. The catecholamines are a group of physiologically important biogenic amines that possess a catechol (3,4-dihydroxyphenyl) nucleus and are derivatives of 3,4-dihydroxyphenylethylamine.', 'GO:0050432', 'secretion by cell', 'http://purl.obolibrary.org/obo/GO_0050432', 'biological process');\nDatabase State:\n- Table: `negative_regulation_of_secretion_by_cell`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `regulates_molecular_biology`, `exact_match`, `instance_of`]",
        "Response": "Table: `regulates_molecular_biology`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, `+/-`, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, `Post+/-`, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG)  VALUES ('cunnera01', 1989, 1, 'WIN', 'NHL', 'L', 28, 5, 6, 11, 34, '-7', '2', NULL, '0', '0', '1', '0', '51', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: ScoringSup, Columns: [playerID, year, PPA, SHA]\n- Table: TeamsHalf, Columns: [year, lgID, tmID, half, rank, G, W, L, T, GF, GA]\n- Table: GoaliesSC, Columns: [playerID, year, tmID, lgID, GP, Min, W, L, T, SHO, GA]\n- Table: AwardsMisc, Columns: [name, ID, award, year, lgID, note]\n- Table: ScoringSC, Columns: [playerID, year, tmID, lgID, pos, GP, G, A, Pts, PIM]\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]\n- Table: HOF, Columns: [year, hofID, name, category]\n- Table: Coaches, Columns: [coachID, year, tmID, lgID, stint, notes, g, w, l, t, postg, postw, postl, postt]\n- Table: TeamVsTeam, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]\n- Table: Teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: GoaliesShootout, Columns: [playerID, year, stint, tmID, W, L, SA, GA]\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: SeriesPost, Columns: [year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L, T, GoalsWinner, GoalsLoser, note]\n- Table: CombinedShutouts, Columns: [year, month, date, tmID, oppID, `R/P`, IDgoalie1, IDgoalie2]\n- Table: Goalies, Columns: [playerID, year, stint, tmID, lgID, GP, Min, W, L, `T/OL`, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA]\n- Table: AwardsPlayers, Columns: [playerID, award, year, lgID, note, pos]\n- Table: ScoringShootout, Columns: [playerID, year, stint, tmID, S, G, GDG]\n- Table: Scoring, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, `+/-`, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, `Post+/-`, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]\n- Table: Master, Columns: [playerID, coachID, hofID, firstName, lastName, nameNote, nameGiven, nameNick, height, weight, shootCatch, legendsID, ihdbID, hrefID, firstNHL, lastNHL, firstWHA, lastWHA, pos, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity, deathYear, deathMon, deathDay, deathCountry, deathState, deathCity]\n- Table: abbrev, Columns: [Type, Code, Fullname]",
        "Response": "Table: Scoring"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID)  VALUES ('767-74-7373', 'Martin', 'William', '8/26/06', 'US$23,000.00', 'M', 'Good', 3, 5);\nDatabase State:\n- Table: employee, Columns: [ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('dinitrogenase reductase ADP-ribosylation protein lmo0067', 'microbial gene found in Listeria monocytogenes EGD-e', '986401', 'gene', 'Dinitrogenase reductase ADP-ribosylation protein lmo0067', 'Listeria monocytogenes EGD-e', 'forward strand', '75227.0', '74238.0', 'gene', 'lmo0067');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Hypothetical protein VF_0669', 'microbial protein found in Aliivibrio fischeri ES114', 'Q5E732', 'Vibrio fischeri ES114', 'protein', 'hypothetical protein VF_0669', 'protein', 'YP_204052', 'YhcH/YjgK/YiaL family');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `yhch_yjgk_yial_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, model_year, country)  VALUES (21, 1970, 2);\nDatabase State:\n- Table: country, Columns: [origin, country]",
        "Response": "Table: production"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `refseq_protein_id`, `encoded_by`, `subclass_of`, `has_parts`, `cell_component`, `molecular_function`, `part_of`, `instance_of`)  VALUES ('Ornithine decarboxylase, biosynthetic b2965', 'microbial protein found in Escherichia coli str. K-12 substr. MG1655', 'P21169', 'Escherichia coli str. K-12 substr. MG1655', 'NP_417440', 'ornithine decarboxylase, biosynthetic b2965', 'protein', 'Orn/Lys/Arg decarboxylase, C-terminal', 'nan', 'nan', 'Ornithine/lysine/arginine decarboxylase', 'protein');\nDatabase State:\n- Table: `orn_lys_arg_decarboxylase_n_terminal_domain_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `refseq_protein_id`, `encoded_by`, `subclass_of`, `has_parts`, `cell_component`, `molecular_function`, `part_of`, `instance_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Code, Name, Price, Manufacturer)  VALUES (11, 'DVD drive', 150, 3);\nDatabase State:\n- Table: Manufacturers, Columns: [Code, Name, Headquarter, Founder, Revenue]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO playlist_tracks (playlist_id, track_id)  VALUES (5, 209);\nDatabase State:\n- Table: playlist_tracks, Columns: [playlist_id, track_id]\n- Table: tracks, Columns: [id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]\n- Table: employees, Columns: [id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]\n- Table: playlists, Columns: [id, name]",
        "Response": "Table: playlist_tracks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `point_in_time`, `follows`, `followed_by`, `part_of`)  VALUES ('2166 BC', 'year', 'year BC', '-2166-01-01T00:00:00Z', '2167 BC', '2165 BC', '2160s BCE');\nDatabase State:\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `point_in_time`, `follows`, `followed_by`, `part_of`]\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `point_in_time`, `follows`, `followed_by`, `part_of`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score)  VALUES (67, 16, 2012, 93);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number)  VALUES (9, 'Veterenarian', 'Monte', replace('07073 Brenna Ways Suite 089\\nLowehaven, KY 93275-96','\\n',char(10)), 'South Rockyport', 'SouthCarolina', '80775', 'Kshlerin', 'schneider.kathryne@example.org', '320-508-6023', '962-983-8109x3509');\nDatabase State:\n- Table: Treatment_Types, Columns: [treatment_type_code, treatment_type_description]\n- Table: Charges, Columns: [charge_id, charge_type, charge_amount]\n- Table: Breeds, Columns: [breed_code, breed_name]\n- Table: Professionals, Columns: [professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number]\n- Table: Owners, Columns: [owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number]",
        "Response": "Table: Professionals"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO location (id_restaurant, street_num, street_name, city)  VALUES (8741, 616, 'atlantic ave', 'santa cruz');\nDatabase State:\n- Table: generalinfo, Columns: [id_restaurant, label, food_type, city, review]\n- Table: geographic, Columns: [city, county, region]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Investors (investor_id, Investor_details)  VALUES (19, 'l');\nDatabase State:\n- Table: Transactions_Lots, Columns: [transaction_id, lot_id]\n- Table: Lots, Columns: [lot_id, investor_id, lot_details]\n- Table: Ref_Transaction_Types, Columns: [transaction_type_code, transaction_type_description]\n- Table: Sales, Columns: [sales_transaction_id, sales_details]\n- Table: Transactions, Columns: [transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details]",
        "Response": "Table: Investors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('E3', '2019-02-23', 'Crawley Town', 'Macclesfield', 1, 1, 'D', 2019);\nDatabase State:\n- Table: matchs, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]\n- Table: divisions, Columns: [division, name, country]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update)  VALUES (333, 'FREAKY POCUS', 'A Fast-Paced Documentary of a Pastry Chef And a Crocodile who must Chase a Squirrel in The Gulf of Mexico', '2006', 1, NULL, 7, 2.990000000000000213, 126, 16.98999999999999843, 'R', 'Trailers,Behind the Scenes', '2006-02-15 05:03:42.0');\nDatabase State:\n- Table: `film`, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]\n- Table: `payment`, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: `store`, Columns: [store_id, manager_staff_id, address_id, last_update]\n- Table: `staff`, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]",
        "Response": "Table: `film`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `teachers` (`LastName`)  VALUES ('NIBLER', ' JERLENE', 104);\nDatabase State:\n- Table: `teachers`, Columns: [`LastName`]",
        "Response": "Table: `teachers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `instance_of`, `part_of`, `unicode_character`, `follows`, `followed_by`, `image`, `google_knowledge_graph_id`)  VALUES ('\u0531', 'letter in the Armenian alphabet', '\u0531', 'Armenian letter', 'Armenian alphabet', '\u0531', 'nan', '\u0532', '\u0531 \u0563\u056c\u056d\u0561\u0563\u056b\u0580 V-XX \u0564\u0561\u0580\u0565\u0580 01.svg', '/g/122yyj4b');\nDatabase State:\n- Table: `armenian_letter`, Columns: [`label`, `description`, `commons_category`, `instance_of`, `part_of`, `unicode_character`, `follows`, `followed_by`, `image`, `google_knowledge_graph_id`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `tags` (`index`, id, tag)  VALUES (151006, 70913, 'lo.fi');\nDatabase State:\n- Table: `torrents`, Columns: [groupName, totalSnatched, artist, groupYear, releaseType, groupId, id]",
        "Response": "Table: `tags`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO observations (DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, VALUE, UNITS)  VALUES ('2015-04-21', 'c69469aa-ce7f-41c2-b7d1-d0225785b645', '97196044-d01e-47e0-84d1-9f4f657f849d', '8302-2', 'Body Height', 64.81000000000000227, 'cm');\nDatabase State:\n- Table: conditions, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION]\n- Table: all_prevalences, Columns: [ITEM, `POPULATION TYPE`, OCCURRENCES, `POPULATION COUNT`, `PREVALENCE RATE`, `PREVALENCE PERCENTAGE`]\n- Table: medications, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]\n- Table: encounters, Columns: [ID, DATE, PATIENT, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]",
        "Response": "Table: observations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Club (ClubID, ClubName, ClubDesc, ClubLocation)  VALUES (2, 'Hopkins Student Enterprises', 'Venture capital fund for student business.', 'AKW');\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Club, Columns: [ClubID, ClubName, ClubDesc, ClubLocation]\n- Table: Member_of_club, Columns: [StuID, ClubID, Position]",
        "Response": "Table: Club"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`name`, bool)  VALUES ('student93', 'pos');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: no_payment_due"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1008, 'Nelson', 'Jandy', 20, 'F', 600, 9172, 'BAL');\nDatabase State:\n- Table: Voting_record, Columns: [StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (university_id, ranking_criteria_id, year, score)  VALUES (875, 15, 2015, 567);\nDatabase State:\n- Table: university, Columns: [id, country_id, university_name]\n- Table: country, Columns: [id, country_name]\n- Table: ranking_criteria, Columns: [id, ranking_system_id, criteria_name]\n- Table: university_ranking_year, Columns: [university_id, ranking_criteria_id, year, score]\n- Table: university_year, Columns: [university_id, year, num_students, student_staff_ratio, pct_international_students, pct_female_students]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `carbohydrate_kinase_thermoresistant_glucokinase` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('Carbohydrate kinase, thermoresistant glucokinase Psyr_3337', 'microbial protein found in Pseudomonas syringae pv. syringae B728a', 'carbohydrate kinase, thermoresistant glucokinase Psyr_3337', 'Q4ZR53', 'phosphorylation', 'transferase activity', 'Pseudomonas syringae pv. syringae B728a', 'YP_236407', 'protein', 'P-loop containing nucleoside triphosphate hydrolase', 'protein');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `genbank_assembly_accession_number`, `gram_staining`]\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `carbohydrate_kinase_thermoresistant_glucokinase`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]",
        "Response": "Table: `carbohydrate_kinase_thermoresistant_glucokinase`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO pilot (Pilot_Id, Name, Age)  VALUES (6, 'Elisha Hickle V', 37);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: pilot"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO callcenterlogs (`Date received`, `Complaint ID`, `rand client`, phonefinal, `vru+line`, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time)  VALUES ('2015-03-19', NULL, NULL, '770-367-9290', 'AA0115', 30122, 0, 'PS', 'HANG', 'NO_SERVER', '16:21:02', '16:21:03', '00:00:01');\nDatabase State:\n- Table: client, Columns: [client_id, sex, day, month, year, age, social, first, middle, last, phone, email, address_1, address_2, city, state, zipcode, district_id]\n- Table: district, Columns: [district_id, city, state_abbrev, division]\n- Table: events, Columns: [`Date received`, Product, `Sub-product`, Issue, `Sub-issue`, `Consumer complaint narrative`, Tags, `Consumer consent provided?`, `Submitted via`, `Date sent to company`, `Company response to consumer`, `Timely response?`, `Consumer disputed?`, `Complaint ID`, Client_ID]",
        "Response": "Table: callcenterlogs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `taxon` (`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`)  VALUES ('Listeria', 'genus of bacteria', 'Listeriaceae', 'Listeria', 'taxon', 'genus', '957485.0', '/m/03d7w6', '1637.0', '3225442.0', '1301624.0', '5FHY', 'gram-positive bacteria', 'http://www.bacterio.net/listeria.html', '2778682378.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (recipe_id, title, subtitle, servings, yield_unit, prep_min, cook_min, stnd_min, source, intro, directions)  VALUES (669, 'Mixed Bean Salad', NULL, 8, NULL, 15, 3, 720, 'California Dry Bean Advisory Board', NULL, replace('Drain all beans to a large bowl. \\nThoroughly mix dry ingredients in a saucepan. Add 1/2 cup cold water; stir until smooth. Gradually stir in 1-1/2 cups boiling water. Boil, stirring 2 to 3 minutes until thick and clear. Blend in vinegar. (If sweet pickle vinegar runs short, add wine vinegar to make right measure.) \\n\\nAdd the dressing, hot or cold, to the beans and mix gently. Taste; add salt if needed. Cover and chill overnight or longer. At serving time drain off excess dressing, empty beans into deep platter, and garnish with lettuce, sliced tomatoes, and onion rings.','\\n',char(10)));\nDatabase State:\n- Table: Quantity, Columns: [quantity_id, recipe_id, ingredient_id, max_qty, min_qty, unit, preparation, optional]\n- Table: Ingredient, Columns: [ingredient_id, category, name, plural]\n- Table: Nutrition, Columns: [recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories]\n- Table: Recipe, Columns: [recipe_id, title, subtitle, servings, yield_unit, prep_min, cook_min, stnd_min, source, intro, directions]",
        "Response": "Table: Recipe"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0)  VALUES (17971, 'Dmitri Bykov', '1977-05-05', 1977, 5, 5, 'Izhevsk, RUS', 'Russia', 73, 207, 'D', 'L', 2001, 8, 258, 'Detroit Red Wings', 176, 71, 1303, 'yes');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: PlayerInfo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violation (inspection_id, point_id, fine, inspector_comment)  VALUES (1395797, 33, 100, 'FAN COVERS,SHELVINGS,HOOD/FILTERS INSIDE THE WALK-IN-COOLER REQUIRE A DETAIL CLEANING.  ');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `furniture` (`Furniture_ID`, `Name`, `Num_of_Component`, `Market_Rate`)  VALUES (3, 'Bookcase', 6, 1.0);\nDatabase State:\n- Table: `furniture`, Columns: [`Furniture_ID`, `Name`, `Num_of_Component`, `Market_Rate`]\n- Table: `manufacturer`, Columns: [`Manufacturer_ID`, `Open_Year`, `Name`, `Num_of_Factories`, `Num_of_Shops`]",
        "Response": "Table: `furniture`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `ncbi_locus_tag`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('hypothetical protein ECUMN_4448', 'microbial gene found in Escherichia coli UMN026', 'ECUMN_4448', 'gene', 'Escherichia coli UMN026', '7158098', 'Hypothetical protein ECUMN_4448', 'gene', '4597591', 'reverse strand', '4596992');\nDatabase State:\n- Table: `protein_of_unknown_function_duf1454`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `ncbi_locus_tag`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `genbank_assembly_accession_number`, `gram_staining`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `follows` (`label`, `description`, `instance_of`, `part_of`, `event_distance`, `competition_class`, `point_in_time`, `sport`, `followed_by`, `location`, `freebase_id`, `follows`)  VALUES ('rowing at the 2006 Asian Games \u2013 lightweight men''s double sculls', 'rowing event', 'rowing event', 'rowing at the 2006 Asian Games', 1000.0, 'lightweight men''s double scull', '+2006-00-00T00:00:00Z', 'rowing', 'rowing at the 2010 Asian Games \u2013 lightweight men''s double sculls', 'West Bay Lagoon', '/m/0w1dk5l', 'rowing at the 2002 Asian Games \u2013 lightweight men''s double sculls');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `part_of`, `event_distance`, `competition_class`, `point_in_time`, `sport`, `follows`, `location`, `freebase_id`, `followed_by`]\n- Table: `competition_class`, Columns: [`label`, `description`, `instance_of`, `competition_class`, `short_name`, `sport`, `catalog_code`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `part_of`, `event_distance`, `competition_class`, `point_in_time`, `sport`, `followed_by`, `location`, `freebase_id`, `follows`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, person_id, category, role, credited)  VALUES ('tt0629391', 'nm0283251', 'Produced by', 'associate producer', 'true');\nDatabase State:\n- Table: Award, Columns: [award_id, organization, year, award_category, award, series, episode_id, person_id, role, result]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `topics_main_category`, `country`, `instance_of`, `point_in_time`, `topics_main_template`, `followed_by`, `follows`)  VALUES ('2016 United Kingdom local elections', 'elections', 'Category:United Kingdom local elections, 2016', 'United Kingdom', 'United Kingdom local elections', '+2016-05-05T00:00:00Z', 'Template:2016 United Kingdom local elections', '2017 United Kingdom local elections', '2015 United Kingdom local elections');\nDatabase State:\n- Table: `part`, Columns: [`label`, `description`, `topics_main_category`, `country`, `instance_of`, `point_in_time`, `topics_main_template`, `followed_by`, `follows`]\n- Table: `followed_by`, Columns: [`label`, `description`, `topics_main_category`, `country`, `instance_of`, `point_in_time`, `followed_by`, `follows`, `topics_main_template`]\n- Table: `follows`, Columns: [`label`, `description`, `topics_main_category`, `country`, `instance_of`, `point_in_time`, `followed_by`, `follows`, `topics_main_template`]\n- Table: `north_tyneside_metropolitan_borough_council_election`, Columns: [`label`, `description`, `point_in_time`, `country`, `instance_of`, `part_of`]",
        "Response": "Table: `part`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `film` (`Film_ID`, `Rank_in_series`, `Number_in_season`, `Title`, `Directed_by`, `Original_air_date`, `Production_code`)  VALUES (4, 29, 4, 'The Case of the Bermuda Triangle', 'Jesus Salvador Trevi\u00f1o', 'October 12\u201316, 1992', '50251\u201350255');\nDatabase State:\n- Table: `schedule`, Columns: [`Cinema_ID`, `Film_ID`, `Date`, `Show_times_per_day`, `Price`]\n- Table: `cinema`, Columns: [`Cinema_ID`, `Name`, `Openning_year`, `Capacity`, `Location`]",
        "Response": "Table: `film`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO tweets (id, uid, text, createdate)  VALUES (6, 6, 'Let\u2019s celebrate women, fight for equality and support each other,  not just today, but everyday!', '2018-03-12 02:30:30');\nDatabase State:\n- Table: follows, Columns: [f1, f2]",
        "Response": "Table: tweets"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `follows`, `followed_by`, `competition_class`, `has_parts`)  VALUES ('2003 Japanese Junior Badminton Championships', 'badminton championships', 'Japanese Junior Badminton Championships', 'WikiProject Badminton/tournament focus list', 'badminton', 'Japan', '+2003-00-00T00:00:00Z', '2002 Japanese Junior Badminton Championships', '2004 Japanese Junior Badminton Championships', 'national championship', '2003 Japanese Junior Badminton Championships \u2013 Men''s singles');\nDatabase State:\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `followed_by`, `competition_class`, `has_parts`, `follows`]\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `on_focus_list_of_wikimedia_project`, `sport`, `country`, `point_in_time`, `follows`, `followed_by`, `competition_class`, `has_parts`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO alias (zip_code, alias)  VALUES (85706, 'Tucson');\nDatabase State:\n- Table: zip_data, Columns: [zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, `1st_quarter_payroll`, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA]",
        "Response": "Table: alias"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11344170, 'JB302185', '6/11/2018 3:37', '036XX W LE MOYNE ST', '1320', 'VEHICLE NON-COMMERCIAL', 'FALSE', 'FALSE', 2535, 25, 26, 23, '14', '41.90817983', '-87.71717719');\nDatabase State:\n- Table: District, Columns: [district_no, district_name, address, zip_code, commander, email, phone, fax, tty, twitter]\n- Table: IUCR, Columns: [iucr_no, primary_description, secondary_description, index_code]\n- Table: Neighborhood, Columns: [neighborhood_name, community_area_no]\n- Table: Ward, Columns: [ward_no, alderman_first_name, alderman_last_name, alderman_name_suffix, ward_office_address, ward_office_zip, ward_email, ward_office_phone, ward_office_fax, city_hall_office_room, city_hall_office_phone, city_hall_office_fax, Population]\n- Table: Crime, Columns: [report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude]\n- Table: FBI_Code, Columns: [fbi_code_no, title, description, crime_against]\n- Table: Community_Area, Columns: [community_area_no, community_area_name, side, population]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score)  VALUES (1029, 1, 2013, 66);\nDatabase State:\n- Table: university_year, Columns: [university_id, year, num_students, student_staff_ratio, pct_international_students, pct_female_students]\n- Table: university, Columns: [id, country_id, university_name]\n- Table: university_ranking_year, Columns: [university_id, ranking_criteria_id, year, score]\n- Table: ranking_criteria, Columns: [id, ranking_system_id, criteria_name]\n- Table: ranking_system, Columns: [id, system_name]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO procedures (DATE, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION)  VALUES ('2012-10-18', 'e05547ee-7969-478c-9970-fafbda8a63c2', 'b8a27cb3-9633-467e-b26d-01f8ebe5cbc2', 274031008, 'Rectal polypectomy', 68496003, 'Polyp of colon');\nDatabase State:\n- Table: medications, Columns: [START, STOP, PATIENT, ENCOUNTER, CODE, DESCRIPTION, REASONCODE, REASONDESCRIPTION]",
        "Response": "Table: procedures"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `place_of_birth` (`label`, `description`, `topics_main_category`, `instance_of`, `country`, `commons_category`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `curlie_id`, `musicbrainz_area_id`, `gnd_id`, `viaf_id`, `library_of_congress_authority_id`, `freebase_id`, `locator_map_image`, `geonames_id`, `category_of_associated_people`, `capital_of`, `page_banner`, `elevation_above_sea_level`, `gnis_id`, `official_website`, `encyclop\u00e6dia_britannica_online_id`, `population`, `fips_55_3_locations_in_the_us`, `inception`, `local_dialing_code`, `quora_topic_id`, `area`, `us_national_archives_identifier`, `gran_enciclop\u00e8dia_catalana_id`, `archinform_location_id`, `whos_on_first_id`, `located_in_time_zone`, `worldcat_identities_id`, `factgrid_item_id`, `image`, `water_as_percent_of_area`, `national_library_of_israel_j9u_id`, `per_capita_income`, `number_of_households`, `postal_code`)  VALUES ('Wilmington', 'city in and county seat of New Castle County, Delaware, United States', 'Category:Wilmington, Delaware', 'city in the United States', 'United States of America', 'Wilmington, Delaware', 'New Castle County', '39.748333333333', 'Regional/North_America/United_States/Delaware/Localities/W/Wilmington/', '791d0c22-5a31-410d-af12-5fd2553bb3a7', '4130611-9', '141376727', 'n78081234', '/m/0rgxp', 'New Castle County Delaware incorporated and unincorporated areas Wilmington highlighted.svg', '4145381.0', 'Category:People from Wilmington, Delaware', 'New Castle County', 'Wilmington (Delaware) banner buildings.jpg', 28.0, '214862.0', 'http://www.ci.wilmington.de.us/', 'place/Wilmington-Delaware', 70898.0, '10-77580', '+1638-00-00T00:00:00Z', '302.0', 'Wilmington-DE', 43.88125000000000142, '10045787.0', '72240.0', '9028.0', '85931573.0', 'nan', 'lccn-n78081234', 'Q238027', 'Wilmington Delaware skyline.jpg', 35.65310000000000201, '9.870075502522052e+17', 31170.0, 29708.0, '19801-19810, 19850, 19880, 19884-19887, 19889-19899');\nDatabase State:\n- Table: `jurisdiction`, Columns: [`label`, `description`, `dewey_decimal_classification`, `country`, `shares_border_with`, `capital`, `flag_image`, `named_after`, `iso_3166_2_code`, `commons_category`, `flag`, `coordinate_location`, `openstreetmap_relation_id`, `located_in_the_administrative_territorial_entity`, `official_website`, `page_banner`, `topics_main_category`, `curlie_id`, `musicbrainz_area_id`, `instance_of`, `legislative_body`, `freebase_id`, `gnis_id`, `fips_10_4_countries_and_regions`, `topics_main_wikimedia_portal`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `gnd_id`, `category_for_films_shot_at_this_location`, `category_of_people_buried_here`, `category_of_associated_people`, `office_held_by_head_of_government`, `inception`, `located_in_or_next_to_body_of_water`, `described_by_source`, `locator_map_image`, `viaf_id`, `pronunciation_audio`, `head_of_government`, `area`, `library_of_congress_authority_id`, `population`, `located_in_time_zone`, `bbc_things_id`, `quora_topic_id`, `isni`, `ringgold_id`, `highest_point`, `lowest_point`, `subreddit`, `short_name`, `nickname`, `motto_text`, `contains_the_administrative_territorial_entity`, `yso_id`, `elevation_above_sea_level`, `mesh_descriptor_id`, `us_national_archives_identifier`, `gacs_id`, `history_of_topic`, `encyclop\u00e6dia_britannica_online_id`, `fips_5_2_alpha_code_us_states`, `fips_5_2_numeric_code_us_states`, `geography_of_topic`, `demonym`, `wikimedia_outline`, `water_as_percent_of_area`, `coordinates_of_geographic_center`, `executive_body`, `foundational_text`, `highest_judicial_authority`, `coordinates_of_northernmost_point`, `getty_thesaurus_of_geographic_names_id`, `part_of`, `c_span_organization_id`, `native_label`, `archinform_location_id`, `geoshape`, `wolfram_language_entity_code`, `catholic_encyclopedia_id`, `official_symbol`, `comic_vine_id`, `maximum_temperature_record`, `loc_and_marc_vocabularies_id`, `language_used`, `whos_on_first_id`, `gran_enciclop\u00e8dia_catalana_id`, `omegawiki_defined_meaning`, `minimum_temperature_record`, `category_for_maps`, `larousse_id`, `treccanis_dizionario_di_storia_id`, `worldcat_identities_id`, `nkcr_aut_id`, `anthem`, `seal_image`, `has_seal_badge_or_sigil`, `kbpedia_id`, `rkd_thesaurus_id`, `hasc`, `interlingual_index_id`, `the_top_tens_id`, `economy_of_topic`, `open_civic_data_division_id`, `tripadvisor_id`, `google_maps_customer_id`, `google_news_topics_id`, `category_for_the_view_of_the_item`, `github_topic`, `wordnet_31_synset_id`, `demographics_of_topic`, `ballotpedia_id`, `inaturalist_place_id`, `archives_at`, `marriageable_age`, `compulsory_education_maximum_age`, `openstreetmap_zoom_level`, `topics_main_template`, `different_from`, `uk_parliament_thesaurus_id`, `online_pwn_encyclopedia_id`, `store_norske_leksikon_id`, `twitter_topic_id`, `wikisimpsons_id`, `related_category`, `den_store_danske_id`, `per_capita_income`, `mean_age`, `number_of_households`, `hashtag`, `national_library_of_israel_j9u_id`, `national_library_of_israel_id_old`, `idref_id`, `french_vikidia_id`, `english_vikidia_id`, `italian_vikidia_id`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `topics_main_category`, `instance_of`, `country`, `commons_category`, `located_in_the_administrative_territorial_entity`, `head_of_government`, `coordinate_location`, `curlie_id`, `musicbrainz_area_id`, `gnd_id`, `viaf_id`, `library_of_congress_authority_id`, `freebase_id`, `locator_map_image`, `geonames_id`, `category_for_people_who_died_here`, `category_of_associated_people`, `capital_of`, `page_banner`, `elevation_above_sea_level`, `gnis_id`, `official_website`, `facebook_places_id`, `encyclop\u00e6dia_britannica_online_id`, `population`, `fips_55_3_locations_in_the_us`, `inception`, `local_dialing_code`, `quora_topic_id`, `area`, `us_national_archives_identifier`, `gran_enciclop\u00e8dia_catalana_id`, `flag_image`, `archinform_location_id`, `whos_on_first_id`, `located_in_time_zone`, `worldcat_identities_id`, `interlingual_index_id`, `wordnet_31_synset_id`, `tripadvisor_id`, `google_maps_customer_id`, `ballotpedia_id`, `image`, `subreddit`, `water_as_percent_of_area`, `online_pwn_encyclopedia_id`, `store_norske_leksikon_id`, `national_library_of_israel_j9u_id`, `wikisimpsons_id`, `per_capita_income`, `number_of_households`, `hashtag`]\n- Table: `place_of_death`, Columns: [`label`, `description`, `instance_of`, `category_combines_topics`, `category_contains`, `commons_category`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `topics_main_category`, `instance_of`, `country`, `commons_category`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `curlie_id`, `musicbrainz_area_id`, `gnd_id`, `viaf_id`, `library_of_congress_authority_id`, `freebase_id`, `locator_map_image`, `geonames_id`, `category_of_associated_people`, `capital_of`, `page_banner`, `elevation_above_sea_level`, `gnis_id`, `official_website`, `encyclop\u00e6dia_britannica_online_id`, `population`, `fips_55_3_locations_in_the_us`, `inception`, `local_dialing_code`, `quora_topic_id`, `area`, `us_national_archives_identifier`, `gran_enciclop\u00e8dia_catalana_id`, `archinform_location_id`, `whos_on_first_id`, `located_in_time_zone`, `worldcat_identities_id`, `factgrid_item_id`, `image`, `water_as_percent_of_area`, `national_library_of_israel_j9u_id`, `per_capita_income`, `number_of_households`, `postal_code`]\n- Table: `headquarters`, Columns: [`label`, `description`, `commons_category`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `freebase_id`, `instance_of`, `image`]\n- Table: `administrative_centre`, Columns: [`label`, `description`, `country`, `shares_border_with`, `capital`, `commons_category`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `official_website`, `viaf_id`, `topics_main_category`, `instance_of`, `freebase_id`, `gnis_id`, `category_for_people_born_here`, `geonames_id`, `category_of_associated_people`, `inception`, `locator_map_image`, `openstreetmap_relation_id`, `population`, `area`, `us_national_archives_identifier`, `contains_the_administrative_territorial_entity`, `water_as_percent_of_area`, `getty_thesaurus_of_geographic_names_id`, `named_after`, `native_label`, `archinform_location_id`, `wolfram_language_entity_code`, `whos_on_first_id`, `category_for_maps`, `worldcat_identities_id`, `hasc`, `inaturalist_place_id`, `per_capita_income`, `number_of_households`, `image`]\n- Table: `political_border`, Columns: [`label`, `description`, `capital`, `country`, `shares_border_with`, `named_after`, `commons_category`, `locator_map_image`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `official_website`, `topics_main_category`, `curlie_id`, `musicbrainz_area_id`, `instance_of`, `freebase_id`, `gnis_id`, `library_of_congress_authority_id`, `viaf_id`, `inception`, `geonames_id`, `category_of_associated_people`, `area`, `openstreetmap_relation_id`, `population`, `us_national_archives_identifier`, `contains_the_administrative_territorial_entity`, `water_as_percent_of_area`, `getty_thesaurus_of_geographic_names_id`, `image`, `native_label`, `archinform_location_id`, `wolfram_language_entity_code`, `whos_on_first_id`, `category_for_maps`, `worldcat_identities_id`, `hasc`, `inaturalist_place_id`, `national_library_of_israel_j9u_id`, `per_capita_income`, `number_of_households`]\n- Table: `head_of_government`, Columns: [`label`, `description`, `member_of_political_party`, `educated_at`, `instance_of`, `date_of_birth`, `sex_or_gender`, `country_of_citizenship`, `given_name`, `occupation`, `position_held`, `place_of_birth`, `family_name`]\n- Table: `legislature_of_a_us_state`, Columns: [`label`, `description`, `instance_of`, `topics_main_category`, `viaf_id`, `freebase_id`, `has_parts`, `country`, `applies_to_jurisdiction`, `official_website`, `described_by_source`, `snac_ark_id`, `headquarters_location`]",
        "Response": "Table: `place_of_birth`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO location (LocationID, Country, State, StateCode, City)  VALUES (1176, 'Germany', 'North Rhine-Westphalia', 'DE', 'Dlmen');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `flag_image`, `instance_of`, `head_of_government`, `twinned_administrative_body`, `commons_category`, `country`, `located_in_time_zone`, `locator_map_image`, `local_dialing_code`, `coordinate_location`, `postal_code`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `page_banner`, `official_website`, `musicbrainz_area_id`, `freebase_id`, `commons_gallery`, `population`, `geonames_id`, `gnd_id`, `category_for_people_born_here`, `category_for_people_who_died_here`, `category_of_associated_people`, `elevation_above_sea_level`, `viaf_id`, `facebook_places_id`, `area`, `gran_enciclop\u00e8dia_catalana_id`, `quora_topic_id`, `inception`, `openstreetmap_relation_id`, `us_national_archives_identifier`, `office_held_by_head_of_government`, `biblioth\u00e8que_nationale_de_france_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `curlie_id`, `library_of_congress_authority_id`, `whos_on_first_id`, `worldcat_identities_id`, `nkcr_aut_id`, `interlingual_index_id`, `wordnet_31_synset_id`, `factgrid_item_id`, `tripadvisor_id`, `number_of_households`, `google_maps_customer_id`, `national_library_of_israel_j9u_id`, `getty_thesaurus_of_geographic_names_id`, `subreddit`, `image`, `store_norske_leksikon_id`, `wikisimpsons_id`, `den_store_danske_id`, `online_pwn_encyclopedia_id`, `ballotpedia_id`, `gnis_id`, `fips_55_3_locations_in_the_us`, `capital_of`, `water_as_percent_of_area`, `located_in_the_statistical_territorial_entity`, `per_capita_income`, `native_label`)  VALUES ('Miami Beach', 'city in Miami-Dade County, Florida, United States', 'nan', 'city in the United States', 'Dan Gelber', 'Basel', 'Miami Beach, Florida', 'United States of America', 'Eastern Time Zone', 'Miami-Dade County Florida Incorporated and Unincorporated areas Miami Beach Highlighted.svg', '305.0', '25.81388888888889', '33109', 'Miami-Dade County', 'Category:Miami Beach, Florida', 'Miami-Beach-banner.jpg', 'http://www.miamibeachfl.gov', '26b70c12-9676-41b4-a7e7-bc3d4dd80f65', '/m/0rnmy', 'nan', 82890.0, '4164143', '4100928-9', 'Category:Births in Miami Beach, Florida', 'Category:Deaths in Miami Beach', 'Category:People from Miami Beach, Florida', 1.0, '131986190', 'nan', 39.41477700000000083, '431381.0', 'Miami-Beach-FL', '+1915-03-26T00:00:00Z', 'nan', '10045946', 'Mayor of Miami Beach, Florida', '12334959p', '8042', 'place/Miami-Beach', 'Regional/North_America/United_States/Florida/Localities/M/Miami_Beach/', 'n78095370', '85933671', 'lccn-n78095370', 'ge257214', 'i84302', '09096443-n', 'Q238061', 'nan', 43237.0, '', '987007552543605171', '7014045.0', 'nan', 'Miamimetroarea.jpg', 'Miami_Beach', '40002.0', 'nan', '3940352.0', 'nan', '286750.0', '12-45025', 'nan', 49.74139999999999873, 'nan', 54942.0, 'nan');\nDatabase State:\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `point_in_time`, `edition_number`, `location`, `followed_by`, `follows`, `winner`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `shares_border_with`, `capital`, `commons_category`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `openstreetmap_relation_id`, `topics_main_category`, `named_after`, `instance_of`, `freebase_id`, `category_for_people_born_here`, `geonames_id`, `category_of_associated_people`, `population`, `locator_map_image`, `area`, `official_website`, `library_of_congress_authority_id`, `inception`, `wolfram_language_entity_code`, `archinform_location_id`, `image`, `viaf_id`, `whos_on_first_id`, `category_for_maps`, `native_label`, `worldcat_identities_id`, `hasc`, `inaturalist_place_id`, `fips_6_4`, `gnis_id`, `getty_thesaurus_of_geographic_names_id`, `water_as_percent_of_area`, `number_of_households`, `per_capita_income`, `national_library_of_israel_j9u_id`]\n- Table: `winner`, Columns: [`label`, `description`, `instance_of`, `affiliation`, `described_at_url`, `victory`, `genre`]",
        "Response": "Table: `physical_location`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `music_festival` (`ID`, `Music_Festival`, `Date_of_ceremony`, `Category`, `Volume`, `Result`)  VALUES (1, '34th England Academy Prize', '18 February 2011', 'Best Song', 1, 'Nominated');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `music_festival`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `course` (`Course_ID`, `Staring_Date`, `Course`)  VALUES (4, '9 May', 'History');\nDatabase State:\n- Table: `course`, Columns: [`Course_ID`, `Staring_Date`, `Course`]",
        "Response": "Table: `course`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Player_ID`, `Player`, `Team`, `Age`, `Position`, `School_ID`)  VALUES (20, 'Josh Fields', 'Seattle Mariners', 15, 'Right-handed pitcher', 4);\nDatabase State:\n- Table: `school_details`, Columns: [`School_ID`, `Nickname`, `Colors`, `League`, `Class`, `Division`]\n- Table: `school`, Columns: [`School_ID`, `School`, `Location`, `Enrollment`, `Founded`, `Denomination`, `Boys_or_Girls`, `Day_or_Boarding`, `Year_Entered_Competition`, `School_Colors`]\n- Table: `school_performance`, Columns: [`School_Id`, `School_Year`, `Class_A`, `Class_AA`]\n- Table: `player`, Columns: [`Player_ID`, `Player`, `Team`, `Age`, `Position`, `School_ID`]",
        "Response": "Table: `player`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1004, 'Kumar', 'Dinesh', 20, 'M', 600, 8423, 'CHI');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `start_time`, `country`, `number_of_cases`, `number_of_deaths`, `location`, `part_of`, `coordinate_location`, `organized_response_related_to_outbreak`)  VALUES ('COVID-19 pandemic in Vietnam', 'viral outbreak in Vietnam', 'disease outbreak', '+2020-01-23T00:00:00Z', 'Vietnam', 11526810.0, 43186.0, 'Vietnam', 'COVID-19 pandemic by country and territory', '16.0', '2020 Vietnam COVID-19 declaration of public health emergency');\nDatabase State:\n- Table: `jurisdiction`, Columns: [`label`, `description`, `country`, `capital`, `commons_category`, `shares_border_with`, `coordinate_location`, `contains_the_administrative_territorial_entity`, `topics_main_category`, `curlie_id`, `instance_of`, `freebase_id`, `fips_10_4_countries_and_regions`, `geonames_id`, `gnd_id`, `page_banner`, `category_for_films_shot_at_this_location`, `musicbrainz_area_id`, `locator_map_image`, `official_name`, `commons_gallery`, `encyclop\u00e6dia_britannica_online_id`, `official_website`, `area`, `population`, `category_of_associated_people`, `located_in_time_zone`, `quora_topic_id`, `gacs_id`, `archinform_location_id`, `viaf_id`, `openstreetmap_relation_id`, `native_label`, `language_used`, `geoshape`, `whos_on_first_id`, `described_by_source`, `category_for_maps`, `nkcr_aut_id`, `worldcat_identities_id`, `head_of_government`, `kbpedia_id`, `economy_of_topic`, `inaturalist_place_id`, `store_norske_leksikon_id`, `national_library_of_israel_j9u_id`, `den_store_danske_id`, `online_pwn_encyclopedia_id`, `great_russian_encyclopedia_online_id`, `getty_thesaurus_of_geographic_names_id`, `wikimedia_outline`, `babelnet_id`, `geography_of_topic`, `office_held_by_head_of_government`, `coat_of_arms_image`, `continent`, `inception`, `legislative_body`, `demonym`, `category_for_people_who_died_here`, `yso_id`, `official_language`, `library_of_congress_authority_id`, `flag_image`, `gran_enciclop\u00e8dia_catalana_id`, `french_vikidia_id`, `interlingual_index_id`, `wordnet_31_synset_id`, `demographics_of_topic`]\n- Table: `countermeasure`, Columns: [`label`, `description`, `start_time`, `has_cause`, `instance_of`, `applies_to_jurisdiction`, `announcement_date`]\n- Table: `head_of_state`, Columns: [`label`, `description`, `country_of_citizenship`, `position_held`, `place_of_birth`, `educated_at`, `member_of_political_party`, `image`, `occupation`, `viaf_id`, `date_of_birth`, `commons_category`, `instance_of`, `name_in_native_language`, `languages_spoken_written_or_signed`, `sex_or_gender`, `given_name`, `opensanctions_id`]",
        "Response": "Table: `cause`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `dark_type_pok\u00e9mon` (`label`, `description`, `instance_of`, `from_narrative_universe`, `part_of`, `pok\u00e9mon_index`, `media_franchise`, `fandom_article_id`, `present_in_work`, `subclass_of`)  VALUES ('Mega Absol', 'Mega evolution of Absol', 'dark-type Pok\u00e9mon', 'nan', 'nan', 'nan', 'nan', 'pokemon:Mega_Absol', 'nan', 'nan');\nDatabase State:\n- Table: `part`, Columns: [`label`, `description`, `instance_of`, `has_parts`, `is_a_list_of`]",
        "Response": "Table: `dark_type_pok\u00e9mon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `flight` (`id`, `Vehicle_Flight_number`, `Date`, `Pilot`, `Velocity`, `Altitude`, `airport_id`, `company_id`)  VALUES (11, 'M2-F1 #70', 'October 8, 1965', 'Thompson', 240.0, 3650.0, 4, 5);\nDatabase State:\n- Table: `flight`, Columns: [`id`, `Vehicle_Flight_number`, `Date`, `Pilot`, `Velocity`, `Altitude`, `airport_id`, `company_id`]\n- Table: `airport`, Columns: [`id`, `City`, `Country`, `IATA`, `ICAO`, `name`]\n- Table: `operate_company`, Columns: [`id`, `name`, `Type`, `Principal_activities`, `Incorporated_in`, `Group_Equity_Shareholding`]",
        "Response": "Table: `flight`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `executive_car` (`label`, `description`, `commons_category`, `manufacturer`, `image`, `instance_of`, `brand`, `subclass_of`)  VALUES ('Audi S6 plus Quattro', 'nan', 'nan', 'Audi', 'nan', 'automobile model', 'Audi', 'executive car');\nDatabase State:\n- Table: `place_of_birth`, Columns: [`label`, `description`, `commons_category`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `freebase_id`, `instance_of`, `country`, `geonames_id`, `viaf_id`, `image`, `located_in_time_zone`, `topics_main_category`, `official_website`, `area`, `locator_map_image`, `population`, `whos_on_first_id`]\n- Table: `brand`, Columns: [`label`, `description`, `commons_category`, `instance_of`, `topics_main_category`, `inception`, `official_website`, `logo_image`, `facebook_id`, `twitter_username`, `image`, `owned_by`, `product_or_material_produced`, `industry`, `country`, `headquarters_location`, `freebase_id`]",
        "Response": "Table: `executive_car`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `train` (`Train_ID`, `Name`, `Time`, `Service`)  VALUES (2, 'Guruvayur Express', '22:10', 'Daily');\nDatabase State:\n- Table: `train_station`, Columns: [`Train_ID`, `Station_ID`]\n- Table: `train`, Columns: [`Train_ID`, `Name`, `Time`, `Service`]\n- Table: `station`, Columns: [`Station_ID`, `Name`, `Annual_entry_exit`, `Annual_interchanges`, `Total_Passengers`, `Location`, `Main_Services`, `Number_of_Platforms`]",
        "Response": "Table: `train`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `instance_of`, `ehak_id`)  VALUES ('Kuressaare City', 'former municipality of Estonia', 'Saare County', 'Estonia', 'former municipality of Estonia', '349.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `city`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `country`, `headquarters_location`, `inception`)  VALUES ('Zenon Gymnastic Club', 'nan', 'gymnastic club', 'Cyprus', 'Larnaca', '+1896-00-00T00:00:00Z');\nDatabase State:\n- Table: `gymnastic_club`, Columns: [`label`, `description`, `instance_of`, `country`, `headquarters_location`, `inception`]",
        "Response": "Table: `gymnastic_club`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `subclass_of`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Hypothetical protein YE1110', 'microbial protein found in Yersinia enterocolitica subsp. enterocolitica 8081', 'Yersinia enterocolitica subsp. enterocolitica 8081', 'A1JKX2', 'hypothetical protein YE1110', 'protein', 'protein', 'YP_001005440', 'Toxin-antitoxin system, RelE/ParE toxin domain superfamily');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `parent_taxon`, `instance_of`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `bacdive_id`, `itis_tsn`, `gram_staining`, `jstor_topic_id`, `irmng_id`, `lpsn_url`, `mesh_descriptor_id`, `mesh_tree_code`, `microsoft_academic_id`, `openalex_id`, `catalogue_of_life_id`]\n- Table: `toxin_antitoxin_system_yafq_like_toxin`, Columns: [`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `subclass_of`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `toxin_antitoxin_system_yafq_like_toxin`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO position (positionID, positiontitle, educationrequired, minsalary, maxsalary)  VALUES (2, 'Manager', '4 year degree', 'US$50,000.00', 'US$150,000.00');\nDatabase State:\n- Table: position, Columns: [positionID, positiontitle, educationrequired, minsalary, maxsalary]",
        "Response": "Table: position"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO IMG_OBJ (IMG_ID, OBJ_SAMPLE_ID, OBJ_CLASS_ID, X, Y, W, H)  VALUES (150432, 15, 298, 0, 0, 228, 510);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: IMG_OBJ"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (WorkOrderID, ProductID, OrderQty, StockedQty, ScrappedQty, StartDate, EndDate, DueDate, ScrapReasonID, ModifiedDate)  VALUES (29565, 3, 60, 60, 0, '2013-02-03 00:00:00.0', '2013-02-13 00:00:00.0', '2013-02-14 00:00:00.0', NULL, '2013-02-13 00:00:00.0');\nDatabase State:\n- Table: PersonCreditCard, Columns: [BusinessEntityID, CreditCardID, ModifiedDate]\n- Table: ProductModel, Columns: [ProductModelID, Name, CatalogDescription, Instructions, rowguid, ModifiedDate]\n- Table: `SalesOrderHeader`, Columns: [SalesOrderID, RevisionNumber, OrderDate, DueDate, ShipDate, Status, OnlineOrderFlag, SalesOrderNumber, PurchaseOrderNumber, AccountNumber, CustomerID, SalesPersonID, TerritoryID, BillToAddressID, ShipToAddressID, ShipMethodID, CreditCardID, CreditCardApprovalCode, CurrencyRateID, SubTotal, TaxAmt, Freight, TotalDue, Comment, rowguid, ModifiedDate]\n- Table: Culture, Columns: [CultureID, Name, ModifiedDate]\n- Table: `BusinessEntity`, Columns: [BusinessEntityID, rowguid, ModifiedDate]\n- Table: SalesPerson, Columns: [BusinessEntityID, TerritoryID, SalesQuota, Bonus, CommissionPct, SalesYTD, SalesLastYear, rowguid, ModifiedDate]\n- Table: SalesOrderDetail, Columns: [SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate]\n- Table: WorkOrder, Columns: [WorkOrderID, ProductID, OrderQty, StockedQty, ScrappedQty, StartDate, EndDate, DueDate, ScrapReasonID, ModifiedDate]\n- Table: WorkOrderRouting, Columns: [WorkOrderID, ProductID, OperationSequence, LocationID, ScheduledStartDate, ScheduledEndDate, ActualStartDate, ActualEndDate, ActualResourceHrs, PlannedCost, ActualCost, ModifiedDate]\n- Table: ProductPhoto, Columns: [ProductPhotoID, ThumbNailPhoto, ThumbnailPhotoFileName, LargePhoto, LargePhotoFileName, ModifiedDate]\n- Table: ProductDescription, Columns: [ProductDescriptionID, Description, rowguid, ModifiedDate]\n- Table: CountryRegion, Columns: [CountryRegionCode, Name, ModifiedDate]\n- Table: SalesReason, Columns: [SalesReasonID, Name, ReasonType, ModifiedDate]\n- Table: `EmployeeDepartmentHistory`, Columns: [BusinessEntityID, DepartmentID, ShiftID, StartDate, EndDate, ModifiedDate]\n- Table: ScrapReason, Columns: [ScrapReasonID, Name, ModifiedDate]\n- Table: UnitMeasure, Columns: [UnitMeasureCode, Name, ModifiedDate]\n- Table: PurchaseOrderHeader, Columns: [PurchaseOrderID, RevisionNumber, Status, EmployeeID, VendorID, ShipMethodID, OrderDate, ShipDate, SubTotal, TaxAmt, Freight, TotalDue, ModifiedDate]\n- Table: `CurrencyRate`, Columns: [CurrencyRateID, CurrencyRateDate, FromCurrencyCode, ToCurrencyCode, AverageRate, EndOfDayRate, ModifiedDate]\n- Table: ProductReview, Columns: [ProductReviewID, ProductID, ReviewerName, ReviewDate, EmailAddress, Rating, Comments, ModifiedDate]\n- Table: `StateProvince`, Columns: [StateProvinceID, StateProvinceCode, CountryRegionCode, IsOnlyStateProvinceFlag, Name, TerritoryID, rowguid, ModifiedDate]\n- Table: `PhoneNumberType`, Columns: [PhoneNumberTypeID, Name, ModifiedDate]\n- Table: SalesTerritory, Columns: [TerritoryID, Name, CountryRegionCode, `Group`, SalesYTD, SalesLastYear, CostYTD, CostLastYear, rowguid, ModifiedDate]\n- Table: `Location`, Columns: [LocationID, Name, CostRate, Availability, ModifiedDate]\n- Table: Currency, Columns: [CurrencyCode, Name, ModifiedDate]\n- Table: Store, Columns: [BusinessEntityID, Name, SalesPersonID, Demographics, rowguid, ModifiedDate]\n- Table: `EmployeePayHistory`, Columns: [BusinessEntityID, RateChangeDate, Rate, PayFrequency, ModifiedDate]\n- Table: `CreditCard`, Columns: [CreditCardID, CardType, CardNumber, ExpMonth, ExpYear, ModifiedDate]\n- Table: SalesPersonQuotaHistory, Columns: [BusinessEntityID, QuotaDate, SalesQuota, rowguid, ModifiedDate]\n- Table: ProductDocument, Columns: [ProductID, DocumentNode, ModifiedDate]\n- Table: Employee, Columns: [BusinessEntityID, NationalIDNumber, LoginID, OrganizationNode, OrganizationLevel, JobTitle, BirthDate, MaritalStatus, Gender, HireDate, SalariedFlag, VacationHours, SickLeaveHours, CurrentFlag, rowguid, ModifiedDate]\n- Table: `JobCandidate`, Columns: [JobCandidateID, BusinessEntityID, Resume, ModifiedDate]\n- Table: SalesOrderHeaderSalesReason, Columns: [SalesOrderID, SalesReasonID, ModifiedDate]\n- Table: SalesTerritoryHistory, Columns: [BusinessEntityID, TerritoryID, StartDate, EndDate, rowguid, ModifiedDate]\n- Table: `BillOfMaterials`, Columns: [BillOfMaterialsID, ProductAssemblyID, ComponentID, StartDate, EndDate, UnitMeasureCode, BOMLevel, PerAssemblyQty, ModifiedDate]\n- Table: Customer, Columns: [CustomerID, PersonID, StoreID, TerritoryID, AccountNumber, rowguid, ModifiedDate]\n- Table: Shift, Columns: [ShiftID, Name, StartTime, EndTime, ModifiedDate]\n- Table: `Address`, Columns: [AddressID, AddressLine1, AddressLine2, City, StateProvinceID, PostalCode, SpatialLocation, rowguid, ModifiedDate]\n- Table: BusinessEntityContact, Columns: [BusinessEntityID, PersonID, ContactTypeID, rowguid, ModifiedDate]\n- Table: Person, Columns: [BusinessEntityID, PersonType, NameStyle, Title, FirstName, MiddleName, LastName, Suffix, EmailPromotion, AdditionalContactInfo, Demographics, rowguid, ModifiedDate]\n- Table: ProductListPriceHistory, Columns: [ProductID, StartDate, EndDate, ListPrice, ModifiedDate]\n- Table: ProductVendor, Columns: [ProductID, BusinessEntityID, AverageLeadTime, StandardPrice, LastReceiptCost, LastReceiptDate, MinOrderQty, MaxOrderQty, OnOrderQty, UnitMeasureCode, ModifiedDate]\n- Table: ShipMethod, Columns: [ShipMethodID, Name, ShipBase, ShipRate, rowguid, ModifiedDate]\n- Table: SpecialOfferProduct, Columns: [SpecialOfferID, ProductID, rowguid, ModifiedDate]\n- Table: TransactionHistoryArchive, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: `AddressType`, Columns: [AddressTypeID, Name, rowguid, ModifiedDate]\n- Table: TransactionHistory, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: PurchaseOrderDetail, Columns: [PurchaseOrderID, PurchaseOrderDetailID, DueDate, OrderQty, ProductID, UnitPrice, LineTotal, ReceivedQty, RejectedQty, StockedQty, ModifiedDate]\n- Table: SpecialOffer, Columns: [SpecialOfferID, Description, DiscountPct, Type, Category, StartDate, EndDate, MinQty, MaxQty, rowguid, ModifiedDate]\n- Table: CountryRegionCurrency, Columns: [CountryRegionCode, CurrencyCode, ModifiedDate]\n- Table: EmailAddress, Columns: [BusinessEntityID, EmailAddressID, EmailAddress, rowguid, ModifiedDate]\n- Table: SalesTaxRate, Columns: [SalesTaxRateID, StateProvinceID, TaxType, TaxRate, Name, rowguid, ModifiedDate]",
        "Response": "Table: WorkOrder"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (au_id, au_lname, au_fname, phone, address, city, state, zip, contract)  VALUES ('213-46-8915', 'Green', 'Marjorie', '415 986-7020', '309 63rd St. #411', 'Oakland', 'CA', '94618', '0');\nDatabase State:\n- Table: pub_info, Columns: [pub_id, logo, pr_info]\n- Table: discounts, Columns: [discounttype, stor_id, lowqty, highqty, discount]\n- Table: roysched, Columns: [title_id, lorange, hirange, royalty]\n- Table: publishers, Columns: [pub_id, pub_name, city, state, country]\n- Table: stores, Columns: [stor_id, stor_name, stor_address, city, state, zip]\n- Table: sales, Columns: [stor_id, ord_num, ord_date, qty, payterms, title_id]",
        "Response": "Table: authors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `captain` (`Captain_ID`, `Name`, `Ship_ID`, `age`, `Class`, `Rank`)  VALUES (1, 'Captain Sir Henry Langford', 1, '40', 'Third-rate ship of the line', 'Midshipman');\nDatabase State:\n- Table: `captain`, Columns: [`Captain_ID`, `Name`, `Ship_ID`, `age`, `Class`, `Rank`]\n- Table: `Ship`, Columns: [`Ship_ID`, `Name`, `Type`, `Built_Year`, `Class`, `Flag`]",
        "Response": "Table: `captain`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cars (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num)  VALUES (39, 12, 1, 'rectangle', 'long', 'not_double', 'jagged', 2, 'circle', 0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO university_ranking_year (university_id, ranking_criteria_id, year, score)  VALUES (285, 14, 2015, 367);\nDatabase State:\n- Table: university_year, Columns: [university_id, year, num_students, student_staff_ratio, pct_international_students, pct_female_students]\n- Table: ranking_system, Columns: [id, system_name]\n- Table: university_ranking_year, Columns: [university_id, ranking_criteria_id, year, score]\n- Table: country, Columns: [id, country_name]",
        "Response": "Table: university_ranking_year"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `publication` (`Publication_ID`, `Book_ID`, `Publisher`, `Publication_Date`, `Price`)  VALUES (1, 1, 'Pearson', 'August 2008', 15000000.0);\nDatabase State:\n- Table: `book`, Columns: [`Book_ID`, `Title`, `Issues`, `Writer`]",
        "Response": "Table: `publication`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`, `has_parts`)  VALUES ('juvenile hormone secretion', 'The regulated release of juvenile hormones, the three sesquiterpenoid derivatives that function to maintain the larval state of insects at molting and that may be required for other processes, e.g. oogenesis.', 'GO:0045443', 'endocrine hormone secretion', 'http://purl.obolibrary.org/obo/GO_0045443', 'biological process', 'juvenile hormone');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `regulates_molecular_biology`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS');\nDatabase State:\n- Table: Type_Of_Restaurant, Columns: [ResID, ResTypeID]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Restaurant_Type, Columns: [ResTypeID, ResTypeName, ResTypeDescription]\n- Table: Visits_Restaurant, Columns: [StuID, ResID, Time, Spent]\n- Table: Restaurant, Columns: [ResID, ResName, Address, Rating]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details)  VALUES (9, 'Grade', 'quam', 'cool', NULL);\nDatabase State:\n- Table: Products, Columns: [product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details]\n- Table: Ref_Product_Categories, Columns: [product_category_code, product_category_description, unit_of_measure]\n- Table: Product_Characteristics, Columns: [product_id, characteristic_id, product_characteristic_value]",
        "Response": "Table: Characteristics"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (event_id, competitor_id, medal_id)  VALUES (347, 6720, 4);\nDatabase State:\n- Table: medal, Columns: [id, medal_name]\n- Table: person_region, Columns: [person_id, region_id]\n- Table: games, Columns: [id, games_year, games_name, season]\n- Table: sport, Columns: [id, sport_name]\n- Table: games_competitor, Columns: [id, games_id, person_id, age]",
        "Response": "Table: competitor_event"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO taughtBy (course_id, p_id)  VALUES (160, 331);\nDatabase State:\n- Table: taughtBy, Columns: [course_id, p_id]",
        "Response": "Table: taughtBy"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO CountryLanguage (CountryCode, Language, IsOfficial, Percentage)  VALUES ('OMN', 'Balochi', 'F', 0.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: CountryLanguage"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `user_reviews` (App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity)  VALUES ('Gardenscapes', 'Enjoy playing game. It''s great time waster work hard make progress. Found bit clunky times could device. Hate timed games', 'Negative', '-0.05833333333333335', '0.6183333333333333');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `user_reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1025, 'Goldman', 'Mark', 18, 'M', 520, 7134, 'PIT');\nDatabase State:\n- Table: Voting_record, Columns: [StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`movie_id`, `Title`, `Year`, `Director`, `Budget_million`, `Gross_worldwide`)  VALUES (10, '3000 Miles to Graceland', 2001, 'Demian Lichtenstein', 62.0, 18720175);\nDatabase State:\n- Table: `book_club`, Columns: [`book_club_id`, `Year`, `Author_or_Editor`, `Book_Title`, `Publisher`, `Category`, `Result`]",
        "Response": "Table: `movie`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (userid, movieid, rating)  VALUES (5124, 1733566, '3');\nDatabase State:\n- Table: `u2base`, Columns: [userid, movieid, rating]\n- Table: `directors`, Columns: [directorid, d_quality, avg_revenue]\n- Table: `movies2directors`, Columns: [movieid, directorid, genre]\n- Table: `movies`, Columns: [movieid, year, isEnglish, country, runningtime]",
        "Response": "Table: `u2base`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Asset_Parts (asset_id, part_id)  VALUES (15, 2);\nDatabase State:\n- Table: Fault_Log_Parts, Columns: [fault_log_entry_id, part_fault_id, fault_status]\n- Table: Staff, Columns: [staff_id, staff_name, gender, other_staff_details]\n- Table: Part_Faults, Columns: [part_fault_id, part_id, fault_short_name, fault_description, other_fault_details]\n- Table: Assets, Columns: [asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details]\n- Table: Skills, Columns: [skill_id, skill_code, skill_description]\n- Table: Asset_Parts, Columns: [asset_id, part_id]\n- Table: Parts, Columns: [part_id, part_name, chargeable_yn, chargeable_amount, other_part_details]\n- Table: Fault_Log, Columns: [fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details]\n- Table: Maintenance_Contracts, Columns: [maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details]\n- Table: Engineer_Visits, Columns: [engineer_visit_id, contact_staff_id, engineer_id, fault_log_entry_id, fault_status, visit_start_datetime, visit_end_datetime, other_visit_details]",
        "Response": "Table: Asset_Parts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Answer` (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('I don''t know', 2019, 4122, 27);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Answer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `image`, `locator_map_image`, `coordinate_location`, `instance_of`, `located_in_the_administrative_territorial_entity`, `country`, `topics_main_category`, `openstreetmap_relation_id`, `commons_category`, `population`, `area`)  VALUES ('\u010cesk\u00e9 Bud\u011bjovice 2', 'part of the city in the Czech Republic', 'Centrum \u010cty\u0159i Dvory.jpg', 'nan', '48.9853', 'municipal part in Czechia', '\u010cesk\u00e9 Bud\u011bjovice', 'Czech Republic', 'Category:\u010cesk\u00e9 Bud\u011bjovice 2', 'nan', '\u010cesk\u00e9 Bud\u011bjovice 2', 36041.0, 20.8990000000000009);\nDatabase State:\n- Table: `water_feature`, Columns: [`label`, `description`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `commons_category`, `image`, `instance_of`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`id`, `name`, `Home_Games`, `Average_Attendance`, `Total_Attendance`, `Capacity_Percentage`)  VALUES (4, 'New Meadowlands Stadium', 8, 78596.0, 628768.0, 95.2999999999999972);\nDatabase State:\n- Table: `stadium`, Columns: [`id`, `name`, `Home_Games`, `Average_Attendance`, `Total_Attendance`, `Capacity_Percentage`]\n- Table: `injury_accident`, Columns: [`game_id`, `id`, `Player`, `Injury`, `Number_of_matches`, `Source`]",
        "Response": "Table: `stadium`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (BusinessEntityID, PersonType, NameStyle, Title, FirstName, MiddleName, LastName, Suffix, EmailPromotion, AdditionalContactInfo, Demographics, rowguid, ModifiedDate)  VALUES (15241, 'IN', 0, NULL, 'Damien', 'E', 'Beck', NULL, 0, NULL, '<IndividualSurvey xmlns=\"http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey\"><TotalPurchaseYTD>-49</TotalPurchaseYTD><DateFirstPurchase>2003-08-15Z</DateFirstPurchase><BirthDate>1942-02-26Z</BirthDate><MaritalStatus>S</MaritalStatus><YearlyIncome>25001-50000</YearlyIncome><Gender>M</Gender><TotalChildren>1</TotalChildren><NumberChildrenAtHome>0</NumberChildrenAtHome><Education>Bachelors </Education><Occupation>Clerical</Occupation><HomeOwnerFlag>0</HomeOwnerFlag><NumberCarsOwned>0</NumberCarsOwned><CommuteDistance>0-1 Miles</CommuteDistance></IndividualSurvey>', '39325D8E-8BD0-49C7-B488-3152AA17C01B', '2013-07-14 00:00:00.0');\nDatabase State:\n- Table: Customer, Columns: [CustomerID, PersonID, StoreID, TerritoryID, AccountNumber, rowguid, ModifiedDate]\n- Table: ScrapReason, Columns: [ScrapReasonID, Name, ModifiedDate]\n- Table: `PhoneNumberType`, Columns: [PhoneNumberTypeID, Name, ModifiedDate]\n- Table: ProductDescription, Columns: [ProductDescriptionID, Description, rowguid, ModifiedDate]\n- Table: `BillOfMaterials`, Columns: [BillOfMaterialsID, ProductAssemblyID, ComponentID, StartDate, EndDate, UnitMeasureCode, BOMLevel, PerAssemblyQty, ModifiedDate]\n- Table: ProductInventory, Columns: [ProductID, LocationID, Shelf, Bin, Quantity, rowguid, ModifiedDate]\n- Table: EmailAddress, Columns: [BusinessEntityID, EmailAddressID, EmailAddress, rowguid, ModifiedDate]\n- Table: Shift, Columns: [ShiftID, Name, StartTime, EndTime, ModifiedDate]\n- Table: Employee, Columns: [BusinessEntityID, NationalIDNumber, LoginID, OrganizationNode, OrganizationLevel, JobTitle, BirthDate, MaritalStatus, Gender, HireDate, SalariedFlag, VacationHours, SickLeaveHours, CurrentFlag, rowguid, ModifiedDate]\n- Table: ProductListPriceHistory, Columns: [ProductID, StartDate, EndDate, ListPrice, ModifiedDate]\n- Table: ProductVendor, Columns: [ProductID, BusinessEntityID, AverageLeadTime, StandardPrice, LastReceiptCost, LastReceiptDate, MinOrderQty, MaxOrderQty, OnOrderQty, UnitMeasureCode, ModifiedDate]\n- Table: TransactionHistory, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: ProductDocument, Columns: [ProductID, DocumentNode, ModifiedDate]\n- Table: `SalesOrderHeader`, Columns: [SalesOrderID, RevisionNumber, OrderDate, DueDate, ShipDate, Status, OnlineOrderFlag, SalesOrderNumber, PurchaseOrderNumber, AccountNumber, CustomerID, SalesPersonID, TerritoryID, BillToAddressID, ShipToAddressID, ShipMethodID, CreditCardID, CreditCardApprovalCode, CurrencyRateID, SubTotal, TaxAmt, Freight, TotalDue, Comment, rowguid, ModifiedDate]\n- Table: ProductModel, Columns: [ProductModelID, Name, CatalogDescription, Instructions, rowguid, ModifiedDate]\n- Table: BusinessEntityAddress, Columns: [BusinessEntityID, AddressID, AddressTypeID, rowguid, ModifiedDate]\n- Table: SalesPerson, Columns: [BusinessEntityID, TerritoryID, SalesQuota, Bonus, CommissionPct, SalesYTD, SalesLastYear, rowguid, ModifiedDate]\n- Table: ShoppingCartItem, Columns: [ShoppingCartItemID, ShoppingCartID, Quantity, ProductID, DateCreated, ModifiedDate]\n- Table: WorkOrder, Columns: [WorkOrderID, ProductID, OrderQty, StockedQty, ScrappedQty, StartDate, EndDate, DueDate, ScrapReasonID, ModifiedDate]\n- Table: ProductCategory, Columns: [ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: CountryRegion, Columns: [CountryRegionCode, Name, ModifiedDate]\n- Table: SalesReason, Columns: [SalesReasonID, Name, ReasonType, ModifiedDate]\n- Table: ProductSubcategory, Columns: [ProductSubcategoryID, ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: ProductPhoto, Columns: [ProductPhotoID, ThumbNailPhoto, ThumbnailPhotoFileName, LargePhoto, LargePhotoFileName, ModifiedDate]\n- Table: Culture, Columns: [CultureID, Name, ModifiedDate]\n- Table: `Location`, Columns: [LocationID, Name, CostRate, Availability, ModifiedDate]\n- Table: `Product`, Columns: [ProductID, Name, ProductNumber, MakeFlag, FinishedGoodsFlag, Color, SafetyStockLevel, ReorderPoint, StandardCost, ListPrice, Size, SizeUnitMeasureCode, WeightUnitMeasureCode, Weight, DaysToManufacture, ProductLine, Class, Style, ProductSubcategoryID, ProductModelID, SellStartDate, SellEndDate, DiscontinuedDate, rowguid, ModifiedDate]\n- Table: SalesTaxRate, Columns: [SalesTaxRateID, StateProvinceID, TaxType, TaxRate, Name, rowguid, ModifiedDate]\n- Table: SpecialOffer, Columns: [SpecialOfferID, Description, DiscountPct, Type, Category, StartDate, EndDate, MinQty, MaxQty, rowguid, ModifiedDate]\n- Table: ProductCostHistory, Columns: [ProductID, StartDate, EndDate, StandardCost, ModifiedDate]\n- Table: `EmployeePayHistory`, Columns: [BusinessEntityID, RateChangeDate, Rate, PayFrequency, ModifiedDate]\n- Table: BusinessEntityContact, Columns: [BusinessEntityID, PersonID, ContactTypeID, rowguid, ModifiedDate]\n- Table: ProductReview, Columns: [ProductReviewID, ProductID, ReviewerName, ReviewDate, EmailAddress, Rating, Comments, ModifiedDate]\n- Table: `CreditCard`, Columns: [CreditCardID, CardType, CardNumber, ExpMonth, ExpYear, ModifiedDate]\n- Table: UnitMeasure, Columns: [UnitMeasureCode, Name, ModifiedDate]\n- Table: Password, Columns: [BusinessEntityID, PasswordHash, PasswordSalt, rowguid, ModifiedDate]\n- Table: ShipMethod, Columns: [ShipMethodID, Name, ShipBase, ShipRate, rowguid, ModifiedDate]\n- Table: `ContactType`, Columns: [ContactTypeID, Name, ModifiedDate]\n- Table: `CurrencyRate`, Columns: [CurrencyRateID, CurrencyRateDate, FromCurrencyCode, ToCurrencyCode, AverageRate, EndOfDayRate, ModifiedDate]\n- Table: Vendor, Columns: [BusinessEntityID, AccountNumber, Name, CreditRating, PreferredVendorStatus, ActiveFlag, PurchasingWebServiceURL, ModifiedDate]\n- Table: `BusinessEntity`, Columns: [BusinessEntityID, rowguid, ModifiedDate]\n- Table: Currency, Columns: [CurrencyCode, Name, ModifiedDate]\n- Table: SalesOrderDetail, Columns: [SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate]\n- Table: Store, Columns: [BusinessEntityID, Name, SalesPersonID, Demographics, rowguid, ModifiedDate]\n- Table: `Document`, Columns: [DocumentNode, DocumentLevel, Title, Owner, FolderFlag, FileName, FileExtension, Revision, ChangeNumber, Status, DocumentSummary, Document, rowguid, ModifiedDate]\n- Table: TransactionHistoryArchive, Columns: [TransactionID, ProductID, ReferenceOrderID, ReferenceOrderLineID, TransactionDate, TransactionType, Quantity, ActualCost, ModifiedDate]\n- Table: `AddressType`, Columns: [AddressTypeID, Name, rowguid, ModifiedDate]\n- Table: SpecialOfferProduct, Columns: [SpecialOfferID, ProductID, rowguid, ModifiedDate]\n- Table: `EmployeeDepartmentHistory`, Columns: [BusinessEntityID, DepartmentID, ShiftID, StartDate, EndDate, ModifiedDate]\n- Table: Person, Columns: [BusinessEntityID, PersonType, NameStyle, Title, FirstName, MiddleName, LastName, Suffix, EmailPromotion, AdditionalContactInfo, Demographics, rowguid, ModifiedDate]\n- Table: PurchaseOrderDetail, Columns: [PurchaseOrderID, PurchaseOrderDetailID, DueDate, OrderQty, ProductID, UnitPrice, LineTotal, ReceivedQty, RejectedQty, StockedQty, ModifiedDate]\n- Table: ProductModelProductDescriptionCulture, Columns: [ProductModelID, ProductDescriptionID, CultureID, ModifiedDate]\n- Table: `StateProvince`, Columns: [StateProvinceID, StateProvinceCode, CountryRegionCode, IsOnlyStateProvinceFlag, Name, TerritoryID, rowguid, ModifiedDate]\n- Table: `JobCandidate`, Columns: [JobCandidateID, BusinessEntityID, Resume, ModifiedDate]\n- Table: SalesPersonQuotaHistory, Columns: [BusinessEntityID, QuotaDate, SalesQuota, rowguid, ModifiedDate]\n- Table: `Department`, Columns: [DepartmentID, Name, GroupName, ModifiedDate]\n- Table: SalesTerritoryHistory, Columns: [BusinessEntityID, TerritoryID, StartDate, EndDate, rowguid, ModifiedDate]\n- Table: SalesTerritory, Columns: [TerritoryID, Name, CountryRegionCode, `Group`, SalesYTD, SalesLastYear, CostYTD, CostLastYear, rowguid, ModifiedDate]\n- Table: SalesOrderHeaderSalesReason, Columns: [SalesOrderID, SalesReasonID, ModifiedDate]\n- Table: CountryRegionCurrency, Columns: [CountryRegionCode, CurrencyCode, ModifiedDate]\n- Table: `Address`, Columns: [AddressID, AddressLine1, AddressLine2, City, StateProvinceID, PostalCode, SpatialLocation, rowguid, ModifiedDate]\n- Table: WorkOrderRouting, Columns: [WorkOrderID, ProductID, OperationSequence, LocationID, ScheduledStartDate, ScheduledEndDate, ActualStartDate, ActualEndDate, ActualResourceHrs, PlannedCost, ActualCost, ModifiedDate]\n- Table: PurchaseOrderHeader, Columns: [PurchaseOrderID, RevisionNumber, Status, EmployeeID, VendorID, ShipMethodID, OrderDate, ShipDate, SubTotal, TaxAmt, Freight, TotalDue, ModifiedDate]\n- Table: PersonCreditCard, Columns: [BusinessEntityID, CreditCardID, ModifiedDate]\n- Table: ProductProductPhoto, Columns: [ProductID, ProductPhotoID, `Primary`, ModifiedDate]",
        "Response": "Table: Person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID)  VALUES (516, 563, '2017-05-19', '2017-10-06', 37302, 1767, 638);\nDatabase State:\n- Table: Customers, Columns: [Customer_ID, Customer_Details]\n- Table: Claims, Columns: [Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled]",
        "Response": "Table: Settlements"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (groupName, totalSnatched, artist, groupYear, releaseType, groupId, id)  VALUES ('dreading consciousness', 15, 'netra & we''rewolves', 2013, 'ep', 72620287, 53699);\nDatabase State:\n- Table: `torrents`, Columns: [groupName, totalSnatched, artist, groupYear, releaseType, groupId, id]\n- Table: `tags`, Columns: [`index`, id, tag]",
        "Response": "Table: `torrents`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (event_id, competitor_id, medal_id)  VALUES (65, 116471, 4);\nDatabase State:\n- Table: games, Columns: [id, games_year, games_name, season]\n- Table: person, Columns: [id, full_name, gender, height, weight]\n- Table: medal, Columns: [id, medal_name]",
        "Response": "Table: competitor_event"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No)  VALUES (392205, 11, 6, 1, 1);\nDatabase State:\n- Table: Batting_Style, Columns: [Batting_Id, Batting_hand]",
        "Response": "Table: Batsman_Scored"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `physical_location` (`label`, `description`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `freebase_id`, `instance_of`, `image`, `racing_reference_track_id`, `commons_category`, `image_of_design_plans`)  VALUES ('Charlotte Motor Speedway', 'motorsport track in North Carolina, USA', '35.3525', 'United States of America', 'North Carolina', '/m/031vvv', 'motorsport racing track', '2018 Bank of America Roval 400 from frontstretch.jpeg', 'Charlotte_Motor_Speedway', 'Charlotte Motor Speedway', 'Charlotte Motor Speedway diagram.svg');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `physical_location`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`)  VALUES ('Homininae', 'subfamily of mammals', 'Hominidae', 'Homininae', 'taxon', 'subfamily', '943805.0', '/m/03qhj', '207598.0', 'nan', 'nan', 'JPH', 'nan', 'nan', '2780876281.0');\nDatabase State:\n- Table: `nadhubiquinone_oxidoreductase_subunit_g_iron_sulphur_binding_domain_protein_family`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `biological_process`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, game_id, publisher_id)  VALUES (1749, 600, 369);\nDatabase State:\n- Table: genre, Columns: [id, genre_name]",
        "Response": "Table: game_publisher"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `follows` (`label`, `description`, `performer`, `record_label`, `instance_of`, `musicbrainz_release_group_id`, `discogs_master_id`, `genre`, `followed_by`, `spotify_album_id`, `follows`, `distribution_format`, `publication_date`, `form_of_creative_work`, `part_of`, `apple_music_album_id_us_version`, `deezer_album_id`, `genius_album_id`, `youtube_playlist_id`)  VALUES ('Autopsie Vol. 3', 'compilation album by Booba', 'Booba', 'Because Music', 'album', 'nan', '142121.0', 'French hip hop', 'Lunatic', 'nan', '0.9', 'music streaming', '+2009-06-29T00:00:00Z', 'compilation album', 'Booba discography', 'nan', 'nan', 'Booba/Autopsie-vol-3', 'OLAK5uy_mtlMSs-e_Clfv0X8s0-u87D5RgPg1NJ6g');\nDatabase State:\n- Table: `booba_discography`, Columns: [`label`, `description`, `instance_of`, `record_label`, `performer`, `follows`, `followed_by`, `genre`, `publication_date`, `form_of_creative_work`, `part_of`, `distribution_format`, `genius_album_id`, `deezer_album_id`, `youtube_playlist_id`, `spotify_album_id`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `follows`, `instance_of`, `author`, `country_of_origin`, `publication_date`, `distribution_format`, `document_file_on_wikimedia_commons`, `copyright_status`, `commons_category`, `language_of_work_or_name`, `followed_by`)  VALUES ('Political-Military communiqu\u00e9 number 20', 'People''s Mujahedin of Iran statement', 'Political-Military communiqu\u00e9 number 19', 'written work', 'People''s Mojahedin Organization of Iran', 'Iran', '+1974-08-00T00:00:00Z', 'flyer', 'People''s Mujahedin of Iran, Political-Military communiqu\u00e9 of Shahrivar 1353 (Typed text).pdf', 'nan', 'Political-Military communiqu\u00e9 20', 'Persian', 'Political-Military communiqu\u00e9 number 21');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`concert_ID`, `concert_Name`, `Theme`, `Stadium_ID`, `Year`)  VALUES (6, 'Week 2', 'Party All Night', '7', '2015');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `concert`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`)  VALUES ('hypothetical protein BL1725', 'microbial gene found in Bifidobacterium longum NCC2705', '1021979.0', 'gene', 'Hypothetical protein BL1725', 'Bifidobacterium longum NCC2705', 'forward strand', '2147212', '2145422', 'gene');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `homologene_id`, `refseq_rna_id`, `encodes`, `found_in_taxon`, `instance_of`, `expressed_in`, `ensembl_gene_id`, `ensembl_transcript_id`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`)  VALUES ('TfIIA-S', 'protein-coding gene in the species Drosophila melanogaster', '42822.0', '3304.0', 'NM_079743', 'Transcription-factor-IIA-S Dmel_CG5163', 'Drosophila melanogaster', 'gene', 'salivary gland', 'FBgn0013347', 'FBtr0084526', 'reverse strand', '23891060.0', '23890388.0', 'Drosophila melanogaster chromosome 3R');\nDatabase State:\n- Table: `expressed_in`, Columns: [`label`, `description`, `foundational_model_of_anatomy_id`, `subclass_of`, `instance_of`, `microsoft_academic_id`]\n- Table: `transcription_factor_iia_beta_barrel`, Columns: [`label`, `description`, `ensembl_protein_id`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `ensembl_protein_id`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `homologene_id`, `refseq_rna_id`, `encodes`, `found_in_taxon`, `instance_of`, `expressed_in`, `ensembl_gene_id`, `ensembl_transcript_id`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`]\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Club_ID`, `name`, `Region`, `Start_year`)  VALUES (5, 'HGS2', 'England', '2000');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `club`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `political_border` (`label`, `description`, `commons_category`, `country`, `coat_of_arms_image`, `postal_code`, `locator_map_image`, `shares_border_with`, `located_in_time_zone`, `coordinate_location`, `head_of_government`, `instance_of`, `freebase_id`, `ine_municipality_code`, `population`, `geonames_id`, `openstreetmap_relation_id`, `topics_main_category`, `viaf_id`, `official_website`, `image`, `office_held_by_head_of_government`, `located_in_the_administrative_territorial_entity`, `elevation_above_sea_level`, `area`, `licence_plate_code`, `gran_enciclop\u00e8dia_catalana_id`, `whos_on_first_id`, `official_name`, `male_population`, `female_population`, `factgrid_item_id`)  VALUES ('Arona', 'municipality of Spain', 'Arona (Tenerife)', 'Spain', 'Escudo de Arona (Santa Cruz de Tenerife).svg', '38640', 'Tenerife municipio Arona.svg', 'Adeje', 'UTC+01:00', '28.0996248', 'Francisco Jose Ni\u00f1o Rodriguez', 'municipality of Spain', '/m/04xyjm', '38006.0', 82982.0, '6360622.0', '345076.0', 'Category:Arona (Santa Cruz de Tenerife)', '243521131.0', 'http://www.arona.org', 'Arona Church.JPG', 'mayor of Arona', 'Tenerife', 630.0, 81.79000000000000626, 'nan', '5320.0', '101843393.0', 'Arona', 41283.0, 39933.0, 'Q344135');\nDatabase State:\n- Table: `jard\u00edn_hist\u00f3rico`, Columns: [`label`, `description`, `commons_category`, `coordinate_location`, `image`, `located_in_the_administrative_territorial_entity`, `country`, `heritage_designation`, `bien_de_inter\u00e9s_cultural_bic_code`, `instance_of`]",
        "Response": "Table: `political_border`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `cites_work`, `instance_of`, `found_in_taxon`, `reactome_id`, `part_of`, `exact_match`, `has_parts`)  VALUES ('ALOX5 is phosphorylated by MAPKAP2', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-429016)', '5-lipoxygenase is phosphorylated by p38 kinase-dependent MAPKAP kinases', 'biological process', 'Homo sapiens', 'R-HSA-429016', 'Synthesis of Leukotrienes (LT) and Eoxins (EX)', 'https://identifiers.org/reactome:R-HSA-429016', 'ALOX5:Ca2+:Fe2+ [cytosol]');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `synthesis_of_leukotrienes_lt_and_eoxins_ex`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (418538, 12, 18923, 403, 403);\nDatabase State:\n- Table: Customers, Columns: [CustomerID, FirstName, MiddleInitial, LastName]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO data (ID, mpg, cylinders, displacement, horsepower, weight, acceleration, model, car_name)  VALUES (187, 27.0, 4, 101.0, 83, 2202, 15.30000000000000071, 76, 'renault 12tl');\nDatabase State:\n- Table: price, Columns: [ID, price]\n- Table: production, Columns: [ID, model_year, country]\n- Table: country, Columns: [origin, country]",
        "Response": "Table: data"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `collection` (`label`, `description`, `instance_of`, `official_website`)  VALUES ('European Sculpture and Decorative Arts', 'curatorial department of The Metropolitan Museum of Art in New York, USA', 'curatorial department', 'https://www.metmuseum.org/about-the-met/curatorial-departments/european-sculpture-and-decorative-arts');\nDatabase State:\n- Table: `handle`, Columns: [`label`, `description`, `instance_of`, `collection`, `image`, `inventory_number`]",
        "Response": "Table: `collection`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Code`)  VALUES (22561, 'IBS', '15-NOV-10', '21-NOV-10', 127.5, 'VUTURO', 'DEVORAH', 1, 0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `Reservations`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (region_id, game_platform_id, num_sales)  VALUES (4, 4679, 0.1100000000000000005);\nDatabase State:\n- Table: platform, Columns: [id, platform_name]\n- Table: game, Columns: [id, genre_id, game_name]\n- Table: genre, Columns: [id, genre_name]\n- Table: region_sales, Columns: [region_id, game_platform_id, num_sales]\n- Table: region, Columns: [id, region_name]\n- Table: game_platform, Columns: [id, game_publisher_id, platform_id, release_year]\n- Table: game_publisher, Columns: [id, game_id, publisher_id]",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Ship_ID`, `Name`, `Type`, `Built_Year`, `Class`, `Flag`)  VALUES (6, 'HMS Trojan', 'Panamax', 1997.0, 'KR', 'Panama');\nDatabase State:\n- Table: `Ship`, Columns: [`Ship_ID`, `Name`, `Type`, `Built_Year`, `Class`, `Flag`]\n- Table: `captain`, Columns: [`Captain_ID`, `Name`, `Ship_ID`, `age`, `Class`, `Rank`]",
        "Response": "Table: `Ship`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `topics_main_category`, `instance_of`, `point_in_time`, `follows`, `followed_by`, `part_of`)  VALUES ('531 BC', 'year', 'Category:531 BC', 'year BC', '-0531-01-01T00:00:00Z', '532 BC', '530 BC', '530s BC');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `topics_main_category`, `instance_of`, `point_in_time`, `follows`, `followed_by`, `part_of`]\n- Table: `follows`, Columns: [`label`, `description`, `topics_main_category`, `instance_of`, `point_in_time`, `follows`, `followed_by`, `part_of`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Invoices (invoice_number, order_id, invoice_date)  VALUES (4, 9, '2018-02-28 19:01:06');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Invoices"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('E0', '2009-04-11', 'Middlesbrough', 'Hull', 3, 1, 'H', 2009);\nDatabase State:\n- Table: divisions, Columns: [division, name, country]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (userid, movieid, rating)  VALUES (1449, 2127402, '1');\nDatabase State:\n- Table: `movies2actors`, Columns: [movieid, actorid, cast_num]",
        "Response": "Table: `u2base`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `ncbi_locus_tag`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('glycerate kinase I ECIAI39_3623', 'microbial gene found in Escherichia coli IAI39', 'ECIAI39_3623', 'gene', 'Escherichia coli IAI39', '7150546', 'Glycerate kinase I ECIAI39_3623', 'gene', '3784694', 'reverse strand', '3783468');\nDatabase State:\n- Table: `glycerate_kinase_superfamily`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `biological_process`, `molecular_function`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `parent_taxon`, `instance_of`, `freebase_id`, `itis_tsn`, `ncbi_taxonomy_id`, `encyclopedia_of_life_id`, `gbif_taxon_id`, `bacdive_id`, `gram_staining`, `irmng_id`, `mesh_descriptor_id`, `lpsn_url`, `microsoft_academic_id`, `openalex_id`, `catalogue_of_life_id`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `beers` (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (1802, 308, 0.05000000000000000277, NULL, 'You''re My Boy, Blue', 'Fruit / Vegetable Beer', 12.0);\nDatabase State:\n- Table: breweries, Columns: [id, name, city, state]\n- Table: `beers`, Columns: [id, brewery_id, abv, ibu, name, style, ounces]",
        "Response": "Table: `beers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `election` (`Election_ID`, `Representative_ID`, `Date`, `Votes`, `Vote_Percent`, `Seats`, `Place`)  VALUES (4, 5, '1949', 14077.0, 19.5, 9.0, 2.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `election`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `school_bus` (`School_ID`, `Driver_ID`, `Years_Working`, `If_full_time`)  VALUES (4, 3, 3, 'T');\nDatabase State:\n- Table: `school`, Columns: [`School_ID`, `Grade`, `School`, `Location`, `Type`]\n- Table: `driver`, Columns: [`Driver_ID`, `Name`, `Party`, `Home_city`, `Age`]\n- Table: `school_bus`, Columns: [`School_ID`, `Driver_ID`, `Years_Working`, `If_full_time`]",
        "Response": "Table: `school_bus`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `taxon` (`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`)  VALUES ('Caenorhabditis', 'genus of worms', 'Rhabditidae', 'Caenorhabditis', 'taxon', 'genus', '63331.0', '/m/027vms9', '6237.0', '2283681.0', '1063291.0', '87DRY', 'nan', 'nan', '2776496032.0');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]\n- Table: `dna_mismatch_repair_protein_muts_n_terminal_domain_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Customer_Payments (customer_id, datetime_payment, payment_method_code, amount_payment)  VALUES (2, '2018-02-24 10:07:05', 'Direct Debit', 8180.260000000000218);\nDatabase State:\n- Table: Addresses, Columns: [address_id, line_1_number_building, city, zip_postcode, state_province_county, country]\n- Table: Lessons, Columns: [lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price]",
        "Response": "Table: Customer_Payments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, student_id, grade, sat)  VALUES (13, 16, 'A', 5);\nDatabase State:\n- Table: student, Columns: [student_id, f_name, l_name, phone_number, email, intelligence, gpa, type]\n- Table: registration, Columns: [course_id, student_id, grade, sat]\n- Table: `course`, Columns: [course_id, name, credit, diff]\n- Table: RA, Columns: [student_id, capability, prof_id, salary]",
        "Response": "Table: registration"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (MovieID, ActorID, `Character Name`, creditOrder, pay, screentime)  VALUES (330, 1914, 'Harlan Ogilvy', 5, NULL, NULL);\nDatabase State:\n- Table: movie, Columns: [MovieID, Title, `MPAA Rating`, Budget, Gross, `Release Date`, Genre, Runtime, Rating, `Rating Count`, Summary]\n- Table: actor, Columns: [ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth]",
        "Response": "Table: characters"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `subclass_of`, `publication_date`, `part_of`, `manufacturer`)  VALUES ('Telesport Model 4', 'serie pc-50x', 'product model', 'home video game console', '+1978-00-00T00:00:00Z', 'first generation of video game consoles', 'HGS Electronic');\nDatabase State:\n- Table: `facet_of`, Columns: [`label`, `description`, `great_russian_encyclopedia_online_id`, `coordinates_of_southernmost_point`, `new_york_times_topic_id`, `gnd_id`, `category_of_associated_people`, `emergency_phone_number`, `electrical_plug_type`, `licence_plate_code`, `babelnet_id`, `office_held_by_head_of_government`, `fandom_wiki_id`, `gini_coefficient`, `native_label`, `musicbrainz_area_id`, `public_holiday`, `insee_countries_and_foreign_territories_code`, `diplomatic_relation`, `flag_image`, `commons_gallery`, `viaf_id`, `history_of_topic`, `biblioth\u00e8que_nationale_de_france_id`, `located_in_or_next_to_body_of_water`, `capital`, `official_website`, `subreddit`, `openstreetmap_relation_id`, `iab_code`, `mobile_country_code`, `m49_code`, `maritime_identification_digits`, `nkcr_aut_id`, `asc_leiden_thesaurus_id`, `category_of_people_buried_here`, `geoshape`, `coordinates_of_easternmost_point`, `demonym`, `le_monde_diplomatique_subject_id`, `member_of`, `unemployment_rate`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `office_held_by_head_of_state`, `commons_category`, `shares_border_with`, `us_national_archives_identifier`, `iso_3166_1_numeric_code`, `coordinates_of_westernmost_point`, `giant_bomb_id`, `country_calling_code`, `stw_thesaurus_for_economics_id`, `statoids_id`, `curlie_id`, `flag`, `fips_10_4_countries_and_regions`, `dagens_nyheter_topic_id`, `isni`, `nese_id`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `geonames_id`, `unicode_character`, `unesco_thesaurus_id`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `quora_topic_id`, `mesh_descriptor_id`, `guardian_topic_id`, `basic_form_of_government`, `coat_of_arms_image`, `highest_judicial_authority`, `legislative_body`, `freebase_id`, `official_language`, `continent`, `coat_of_arms`, `age_of_majority`, `on_focus_list_of_wikimedia_project`, `wipo_st3`, `coordinates_of_northernmost_point`, `has_quality`, `total_fertility_rate`, `area`, `executive_body`, `compulsory_education_minimum_age`, `central_bank`, `different_from`, `topics_main_category`, `locator_map_image`, `head_of_government`, `ioc_country_code`, `fast_id`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `described_by_source`, `gs1_country_code`, `page_banner`, `category_for_films_shot_at_this_location`, `mains_voltage`, `official_name`, `number_of_out_of_school_children`, `anthem`, `inception`, `life_expectancy`, `gran_enciclop\u00e8dia_catalana_id`, `top_level_internet_domain`, `instance_of`, `highest_point`, `category_for_people_born_here`, `short_name`, `driving_side`, `head_of_state`, `lowest_point`, `uk_parliament_thesaurus_id`, `civicus_monitor_country_entry`, `pronunciation_audio`, `idref_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `library_of_congress_authority_id`, `iso_3166_1_alpha_2_code`, `median_income`, `coordinate_location`, `language_used`, `brockhaus_enzyklop\u00e4die_online_id`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `world_encyclopedia_of_puppetry_arts_id`, `whos_on_first_id`, `the_top_tens_id`, `dr_topic_id`, `omegawiki_defined_meaning`, `hds_id`, `geonlp_id`, `part_of`, `analysis_policy_observatory_term_id`, `category_for_maps`, `treccanis_dizionario_di_storia_id`, `french_vikidia_id`, `english_vikidia_id`, `spanish_vikidia_id`, `eurovoc_id`, `larousse_id`, `worldcat_identities_id`, `fandom_article_id`, `niconicopedia_id`, `open_data_portal`, `kbpedia_id`, `grove_art_online_id`, `rkd_thesaurus_id`, `pm20_geo_code`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `bbc_news_topic_id`, `inaturalist_place_id`, `economy_of_topic`, `tasteatlas_id`, `sapa_id`, `bhcl_uuid`, `github_topic`, `namuwiki_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `\u00e1vvir_topic_id`, `yle_topic_id`, `ysa_id`, `joconde_location_id`, `zhihu_topic_id`, `armeniapedia_id`, `store_norske_leksikon_id`, `krugosvet_article`, `encyclopedia_of_the_history_of_ukraine_id`, `schoenberg_database_of_manuscripts_place_id`, `image`, `country`, `the_world_factbook_country_id`, `national_library_of_israel_j9u_id`, `colon_classification`, `democracy_index`, `der_spiegel_topic_id`, `museum_digital_place_id`, `wikisimpsons_id`, `den_store_danske_id`, `urban_electric_transit_country_id`, `hashtag`, `postimees_topic_id`, `online_pwn_encyclopedia_id`, `s\u00fcddeutsche_zeitung_topic_id`, `alltrails_trail_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `openstreetmap_element`, `happy_planet_index_score`, `bbc_things_id`, `idaigazetteer_id`, `treccani_id`]\n- Table: `part`, Columns: [`label`, `description`, `freebase_id`, `library_of_congress_authority_id`, `instance_of`, `locator_map_image`, `commons_category`, `has_parts`, `national_library_of_israel_j9u_id`, `topics_main_category`, `gnd_id`, `quora_topic_id`, `viaf_id`, `worldcat_identities_id`, `den_store_danske_id`, `coordinate_location`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `instance_of`, `category_combines_topics`, `opposite_of`, `commons_category`, `category_contains`]\n- Table: `manufacturer`, Columns: [`label`, `description`, `instance_of`, `industry`, `country`]\n- Table: `wikimedia_category`, Columns: [`label`, `description`, `instance_of`, `category_combines_topics`, `category_contains`]",
        "Response": "Table: `pc_50x_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Addresses (address_id, line_1_number_building, city, zip_postcode, state_province_county, country)  VALUES (8, '29085 Dejah Pine Suite 059', 'Lake Rafaela', '80376', 'WestVirginia', 'USA');\nDatabase State:\n- Table: Staff, Columns: [staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff]\n- Table: Vehicles, Columns: [vehicle_id, vehicle_details]\n- Table: Lessons, Columns: [lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price]\n- Table: Customers, Columns: [customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number, cell_mobile_phone_number]",
        "Response": "Table: Addresses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `place_of_birth` (`label`, `description`, `country`, `image`, `postal_code`, `located_in_time_zone`, `located_in_the_administrative_territorial_entity`, `commons_category`, `coordinate_location`, `instance_of`, `freebase_id`, `geonames_id`, `area`, `locator_map_image`, `shares_border_with`, `population`, `topics_main_category`, `whos_on_first_id`, `official_website`)  VALUES ('Giovo', 'Italian comune', 'Italy', 'Verla di Giovo.jpg', '38030', 'UTC+01:00', 'Trentino', 'Giovo', '46.155833333333', 'comune of Italy', '/m/0g9zyp', '6542626.0', 20.80999999999999873, 'Map of comune of Giovo (province of Trento, region Trentino-South Tyrol, Italy) 2018.svg', 'Cembra Lisignago', 2521.0, 'Category:Giovo', '1125976307.0', 'http://www.comunegiovo.it');\nDatabase State:\n- Table: `winner`, Columns: [`label`, `description`, `place_of_birth`, `instance_of`, `country_of_citizenship`, `occupation`, `date_of_birth`, `participant_in`, `given_name`, `sport`, `cycling_archives_cyclist_id`, `family_name`, `m\u00e9moire_du_cyclisme_cyclist_id`, `sex_or_gender`, `procyclingstats_cyclist_id`, `freebase_id`, `languages_spoken_written_or_signed`]\n- Table: `followed_by`, Columns: [`label`, `description`, `edition_number`, `instance_of`, `country`, `follows`, `followed_by`, `winner`, `subclass_of`, `sport`, `start_time`, `end_time`]",
        "Response": "Table: `place_of_birth`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details)  VALUES (10, 495, 5, 7, 'Payment', '2018-03-24 05:45:57', 1795.660000000000081, NULL, NULL);\nDatabase State:\n- Table: Accounts, Columns: [account_id, customer_id, account_name, other_account_details]\n- Table: Financial_Transactions, Columns: [transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details]\n- Table: Customers_Cards, Columns: [card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details]\n- Table: Customers, Columns: [customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details]",
        "Response": "Table: Financial_Transactions"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Templates (Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details)  VALUES (15, 9, 'CV', '1986-12-09 14:51:36', '1993-03-24 14:30:23', '');\nDatabase State:\n- Table: Ref_Template_Types, Columns: [Template_Type_Code, Template_Type_Description]\n- Table: Templates, Columns: [Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details]\n- Table: Paragraphs, Columns: [Paragraph_ID, Document_ID, Paragraph_Text, Other_Details]",
        "Response": "Table: Templates"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `replacing_subject` (`label`, `description`, `dantai_code`, `commons_category`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `official_website`, `instance_of`, `freebase_id`, `population`, `geonames_id`, `topics_main_category`, `corporate_number_japan`, `located_in_time_zone`, `name_in_kana`, `area`, `opencorporates_id`, `geonlp_id`, `image`, `openstreetmap_relation_id`, `shares_border_with`, `inception`, `replaces`, `whos_on_first_id`, `inaturalist_place_id`, `ndl_authority_id`, `viaf_id`, `worldcat_identities_id`, `flag_image`)  VALUES ('Nakatosa', 'town in Takaoka district, K\u014dchi prefecture, Japan', '394017', 'Nakatosa, Kochi', 'Japan', 'Takaoka District', '33.329277777777776', 'https://www.town.nakatosa.lg.jp/', 'town of Japan', '/m/02fys4', 5878.0, '1855760', 'Category:Nakatosa, Kochi', '9000020394017', 'UTC+09:00', '\u306a\u304b\u3068\u3055\u3061\u3087\u3046', 193.2800000000000011, 'jp/9000020394017', 'De88jF', 'nan', 'nan', 'Susaki', '+1957-07-01T00:00:00Z', 'Kaminokae', 'nan', '34141', '376400.0', '145425029.0', 'lccn-n81057181', 'nan');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `postal_code`, `follows`, `followed_by`, `part_of`, `google_knowledge_graph_id`]\n- Table: `located_in_the_present_day_administrative_territorial_entity`, Columns: [`label`, `description`, `dantai_code`, `commons_category`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `official_website`, `instance_of`, `freebase_id`, `population`, `geonames_id`, `topics_main_category`, `corporate_number_japan`, `located_in_time_zone`, `name_in_kana`, `area`, `opencorporates_id`, `geonlp_id`, `image`, `openstreetmap_relation_id`, `shares_border_with`, `inception`, `replaces`, `whos_on_first_id`, `inaturalist_place_id`, `ndl_authority_id`, `viaf_id`, `worldcat_identities_id`, `flag_image`]\n- Table: `replaced_entity`, Columns: [`label`, `description`, `country`, `coordinate_location`, `instance_of`, `located_in_the_administrative_territorial_entity`, `inception`, `dissolved_abolished_or_demolished_date`, `replaced_by`, `located_in_the_present_day_administrative_territorial_entity`, `name_in_kana`]\n- Table: `kochi_expressway`, Columns: [`label`, `description`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `postal_code`, `follows`, `followed_by`, `part_of`, `google_knowledge_graph_id`]\n- Table: `follows`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `postal_code`, `follows`, `followed_by`, `part_of`, `google_knowledge_graph_id`, `geonlp_id`]\n- Table: `replacing_subject`, Columns: [`label`, `description`, `dantai_code`, `commons_category`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `official_website`, `instance_of`, `freebase_id`, `population`, `geonames_id`, `topics_main_category`, `corporate_number_japan`, `located_in_time_zone`, `name_in_kana`, `area`, `opencorporates_id`, `geonlp_id`, `image`, `openstreetmap_relation_id`, `shares_border_with`, `inception`, `replaces`, `whos_on_first_id`, `inaturalist_place_id`, `ndl_authority_id`, `viaf_id`, `worldcat_identities_id`, `flag_image`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `dantai_code`, `commons_category`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `official_website`, `instance_of`, `freebase_id`, `population`, `geonames_id`, `topics_main_category`, `corporate_number_japan`, `located_in_time_zone`, `name_in_kana`, `area`, `opencorporates_id`, `geonlp_id`, `image`, `openstreetmap_relation_id`, `shares_border_with`, `inception`, `replaces`, `whos_on_first_id`, `inaturalist_place_id`, `ndl_authority_id`, `viaf_id`, `worldcat_identities_id`, `flag_image`]",
        "Response": "Table: `replacing_subject`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `phone` (`Name`, `Phone_ID`, `Memory_in_G`, `Carrier`, `Price`)  VALUES ('IPhone X', 3, 64, 'TMobile', 1000.0);\nDatabase State:\n- Table: `market`, Columns: [`Market_ID`, `District`, `Num_of_employees`, `Num_of_shops`, `Ranking`]",
        "Response": "Table: `phone`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (IMG_ID, ATT_CLASS_ID, OBJ_SAMPLE_ID)  VALUES (498254, 697, 1);\nDatabase State:\n- Table: ATT_CLASSES, Columns: [ATT_CLASS_ID, ATT_CLASS]\n- Table: IMG_OBJ_ATT, Columns: [IMG_ID, ATT_CLASS_ID, OBJ_SAMPLE_ID]\n- Table: OBJ_CLASSES, Columns: [OBJ_CLASS_ID, OBJ_CLASS]\n- Table: PRED_CLASSES, Columns: [PRED_CLASS_ID, PRED_CLASS]\n- Table: IMG_OBJ, Columns: [IMG_ID, OBJ_SAMPLE_ID, OBJ_CLASS_ID, X, Y, W, H]",
        "Response": "Table: IMG_OBJ_ATT"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO movies_total_gross (movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross)  VALUES ('Max Keeble''s Big Move', 'Oct 5, 2001', 'Comedy', 'PG', '$17,292,381', '$25,749,730');\nDatabase State:\n- Table: revenue, Columns: [Year, `Studio Entertainment[NI 1]`, `Disney Consumer Products[NI 2]`, `Disney Interactive[NI 3][Rev 1]`, `Walt Disney Parks and Resorts`, `Disney Media Networks`, Total]",
        "Response": "Table: movies_total_gross"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO address (address_id, street_number, street_name, city, country_id)  VALUES (847, '13', 'Lake View Way', 'Eskilstuna', 194);\nDatabase State:\n- Table: address, Columns: [address_id, street_number, street_name, city, country_id]\n- Table: address_status, Columns: [status_id, address_status]\n- Table: book_author, Columns: [book_id, author_id]\n- Table: book_language, Columns: [language_id, language_code, language_name]\n- Table: customer, Columns: [customer_id, first_name, last_name, email]\n- Table: author, Columns: [author_id, author_name]\n- Table: `cust_order`, Columns: [order_id, order_date, customer_id, shipping_method_id, dest_address_id]\n- Table: book, Columns: [book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id]\n- Table: publisher, Columns: [publisher_id, publisher_name]\n- Table: country, Columns: [country_id, country_name]\n- Table: customer_address, Columns: [customer_id, address_id, status_id]\n- Table: shipping_method, Columns: [method_id, method_name, cost]\n- Table: `order_line`, Columns: [line_id, order_id, book_id, price]\n- Table: order_status, Columns: [status_id, status_value]\n- Table: `order_history`, Columns: [history_id, order_id, status_id, status_date]",
        "Response": "Table: address"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Business_Attributes` (attribute_id, business_id, attribute_value)  VALUES (52, 12528, 'false');\nDatabase State:\n- Table: `Checkins`, Columns: [business_id, day_id, label_time_0, label_time_1, label_time_2, label_time_3, label_time_4, label_time_5, label_time_6, label_time_7, label_time_8, label_time_9, label_time_10, label_time_11, label_time_12, label_time_13, label_time_14, label_time_15, label_time_16, label_time_17, label_time_18, label_time_19, label_time_20, label_time_21, label_time_22, label_time_23]\n- Table: Days, Columns: [day_id, day_of_week]\n- Table: `Users`, Columns: [user_id, user_yelping_since_year, user_average_stars, user_votes_funny, user_votes_useful, user_votes_cool, user_review_count, user_fans]\n- Table: `Business`, Columns: [business_id, active, city, state, stars, review_count]\n- Table: `Elite`, Columns: [user_id, year_id]\n- Table: Categories, Columns: [category_id, category_name]\n- Table: `Reviews`, Columns: [business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length]\n- Table: `Business_Attributes`, Columns: [attribute_id, business_id, attribute_value]\n- Table: Attributes, Columns: [attribute_id, attribute_name]\n- Table: Compliments, Columns: [compliment_id, compliment_type]\n- Table: Years, Columns: [year_id, actual_year]\n- Table: `Tips`, Columns: [business_id, user_id, likes, tip_length]\n- Table: `Business_Hours`, Columns: [business_id, day_id, opening_time, closing_time]\n- Table: `Users_Compliments`, Columns: [compliment_id, user_id, number_of_compliments]",
        "Response": "Table: `Business_Attributes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `natural_product_of_taxon`, `image`)  VALUES ('spinach', 'vegetable', 'leaf vegetable', 'Spinacia oleracea', 'Jeunes pousses d''\u00e9pinards.jpg');\nDatabase State:\n- Table: `cultivation`, Columns: [`label`, `description`, `instance_of`, `subclass_of`, `image`, `product_or_material_produced`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `commons_category`, `image`, `parent_taxon`, `ncbi_taxonomy_id`, `itis_tsn`, `instance_of`, `freebase_id`, `tropicos_id`, `ipni_plant_id`, `grin_url`, `usda_plants_id`, `flora_of_china_id`, `dyntaxa_id`, `african_plant_database_id`, `topics_main_category`, `gbif_taxon_id`, `new_zealand_organisms_register_id`, `taxon_common_name`, `eppo_code`, `nbn_system_key`, `plants_of_the_world_online_id`, `irmng_id`, `inaturalist_taxon_id`, `apni_id`, `world_flora_online_id`, `open_tree_of_life_id`, `tela_botanica_id`, `catalogue_of_life_id`, `described_by_source`]\n- Table: `natural_product`, Columns: [`label`, `description`, `subclass_of`, `natural_product_of_taxon`, `image`]\n- Table: `product`, Columns: [`label`, `description`, `natural_product_of_taxon`, `image`, `subclass_of`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Documents_with_Expenses (Document_ID, Budget_Type_Code, Document_Details)  VALUES (371, 'ORG', 'organization');\nDatabase State:\n- Table: Documents, Columns: [Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details]\n- Table: Accounts, Columns: [Account_ID, Statement_ID, Account_Details]",
        "Response": "Table: Documents_with_Expenses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Participant_ID, Participant_Type_Code, Participant_Details)  VALUES (9, 'Organizer', 'Karlee Batz');\nDatabase State:\n- Table: Participants_in_Events, Columns: [Event_ID, Participant_ID]\n- Table: Services, Columns: [Service_ID, Service_Type_Code]\n- Table: Events, Columns: [Event_ID, Service_ID, Event_Details]\n- Table: Participants, Columns: [Participant_ID, Participant_Type_Code, Participant_Details]",
        "Response": "Table: Participants"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('cytochrome c oxidase subunit I type Smed_4762', 'microbial gene found in Sinorhizobium medicae WSM419', 'gene', 'Sinorhizobium medicae WSM419', '5318486', 'Smed_4762', 'Cytochrome c oxidase subunit I type Smed_4762', 'gene', '1285229', 'forward strand', '1282707');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (groupName, totalSnatched, artist, groupYear, releaseType, groupId, id)  VALUES ('lead the way', 66, 't.w.d.y.', 2000, 'album', 71810830, 10425);\nDatabase State:\n- Table: `torrents`, Columns: [groupName, totalSnatched, artist, groupYear, releaseType, groupId, id]",
        "Response": "Table: `torrents`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11540458, 'JB559724', '12/16/2018 11:00', '012XX W BALMORAL AVE', '910', 'STREET', 'FALSE', 'FALSE', 2013, 20, 48, 77, '7', '41.97996746', '-87.66028844');\nDatabase State:\n- Table: Neighborhood, Columns: [neighborhood_name, community_area_no]\n- Table: Ward, Columns: [ward_no, alderman_first_name, alderman_last_name, alderman_name_suffix, ward_office_address, ward_office_zip, ward_email, ward_office_phone, ward_office_fax, city_hall_office_room, city_hall_office_phone, city_hall_office_fax, Population]\n- Table: Community_Area, Columns: [community_area_no, community_area_name, side, population]\n- Table: IUCR, Columns: [iucr_no, primary_description, secondary_description, index_code]\n- Table: Crime, Columns: [report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude]\n- Table: District, Columns: [district_no, district_name, address, zip_code, commander, email, phone, fax, tty, twitter]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`index`, id, tag)  VALUES (97275, 48184, 'freely.available');\nDatabase State:\n- Table: `tags`, Columns: [`index`, id, tag]",
        "Response": "Table: `tags`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO subjects (case_number, race, gender, last_name, first_name, full_name)  VALUES ('912B', 'W', 'M', 'Schmidt', 'Michael', 'Schmidt, Michael');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: subjects"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `political_border` (`label`, `description`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `instance_of`, `freebase_id`, `geonames_id`, `commons_category`, `topics_main_category`, `brazilian_municipality_code`, `population`, `locator_map_image`, `image`, `area`, `human_development_index`, `elevation_above_sea_level`, `shares_border_with`, `openstreetmap_relation_id`, `local_dialing_code`, `brazilian_electoral_unit_id`, `whos_on_first_id`, `demonym`, `inaturalist_place_id`, `electorate`)  VALUES ('Barbacena', 'city and municipality in the state of Minas Gerais, Brazil', '-21.225833333333', 'Brazil', 'Minas Gerais', 'municipality of Brazil', '/m/05w5r2', '6300604', 'Barbacena (Minas Gerais)', 'Category:Barbacena', '3105608.0', 126284.0, 'MinasGerais Municip Barbacena.svg', 'Pra\u00e7a dos Andradas com igreja.jpg', 759.1860000000000354, 0.7980000000000000426, 1160.0, 'S\u00e3o Jo\u00e3o del Rei', '314887', '32.0', '41114.0', '101948955.0', 'barbacenense', '21705.0', 98746.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `political_border`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `follows` (`label`, `description`, `has_parts`, `instance_of`, `follows`, `followed_by`, `topics_main_category`, `freebase_id`, `country`, `sport`, `edition_number`, `point_in_time`, `atp_tennis_tournament_edition_id`)  VALUES ('2001 Australian Open', '2001 Australian Open Tennis Championships', '2001 Australian Open \u2013 men''s singles', 'Australian Open', '2000 Australian Open', '2002 Australian Open', 'Category:2001 Australian Open', '/m/069f9m', 'Australia', 'tennis', '89', '+2001-00-00T00:00:00Z', 'australian-open/580/2001/results');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `follows`, `followed_by`, `topics_main_category`, `freebase_id`, `has_parts`, `country`, `sport`, `edition_number`, `point_in_time`, `atp_tennis_tournament_edition_id`]\n- Table: `follows`, Columns: [`label`, `description`, `has_parts`, `instance_of`, `follows`, `followed_by`, `topics_main_category`, `freebase_id`, `country`, `sport`, `edition_number`, `point_in_time`, `atp_tennis_tournament_edition_id`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Member_ID`, `Performance_ID`, `Num_of_Pieces`)  VALUES (11, 3, 2);\nDatabase State:\n- Table: `member`, Columns: [`Member_ID`, `Name`, `Nationality`, `Role`]\n- Table: `member_attendance`, Columns: [`Member_ID`, `Performance_ID`, `Num_of_Pieces`]",
        "Response": "Table: `member_attendance`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Sales` (EVENTID, REFID, EVENT_DATE, AMOUNT)  VALUES (740582, 77849, '2007-05-31 12:00:00.0', 17.8990000000000009);\nDatabase State:\n- Table: Demog, Columns: [GEOID, INHABITANTS_K, INCOME_K, A_VAR1, A_VAR2, A_VAR3, A_VAR4, A_VAR5, A_VAR6, A_VAR7, A_VAR8, A_VAR9, A_VAR10, A_VAR11, A_VAR12, A_VAR13, A_VAR14, A_VAR15, A_VAR16, A_VAR17, A_VAR18]\n- Table: mailings3, Columns: [REFID, REF_DATE, RESPONSE]\n- Table: `Customers`, Columns: [ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age]\n- Table: `Mailings1_2`, Columns: [REFID, REF_DATE, RESPONSE]\n- Table: `Sales`, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]",
        "Response": "Table: `Sales`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `biological_process`, `cell_component`)  VALUES ('Serpentine Receptor, class E (epsilon) CELE_Y39G8B.4', 'protein found in Caenorhabditis elegans', 'Q9U2J1', 'sre-47', 'Y39G8B.4', 'Caenorhabditis elegans', 'NP_496928', 'protein', '7TM GPCR, serpentine receptor class e (Sre)', 'sensory perception of chemical stimulus', 'membrane');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `biological_process`, `cell_component`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `ncbi_locus_tag`, `wormbase_gene_id`, `entrez_gene_id`, `genomic_end`, `genomic_start`, `chromosome`, `ensembl_gene_id`, `strand_orientation`, `refseq_rna_id`, `instance_of`, `encodes`, `ensembl_transcript_id`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Staphylococcus epidermidis ATCC 12228', 'bacterial strain', 'strain', 'Staphylococcus epidermidis ATCC 12228', 'Staphylococcus epidermidis', '176280', 'gram-positive bacteria', 'GCA_000007645.1');\nDatabase State:\n- Table: `ribosomal_protein_s10_domain_superfamily`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Paragraph_ID, Document_ID, Paragraph_Text, Other_Details)  VALUES (16615, 80, 'Japan', NULL);\nDatabase State:\n- Table: Paragraphs, Columns: [Paragraph_ID, Document_ID, Paragraph_Text, Other_Details]",
        "Response": "Table: Paragraphs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('phosphomethylpyrimidine kinase MSMEG_0825', 'microbial gene found in Mycolicibacterium smegmatis MC2 155', 'Mycobacterium smegmatis str. MC2 155', '4530828', 'gene', 'phosphomethylpyrimidine kinase    MSMEG_0825', 'MSMEG_0825', 'gene', '911317', 'reverse strand', '910481');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO officers (case_number, race, gender, last_name, first_name, full_name)  VALUES ('45802Z', 'W', 'M', 'McDonnold', 'Samuel', 'McDonnold, Samuel');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: officers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `protein_of_unknown_function_duf560` (`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`, `subclass_of`)  VALUES ('Hypothetical protein BDGL_000193', 'microbial protein found in Acinetobacter pittii PHEA-2', 'Acinetobacter pittii PHEA-2', 'F0KG65', 'hypothetical protein BDGL_000193', 'protein', 'YP_004994461', 'Tetratricopeptide-like helical domain superfamily', 'protein');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`, `subclass_of`]",
        "Response": "Table: `protein_of_unknown_function_duf560`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO callcenterlogs (`Date received`, `Complaint ID`, `rand client`, phonefinal, `vru+line`, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time)  VALUES ('2015-03-13', 'CR1281150', 'C00004341', '914-951-9533', 'AA0202', 35537, 2, 'PS', 'AGENT', 'MICHAL', '09:35:18', '09:46:02', '00:10:44');\nDatabase State:\n- Table: state, Columns: [StateCode, State, Region]\n- Table: events, Columns: [`Date received`, Product, `Sub-product`, Issue, `Sub-issue`, `Consumer complaint narrative`, Tags, `Consumer consent provided?`, `Submitted via`, `Date sent to company`, `Company response to consumer`, `Timely response?`, `Consumer disputed?`, `Complaint ID`, Client_ID]\n- Table: client, Columns: [client_id, sex, day, month, year, age, social, first, middle, last, phone, email, address_1, address_2, city, state, zipcode, district_id]\n- Table: district, Columns: [district_id, city, state_abbrev, division]\n- Table: callcenterlogs, Columns: [`Date received`, `Complaint ID`, `rand client`, phonefinal, `vru+line`, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time]\n- Table: reviews, Columns: [`Date`, Stars, Reviews, Product, district_id]",
        "Response": "Table: callcenterlogs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Journal_ID`, `Date`, `Theme`, `Sales`)  VALUES (4, 'October 7, 2001', 'at Baltimore Ravens', 7494);\nDatabase State:\n- Table: `journal_committee`, Columns: [`Editor_ID`, `Journal_ID`, `Work_Type`]",
        "Response": "Table: `journal`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO disabled (`name`)  VALUES ('student559');\nDatabase State:\n- Table: person, Columns: [`name`]\n- Table: disabled, Columns: [`name`]\n- Table: bool, Columns: [`name`]\n- Table: unemployed, Columns: [`name`]\n- Table: filed_for_bankrupcy, Columns: [`name`]\n- Table: longest_absense_from_school, Columns: [`name`, `month`]\n- Table: male, Columns: [`name`]\n- Table: enlist, Columns: [`name`, organ]\n- Table: enrolled, Columns: [name, school, month]\n- Table: no_payment_due, Columns: [`name`, bool]",
        "Response": "Table: disabled"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO cars (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num)  VALUES (50, 16, 1, 'bucket', 'short', 'not_double', 'none', 2, 'rectangle', 1);\nDatabase State:\n- Table: cars, Columns: [id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num]\n- Table: trains, Columns: [id, direction]",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (name, school, month)  VALUES ('student576', 'ucsd', 1);\nDatabase State:\n- Table: enlist, Columns: [`name`, organ]\n- Table: male, Columns: [`name`]\n- Table: filed_for_bankrupcy, Columns: [`name`]\n- Table: bool, Columns: [`name`]\n- Table: disabled, Columns: [`name`]\n- Table: longest_absense_from_school, Columns: [`name`, `month`]",
        "Response": "Table: enrolled"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `tatch\u016b` (`label`, `description`, `country`, `image`, `corporate_number_japan`, `instance_of`, `located_in_the_administrative_territorial_entity`, `part_of`, `inception`)  VALUES ('Eiun-in', 'nan', 'Japan', 'Eiun-in part2 in Konkai-komyou-ji temple 20141223.JPG', '5130005002412.0', 'Tatch\u016b', 'Saky\u014d-ku', 'nan', '+1591-00-00T00:00:00Z');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `area`, `dantai_code`, `located_in_the_administrative_territorial_entity`, `country`, `commons_category`, `coordinate_location`, `instance_of`, `freebase_id`, `population`, `geonames_id`, `viaf_id`, `topics_main_category`, `image`, `located_in_time_zone`, `official_website`, `geonlp_id`, `locator_map_image`, `whos_on_first_id`, `worldcat_identities_id`, `inception`, `native_label`, `shares_border_with`, `name_in_kana`]",
        "Response": "Table: `tatch\u016b`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (733, 503, 0.086999999999999994, 60.0, 'Gordon Beer (2006)', 'American Double / Imperial IPA', 12.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `beers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, ParagraphNum, PlainText, character_id, chapter_id)  VALUES (647589, 2171, '                                [Servants bind him.]', 1261, 19108);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `paragraphs`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`People_ID`, `Name`, `Country`, `Is_Male`, `Age`)  VALUES (2, 'Juli Hanson', 'Sweden', 'F', 32);\nDatabase State:\n- Table: `church`, Columns: [`Church_ID`, `Name`, `Organized_by`, `Open_Date`, `Continuation_of`]",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO no_payment_due (`name`, bool)  VALUES ('student166', 'neg');\nDatabase State:\n- Table: bool, Columns: [`name`]\n- Table: no_payment_due, Columns: [`name`, bool]\n- Table: enrolled, Columns: [name, school, month]\n- Table: enlist, Columns: [`name`, organ]\n- Table: male, Columns: [`name`]\n- Table: unemployed, Columns: [`name`]\n- Table: longest_absense_from_school, Columns: [`name`, `month`]",
        "Response": "Table: no_payment_due"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (IMG_ID, ATT_CLASS_ID, OBJ_SAMPLE_ID)  VALUES (2369876, 651, 9);\nDatabase State:\n- Table: IMG_OBJ_ATT, Columns: [IMG_ID, ATT_CLASS_ID, OBJ_SAMPLE_ID]\n- Table: IMG_OBJ, Columns: [IMG_ID, OBJ_SAMPLE_ID, OBJ_CLASS_ID, X, Y, W, H]\n- Table: OBJ_CLASSES, Columns: [OBJ_CLASS_ID, OBJ_CLASS]\n- Table: ATT_CLASSES, Columns: [ATT_CLASS_ID, ATT_CLASS]",
        "Response": "Table: IMG_OBJ_ATT"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, date, violation_type_id, risk_category, description)  VALUES (68421, '2014-09-05', '103129', 'Moderate Risk', 'Insufficient hot water or running water');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: violations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `payment` (payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update)  VALUES (783, 29, 1, 2655, 0.989999999999999992, '2005-06-19 10:38:42.0', '2006-02-15 22:12:35.0');\nDatabase State:\n- Table: `city`, Columns: [city_id, city, country_id, last_update]\n- Table: `film_actor`, Columns: [actor_id, film_id, last_update]\n- Table: `country`, Columns: [country_id, country, last_update]\n- Table: `category`, Columns: [category_id, name, last_update]\n- Table: `address`, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: `inventory`, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: `actor`, Columns: [actor_id, first_name, last_name, last_update]\n- Table: `staff`, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]\n- Table: `rental`, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]\n- Table: `film_category`, Columns: [film_id, category_id, last_update]\n- Table: `language`, Columns: [language_id, name, last_update]\n- Table: `customer`, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: `film`, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]",
        "Response": "Table: `payment`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('mannitol-1-phosphate 5-dehydrogenase SAOUHSC_02403', 'microbial gene found in Staphylococcus aureus subsp. aureus NCTC 8325', 'gene', 'Staphylococcus aureus subsp. aureus NCTC 8325', '3919618', 'SAOUHSC_02403', 'Mannitol-1-phosphate 5-dehydrogenase SAOUHSC_02403', 'gene', '2224803', 'forward strand', '2223697');\nDatabase State:\n- Table: `mannitol_dehydrogenase_n_terminal_domain_protein_family`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `has_parts`, `molecular_function`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Person (person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname)  VALUES ('nm0642104', 'Brian O''Neill', NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Person, Columns: [person_id, name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, series, episode_id, person_id, role, result]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Keyword, Columns: [episode_id, keyword]",
        "Response": "Table: Person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `virulence_factor_mce_protein` (`label`, `description`, `refseq_protein_id`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `part_of`, `instance_of`)  VALUES ('Virulence factor Mce family protein MSMEG_2855', 'microbial protein found in Mycolicibacterium smegmatis MC2 155', 'YP_887175', 'A0QW87', 'Mycobacterium smegmatis str. MC2 155', 'virulence factor Mce family protein MSMEG_2855', 'Mce/MlaD', 'Virulence factor Mce protein', 'protein');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `ncbi_locus_tag`, `entrez_gene_id`, `found_in_taxon`, `subclass_of`, `encodes`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`]\n- Table: `encodes`, Columns: [`label`, `description`, `refseq_protein_id`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `part_of`, `instance_of`]",
        "Response": "Table: `virulence_factor_mce_protein`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Election_ID`, `Counties_Represented`, `District`, `Delegate`, `Party`, `First_Elected`, `Committee`)  VALUES (1, '09.1 9A', 1, 'Bates, Gail H. Gail H. Bates', 1, 2002.0, 'Appropriations');\nDatabase State:\n- Table: `election`, Columns: [`Election_ID`, `Counties_Represented`, `District`, `Delegate`, `Party`, `First_Elected`, `Committee`]",
        "Response": "Table: `election`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity)  VALUES ('Blood Pressure(BP) Diary', 'Really Great wonderfully I access health tools', 'Positive', '0.9', '0.875');\nDatabase State:\n- Table: `playstore`, Columns: [App, Category, Rating, Reviews, Size, Installs, Type, Price, `Content Rating`, Genres]\n- Table: `user_reviews`, Columns: [App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity]",
        "Response": "Table: `user_reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `followed_by`, `time_period`, `end_time`, `start_time`, `sport`, `follows`)  VALUES ('2005\u201306 synchronized skating season', 'nan', 'figure skating season', '2006\u201307 synchronized skating season', '2005-2006 one-year-period', '+2006-06-30T00:00:00Z', '+2005-07-01T00:00:00Z', 'synchronized skating', '2004\u201305 synchronized skating season');\nDatabase State:\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `followed_by`, `time_period`, `end_time`, `start_time`, `sport`, `follows`]\n- Table: `figure_skating_season`, Columns: [`label`, `description`, `sport`, `followed_by`, `instance_of`, `start_time`, `end_time`, `time_period`, `follows`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `image`, `applies_to_jurisdiction`, `country`, `instance_of`, `google_knowledge_graph_id`)  VALUES ('flag of Friesland', 'flag', 'Frisian flag.svg', 'Friesland', 'nan', 'flag of a country subdivision', 'nan');\nDatabase State:\n- Table: `coat_of_arms`, Columns: [`label`, `description`, `instance_of`, `image`, `country`, `applies_to_jurisdiction`, `depicts`, `significant_event`]\n- Table: `borg`, Columns: [`label`, `description`, `country`, `coordinate_location`, `instance_of`, `located_in_the_administrative_territorial_entity`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `coat_of_arms`, `commons_category`, `cbs_municipality_code`, `flag_image`, `coat_of_arms_image`, `locator_map_image`, `country`, `coordinate_location`, `instance_of`, `freebase_id`, `geonames_id`, `shares_border_with`, `topics_main_category`, `image`, `population`, `flag`, `number_of_households`, `official_website`, `located_in_time_zone`, `amsterdam_code`, `pronunciation_audio`, `located_in_the_administrative_territorial_entity`, `category_for_maps`, `inaturalist_place_id`, `area`]",
        "Response": "Table: `flag`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `indolo23_acarbazole_alkaloid` (`label`, `description`, `instance_of`, `pubchem_cid`, `inchi`, `inchikey`, `chemical_formula`, `canonical_smiles`, `isomeric_smiles`, `mass`, `found_in_taxon`)  VALUES ('Fradcarbazole A', 'chemical compound', 'chemical compound', '71517117.0', 'InChI=1S/C39H32N6O3S/c1-39-36(47-3)28(43(2)38-42-19-29(49-38)23-17-40-25-13-7-4-10-20(23)25)16-30(48-39)44-26-14-8-5-11-21(26)32-33-24(18-41-37(33)46)31-22-12-6-9-15-27(22)45(39)35(31)34(32)44/h4-15,17,19,28,30,36,40H,16,18H2,1-3H3,(H,41,46)/t28-,30-,36-,39+/m1/s1', 'SOGUXZBEONSYNB-LIGDEFGWSA-N', 'C\u2083\u2089H\u2083\u2082N\u2086O\u2083S', 'OC1=NCC2=C1C=3C=4C=CC=CC4N5C3C6=C2C=7C=CC=CC7N6C8(OC5CC(N(C9=NC=C(S9)C%10=CNC=%11C=CC=CC%11%10)C)C8OC)C', 'CO[C@@H]1[C@H](N(C)c2ncc(-c3c[nH]c4ccccc34)s2)C[C@H]2O[C@]1(C)n1c3ccccc3c3c4c(c5c6ccccc6n2c5c31)C(O)=NC4', 664.2256598840000379, 'Streptomyces fradiae');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `parent_taxon`, `instance_of`, `encyclopedia_of_life_id`, `worms_id_for_taxa`, `gbif_taxon_id`, `itis_tsn`, `ncbi_taxonomy_id`, `new_zealand_organisms_register_id`, `irmng_id`, `inaturalist_taxon_id`, `commons_category`, `catalogue_of_life_id`, `image`]\n- Table: `indolo23_acarbazole_alkaloid`, Columns: [`label`, `description`, `instance_of`, `pubchem_cid`, `inchi`, `inchikey`, `chemical_formula`, `canonical_smiles`, `isomeric_smiles`, `mass`, `found_in_taxon`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `taxon_rank`, `parent_taxon`, `gbif_taxon_id`, `itis_tsn`, `ncbi_taxonomy_id`, `irmng_id`, `catalogue_of_life_id`]",
        "Response": "Table: `indolo23_acarbazole_alkaloid`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `paragraphs` (id, ParagraphNum, PlainText, character_id, chapter_id)  VALUES (666214, 2964, 'His princess, say you, with him?', 667, 19646);\nDatabase State:\n- Table: `paragraphs`, Columns: [id, ParagraphNum, PlainText, character_id, chapter_id]",
        "Response": "Table: `paragraphs`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, student_id, grade, sat)  VALUES (1, 7, 'A', 5);\nDatabase State:\n- Table: student, Columns: [student_id, f_name, l_name, phone_number, email, intelligence, gpa, type]",
        "Response": "Table: registration"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `natural_product` (`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Bradyrhizobium japonicum USDA 110', 'nan', 'Bradyrhizobium japonicum USDA 110', 'Bradyrhizobium japonicum', '224911', 'taxon', 'Gram-negative bacteria', 'nan');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `flagellar_basal_body_rod_protein_flgb`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `biological_process`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `biological_process`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_name`, `taxon_rank`, `parent_taxon`, `instance_of`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Activity (actid, activity_name)  VALUES (777, 'Soccer');\nDatabase State:\n- Table: Participates_in, Columns: [stuid, actid]\n- Table: Faculty, Columns: [FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]",
        "Response": "Table: Activity"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `subclass_of`, `reactome_id`, `exact_match`, `part_of`)  VALUES ('D4S-BCAN(361-911) [extracellular region]', 'An instance of entity with accessioned sequence in Homo sapiens with Reactome ID (R-HSA-3791193)', 'Homo sapiens', 'Brevican', 'R-HSA-3791193', 'https://identifiers.org/reactome:R-HSA-3791193', 'Brevican(361-911) [extracellular region]');\nDatabase State:\n- Table: `brevican`, Columns: [`label`, `description`, `found_in_taxon`, `subclass_of`, `reactome_id`, `exact_match`, `part_of`]",
        "Response": "Table: `brevican`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `biological_process`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('6-phosphogluconate dehydrogenase LSL_0645', 'microbial protein found in Lactobacillus salivarius UCC118', '6-phosphogluconate dehydrogenase LSL_0645', 'Q1WU80', 'phosphogluconate dehydrogenase (decarboxylating) activity', 'pentose-phosphate shunt', '6-phosphogluconate-binding site', 'Lactobacillus salivarius UCC118', 'YP_535538', 'protein', '6-phosphogluconate dehydrogenase-like, C-terminal domain superfamily', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO People_Addresses (person_address_id, person_id, address_id, date_from, date_to)  VALUES (340, 161, 45, '2017-05-01 17:32:26', '2018-03-09 08:45:06');\nDatabase State:\n- Table: People, Columns: [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]\n- Table: People_Addresses, Columns: [person_address_id, person_id, address_id, date_from, date_to]",
        "Response": "Table: People_Addresses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (address_id, address_details, city, zip_postcode, state_province_county, country)  VALUES (2, '17135 Jaida Fork Suite 798', 'East Brody', '940', 'Colorado', 'USA');\nDatabase State:\n- Table: Regular_Orders, Columns: [regular_order_id, distributer_id]\n- Table: Order_Deliveries, Columns: [location_code, actual_order_id, delivery_status_code, driver_employee_id, truck_id, delivery_date]",
        "Response": "Table: Addresses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (recipe_id, title, subtitle, servings, yield_unit, prep_min, cook_min, stnd_min, source, intro, directions)  VALUES (1088, 'Chicken Mushroom Soup', NULL, 6, NULL, 15, 50, 0, 'The National Broiler Council', 'An easy to prepare soup with light, clear flavors, perfect for a light lunch or the first course at dinner.', 'In large Dutch oven, place chicken breasts. Add water, celery, onion, salt pepper and bay leaves. Bring to a boil over high temperature; reduce heat to low and simmer, covered, about 30 minutes. Remove chicken and bay leaves; skim off fat from broth. Add carrots and macaroni rosettes and return to a boil. Lower heat and simmer about 10 minutes or until rosettes are tender. Remove skin and bones from chicken and discard; chop chicken into bite-size pieces. Add chicken, mushrooms and parsley to Dutch oven and cook until mushrooms are done, about 5 minutes.');\nDatabase State:\n- Table: Nutrition, Columns: [recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories]\n- Table: Ingredient, Columns: [ingredient_id, category, name, plural]",
        "Response": "Table: Recipe"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `commons_category`, `coordinate_location`, `image`)  VALUES ('Shilin District', 'A district of Taipei', 'Taiwan', 'district of Taiwan', 'Taipei', 'Shilin District, Taipei', '25.0833', 'Shilin District Administration Center, Taipei City 20140527.jpg');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `commons_category`, `coordinate_location`, `image`]\n- Table: `astronomical_museum`, Columns: [`label`, `description`, `commons_category`, `instance_of`, `image`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `inception`, `official_website`, `country`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `sex_or_gender`, `occupation`, `given_name`, `country_of_citizenship`, `languages_spoken_written_or_signed`)  VALUES ('Marc Verdaguer Montany\u00e0', 'Spanish politician', 'human', 'male', 'politician', 'Marc', 'Spain', 'Spanish');\nDatabase State:\n- Table: `given_name`, Columns: [`label`, `description`, `language_of_work_or_name`, `instance_of`, `said_to_be_the_same_as`, `native_label`, `writing_system`, `caverphone`, `different_from`, `commons_category`, `soundex`, `cologne_phonetics`]",
        "Response": "Table: `head_of_government`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (section_id, image_id)  VALUES (54, 12);\nDatabase State:\n- Table: Users, Columns: [user_id, role_code, user_name, user_login, password]\n- Table: Roles, Columns: [role_code, role_description]\n- Table: Document_Sections, Columns: [section_id, document_code, section_sequence, section_code, section_title]\n- Table: Document_Structures, Columns: [document_structure_code, parent_document_structure_code, document_structure_description]\n- Table: Documents, Columns: [document_code, document_structure_code, document_type_code, access_count, document_name]\n- Table: Functional_Areas, Columns: [functional_area_code, parent_functional_area_code, functional_area_description]\n- Table: Document_Functional_Areas, Columns: [document_code, functional_area_code]\n- Table: Images, Columns: [image_id, image_alt_text, image_name, image_url]\n- Table: Document_Sections_Images, Columns: [section_id, image_id]",
        "Response": "Table: Document_Sections_Images"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `part_of`, `instance_of`, `followed_by`, `follows`, `google_knowledge_graph_id`)  VALUES ('Isaiah 60', 'Book of Isaiah, chapter 60', 'Isaiah', 'chapter of the Bible', 'Isaiah 61', 'Isaiah 59', '/g/122tp3t2');\nDatabase State:\n- Table: `trito_isaiah`, Columns: [`label`, `description`, `part_of`, `instance_of`, `followed_by`, `follows`, `google_knowledge_graph_id`]\n- Table: `follows`, Columns: [`label`, `description`, `part_of`, `instance_of`, `followed_by`, `follows`, `google_knowledge_graph_id`]\n- Table: `followed_by`, Columns: [`label`, `description`, `part_of`, `instance_of`, `followed_by`, `follows`, `google_knowledge_graph_id`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Song_ID`, `Title`, `Singer_ID`, `Sales`, `Highest_Position`)  VALUES (1, 'Do They Know It''s Christmas', 1, 1094000.0, 1.0);\nDatabase State:\n- Table: `song`, Columns: [`Song_ID`, `Title`, `Singer_ID`, `Sales`, `Highest_Position`]",
        "Response": "Table: `song`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `start_time`, `part_of`, `follows`, `end_time`, `followed_by`)  VALUES ('Devonian', 'fourth period of the Paleozoic era', 'period', '-419200000-00-00T00:00:00Z', 'Paleozoic', 'Silurian', '-358900000-00-00T00:00:00Z', 'Carboniferous');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `system`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `geonames_id`, `gns_unique_feature_id`)  VALUES ('Resguardo Ind\u00edgena Pe\u00f1a Roja', 'nan', 'reservation', 'Colombia', '0.93', 'Caquet\u00e1 Department', '6978535.0', '10436043.0');\nDatabase State:\n- Table: `political_border`, Columns: [`label`, `description`, `capital`, `commons_category`, `country`, `iso_3166_2_code`, `locator_map_image`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `shares_border_with`, `topics_main_category`, `instance_of`, `freebase_id`, `fips_10_4_countries_and_regions`, `geonames_id`, `population`, `image`, `area`, `official_website`, `inception`, `language_used`, `whos_on_first_id`, `openstreetmap_relation_id`, `geoshape`, `inaturalist_place_id`, `musicbrainz_area_id`, `getty_thesaurus_of_geographic_names_id`]\n- Table: `used_language`, Columns: [`label`, `description`, `iso_639_3_code`, `instance_of`, `freebase_id`, `ietf_language_tag`, `subclass_of`, `topics_main_category`, `glottolog_code`, `country`, `indigenous_to`, `ethnologuecom_language_code`, `ethnologue_language_status`, `exact_match`]\n- Table: `capital_city`, Columns: [`label`, `description`, `inception`, `country`, `commons_category`, `image`, `coordinate_location`, `instance_of`, `topics_main_category`, `located_in_the_administrative_territorial_entity`, `freebase_id`, `official_website`, `geonames_id`, `viaf_id`, `capital_of`, `population`, `encyclop\u00e6dia_britannica_online_id`, `elevation_above_sea_level`, `area`, `whos_on_first_id`]\n- Table: `reservation`, Columns: [`label`, `description`, `instance_of`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `geonames_id`, `gns_unique_feature_id`]\n- Table: `administrative_centre`, Columns: [`label`, `description`, `openstreetmap_relation_id`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `capital`, `instance_of`, `population`, `area`, `flag_image`, `commons_category`, `iso_3166_2_code`, `locator_map_image`, `shares_border_with`, `topics_main_category`, `freebase_id`, `fips_10_4_countries_and_regions`, `geonames_id`, `musicbrainz_area_id`, `inception`, `official_website`, `language_used`, `whos_on_first_id`, `geoshape`, `inaturalist_place_id`, `getty_thesaurus_of_geographic_names_id`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `flag_image`, `commons_category`, `capital`, `country`, `iso_3166_2_code`, `locator_map_image`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `shares_border_with`, `topics_main_category`, `musicbrainz_area_id`, `instance_of`, `freebase_id`, `fips_10_4_countries_and_regions`, `geonames_id`, `official_website`, `population`, `openstreetmap_relation_id`, `area`, `inception`, `image`, `whos_on_first_id`, `geoshape`, `inaturalist_place_id`, `getty_thesaurus_of_geographic_names_id`]",
        "Response": "Table: `reservation`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit)  VALUES (11568, 'CA-2014-159464', '2016-05-18', '2016-05-19', 'First Class', 'TB-21355', 'South', 'TEC-PH-10002185', 34.75, 5, 0.0, 15.63749999999999929);\nDatabase State:\n- Table: product, Columns: [`Product ID`, `Product Name`, Category, `Sub-Category`, Region]",
        "Response": "Table: south_superstore"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `population`, `dewey_decimal_classification`, `twinned_administrative_body`, `head_of_government`, `located_in_the_administrative_territorial_entity`, `commons_category`, `coat_of_arms_image`, `locator_map_image`, `instance_of`, `flag_image`, `local_dialing_code`, `postal_code`, `located_in_time_zone`, `coordinate_location`, `gnd_id`, `topics_main_category`, `official_website`, `page_banner`, `licence_plate_code`, `commons_gallery`, `musicbrainz_area_id`, `freebase_id`, `shares_border_with`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `category_of_associated_people`, `image`, `located_in_or_next_to_body_of_water`, `described_by_source`, `library_of_congress_authority_id`, `elevation_above_sea_level`, `encyclop\u00e6dia_britannica_online_id`, `area`, `openstreetmap_relation_id`, `quora_topic_id`, `native_label`, `official_name`, `great_russian_encyclopedia_online_id`, `member_of`, `archinform_location_id`, `national_library_of_israel_id_old`, `viaf_id`, `nkcr_aut_id`, `whos_on_first_id`, `inaturalist_place_id`, `category_for_maps`, `worldcat_identities_id`, `gadm_id`, `factgrid_item_id`, `national_library_of_israel_j9u_id`, `store_norske_leksikon_id`, `museum_digital_place_id`, `sbn_place_id`, `den_store_danske_id`, `online_pwn_encyclopedia_id`, `country`, `capital_of`)  VALUES ('Bonn', 'city in and former capital of Germany', 331885.0, '2--435518', 'Oxford', 'Katja D\u00f6rner', 'Cologne Government Region', 'Bonn', 'DEU Bonn COA.svg', 'North rhine w BN.svg', 'urban municipality of Germany', 'Flagge der kreisfreien Stadt Bonn.svg', '228', '53111\u201353229', 'UTC+01:00', '50.733888888889', '4007666-0', 'Category:Bonn', 'https://www.bonn.de/', 'Bonn banner Panorama ove central city.jpg', 'BN', 'Bonn', 'b86b7e97-c4e2-4ec2-942b-5a6cd8eea1da', '/m/0150n', 'Rhein-Sieg District', 'Category:Born in Bonn', 'Category:Deaths in Bonn', '3247450.0', 'Category:People from Bonn', 'Altes Rathaus Bonn.jpg', 'Rhine', 'Great Soviet Encyclopedia (1926\u20131947)', 'n79046411', 60.0, 'place/Bonn', 141.0600000000000022, '62508.0', 'Bonn-Germany', 'Bonn', 'Bonn', '1877780.0', 'Landschaftsverband Rheinland', '384.0', '975213.0', '312793885.0', 'ge134078', '101748595.0', '98425.0', 'Category:Maps of Bonn', 'lccn-n79046411', 'DEU.10.3_1', 'Q10314', '9.870075618237052e+17', 'Bonn', '380.0', 'MILL000430', 'Bonn', '3879436.0', 'Germany', 'Germany');\nDatabase State:\n- Table: `specialized_bank`, Columns: [`label`, `description`, `headquarters_location`, `country`, `inception`, `instance_of`, `legal_form`, `official_website`, `iso_9362_swiftbic_code`]\n- Table: `capital_city`, Columns: [`label`, `description`, `locator_map_image`, `coordinate_location`, `image`, `located_in_the_administrative_territorial_entity`, `country`, `category_for_people_who_died_here`, `dewey_decimal_classification`, `page_banner`, `commons_category`, `gnd_id`, `coat_of_arms_image`, `instance_of`, `german_municipality_key`, `local_dialing_code`, `located_in_time_zone`, `flag_image`, `twinned_administrative_body`, `licence_plate_code`, `topics_main_category`, `postal_code`, `musicbrainz_area_id`, `freebase_id`, `biblioth\u00e8que_nationale_de_france_id`, `idref_id`, `category_for_people_born_here`, `geonames_id`, `category_of_associated_people`, `official_website`, `population`, `head_of_government`, `located_in_or_next_to_body_of_water`, `shares_border_with`, `nuts_code`, `described_by_source`, `capital_of`, `commons_gallery`, `facebook_places_id`, `area`, `library_of_congress_authority_id`, `elevation_above_sea_level`, `quora_topic_id`, `short_name`, `archives_at`, `openstreetmap_relation_id`, `member_of`, `official_name`, `encyclop\u00e6dia_britannica_online_id`, `archinform_location_id`, `national_library_of_israel_id_old`, `native_label`, `great_russian_encyclopedia_online_id`, `nkcr_aut_id`, `viaf_id`, `whos_on_first_id`, `inaturalist_place_id`, `category_for_maps`, `worldcat_identities_id`, `grove_art_online_id`, `gadm_id`, `factgrid_item_id`, `national_library_of_israel_j9u_id`, `store_norske_leksikon_id`, `museum_digital_place_id`, `sbn_place_id`, `den_store_danske_id`, `online_pwn_encyclopedia_id`]\n- Table: `place_of_death`, Columns: [`label`, `description`, `instance_of`, `category_combines_topics`, `opposite_of`, `category_contains`, `commons_category`]\n- Table: `source_of_information`, Columns: [`label`, `description`, `instance_of`, `language_of_work_or_name`]\n- Table: `twin_town`, Columns: [`label`, `description`, `dewey_decimal_classification`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `commons_category`, `coordinate_location`, `coat_of_arms_image`, `image`, `official_website`, `twinned_administrative_body`, `freebase_id`, `locator_map_image`, `topics_main_category`, `category_for_people_born_here`, `category_for_people_who_died_here`, `viaf_id`, `musicbrainz_area_id`, `elevation_above_sea_level`, `area`, `official_name`, `postal_code`, `openstreetmap_relation_id`, `geonames_id`, `gnd_id`, `capital_of`, `category_of_associated_people`, `population`, `whos_on_first_id`, `worldcat_identities_id`, `getty_thesaurus_of_geographic_names_id`, `head_of_government`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `page_banner`, `commons_gallery`, `located_in_time_zone`, `described_by_source`, `nkcr_aut_id`, `curlie_id`, `category_for_maps`, `different_from`, `factgrid_item_id`, `store_norske_leksikon_id`, `online_pwn_encyclopedia_id`, `sbn_place_id`, `den_store_danske_id`, `gran_enciclop\u00e8dia_catalana_id`]",
        "Response": "Table: `headquarters`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `part_of`, `country`, `followed_by`, `sport`, `series_ordinal`, `point_in_time`, `start_point`, `destination_point`, `event_distance`, `instance_of`, `procyclingstats_race_id`, `winner`, `stage_classification`, `general_classification_of_race_participants`, `follows`)  VALUES ('2018 Tour of Qinghai Lake, stage 2', 'stage of the Tour of Qinghai Lake', '2018 Tour of Qinghai Lake', 'People''s Republic of China', '2018 Tour of Qinghai Lake, stage 3', 'road bicycle racing', '2', '+2018-07-23T00:00:00Z', 'Xining', 'Xining', 115.0, 'plain stage', '181594', 'Brenton Jones', 'Brenton Jones', 'Brenton Jones', '2018 Tour of Qinghai Lake, stage 1');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `2018_tour_of_qinghai_lake`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `rubidium` (`label`, `description`, `subclass_of`, `atomic_number`, `neutron_number`, `decays_to`, `half_life`, `instance_of`)  VALUES ('rubidium-98', 'isotope of rubidium', 'rubidium', 37.0, 61.0, 'strontium-96', 102.0, 'isotope of rubidium');\nDatabase State:\n- Table: `decays_to`, Columns: [`label`, `description`, `subclass_of`, `instance_of`, `atomic_number`, `neutron_number`, `decays_to`, `half_life`, `spin_quantum_number`, `parity_quantum_number`, `mass`, `mass_excess`, `binding_energy`, `wolfram_language_entity_code`]",
        "Response": "Table: `rubidium`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ID, course_id, sec_id, semester, year, grade)  VALUES ('35198', '642', '1', 'Fall', 2004, 'B+');\nDatabase State:\n- Table: instructor, Columns: [ID, name, dept_name, salary]",
        "Response": "Table: takes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`lost_in_battle`, `id`, `name`, `tonnage`, `ship_type`, `location`, `disposition_of_ship`)  VALUES (8, 1, 'Lettice', 't', 'Brig', 'English Channel', 'Captured');\nDatabase State:\n- Table: `ship`, Columns: [`lost_in_battle`, `id`, `name`, `tonnage`, `ship_type`, `location`, `disposition_of_ship`]",
        "Response": "Table: `ship`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `political_border` (`label`, `description`, `coat_of_arms`, `commons_category`, `flag_image`, `coat_of_arms_image`, `cbs_municipality_code`, `locator_map_image`, `country`, `coordinate_location`, `instance_of`, `shares_border_with`, `freebase_id`, `image`, `geonames_id`, `contains_settlement`, `topics_main_category`, `official_website`, `population`, `number_of_households`, `located_in_time_zone`, `postal_code`, `area`, `elevation_above_sea_level`, `flag`, `amsterdam_code`, `located_in_the_administrative_territorial_entity`, `musicbrainz_area_id`, `inaturalist_place_id`, `email_address`, `rkd_thesaurus_id`, `kvk_company_id`, `telephone_number`, `pronunciation_audio`, `category_for_maps`)  VALUES ('Eersel', 'municipality in the Netherlands', 'nan', 'Eersel', 'Eersel vlag.svg', 'Coat of arms of Eersel.svg', '770', 'NL - locator map municipality code GM0770 (2016).png', 'Netherlands', '51.3572', 'municipality of the Netherlands', 'Oirschot', '/m/0vl9h', 'Gemeentehuis Eersel.jpg', '2756341.0', 'Eersel', 'Category:Eersel', 'http://www.eersel.nl/', 19528.0, 7576.0, 'UTC+01:00', '5511\u20135525', 181.7199999999999989, 31.0, 'flag of Eersel', '10741.0', 'North Brabant', 'dadc47da-6537-4fef-8d78-da5378115047', '17255.0', 'mailto:gemeente@eersel.nl', '97459.0', '17273265.0', '31497531300.0', '188 Eersel.ogg', 'Category:Maps of Eersel');\nDatabase State:\n- Table: `flag`, Columns: [`label`, `description`, `image`, `applies_to_jurisdiction`, `country`, `instance_of`, `google_knowledge_graph_id`]\n- Table: `jurisdiction`, Columns: [`label`, `description`, `coat_of_arms`, `commons_category`, `flag_image`, `coat_of_arms_image`, `cbs_municipality_code`, `locator_map_image`, `country`, `coordinate_location`, `instance_of`, `shares_border_with`, `freebase_id`, `image`, `geonames_id`, `contains_settlement`, `topics_main_category`, `official_website`, `population`, `number_of_households`, `located_in_time_zone`, `postal_code`, `area`, `elevation_above_sea_level`, `flag`, `amsterdam_code`, `located_in_the_administrative_territorial_entity`, `musicbrainz_area_id`, `inaturalist_place_id`, `email_address`, `rkd_thesaurus_id`, `kvk_company_id`, `telephone_number`, `pronunciation_audio`, `category_for_maps`]\n- Table: `capital_city`, Columns: [`label`, `description`, `country`, `commons_category`, `instance_of`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `bag_residence_id`, `located_in_time_zone`, `geonames_id`, `capital_of`, `whos_on_first_id`, `rkd_thesaurus_id`]",
        "Response": "Table: `political_border`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`head_ID`, `name`, `born_state`, `age`)  VALUES (3, 'K. J. Choi', 'Alabama', 69.0);\nDatabase State:\n- Table: `department`, Columns: [`Department_ID`, `Name`, `Creation`, `Ranking`, `Budget_in_Billions`, `Num_Employees`]\n- Table: `management`, Columns: [`department_ID`, `head_ID`, `temporary_acting`]\n- Table: `head`, Columns: [`head_ID`, `name`, `born_state`, `age`]",
        "Response": "Table: `head`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Asset_Parts (asset_id, part_id)  VALUES (3, 1);\nDatabase State:\n- Table: Maintenance_Engineers, Columns: [engineer_id, company_id, first_name, last_name, other_details]\n- Table: Skills_Required_To_Fix, Columns: [part_fault_id, skill_id]",
        "Response": "Table: Asset_Parts"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Aircraft_ID`, `Order_Year`, `Manufacturer`, `Model`, `Fleet_Series`, `Powertrain`, `Fuel_Propulsion`)  VALUES (2, 1996, 'Gillig', 'Phantom (High Floor)', '465-467 (3)', 'DD S50 Allison WB-400R', 'Diesel');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `aircraft`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Teams (year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF)  VALUES (1993, 'NHL', 'CAL', 'CAL', 'WC', 'PC', 1, 'CQF', 84, 42, 29, 13, NULL, 97, NULL, NULL, 302, 256, 'Calgary Flames', '1847', '16', '87', '410', '9', '90', '465', '16');\nDatabase State:\n- Table: Master, Columns: [playerID, coachID, hofID, firstName, lastName, nameNote, nameGiven, nameNick, height, weight, shootCatch, legendsID, ihdbID, hrefID, firstNHL, lastNHL, firstWHA, lastWHA, pos, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity, deathYear, deathMon, deathDay, deathCountry, deathState, deathCity]",
        "Response": "Table: Teams"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Crime (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11350621, 'JB310597', '6/17/2018 8:50', '050XX S INDIANA AVE', '1310', 'CHA HALLWAY/STAIRWELL/ELEVATOR', 'FALSE', 'FALSE', 224, 2, 3, 38, '14', '41.8033916', '-87.6210613');\nDatabase State:\n- Table: IUCR, Columns: [iucr_no, primary_description, secondary_description, index_code]\n- Table: FBI_Code, Columns: [fbi_code_no, title, description, crime_against]\n- Table: Crime, Columns: [report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude]\n- Table: Community_Area, Columns: [community_area_no, community_area_name, side, population]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('glutamyl-tRNA synthetase O3K_07390', 'microbial gene found in Escherichia coli O104:H4 str. 2011C-3493', '13702937', 'gene', 'Glutamyl-tRNA synthetase O3K_07390', 'Escherichia coli O104:H4 str. 2011C-3493', 'forward strand', '1532344.0', '1530929.0', 'gene', 'O3K_07390');\nDatabase State:\n- Table: `glutamate_trna_ligase_bacterial_mitochondrial`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `refseq_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `has_parts`, `molecular_function`, `biological_process`, `part_of`, `instance_of`)  VALUES ('Putative protein-tyrosine phosphatase BF4208', 'microbial protein found in Bacteroides fragilis YCH46', 'Q64NI1', 'YP_101485', 'Bacteroides fragilis YCH46', 'protein', 'putative protein-tyrosine phosphatase BF4208', 'Phosphotyrosine protein phosphatase I', 'protein tyrosine phosphatase activity', 'peptidyl-tyrosine dephosphorylation', 'Protein-tyrosine phosphatase, low molecular weight', 'protein');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `protein_tyrosine_phosphatase_low_molecular_weight`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `instance_of`, `freebase_id`, `image`)  VALUES ('St. Mary''s Hospital', 'former hospital in Scranton, Pennsylvania, United States', 'nan', 'United States of America', '41.39481069024478', 'Scranton', 'hospital', 'nan', 'nan');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `commons_category`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `population`, `area`, `locator_map_image`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `commons_category`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `instance_of`, `freebase_id`, `image`]\n- Table: `fixed_base_operator`, Columns: [`label`, `description`, `country`, `freebase_id`, `instance_of`, `inception`]\n- Table: `part`, Columns: [`label`, `description`, `freebase_id`, `instance_of`, `locator_map_image`, `commons_category`, `has_parts`, `quora_topic_id`, `viaf_id`, `nkcr_aut_id`, `topics_main_category`, `part_of`, `coordinate_location`]\n- Table: `head_of_state`, Columns: [`label`, `description`, `place_of_birth`, `date_of_birth`, `image`, `country_of_citizenship`, `educated_at`, `occupation`, `sex_or_gender`, `instance_of`, `viaf_id`, `commons_category`, `gnd_id`, `freebase_id`, `languages_spoken_written_or_signed`, `name_in_native_language`, `munzinger_person_id`, `given_name`, `worldcat_identities_id`, `position_held`, `opensanctions_id`]\n- Table: `given_name`, Columns: [`label`, `description`, `instance_of`, `native_label`, `writing_system`, `different_from`, `language_of_work_or_name`, `said_to_be_the_same_as`, `soundex`, `cologne_phonetics`, `caverphone`, `commons_category`]\n- Table: `country`, Columns: [`label`, `description`, `great_russian_encyclopedia_online_id`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `coordinates_of_southernmost_point`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `new_york_times_topic_id`, `babelnet_id`, `geonames_id`, `gnd_id`, `unicode_character`, `category_of_associated_people`, `emergency_phone_number`, `unesco_thesaurus_id`, `electrical_plug_type`, `hashtag`, `coordinates_of_westernmost_point`, `geography_of_topic`, `iso_3166_1_alpha_3_code`, `official_name`, `office_held_by_head_of_government`, `quora_topic_id`, `curlie_id`, `country`, `mesh_descriptor_id`, `ituisoiec_object_identifier`, `musicbrainz_area_id`, `has_quality`, `coat_of_arms_image`, `number_of_out_of_school_children`, `insee_countries_and_foreign_territories_code`, `diplomatic_relation`, `inception`, `commons_gallery`, `legislative_body`, `civicus_monitor_country_entry`, `history_of_topic`, `gran_enciclop\u00e8dia_catalana_id`, `stw_thesaurus_for_economics_id`, `official_language`, `native_label`, `continent`, `capital`, `official_website`, `coat_of_arms`, `demonym`, `geoshape`, `national_library_of_israel_id_old`, `marriageable_age`, `on_focus_list_of_wikimedia_project`, `wipo_st3`, `coordinates_of_northernmost_point`, `coordinates_of_easternmost_point`, `nkcr_aut_id`, `mobile_country_code`, `total_fertility_rate`, `maritime_identification_digits`, `us_national_archives_identifier`, `asc_leiden_thesaurus_id`, `shares_border_with`, `flag_image`, `openstreetmap_relation_id`, `topics_main_category`, `head_of_government`, `head_of_state`, `biblioth\u00e8que_nationale_de_france_id`, `category_of_people_buried_here`, `locator_map_image`, `motto_text`, `age_of_majority`, `dewey_decimal_classification`, `area`, `le_monde_diplomatique_subject_id`, `ioc_country_code`, `member_of`, `fast_id`, `unemployment_rate`, `viaf_id`, `licence_plate_code`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `gs1_country_code`, `page_banner`, `category_for_films_shot_at_this_location`, `executive_body`, `category_for_people_who_died_here`, `yso_id`, `anthem`, `office_held_by_head_of_state`, `life_expectancy`, `commons_category`, `top_level_internet_domain`, `instance_of`, `highest_point`, `short_name`, `driving_side`, `bbc_things_id`, `gacs_id`, `lowest_point`, `iso_3166_1_numeric_code`, `located_in_time_zone`, `idref_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `country_calling_code`, `freebase_id`, `statoids_id`, `nalt_id`, `library_of_congress_authority_id`, `iso_3166_1_alpha_2_code`, `flag`, `coordinate_location`, `fips_10_4_countries_and_regions`, `isni`, `brockhaus_enzyklop\u00e4die_online_id`, `iab_code`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `central_bank`, `basic_form_of_government`, `language_used`, `comic_vine_id`, `world_encyclopedia_of_puppetry_arts_id`, `whos_on_first_id`, `dr_topic_id`, `treccanis_dizionario_di_storia_id`, `subreddit`, `omegawiki_defined_meaning`, `hds_id`, `mains_voltage`, `culture`, `geonlp_id`, `part_of`, `analysis_policy_observatory_term_id`, `category_for_maps`, `vat_rate`, `french_vikidia_id`, `spanish_vikidia_id`, `pronunciation_audio`, `eurovoc_id`, `worldcat_identities_id`, `kbpedia_id`, `open_data_portal`, `gynopedia_id`, `rkd_thesaurus_id`, `grove_art_online_id`, `interlingual_index_id`, `economy_of_topic`, `tasteatlas_id`, `uk_parliament_thesaurus_id`, `jewish_encyclopedia_id_russian`, `github_topic`, `namuwiki_id`, `wordnet_31_synset_id`, `demographics_of_topic`, `inaturalist_place_id`, `joconde_location_id`, `zhihu_topic_id`, `krugosvet_article`, `store_norske_leksikon_id`, `den_store_danske_id`, `described_by_source`, `schoenberg_database_of_manuscripts_place_id`, `treccani_id`, `the_world_factbook_country_id`, `national_library_of_israel_j9u_id`, `democracy_index`, `postimees_topic_id`, `ysa_id`, `yle_topic_id`, `wikisimpsons_id`, `urban_electric_transit_country_id`, `bbc_news_topic_id`, `m49_code`, `online_pwn_encyclopedia_id`, `alltrails_trail_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `gini_coefficient`, `pm20_geo_code`, `obo_gazetteer_id`, `openstreetmap_element`, `happy_planet_index_score`, `category_for_people_born_here`, `museum_digital_place_id`]",
        "Response": "Table: `place_of_birth`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `political_border` (`label`, `description`, `commons_category`, `dantai_code`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `official_website`, `ndl_authority_id`, `instance_of`, `freebase_id`, `population`, `geonames_id`, `flag_image`, `viaf_id`, `topics_main_category`, `image`, `corporate_number_japan`, `native_label`, `located_in_time_zone`, `name_in_kana`, `area`, `musicbrainz_area_id`, `opencorporates_id`, `geonlp_id`, `locator_map_image`, `openstreetmap_relation_id`, `japan_search_name_id`, `shares_border_with`, `whos_on_first_id`, `worldcat_identities_id`, `inception`, `replaces`, `inaturalist_place_id`)  VALUES ('Tokushima Prefecture', 'prefecture of Japan', 'Tokushima prefecture', '360007.0', 'Japan', 'Japan', '34.06575', 'https://www.pref.tokushima.lg.jp/', '261612.0', 'prefecture of Japan', '/m/0191n9', 721721.0, '1850157', 'Flag of Tokushima Prefecture.svg', '159490461', 'Category:Tokushima Prefecture', 'Tokushima prefectural office building02s3200.jpg', '4000020360007.0', '\u5fb3\u5cf6\u770c', 'UTC+09:00', '\u3068\u304f\u3057\u307e\u3051\u3093', 4144.949999999999819, 'da3ba6e6-6602-43f1-868a-412a0269dd87', 'jp/4000020360007', 'ThsgKW', 'Japan tokushima map small.png', '3795000.0', '\u5fb3\u5cf6\u770c', 'Ehime Prefecture', '85672729.0', 'lccn-n83317790', '+1880-03-02T00:00:00Z', 'Tokushima Domain', '10933');\nDatabase State:\n- Table: `replacing_subject`, Columns: [`label`, `description`, `commons_category`, `dantai_code`, `country`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `official_website`, `ndl_authority_id`, `instance_of`, `freebase_id`, `population`, `geonames_id`, `flag_image`, `viaf_id`, `topics_main_category`, `image`, `corporate_number_japan`, `native_label`, `located_in_time_zone`, `name_in_kana`, `area`, `musicbrainz_area_id`, `opencorporates_id`, `geonlp_id`, `locator_map_image`, `openstreetmap_relation_id`, `japan_search_name_id`, `shares_border_with`, `whos_on_first_id`, `worldcat_identities_id`, `inception`, `replaces`, `gns_unique_feature_id`, `babelnet_id`, `google_news_topics_id`, `inaturalist_place_id`]",
        "Response": "Table: `political_border`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('hypothetical protein KVU_2135', 'microbial gene found in Ketogulonicigenium vulgare WSH-001', 'protein-coding gene', 'Ketogulonicigenium vulgare WSH-001', '12375057', 'KVU_2135', 'Hypothetical protein KVU_2135', 'gene', '2249762', 'reverse strand', '2249517');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `taxon_rank`, `parent_taxon`, `taxon_name`, `instance_of`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `mesh_descriptor_id`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`, `openalex_id`, `catalogue_of_life_id`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `cell_component`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `instance_of`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `transglycosylase_associated_protein`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `found_in_taxon`, `cell_component`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EVENTID, REFID, EVENT_DATE, AMOUNT)  VALUES (3288375, 346063, '2007-06-29 12:00:00.0', 13.54100000000000036);\nDatabase State:\n- Table: `Mailings1_2`, Columns: [REFID, REF_DATE, RESPONSE]",
        "Response": "Table: `Sales`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO twitter (TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, `text`, LocationID, UserID)  VALUES ('tw-698159553460867072', 'Friday', 7, 12, 'en', 'TRUE', 216, 5, 0, 34, -2.0, 'RT @rsenthil2020: @8KMilesChat For Amazon RDS - currently it is not supported &amp; AWS CloudTrail - currently it is not supported #8KCloudChat', 3135, 'tw-352174732');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: twitter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('hypothetical protein PP_0891', 'microbial gene found in Pseudomonas putida KT2440', 'Pseudomonas putida KT2440', '1044779', 'gene', 'Hypothetical protein PP_0891', 'PP_0891', 'gene', '1033961', 'forward strand', '1033380');\nDatabase State:\n- Table: `lipid_polyisoprenoid_binding_ycei_like_protein_family`, Columns: [`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `subclass_of`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `chromosome` (`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`)  VALUES ('mouse chromosome 10', 'Mus musculus chromosome', 'NC_000076', 'house mouse', 'chromosome');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `ensembl_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]",
        "Response": "Table: `chromosome`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `found_in_taxon`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('FixL-related histidine kinase SRU_1122', 'microbial protein found in Salinibacter ruber DSM 13855', 'Salinibacter ruber DSM 13855', 'protein', 'FixL-related histidine kinase SRU_1122', 'Q2S3I2', 'protein', 'YP_445249', 'Signal transduction histidine kinase, dimerisation/phosphoacceptor domain superfamily');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `pages`, `title`, `author_name_string`, `publication_date`, `issue`, `volume`, `published_in`, `instance_of`, `pubmed_id`, `doi`, `language_of_work_or_name`)  VALUES ('Human platelet myosin light chain kinase requires the calcium-binding protein calmodulin for activity', 'scientific article published on April 1, 1979', '1653\u20131657', 'Human platelet myosin light chain kinase requires the calcium-binding protein calmodulin for activity', 'D. R. Hathaway', '+1979-04-01T00:00:00Z', '4', '76', 'Proceedings of the National Academy of Sciences of the United States of America', 'scholarly article', '156362', '10.1073/PNAS.76.4.1653', 'English');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `citation`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`No`)  VALUES (29, 'Mount Vedeer', 'Napa', 'California', 'North Coast', 'Yes');\nDatabase State:\n- Table: `grapes`, Columns: [`ID`]\n- Table: `wine`, Columns: [`No`]",
        "Response": "Table: `appellations`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Available_Policies (Policy_ID, policy_type_code, Customer_Phone)  VALUES (993, 'Property Insurance', '405.090.8654x021');\nDatabase State:\n- Table: Customers, Columns: [Customer_ID, Customer_name]",
        "Response": "Table: Available_Policies"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (year, lgID, tmID, oppID, W, L, T, OTL)  VALUES (1999, 'NHL', 'LAK', 'NYR', 1, 1, 0, '0');\nDatabase State:\n- Table: AwardsCoaches, Columns: [coachID, award, year, lgID, note]\n- Table: Master, Columns: [playerID, coachID, hofID, firstName, lastName, nameNote, nameGiven, nameNick, height, weight, shootCatch, legendsID, ihdbID, hrefID, firstNHL, lastNHL, firstWHA, lastWHA, pos, birthYear, birthMon, birthDay, birthCountry, birthState, birthCity, deathYear, deathMon, deathDay, deathCountry, deathState, deathCity]\n- Table: TeamsHalf, Columns: [year, lgID, tmID, half, rank, G, W, L, T, GF, GA]\n- Table: TeamSplits, Columns: [year, lgID, tmID, hW, hL, hT, hOTL, rW, rL, rT, rOTL, SepW, SepL, SepT, SepOL, OctW, OctL, OctT, OctOL, NovW, NovL, NovT, NovOL, DecW, DecL, DecT, DecOL, JanW, JanL, JanT, JanOL, FebW, FebL, FebT, FebOL, MarW, MarL, MarT, MarOL, AprW, AprL, AprT, AprOL]\n- Table: SeriesPost, Columns: [year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L, T, GoalsWinner, GoalsLoser, note]\n- Table: Scoring, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, `+/-`, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, `Post+/-`, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]\n- Table: AwardsPlayers, Columns: [playerID, award, year, lgID, note, pos]\n- Table: Coaches, Columns: [coachID, year, tmID, lgID, stint, notes, g, w, l, t, postg, postw, postl, postt]\n- Table: CombinedShutouts, Columns: [year, month, date, tmID, oppID, `R/P`, IDgoalie1, IDgoalie2]\n- Table: TeamsPost, Columns: [year, lgID, tmID, G, W, L, T, GF, GA, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: HOF, Columns: [year, hofID, name, category]\n- Table: ScoringShootout, Columns: [playerID, year, stint, tmID, S, G, GDG]\n- Table: Teams, Columns: [year, lgID, tmID, franchID, confID, divID, rank, playoff, G, W, L, T, OTL, Pts, SoW, SoL, GF, GA, name, PIM, BenchMinor, PPG, PPC, SHA, PKG, PKC, SHF]\n- Table: ScoringSup, Columns: [playerID, year, PPA, SHA]\n- Table: ScoringSC, Columns: [playerID, year, tmID, lgID, pos, GP, G, A, Pts, PIM]\n- Table: GoaliesSC, Columns: [playerID, year, tmID, lgID, GP, Min, W, L, T, SHO, GA]",
        "Response": "Table: TeamVsTeam"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `refseq_protein_id`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `instance_of`, `part_of`)  VALUES ('Hypothetical protein ML1025', 'microbial protein found in Mycobacterium leprae TN', 'NP_301758', 'Q7AQB0', 'Mycobacterium leprae TN', 'hypothetical protein ML1025', 'Putative LytR/CpsA/Psr regulator, C-terminal domain', 'protein', 'membrane proteins');\nDatabase State:\n- Table: `putative_lytr_cpsa_psr_regulator_c_terminal_domain_protein_family`, Columns: [`label`, `description`, `refseq_protein_id`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `instance_of`, `part_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `ncbi_locus_tag`, `encodes`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`]\n- Table: `encodes`, Columns: [`label`, `description`, `refseq_protein_id`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `instance_of`, `part_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO violation (inspection_id, point_id, fine, inspector_comment)  VALUES (1385508, 43, 0, 'VIOLATION CORRECTED');\nDatabase State:\n- Table: employee, Columns: [employee_id, first_name, last_name, address, city, state, zip, phone, title, salary, supervisor]",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`architect_id`, `id`, `name`, `location`, `length_meters`, `length_feet`)  VALUES (4, 7, 'Gaotun Natural Bridge', 'Guizhou , China', 70.0, 230.0);\nDatabase State:\n- Table: `mill`, Columns: [`architect_id`, `id`, `location`, `name`, `type`, `built_year`, `notes`]\n- Table: `architect`, Columns: [`id`, `name`, `nationality`, `gender`]",
        "Response": "Table: `bridge`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Date received`, Product, `Sub-product`, Issue, `Sub-issue`, `Consumer complaint narrative`, Tags, `Consumer consent provided?`, `Submitted via`, `Date sent to company`, `Company response to consumer`, `Timely response?`, `Consumer disputed?`, `Complaint ID`, Client_ID)  VALUES ('2013-03-06', 'Credit card', NULL, 'Credit reporting', NULL, NULL, NULL, 'N/A', 'Referral', '2013-03-07', 'Closed with explanation', 'Yes', 'No', 'CR0342923', 'C00002252');\nDatabase State:\n- Table: events, Columns: [`Date received`, Product, `Sub-product`, Issue, `Sub-issue`, `Consumer complaint narrative`, Tags, `Consumer consent provided?`, `Submitted via`, `Date sent to company`, `Company response to consumer`, `Timely response?`, `Consumer disputed?`, `Complaint ID`, Client_ID]\n- Table: client, Columns: [client_id, sex, day, month, year, age, social, first, middle, last, phone, email, address_1, address_2, city, state, zipcode, district_id]\n- Table: callcenterlogs, Columns: [`Date received`, `Complaint ID`, `rand client`, phonefinal, `vru+line`, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time]\n- Table: district, Columns: [district_id, city, state_abbrev, division]",
        "Response": "Table: events"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `follows` (`label`, `description`, `language_of_work_or_name`, `instance_of`, `part_of`, `title`, `followed_by`, `author`, `follows`)  VALUES ('The Peony Pavilion - 41. Delayed for the Examination', 'nan', 'Chinese', 'play', 'The Peony Pavilion', '\u803d\u8a66', 'The Peony Pavilion - 42. Transferring on Huai''an', 'Tang Xianzu', 'The Peony Pavilion - 40. The Humpback Espier');\nDatabase State:\n- Table: `the_peony_pavilion`, Columns: [`label`, `description`, `language_of_work_or_name`, `instance_of`, `part_of`, `title`, `followed_by`, `author`, `follows`]\n- Table: `followed_by`, Columns: [`label`, `description`, `language_of_work_or_name`, `instance_of`, `part_of`, `title`, `follows`, `followed_by`, `author`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (instID, name, country)  VALUES (1010, 'Northeastern University', 'USA');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Inst"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`)  VALUES ('hypothetical protein HI0979', 'microbial gene found in Haemophilus influenzae Rd KW20', 'Haemophilus influenzae Rd KW20', '949982', 'gene', 'Hypothetical protein HI0979', 'HI0979', '1038112', 'forward strand', 'gene', '1037120');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `limassol_municipality` (`label`, `description`, `commons_category`, `located_in_the_administrative_territorial_entity`, `instance_of`, `country`, `coordinate_location`, `located_in_time_zone`, `local_dialing_code`, `official_name`, `native_label`, `shares_border_with`, `population`, `part_of`, `geonames_id`, `coordinates_of_northernmost_point`, `coordinates_of_easternmost_point`, `coordinates_of_southernmost_point`, `coordinates_of_westernmost_point`, `locator_map_image`, `statistical_service_of_cyprus_geocode`, `google_knowledge_graph_id`)  VALUES ('Tsiflikoudia', 'quarter of Limassol Municipality', 'Tsiflikoudia', 'Limassol Municipality', 'Quarter of Limassol Municipality', 'Cyprus', '34.66268875', 'UTC+02:00', '357 25', '\u03a4\u03c3\u03b9\u03c6\u03bb\u03b9\u03ba\u03bf\u03cd\u03b4\u03b9\u03b1', '\u03a4\u03c3\u03b9\u03c6\u03bb\u03b9\u03ba\u03bf\u03cd\u03b4\u03b9\u03b1', 'Zakaki', 579.0, 'Limassol Municipality', '11888110.0', '34.672043461111', '34.66937869', '34.65036539', '34.65364857', 'LimassolTsiflikoudia.png', '5000-07', '/g/11f6zxdw85');\nDatabase State:\n- Table: `political_border`, Columns: [`label`, `description`, `population`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `located_in_time_zone`, `part_of`, `locator_map_image`, `commons_category`, `geonames_id`, `official_name`, `native_label`, `local_dialing_code`, `coordinates_of_southernmost_point`, `coordinates_of_northernmost_point`, `coordinates_of_easternmost_point`, `coordinates_of_westernmost_point`, `shares_border_with`, `statistical_service_of_cyprus_geocode`, `google_knowledge_graph_id`]",
        "Response": "Table: `limassol_municipality`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `constructorStandings` (`constructorStandingsId`, `raceId`, `constructorId`, `points`, `position`, `positionText`, `wins`)  VALUES (23309, 553, 68, 0.0, 15, '15', 0);\nDatabase State:\n- Table: `pitStops`, Columns: [`raceId`, `driverId`, `stop`, `lap`, `time`, `duration`, `milliseconds`]\n- Table: `constructors`, Columns: [`constructorId`, `constructorRef`, `name`, `nationality`, `url`]\n- Table: `lapTimes`, Columns: [`raceId`, `driverId`, `lap`, `position`, `time`, `milliseconds`]\n- Table: `status`, Columns: [`statusId`, `status`]\n- Table: `seasons`, Columns: [`year`, `url`]\n- Table: `constructorResults`, Columns: [`constructorResultsId`, `raceId`, `constructorId`, `points`, `status`]\n- Table: `qualifying`, Columns: [`qualifyId`, `raceId`, `driverId`, `constructorId`, `number`, `position`, `q1`, `q2`, `q3`]\n- Table: `results`, Columns: [`resultId`, `raceId`, `driverId`, `constructorId`, `number`, `grid`, `position`, `positionText`, `positionOrder`, `points`, `laps`, `time`, `milliseconds`, `fastestLap`, `rank`, `fastestLapTime`, `fastestLapSpeed`, `statusId`]\n- Table: `races`, Columns: [`raceId`, `year`, `round`, `circuitId`, `name`, `date`, `time`, `url`]\n- Table: `drivers`, Columns: [`driverId`, `driverRef`, `number`, `code`, `forename`, `surname`, `dob`, `nationality`, `url`]\n- Table: `constructorStandings`, Columns: [`constructorStandingsId`, `raceId`, `constructorId`, `points`, `position`, `positionText`, `wins`]\n- Table: `driverStandings`, Columns: [`driverStandingsId`, `raceId`, `driverId`, `points`, `position`, `positionText`, `wins`]\n- Table: `circuits`, Columns: [`circuitId`, `circuitRef`, `name`, `location`, `country`, `lat`, `lng`, `alt`, `url`]",
        "Response": "Table: `constructorStandings`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Airlines (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  VALUES ('2018/8/22', 20416, 'N645NK', 804, 13204, 1320402, 31454, 'MCO', 11433, 1143302, 31295, 'DTW', 747, 741, -6, 0, 1031, 3, 3, 0, NULL, 161, 170, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `commons_category`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `image`, `shares_border_with`, `locator_map_image`, `official_website`, `population`, `area`, `whos_on_first_id`)  VALUES ('Otero County', 'county in New Mexico, United States', 'United States of America', 'Otero County, New Mexico', '32.62', 'New Mexico', 'Category:Otero County, New Mexico', 'county of New Mexico', '/m/0n50p', '5482932.0', 'Otero County Court House Alamogordo.jpg', 'Hudspeth County', 'Map of New Mexico highlighting Otero County.svg', 'http://co.otero.nm.us', 67839.0, 17162.0, '102081169.0');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `country`, `commons_category`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `image`, `shares_border_with`, `locator_map_image`, `official_website`, `population`, `area`, `whos_on_first_id`]\n- Table: `road_mountain_pass`, Columns: [`label`, `description`, `coordinate_location`, `country`, `elevation_above_sea_level`, `mountain_range`, `instance_of`, `located_in_the_administrative_territorial_entity`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `country`, `coordinate_location`, `instance_of`, `located_in_the_administrative_territorial_entity`, `locator_map_image`, `freebase_id`, `population`, `commons_category`, `topics_main_category`, `geonames_id`, `official_website`, `image`, `archinform_location_id`, `whos_on_first_id`, `area`)  VALUES ('Indiana', 'state of the United States of America', 'United States of America', '39.933333333333', 'U.S. state', 'United States of America', 'Indiana in United States.svg', '/m/03v1s', 6785528.0, 'Indiana', 'Category:Indiana', '4921868.0', 'https://www.in.gov', 'nan', '2805.0', '85688709.0', 94321.0);\nDatabase State:\n- Table: `living_museum`, Columns: [`label`, `description`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `instance_of`, `image`, `official_website`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Catalog_Contents_Additional_Attributes (catalog_entry_id, catalog_level_number, attribute_id, attribute_value)  VALUES (15, 9, 2, '0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Catalog_Contents_Additional_Attributes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Escherichia coli O83:H1 str. NRG 857C', 'bacterial strain', 'Escherichia coli O83:H1 str. NRG 857C', 'Escherichia coli', '685038', 'strain', 'Gram-negative bacteria', 'GCA_000183345.1');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `country`, `coat_of_arms_image`, `coordinate_location`, `okato_id`, `instance_of`, `freebase_id`, `oktmo_id`, `flag`, `local_dialing_code`, `inception`, `geonames_id`, `postal_code`, `topics_main_category`, `image`, `elevation_above_sea_level`, `area`, `great_russian_encyclopedia_online_id`, `population`, `located_in_time_zone`, `flag_image`, `whos_on_first_id`, `official_website`, `native_label`)  VALUES ('Ramenskoye', 'human settlement in Ramensky District, Moscow Oblast, Russia', 'Ramenskoye, Moscow Oblast', 'Russia', 'Coat of Arms of Ramenskoye (Moscow oblast).png', '55.56694', '46248501000', 'city or town', '/m/06cyrz', '46648101001', 'nan', '496 4', '+1760-01-01T00:00:00Z', '502965', '140100', 'Category:Ramenskoye', 'Ramenskoye, Moscow Oblast, Russia - panoramio (10).jpg', 125.0, 59.46000000000000085, '3493188.0', 116077.0, 'UTC+03:00', 'Flag of Ramenskoye.svg', '102003333', 'http://www.ramenskoye.ru/', '\u0420\u0430\u043c\u0435\u043d\u0441\u043a\u043e\u0435');\nDatabase State:\n- Table: `capital_city`, Columns: [`label`, `description`, `commons_category`, `country`, `coat_of_arms_image`, `coordinate_location`, `okato_id`, `instance_of`, `freebase_id`, `oktmo_id`, `flag`, `local_dialing_code`, `inception`, `geonames_id`, `postal_code`, `topics_main_category`, `image`, `elevation_above_sea_level`, `area`, `great_russian_encyclopedia_online_id`, `population`, `located_in_time_zone`, `flag_image`, `whos_on_first_id`, `official_website`, `native_label`]\n- Table: `list_of_cultural_heritage_monuments_in_moscow_oblast`, Columns: [`label`, `description`, `part_of`, `commons_category`, `country`, `is_a_list_of`, `located_in_the_administrative_territorial_entity`, `instance_of`]\n- Table: `flag`, Columns: [`label`, `description`, `image`, `applies_to_jurisdiction`, `instance_of`, `inception`, `country`, `google_knowledge_graph_id`]",
        "Response": "Table: `capital_city`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO SalesOrderDetail (SalesOrderID, SalesOrderDetailID, CarrierTrackingNumber, OrderQty, ProductID, SpecialOfferID, UnitPrice, UnitPriceDiscount, LineTotal, rowguid, ModifiedDate)  VALUES (61299, 77192, NULL, 1, 930, 1, 35.0, 0.0, 35.0, '411FE0E2-E16A-431C-B522-C5C08E0F037A', '2013-11-30 00:00:00.0');\nDatabase State:\n- Table: Password, Columns: [BusinessEntityID, PasswordHash, PasswordSalt, rowguid, ModifiedDate]\n- Table: `CreditCard`, Columns: [CreditCardID, CardType, CardNumber, ExpMonth, ExpYear, ModifiedDate]\n- Table: ProductSubcategory, Columns: [ProductSubcategoryID, ProductCategoryID, Name, rowguid, ModifiedDate]\n- Table: SalesTerritory, Columns: [TerritoryID, Name, CountryRegionCode, `Group`, SalesYTD, SalesLastYear, CostYTD, CostLastYear, rowguid, ModifiedDate]\n- Table: SpecialOffer, Columns: [SpecialOfferID, Description, DiscountPct, Type, Category, StartDate, EndDate, MinQty, MaxQty, rowguid, ModifiedDate]\n- Table: UnitMeasure, Columns: [UnitMeasureCode, Name, ModifiedDate]\n- Table: CountryRegion, Columns: [CountryRegionCode, Name, ModifiedDate]\n- Table: Culture, Columns: [CultureID, Name, ModifiedDate]\n- Table: SalesOrderHeaderSalesReason, Columns: [SalesOrderID, SalesReasonID, ModifiedDate]\n- Table: ShoppingCartItem, Columns: [ShoppingCartItemID, ShoppingCartID, Quantity, ProductID, DateCreated, ModifiedDate]\n- Table: EmailAddress, Columns: [BusinessEntityID, EmailAddressID, EmailAddress, rowguid, ModifiedDate]\n- Table: Shift, Columns: [ShiftID, Name, StartTime, EndTime, ModifiedDate]\n- Table: ProductModelProductDescriptionCulture, Columns: [ProductModelID, ProductDescriptionID, CultureID, ModifiedDate]\n- Table: ProductListPriceHistory, Columns: [ProductID, StartDate, EndDate, ListPrice, ModifiedDate]",
        "Response": "Table: SalesOrderDetail"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, `+/-`, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, `Post+/-`, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG)  VALUES ('vaiveri01', 1988, 2, 'BUF', 'NHL', 'R', 28, 19, 13, 32, 64, '7', '7', NULL, '0', '0', '3', '0', '81', '5', '2', '1', '3', '8', '-5', '2', '0', '0', '0', '0', '15');\nDatabase State:\n- Table: GoaliesShootout, Columns: [playerID, year, stint, tmID, W, L, SA, GA]\n- Table: Scoring, Columns: [playerID, year, stint, tmID, lgID, pos, GP, G, A, Pts, PIM, `+/-`, PPG, PPA, SHG, SHA, GWG, GTG, SOG, PostGP, PostG, PostA, PostPts, PostPIM, `Post+/-`, PostPPG, PostPPA, PostSHG, PostSHA, PostGWG, PostSOG]\n- Table: SeriesPost, Columns: [year, round, series, tmIDWinner, lgIDWinner, tmIDLoser, lgIDLoser, W, L, T, GoalsWinner, GoalsLoser, note]\n- Table: AwardsMisc, Columns: [name, ID, award, year, lgID, note]\n- Table: ScoringShootout, Columns: [playerID, year, stint, tmID, S, G, GDG]\n- Table: TeamsHalf, Columns: [year, lgID, tmID, half, rank, G, W, L, T, GF, GA]\n- Table: TeamVsTeam, Columns: [year, lgID, tmID, oppID, W, L, T, OTL]\n- Table: ScoringSup, Columns: [playerID, year, PPA, SHA]\n- Table: HOF, Columns: [year, hofID, name, category]\n- Table: Goalies, Columns: [playerID, year, stint, tmID, lgID, GP, Min, W, L, `T/OL`, ENG, SHO, GA, SA, PostGP, PostMin, PostW, PostL, PostT, PostENG, PostSHO, PostGA, PostSA]",
        "Response": "Table: Scoring"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('LSU ribosomal protein L5P RSP_1727', 'microbial gene found in Rhodobacter sphaeroides 2.4.1', '3718933', 'gene', 'LSU ribosomal protein L5P RSP_1727', 'Rhodobacter sphaeroides 2.4.1', 'forward strand', '314465', '313905', 'gene', 'RSP_1727');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`People_ID`, `Name`, `Age`, `Height`, `Hometown`)  VALUES (5, 'Eve Tatiana Cruz Oviedo', 19.0, 1.719999999999999974, 'Santo Domingo');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details)  VALUES (14, 'Other', '1986-12-31 10:05:32', '1987-12-07 07:41:27', 'wall street', replace('1474 Dibbert Fields Suite 055\\nSouth Renee, IN 58286-3097','\\n',char(10)), 7, 78.720799999999997, 2449185.200000000186, 0, 'et', 'eos', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Properties, Columns: [property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price, apt_feature_1, apt_feature_2, apt_feature_3, fld_feature_1, fld_feature_2, fld_feature_3, hse_feature_1, hse_feature_2, hse_feature_3, oth_feature_1, oth_feature_2, oth_feature_3, shp_feature_1, shp_feature_2, shp_feature_3, other_property_details]\n- Table: Ref_Feature_Types, Columns: [feature_type_code, feature_type_name]",
        "Response": "Table: Properties"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `trust` (source_u_id)  VALUES (7, 3, 4);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `trust`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `point_in_time`, `sport`, `location`, `freebase_id`, `number_of_participants`, `part_of`)  VALUES ('wrestling at the 2014 Commonwealth Games \u2013 men''s freestyle 65 kg', 'nan', 'sporting event', '+2014-00-00T00:00:00Z', 'wrestling', 'SEC Centre', '/m/011jnd1z', 16.0, 'wrestling at the 2014 Commonwealth Games');\nDatabase State:\n- Table: `wrestling_at_the_2018_commonwealth_games`, Columns: [`label`, `description`, `sport`, `point_in_time`, `instance_of`, `follows`, `location`, `google_knowledge_graph_id`, `number_of_participants`, `part_of`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `point_in_time`, `sport`, `location`, `freebase_id`, `number_of_participants`, `part_of`]",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `commons_category`, `official_website`, `instance_of`, `inception`, `headquarters_location`, `country`)  VALUES ('Iga Railway', 'nan', 'Iga Railway', 'https://www.igatetsu.co.jp/', 'rail company (Japan)', '+2007-03-26T00:00:00Z', 'Uenoshi Station', 'Japan');\nDatabase State:\n- Table: `rail_company_japan`, Columns: [`label`, `description`, `commons_category`, `official_website`, `instance_of`, `inception`, `headquarters_location`, `country`]",
        "Response": "Table: `rail_company_japan`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `channel` (`Channel_ID`, `Name`, `Owner`, `Share_in_percent`, `Rating_in_percent`)  VALUES (1, 'CCTV-1', 'CCTV', 4.900000000000000355, 0.5400000000000000355);\nDatabase State:\n- Table: `broadcast`, Columns: [`Channel_ID`, `Program_ID`, `Time_of_day`]",
        "Response": "Table: `channel`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `point_in_time`, `topics_main_category`, `follows`, `followed_by`, `part_of`)  VALUES ('859 BC', 'year', 'year BC', '-0859-01-01T00:00:00Z', 'Category:859 BC', '860 BC', '858 BC', '850s BC');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `wikimedia_category` (`label`, `description`, `instance_of`, `category_combines_topics`, `category_contains`)  VALUES ('Category:People from Kor\u00e7\u00eb County', 'Wikimedia category', 'Wikimedia category', 'person related to this place', 'human');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `wikimedia_category`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Ref_Colors (color_code, color_description)  VALUES ('5', 'green');\nDatabase State:\n- Table: Ref_Product_Categories, Columns: [product_category_code, product_category_description, unit_of_measure]\n- Table: Product_Characteristics, Columns: [product_id, characteristic_id, product_characteristic_value]\n- Table: Ref_Colors, Columns: [color_code, color_description]\n- Table: Characteristics, Columns: [characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details]",
        "Response": "Table: Ref_Colors"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `pts_system_mannose_sorbose_specific_iia_subunit_protein_family` (`label`, `description`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `has_parts`, `cell_component`, `biological_process`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('PTS system mannose-specific transporter subunit IIAB SSUBM407_1657', 'microbial protein found in Streptococcus suis BM407', 'Streptococcus suis BM407', 'A0A0H3MWW6', 'PTS system mannose-specific transporter subunit IIAB SSUBM407_1657', 'Phosphotransferase system, sorbose subfamily IIB component', 'integral component of membrane', 'carbohydrate transmembrane transport', 'protein', 'YP_003029354', 'Phosphotransferase system, sorbose subfamily IIB component superfamily');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `pts_system_mannose_sorbose_specific_iia_subunit_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `film` (`Film_ID`, `Rank_in_series`, `Number_in_season`, `Title`, `Directed_by`, `Original_air_date`, `Production_code`)  VALUES (3, 28, 3, 'The Case: Off the Record', 'Bill Schreiner', 'October 5\u20139, 1992', '50011\u201350015');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `film`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('0', 2017, 2957, 13);\nDatabase State:\n- Table: `Answer`, Columns: [AnswerText, SurveyID, UserID, QuestionID]\n- Table: Question, Columns: [questiontext, questionid]\n- Table: Survey, Columns: [SurveyID, Description]",
        "Response": "Table: `Answer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Shippers (ShipperID, ShipperName, Phone)  VALUES (2, 'United Package', '(503) 555-3199');\nDatabase State:\n- Table: Orders, Columns: [OrderID, CustomerID, EmployeeID, OrderDate, ShipperID]",
        "Response": "Table: Shippers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO book_author (book_id, author_id)  VALUES (3053, 1758);\nDatabase State:\n- Table: customer_address, Columns: [customer_id, address_id, status_id]\n- Table: book_author, Columns: [book_id, author_id]\n- Table: country, Columns: [country_id, country_name]\n- Table: order_status, Columns: [status_id, status_value]\n- Table: address, Columns: [address_id, street_number, street_name, city, country_id]\n- Table: `cust_order`, Columns: [order_id, order_date, customer_id, shipping_method_id, dest_address_id]\n- Table: `order_line`, Columns: [line_id, order_id, book_id, price]\n- Table: address_status, Columns: [status_id, address_status]\n- Table: publisher, Columns: [publisher_id, publisher_name]",
        "Response": "Table: book_author"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Students (student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details)  VALUES (10, 15, 14, 'Helga', 'Cleve', 'Mohr', '677.401.9382', 'nya.lesch@example.net', '43', '2009-09-25 00:14:25', '2017-07-09 21:38:43', 'rerum');\nDatabase State:\n- Table: Courses, Columns: [course_id, course_name, course_description, other_details]\n- Table: Departments, Columns: [department_id, department_name, department_description, other_details]\n- Table: Student_Enrolment_Courses, Columns: [student_course_id, course_id, student_enrolment_id]\n- Table: Transcript_Contents, Columns: [student_course_id, transcript_id]\n- Table: Addresses, Columns: [address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details]\n- Table: Students, Columns: [student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details]\n- Table: Semesters, Columns: [semester_id, semester_name, semester_description, other_details]\n- Table: Sections, Columns: [section_id, course_id, section_name, section_description, other_details]\n- Table: Transcripts, Columns: [transcript_id, transcript_date, other_details]\n- Table: Degree_Programs, Columns: [degree_program_id, department_id, degree_summary_name, degree_summary_description, other_details]\n- Table: Student_Enrolment, Columns: [student_enrolment_id, degree_program_id, semester_id, student_id, other_details]",
        "Response": "Table: Students"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `chromosome` (`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`)  VALUES ('human chromosome 4', 'human chromosome', 'NC_000004.12', 'Homo sapiens', 'chromosome');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `ensembl_protein_id`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `refseq_protein_id`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `part_of`]\n- Table: `expressed_in`, Columns: [`label`, `description`, `foundational_model_of_anatomy_id`, `uberon_id`, `described_by_source`, `subclass_of`, `instance_of`, `commons_category`]\n- Table: `polyadenylate_binding_protein_human_types_1_2_3_4`, Columns: [`label`, `description`, `ensembl_protein_id`, `encoded_by`, `uniprot_protein_id`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `chromosome`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('RpoE-regulated lipoprotein EAE_00430', 'microbial protein found in Klebsiella aerogenes KCTC 2190', 'protein', 'A0A0H3FJP8', 'Enterobacter aerogenes KCTC 2190', 'RpoE-regulated lipoprotein EAE_00430', 'protein', 'YP_004590303', 'Protein of unknown function DUF1131');\nDatabase State:\n- Table: `protein_of_unknown_function_duf1131`, Columns: [`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `protein_of_unknown_function_duf1131`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `festival_detail` (`Festival_ID`, `Festival_Name`, `Chair_Name`, `Location`, `Year`, `Num_of_Audience`)  VALUES (1, 'Panasonic Awards', 'Raymond Floyd', 'United States', 2006, 152);\nDatabase State:\n- Table: `festival_detail`, Columns: [`Festival_ID`, `Festival_Name`, `Chair_Name`, `Location`, `Year`, `Num_of_Audience`]",
        "Response": "Table: `festival_detail`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO callcenterlogs (`Date received`, `Complaint ID`, `rand client`, phonefinal, `vru+line`, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time)  VALUES ('2015-05-14', 'CR1376409', 'C00001510', '748-186-0003', 'AA0110', 35469, 0, 'PS', 'AGENT', 'NAAMA', '16:48:54', '16:54:27', '00:05:33');\nDatabase State:\n- Table: callcenterlogs, Columns: [`Date received`, `Complaint ID`, `rand client`, phonefinal, `vru+line`, call_id, priority, type, outcome, server, ser_start, ser_exit, ser_time]\n- Table: reviews, Columns: [`Date`, Stars, Reviews, Product, district_id]\n- Table: state, Columns: [StateCode, State, Region]\n- Table: events, Columns: [`Date received`, Product, `Sub-product`, Issue, `Sub-issue`, `Consumer complaint narrative`, Tags, `Consumer consent provided?`, `Submitted via`, `Date sent to company`, `Company response to consumer`, `Timely response?`, `Consumer disputed?`, `Complaint ID`, Client_ID]\n- Table: district, Columns: [district_id, city, state_abbrev, division]",
        "Response": "Table: callcenterlogs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (FNOL_ID, Customer_ID, Policy_ID, Service_ID)  VALUES (1611, 996, 993, 9);\nDatabase State:\n- Table: Claims, Columns: [Claim_ID, FNOL_ID, Effective_Date]",
        "Response": "Table: First_Notification_of_Loss"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Book_ID`, `Title`, `Issues`, `Writer`)  VALUES (5, 'Cyberella', 12.0, 'Howard Chaykin');\nDatabase State:\n- Table: `publication`, Columns: [`Publication_ID`, `Book_ID`, `Publisher`, `Publication_Date`, `Price`]",
        "Response": "Table: `book`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (history_id, order_id, status_id, status_date)  VALUES (12934, 878, 2, '2020-03-14 18:15:39');\nDatabase State:\n- Table: shipping_method, Columns: [method_id, method_name, cost]\n- Table: `cust_order`, Columns: [order_id, order_date, customer_id, shipping_method_id, dest_address_id]\n- Table: book, Columns: [book_id, title, isbn13, language_id, num_pages, publication_date, publisher_id]\n- Table: address_status, Columns: [status_id, address_status]\n- Table: country, Columns: [country_id, country_name]\n- Table: customer_address, Columns: [customer_id, address_id, status_id]\n- Table: order_status, Columns: [status_id, status_value]\n- Table: address, Columns: [address_id, street_number, street_name, city, country_id]\n- Table: publisher, Columns: [publisher_id, publisher_name]\n- Table: `order_history`, Columns: [history_id, order_id, status_id, status_date]",
        "Response": "Table: `order_history`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  VALUES ('2018/8/8', 20397, 'N599NN', 5385, 11057, 1105703, 31057, 'CLT', 13577, 1357702, 31135, 'MYR', 1309, 1308, -1, 0, 1358, -3, 0, 0, NULL, 52, 50, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Airlines, Columns: [FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY]\n- Table: `Air Carriers`, Columns: [Code, Description]\n- Table: Airports, Columns: [Code, Description]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `advisedBy` (p_id, p_id_dummy)  VALUES (362, 335);\nDatabase State:\n- Table: course, Columns: [course_id, courseLevel]",
        "Response": "Table: `advisedBy`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO sales_in_weather (date, store_nbr, item_nbr, units)  VALUES ('2012-08-03', 7, 99, 0);\nDatabase State:\n- Table: weather, Columns: [station_nbr, date, tmax, tmin, tavg, depart, dewpoint, wetbulb, heat, cool, sunrise, sunset, codesum, snowfall, preciptotal, stnpressure, sealevel, resultspeed, resultdir, avgspeed]\n- Table: sales_in_weather, Columns: [date, store_nbr, item_nbr, units]",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (AnswerText, SurveyID, UserID, QuestionID)  VALUES ('No', 2019, 4164, 83);\nDatabase State:\n- Table: Question, Columns: [questiontext, questionid]",
        "Response": "Table: `Answer`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO country (zip_code, county, state)  VALUES (21811, 'WORCESTER', 'MD');\nDatabase State:\n- Table: zip_congress, Columns: [zip_code, district]\n- Table: congress, Columns: [cognress_rep_id, first_name, last_name, CID, party, state, abbreviation, House, District, land_area]\n- Table: state, Columns: [abbreviation, name]\n- Table: zip_data, Columns: [zip_code, city, state, multi_county, type, organization, time_zone, daylight_savings, latitude, longitude, elevation, state_fips, county_fips, region, division, population_2020, population_2010, households, avg_house_value, avg_income_per_household, persons_per_household, white_population, black_population, hispanic_population, asian_population, american_indian_population, hawaiian_population, other_population, male_population, female_population, median_age, male_median_age, female_median_age, residential_mailboxes, business_mailboxes, total_delivery_receptacles, businesses, `1st_quarter_payroll`, annual_payroll, employees, water_area, land_area, single_family_delivery_units, multi_family_delivery_units, total_beneficiaries, retired_workers, disabled_workers, parents_and_widowed, spouses, children, over_65, monthly_benefits_all, monthly_benefits_retired_workers, monthly_benefits_widowed, CBSA]\n- Table: area_code, Columns: [zip_code, area_code]\n- Table: CBSA, Columns: [CBSA, CBSA_name, CBSA_type]\n- Table: avoid, Columns: [zip_code, bad_alias]\n- Table: country, Columns: [zip_code, county, state]",
        "Response": "Table: country"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Lipoprotein involved with copper homeostasis and adhesion ECs0194', 'microbial protein found in Escherichia coli O157:H7 str. Sakai', 'protein', 'Q8X8W4', 'Escherichia coli O157:H7 str. Sakai', 'lipoprotein involved with copper homeostasis and adhesion ECs0194', 'NlpE, C-terminal OB domain', 'protein', 'NP_308221', 'Copper resistance lipoprotein NlpE');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`train_id`, `station_id`)  VALUES (7, 5);\nDatabase State:\n- Table: `station`, Columns: [`id`, `network_name`, `services`, `local_authority`]",
        "Response": "Table: `route`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (actual_order_id, product_id)  VALUES (15, 4);\nDatabase State:\n- Table: Delivery_Routes, Columns: [route_id, route_name, other_route_details]\n- Table: Actual_Orders, Columns: [actual_order_id, order_status_code, regular_order_id, actual_order_date]\n- Table: Actual_Order_Products, Columns: [actual_order_id, product_id]\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer]\n- Table: Addresses, Columns: [address_id, address_details, city, zip_postcode, state_province_county, country]\n- Table: Employees, Columns: [employee_id, employee_address_id, employee_name, employee_phone]\n- Table: Trucks, Columns: [truck_id, truck_licence_number, truck_details]\n- Table: Regular_Orders, Columns: [regular_order_id, distributer_id]\n- Table: Products, Columns: [product_id, product_name, product_price, product_description]\n- Table: Customer_Addresses, Columns: [customer_id, address_id, date_from, address_type, date_to]\n- Table: Order_Deliveries, Columns: [location_code, actual_order_id, delivery_status_code, driver_employee_id, truck_id, delivery_date]\n- Table: Delivery_Route_Locations, Columns: [location_code, route_id, location_address_id, location_name]\n- Table: Regular_Order_Products, Columns: [regular_order_id, product_id]",
        "Response": "Table: Actual_Order_Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `found_in_taxon`, `instance_of`, `reactome_id`, `exact_match`, `has_parts`, `part_of`)  VALUES ('SUMO1:NPM1 [nucleoplasm]', 'An instance of macromolecular complex in Homo sapiens with Reactome ID (R-HSA-4086055)', 'Homo sapiens', 'protein complex', 'R-HSA-4086055', 'https://identifiers.org/reactome:R-HSA-4086055', 'NPM1-G97-SUMO1 [nucleoplasm]', 'SUMOylation of NPM1 with SUMO1');\nDatabase State:\n- Table: `small_ubiquitin_like_modifier_1`, Columns: [`label`, `description`, `found_in_taxon`, `subclass_of`, `reactome_id`, `exact_match`, `part_of`]",
        "Response": "Table: `part`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `party` (`Party_ID`, `Party_Theme`, `Location`, `First_year`, `Last_year`, `Number_of_hosts`)  VALUES (1, 'Spring', 'Hemkade 48 Zaandam', '2000', '2001', 5);\nDatabase State:\n- Table: `party`, Columns: [`Party_ID`, `Party_Theme`, `Location`, `First_year`, `Last_year`, `Number_of_hosts`]\n- Table: `host`, Columns: [`Host_ID`, `Name`, `Nationality`, `Age`]\n- Table: `party_host`, Columns: [`Party_ID`, `Host_ID`, `Is_Main_in_Charge`]",
        "Response": "Table: `party`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO works_on (Essn, Pno, Hours)  VALUES (333445555, 20, 10.0);\nDatabase State:\n- Table: dependent, Columns: [Essn, Dependent_name, Sex, Bdate, Relationship]\n- Table: project, Columns: [Pname, Pnumber, Plocation, Dnum]\n- Table: dept_locations, Columns: [Dnumber, Dlocation]\n- Table: works_on, Columns: [Essn, Pno, Hours]\n- Table: employee, Columns: [Fname, Minit, Lname, Ssn, Bdate, Address, Sex, Salary, Super_ssn]",
        "Response": "Table: works_on"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Debate_ID`, `Date`, `Venue`, `Num_of_Audience`)  VALUES (3, 'August 3, 2015', 'Manama , Bahrain', 90);\nDatabase State:\n- Table: `people`, Columns: [`People_ID`, `District`, `Name`, `Party`, `Age`]\n- Table: `debate`, Columns: [`Debate_ID`, `Date`, `Venue`, `Num_of_Audience`]",
        "Response": "Table: `debate`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `image`, `instance_of`, `freebase_id`, `commons_category`)  VALUES ('Elizabeth II', 'Queen of the United Kingdom from 1952 to 2022', 'Queen Elizabeth II official portrait for 1959 tour (retouched) (cropped) (3-to-4 aspect ratio).jpg', 'human', '/m/0d1_f', 'Elizabeth II of the United Kingdom');\nDatabase State:\n- Table: `wikidata_property`, Columns: [`label`, `description`, `image`, `instance_of`, `freebase_id`, `commons_category`]\n- Table: `catalogus_professorum`, Columns: [`label`, `description`, `instance_of`, `official_website`, `wikidata_property`]",
        "Response": "Table: `wikidata_property`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `temperature` (`City_ID`, `Jan`, `Feb`, `Mar`, `Apr`, `Jun`, `Jul`, `Aug`, `Sep`, `Oct`, `Nov`, `Dec`)  VALUES (6, 17.19999999999999929, 17.19999999999999929, 18.30000000000000071, 18.89999999999999857, 20.60000000000000143, 21.69999999999999929, 21.69999999999999929, 21.10000000000000143, 20.60000000000000143, 20.0, 18.30000000000000071);\nDatabase State:\n- Table: `temperature`, Columns: [`City_ID`, `Jan`, `Feb`, `Mar`, `Apr`, `Jun`, `Jul`, `Aug`, `Sep`, `Oct`, `Nov`, `Dec`]",
        "Response": "Table: `temperature`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `part_of`, `has_parts`, `sport`, `instance_of`, `organizer`, `point_in_time`, `edition_number`, `start_time`, `end_time`, `google_knowledge_graph_id`)  VALUES ('2001 Estoril Open (women)', 'women''s tennis tournament', '2001 Estoril Open', '2001 Estoril Open \u2013 women''s singles', 'tennis', 'Portugal Open (women)', 'Women''s Tennis Association', '+2001-00-00T00:00:00Z', '5', '+2001-04-09T00:00:00Z', '+2001-04-15T00:00:00Z', '/g/11b5v3_cr6');\nDatabase State:\n- Table: `portugal_open_women`, Columns: [`label`, `description`, `part_of`, `has_parts`, `sport`, `instance_of`, `organizer`, `point_in_time`, `edition_number`, `start_time`, `end_time`, `google_knowledge_graph_id`]\n- Table: `part`, Columns: [`label`, `description`, `follows`, `freebase_id`, `followed_by`, `has_parts`, `instance_of`, `topics_main_category`, `sport`, `point_in_time`, `edition_number`, `country`, `located_in_the_administrative_territorial_entity`, `location`]",
        "Response": "Table: `portugal_open_women`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `country`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `freebase_id`, `instance_of`, `geonames_id`, `image`, `commons_category`, `gss_code_2011`, `toid`, `openstreetmap_relation_id`)  VALUES ('Trellech United', 'community in Monmouthshire, south-east Wales', 'United Kingdom', '51.75337', 'Monmouthshire', 'nan', 'community', '7294058.0', 'Trellech.jpg', 'Trellech United', 'W04001083', '7000000000001699.0', '11005765.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `population`, `country`, `commons_category`, `official_website`, `topics_main_category`, `musicbrainz_area_id`, `instance_of`, `freebase_id`, `locator_map_image`, `geonames_id`, `shares_border_with`, `capital`, `category_of_associated_people`, `image`, `viaf_id`, `area`, `getty_thesaurus_of_geographic_names_id`, `located_in_the_administrative_territorial_entity`, `archinform_location_id`, `library_of_congress_authority_id`, `whos_on_first_id`, `category_for_maps`, `worldcat_identities_id`, `openstreetmap_relation_id`, `inaturalist_place_id`, `gnd_id`, `national_library_of_israel_j9u_id`, `coordinate_location`)  VALUES ('Western Australia', 'state of Australia', 2656156.0, 'Australia', 'Western Australia', 'https://www.wa.gov.au/', 'Category:Western Australia', '1b1a6c07-d9bd-47d8-b1ee-772f53ec6e79', 'state of Australia', '/m/0847q', 'Western Australia in Australia.svg', '2058645', 'South Australia', 'Perth', 'Category:People from Western Australia', 'Gales Bay.jpg', '154702212', 2527013.0, '7001834.0', 'Australia', '2953.0', 'n79089339', '85681439.0', 'Category:Maps of Western Australia', 'lccn-n79089339', '2316598.0', '6827.0', '4079207-9', '9.870075480735052e+17', '-26.0');\nDatabase State:\n- Table: `capital_city`, Columns: [`label`, `description`, `instance_of`, `country`, `image`, `commons_category`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `topics_main_category`, `freebase_id`, `geonames_id`, `capital_of`, `whos_on_first_id`, `national_library_of_israel_j9u_id`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `population`, `country`, `commons_category`, `official_website`, `topics_main_category`, `instance_of`, `freebase_id`, `locator_map_image`, `geonames_id`, `capital`, `image`, `viaf_id`, `area`, `located_in_the_administrative_territorial_entity`, `whos_on_first_id`, `inaturalist_place_id`, `coordinate_location`]\n- Table: `administrative_centre`, Columns: [`label`, `description`, `population`, `country`, `commons_category`, `official_website`, `topics_main_category`, `musicbrainz_area_id`, `instance_of`, `freebase_id`, `locator_map_image`, `geonames_id`, `shares_border_with`, `capital`, `category_of_associated_people`, `image`, `viaf_id`, `area`, `getty_thesaurus_of_geographic_names_id`, `located_in_the_administrative_territorial_entity`, `archinform_location_id`, `library_of_congress_authority_id`, `whos_on_first_id`, `category_for_maps`, `worldcat_identities_id`, `openstreetmap_relation_id`, `inaturalist_place_id`, `gnd_id`, `national_library_of_israel_j9u_id`, `coordinate_location`]\n- Table: `ammunition_dump`, Columns: [`label`, `description`, `coordinate_location`, `instance_of`, `country`, `located_in_the_administrative_territorial_entity`]",
        "Response": "Table: `administrative_centre`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (3743308, 12, 6320, 371, 876);\nDatabase State:\n- Table: Products, Columns: [ProductID, Name, Price]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `advisedBy` (p_id, p_id_dummy)  VALUES (429, 335);\nDatabase State:\n- Table: `advisedBy`, Columns: [p_id, p_id_dummy]\n- Table: taughtBy, Columns: [course_id, p_id]\n- Table: person, Columns: [p_id, professor, student, hasPosition, inPhase, yearsInProgram]",
        "Response": "Table: `advisedBy`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `follows` (`label`, `description`, `instance_of`, `sport`, `country`, `point_in_time`, `follows`, `followed_by`, `competition_class`, `has_parts`, `on_focus_list_of_wikimedia_project`)  VALUES ('1954 Malta Badminton Championships', 'badminton championships', 'Maltese Badminton Championships', 'badminton', 'Malta', '+1954-00-00T00:00:00Z', '1953 Malta Badminton Championships', '1955 Malta Badminton Championships', 'national championship', '1954 Malta Badminton Championships \u2013 men''s singles', 'WikiProject Badminton/tournament focus list');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `follows`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `subclass_of`, `encoded_by`, `genedb_id`, `uniprot_protein_id`, `part_of`, `found_in_taxon`, `described_by_source`, `cell_component`)  VALUES ('early transcribed membrane protein 8', 'nan', 'protein', 'protein', 'ETRAMP8', 'PF3D7_0829600.1', 'C0H4Z2', 'Early transcribed membrane protein (ETRAMP)', 'Plasmodium falciparum 3D7', 'etramps, a new Plasmodium falciparum gene family coding for developmentally regulated and highly charged membrane proteins located at the parasite-host cell interface', 'symbiont-containing vacuole membrane');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `early_transcribed_membrane_protein_etramp`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, name, address, city, postal_code, latitude, longitude, phone_number, tax_code, business_certificate, application_date, owner_name, owner_address, owner_city, owner_state, owner_zip)  VALUES (80617, 'Grinders Pizzeria', '448 Balboa St', 'SF', '94118', NULL, NULL, 14155851876, 'H24', 1002849, '2014-10-01', 'Grinders Pizzeria Enterprises', '2120 Pacific Ave. #310', 'San Francisco', 'CA', '94118');\nDatabase State:\n- Table: inspections, Columns: [business_id, score, date, type]",
        "Response": "Table: businesses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `player` (`Player_ID`, `Sponsor_name`, `Player_name`, `Gender`, `Residence`, `Occupation`, `Votes`, `Rank`)  VALUES (1, 'Brandon\u2014Souris', 'Jean Luc Bouch\u00e9', 'M', 'Brandon', 'Locomotive Engineer', 6055, '2nd');\nDatabase State:\n- Table: `player_coach`, Columns: [`Player_ID`, `Coach_ID`, `Starting_year`]\n- Table: `club`, Columns: [`Club_ID`, `Club_name`, `Region`, `Start_year`]\n- Table: `coach`, Columns: [`Coach_ID`, `Coach_name`, `Gender`, `Club_ID`, `Rank`]\n- Table: `match_result`, Columns: [`Rank`, `Club_ID`, `Gold`, `Big_Silver`, `Small_Silver`, `Bronze`, `Points`]\n- Table: `player`, Columns: [`Player_ID`, `Sponsor_name`, `Player_name`, `Gender`, `Residence`, `Occupation`, `Votes`, `Rank`]",
        "Response": "Table: `player`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `magazine` (`label`, `description`, `instance_of`, `language_of_work_or_name`, `publication_date`, `title`, `part_of`, `publisher`, `place_of_publication`, `commons_category`, `subtitle`, `editor`, `volume`)  VALUES ('St. Nicholas', 'Vol. 6, Nov. 1878-Oct. 1879', 'volume', 'English', '+1879-00-00T00:00:00Z', 'St. Nicholas', 'St. Nicholas Magazine', 'The Century Company', 'New York City', 'St. Nicholas (magazine)/Volume 6', 'An Illustrated Magazine', 'Mary Mapes Dodge', 'VI');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `magazine`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Participants (Participant_ID, Participant_Type_Code, Participant_Details)  VALUES (75, 'Participant', 'Berniece Weimann');\nDatabase State:\n- Table: Events, Columns: [Event_ID, Service_ID, Event_Details]",
        "Response": "Table: Participants"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO matchs (Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season)  VALUES ('E0', '2006-01-04', 'Man City', 'Tottenham', 0, 2, 'A', 2006);\nDatabase State:\n- Table: matchs, Columns: [Div, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR, season]\n- Table: divisions, Columns: [division, name, country]",
        "Response": "Table: matchs"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `driver` (`Driver_ID`, `Name`, `Party`, `Home_city`, `Age`)  VALUES (6, 'Edwin Vargas', 'Dem', 'Hartford', 52);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `driver`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `political_border` (`label`, `description`, `country`, `located_in_the_administrative_territorial_entity`, `commons_category`, `shares_border_with`, `coordinate_location`, `topics_main_category`, `locator_map_image`, `instance_of`, `freebase_id`, `fips_6_4`, `gnis_id`, `population`, `geonames_id`, `official_website`, `area`, `image`, `capital`, `inception`, `category_of_associated_people`, `viaf_id`, `archinform_location_id`, `named_after`, `library_of_congress_authority_id`, `different_from`, `whos_on_first_id`, `list_of_monuments`, `category_for_maps`, `water_as_percent_of_area`, `native_label`, `wolfram_language_entity_code`, `worldcat_identities_id`, `hasc`, `openstreetmap_relation_id`, `ballotpedia_id`, `getty_thesaurus_of_geographic_names_id`, `inaturalist_place_id`, `per_capita_income`, `number_of_households`, `national_library_of_israel_j9u_id`, `curlie_id`, `licence_plate_code`, `odot_county_code`)  VALUES ('Harrison County', 'county in Ohio, United States', 'United States of America', 'Ohio', 'Harrison County, Ohio', 'Carroll County', '40.29', 'Category:Harrison County, Ohio', 'Map of Ohio highlighting Harrison County.svg', 'county of Ohio', '/m/0n2j4', '39067.0', '1074046.0', 14483.0, '5156975', 'http://www.harrisoncountyohio.org', 1064.0, 'Harrison County Courthouse Ohio.jpg', 'Cadiz', '+1813-02-01T00:00:00Z', 'Category:People from Harrison County, Ohio', '130194279', '20195', 'William Henry Harrison', 'n81056726', 'Harrison County', '102083669.0', 'National Register of Historic Places listings in Harrison County, Ohio', 'Category:Maps of Harrison County, Ohio', 2.100000000000000088, 'Harrison County', 'Entity[\"AdministrativeDivision\", {\"HarrisonCounty\", \"Ohio\", \"UnitedStates\"}]', 'lccn-n81056726', 'US.OH.HR', '911248', 'Harrison_County,_Ohio', '1002459', '1690', 25751.0, 6221.0, '9.870075621774052e+17', 'Regional/North_America/United_States/Ohio/Counties/Harrison/', '34.0', 'HAS');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `political_border`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO actor (ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth)  VALUES (1223, 'Michael Lerner', '1941-06-22', 'Brooklyn', 'USA', 67, 'Michael Lerner was born on June 22, 1941 in Brooklyn, New York, USA. He is an actor, known for Barton Fink (1991), Godzilla (1998) and Elf (2003).', NULL, NULL, '$3,000,000.00');\nDatabase State:\n- Table: actor, Columns: [ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth]\n- Table: movie, Columns: [MovieID, Title, `MPAA Rating`, Budget, Gross, `Release Date`, Genre, Runtime, Rating, `Rating Count`, Summary]\n- Table: characters, Columns: [MovieID, ActorID, `Character Name`, creditOrder, pay, screentime]",
        "Response": "Table: actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (g_name, rating, most_popular_in)  VALUES ('blues', '7', 'Canada');\nDatabase State:\n- Table: genre, Columns: [g_name, rating, most_popular_in]\n- Table: song, Columns: [song_name, artist_name, country, f_id, genre_is, rating, languages, releasedate]\n- Table: artist, Columns: [artist_name, country, gender, preferred_genre]\n- Table: files, Columns: [f_id, artist_name, file_size, duration, formats]",
        "Response": "Table: genre"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `natural_product` (`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Yersinia pestis CO92', 'bacterial strain', 'strain', 'Yersinia pestis CO92', 'Yersinia pestis', '214092', 'Gram-negative bacteria', 'GCA_001293415.1');\nDatabase State:\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `family_name` (`label`, `description`, `instance_of`, `topics_main_category`, `said_to_be_the_same_as`, `native_label`, `writing_system`, `described_by_source`)  VALUES ('Li\u00fa', 'family name (\u5289 / \u5218)', 'Han surname', 'Category:Liu', 'Liu', '\u5218', 'Chinese characters', 'Hundred Family Surnames');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `family_name`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `flights` (Airline)  VALUES (2, 1267, ' ALE', ' AHT');\nDatabase State:\n- Table: `airlines`, Columns: [uid]\n- Table: `airports`, Columns: [City]",
        "Response": "Table: `flights`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `happy_hour` (`HH_ID`, `Shop_ID`, `Month`, `Num_of_shaff_in_charge`)  VALUES (1, 1, 'May', 10);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `happy_hour`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories)  VALUES (937, 4.950000000000000177, 35.90999999999999658, 0.0, 0.989999999999999992, 0.0, 0.0, 4.5, 1.899999999999999912, 0.0, 0.0, 0.9000000000000000222, 83.34000000000000341, 5.169999999999999929, 11.49000000000000021, 172.3499999999999944);\nDatabase State:\n- Table: Nutrition, Columns: [recipe_id, protein, carbo, alcohol, total_fat, sat_fat, cholestrl, sodium, iron, vitamin_c, vitamin_a, fiber, pcnt_cal_carb, pcnt_cal_fat, pcnt_cal_prot, calories]\n- Table: Recipe, Columns: [recipe_id, title, subtitle, servings, yield_unit, prep_min, cook_min, stnd_min, source, intro, directions]\n- Table: Ingredient, Columns: [ingredient_id, category, name, plural]",
        "Response": "Table: Nutrition"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `shares_border_with`, `country`, `locator_map_image`, `commons_category`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `instance_of`, `freebase_id`, `geonames_id`, `viaf_id`, `elevation_above_sea_level`, `image`, `area`, `openstreetmap_relation_id`, `official_website`, `whos_on_first_id`, `population`, `postal_code`, `located_in_time_zone`, `local_dialing_code`)  VALUES ('Province of Como', 'province of Italy', 'Canton of Ticino', 'Italy', 'Como in Italy (2018).svg', 'Province of Como', '45.816666666667', 'Lombardy', 'Category:Province of Como', 'province of Italy', '/m/03wxvk', '3178227.0', '145420598.0', NULL, 'Come - Temple de Volta.JPG', 1288.069999999999937, '45614.0', 'http://www.provincia.como.it', '85685235.0', 594657.0, '22100', 'UTC+01:00', '31.0');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO south_superstore (`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit)  VALUES (12267, 'US-2017-146570', '2017-05-15', '2017-05-20', 'Standard Class', 'SN-20710', 'South', 'OFF-AR-10003856', 8.339999999999999858, 3, 0.0, 2.168400000000000105);\nDatabase State:\n- Table: central_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]\n- Table: product, Columns: [`Product ID`, `Product Name`, Category, `Sub-Category`, Region]\n- Table: people, Columns: [`Customer ID`, `Customer Name`, Segment, Country, City, State, `Postal Code`, Region]\n- Table: south_superstore, Columns: [`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit]",
        "Response": "Table: south_superstore"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Bookings (Booking_ID, Customer_ID, Workshop_Group_ID, Status_Code, Store_ID, Order_Date, Planned_Delivery_Date, Actual_Delivery_Date, Other_Order_Details)  VALUES (1, 938, '140', 'good', 8, '2016-12-12 10:43:01', '2013-03-10 18:47:05', '1997-11-21 10:07:40', NULL);\nDatabase State:\n- Table: Products, Columns: [Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details]\n- Table: Ref_Service_Types, Columns: [Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description]\n- Table: Ref_Payment_Methods, Columns: [payment_method_code, payment_method_description]\n- Table: Services, Columns: [Service_ID, Service_Type_Code, Workshop_Group_ID, Product_Description, Product_Name, Product_Price, Other_Product_Service_Details]\n- Table: Performers, Columns: [Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details]\n- Table: Bookings, Columns: [Booking_ID, Customer_ID, Workshop_Group_ID, Status_Code, Store_ID, Order_Date, Planned_Delivery_Date, Actual_Delivery_Date, Other_Order_Details]",
        "Response": "Table: Bookings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO works_on (Essn, Pno, Hours)  VALUES (888665555, 20, NULL);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: works_on"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `sporulation_specific_cell_division_protein_ssgb` (`label`, `description`, `found_in_taxon`, `subclass_of`, `uniprot_protein_id`, `encoded_by`, `instance_of`, `biological_process`, `refseq_protein_id`, `part_of`)  VALUES ('Sporulation and cell division protein SsgA AMED_6168', 'microbial protein found in Amycolatopsis mediterranei U32', 'Amycolatopsis mediterranei U32', 'protein', 'A0A0H3DE50', 'sporulation and cell division protein SsgA AMED_6168', 'protein', 'cell division', 'YP_003768306', 'Sporulation-specific cell division protein SsgB');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `sporulation_specific_cell_division_protein_ssgb`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Poker_Player_ID`, `People_ID`, `Final_Table_Made`, `Best_Finish`, `Money_Rank`, `Earnings`)  VALUES (2, 2, 10.0, 2.0, 141.0, 189233.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `poker_player`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`concert_ID`, `Singer_ID`)  VALUES (5, '6');\nDatabase State:\n- Table: `singer_in_concert`, Columns: [`concert_ID`, `Singer_ID`]\n- Table: `singer`, Columns: [`Singer_ID`, `Name`, `Country`, `Song_Name`, `Song_release_year`, `Age`, `Is_male`]\n- Table: `concert`, Columns: [`concert_ID`, `concert_Name`, `Theme`, `Stadium_ID`, `Year`]\n- Table: `stadium`, Columns: [`Stadium_ID`, `Location`, `Name`, `Capacity`, `Highest`, `Lowest`, `Average`]",
        "Response": "Table: `singer_in_concert`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Member_ID`, `Branch_ID`, `Year`, `Total_pounds`)  VALUES (2, '5', '2018', 321.1299999999999955);\nDatabase State:\n- Table: `purchase`, Columns: [`Member_ID`, `Branch_ID`, `Year`, `Total_pounds`]\n- Table: `member`, Columns: [`Member_ID`, `Card_Number`, `Name`, `Hometown`, `Level`]",
        "Response": "Table: `purchase`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `freebase_id`, `ec_enzyme_number`, `instance_of`, `molecular_function`, `subclass_of`)  VALUES ('Benzaldehyde dehydrogenase (NAD+)', 'nan', '/m/03cvlby', '1.2.1.28', 'group or class of enzymes', 'benzaldehyde dehydrogenase (NAD+) activity', 'oxidoreductase');\nDatabase State:\n- Table: `aldehyde_dehydrogenase_nad`, Columns: [`label`, `description`, `freebase_id`, `ec_enzyme_number`, `instance_of`, `molecular_function`, `subclass_of`]\n- Table: `molecular_function`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`, `ec_enzyme_number`, `has_parts`]",
        "Response": "Table: `aldehyde_dehydrogenase_nad`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Staff (staff_id, gender, first_name, last_name, email_address, phone_number)  VALUES (120, '0', 'Mikel', 'Lynch', 'glen.borer@example.com', '751-262-8424x575');\nDatabase State:\n- Table: Customers, Columns: [customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number]\n- Table: Complaints, Columns: [complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id]\n- Table: Products, Columns: [product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price]",
        "Response": "Table: Staff"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `user_profiles` (uid)  VALUES (6, 'Celine Dion', 'cd@superstar.com', 5, 23927492);\nDatabase State:\n- Table: tweets, Columns: [id, uid, text, createdate]\n- Table: `user_profiles`, Columns: [uid]",
        "Response": "Table: `user_profiles`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `coordinate_location`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`)  VALUES ('S\u00e3o Louren\u00e7o', 'mission in Mozambique', '-18.3', 'Mozambique', 'mission complex', 'nan');\nDatabase State:\n- Table: `given_name`, Columns: [`label`, `description`, `instance_of`, `native_label`, `writing_system`, `language_of_work_or_name`, `different_from`, `said_to_be_the_same_as`, `commons_category`, `family_name_identical_to_this_given_name`, `caverphone`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `country`, `instance_of`, `coordinate_location`, `freebase_id`, `located_in_the_administrative_territorial_entity`, `geonames_id`]\n- Table: `country`, Columns: [`label`, `description`, `highest_point`, `dewey_decimal_classification`, `topics_main_wikimedia_portal`, `continent`, `shares_border_with`, `head_of_state`, `official_language`, `currency`, `top_level_internet_domain`, `flag_image`, `anthem`, `instance_of`, `coat_of_arms_image`, `flag`, `iso_3166_1_alpha_2_code`, `iso_3166_1_alpha_3_code`, `iso_3166_1_numeric_code`, `commons_category`, `capital`, `contains_the_administrative_territorial_entity`, `member_of`, `topics_main_category`, `locator_map_image`, `page_banner`, `coat_of_arms`, `country_calling_code`, `ndl_authority_id`, `curlie_id`, `ioc_country_code`, `musicbrainz_area_id`, `country`, `freebase_id`, `gnd_id`, `fips_10_4_countries_and_regions`, `inception`, `geonames_id`, `located_in_time_zone`, `legislative_body`, `category_for_people_who_died_here`, `category_for_people_born_here`, `category_for_films_shot_at_this_location`, `category_of_associated_people`, `part_of`, `population`, `described_by_source`, `diplomatic_relation`, `history_of_topic`, `commons_gallery`, `mobile_country_code`, `lowest_point`, `demonym`, `driving_side`, `geography_of_topic`, `unemployment_rate`, `electrical_plug_type`, `mains_voltage`, `emergency_phone_number`, `central_bank`, `coordinates_of_northernmost_point`, `new_york_times_topic_id`, `area`, `openstreetmap_relation_id`, `quora_topic_id`, `insee_countries_and_foreign_territories_code`, `le_monde_diplomatique_subject_id`, `short_name`, `coordinate_location`, `unesco_thesaurus_id`, `office_held_by_head_of_government`, `head_of_government`, `getty_thesaurus_of_geographic_names_id`, `stw_thesaurus_for_economics_id`, `yso_id`, `licence_plate_code`, `us_national_archives_identifier`, `subreddit`, `gacs_id`, `mesh_descriptor_id`, `office_held_by_head_of_state`, `babelnet_id`, `encyclop\u00e6dia_universalis_id`, `number_of_out_of_school_children`, `has_quality`, `great_russian_encyclopedia_online_id`, `total_fertility_rate`, `motto_text`, `maritime_identification_digits`, `wikimedia_outline`, `uk_parliament_thesaurus_id`, `civicus_monitor_country_entry`, `geoshape`, `brockhaus_enzyklop\u00e4die_online_id`, `encyclop\u00e6dia_britannica_online_id`, `ituisoiec_object_identifier`, `archinform_location_id`, `life_expectancy`, `nkcr_aut_id`, `statoids_id`, `itu_letter_code`, `wipo_st3`, `viaf_id`, `unicode_character`, `comic_vine_id`, `krugosvet_article`, `native_label`, `iab_code`, `klexikon_article_id`, `library_of_congress_authority_id`, `loc_and_marc_vocabularies_id`, `official_name`, `language_used`, `world_encyclopedia_of_puppetry_arts_id`, `basic_form_of_government`, `gran_enciclop\u00e8dia_catalana_id`, `whos_on_first_id`, `dr_topic_id`, `omegawiki_defined_meaning`, `hds_id`, `culture`, `coordinates_of_southernmost_point`, `coordinates_of_easternmost_point`, `coordinates_of_westernmost_point`, `geonlp_id`, `analysis_policy_observatory_term_id`, `treccanis_dizionario_di_storia_id`, `category_for_maps`, `french_vikidia_id`, `spanish_vikidia_id`, `pronunciation_audio`, `eurovoc_id`, `worldcat_identities_id`, `bbc_things_id`, `nalt_id`, `fast_id`, `kbpedia_id`, `grove_art_online_id`, `rkd_thesaurus_id`, `interlingual_index_id`, `economy_of_topic`, `tasteatlas_id`, `github_topic`, `wordnet_31_synset_id`, `demographics_of_topic`, `inaturalist_place_id`, `joconde_location_id`, `idaigazetteer_id`, `store_norske_leksikon_id`, `den_store_danske_id`, `treccani_id`, `the_world_factbook_country_id`, `namuwiki_id`, `colon_classification`, `democracy_index`, `catalan_vikidia_id`, `national_library_of_israel_j9u_id`, `museum_digital_place_id`, `ysa_id`, `yle_topic_id`, `postimees_topic_id`, `wikisimpsons_id`, `marine_regions_geographic_id`, `bbc_news_topic_id`, `m49_code`, `online_pwn_encyclopedia_id`, `idref_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `hashtag`, `on_focus_list_of_wikimedia_project`, `gini_coefficient`, `openstreetmap_element`, `happy_planet_index_score`, `biblioth\u00e8que_nationale_de_france_id`, `national_library_of_israel_id_old`, `asc_leiden_thesaurus_id`, `executive_body`, `isni`, `replaces`, `zhihu_topic_id`, `different_from`, `image`, `obo_gazetteer_id`, `official_website`]\n- Table: `head_of_state`, Columns: [`label`, `description`, `instance_of`, `sex_or_gender`, `given_name`, `occupation`, `date_of_birth`, `country_of_citizenship`, `languages_spoken_written_or_signed`, `place_of_birth`, `educated_at`, `member_of_political_party`, `viaf_id`, `worldcat_identities_id`, `library_of_congress_authority_id`, `name_in_native_language`, `family_name`, `position_held`, `freebase_id`, `treccani_id`, `commons_category`, `munzinger_person_id`, `opensanctions_id`, `encyclop\u00e6dia_britannica_online_id`, `image`, `isni`, `store_norske_leksikon_id`, `gnd_id`, `spouse`]",
        "Response": "Table: `mission_complex`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Pseudomonas aeruginosa PAO1', 'bacterial strain', 'Pseudomonas aeruginosa PAO1', 'Pseudomonas aeruginosa', '208964', 'strain', 'Gram-negative bacteria', 'GCA_000006765.1');\nDatabase State:\n- Table: `peptidase_a24a_prepilin_type_iv_bacterial`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `refseq_protein_id`, `encoded_by`, `has_parts`, `cell_component`, `molecular_function`, `biological_process`, `part_of`, `instance_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `subclass_of`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Fused DNA-binding transcriptional repressor/proline dehydrogenase/1-pyrroline-5-carboxylate dehydrogenase PutA b1014', 'microbial protein found in Escherichia coli str. K-12 substr. MG1655', 'protein', 'Escherichia coli str. K-12 substr. MG1655', 'P09546', 'fused DNA-binding transcriptional repressor/proline dehydrogenase/1-pyrroline-5-carboxylate dehydrogenase PutA b1014', 'Aldehyde dehydrogenase, cysteine active site', 'protein', 'NP_415534', 'Proline dehydrogenase PutA, domain I/II');\nDatabase State:\n- Table: `proline_dehydrogenase_puta_domain_i`, Columns: [`label`, `description`, `subclass_of`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `genbank_assembly_accession_number`, `gram_staining`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Sales Orders` (OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`)  VALUES ('SO - 0001291', 'In-Store', 'WARE-NBV1002', '7/19/18', '10/20/18', '10/26/18', '11/2/18', 'USD', 9, 10, 81, 45, 4, 0.1000000000000000055, '6,103.70', '4,394.66');\nDatabase State:\n- Table: `Sales Orders`, Columns: [OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`]\n- Table: Regions, Columns: [StateCode, State, Region]",
        "Response": "Table: `Sales Orders`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, category, person, role, credited)  VALUES ('S20-E10', 'General', 'Steven Dean Moore', 'director', 'false');\nDatabase State:\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, person, role, episode_id, season, song, result]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: `Episode`, Columns: [episode_id, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Credit, Columns: [episode_id, category, person, role, credited]\n- Table: Character_Award, Columns: [award_id, character]\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (paperID, title)  VALUES (201, 'Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory');\nDatabase State:\n- Table: Authors, Columns: [authID, lname, fname]",
        "Response": "Table: Papers"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `journal_committee` (`Editor_ID`, `Journal_ID`, `Work_Type`)  VALUES (9, 12, 'Photo');\nDatabase State:\n- Table: `journal_committee`, Columns: [`Editor_ID`, `Journal_ID`, `Work_Type`]\n- Table: `editor`, Columns: [`Editor_ID`, `Name`, `Age`]\n- Table: `journal`, Columns: [`Journal_ID`, `Date`, `Theme`, `Sales`]",
        "Response": "Table: `journal_committee`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `car_names` (`MakeId`)  VALUES (270, 'chevrolet', 'chevrolet monte carlo landau');\nDatabase State:\n- Table: `model_list`, Columns: [`ModelId`]\n- Table: `continents`, Columns: [`ContId`]\n- Table: `countries`, Columns: [`CountryId`]\n- Table: `car_makers`, Columns: [`Id`]\n- Table: `car_names`, Columns: [`MakeId`]",
        "Response": "Table: `car_names`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ProductID, `Product Name`)  VALUES (33, 'Outdoor Decor');\nDatabase State:\n- Table: Customers, Columns: [CustomerID, `Customer Names`]\n- Table: `Sales Team`, Columns: [SalesTeamID, `Sales Team`, Region]\n- Table: `Sales Orders`, Columns: [OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`]\n- Table: `Store Locations`, Columns: [StoreID, `City Name`, County, StateCode, State, Type, Latitude, Longitude, AreaCode, Population, `Household Income`, `Median Income`, `Land Area`, `Water Area`, `Time Zone`]\n- Table: Regions, Columns: [StateCode, State, Region]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length)  VALUES (4353, 37811, 4, 'None', 'Low', 'None', 'Medium');\nDatabase State:\n- Table: `Reviews`, Columns: [business_id, user_id, review_stars, review_votes_funny, review_votes_useful, review_votes_cool, review_length]",
        "Response": "Table: `Reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (FacID, Lname, Fname, Rank, Sex, Phone, Room, Building)  VALUES (9824, 'Glaser', 'Robert', 'Instructor', 'M', 4396, '119', 'Barton');\nDatabase State:\n- Table: Department, Columns: [DNO, Division, DName, Room, Building, DPhone]\n- Table: Faculty, Columns: [FacID, Lname, Fname, Rank, Sex, Phone, Room, Building]\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Minor_in, Columns: [StuID, DNO]\n- Table: Gradeconversion, Columns: [lettergrade, gradepoint]\n- Table: Enrolled_in, Columns: [StuID, CID, Grade]",
        "Response": "Table: Faculty"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `performance` (`Performance_ID`, `Orchestra_ID`, `Type`, `Date`, `Official_ratings_(millions)`, `Weekly_rank`, `Share`)  VALUES (2, 2, 'Auditions 2', '10 June', 6.730000000000000426, '8', '28.0%');\nDatabase State:\n- Table: `conductor`, Columns: [`Conductor_ID`, `Name`, `Age`, `Nationality`, `Year_of_Work`]\n- Table: `orchestra`, Columns: [`Orchestra_ID`, `Orchestra`, `Conductor_ID`, `Record_Company`, `Year_of_Founded`, `Major_Record_Format`]\n- Table: `show`, Columns: [`Show_ID`, `Performance_ID`, `If_first_show`, `Result`, `Attendance`]",
        "Response": "Table: `performance`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  VALUES ('2018/8/1', 19790, 'N67171', 2813, 13204, 1320402, 31454, 'MCO', 10397, 1039707, 30397, 'ATL', 750, 746, -4, 0, 925, -1, 0, 0, NULL, 96, 99, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: Airlines, Columns: [FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY]\n- Table: Airports, Columns: [Code, Description]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `linha_da_beira_baixa` (`label`, `description`, `instance_of`, `country`, `part_of`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `located_in_time_zone`, `connecting_line`, `google_knowledge_graph_id`, `commons_category`, `image`)  VALUES ('Alferrarede train station', 'railway station in Portugal', 'railway station', 'Portugal', 'Linha da Beira Baixa', '39.47366944', 'Abrantes', 'Western European Time', 'Linha da Beira Baixa', '/g/122hjhxb', 'Alferrarede train station', 'Esta\u00e7\u00e3o de Alferrarede, 2009.09.15.jpg');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `country`, `coat_of_arms_image`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `commons_category`, `instance_of`, `image`, `area`, `geonames_id`, `ine_id_portugal`, `openstreetmap_relation_id`, `population`, `factgrid_item_id`, `flag_image`, `freebase_id`, `official_website`, `topics_main_category`, `postal_code`, `located_in_time_zone`, `contains_the_administrative_territorial_entity`, `shares_border_with`, `inaturalist_place_id`]\n- Table: `political_border`, Columns: [`label`, `description`, `flag_image`, `coat_of_arms_image`, `commons_category`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `instance_of`, `freebase_id`, `topics_main_category`, `geonames_id`, `shares_border_with`, `official_website`, `postal_code`, `contains_the_administrative_territorial_entity`, `population`, `area`, `ine_id_portugal`, `openstreetmap_relation_id`, `whos_on_first_id`, `image`, `pronunciation_audio`, `inaturalist_place_id`, `factgrid_item_id`, `eu_knowledge_graph_item_id`, `viaf_id`, `located_in_time_zone`, `gnd_id`]\n- Table: `linha_da_beira_baixa`, Columns: [`label`, `description`, `instance_of`, `country`, `part_of`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `located_in_time_zone`, `connecting_line`, `google_knowledge_graph_id`, `commons_category`, `image`]",
        "Response": "Table: `linha_da_beira_baixa`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `ensembl_protein_id`, `encoded_by`, `refseq_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `part_of`)  VALUES ('Eph receptor A4a', 'Protein found in Danio rerio', 'Q5ZEW1', 'Danio rerio', 'ENSDARP00000124775', 'epha4a', 'NP_001005919', 'protein phosphorylation', 'nucleotide binding', 'integral component of plasma membrane', 'Protein kinase domain', 'protein', 'Fibronectin type III superfamily');\nDatabase State:\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]\n- Table: `orthology`, Columns: [`label`, `description`, `ensembl_gene_id`, `found_in_taxon`, `chromosome`, `entrez_gene_id`, `ensembl_transcript_id`, `subclass_of`, `homologene_id`, `refseq_rna_id`, `encodes`, `ortholog`, `exact_match`, `strand_orientation`, `instance_of`, `cytogenetic_location`, `genomic_start`, `genomic_end`, `expressed_in`]\n- Table: `ephrin_receptor_ligand_binding_domain_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `ensembl_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `player` (`Player_ID`, `Player`, `Team`, `Age`, `Position`, `School_ID`)  VALUES (4, 'Brian Matusz', 'Baltimore Orioles', 17, 'Left-handed pitcher', 1);\nDatabase State:\n- Table: `school`, Columns: [`School_ID`, `School`, `Location`, `Enrollment`, `Founded`, `Denomination`, `Boys_or_Girls`, `Day_or_Boarding`, `Year_Entered_Competition`, `School_Colors`]\n- Table: `player`, Columns: [`Player_ID`, `Player`, `Team`, `Age`, `Position`, `School_ID`]",
        "Response": "Table: `player`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Departments (department_id, department_name, department_description, other_details)  VALUES (12, 'medical', 'ea', NULL);\nDatabase State:\n- Table: Addresses, Columns: [address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details]\n- Table: Student_Enrolment, Columns: [student_enrolment_id, degree_program_id, semester_id, student_id, other_details]\n- Table: Sections, Columns: [section_id, course_id, section_name, section_description, other_details]\n- Table: Semesters, Columns: [semester_id, semester_name, semester_description, other_details]\n- Table: Student_Enrolment_Courses, Columns: [student_course_id, course_id, student_enrolment_id]\n- Table: Transcript_Contents, Columns: [student_course_id, transcript_id]",
        "Response": "Table: Departments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (239512, 2006, 'F', 'X', '4y bach', '109', '42', '52', '38.5', '47.7');\nDatabase State:\n- Table: state_sector_grads, Columns: [stateid, state, state_abbr, control, level, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate, grad_cohort_ct]\n- Table: institution_grads, Columns: [unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate]\n- Table: institution_details, Columns: [unitid, chronname, city, state, level, control, basic, hbcu, flagship, long_x, lat_y, site, student_count, awards_per_value, awards_per_state_value, awards_per_natl_value, exp_award_value, exp_award_state_value, exp_award_natl_value, exp_award_percentile, ft_pct, fte_value, fte_percentile, med_sat_value, med_sat_percentile, aid_value, aid_percentile, endow_value, endow_percentile, grad_100_value, grad_100_percentile, grad_150_value, grad_150_percentile, pell_value, pell_percentile, retain_value, retain_percentile, ft_fac_value, ft_fac_percentile, vsa_year, vsa_grad_after4_first, vsa_grad_elsewhere_after4_first, vsa_enroll_after4_first, vsa_enroll_elsewhere_after4_first, vsa_grad_after6_first, vsa_grad_elsewhere_after6_first, vsa_enroll_after6_first, vsa_enroll_elsewhere_after6_first, vsa_grad_after4_transfer, vsa_grad_elsewhere_after4_transfer, vsa_enroll_after4_transfer, vsa_enroll_elsewhere_after4_transfer, vsa_grad_after6_transfer, vsa_grad_elsewhere_after6_transfer, vsa_enroll_after6_transfer, vsa_enroll_elsewhere_after6_transfer, similar, state_sector_ct, carnegie_ct, counted_pct, nicknames, cohort_size]",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (OrderDetailID, OrderID, ProductID, Quantity)  VALUES (460, 10420, 9, 20);\nDatabase State:\n- Table: Suppliers, Columns: [SupplierID, SupplierName, ContactName, Address, City, PostalCode, Country, Phone]\n- Table: OrderDetails, Columns: [OrderDetailID, OrderID, ProductID, Quantity]",
        "Response": "Table: OrderDetails"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `hydria` (`label`, `description`, `instance_of`, `image`, `collection`, `the_met_object_id`, `on_focus_list_of_wikimedia_project`)  VALUES ('Terracotta hydria: kalpis (water jar)', 'hydria, kalpis at the Metropolitan Museum of Art (MET, 1984.11.1)', 'hydria', 'nan', 'Greek and Roman Art', '255802.0', 'Met Museum artworks on display');\nDatabase State:\n- Table: `hydria`, Columns: [`label`, `description`, `instance_of`, `image`, `collection`, `the_met_object_id`, `on_focus_list_of_wikimedia_project`]\n- Table: `collection`, Columns: [`label`, `description`, `instance_of`, `country`, `freebase_id`, `official_website`, `image`, `viaf_id`, `gnd_id`, `library_of_congress_authority_id`, `worldcat_identities_id`, `share_catalogue_author_id`, `biblioth\u00e8que_nationale_de_france_id`, `idref_id`, `isni`]",
        "Response": "Table: `hydria`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `applies_to_jurisdiction`, `country`, `instance_of`)  VALUES ('Voivodes of Lesser Poland Voivodeship', 'nan', 'Voivodes of Poland (since 1999)', 'Lesser Poland Voivodeship', 'Poland', 'position');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `office_held_by_head_of_government`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Wicket_Taken (Match_Id, Over_Id, Ball_Id, Player_Out, Kind_Out, Fielders, Innings_No)  VALUES (501259, 20, 5, 259, 4, NULL, 1);\nDatabase State:\n- Table: Toss_Decision, Columns: [Toss_Id, Toss_Name]\n- Table: Ball_by_Ball, Columns: [Match_Id, Over_Id, Ball_Id, Innings_No, Team_Batting, Team_Bowling, Striker_Batting_Position, Striker, Non_Striker, Bowler]\n- Table: Country, Columns: [Country_Id, Country_Name]\n- Table: Bowling_Style, Columns: [Bowling_Id, Bowling_skill]",
        "Response": "Table: Wicket_Taken"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `university` (`School_ID`, `School`, `Location`, `Founded`, `Affiliation`, `Enrollment`, `Nickname`, `Primary_conference`)  VALUES (4, 'Rutgers University', 'New Brunswick, NJ', 1766.0, 'Public', 56868.0, 'Scarlet Knights', 'American Athletic Conference ( D-I )');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `university`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity)  VALUES (212, 10327, 30, 35);\nDatabase State:\n- Table: Products, Columns: [ProductID, ProductName, SupplierID, CategoryID, Unit, Price]\n- Table: OrderDetails, Columns: [OrderDetailID, OrderID, ProductID, Quantity]\n- Table: Shippers, Columns: [ShipperID, ShipperName, Phone]\n- Table: Orders, Columns: [OrderID, CustomerID, EmployeeID, OrderDate, ShipperID]\n- Table: Customers, Columns: [CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country]\n- Table: Employees, Columns: [EmployeeID, LastName, FirstName, BirthDate, Photo, Notes]\n- Table: Categories, Columns: [CategoryID, CategoryName, Description]",
        "Response": "Table: OrderDetails"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `railway_coach` (`label`, `description`, `subclass_of`, `commons_category`, `operator`, `instance_of`)  VALUES ('C Pfalz 75', 'class of 4 German railway carriages', 'railway coach', 'nan', 'Deutsche Reichsbahn', 'rolling stock class');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `railway_coach`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `family_name_identical_to_this_given_name` (`label`, `description`, `instance_of`, `soundex`, `cologne_phonetics`, `caverphone`, `different_from`, `native_label`, `writing_system`, `commons_category`, `wolfram_language_entity_code`, `g\u00e9opatronyme_id`, `geneanet_family_name_id`)  VALUES ('Roy', 'family name', 'family name', 'R000', 'nan', 'R11111', 'Roy', 'Roy', 'Latin script', 'Roy (surname)', 'Entity[\"Surname\", \"Roy\"]', 'ROY', 'ROY');\nDatabase State:\n- Table: `participant`, Columns: [`label`, `description`, `sex_or_gender`, `instance_of`, `occupation`, `given_name`, `sport`, `family_name`]\n- Table: `given_name`, Columns: [`label`, `description`, `instance_of`, `different_from`, `language_of_work_or_name`, `said_to_be_the_same_as`, `native_label`, `writing_system`, `soundex`, `cologne_phonetics`, `caverphone`, `family_name_identical_to_this_given_name`, `commons_category`]\n- Table: `sled_dog_racing`, Columns: [`label`, `description`, `location`, `instance_of`, `point_in_time`, `participant`, `winner`, `sport`, `country`]",
        "Response": "Table: `family_name_identical_to_this_given_name`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth)  VALUES (1726, 'Paul Kersey', '1970-02-10', 'Ada', 'USA', NULL, 'Paul Kersey was born on February 10, 1970 in Ada, Minnesota, USA. He is an actor, known for Hulk (2003), Diagnosis Murder (1993) and Lois Clark: The New Adventures of Superman (1993). He was previously married to Jing Ning.', NULL, NULL, NULL);\nDatabase State:\n- Table: actor, Columns: [ActorID, Name, `Date of Birth`, `Birth City`, `Birth Country`, `Height (Inches)`, Biography, Gender, Ethnicity, NetWorth]\n- Table: characters, Columns: [MovieID, ActorID, `Character Name`, creditOrder, pay, screentime]",
        "Response": "Table: actor"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `coordinate_location`, `instance_of`, `country`, `image`, `located_in_the_administrative_territorial_entity`, `tripadvisor_id`, `official_website`)  VALUES ('Zama Yatoyama Park', 'park in Japan', '35.48744', 'scenic park', 'Japan', 'Pond in Yatoyama.jpg', 'Zama', '7896332.0', 'http://www.zamayatoyama.kanagawa-park.or.jp/');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `scenic_park`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `followed_by` (`label`, `description`, `edition_number`, `instance_of`, `country`, `point_in_time`, `winner`, `sport`, `follows`, `followed_by`, `subclass_of`)  VALUES ('2011 Memorial Oleg Dyachenko', 'nan', '8', 'Memorial Oleg Dyachenko', 'Russia', '+2011-05-01T00:00:00Z', 'Dmitriy Kosyakov', 'road bicycle racing', '2010 Memorial Oleg Dyachenko', '2012 Memorial Oleg Dyachenko', '1.2');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `edition_number`, `instance_of`, `country`, `point_in_time`, `winner`, `sport`, `follows`, `followed_by`, `subclass_of`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO team (Team_id, Name)  VALUES (3, 'Anais VonRueden');\nDatabase State:\n- Table: `country`, Columns: [`Country_id`, `Country_name`, `Capital`, `Official_native_language`]\n- Table: `player`, Columns: [`Player_ID`, `Player`, `Years_Played`, `Total_WL`, `Singles_WL`, `Doubles_WL`, `Team`]\n- Table: team, Columns: [Team_id, Name]",
        "Response": "Table: team"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Airlines (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  VALUES ('2018/8/17', 20304, 'N980SW', 5132, 14877, 1487706, 34877, 'SLN', 12255, 1225502, 32255, 'HYS', 540, 525, -15, 0, 600, -21, 0, 0, NULL, 41, 35, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: `Air Carriers`, Columns: [Code, Description]\n- Table: Airports, Columns: [Code, Description]\n- Table: Airlines, Columns: [FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `subclass_of`, `entrez_gene_id`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('6-pyruvoyl tetrahydrobiopterin synthase BSU13730', 'microbial gene found in Bacillus subtilis subsp. subtilis str. 168', 'gene', '939282.0', '6-carboxy-5,6,7,8-tetrahydropterin synthase; queuosine biosynthesis BSU_13730', 'Bacillus subtilis subsp. subtilis str. 168', 'forward strand', '1440548.0', '1440099.0', 'gene', 'BSU13730');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`No`)  VALUES (222, 'Pinot Noir', 'Davis Bynum', 'Russian River Valley', 'California', 'Laurels Estate Vineyard', 2004, 75, 91, 142, 'now');\nDatabase State:\n- Table: `wine`, Columns: [`No`]\n- Table: `grapes`, Columns: [`ID`]",
        "Response": "Table: `wine`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (Scientist, Project)  VALUES (845657245, 'Ast1');\nDatabase State:\n- Table: Scientists, Columns: [SSN, Name]",
        "Response": "Table: AssignedTo"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `followed_by` (`label`, `description`, `instance_of`, `country`, `start_point`, `destination_point`, `sport`, `follows`, `followed_by`, `edition_number`, `point_in_time`, `event_distance`, `winner`, `participant`, `maintained_by_wikiproject`)  VALUES ('2011 Heusden Koers', 'annual Belgian one-day cycling race', 'Heusden Koers', 'Belgium', 'Heusden', 'Heusden', 'road bicycle racing', '2010 Heusden Koers', '2012 Heusden Koers', '63.0', '+2011-08-16T00:00:00Z', 168.0, 'James Vanlandschoot', 'James Vanlandschoot', 'Flemish fairground races');\nDatabase State:\n- Table: `event`, Columns: [`label`, `description`, `topics_main_category`, `has_parts`, `instance_of`, `followed_by`, `follows`, `edition_number`]\n- Table: `followed_by`, Columns: [`label`, `description`, `instance_of`, `country`, `start_point`, `destination_point`, `sport`, `follows`, `followed_by`, `edition_number`, `point_in_time`, `event_distance`, `winner`, `participant`, `maintained_by_wikiproject`]\n- Table: `heusden_koers`, Columns: [`label`, `description`, `instance_of`, `country`, `start_point`, `destination_point`, `sport`, `followed_by`, `edition_number`, `point_in_time`, `event_distance`, `winner`, `participant`, `maintained_by_wikiproject`, `follows`]\n- Table: `place_of_birth`, Columns: [`label`, `description`, `commons_category`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `country`, `official_website`, `instance_of`, `freebase_id`, `nisins_code`, `geonames_id`, `topics_main_category`, `image`, `coat_of_arms_image`, `flag_image`, `local_dialing_code`, `postal_code`, `area`, `musicbrainz_area_id`, `viaf_id`, `population`, `whos_on_first_id`, `located_in_time_zone`]\n- Table: `follows`, Columns: [`label`, `description`, `instance_of`, `country`, `start_point`, `destination_point`, `sport`, `followed_by`, `edition_number`, `point_in_time`, `event_distance`, `winner`, `participant`, `maintained_by_wikiproject`, `follows`]\n- Table: `participant`, Columns: [`label`, `description`, `occupation`, `instance_of`, `date_of_birth`, `place_of_birth`, `given_name`, `country_of_citizenship`, `participant_in`, `sport`, `cycling_archives_cyclist_id`, `sex_or_gender`, `procyclingstats_cyclist_id`]\n- Table: `winner`, Columns: [`label`, `description`, `occupation`, `instance_of`, `date_of_birth`, `place_of_birth`, `given_name`, `country_of_citizenship`, `participant_in`, `sport`, `cycling_archives_cyclist_id`, `sex_or_gender`, `procyclingstats_cyclist_id`]",
        "Response": "Table: `followed_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `homologene_id`, `refseq_rna_id`, `ensembl_transcript_id`, `ortholog`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `expressed_in`)  VALUES ('rdgB', 'protein-coding gene in the species Drosophila melanogaster', '32340.0', 'FBgn0003218', '7915.0', 'NM_001014740', 'FBtr0073822', 'PITPNM2', 'Retinal degeneration B Dmel_CG11111', 'Drosophila melanogaster', 'forward strand', '13779488.0', '13762752.0', 'Drosophila melanogaster chromosome X', 'gene', 'brain');\nDatabase State:\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `ensembl_protein_id`, `refseq_protein_id`, `biological_process`, `cell_component`, `molecular_function`, `instance_of`, `part_of`]\n- Table: `orthology`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `homologene_id`, `found_in_taxon`, `refseq_rna_id`, `chromosome`, `encodes`, `ortholog`, `exact_match`, `strand_orientation`, `instance_of`, `cytogenetic_location`, `genomic_end`, `genomic_start`]\n- Table: `phosphatidylinositol_transfer_protein`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `biological_process`, `cell_component`, `molecular_function`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `expressed_in`, Columns: [`label`, `description`, `uberon_id`, `subclass_of`, `instance_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `homologene_id`, `refseq_rna_id`, `ensembl_transcript_id`, `ortholog`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `expressed_in`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (IMG_ID, PRED_CLASS_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID)  VALUES (2326111, 146, 19, 1);\nDatabase State:\n- Table: IMG_REL, Columns: [IMG_ID, PRED_CLASS_ID, OBJ1_SAMPLE_ID, OBJ2_SAMPLE_ID]",
        "Response": "Table: IMG_REL"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO rankings (`ranking_date`)  VALUES (20041227, 683, 202361, 15, 17);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: rankings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `shop` (`Shop_ID`, `Name`, `Location`, `District`, `Number_products`, `Manager_name`)  VALUES (8, 'FC Lahti', 'Lahti', 'Lahden Stadion', 15000, 'Ilkka M\u00e4kel\u00e4');\nDatabase State:\n- Table: `employee`, Columns: [`Employee_ID`, `Name`, `Age`, `City`]",
        "Response": "Table: `shop`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `commons_category`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `freebase_id`, `instance_of`, `image`, `geonames_id`, `area`, `locator_map_image`, `openstreetmap_relation_id`, `whos_on_first_id`, `population`, `located_in_time_zone`, `official_website`, `viaf_id`)  VALUES ('Wisconsin', 'state of the United States of America', 'United States of America', 'Wisconsin', '44.5', 'United States of America', 'Category:Wisconsin', '/m/0824r', 'U.S. state', 'nan', '5279468.0', 169640.0, 'Wisconsin in United States.svg', '165466.0', '85688517.0', 5893718.0, 'UTC\u221206:00', 'https://www.wisconsin.gov/', '152370817.0');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `country`, `commons_category`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `topics_main_category`, `freebase_id`, `instance_of`, `image`, `geonames_id`, `area`, `locator_map_image`, `openstreetmap_relation_id`, `whos_on_first_id`, `population`, `located_in_time_zone`, `official_website`, `viaf_id`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Player (Player_Id, Player_Name, DOB, Batting_hand, Bowling_skill, Country_Name)  VALUES (75, 'Pankaj Singh', '1985-05-06', 2, 5, 1);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: Player"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO competitor_event (event_id, competitor_id, medal_id)  VALUES (208, 18380, 4);\nDatabase State:\n- Table: event, Columns: [id, sport_id, event_name]\n- Table: city, Columns: [id, city_name]\n- Table: person_region, Columns: [person_id, region_id]",
        "Response": "Table: competitor_event"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `gothic` (`label`, `description`, `part_of`, `followed_by`, `instance_of`, `unicode_character`, `follows`)  VALUES ('\ud800\udf3f', 'letter of the Gothic alphabet', 'Gothic', '\ud800\udf40', 'Gothic letter', '\ud800\udf3f', '\ud800\udf3e');\nDatabase State:\n- Table: `followed_by`, Columns: [`label`, `description`, `part_of`, `follows`, `followed_by`, `instance_of`, `unicode_character`]\n- Table: `follows`, Columns: [`label`, `description`, `part_of`, `followed_by`, `instance_of`, `unicode_character`, `follows`]",
        "Response": "Table: `gothic`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `genomic_end`, `strand_orientation`, `instance_of`, `genomic_start`)  VALUES ('hypothetical protein BN112_3059', 'microbial gene found in Bordetella bronchiseptica 253', 'Bordetella bronchiseptica 253', '13980117', 'gene', 'Hypothetical protein BN112_3059', 'BN112_3059', '3309731', 'forward strand', 'gene', '3309168');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Documents (document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details)  VALUES (23, 'working', 'Hard Drive', 'FE', '1999-04-17 14:19:32', '124', 'b');\nDatabase State:\n- Table: Documents, Columns: [document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details]\n- Table: Documents_Mailed, Columns: [document_id, mailed_to_address_id, mailing_date]\n- Table: Employees, Columns: [employee_id, role_code, employee_name, other_details]\n- Table: Addresses, Columns: [address_id, address_details]\n- Table: Draft_Copies, Columns: [document_id, draft_number, copy_number]\n- Table: Circulation_History, Columns: [document_id, draft_number, copy_number, employee_id]\n- Table: Ref_Document_Types, Columns: [document_type_code, document_type_description]\n- Table: Ref_Shipping_Agents, Columns: [shipping_agent_code, shipping_agent_name, shipping_agent_description]",
        "Response": "Table: Documents"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (userid, movieid, rating)  VALUES (4658, 1930810, '5');\nDatabase State:\n- Table: `movies2directors`, Columns: [movieid, directorid, genre]\n- Table: `u2base`, Columns: [userid, movieid, rating]",
        "Response": "Table: `u2base`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `located_in_the_administrative_territorial_entity`, `country`, `instance_of`, `coordinate_location`, `freebase_id`)  VALUES ('Langarud Rural District', 'rural district in Mazandaran, Iran', 'Abbasabad County', 'Iran', 'district of Iran', '36.65', '/m/0yn_46d');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Spore coat protein BA_2536', 'microbial protein found in Bacillus anthracis str. Ames', 'nan', 'spore coat protein BA_2536', 'A0A2P0HEL8', 'Knr4/Smi1-like domain', 'Bacillus anthracis str. Ames', 'NP_844904', 'protein', 'Knr4/Smi1-like domain superfamily');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `knr4_smi1_like_domain_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Model_name`, `Launch_year`, `RAM_MiB`, `ROM_MiB`, `Slots`, `WiFi`, `Bluetooth`)  VALUES ('X50v', 2004.0, 64.0, 128.0, '1CFII,1SD', '802.11b', '1.2');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `chip_model`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Teacher_ID`, `Name`, `Age`, `Hometown`)  VALUES (4, 'John Deloor', '33', 'Horwich Urban District');\nDatabase State:\n- Table: `teacher`, Columns: [`Teacher_ID`, `Name`, `Age`, `Hometown`]",
        "Response": "Table: `teacher`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `natural_product` (`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Bacillus thuringiensis serovar konkukian str. 97-27', 'bacterial strain', 'strain', 'Bacillus thuringiensis serovar konkukian str. 97-27', 'Bacillus thuringiensis', '281309', 'gram-positive bacteria', 'GCA_000008505.1');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `orthology` (`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `homologene_id`, `chromosome`, `found_in_taxon`, `refseq_rna_id`, `ensembl_transcript_id`, `encodes`, `ortholog`, `exact_match`, `strand_orientation`, `instance_of`, `cytogenetic_location`, `genomic_end`, `genomic_start`, `expressed_in`)  VALUES ('Asic3', 'protein-coding gene in the species Rattus norvegicus', '286920', 'protein-coding gene', 'ENSRNOG00000008380', '20999', 'Rattus norvegicus chromosome 4', 'brown rat', 'NM_173135', 'ENSRNOT00000011300', 'Acid sensing ion channel subunit 3', 'Asic3', 'http://identifiers.org/ncbigene/286920', 'reverse strand', 'gene', '4q11', '10764643.0', '10760597.0', 'cerebellum');\nDatabase State:\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `orthology`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `homologene_id`, `chromosome`, `found_in_taxon`, `refseq_rna_id`, `ensembl_transcript_id`, `encodes`, `ortholog`, `exact_match`, `strand_orientation`, `instance_of`, `cytogenetic_location`, `genomic_end`, `genomic_start`, `expressed_in`]\n- Table: `part`, Columns: [`label`, `description`, `subclass_of`, `commons_category`, `topics_main_category`, `uberon_id`, `mesh_tree_code`, `image`, `encyclop\u00e6dia_britannica_online_id`, `jstor_topic_id`, `mesh_descriptor_id`, `instance_of`, `foundational_model_of_anatomy_id`]\n- Table: `epithelial_sodium_channel_chordates`, Columns: [`label`, `description`, `ensembl_protein_id`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `expressed_in`, Columns: [`label`, `description`, `subclass_of`, `uberon_id`, `instance_of`, `freebase_id`, `microsoft_academic_id`, `part_of`, `openalex_id`, `mesh_descriptor_id`, `umls_cui`, `mesh_tree_code`, `nci_thesaurus_id`, `ta98_latin_term`]\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `found_in_taxon`, `ensembl_protein_id`, `encoded_by`, `uniprot_protein_id`, `refseq_protein_id`, `biological_process`, `cell_component`, `molecular_function`, `has_parts`, `instance_of`, `part_of`]",
        "Response": "Table: `orthology`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO employee (emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date)  VALUES ('PSA89086M', 'Pedro', 'S', 'Afonso', 14, 89, '1389', '1990-12-24 00:00:00.0');\nDatabase State:\n- Table: jobs, Columns: [job_id, job_desc, min_lvl, max_lvl]\n- Table: pub_info, Columns: [pub_id, logo, pr_info]\n- Table: authors, Columns: [au_id, au_lname, au_fname, phone, address, city, state, zip, contract]\n- Table: sales, Columns: [stor_id, ord_num, ord_date, qty, payterms, title_id]\n- Table: stores, Columns: [stor_id, stor_name, stor_address, city, state, zip]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EVENTID, REFID, EVENT_DATE, AMOUNT)  VALUES (1690348, 177736, '2007-04-27 12:00:00.0', 17.32100000000000151);\nDatabase State:\n- Table: `Sales`, Columns: [EVENTID, REFID, EVENT_DATE, AMOUNT]\n- Table: `Customers`, Columns: [ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age]\n- Table: Demog, Columns: [GEOID, INHABITANTS_K, INCOME_K, A_VAR1, A_VAR2, A_VAR3, A_VAR4, A_VAR5, A_VAR6, A_VAR7, A_VAR8, A_VAR9, A_VAR10, A_VAR11, A_VAR12, A_VAR13, A_VAR14, A_VAR15, A_VAR16, A_VAR17, A_VAR18]\n- Table: mailings3, Columns: [REFID, REF_DATE, RESPONSE]",
        "Response": "Table: `Sales`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (product_id, product_category, product_name)  VALUES (5, 'Books', 'Life of Van gogh');\nDatabase State:\n- Table: Customer_Addresses, Columns: [customer_id, premise_id, date_address_from, address_type_code, date_address_to]\n- Table: Products, Columns: [product_id, product_category, product_name]\n- Table: Customers, Columns: [customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password]\n- Table: Premises, Columns: [premise_id, premises_type, premise_details]",
        "Response": "Table: Products"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Sales (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (3194872, 7, 6960, 294, 799);\nDatabase State:\n- Table: Sales, Columns: [SalesID, SalesPersonID, CustomerID, ProductID, Quantity]\n- Table: Employees, Columns: [EmployeeID, FirstName, MiddleInitial, LastName]\n- Table: Products, Columns: [ProductID, Name, Price]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Credit (episode_id, category, person, role, credited)  VALUES ('S20-E5', 'Casting Department', 'Bonita Pietila', 'original casting', 'true');\nDatabase State:\n- Table: Credit, Columns: [episode_id, category, person, role, credited]\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1015, 'Lee', 'Susan', 16, 'F', 600, 8721, 'HKG');\nDatabase State:\n- Table: Student, Columns: [StuID, LName, Fname, Age, Sex, Major, Advisor, city_code]\n- Table: Dorm_amenity, Columns: [amenid, amenity_name]\n- Table: Has_amenity, Columns: [dormid, amenid]\n- Table: Lives_in, Columns: [stuid, dormid, room_number]\n- Table: Dorm, Columns: [dormid, dorm_name, student_capacity, gender]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `mission` (`Mission_ID`, `Ship_ID`, `Code`, `Launched_Year`, `Location`, `Speed_knots`, `Fate`)  VALUES (4, 5, 'VMV-4 Former: Sterling', 1916, 'Norway', 16, 'Retired 1939');\nDatabase State:\n- Table: `mission`, Columns: [`Mission_ID`, `Ship_ID`, `Code`, `Launched_Year`, `Location`, `Speed_knots`, `Fate`]",
        "Response": "Table: `mission`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO film_text (film_id, title, description)  VALUES (745, 'ROSES TREASURE', 'A Astounding Panorama of a Monkey And a Secret Agent who must Defeat a Woman in The First Manned Space Station');\nDatabase State:\n- Table: `film`, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]\n- Table: `customer`, Columns: [customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update]\n- Table: `payment`, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: `rental`, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]",
        "Response": "Table: film_text"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid)  VALUES (15, 4, 12, 'Credit Card', '1', '2018-03-17 03:07:45', 631.92999999999995, 334.1999999999999887);\nDatabase State:\n- Table: Bookings, Columns: [booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding, amount_of_refund]",
        "Response": "Table: Payments"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Sales` (EVENTID, REFID, EVENT_DATE, AMOUNT)  VALUES (1391992, 146311, '2007-05-06 12:00:00.0', 15.55499999999999972);\nDatabase State:\n- Table: `Customers`, Columns: [ID, SEX, MARITAL_STATUS, GEOID, EDUCATIONNUM, OCCUPATION, age]\n- Table: `Mailings1_2`, Columns: [REFID, REF_DATE, RESPONSE]",
        "Response": "Table: `Sales`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `TV_series` (`id`, `Episode`, `Air_Date`, `Rating`, `Share`, `18_49_Rating_Share`, `Viewers_m`, `Weekly_Rank`, `Channel`)  VALUES (4.0, 'The Year of the Rabbit', 'October 15, 2007', '4.3', 7.0, '2.7/7', '6.75', 67.0, '713');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `TV_series`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `rental` (rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update)  VALUES (9204, '2005-07-30 12:43:58.0', 4378, 43, '2005-08-03 16:26:58.0', 2, '2006-02-15 21:30:53.0');\nDatabase State:\n- Table: `inventory`, Columns: [inventory_id, film_id, store_id, last_update]\n- Table: `address`, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: film_text, Columns: [film_id, title, description]\n- Table: `film`, Columns: [film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update]\n- Table: `city`, Columns: [city_id, city, country_id, last_update]\n- Table: `rental`, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]\n- Table: `payment`, Columns: [payment_id, customer_id, staff_id, rental_id, amount, payment_date, last_update]\n- Table: `film_category`, Columns: [film_id, category_id, last_update]\n- Table: `category`, Columns: [category_id, name, last_update]\n- Table: `country`, Columns: [country_id, country, last_update]",
        "Response": "Table: `rental`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (custid, balance)  VALUES (7, 7.0);\nDatabase State:\n- Table: CHECKING, Columns: [custid, balance]\n- Table: SAVINGS, Columns: [custid, balance]",
        "Response": "Table: CHECKING"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `gram_staining`, `lpsn_url`, `microsoft_academic_id`)  VALUES ('Pseudomonas', 'genus of bacteria', 'Pseudomonadaceae', 'Pseudomonas', 'taxon', 'genus', '74.0', '/m/01xz6j', '286.0', '3219881.0', '1298874.0', 'Gram-negative bacteria', 'http://www.bacterio.net/pseudomonas.html', '2781463711.0');\nDatabase State:\n- Table: `dipeptidase_1`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO movies_total_gross (movie_title, release_date, genre, MPAA_rating, total_gross, inflation_adjusted_gross)  VALUES ('Morning Light', 'Oct 17, 2008', 'Documentary', 'PG', '$275,093', '$322,979');\nDatabase State:\n- Table: director, Columns: [name, director]",
        "Response": "Table: movies_total_gross"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `track` (`Track_ID`, `Name`, `Location`, `Seating`, `Year_Opened`)  VALUES (4, 'Daytona International Speedway', 'Daytona Beach, FL', 168000.0, 1959.0);\nDatabase State:\n- Table: `track`, Columns: [`Track_ID`, `Name`, `Location`, `Seating`, `Year_Opened`]\n- Table: `race`, Columns: [`Race_ID`, `Name`, `Class`, `Date`, `Track_ID`]",
        "Response": "Table: `track`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `copi_mediated_anterograde_transport` (`label`, `description`, `reactome_id`, `found_in_taxon`, `instance_of`, `cites_work`, `part_of`, `exact_match`, `has_parts`)  VALUES ('cis-Golgi cis-SNARE binds NSF and SNAPs', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-6809014)', 'R-HSA-6809014', 'Homo sapiens', 'biological process', 'A protein assembly-disassembly pathway in vitro that may correspond to sequential steps of synaptic vesicle docking, activation, and fusion', 'COPI-mediated anterograde transport', 'https://identifiers.org/reactome:R-HSA-6809014', 'cis-Golgi cis SNARE bundle [Golgi membrane]');\nDatabase State:\n- Table: `copi_mediated_anterograde_transport`, Columns: [`label`, `description`, `reactome_id`, `found_in_taxon`, `instance_of`, `cites_work`, `part_of`, `exact_match`, `has_parts`]\n- Table: `citation`, Columns: [`label`, `description`, `pubmed_id`, `instance_of`, `title`, `published_in`, `volume`, `issue`, `author_name_string`, `doi`, `language_of_work_or_name`, `cites_work`, `publication_date`, `pages`]",
        "Response": "Table: `copi_mediated_anterograde_transport`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encoded_by` (`label`, `description`, `found_in_taxon`, `entrez_gene_id`, `subclass_of`, `encodes`, `ncbi_locus_tag`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('flagellar hook-associated protein FlgK Mesci_1937', 'microbial gene found in Mesorhizobium ciceri biovar biserrulae WSM1271', 'Mesorhizobium ciceri biovar biserrulae WSM1271', '10117403', 'protein-coding gene', 'Flagellar hook-associated protein FlgK Mesci_1937', 'Mesci_1937', 'gene', '2028484', 'reverse strand', '2027030');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (p_id, professor, student, hasPosition, inPhase, yearsInProgram)  VALUES (222, 0, 1, '0', 'Pre_Quals', 'Year_1');\nDatabase State:\n- Table: course, Columns: [course_id, courseLevel]\n- Table: taughtBy, Columns: [course_id, p_id]\n- Table: `advisedBy`, Columns: [p_id, p_id_dummy]",
        "Response": "Table: person"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude)  VALUES (11229243, 'JB150037', '2/13/2018 0:15', '061XX N RAVENSWOOD AVE', '486', 'APARTMENT', 'TRUE', 'TRUE', 2433, 24, 40, 77, '08B', '41.99327354', '-87.6748663');\nDatabase State:\n- Table: FBI_Code, Columns: [fbi_code_no, title, description, crime_against]\n- Table: District, Columns: [district_no, district_name, address, zip_code, commander, email, phone, fax, tty, twitter]\n- Table: Crime, Columns: [report_no, case_number, date, block, iucr_no, location_description, arrest, domestic, beat, district_no, ward_no, community_area_no, fbi_code_no, latitude, longitude]",
        "Response": "Table: Crime"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Roller_Coaster_ID`, `Name`, `Park`, `Country_ID`, `Length`, `Height`, `Speed`, `Opened`, `Status`)  VALUES (3, 'Hades 360', 'Mt. Olympus', 1, 4726.0, 136.0, '70', 'May 14, 2005', 'Operating');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `roller_coaster`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, `text`, LocationID, UserID)  VALUES ('tw-712702038920966144', 'Wednesday', 12, 23, 'en', 'FALSE', 315, 0, 0, 36, 0.0, 'Google Cloud nabs Home Depot. Google is the No.4 player in cloud behind Amazon AWS Microsoft Azure and IBM. http://www.cnbc.com/2016/03/22/reuters-america-update-1-googles-cloud-business-nabs-home-depot-as-client.html', 3909, 'tw-346075298');\nDatabase State:\n- Table: user, Columns: [UserID, Gender]\n- Table: twitter, Columns: [TweetID, Weekday, Hour, Day, Lang, IsReshare, Reach, RetweetCount, Likes, Klout, Sentiment, `text`, LocationID, UserID]",
        "Response": "Table: twitter"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `country`, `commons_category`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `freebase_id`, `geonames_id`, `elevation_above_sea_level`, `image`, `gnis_id`, `postal_code`, `fips_55_3_locations_in_the_us`, `official_website`, `local_dialing_code`, `area`, `quora_topic_id`, `archinform_location_id`, `locator_map_image`, `capital_of`, `library_of_congress_authority_id`, `whos_on_first_id`, `viaf_id`, `worldcat_identities_id`, `factgrid_item_id`, `population`, `water_as_percent_of_area`, `per_capita_income`, `number_of_households`, `national_library_of_israel_j9u_id`, `topics_main_category`)  VALUES ('Ottawa', 'village in Ohio, United States', 'village in the United States', 'United States of America', 'Ottawa, Ohio', '41.0208', 'Putnam County', '/m/0z161', '5165801', 142.0, 'Putnam County Courthouse in Ottawa, southwestern angle.jpg', '1070881', '45875', '39-58982', 'https://www.ottawaohio.us/', '419', 12.33843700000000076, 'nan', '35128', 'OHMap-doton-Ottawa.png', 'Putnam County', 'n83232521', '101712355', '148967057', 'lccn-n83232521', 'nan', 4460.0, 1.431899999999999951, 32624.0, 1905.0, '9.870075529596051e+17', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `capital_city`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `ncbi_locus_tag`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`)  VALUES ('ATP phosphoribosyltransferase FP0960', 'microbial gene found in Flavobacterium psychrophilum JIP02/86', 'FP0960', 'gene', 'Flavobacterium psychrophilum JIP02/86', '5298955', 'ATP phosphoribosyltransferase FP0960', 'gene', '1247812', 'forward strand', '1246955');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `ncbi_locus_tag`, `subclass_of`, `found_in_taxon`, `entrez_gene_id`, `encodes`, `instance_of`, `genomic_end`, `strand_orientation`, `genomic_start`]\n- Table: `atp_phosphoribosyltransferase_hisg_long_form`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `has_parts`, `cell_component`, `molecular_function`, `biological_process`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO institution_grads (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (430184, 2008, 'M', 'H', '4y bach', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL');\nDatabase State:\n- Table: `state_sector_details`, Columns: [stateid, state, state_post, level, control, schools_count, counted_pct, awards_per_state_value, awards_per_natl_value, exp_award_state_value, exp_award_natl_value, state_appr_value, state_appr_rank, grad_rate_rank, awards_per_rank]\n- Table: state_sector_grads, Columns: [stateid, state, state_abbr, control, level, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate, grad_cohort_ct]\n- Table: institution_details, Columns: [unitid, chronname, city, state, level, control, basic, hbcu, flagship, long_x, lat_y, site, student_count, awards_per_value, awards_per_state_value, awards_per_natl_value, exp_award_value, exp_award_state_value, exp_award_natl_value, exp_award_percentile, ft_pct, fte_value, fte_percentile, med_sat_value, med_sat_percentile, aid_value, aid_percentile, endow_value, endow_percentile, grad_100_value, grad_100_percentile, grad_150_value, grad_150_percentile, pell_value, pell_percentile, retain_value, retain_percentile, ft_fac_value, ft_fac_percentile, vsa_year, vsa_grad_after4_first, vsa_grad_elsewhere_after4_first, vsa_enroll_after4_first, vsa_enroll_elsewhere_after4_first, vsa_grad_after6_first, vsa_grad_elsewhere_after6_first, vsa_enroll_after6_first, vsa_enroll_elsewhere_after6_first, vsa_grad_after4_transfer, vsa_grad_elsewhere_after4_transfer, vsa_enroll_after4_transfer, vsa_enroll_elsewhere_after4_transfer, vsa_grad_after6_transfer, vsa_grad_elsewhere_after6_transfer, vsa_enroll_after6_transfer, vsa_enroll_elsewhere_after6_transfer, similar, state_sector_ct, carnegie_ct, counted_pct, nicknames, cohort_size]",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `part` (`label`, `description`, `instance_of`, `part_of`, `point_in_time`, `topics_main_category`, `has_parts`)  VALUES ('January 1584', 'month of 1584', 'January', '1584', '+1584-01-00T00:00:00Z', 'Category:January 1584', 'January 1, 1584');\nDatabase State:\n- Table: `part`, Columns: [`label`, `description`, `instance_of`, `part_of`, `point_in_time`, `topics_main_category`, `has_parts`]\n- Table: `second_monday_in_january`, Columns: [`label`, `description`, `instance_of`, `point_in_time`, `day_of_week`, `part_of`]",
        "Response": "Table: `part`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Mountain_ID`, `Name`, `Height`, `Prominence`, `Range`, `Country`)  VALUES (6, 'Ngaliema / Mt Stanley (Savoia Pk)', 4977.0, 110.0, 'Rwenzori', 'Uganda');\nDatabase State:\n- Table: `mountain`, Columns: [`Mountain_ID`, `Name`, `Height`, `Prominence`, `Range`, `Country`]",
        "Response": "Table: `mountain`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `freebase_id`, `inception`, `programming_paradigm`)  VALUES ('Action!', 'programming language', 'programming language', '/m/04p4mh', '+1983-00-00T00:00:00Z', 'procedural programming');\nDatabase State:\n- Table: `programming_paradigm`, Columns: [`label`, `description`, `freebase_id`, `instance_of`, `subclass_of`, `microsoft_academic_id`]\n- Table: `procedural_programming_language`, Columns: [`label`, `description`, `instance_of`, `freebase_id`, `inception`, `programming_paradigm`]",
        "Response": "Table: `procedural_programming_language`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`architect_id`, `id`, `name`, `location`, `length_meters`, `length_feet`)  VALUES (4, 4, 'Aloba Arch', 'Ennedi Plateau , Chad', 76.0, 250.0);\nDatabase State:\n- Table: `bridge`, Columns: [`architect_id`, `id`, `name`, `location`, `length_meters`, `length_feet`]",
        "Response": "Table: `bridge`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `ensembl_protein_id`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `refseq_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `part_of`)  VALUES ('Neuralized E3 ubiquitin protein ligase 1B', 'mammalian protein found in Mus musculus', 'ENSMUSP00000051481', 'house mouse', 'Q0MW30', 'Neurl1b', 'NP_001075125', 'Notch signaling pathway', 'protein binding', 'cytoplasm', 'Zinc finger, RING-type', 'protein', 'Neuralized');\nDatabase State:\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]\n- Table: `neuralized`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `ensembl_protein_id`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `biological_process`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `ensembl_transcript_id`, `homologene_id`, `refseq_rna_id`, `ortholog`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `expressed_in`]\n- Table: `encodes`, Columns: [`label`, `description`, `ensembl_protein_id`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `refseq_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `part_of`]\n- Table: `expressed_in`, Columns: [`label`, `description`, `freebase_id`, `described_by_source`, `uberon_id`, `mesh_descriptor_id`, `instance_of`, `subclass_of`, `microsoft_academic_id`, `mesh_tree_code`, `openalex_id`, `terminologia_anatomica_98_id`, `foundational_model_of_anatomy_id`, `ta98_latin_term`, `ta2_id`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `ensembl_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Translocase of outer mitochondrial membrane 20 like', 'mammalian protein found in Macaca nemestrina', 'A0A2K6CDE9', 'ENSMNEP00000021685', 'TOMM20L', 'protein targeting', 'nan', 'mitochondrion', 'southern pig-tailed macaque', 'XP_011725789', 'protein', 'Mitochondrial outer membrane translocase complex, Tom20 domain superfamily');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `ensembl_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `mitochondrial_outer_membrane_translocase_complex_tom20_domain_superfamily`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `place_of_birth` (`label`, `description`, `commons_category`, `country`, `coordinate_location`, `page_banner`, `freebase_id`, `twinned_administrative_body`, `geonames_id`, `instance_of`, `image`, `quora_topic_id`, `topics_main_category`, `located_in_the_administrative_territorial_entity`, `located_in_time_zone`, `population`, `whos_on_first_id`, `native_label`, `national_library_of_israel_j9u_id`, `flag_image`, `coat_of_arms_image`, `gnd_id`, `viaf_id`, `musicbrainz_area_id`, `head_of_government`, `official_website`, `category_of_associated_people`, `shares_border_with`, `area`, `library_of_congress_authority_id`, `archinform_location_id`, `locator_map_image`, `worldcat_identities_id`)  VALUES ('Miyazaki Prefecture', 'prefecture of Japan', 'Miyazaki prefecture', 'Japan', '31.911', 'Miyazaki prefecture bannner.jpg', '/m/01g8vt', 'nan', '1856710', 'prefecture of Japan', 'Kakutou Basin.jpg', 'Miyazaki-Prefecture', 'Category:Miyazaki Prefecture', 'Japan', 'UTC+09:00', 1061032.0, '85672707', '\u5bae\u5d0e\u770c', '9.870075503061052e+17', 'Flag of Miyazaki Prefecture.svg', 'Emblem of Miyazaki Prefecture.svg', '4389003-9', '136047821.0', 'c3d3372f-03d2-422d-8afa-3f2254d89e8f', 'Shunji K\u014dno', 'https://www.pref.miyazaki.lg.jp/', 'Category:People from Miyazaki Prefecture', 'Kagoshima Prefecture', 7735.989999999999782, 'n81018291', '5029.0', 'Japan miyazaki map small.png', 'lccn-n81018291');\nDatabase State:\n- Table: `event`, Columns: [`label`, `description`, `instance_of`, `part_of`, `sport`, `competition_class`, `follows`, `number_of_participants`, `point_in_time`, `winner`, `olympedia_event_id`, `location`, `followed_by`, `country`]\n- Table: `winner`, Columns: [`label`, `description`, `instance_of`, `sex_or_gender`, `occupation`, `country_of_citizenship`, `date_of_birth`, `judoinside_judoka_id`, `place_of_birth`, `sport`, `participant_in`, `ijf_judoka_id`, `given_name`, `instagram_username`]\n- Table: `capital_city`, Columns: [`label`, `description`, `twinned_administrative_body`, `page_banner`, `country`, `instance_of`, `flag_image`, `coat_of_arms_image`, `commons_category`, `postal_code`, `located_in_time_zone`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `gnd_id`, `topics_main_category`, `viaf_id`, `commons_gallery`, `musicbrainz_area_id`, `freebase_id`, `population`, `image`, `category_for_people_who_died_here`, `geonames_id`, `head_of_government`, `official_website`, `category_of_associated_people`, `described_by_source`, `elevation_above_sea_level`, `openstreetmap_relation_id`, `shares_border_with`, `located_in_or_next_to_body_of_water`, `encyclop\u00e6dia_britannica_online_id`, `area`, `library_of_congress_authority_id`, `quora_topic_id`, `official_name`, `native_label`, `inception`, `great_russian_encyclopedia_online_id`, `archinform_location_id`, `nkcr_aut_id`, `locator_map_image`, `getty_thesaurus_of_geographic_names_id`, `whos_on_first_id`, `gran_enciclop\u00e8dia_catalana_id`, `category_for_maps`, `worldcat_identities_id`, `inaturalist_place_id`, `den_store_danske_id`, `store_norske_leksikon_id`, `social_media_followers`, `national_library_of_israel_j9u_id`, `online_pwn_encyclopedia_id`, `twitter_username`, `nese_id`, `capital_of`, `office_held_by_head_of_government`]",
        "Response": "Table: `place_of_birth`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `decays_to` (`label`, `description`, `subclass_of`, `instance_of`, `atomic_number`, `neutron_number`, `spin_quantum_number`, `parity_quantum_number`, `mass`, `mass_excess`, `binding_energy`, `wolfram_language_entity_code`)  VALUES ('cadmium-110', 'isotope of cadmium', 'cadmium', 'isotope of cadmium', 48.0, 62.0, 0.0, 1.0, 109.9030074599999978, -90347.96899999999733, 940640.25, 'Entity[\"Isotope\", \"Cadmium110\"]');\nDatabase State:\n- Table: `decays_to`, Columns: [`label`, `description`, `subclass_of`, `instance_of`, `atomic_number`, `neutron_number`, `spin_quantum_number`, `parity_quantum_number`, `mass`, `mass_excess`, `binding_energy`, `wolfram_language_entity_code`]",
        "Response": "Table: `decays_to`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `named_after`, `commons_category`, `topics_main_category`, `freebase_id`, `described_by_source`, `encyclop\u00e6dia_britannica_online_id`, `great_russian_encyclopedia_online_id`, `short_name`, `shares_border_with`, `area`, `gran_enciclop\u00e8dia_catalana_id`, `locator_map_image`, `topics_main_template`, `interlingual_index_id`, `wordnet_31_synset_id`, `image`, `astronomic_symbol_image`, `store_norske_leksikon_id`, `namuwiki_id`, `on_focus_list_of_wikimedia_project`, `commons_gallery`, `kbpedia_id`)  VALUES ('Scutum', 'constellation in the southern celestial hemisphere', 'constellation', 'shield', 'Scutum (constellation)', 'Category:Scutum (constellation)', '/m/0cnqj', 'Internetowa encyklopedia PWN', 'place/Scutum-constellation', 'nan', 'Sct', 'Aquila', 109.0, '24702.0', 'Scutum constellation map.svg', 'Template:Scutum (constellation)', 'nan', 'nan', 'ScutumCC.jpg', 'Scutum symbol (Moskowitz, variable width).svg', 'Skjoldet', '\ubc29\ud328\uc790\ub9ac', 'Wikipedia:Vital articles/Level/4', 'Scutum', 'nan');\nDatabase State:\n- Table: `constellation`, Columns: [`label`, `description`, `instance_of`, `named_after`, `commons_category`, `topics_main_category`, `freebase_id`, `described_by_source`, `encyclop\u00e6dia_britannica_online_id`, `great_russian_encyclopedia_online_id`, `short_name`, `shares_border_with`, `area`, `gran_enciclop\u00e8dia_catalana_id`, `locator_map_image`, `topics_main_template`, `interlingual_index_id`, `wordnet_31_synset_id`, `image`, `astronomic_symbol_image`, `store_norske_leksikon_id`, `namuwiki_id`, `on_focus_list_of_wikimedia_project`, `commons_gallery`, `kbpedia_id`]",
        "Response": "Table: `constellation`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `assembly_of_the_pre_replicative_complex` (`label`, `description`, `found_in_taxon`, `reactome_id`, `instance_of`, `part_of`, `has_parts`, `exact_match`, `cites_work`)  VALUES ('Formation of MCM2-7 complex', 'An instance of the biological reaction in Homo sapiens with Reactome ID (R-HSA-9749253)', 'Homo sapiens', 'R-HSA-9749253', 'biological process', 'Assembly of the pre-replicative complex', 'MCM2:MCM4:MCM6:MCM7 [nucleoplasm]', 'https://identifiers.org/reactome:R-HSA-9749253', 'Molecular architecture of the recombinant human MCM2-7 helicase in complex with nucleotides and DNA.');\nDatabase State:\n- Table: `citation`, Columns: [`label`, `description`, `publication_date`, `volume`, `instance_of`, `doi`, `issue`, `published_in`, `author_name_string`, `pubmed_id`, `title`, `pages`, `cites_work`, `language_of_work_or_name`]\n- Table: `assembly_of_the_pre_replicative_complex`, Columns: [`label`, `description`, `found_in_taxon`, `reactome_id`, `instance_of`, `part_of`, `has_parts`, `exact_match`, `cites_work`]",
        "Response": "Table: `assembly_of_the_pre_replicative_complex`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `roller_coaster` (`Roller_Coaster_ID`, `Name`, `Park`, `Country_ID`, `Length`, `Height`, `Speed`, `Opened`, `Status`)  VALUES (5, 'Twister', 'Gr\u00f6na Lund', 2, 1574.0, 50.0, '37.9', '2011', 'Operating');\nDatabase State:\n- Table: `country`, Columns: [`Country_ID`, `Name`, `Population`, `Area`, `Languages`]\n- Table: `roller_coaster`, Columns: [`Roller_Coaster_ID`, `Name`, `Park`, `Country_ID`, `Length`, `Height`, `Speed`, `Opened`, `Status`]",
        "Response": "Table: `roller_coaster`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO routes (rid, dst_apid)  VALUES (5044, 3817, 'SMF', 3876, 'CT', 24, 'AA', NULL);\nDatabase State:\n- Table: routes, Columns: [rid, dst_apid]",
        "Response": "Table: routes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (project_id, outcome_code, outcome_details)  VALUES (14, 'Patent', NULL);\nDatabase State:\n- Table: Projects, Columns: [project_id, organisation_id, project_details]\n- Table: Research_Outcomes, Columns: [outcome_code, outcome_description]\n- Table: Project_Staff, Columns: [staff_id, project_id, role_code, date_from, date_to, other_details]\n- Table: Project_Outcomes, Columns: [project_id, outcome_code, outcome_details]\n- Table: Organisations, Columns: [organisation_id, organisation_type, organisation_details]",
        "Response": "Table: Project_Outcomes"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `film_actor` (actor_id, film_id, last_update)  VALUES (86, 752, '2006-02-15 05:05:03.0');\nDatabase State:\n- Table: `film_category`, Columns: [film_id, category_id, last_update]\n- Table: film_text, Columns: [film_id, title, description]\n- Table: `film_actor`, Columns: [actor_id, film_id, last_update]\n- Table: `address`, Columns: [address_id, address, address2, district, city_id, postal_code, phone, last_update]\n- Table: `staff`, Columns: [staff_id, first_name, last_name, address_id, picture, email, store_id, active, username, password, last_update]\n- Table: `language`, Columns: [language_id, name, last_update]\n- Table: `rental`, Columns: [rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update]\n- Table: `inventory`, Columns: [inventory_id, film_id, store_id, last_update]",
        "Response": "Table: `film_actor`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `instance_of`, `duration`, `start_time`, `end_time`, `short_name`, `follows`, `followed_by`, `series_ordinal`)  VALUES ('1979-1980 one-year-period', 'period of about one year starting in 1979 and ending in 1980', 'one-year-period overlapping two calendar years', 1.0, '+1979-00-00T00:00:00Z', '+1980-00-00T00:00:00Z', '1979-1980', '1978-1979 one-year-period', '1980-1981 one-year-period', '1979.0');\nDatabase State:\n- Table: `follows`, Columns: [`label`, `description`, `sport`, `instance_of`, `country`, `time_period`, `competition_class`, `follows`, `on_focus_list_of_wikimedia_project`, `followed_by`, `participating_team`]\n- Table: `swiss_team_badminton_championships`, Columns: [`label`, `description`, `sport`, `instance_of`, `country`, `time_period`, `competition_class`, `followed_by`, `on_focus_list_of_wikimedia_project`, `follows`, `participating_team`]\n- Table: `event`, Columns: [`label`, `description`, `sport`, `instance_of`, `country`, `time_period`, `competition_class`, `followed_by`, `on_focus_list_of_wikimedia_project`, `follows`, `participating_team`]",
        "Response": "Table: `era`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `peptide_methionine_sulfoxide_reductase` (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('Methionine sulfoxide reductase B PSPTO_1780', 'microbial protein found in Pseudomonas syringae pv. tomato str. DC3000', 'Q885Q1', 'methionine sulfoxide reductase B PSPTO_1780', 'response to oxidative stress', 'oxidoreductase activity', 'Peptide methionine sulphoxide reductase MrsB', 'Pseudomonas syringae pv. tomato str. DC3000', 'NP_791605', 'protein', 'Mss4-like superfamily', 'protein');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `peptide_methionine_sulfoxide_reductase`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `shop` (`Shop_ID`, `Shop_Name`, `Location`, `Open_Date`, `Open_Year`)  VALUES (1, 'Dinas Device', 'Dinas', '1 January', 2014);\nDatabase State:\n- Table: `stock`, Columns: [`Shop_ID`, `Device_ID`, `Quantity`]\n- Table: `device`, Columns: [`Device_ID`, `Device`, `Carrier`, `Package_Version`, `Applications`, `Software_Platform`]\n- Table: `shop`, Columns: [`Shop_ID`, `Shop_Name`, `Location`, `Open_Date`, `Open_Year`]",
        "Response": "Table: `shop`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Document_Sections (section_id, document_code, section_sequence, section_code, section_title)  VALUES (21, '675', 9847, '72', 'before');\nDatabase State:\n- Table: Roles, Columns: [role_code, role_description]\n- Table: Document_Structures, Columns: [document_structure_code, parent_document_structure_code, document_structure_description]\n- Table: Users, Columns: [user_id, role_code, user_name, user_login, password]\n- Table: Documents, Columns: [document_code, document_structure_code, document_type_code, access_count, document_name]",
        "Response": "Table: Document_Sections"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, student_id, grade, sat)  VALUES (3, 20, 'B', 4);\nDatabase State:\n- Table: `course`, Columns: [course_id, name, credit, diff]",
        "Response": "Table: registration"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `game` (`stadium_id`, `id`, `Season`, `Date`, `Home_team`, `Away_team`, `Score`, `Competition`)  VALUES (1, 13, 2011, '21 August 2011', 'Bunyodkor', 'Pakhtakor', '2\u20131', 'League');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `game`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (student_id, course_id, registration_date)  VALUES (111, 301, '2008-11-04 10:35:13');\nDatabase State:\n- Table: People, Columns: [person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password]\n- Table: Candidates, Columns: [candidate_id, candidate_details]\n- Table: Students, Columns: [student_id, student_details]",
        "Response": "Table: Student_Course_Registrations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID)  VALUES (150, 'Peter', 'Tucker', 'PTUCKER', '011.44.1344.129268', '1987-08-06', 'SA_REP', 10000, 0.2999999999999999889, 145, 80);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: employees"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO loan (loan_ID, loan_type, cust_ID, branch_ID, amount)  VALUES ('3', 'Business', '3', '3', 5000);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: loan"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Airlines (FL_DATE, OP_CARRIER_AIRLINE_ID, TAIL_NUM, OP_CARRIER_FL_NUM, ORIGIN_AIRPORT_ID, ORIGIN_AIRPORT_SEQ_ID, ORIGIN_CITY_MARKET_ID, ORIGIN, DEST_AIRPORT_ID, DEST_AIRPORT_SEQ_ID, DEST_CITY_MARKET_ID, DEST, CRS_DEP_TIME, DEP_TIME, DEP_DELAY, DEP_DELAY_NEW, ARR_TIME, ARR_DELAY, ARR_DELAY_NEW, CANCELLED, CANCELLATION_CODE, CRS_ELAPSED_TIME, ACTUAL_ELAPSED_TIME, CARRIER_DELAY, WEATHER_DELAY, NAS_DELAY, SECURITY_DELAY, LATE_AIRCRAFT_DELAY)  VALUES ('2018/8/8', 20416, 'N536NK', 241, 11042, 1104205, 30647, 'CLE', 10397, 1039707, 30397, 'ATL', 600, 606, 6, 6, 745, -3, 0, 0, NULL, 108, 99, NULL, NULL, NULL, NULL, NULL);\nDatabase State:\n- Table: `Air Carriers`, Columns: [Code, Description]\n- Table: Airports, Columns: [Code, Description]",
        "Response": "Table: Airlines"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `subclass_of`, `commons_category`, `topics_main_category`, `freebase_id`, `image`, `psh_id`, `instance_of`, `uses`, `practiced_by`, `iptc_newscode`, `encyclop\u00e6dia_britannica_online_id`, `enciclop\u00e8dia_de_lesport_catal\u00e0_id`, `yso_id`, `store_norske_leksikon_id`, `fandom_article_id`, `icon`, `nkcr_aut_id`, `openstreetmap_tag_or_key`, `bncf_thesaurus_id`, `ndl_authority_id`, `gnd_id`, `quora_topic_id`, `on_focus_list_of_wikimedia_project`, `french_vikidia_id`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`, `abc_news_topic_id`, `den_store_danske_id`, `wordnet_31_synset_id`, `great_russian_encyclopedia_online_id`, `kbpedia_id`)  VALUES ('water polo', 'ballgame-team sport played in water by teams competing to put the ball into the opponent''s goal', 'team sport', 'Water polo', 'Category:Water polo', '/m/0crlz', 'DFC Sete v FNC Douai Coupe de la Ligue 2014 t144334.jpg', '9988.0', 'type of sport', 'water polo ball', 'water polo player', 'mediatopic/20001091', 'sports/water-polo', '13472.0', '16766.0', 'vannpolo', 'world-sports-results:Water_Polo', 'Water polo pictogram.svg', 'ph138660', 'Tag:sport=water_polo', '27573.0', '571564.0', '4064699-3', 'Water-Polo', 'Wikipedia:Vital articles/Level/4', 'Water-polo', 'sh85145594', '9.870075512735052e+17', 'water-polo', 'vandpolo', '00465546-n', '1921645.0', 'WaterPolo');\nDatabase State:\n- Table: `use`, Columns: [`label`, `description`, `commons_category`, `freebase_id`, `sport`, `image`, `kbpedia_id`, `subclass_of`, `nomenclature_for_museum_cataloging`]\n- Table: `intentional_human_activity`, Columns: [`label`, `description`, `field_of_this_occupation`, `subclass_of`, `instance_of`, `commons_category`, `topics_main_category`, `female_form_of_label`, `topics_main_template`]\n- Table: `type_of_sport`, Columns: [`label`, `description`, `subclass_of`, `commons_category`, `topics_main_category`, `freebase_id`, `image`, `instance_of`, `uses`, `practiced_by`, `iptc_newscode`, `encyclop\u00e6dia_britannica_online_id`, `enciclop\u00e8dia_de_lesport_catal\u00e0_id`, `yso_id`, `fandom_article_id`, `icon`, `nkcr_aut_id`, `openstreetmap_tag_or_key`, `bncf_thesaurus_id`, `gnd_id`, `quora_topic_id`, `on_focus_list_of_wikimedia_project`, `french_vikidia_id`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`, `abc_news_topic_id`, `den_store_danske_id`, `wordnet_31_synset_id`, `great_russian_encyclopedia_online_id`, `iab_code`, `kbpedia_id`]\n- Table: `field_of_work`, Columns: [`label`, `description`, `subclass_of`, `commons_category`, `topics_main_category`, `freebase_id`, `image`, `psh_id`, `instance_of`, `uses`, `practiced_by`, `iptc_newscode`, `encyclop\u00e6dia_britannica_online_id`, `enciclop\u00e8dia_de_lesport_catal\u00e0_id`, `yso_id`, `store_norske_leksikon_id`, `fandom_article_id`, `icon`, `nkcr_aut_id`, `openstreetmap_tag_or_key`, `bncf_thesaurus_id`, `ndl_authority_id`, `gnd_id`, `quora_topic_id`, `on_focus_list_of_wikimedia_project`, `french_vikidia_id`, `library_of_congress_authority_id`, `national_library_of_israel_j9u_id`, `abc_news_topic_id`, `den_store_danske_id`, `wordnet_31_synset_id`, `great_russian_encyclopedia_online_id`, `kbpedia_id`]\n- Table: `2018_central_american_and_caribbean_games`, Columns: [`label`, `description`, `instance_of`, `part_of`, `sport`, `follows`, `google_knowledge_graph_id`]\n- Table: `follows`, Columns: [`label`, `description`, `sport`, `instance_of`, `point_in_time`, `country`, `freebase_id`]",
        "Response": "Table: `field_of_work`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`)  VALUES ('Arginyl-tRNA synthetase XCC3861', 'microbial protein found in Xanthomonas campestris pv. campestris str. ATCC 33913', 'arginyl-tRNA synthetase XCC3861', 'Q8P455', 'protein biosynthesis', 'nucleotide binding', 'cytoplasm', 'Arginyl tRNA synthetase N-terminal domain', 'Xanthomonas campestris pv. campestris str. ATCC 33913', 'NP_639201', 'protein', 'Rossmann fold', 'protein');\nDatabase State:\n- Table: `encodes`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`, `subclass_of`]",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1011, 'Adams', 'David', 22, 'M', 600, 1148, 'PHL');\nDatabase State:\n- Table: Lives_in, Columns: [stuid, dormid, room_number]\n- Table: Has_amenity, Columns: [dormid, amenid]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, category, person, role, credited)  VALUES ('S20-E14', 'Sound Department', 'Ronny Cox', 'production mixer', 'true');\nDatabase State:\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]\n- Table: Credit, Columns: [episode_id, category, person, role, credited]\n- Table: `Episode`, Columns: [episode_id, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Character_Award, Columns: [award_id, character]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Award, Columns: [award_id, organization, year, award_category, award, person, role, episode_id, season, song, result]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`)  VALUES ('Caulobacter crescentus CB15', 'nan', 'Caulobacter crescentus CB15', 'Caulobacter crescentus', '190650', 'strain', 'Gram-negative bacteria', 'GCA_000006905.1');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`, `instance_of`, `gram_staining`, `genbank_assembly_accession_number`]\n- Table: `lipoprotein_smpa_omla_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `refseq_protein_id`, `encoded_by`, `cell_component`, `has_parts`, `part_of`, `instance_of`]",
        "Response": "Table: `natural_product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `homologene_id`, `refseq_rna_id`, `ensembl_transcript_id`, `ortholog`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `expressed_in`)  VALUES ('FABP5P3', 'pseudogene in the species Homo sapiens', '220832', 'ENSG00000241735', 'nan', 'NR_002935', 'ENST00000477993', 'nan', 'nan', 'Homo sapiens', 'forward strand', '152443176.0', '152435695.0', 'human chromosome 7', 'pseudogene', 'ganglionic eminence');\nDatabase State:\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]\n- Table: `cytosolic_fatty_acid_binding_domain_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `molecular_function`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`, `has_parts`]",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `riboflavin_kinase_domain_superfamily` (`label`, `description`, `subclass_of`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Bifunctional riboflavin kinase/FMN adenylyltransferase spr1017', 'microbial protein found in Streptococcus pneumoniae R6', 'protein', 'bifunctional riboflavin kinase/FMN adenylyltransferase spr1017', 'Q8DPT6', 'FMN biosynthetic process', 'transferase activity', 'Riboflavin kinase domain, bacterial/eukaryotic', 'Streptococcus pneumoniae R6', 'NP_358611', 'protein', 'Rossmann fold');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `riboflavin_kinase_domain_superfamily`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (2501, 73, 0.05700000000000000205, NULL, 'Hopalicious', 'American Pale Ale (APA)', 12.0);\nDatabase State:\n- Table: breweries, Columns: [id, name, city, state]\n- Table: `beers`, Columns: [id, brewery_id, abv, ibu, name, style, ounces]",
        "Response": "Table: `beers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Affiliated_With (Physician, Department, PrimaryAffiliation)  VALUES (5, 1, 1);\nDatabase State:\n- Table: Trained_In, Columns: [Physician, Treatment, CertificationDate, CertificationExpires]\n- Table: Room, Columns: [RoomNumber, RoomType, BlockFloor]",
        "Response": "Table: Affiliated_With"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `located_in_the_administrative_territorial_entity`, `commons_category`, `country`, `coordinate_location`, `instance_of`, `freebase_id`, `geonames_id`, `elevation_above_sea_level`, `topics_main_category`, `image`, `postal_code`, `population`, `located_in_time_zone`, `capital_of`, `category_for_maps`, `gnd_id`, `category_of_associated_people`, `viaf_id`, `described_by_source`, `official_website`, `whos_on_first_id`, `national_library_of_israel_j9u_id`)  VALUES ('Serres', 'city of Central Macedonia, Greece', 'Serres Municipality', 'Serres', 'Greece', '41.083333333333', 'city', '/m/01s2c4', '734330.0', 70.0, 'Category:Serres', 'Serres overview.jpg', '621 xx', 58287.0, 'UTC+02:00', 'Serres Municipality', 'nan', '4107644-8', 'Category:People from Serres', '147756468', 'Brockhaus and Efron Encyclopedic Dictionary', 'http://www.serres.gr/', '101752349.0', '9.870075667149052e+17');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `capital_city`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `present_in_work`, `instance_of`)  VALUES ('Zip-Line Gun', 'fictional weapon in the Marvel Cinematic Universe', 'Captain America: The First Avenger', 'fictional weapon');\nDatabase State:\n- Table: `fictional_weapon`, Columns: [`label`, `description`, `present_in_work`, `instance_of`]",
        "Response": "Table: `fictional_weapon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (inspection_id, point_id, fine, inspector_comment)  VALUES (1752110, 40, 0, 'VIOLATION CORRECTED');\nDatabase State:\n- Table: inspection_point, Columns: [point_id, Description, category, code, fine, point_level]\n- Table: violation, Columns: [inspection_id, point_id, fine, inspector_comment]\n- Table: employee, Columns: [employee_id, first_name, last_name, address, city, state, zip, phone, title, salary, supervisor]",
        "Response": "Table: violation"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `paragraphs` (id, ParagraphNum, PlainText, character_id, chapter_id)  VALUES (654026, 1436, 'Is it possible that any villany should be so dear?', 278, 19234);\nDatabase State:\n- Table: `works`, Columns: [id, Title, LongTitle, Date, GenreType]\n- Table: `characters`, Columns: [id, CharName, Abbrev, Description]\n- Table: `chapters`, Columns: [id, Act, Scene, Description, work_id]",
        "Response": "Table: `paragraphs`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num)  VALUES (47, 14, 4, 'bucket', 'short', 'not_double', 'none', 2, 'circle', 1);\nDatabase State:\n- Table: trains, Columns: [id, direction]\n- Table: cars, Columns: [id, train_id, position, shape, len, sides, roof, wheels, load_shape, load_num]",
        "Response": "Table: cars"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `paradores_de_turismo` (`label`, `description`, `country`, `coordinate_location`, `commons_category`, `instance_of`, `located_in_the_administrative_territorial_entity`, `image`)  VALUES ('Parador de Las Ca\u00f1adas del Teide', 'nan', 'Spain', '28.224444444444', 'Parador de Las Ca\u00f1adas del Teide', 'Paradores de Turismo', 'nan', 'Parador de Las Ca\u00f1adas del Teide 2.jpg');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `topics_main_category`, `commons_category`, `country`, `coat_of_arms_image`, `postal_code`, `image`, `coordinate_location`, `head_of_government`, `instance_of`, `freebase_id`, `located_in_the_administrative_territorial_entity`, `ine_municipality_code`, `population`, `geonames_id`, `openstreetmap_relation_id`, `viaf_id`, `elevation_above_sea_level`, `official_website`, `shares_border_with`, `located_in_time_zone`, `licence_plate_code`, `area`, `library_of_congress_authority_id`, `gran_enciclop\u00e8dia_catalana_id`, `whos_on_first_id`, `official_name`, `male_population`, `female_population`, `inspire_id`, `factgrid_item_id`, `flag_image`]\n- Table: `paradores_de_turismo`, Columns: [`label`, `description`, `country`, `coordinate_location`, `commons_category`, `instance_of`, `located_in_the_administrative_territorial_entity`, `image`]\n- Table: `jurisdiction`, Columns: [`label`, `description`, `commons_category`, `country`, `coat_of_arms_image`, `postal_code`, `coordinate_location`, `head_of_government`, `instance_of`, `freebase_id`, `ine_municipality_code`, `population`, `geonames_id`, `openstreetmap_relation_id`, `topics_main_category`, `viaf_id`, `shares_border_with`, `image`, `flag_image`, `elevation_above_sea_level`, `official_website`, `office_held_by_head_of_government`, `located_in_the_administrative_territorial_entity`, `located_in_time_zone`, `licence_plate_code`, `area`, `whos_on_first_id`, `official_name`, `male_population`, `female_population`, `inspire_id`, `factgrid_item_id`, `gran_enciclop\u00e8dia_catalana_id`]",
        "Response": "Table: `paradores_de_turismo`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `clay_tablet` (`label`, `description`, `instance_of`, `location`, `collection`, `inventory_number`)  VALUES ('Nebo-Sarsekim Tablet', 'nan', 'clay tablet', 'nan', 'nan', 'nan');\nDatabase State:\n- Table: `physical_location`, Columns: [`label`, `description`, `commons_category`, `instance_of`, `image`]\n- Table: `clay_tablet`, Columns: [`label`, `description`, `instance_of`, `location`, `collection`, `inventory_number`]\n- Table: `collection`, Columns: [`label`, `description`, `instance_of`, `commons_category`, `coordinate_location`, `freebase_id`, `gnd_id`, `image`, `official_website`, `country`, `viaf_id`, `isni`, `library_of_congress_authority_id`, `worldcat_identities_id`, `national_library_of_israel_j9u_id`]",
        "Response": "Table: `clay_tablet`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO price (ID, price)  VALUES (156, 30000.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: price"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`)  VALUES ('mouse chromosome 6', 'Mus musculus chromosome', 'NC_000072', 'house mouse', 'chromosome');\nDatabase State:\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]\n- Table: `expressed_in`, Columns: [`label`, `description`, `terminologia_anatomica_98_id`, `foundational_model_of_anatomy_id`, `described_by_source`, `mesh_tree_code`, `jstor_topic_id`, `subclass_of`, `ta98_latin_term`, `mesh_descriptor_id`, `uberon_id`, `ta2_id`, `microsoft_academic_id`, `umls_cui`, `kbpedia_id`, `openalex_id`, `commons_category`, `instance_of`, `freebase_id`, `encyclop\u00e6dia_britannica_online_id`, `wordnet_31_synset_id`]\n- Table: `luc7_related`, Columns: [`label`, `description`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `orthology`, Columns: [`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `homologene_id`, `chromosome`, `found_in_taxon`, `refseq_rna_id`, `ensembl_transcript_id`, `encodes`, `ortholog`, `strand_orientation`, `instance_of`, `genomic_end`, `genomic_start`, `expressed_in`]\n- Table: `encodes`, Columns: [`label`, `description`, `ensembl_protein_id`, `encoded_by`, `uniprot_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `chromosome`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `taxon` (`label`, `description`, `taxon_rank`, `parent_taxon`, `taxon_name`, `instance_of`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `itis_tsn`, `gram_staining`, `irmng_id`, `lpsn_url`, `microsoft_academic_id`, `catalogue_of_life_id`)  VALUES ('Geobacter sulfurreducens', 'species of bacterium', 'species', 'Geobacter', 'Geobacter sulfurreducens', 'taxon', '/m/0wbkj43', '35554', '3220519.0', '961888.0', 'Gram-negative bacteria', '10436710.0', 'http://www.bacterio.net/geobacter.html#sulfurreducens', '2779812452.0', '6KBW6');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `taxon_name`, `instance_of`, `parent_taxon`, `ncbi_taxonomy_id`, `gram_staining`, `genbank_assembly_accession_number`]",
        "Response": "Table: `taxon`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO batting (player_id, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp)  VALUES ('galaran01', 1995, 1, 'COL', 'NL', 143, 554, 89, 155, 29, 3, 31, 106, 12, 2, 32, 146, 6, 13, 0, 5, 14);\nDatabase State:\n- Table: hall_of_fame, Columns: [player_id, yearid, votedby, ballots, needed, votes, inducted, category, needed_note]\n- Table: pitching, Columns: [player_id, year, stint, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]\n- Table: all_star, Columns: [player_id, year, game_num, game_id, team_id, league_id, gp, starting_pos]\n- Table: player_college, Columns: [player_id, college_id, year]\n- Table: batting, Columns: [player_id, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]\n- Table: manager, Columns: [player_id, year, team_id, league_id, inseason, g, w, l, rank, plyr_mgr]\n- Table: team_franchise, Columns: [franchise_id, franchise_name, active, na_assoc]\n- Table: player_award, Columns: [player_id, tie, notes]\n- Table: home_game, Columns: [year, league_id, team_id, park_id, span_first, span_last, games, openings, attendance]\n- Table: player, Columns: [player_id, birth_year, birth_month, birth_day, birth_country, birth_state, birth_city, death_year, death_month, death_day, death_country, death_state, death_city, name_first, name_last, name_given, weight, height, bats, throws, debut, final_game, retro_id, bbref_id]\n- Table: salary, Columns: [year, team_id, league_id, player_id, salary]\n- Table: fielding_postseason, Columns: [player_id, year, team_id, league_id, round, pos, g, gs, inn_outs, po, a, e, dp, tp, pb, sb, cs]\n- Table: player_award_vote, Columns: [award_id, year, league_id, player_id, points_won, points_max, votes_first]\n- Table: park, Columns: [park_id, park_name, park_alias, city, state, country]\n- Table: team, Columns: [year, league_id, team_id, franchise_id, div_id, rank, g, ghome, w, l, div_win, wc_win, lg_win, ws_win, r, ab, h, double, triple, hr, bb, so, sb, cs, hbp, sf, ra, er, era, cg, sho, sv, ipouts, ha, hra, bba, soa, e, dp, fp, name, park, attendance, bpf, ppf, team_id_br, team_id_lahman45, team_id_retro]\n- Table: college, Columns: [college_id, name_full, city, state, country]\n- Table: manager_award_vote, Columns: [award_id, year, league_id, player_id, points_won, points_max, votes_first]\n- Table: appearances, Columns: [year, team_id, league_id, player_id, g_all, gs, g_batting, g_defense, g_p, g_c, g_1b, g_2b, g_3b, g_ss, g_lf, g_cf, g_rf, g_of, g_dh, g_ph, g_pr]\n- Table: manager_award, Columns: [player_id, award_id, year, league_id, tie, notes]\n- Table: fielding, Columns: [player_id, year, stint, team_id, league_id, pos, g, gs, inn_outs, po, a, e, dp, pb, wp, sb, cs, zr]\n- Table: postseason, Columns: [year, round, team_id_winner, league_id_winner, team_id_loser, league_id_loser, wins, losses, ties]\n- Table: batting_postseason, Columns: [year, round, player_id, team_id, league_id, g, ab, r, h, double, triple, hr, rbi, sb, cs, bb, so, ibb, hbp, sh, sf, g_idp]\n- Table: team_half, Columns: [year, league_id, team_id, half, div_id, div_win, rank, g, w, l]\n- Table: manager_half, Columns: [player_id, year, team_id, league_id, inseason, half, g, w, l, rank]\n- Table: pitching_postseason, Columns: [player_id, year, round, team_id, league_id, w, l, g, gs, cg, sho, sv, ipouts, h, er, hr, bb, so, baopp, era, ibb, wp, hbp, bk, bfp, gf, r, sh, sf, g_idp]",
        "Response": "Table: batting"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `cranial_nerve_formation` (`label`, `description`, `gene_ontology_id`, `part_of`, `subclass_of`, `exact_match`, `instance_of`)  VALUES ('hypoglossal nerve formation', 'The process that gives rise to the hypoglossal nerve. This process pertains to the initial formation of a structure from unspecified parts. This motor nerve innervates all the intrinsic and all but one of the extrinsic muscles of the tongue.', 'GO:0021620', 'hypoglossal nerve morphogenesis', 'cranial nerve formation', 'http://purl.obolibrary.org/obo/GO_0021620', 'biological process');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `cranial_nerve_formation`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Player_Attributes` (id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes)  VALUES (118593, 174549, 47373, '2011-08-30 00:00:00', 81, 83, 'right', 'high', 'medium', 79, 74, 60, 80, 71, 82, 77, 79, 74, 84, 77, 72, 87, 76, 73, 74, 67, 72, 60, 77, 50, 56, 78, 84, 77, 20, 21, 22, 11, 8, 5, 10, 11);\nDatabase State:\n- Table: `Team`, Columns: [id, team_api_id, team_fifa_api_id, team_long_name, team_short_name]\n- Table: Player, Columns: [id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight]\n- Table: Team_Attributes, Columns: [id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass]\n- Table: League, Columns: [id, country_id, name]",
        "Response": "Table: `Player_Attributes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `glycoside_hydrolase_family_31_n_terminal_domain_protein_family` (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Glucosidase, alpha; neutral C', 'mammalian protein found in Rattus norvegicus', 'D4A7G5', 'Ganc', 'metabolism', 'catalytic activity', 'Glycosyl hydrolases family 31, active site', 'brown rat', 'NP_001139312', 'protein', 'glycoside hydrolase superfamily');\nDatabase State:\n- Table: `natural_product`, Columns: [`label`, `description`, `instance_of`, `taxon_name`, `parent_taxon`, `ncbi_taxonomy_id`]\n- Table: `taxon`, Columns: [`label`, `description`, `parent_taxon`, `taxon_name`, `instance_of`, `taxon_rank`, `itis_tsn`, `freebase_id`, `ncbi_taxonomy_id`, `gbif_taxon_id`, `irmng_id`, `catalogue_of_life_id`]",
        "Response": "Table: `glycoside_hydrolase_family_31_n_terminal_domain_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `sex_or_gender`, `date_of_birth`, `instance_of`, `country_of_citizenship`, `occupation`, `participant_in`, `given_name`, `sport`, `cycling_archives_cyclist_id`, `place_of_birth`, `procyclingstats_cyclist_id`, `member_of_sports_team`)  VALUES ('Joseph Mathy', 'Belgian bicycle racer (1944-1969)', 'male', '+1944-07-08T00:00:00Z', 'human', 'Belgium', 'sport cyclist', 'Tour de France', 'Joseph', 'cycle sport', '5083.0', 'Lubin', '173455.0', 'nan');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `winner`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (169, 182, 0.05299999999999999851, 25.0, 'Horny Toad Cerveza (2013)', 'American Blonde Ale', 16.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `beers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO EMPLOYEE (EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB)  VALUES (100, 'Worley', 'James', 'F', 'CUST', '1978-2-23', '1950-6-12');\nDatabase State:\n- Table: COURSE, Columns: [CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT]\n- Table: DEPARTMENT, Columns: [DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION]\n- Table: CLASS, Columns: [CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM]",
        "Response": "Table: EMPLOYEE"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`product_id`, `product`, `dimensions`, `dpi`, `pages_per_minute_color`, `max_page_size`, `interface`)  VALUES (3, 'Xerox Travel Scanner 100', '289 x 51 x 38', 600.0, 4.0, 'A4', 'USB 2.0');\nDatabase State:\n- Table: `store_district`, Columns: [`Store_ID`, `District_ID`]\n- Table: `district`, Columns: [`District_ID`, `District_name`, `Headquartered_City`, `City_Population`, `City_Area`]",
        "Response": "Table: `product`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO sales_in_weather (date, store_nbr, item_nbr, units)  VALUES ('2012-05-22', 18, 68, 0);\nDatabase State:\n- Table: relation, Columns: [store_nbr, station_nbr]\n- Table: sales_in_weather, Columns: [date, store_nbr, item_nbr, units]",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `county_public_safety` (`County_ID`, `Name`, `Population`, `Police_officers`, `Residents_per_officer`, `Case_burden`, `Crime_rate`, `Police_force`, `Location`)  VALUES (3, 'Campbell River', 30810, 40, 770, 137, 178.0, 'RCMP', 'West');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `county_public_safety`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`id`, `name`, `Location`, `Product`, `Chromosome`, `OMIM`, `Porphyria`)  VALUES (1, 'ALA synthase', 'Mitochondrion', '\u03b4-Aminolevulinic acid', '3p21.1', 125290, 'none');\nDatabase State:\n- Table: `enzyme`, Columns: [`id`, `name`, `Location`, `Product`, `Chromosome`, `OMIM`, `Porphyria`]",
        "Response": "Table: `enzyme`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`People_ID`, `Name`, `Country`, `Is_Male`, `Age`)  VALUES (9, 'Graeme McDowell', 'Northern Ireland', 'T', 34);\nDatabase State:\n- Table: `people`, Columns: [`People_ID`, `Name`, `Country`, `Is_Male`, `Age`]",
        "Response": "Table: `people`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `tmp21_related` (`label`, `description`, `encoded_by`, `uniprot_protein_id`, `ensembl_protein_id`, `cell_component`, `biological_process`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Baiser Dmel_CG11785', 'Protein found in Drosophila melanogaster', 'bai', 'Q8SXY6', 'FBpp0084133', 'endomembrane system', 'multicellular organism development', 'GOLD domain', 'Drosophila melanogaster', 'NP_651323', 'protein', 'TMP21-related');\nDatabase State:\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `cellular_component`, Columns: [`label`, `description`, `gene_ontology_id`, `exact_match`, `instance_of`, `subclass_of`]",
        "Response": "Table: `tmp21_related`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO region_sales (region_id, game_platform_id, num_sales)  VALUES (2, 424, 0.08000000000000000166);\nDatabase State:\n- Table: game_platform, Columns: [id, game_publisher_id, platform_id, release_year]\n- Table: platform, Columns: [id, platform_name]",
        "Response": "Table: region_sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `country`, `shares_border_with`, `capital`, `commons_category`, `locator_map_image`, `coordinate_location`, `openstreetmap_relation_id`, `located_in_the_administrative_territorial_entity`, `official_website`, `topics_main_category`, `page_banner`, `curlie_id`, `instance_of`, `freebase_id`, `gnis_id`, `inception`, `category_for_people_born_here`, `category_for_people_who_died_here`, `geonames_id`, `category_of_associated_people`, `seal_image`, `area`, `library_of_congress_authority_id`, `viaf_id`, `population`, `contains_the_administrative_territorial_entity`, `water_as_percent_of_area`, `named_after`, `getty_thesaurus_of_geographic_names_id`, `native_label`, `archinform_location_id`, `wolfram_language_entity_code`, `whos_on_first_id`, `category_for_maps`, `worldcat_identities_id`, `hasc`, `ballotpedia_id`, `inaturalist_place_id`, `national_library_of_israel_j9u_id`, `per_capita_income`, `number_of_households`)  VALUES ('Oregon', 'state of the United States of America', 'United States of America', 'California', 'Salem', 'Oregon', 'Oregon in United States.svg', '43.935833', '165476.0', 'United States of America', 'https://www.oregon.gov/', 'Category:Oregon', 'PaulinaLakeOregonBoatDockJuly2010 banner.jpg', 'Regional/North_America/United_States/Oregon/', 'U.S. state', '/m/05kj_', '1155107.0', '+1859-02-14T00:00:00Z', 'Category:Births in Oregon', 'Category:Deaths in Oregon', '5744337.0', 'Category:People from Oregon', 'Seal of Oregon.svg', 255026.0, 'n79021953', '129543877.0', 4237256.0, 'Baker County', 2.430000000000000159, 'nan', '7007708.0', 'State of Oregon', '2883.0', 'Entity[\"AdministrativeDivision\", {\"Oregon\", \"UnitedStates\"}]', '85688513.0', 'Category:Oregon maps', 'lccn-n79021953', 'US.OR', 'Oregon', '10.0', '9.870075549567052e+17', 35393.0, 1642579.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO City (ID, Name, CountryCode, District, Population)  VALUES (1717, 'Aizuwakamatsu', 'JPN', 'Fukushima', 119287);\nDatabase State:\n- Table: Country, Columns: [Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2]\n- Table: CountryLanguage, Columns: [CountryCode, Language, IsOfficial, Percentage]",
        "Response": "Table: City"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Sales Orders` (OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`)  VALUES ('SO - 0004017', 'In-Store', 'WARE-XYS1001', '5/15/19', '9/5/19', '9/29/19', '9/30/19', 'USD', 6, 27, 25, 23, 3, 0.1000000000000000055, '3,979.80', '3,263.44');\nDatabase State:\n- Table: `Sales Orders`, Columns: [OrderNumber, `Sales Channel`, WarehouseCode, ProcuredDate, OrderDate, ShipDate, DeliveryDate, CurrencyCode, _SalesTeamID, _CustomerID, _StoreID, _ProductID, `Order Quantity`, `Discount Applied`, `Unit Price`, `Unit Cost`]",
        "Response": "Table: `Sales Orders`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (locationID, locationcity, address, state, zipcode, officephone)  VALUES (8, 'Los Angeles', '1400 Main St', 'CA', 94235, '(705)639-0227');\nDatabase State:\n- Table: location, Columns: [locationID, locationcity, address, state, zipcode, officephone]\n- Table: employee, Columns: [ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `Player_Attributes` (id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes)  VALUES (110212, 189234, 127945, '2015-10-23 00:00:00', 75, 78, 'right', 'medium', 'medium', 74, 75, 52, 73, 68, 77, 66, 65, 65, 75, 86, 86, 74, 73, 72, 78, 73, 69, 67, 78, 60, 56, 75, 66, 72, 55, 62, 57, 11, 7, 14, 11, 8);\nDatabase State:\n- Table: `Team`, Columns: [id, team_api_id, team_fifa_api_id, team_long_name, team_short_name]\n- Table: League, Columns: [id, country_id, name]\n- Table: Country, Columns: [id, name]",
        "Response": "Table: `Player_Attributes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Climber_ID`, `Name`, `Country`, `Time`, `Points`, `Mountain_ID`)  VALUES (1, 'Klaus Enders', 'West Germany', '1:13.05.6', 15.0, 1);\nDatabase State:\n- Table: `climber`, Columns: [`Climber_ID`, `Name`, `Country`, `Time`, `Points`, `Mountain_ID`]",
        "Response": "Table: `climber`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `great_russian_encyclopedia_online_id`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `coordinates_of_southernmost_point`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `new_york_times_topic_id`, `babelnet_id`, `geonames_id`, `gnd_id`, `unicode_character`, `emergency_phone_number`, `unesco_thesaurus_id`, `electrical_plug_type`, `licence_plate_code`, `different_from`, `coordinates_of_westernmost_point`, `geography_of_topic`, `stw_thesaurus_for_economics_id`, `iso_3166_1_alpha_3_code`, `office_held_by_head_of_government`, `quora_topic_id`, `curlie_id`, `country`, `native_label`, `guardian_topic_id`, `basic_form_of_government`, `musicbrainz_area_id`, `has_quality`, `coat_of_arms_image`, `uic_alphabetical_country_code`, `mesh_descriptor_id`, `located_in_or_next_to_body_of_water`, `insee_countries_and_foreign_territories_code`, `diplomatic_relation`, `ituisoiec_object_identifier`, `commons_gallery`, `inception`, `viaf_id`, `civicus_monitor_country_entry`, `nuts_code`, `history_of_topic`, `gran_enciclop\u00e8dia_catalana_id`, `freebase_id`, `replaces`, `subreddit`, `continent`, `capital`, `coat_of_arms`, `demonym`, `geoshape`, `openstreetmap_relation_id`, `wipo_st3`, `coordinates_of_northernmost_point`, `coordinates_of_easternmost_point`, `nkcr_aut_id`, `mobile_country_code`, `total_fertility_rate`, `maritime_identification_digits`, `us_national_archives_identifier`, `flag_image`, `marriageable_age`, `topics_main_category`, `le_monde_diplomatique_subject_id`, `head_of_state`, `biblioth\u00e8que_nationale_de_france_id`, `category_of_people_buried_here`, `locator_map_image`, `bbc_things_id`, `age_of_majority`, `dewey_decimal_classification`, `area`, `head_of_government`, `fast_id`, `ioc_country_code`, `member_of`, `official_name`, `unemployment_rate`, `railway_traffic_side`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `gs1_country_code`, `page_banner`, `category_for_films_shot_at_this_location`, `mains_voltage`, `executive_body`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `anthem`, `office_held_by_head_of_state`, `life_expectancy`, `part_of`, `commons_category`, `top_level_internet_domain`, `shares_border_with`, `instance_of`, `highest_point`, `category_for_people_born_here`, `short_name`, `number_of_out_of_school_children`, `driving_side`, `uic_numerical_country_code`, `on_focus_list_of_wikimedia_project`, `lowest_point`, `treccani_id`, `iso_3166_1_numeric_code`, `official_language`, `pronunciation_audio`, `idref_id`, `giant_bomb_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `country_calling_code`, `statoids_id`, `library_of_congress_authority_id`, `iso_3166_1_alpha_2_code`, `flag`, `coordinate_location`, `fips_10_4_countries_and_regions`, `described_by_source`, `isni`, `brockhaus_enzyklop\u00e4die_online_id`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `language_used`, `iab_code`, `legislative_body`, `comic_vine_id`, `category_of_associated_people`, `whos_on_first_id`, `world_encyclopedia_of_puppetry_arts_id`, `dr_topic_id`, `inaturalist_place_id`, `omegawiki_defined_meaning`, `hds_id`, `culture`, `geonlp_id`, `analysis_policy_observatory_term_id`, `category_for_maps`, `treccanis_dizionario_di_storia_id`, `french_vikidia_id`, `spanish_vikidia_id`, `online_pwn_encyclopedia_id`, `eurovoc_id`, `worldcat_identities_id`, `motto_text`, `open_data_portal`, `kbpedia_id`, `grove_art_online_id`, `store_norske_leksikon_id`, `rkd_thesaurus_id`, `pm20_geo_code`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `central_bank`, `bbc_news_topic_id`, `economy_of_topic`, `tasteatlas_id`, `bhcl_uuid`, `uk_parliament_thesaurus_id`, `github_topic`, `wordnet_31_synset_id`, `namuwiki_id`, `demographics_of_topic`, `joconde_location_id`, `national_library_of_israel_j9u_id`, `zhihu_topic_id`, `idaigazetteer_id`, `encyclopedia_of_the_history_of_ukraine_id`, `krugosvet_article`, `schoenberg_database_of_manuscripts_place_id`, `armeniapedia_id`, `the_world_factbook_country_id`, `colon_classification`, `democracy_index`, `nese_id`, `der_spiegel_topic_id`, `museum_digital_place_id`, `ysa_id`, `postimees_topic_id`, `yle_topic_id`, `wikisimpsons_id`, `den_store_danske_id`, `urban_electric_transit_country_id`, `hashtag`, `m49_code`, `s\u00fcddeutsche_zeitung_topic_id`, `dagens_nyheter_topic_id`, `alltrails_trail_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `obo_gazetteer_id`, `openstreetmap_element`, `happy_planet_index_score`, `gini_coefficient`, `official_website`, `retirement_age`, `vat_rate`, `larousse_id`, `nalt_id`)  VALUES ('Kosovo', 'partially recognized country in southeastern Europe', '2102027', 1883018.0, '7015191', 'Portal:Kosovo', '41.85765951', 'nan', '1227041', 'euro', 'destination/kosovo', '00049438n', '831053', '4032571-4', '\ud83c\uddfd\ud83c\uddf0', '112', 'nan', 'Schuko', 'nan', 'Kosovo', '42.74077185', 'geography of Kosovo', '30080-0', 'XKX', 'Prime Minister of Kosovo', 'Kosovo', 'Regional/Europe/Serbia/Kosovo/', 'Kosovo', 'Republika e Kosov\u00ebs', 'world/kosovo', 'parliamentary republic', '7b6ae6b7-6f4f-43df-aab8-0c72531ea8ae', 'partly free country', 'Emblem of the Republic of Kosovo.svg', 'nan', 'D063826', 'nan', '99157.0', 'Italy', 'nan', 'Kosova / \u041a\u043e\u0441\u043e\u0432\u043e', '+2008-02-17T00:00:00Z', '132423103', 'kosovo', 'nan', 'history of Kosovo', '35927', '/m/04fh3', 'nan', 'nan', 'Europe', 'Prishtina', 'coat of arms of Kosovo', 'koszov\u00f3i', 'Data:Kosovo.map', '2088990', 'nan', '43.26889376', '42.65122705', 'ge129640', 'nan', NULL, 'nan', '10046499', 'Flag of Kosovo.svg', NULL, 'Category:Republic of Kosovo', 'pays/kosovo', 'Vjosa Osmani', '10166493z', 'nan', 'Europe-Republic of Kosovo.svg', 'nan', NULL, '2--497', 10909.02992000000086, 'Isa Mustafa', '1695919', 'KOS', 'nan', 'Republika e Kosov\u00ebs', NULL, 'nan', 'nan', '14533', 'nan', '390', 'Velika Livada banner.jpg', 'nan', 230.0, 'Government of Kosovo', 'UTC+01:00', 'Category:Deaths in Kosovo', '112712', 'Europe', 'President of Kosovo', NULL, 'Southeast Europe', 'Kosovo', 'nan', 'Albania', 'unitary state', 'Gjeravica', 'nan', '\ud83c\uddfd\ud83c\uddf0', NULL, 'right', 'nan', 'Wikipedia:Vital articles/Level/4', 'nan', 'kosovo', 'nan', 'Albanian', 'Lb-Kosovo.ogg', '124748740', 'nan', 'Prizren District', 'nan', '383', 'nan', 'n2008012665', 'XK', 'flag of Kosovo', '42.55', 'KV', 'nan', 'nan', 'nan', 'Kosovo', 'countries/kv', 'nan', 'nan', 'Assembly of the Republic of Kosovo', '4020-58043', 'Category:Kosovan people', '85633259', 'nan', 'nan', '10298', '378295', 'nan', 'nan', 'Cz9n71', 'nan', 'nan', 'kosovo', 'Kosovo', 'Kosovo', '3926184.0', '5695', 'lccn-n2008012665', 'nan', 'Open Data Portal Kosovo', 'nan', 'nan', 'Kosovo', '32231', 'nan', 'i83176', 'nan', 'Central Bank of Kosovo', 'nan', 'economy of Kosovo', 'kosovo', 'nan', '11213', 'kosovo', '08834659-n', '\ucf54\uc18c\ubcf4', 'demographics of Kosovo', 'd1ca53a5-5cb3-41b0-a012-aea8469eb4af', '987007465441205171', '20007285.0', 'nan', 'nan', 'gosudarstvo-i-politika/kosovo', 'nan', '13176.0', 'kosovo', 'nan', NULL, 'nan', 'kosovo', '7043', 'nan', 'nan', 'nan', '49591', 'Kosovo', 'nan', 'Kosovo', 'nan', 'Kosovo', 'nan', 'nan', NULL, 'nan', 'Q615', '11337', 'nan', NULL, 29.0, 'http://www.rks-gov.net', NULL, NULL, 'pays/wd/127910', 'nan');\nDatabase State:\n- Table: `has_works_in_the_collection`, Columns: [`label`, `description`, `official_website`, `instance_of`, `inception`, `country`]\n- Table: `creator`, Columns: [`label`, `description`, `sex_or_gender`, `instance_of`, `date_of_birth`, `occupation`, `copyright_status_as_a_creator`, `has_works_in_the_collection`]\n- Table: `country`, Columns: [`label`, `description`, `great_russian_encyclopedia_online_id`, `population`, `getty_thesaurus_of_geographic_names_id`, `topics_main_wikimedia_portal`, `coordinates_of_southernmost_point`, `wikimedia_outline`, `ndl_authority_id`, `currency`, `new_york_times_topic_id`, `babelnet_id`, `geonames_id`, `gnd_id`, `unicode_character`, `emergency_phone_number`, `unesco_thesaurus_id`, `electrical_plug_type`, `licence_plate_code`, `different_from`, `coordinates_of_westernmost_point`, `geography_of_topic`, `stw_thesaurus_for_economics_id`, `iso_3166_1_alpha_3_code`, `office_held_by_head_of_government`, `quora_topic_id`, `curlie_id`, `country`, `native_label`, `guardian_topic_id`, `basic_form_of_government`, `musicbrainz_area_id`, `has_quality`, `coat_of_arms_image`, `uic_alphabetical_country_code`, `mesh_descriptor_id`, `located_in_or_next_to_body_of_water`, `insee_countries_and_foreign_territories_code`, `diplomatic_relation`, `ituisoiec_object_identifier`, `commons_gallery`, `inception`, `viaf_id`, `civicus_monitor_country_entry`, `nuts_code`, `history_of_topic`, `gran_enciclop\u00e8dia_catalana_id`, `freebase_id`, `replaces`, `subreddit`, `continent`, `capital`, `coat_of_arms`, `demonym`, `geoshape`, `openstreetmap_relation_id`, `wipo_st3`, `coordinates_of_northernmost_point`, `coordinates_of_easternmost_point`, `nkcr_aut_id`, `mobile_country_code`, `total_fertility_rate`, `maritime_identification_digits`, `us_national_archives_identifier`, `flag_image`, `marriageable_age`, `topics_main_category`, `le_monde_diplomatique_subject_id`, `head_of_state`, `biblioth\u00e8que_nationale_de_france_id`, `category_of_people_buried_here`, `locator_map_image`, `bbc_things_id`, `age_of_majority`, `dewey_decimal_classification`, `area`, `head_of_government`, `fast_id`, `ioc_country_code`, `member_of`, `official_name`, `unemployment_rate`, `railway_traffic_side`, `gacs_id`, `archinform_location_id`, `encyclop\u00e6dia_britannica_online_id`, `gs1_country_code`, `page_banner`, `category_for_films_shot_at_this_location`, `mains_voltage`, `executive_body`, `located_in_time_zone`, `category_for_people_who_died_here`, `yso_id`, `anthem`, `office_held_by_head_of_state`, `life_expectancy`, `part_of`, `commons_category`, `top_level_internet_domain`, `shares_border_with`, `instance_of`, `highest_point`, `category_for_people_born_here`, `short_name`, `number_of_out_of_school_children`, `driving_side`, `uic_numerical_country_code`, `on_focus_list_of_wikimedia_project`, `lowest_point`, `treccani_id`, `iso_3166_1_numeric_code`, `official_language`, `pronunciation_audio`, `idref_id`, `giant_bomb_id`, `contains_the_administrative_territorial_entity`, `itu_letter_code`, `country_calling_code`, `statoids_id`, `library_of_congress_authority_id`, `iso_3166_1_alpha_2_code`, `flag`, `coordinate_location`, `fips_10_4_countries_and_regions`, `described_by_source`, `isni`, `brockhaus_enzyklop\u00e4die_online_id`, `klexikon_article_id`, `loc_and_marc_vocabularies_id`, `language_used`, `iab_code`, `legislative_body`, `comic_vine_id`, `category_of_associated_people`, `whos_on_first_id`, `world_encyclopedia_of_puppetry_arts_id`, `dr_topic_id`, `inaturalist_place_id`, `omegawiki_defined_meaning`, `hds_id`, `culture`, `geonlp_id`, `analysis_policy_observatory_term_id`, `category_for_maps`, `treccanis_dizionario_di_storia_id`, `french_vikidia_id`, `spanish_vikidia_id`, `online_pwn_encyclopedia_id`, `eurovoc_id`, `worldcat_identities_id`, `motto_text`, `open_data_portal`, `kbpedia_id`, `grove_art_online_id`, `store_norske_leksikon_id`, `rkd_thesaurus_id`, `pm20_geo_code`, `interlingual_index_id`, `jewish_encyclopedia_id_russian`, `central_bank`, `bbc_news_topic_id`, `economy_of_topic`, `tasteatlas_id`, `bhcl_uuid`, `uk_parliament_thesaurus_id`, `github_topic`, `wordnet_31_synset_id`, `namuwiki_id`, `demographics_of_topic`, `joconde_location_id`, `national_library_of_israel_j9u_id`, `zhihu_topic_id`, `idaigazetteer_id`, `encyclopedia_of_the_history_of_ukraine_id`, `krugosvet_article`, `schoenberg_database_of_manuscripts_place_id`, `armeniapedia_id`, `the_world_factbook_country_id`, `colon_classification`, `democracy_index`, `nese_id`, `der_spiegel_topic_id`, `museum_digital_place_id`, `ysa_id`, `postimees_topic_id`, `yle_topic_id`, `wikisimpsons_id`, `den_store_danske_id`, `urban_electric_transit_country_id`, `hashtag`, `m49_code`, `s\u00fcddeutsche_zeitung_topic_id`, `dagens_nyheter_topic_id`, `alltrails_trail_id`, `human_development_index`, `national_historical_museums_of_sweden_id`, `eu_knowledge_graph_item_id`, `obo_gazetteer_id`, `openstreetmap_element`, `happy_planet_index_score`, `gini_coefficient`, `official_website`, `retirement_age`, `vat_rate`, `larousse_id`, `nalt_id`]",
        "Response": "Table: `country`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Organisations (organisation_id, organisation_type, organisation_details)  VALUES (13, 'SPON', 'voluptas');\nDatabase State:\n- Table: Grants, Columns: [grant_id, organisation_id, grant_amount, grant_start_date, grant_end_date, other_details]\n- Table: Tasks, Columns: [task_id, project_id, task_details, eg_Agree_Objectives]\n- Table: Documents, Columns: [document_id, document_type_code, grant_id, sent_date, response_received_date, other_details]\n- Table: Project_Staff, Columns: [staff_id, project_id, role_code, date_from, date_to, other_details]",
        "Response": "Table: Organisations"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `ensembl_protein_id`, `uniprot_protein_id`, `encoded_by`, `biological_process`, `molecular_function`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Solute carrier family 35 member B4', 'mammalian protein found in Homo sapiens', 'ENSP00000367770', 'Q969S0', 'SLC35B4', 'UDP-xylose transmembrane transport', 'protein binding', 'integral component of membrane', 'Homo sapiens', 'NP_116215', 'protein', 'UAA transporter');\nDatabase State:\n- Table: `orthology`, Columns: [`label`, `description`, `entrez_gene_id`, `subclass_of`, `ensembl_gene_id`, `homologene_id`, `chromosome`, `found_in_taxon`, `refseq_rna_id`, `ensembl_transcript_id`, `encodes`, `ortholog`, `exact_match`, `strand_orientation`, `instance_of`, `cytogenetic_location`, `genomic_start`, `genomic_end`, `expressed_in`]\n- Table: `encoded_by`, Columns: [`label`, `description`, `entrez_gene_id`, `ensembl_gene_id`, `ensembl_transcript_id`, `homologene_id`, `refseq_rna_id`, `ortholog`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `expressed_in`]\n- Table: `encodes`, Columns: [`label`, `description`, `ensembl_protein_id`, `found_in_taxon`, `uniprot_protein_id`, `encoded_by`, `refseq_protein_id`, `biological_process`, `cell_component`, `molecular_function`, `instance_of`, `part_of`]\n- Table: `expressed_in`, Columns: [`label`, `description`, `foundational_model_of_anatomy_id`, `instance_of`, `uberon_id`, `subclass_of`]",
        "Response": "Table: `uaa_transporter`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (event_id, competitor_id, medal_id)  VALUES (63, 42391, 4);\nDatabase State:\n- Table: sport, Columns: [id, sport_name]\n- Table: competitor_event, Columns: [event_id, competitor_id, medal_id]\n- Table: person, Columns: [id, full_name, gender, height, weight]\n- Table: event, Columns: [id, sport_id, event_name]\n- Table: person_region, Columns: [person_id, region_id]\n- Table: city, Columns: [id, city_name]\n- Table: noc_region, Columns: [id, noc, region_name]\n- Table: games, Columns: [id, games_year, games_name, season]\n- Table: games_city, Columns: [games_id, city_id]\n- Table: medal, Columns: [id, medal_name]\n- Table: games_competitor, Columns: [id, games_id, person_id, age]",
        "Response": "Table: competitor_event"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone)  VALUES (196, 'VIA 57 WEST', 'VIA 57 WEST', 'Studio', replace('959 Ethel Viaduct\\nWest Efrainburgh, DE 40074','\\n',char(10)), 'Kathlyn', '681.772.2454');\nDatabase State:\n- Table: Apartment_Facilities, Columns: [apt_id, facility_code]\n- Table: Apartment_Buildings, Columns: [building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone]\n- Table: Apartment_Bookings, Columns: [apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date]\n- Table: Guests, Columns: [guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth]\n- Table: View_Unit_Status, Columns: [apt_id, apt_booking_id, status_date, available_yn]",
        "Response": "Table: Apartment_Buildings"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student_Addresses (student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details)  VALUES (8, 16, '2018-01-12 13:23:23', '2018-03-04 06:05:45', 683.0734999999999673, 'house');\nDatabase State:\n- Table: Addresses, Columns: [address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details]\n- Table: Teachers, Columns: [teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details]\n- Table: Detention, Columns: [detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details]\n- Table: Students, Columns: [student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details]\n- Table: Ref_Detention_Type, Columns: [detention_type_code, detention_type_description]\n- Table: Ref_Incident_Type, Columns: [incident_type_code, incident_type_description]",
        "Response": "Table: Student_Addresses"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (episode_id, category, person, role, credited)  VALUES ('S20-E13', 'Other crew', 'Andrea Schell', 'assistant to the producers', 'true');\nDatabase State:\n- Table: Credit, Columns: [episode_id, category, person, role, credited]\n- Table: Keyword, Columns: [episode_id, keyword]\n- Table: Vote, Columns: [episode_id, stars, votes, percent]\n- Table: `Episode`, Columns: [episode_id, season, episode, number_in_series, title, summary, air_date, episode_image, rating, votes]\n- Table: Character_Award, Columns: [award_id, character]\n- Table: Person, Columns: [name, birthdate, birth_name, birth_place, birth_region, birth_country, height_meters, nickname]",
        "Response": "Table: Credit"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price)  VALUES (2342, 'Cajueiro', 191, 1, 4, 'Rodolfo', 158589, 5164837, 0.989999999999999992);\nDatabase State:\n- Table: customers, Columns: [id, first_name, last_name, company, address, city, state, country, postal_code, phone, fax, email, support_rep_id]\n- Table: albums, Columns: [id, title, artist_id]\n- Table: playlists, Columns: [id, name]\n- Table: media_types, Columns: [id, name]\n- Table: employees, Columns: [id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state, country, postal_code, phone, fax, email]\n- Table: tracks, Columns: [id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price]\n- Table: artists, Columns: [id, name]\n- Table: playlist_tracks, Columns: [playlist_id, track_id]\n- Table: genres, Columns: [id, name]",
        "Response": "Table: tracks"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `beers` (id, brewery_id, abv, ibu, name, style, ounces)  VALUES (655, 365, 0.07000000000000000667, 22.0, 'Farmer Brown Ale', 'American Brown Ale', 16.0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `beers`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `instance_of`, `freebase_id`, `inaturalist_place_id`, `geonames_id`)  VALUES ('Commune of Giteranyi', 'commune in Muyinga Province, Burundi', '-2.52222222', 'Burundi', 'Muyinga Province', 'commune of Burundi', '/m/0jl0fc1', '19497.0', '7670598.0');\nDatabase State:\n- Table: `commune_of_burundi`, Columns: [`label`, `description`, `coordinate_location`, `country`, `located_in_the_administrative_territorial_entity`, `instance_of`, `freebase_id`, `inaturalist_place_id`, `geonames_id`]\n- Table: `administrative_centre`, Columns: [`label`, `description`, `country`, `capital`, `named_after`, `iso_3166_2_code`, `shares_border_with`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `contains_the_administrative_territorial_entity`, `topics_main_category`, `instance_of`, `freebase_id`, `fips_10_4_countries_and_regions`, `geonames_id`, `area`, `locator_map_image`, `elevation_above_sea_level`, `whos_on_first_id`, `official_name`, `located_in_time_zone`, `population`, `native_label`, `geoshape`, `inaturalist_place_id`]\n- Table: `eponym`, Columns: [`label`, `description`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `country`, `instance_of`, `freebase_id`, `geonames_id`, `capital_of`, `whos_on_first_id`, `native_label`, `official_name`, `located_in_time_zone`, `population`, `kbpedia_id`, `national_library_of_israel_j9u_id`, `elevation_above_sea_level`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `country`, `capital`, `named_after`, `iso_3166_2_code`, `shares_border_with`, `coordinate_location`, `located_in_the_administrative_territorial_entity`, `contains_the_administrative_territorial_entity`, `topics_main_category`, `instance_of`, `freebase_id`, `fips_10_4_countries_and_regions`, `geonames_id`, `area`, `locator_map_image`, `elevation_above_sea_level`, `official_name`, `located_in_time_zone`, `population`, `native_label`, `geoshape`, `inaturalist_place_id`, `whos_on_first_id`]",
        "Response": "Table: `commune_of_burundi`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO sales_in_weather (date, store_nbr, item_nbr, units)  VALUES ('2013-07-03', 19, 46, 0);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `car_names` (`MakeId`)  VALUES (278, 'toyota', 'toyota celica gt liftback');\nDatabase State:\n- Table: `car_makers`, Columns: [`Id`]\n- Table: `car_names`, Columns: [`MakeId`]",
        "Response": "Table: `car_names`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`Poker_Player_ID`, `People_ID`, `Final_Table_Made`, `Best_Finish`, `Money_Rank`, `Earnings`)  VALUES (3, 5, 21.0, 1.0, 166.0, 104871.0);\nDatabase State:\n- Table: `poker_player`, Columns: [`Poker_Player_ID`, `People_ID`, `Final_Table_Made`, `Best_Finish`, `Money_Rank`, `Earnings`]",
        "Response": "Table: `poker_player`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (SalesID, SalesPersonID, CustomerID, ProductID, Quantity)  VALUES (6663917, 3, 19680, 411, 411);\nDatabase State:\n- Table: Products, Columns: [ProductID, Name, Price]",
        "Response": "Table: Sales"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `player` (`Player_ID`, `Sponsor_name`, `Player_name`, `Gender`, `Residence`, `Occupation`, `Votes`, `Rank`)  VALUES (10, 'Selkirk\u2014Interlake', 'Patricia Cordner', 'F', 'Selkirk', 'Retired', 9506, '2nd');\nDatabase State:\n- Table: `match_result`, Columns: [`Rank`, `Club_ID`, `Gold`, `Big_Silver`, `Small_Silver`, `Bronze`, `Points`]\n- Table: `player_coach`, Columns: [`Player_ID`, `Coach_ID`, `Starting_year`]\n- Table: `coach`, Columns: [`Coach_ID`, `Coach_name`, `Gender`, `Club_ID`, `Rank`]\n- Table: `club`, Columns: [`Club_ID`, `Club_name`, `Region`, `Start_year`]\n- Table: `player`, Columns: [`Player_ID`, `Sponsor_name`, `Player_name`, `Gender`, `Residence`, `Occupation`, `Votes`, `Rank`]",
        "Response": "Table: `player`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (course_id, courseLevel)  VALUES (119, 'Level_500');\nDatabase State:\n- Table: taughtBy, Columns: [course_id, p_id]\n- Table: course, Columns: [course_id, courseLevel]",
        "Response": "Table: course"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('CCNE2 protein', 'human protein (annotated by UniProtKB/TrEMBL I6L961)', 'I6L961', 'CCNE2', 'nan', 'regulation of cell cycle', 'nan', 'nucleus', 'Cyclin, C-terminal domain', 'Homo sapiens', 'nan', 'protein', 'Cyclin E');\nDatabase State:\n- Table: `encoded_by`, Columns: [`label`, `description`, `ensembl_gene_id`, `ortholog`, `ensembl_transcript_id`, `entrez_gene_id`, `homologene_id`, `refseq_rna_id`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `chromosome`, `instance_of`, `expressed_in`]",
        "Response": "Table: `cyclin_c_terminal_domain_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `coordinate_location`, `instance_of`, `image`, `country`, `located_in_the_administrative_territorial_entity`, `commons_category`, `freebase_id`)  VALUES ('Prestatyn', 'town in  Denbighshire, Wales', '53.331', 'town', 'Prestatyn-Panorama.jpg', 'United Kingdom', 'Denbighshire', 'Prestatyn', '/m/02xdcz');\nDatabase State:\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `commons_category`, `country`, `instance_of`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `topics_main_category`, `freebase_id`, `official_website`, `image`, `geonames_id`, `locator_map_image`, `inception`, `capital`, `population`, `legislative_body`, `area`, `openstreetmap_relation_id`, `archinform_location_id`]\n- Table: `physical_location`, Columns: [`label`, `description`, `coordinate_location`, `instance_of`, `image`, `country`, `located_in_the_administrative_territorial_entity`, `commons_category`, `freebase_id`]",
        "Response": "Table: `physical_location`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `encodes` (`label`, `description`, `subclass_of`, `uniprot_protein_id`, `found_in_taxon`, `encoded_by`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Hypothetical protein Cj1659', 'microbial protein found in Campylobacter jejuni subsp. jejuni NCTC 11168 = ATCC 700819', 'protein', 'Q0P7X0', 'Campylobacter jejuni subsp. jejuni NCTC 11168 = ATCC 700819', 'hypothetical protein Cj1659', 'protein', 'YP_002345027', 'Periplasmic metal-binding protein Tp34-type');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encodes`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `celtic_cross` (`label`, `description`, `instance_of`, `coordinate_location`, `image`, `located_in_the_administrative_territorial_entity`, `country`, `historic_county`)  VALUES ('Romford War Memorial', 'war memorial in London', 'war memorial', '51.581419651786', 'Romford War Memorial (geograph 5971115).jpg', 'London Borough of Havering', 'United Kingdom', 'Essex');\nDatabase State:\n- Table: `jurisdiction`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `locator_map_image`, `flag_image`, `different_from`, `shares_border_with`, `population`, `flag`, `catalog_code`, `part_of`, `factgrid_item_id`]\n- Table: `administrative_territorial_entity`, Columns: [`label`, `description`, `commons_category`, `located_in_the_administrative_territorial_entity`, `country`, `coordinate_location`, `topics_main_category`, `freebase_id`, `instance_of`, `geonames_id`, `gss_code_2011`, `openstreetmap_relation_id`, `toid`, `historic_county`]\n- Table: `celtic_cross`, Columns: [`label`, `description`, `instance_of`, `coordinate_location`, `image`, `located_in_the_administrative_territorial_entity`, `country`, `historic_county`]\n- Table: `political_border`, Columns: [`label`, `description`, `coordinate_location`, `country`, `instance_of`, `shares_border_with`, `vision_of_britain_place_id`, `population`, `catalog_code`, `locator_map_image`, `factgrid_item_id`]\n- Table: `flag`, Columns: [`label`, `description`, `instance_of`, `image`, `applies_to_jurisdiction`, `country`, `color`, `freebase_id`]",
        "Response": "Table: `celtic_cross`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date)  VALUES ('M-L67958F', 'Maria', '', 'Larsson', 7, 135, '1389', '1992-03-27 00:00:00.0');\nDatabase State:\n- Table: discounts, Columns: [discounttype, stor_id, lowqty, highqty, discount]\n- Table: pub_info, Columns: [pub_id, logo, pr_info]\n- Table: titleauthor, Columns: [au_id, title_id, au_ord, royaltyper]",
        "Response": "Table: employee"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Student (StuID, LName, Fname, Age, Sex, Major, Advisor, city_code)  VALUES (1027, 'Brody', 'Paul', 18, 'M', 520, 8723, 'LOS');\nDatabase State:\n- Table: Has_Pet, Columns: [StuID, PetID]",
        "Response": "Table: Student"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS)  VALUES (7039, '2007-2008', 'Sweden U18 (all)', 'International-Jr', 'Regular Season', 14, 7, 6, 13, 6, 0);\nDatabase State:\n- Table: height_info, Columns: [height_id, height_in_cm, height_in_inch]\n- Table: weight_info, Columns: [weight_id, weight_in_kg, weight_in_lbs]\n- Table: SeasonStatus, Columns: [ELITEID, SEASON, TEAM, LEAGUE, GAMETYPE, GP, G, A, P, PIM, PLUSMINUS]\n- Table: PlayerInfo, Columns: [ELITEID, PlayerName, birthdate, birthyear, birthmonth, birthday, birthplace, nation, height, weight, position_info, shoots, draftyear, draftround, overall, overallby, CSS_rank, sum_7yr_GP, sum_7yr_TOI, GP_greater_than_0]",
        "Response": "Table: SeasonStatus"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO east_superstore (`Row ID`, `Order ID`, `Order Date`, `Ship Date`, `Ship Mode`, `Customer ID`, Region, `Product ID`, Sales, Quantity, Discount, Profit)  VALUES (9073, 'CA-2016-142055', '2016-05-08', '2016-05-10', 'First Class', 'AB-10255', 'East', 'OFF-PA-10003465', 37.93999999999999773, 2, 0.0, 18.21120000000000161);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: east_superstore"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Claims_Processing (Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID)  VALUES (243, 15, 'Settled', 1, 687);\nDatabase State:\n- Table: Policies, Columns: [Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date]\n- Table: Customers, Columns: [Customer_ID, Customer_Details]",
        "Response": "Table: Claims_Processing"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`id`, `brand`, `name`, `focal_length_mm`, `max_aperture`)  VALUES (2, 'Olympus', 'Olympus M.Zuiko Digital ED 45mm f/1.8', 45.0, 1.800000000000000044);\nDatabase State:\n- Table: `mountain`, Columns: [`id`, `name`, `Height`, `Prominence`, `Range`, `Country`]\n- Table: `photos`, Columns: [`id`, `mountain_id`, `color`]",
        "Response": "Table: `camera_lens`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (date, store_nbr, item_nbr, units)  VALUES ('2012-11-01', 3, 30, 0);\nDatabase State:\n- Table: relation, Columns: [store_nbr, station_nbr]\n- Table: weather, Columns: [station_nbr, date, tmax, tmin, tavg, depart, dewpoint, wetbulb, heat, cool, sunrise, sunset, codesum, snowfall, preciptotal, stnpressure, sealevel, resultspeed, resultdir, avgspeed]\n- Table: sales_in_weather, Columns: [date, store_nbr, item_nbr, units]",
        "Response": "Table: sales_in_weather"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`)  VALUES ('Enolase Bfae_13450', 'microbial protein found in Brachybacterium faecium DSM 4810', 'C7MC78', 'Brachybacterium faecium DSM 4810', 'protein', 'enolase Bfae_13450', 'glycolytic process', 'magnesium ion binding', 'phosphopyruvate hydratase complex', 'Enolase, C-terminal TIM barrel domain', 'protein', 'YP_003154775', 'Enolase-like, N-terminal');\nDatabase State:\n- Table: `enolase_conserved_site_protein_family`, Columns: [`label`, `description`, `uniprot_protein_id`, `found_in_taxon`, `subclass_of`, `encoded_by`, `biological_process`, `molecular_function`, `cell_component`, `has_parts`, `instance_of`, `refseq_protein_id`, `part_of`]",
        "Response": "Table: `enolase_conserved_site_protein_family`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO institution_grads (unitid, year, gender, race, cohort, grad_cohort, grad_100, grad_150, grad_100_rate, grad_150_rate)  VALUES (184269, 2008, 'M', 'H', '4y bach', 'NULL', 'NULL', 'NULL', 'NULL', 'NULL');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: institution_grads"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (App, Category, Rating, Reviews, Size, Installs, Type, Price, `Content Rating`, Genres)  VALUES ('CricQuick', 'SPORTS', 5.0, 17, '1.5M', '50+', 'Free', '0', 'Everyone', 'Sports');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `playstore`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO location (id_restaurant, street_num, street_name, city)  VALUES (969, 410, 'west a st', 'hayward');\nDatabase State:\n- Table: generalinfo, Columns: [id_restaurant, label, food_type, city, review]",
        "Response": "Table: location"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (user_id, user_yelping_since_year, user_average_stars, user_votes_funny, user_votes_useful, user_votes_cool, user_review_count, user_fans)  VALUES (5500, 2012, '3.5', 'Low', 'Medium', 'Low', 'Medium', 'None');\nDatabase State:\n- Table: Attributes, Columns: [attribute_id, attribute_name]\n- Table: Categories, Columns: [category_id, category_name]\n- Table: `Users`, Columns: [user_id, user_yelping_since_year, user_average_stars, user_votes_funny, user_votes_useful, user_votes_cool, user_review_count, user_fans]\n- Table: `Tips`, Columns: [business_id, user_id, likes, tip_length]\n- Table: Years, Columns: [year_id, actual_year]\n- Table: `Business`, Columns: [business_id, active, city, state, stars, review_count]\n- Table: `Users_Compliments`, Columns: [compliment_id, user_id, number_of_compliments]\n- Table: Days, Columns: [day_id, day_of_week]\n- Table: `Business_Attributes`, Columns: [attribute_id, business_id, attribute_value]\n- Table: `Elite`, Columns: [user_id, year_id]\n- Table: Compliments, Columns: [compliment_id, compliment_type]\n- Table: `Checkins`, Columns: [business_id, day_id, label_time_0, label_time_1, label_time_2, label_time_3, label_time_4, label_time_5, label_time_6, label_time_7, label_time_8, label_time_9, label_time_10, label_time_11, label_time_12, label_time_13, label_time_14, label_time_15, label_time_16, label_time_17, label_time_18, label_time_19, label_time_20, label_time_21, label_time_22, label_time_23]\n- Table: `Business_Hours`, Columns: [business_id, day_id, opening_time, closing_time]",
        "Response": "Table: `Users`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO titles (title_id, title, type, pub_id, price, advance, royalty, ytd_sales, notes, pubdate)  VALUES ('MC3026', 'The Psychology of Computer Cooking', 'UNDECIDED', '0877', NULL, NULL, NULL, NULL, NULL, '2014-11-07 10:39:37.0');\nDatabase State:\n- Table: discounts, Columns: [discounttype, stor_id, lowqty, highqty, discount]\n- Table: publishers, Columns: [pub_id, pub_name, city, state, country]\n- Table: roysched, Columns: [title_id, lorange, hirange, royalty]\n- Table: titleauthor, Columns: [au_id, title_id, au_ord, royaltyper]\n- Table: employee, Columns: [emp_id, fname, minit, lname, job_id, job_lvl, pub_id, hire_date]\n- Table: sales, Columns: [stor_id, ord_num, ord_date, qty, payterms, title_id]\n- Table: pub_info, Columns: [pub_id, logo, pr_info]",
        "Response": "Table: titles"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `entrez_gene_id`, `subclass_of`, `encodes`, `found_in_taxon`, `strand_orientation`, `genomic_end`, `genomic_start`, `instance_of`, `ncbi_locus_tag`)  VALUES ('50S ribosomal protein L36 LSL_1412', 'microbial gene found in Lactobacillus salivarius UCC118', '3977713', 'gene', '50S ribosomal protein L36 LSL_1412', 'Lactobacillus salivarius UCC118', 'reverse strand', '1484834.0', '1484721.0', 'gene', 'LSL_1412');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `encoded_by`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `administrative_territorial_entity` (`label`, `description`, `commons_category`, `instance_of`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `country`, `topics_main_category`, `freebase_id`, `geonames_id`, `population`, `area`, `uk_parliament_thesaurus_id`, `gss_code_2011`, `geoshape`, `openstreetmap_relation_id`, `image`, `gazetteer_for_scotland_place_id`, `whos_on_first_id`, `catalog_code`, `authority`, `carbon_footprint`, `toid`, `inaturalist_place_id`)  VALUES ('Highland', 'council area in the Scottish Highlands', 'Highland (council area)', 'Scottish council area', 'Scotland', '57.5', 'United Kingdom', 'Category:Highland (council area)', '/m/011wlf', '2646944', 235540.0, 25657.14649999999893, '10711.0', 'S12000017', 'Data:Highland.map', '1433249.0', '00 1448 Gairloch - Schottland.jpg', 'councils/councilfirst17', '85683747.0', '18.0', 'The Highland Council', 321198.1099999999861, '7000000000029638.0', '49296.0');\nDatabase State:\n- Table: `governing_body`, Columns: [`label`, `description`, `country`, `instance_of`, `bbc_things_id`, `official_website`, `whatdotheyknow_organisation_id`, `inception`, `viaf_id`, `uk_parliament_thesaurus_id`, `gss_code_2011`, `twitter_username`, `social_media_followers`]\n- Table: `historic_county`, Columns: [`label`, `description`, `commons_category`, `instance_of`, `located_in_the_administrative_territorial_entity`, `coordinate_location`, `country`, `described_by_source`, `population`, `vision_of_britain_place_id`, `locator_map_image`, `gazetteer_for_scotland_place_id`, `genuki_id`, `catalog_code`, `factgrid_item_id`, `shares_border_with`]",
        "Response": "Table: `administrative_territorial_entity`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `nucleosome_assembly_protein_nap` (`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `biological_process`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`)  VALUES ('Nucleosome assembly protein 1 like 4', 'mammalian protein found in Homo sapiens', 'Q99733', 'NAP1L4', 'ENSP00000369915', 'nucleosome assembly', 'nucleus', 'Homo sapiens', 'NP_005960', 'protein', 'NAP-like superfamily');\nDatabase State:\n- Table: `chromosome`, Columns: [`label`, `description`, `refseq_genome_id`, `found_in_taxon`, `instance_of`]\n- Table: `biological_process`, Columns: [`label`, `description`, `gene_ontology_id`, `subclass_of`, `exact_match`, `instance_of`]\n- Table: `encodes`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `biological_process`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]\n- Table: `nucleosome_assembly_protein_nap`, Columns: [`label`, `description`, `uniprot_protein_id`, `encoded_by`, `ensembl_protein_id`, `biological_process`, `cell_component`, `found_in_taxon`, `refseq_protein_id`, `instance_of`, `part_of`]",
        "Response": "Table: `nucleosome_assembly_protein_nap`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `quadrangle_on_venus` (`label`, `description`, `instance_of`, `located_on_astronomical_body`, `named_after`, `official_name`, `described_at_url`, `short_name`, `google_knowledge_graph_id`)  VALUES ('Meskhent Tessera quadrangle', 'quadrangle on Venus', 'quadrangle on Venus', 'Venus', 'Meskhent Tessera', 'Meskhent Tessera', 'https://planetarynames.wr.usgs.gov/images/v3_comp.pdf', 'V-3', '/g/11g72f9ml7');\nDatabase State:\n- Table: `quadrangle_on_venus`, Columns: [`label`, `description`, `instance_of`, `located_on_astronomical_body`, `named_after`, `official_name`, `described_at_url`, `short_name`, `google_knowledge_graph_id`]",
        "Response": "Table: `quadrangle_on_venus`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO `user_reviews` (App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity)  VALUES ('Carousell: Snap-Sell, Chat-Buy', 'nan', 'nan', 'nan', 'nan');\nDatabase State:\n- Table: `user_reviews`, Columns: [App, Translated_Review, Sentiment, Sentiment_Polarity, Sentiment_Subjectivity]",
        "Response": "Table: `user_reviews`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO Batsman_Scored (Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No)  VALUES (501241, 6, 3, 6, 2);\nDatabase State:\n- Table: Player, Columns: [Player_Id, Player_Name, DOB, Batting_hand, Bowling_skill, Country_Name]\n- Table: Wicket_Taken, Columns: [Match_Id, Over_Id, Ball_Id, Player_Out, Kind_Out, Fielders, Innings_No]\n- Table: Win_By, Columns: [Win_Id, Win_Type]\n- Table: City, Columns: [City_Id, City_Name, Country_id]\n- Table: Batsman_Scored, Columns: [Match_Id, Over_Id, Ball_Id, Runs_Scored, Innings_No]\n- Table: Bowling_Style, Columns: [Bowling_Id, Bowling_skill]\n- Table: Outcome, Columns: [Outcome_Id, Outcome_Type]\n- Table: Match, Columns: [Match_Id, Team_1, Team_2, Match_Date, Season_Id, Venue_Id, Toss_Winner, Toss_Decide, Win_Type, Win_Margin, Outcome_type, Match_Winner, Man_of_the_Match]\n- Table: Rolee, Columns: [Role_Id, Role_Desc]\n- Table: Venue, Columns: [Venue_Id, Venue_Name, City_Id]\n- Table: Extra_Type, Columns: [Extra_Id, Extra_Name]",
        "Response": "Table: Batsman_Scored"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`journalist_ID`, `Name`, `Nationality`, `Age`, `Years_working`)  VALUES (2, 'Fred Keenor', 'Wales', '27', 5);\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `journalist`"
    },
    {
        "Instruction": "Predict the table for this example:\nQuery: INSERT INTO (`label`, `description`, `country`, `instance_of`, `terminus`, `state_of_use`, `srgb_color_hex_triplet`)  VALUES ('U3', 'underground line in Frankfurt', 'Germany', 'light rail service', 'S\u00fcdbahnhof', 'in use', '635DA5');\nDatabase State:\nNo table exists yet.",
        "Response": "Table: `light_rail_service`"
    }
]